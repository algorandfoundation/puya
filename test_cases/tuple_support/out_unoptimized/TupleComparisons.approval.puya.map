{
  "version": 3,
  "sources": [
    "../tuple_comparisons.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAKQ;;;AACA;;;AACO;AAAP;AAMR;;;AAGQ;AAEE;AAHC;AAEY;;AAAf;;;AAFG;AAAA;AAAA;AAAP;AAKI;AAEE;AAHA;AAEa;;AAAf;;;AAFE;AAAA;AAAA;AAIC;AAAP;AAEQ;AACJ;AADG;AAEY;;AAAf;;;AAFG;AAAA;AAAA;AAAP;AAIO;AACH;AADE;AAEa;;AAAf;;;AAFE;AAAA;AAAA;AAIC;AAAP;AAEQ;AAA0B;AAA3B;AAAqD;;AAAf;;;AAA1B;AAAZ;AAAA;AAAP;AACO;AAA0B;AAA3B;AAAqD;;AAAf;;;AAA1B;AAAZ;AAAA;AACC;AAAP;;AAcJ;;;AAEQ;;AAAA;AAAJ;AACA;;AAAA;AAdJ;;;AAGU;AACC;AAAP;AAGM;AACC;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 3 2 0"
    },
    "7": {
      "op": "bytecblock \"abc\""
    },
    "13": {
      "callsub": "test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval",
      "op": "callsub test_tuple_cmp_eval"
    },
    "16": {
      "callsub": "test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty",
      "op": "callsub test_tuple_cmp_empty"
    },
    "19": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "20": {
      "op": "return",
      "stack_out": []
    },
    "21": {
      "subroutine": "test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval",
      "params": {},
      "block": "test_tuple_cmp_eval",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "24": {
      "op": "bytec_0 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "25": {
      "op": "dup",
      "stack_out": [
        "\"abc\"",
        "\"abc\""
      ]
    },
    "26": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "27": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "42"
      ]
    },
    "29": {
      "callsub": "test_cases.tuple_support.tuple_comparisons.log_and_return",
      "op": "callsub log_and_return",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "32": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "awst_tmp%0#0"
      ]
    },
    "33": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "34": {
      "op": "||",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "35": {
      "op": "assert",
      "stack_out": []
    },
    "36": {
      "op": "bytec_0 // \"abc\"",
      "stack_out": [
        "\"abc\""
      ]
    },
    "37": {
      "op": "dup",
      "stack_out": [
        "\"abc\"",
        "\"abc\""
      ]
    },
    "38": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "39": {
      "op": "pushint 43 // 43",
      "defined_out": [
        "43",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "43"
      ]
    },
    "41": {
      "callsub": "test_cases.tuple_support.tuple_comparisons.log_and_return",
      "op": "callsub log_and_return",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "awst_tmp%1#0"
      ]
    },
    "44": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "awst_tmp%1#0 (copy)",
        "awst_tmp%1#0"
      ]
    },
    "45": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "46": {
      "op": "&&",
      "defined_out": [
        "tmp#0"
      ],
      "stack_out": [
        "tmp#0"
      ]
    },
    "47": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "48": {
      "op": "assert",
      "stack_out": []
    },
    "49": {
      "op": "bytec_0 // \"abc\"",
      "stack_out": [
        "\"abc\""
      ]
    },
    "50": {
      "op": "dup",
      "stack_out": [
        "\"abc\"",
        "\"abc\""
      ]
    },
    "51": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "52": {
      "op": "pushint 44 // 44",
      "defined_out": [
        "44",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "44"
      ]
    },
    "54": {
      "callsub": "test_cases.tuple_support.tuple_comparisons.log_and_return",
      "op": "callsub log_and_return",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "awst_tmp%2#0"
      ]
    },
    "57": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "awst_tmp%2#0 (copy)",
        "awst_tmp%2#0"
      ]
    },
    "58": {
      "op": "==",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "59": {
      "op": "||",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "60": {
      "op": "assert",
      "stack_out": []
    },
    "61": {
      "op": "bytec_0 // \"abc\"",
      "stack_out": [
        "\"abc\""
      ]
    },
    "62": {
      "op": "dup",
      "stack_out": [
        "\"abc\"",
        "\"abc\""
      ]
    },
    "63": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "64": {
      "op": "pushint 45 // 45",
      "defined_out": [
        "45",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "45"
      ]
    },
    "66": {
      "callsub": "test_cases.tuple_support.tuple_comparisons.log_and_return",
      "op": "callsub log_and_return",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "awst_tmp%3#0"
      ]
    },
    "69": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "awst_tmp%3#0 (copy)",
        "awst_tmp%3#0"
      ]
    },
    "70": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "71": {
      "op": "&&",
      "stack_out": [
        "tmp#0"
      ]
    },
    "72": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "73": {
      "op": "assert",
      "stack_out": []
    },
    "74": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "75": {
      "op": "intc_1 // 3",
      "defined_out": [
        "1",
        "3"
      ],
      "stack_out": [
        "1",
        "3"
      ]
    },
    "76": {
      "op": "!=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "77": {
      "op": "pushint 46 // 46",
      "defined_out": [
        "46",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "46"
      ]
    },
    "79": {
      "callsub": "test_cases.tuple_support.tuple_comparisons.log_and_return",
      "op": "callsub log_and_return",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "82": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "2"
      ]
    },
    "83": {
      "op": "!=",
      "defined_out": [
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "84": {
      "op": "||",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "85": {
      "op": "assert",
      "stack_out": []
    },
    "86": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "87": {
      "op": "intc_1 // 3",
      "stack_out": [
        "1",
        "3"
      ]
    },
    "88": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "89": {
      "op": "pushint 47 // 47",
      "defined_out": [
        "47",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "47"
      ]
    },
    "91": {
      "callsub": "test_cases.tuple_support.tuple_comparisons.log_and_return",
      "op": "callsub log_and_return",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "94": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "2"
      ]
    },
    "95": {
      "op": "==",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "96": {
      "op": "&&",
      "stack_out": [
        "tmp#0"
      ]
    },
    "97": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "98": {
      "op": "assert",
      "stack_out": []
    },
    "99": {
      "retsub": true,
      "op": "retsub"
    },
    "100": {
      "subroutine": "test_cases.tuple_support.tuple_comparisons.log_and_return",
      "params": {
        "val#0": "uint64"
      },
      "block": "log_and_return",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "103": {
      "op": "frame_dig -1",
      "defined_out": [
        "val#0 (copy)"
      ],
      "stack_out": [
        "val#0 (copy)"
      ]
    },
    "105": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "106": {
      "op": "log",
      "stack_out": []
    },
    "107": {
      "op": "frame_dig -1",
      "stack_out": [
        "val#0 (copy)"
      ]
    },
    "109": {
      "retsub": true,
      "op": "retsub"
    },
    "110": {
      "subroutine": "test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty",
      "params": {},
      "block": "test_tuple_cmp_empty",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "113": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "114": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "115": {
      "op": "assert",
      "stack_out": []
    },
    "116": {
      "op": "intc_3 // 0",
      "stack_out": [
        "0"
      ]
    },
    "117": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "118": {
      "op": "assert",
      "stack_out": []
    },
    "119": {
      "retsub": true,
      "op": "retsub"
    }
  }
}