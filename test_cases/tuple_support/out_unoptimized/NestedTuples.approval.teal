#pragma version 10
#pragma typetrack false

// test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 8 1 2
    bytecblock 0x 0x151f7c75 "There" "Hi" "build_nested_call_count" "box" "twm" 0x0000000000000001 0x00 0x0000000000000000 "pwl" "hi"
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_call___init__@1

main_call___init__@1:
    callsub __init__
    b main_after_if_else@2

main_after_if_else@2:
    callsub approval_program
    return


// test_cases.tuple_support.nested_tuples.get_sender_inefficiently() -> bytes:
get_sender_inefficiently:
    b get_sender_inefficiently_block@0

get_sender_inefficiently_block@0:
    // tuple_support/nested_tuples.py:181
    // log("Order is important")
    pushbytes "Order is important"
    log
    // tuple_support/nested_tuples.py:182
    // return Txn.sender
    txn Sender
    retsub


// test_cases.tuple_support.nested_tuples.simple_tup(a: uint64, b: uint64) -> uint64, uint64:
simple_tup:
    // tuple_support/nested_tuples.py:185-186
    // @subroutine(inline=False)
    // def simple_tup(a: UInt64, b: UInt64) -> SimpleTup:
    proto 2 2
    b simple_tup_block@0

simple_tup_block@0:
    // tuple_support/nested_tuples.py:187
    // log("I'm just a simple tup")
    pushbytes "I'm just a simple tup"
    log
    // tuple_support/nested_tuples.py:188
    // return SimpleTup(a, b)
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.tuple_support.nested_tuples.echo(s: bytes) -> bytes:
echo:
    // tuple_support/nested_tuples.py:191-192
    // @subroutine(inline=False)
    // def echo(s: String) -> String:
    proto 1 1
    b echo_block@0

echo_block@0:
    // tuple_support/nested_tuples.py:193
    // log("Is there an echo in here?")
    pushbytes "Is there an echo in here?"
    log
    // tuple_support/nested_tuples.py:194
    // return s
    frame_dig -1
    retsub


// test_cases.tuple_support.nested_tuples.test_rearrange(_a: bytes, args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: bytes, args.2.1.1: bytes, _b: bytes) -> bytes, uint64, uint64, uint64, bytes:
test_rearrange:
    // tuple_support/nested_tuples.py:197-200
    // @subroutine
    // def test_rearrange(
    //     _a: String, args: tuple[UInt64, UInt64, tuple[UInt64, tuple[String, String]]], _b: String
    // ) -> tuple[String, UInt64, tuple[UInt64, UInt64, tuple[String]]]:
    proto 7 5
    b test_rearrange_block@0

test_rearrange_block@0:
    // tuple_support/nested_tuples.py:201
    // (a, b, (c, (d, e))) = args
    frame_dig -6
    frame_dig -5
    frame_dig -4
    frame_dig -3
    frame_dig -2
    cover 1
    // tuple_support/nested_tuples.py:203
    // return d, a, (b, c, (e,))
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    retsub


// test_cases.tuple_support.nested_tuples.test_swap(args.0: bytes, args.1: bytes) -> bytes, bytes:
test_swap:
    // tuple_support/nested_tuples.py:206-207
    // @subroutine
    // def test_swap(args: tuple[String, String]) -> tuple[String, String]:
    proto 2 2
    b test_swap_block@0

test_swap_block@0:
    // tuple_support/nested_tuples.py:208
    // (a, b) = args
    frame_dig -2
    frame_dig -1
    // tuple_support/nested_tuples.py:209
    // return b, a
    uncover 1
    retsub


// test_cases.tuple_support.nested_tuples.test_intrinsics(num1: uint64, num2: uint64) -> void:
test_intrinsics:
    // tuple_support/nested_tuples.py:212-213
    // @subroutine
    // def test_intrinsics(num1: UInt64, num2: UInt64) -> None:
    proto 2 0
    b test_intrinsics_block@0

test_intrinsics_block@0:
    // tuple_support/nested_tuples.py:214
    // nt = (UInt64(1), op.addw(num1, num2), UInt64(42))
    frame_dig -2
    frame_dig -1
    addw
    cover 1
    intc_2 // 1
    // tuple_support/nested_tuples.py:215
    // assert nt[0] == 1
    intc_2 // 1
    ==
    assert
    // tuple_support/nested_tuples.py:214
    // nt = (UInt64(1), op.addw(num1, num2), UInt64(42))
    pushint 42 // 42
    // tuple_support/nested_tuples.py:216
    // assert nt[-1] == 42
    pushint 42 // 42
    ==
    assert
    // tuple_support/nested_tuples.py:217
    // assert nt[1] == (0, num1 + num2)  # type: ignore[comparison-overlap]
    dup
    intc_0 // 0
    ==
    frame_dig -2
    frame_dig -1
    +
    dig 3
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:218
    // assert nt[1][:1] == (0,)  # type: ignore[comparison-overlap]
    dup
    intc_0 // 0
    ==
    assert
    // tuple_support/nested_tuples.py:219
    // assert nt[1][1:] == (num1 + num2,)
    frame_dig -2
    frame_dig -1
    +
    dig 2
    ==
    assert
    // tuple_support/nested_tuples.py:221
    // assert x == 0
    intc_0 // 0
    ==
    assert
    // tuple_support/nested_tuples.py:222
    // assert y == num1 + num2
    frame_dig -2
    frame_dig -1
    +
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_slicing() -> void:
test_nested_slicing:
    b test_nested_slicing_block@0

test_nested_slicing_block@0:
    // tuple_support/nested_tuples.py:236
    // UInt64(4),
    pushint 4 // 4
    // tuple_support/nested_tuples.py:242
    // assert b[-1] == 4
    pushint 4 // 4
    ==
    assert
    // tuple_support/nested_tuples.py:229
    // UInt64(2),
    intc_3 // 2
    // tuple_support/nested_tuples.py:243
    // assert ((a, c),) == ((2, 5),)  # type: ignore[comparison-overlap]
    intc_3 // 2
    ==
    // tuple_support/nested_tuples.py:238
    // UInt64(5),
    pushint 5 // 5
    // tuple_support/nested_tuples.py:243
    // assert ((a, c),) == ((2, 5),)  # type: ignore[comparison-overlap]
    pushint 5 // 5
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:233
    // String("a"),
    pushbytes "a"
    // tuple_support/nested_tuples.py:244
    // assert b[1][:] == ("a", "b")  # type: ignore[comparison-overlap]
    pushbytes "a"
    ==
    // tuple_support/nested_tuples.py:234
    // String("b"),
    pushbytes "b"
    // tuple_support/nested_tuples.py:244
    // assert b[1][:] == ("a", "b")  # type: ignore[comparison-overlap]
    pushbytes "b"
    ==
    &&
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: uint64) -> void:
test_nested_singles:
    // tuple_support/nested_tuples.py:247-248
    // @subroutine
    // def test_nested_singles(one: UInt64, *, reassign: bool) -> None:
    proto 2 0
    b test_nested_singles_block@0

test_nested_singles_block@0:
    // tuple_support/nested_tuples.py:250
    // (UInt64(0),),
    intc_0 // 0
    // tuple_support/nested_tuples.py:249-253
    // s = (
    //     (UInt64(0),),
    //     (one,),
    //     (UInt64(2),),
    // )
    frame_dig -2
    dup
    // tuple_support/nested_tuples.py:252
    // (UInt64(2),),
    intc_3 // 2
    // tuple_support/nested_tuples.py:249-253
    // s = (
    //     (UInt64(0),),
    //     (one,),
    //     (UInt64(2),),
    // )
    cover 1
    // tuple_support/nested_tuples.py:250
    // (UInt64(0),),
    intc_0 // 0
    // tuple_support/nested_tuples.py:254
    // assert s[0][0] == 0
    intc_0 // 0
    ==
    assert
    // tuple_support/nested_tuples.py:250
    // (UInt64(0),),
    intc_0 // 0
    // tuple_support/nested_tuples.py:255
    // assert s[0] == (0,)  # type: ignore[comparison-overlap]
    intc_0 // 0
    ==
    assert
    // tuple_support/nested_tuples.py:256
    // assert s[1][0] == 1
    dup
    intc_2 // 1
    ==
    assert
    // tuple_support/nested_tuples.py:257
    // assert s[1] == (one,)
    dup
    frame_dig -2
    ==
    assert
    // tuple_support/nested_tuples.py:252
    // (UInt64(2),),
    intc_3 // 2
    // tuple_support/nested_tuples.py:258
    // assert s[2][0] == 2
    intc_3 // 2
    ==
    assert
    // tuple_support/nested_tuples.py:252
    // (UInt64(2),),
    intc_3 // 2
    // tuple_support/nested_tuples.py:259
    // assert s[2] == (2,)  # type: ignore[comparison-overlap]
    intc_3 // 2
    ==
    assert
    // tuple_support/nested_tuples.py:261
    // if reassign:
    frame_dig -1
    bz test_nested_singles_after_if_else@2
    b test_nested_singles_if_body@1

test_nested_singles_if_body@1:
    // tuple_support/nested_tuples.py:263
    // (UInt64(3),),
    pushint 3 // 3
    // tuple_support/nested_tuples.py:262-266
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    frame_bury 0
    // tuple_support/nested_tuples.py:264
    // (UInt64(4),),
    pushint 4 // 4
    // tuple_support/nested_tuples.py:262-266
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    frame_bury 1
    // tuple_support/nested_tuples.py:265
    // (UInt64(5),),
    pushint 5 // 5
    // tuple_support/nested_tuples.py:262-266
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    frame_bury 2
    b test_nested_singles_after_if_else@2

test_nested_singles_after_if_else@2:
    // tuple_support/nested_tuples.py:267
    // assert s[0][0] == (3 if reassign else 0)
    intc_0 // 0
    pushint 3 // 3
    frame_dig -1
    select
    frame_dig 0
    ==
    assert
    // tuple_support/nested_tuples.py:268
    // (tmp,) = s[2]
    frame_dig 2
    // tuple_support/nested_tuples.py:269
    // assert tmp == (5 if reassign else 2)
    intc_3 // 2
    pushint 5 // 5
    frame_dig -1
    select
    ==
    assert
    // tuple_support/nested_tuples.py:270
    // assert t == (one,)
    frame_dig 3
    frame_dig -2
    ==
    assert
    // tuple_support/nested_tuples.py:272
    // s0, (s1,), s2 = s
    frame_dig 1
    dup
    // tuple_support/nested_tuples.py:273
    // s1 += one
    frame_dig -2
    +
    // tuple_support/nested_tuples.py:274
    // assert s1 == (5 if reassign else 2)
    intc_3 // 2
    pushint 5 // 5
    frame_dig -1
    select
    ==
    assert
    // tuple_support/nested_tuples.py:275
    // assert s[1][0] == (4 if reassign else 1)
    intc_2 // 1
    pushint 4 // 4
    frame_dig -1
    select
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_mutation() -> void:
test_nested_mutation:
    b test_nested_mutation_block@0

test_nested_mutation_block@0:
    // tuple_support/nested_tuples.py:282-284
    // arc4.DynamicArray(
    //     arc4.UInt64(0),
    // ),
    intc_2 // 1
    itob
    extract 6 2
    // tuple_support/nested_tuples.py:283
    // arc4.UInt64(0),
    bytec 9 // 0x0000000000000000
    // tuple_support/nested_tuples.py:282-284
    // arc4.DynamicArray(
    //     arc4.UInt64(0),
    // ),
    concat
    // tuple_support/nested_tuples.py:287
    // x[0][0].append(arc4.UInt64(1))
    bytec_0 // 0x
    bytec 7 // 0x0000000000000001
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    // tuple_support/nested_tuples.py:288
    // assert x[0][0].length == 2
    intc_0 // 0
    extract_uint16
    intc_3 // 2
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_iteration() -> void:
test_nested_iteration:
    // tuple_support/nested_tuples.py:291-292
    // @subroutine
    // def test_nested_iteration() -> None:
    proto 0 0
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    b test_nested_iteration_block@0

test_nested_iteration_block@0:
    // tuple_support/nested_tuples.py:295
    // total = UInt64(0)
    intc_0 // 0
    intc_0 // 0
    // tuple_support/nested_tuples.py:293
    // x = UInt64(1)
    intc_2 // 1
    // tuple_support/nested_tuples.py:294
    // y = UInt64(2)
    intc_3 // 2
    b test_nested_iteration_for_body@1

test_nested_iteration_for_body@1:
    // tuple_support/nested_tuples.py:298
    // a, b = t
    frame_dig 5
    frame_dig 6
    // tuple_support/nested_tuples.py:299
    // total += a + b
    +
    frame_dig 3
    +
    frame_bury 3
    b test_nested_iteration_for_footer@2

test_nested_iteration_for_footer@2:
    // tuple_support/nested_tuples.py:297
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_dig 4
    switch test_nested_iteration_for_header_1@3 test_nested_iteration_for_header_2@4 test_nested_iteration_for_header_3@5
    b test_nested_iteration_after_for@6

test_nested_iteration_after_for@6:
    intc_0 // 0
    frame_bury 2
    // tuple_support/nested_tuples.py:293
    // x = UInt64(1)
    intc_2 // 1
    // tuple_support/nested_tuples.py:301
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:294
    // y = UInt64(2)
    intc_3 // 2
    // tuple_support/nested_tuples.py:301
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 1
    b test_nested_iteration_for_body@7

test_nested_iteration_for_body@7:
    // tuple_support/nested_tuples.py:302
    // total += a + b
    frame_dig 0
    frame_dig 1
    +
    frame_dig 3
    +
    frame_bury 3
    b test_nested_iteration_for_footer@8

test_nested_iteration_for_footer@8:
    // tuple_support/nested_tuples.py:301
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_dig 2
    switch test_nested_iteration_for_header_1@9 test_nested_iteration_for_header_2@10 test_nested_iteration_for_header_3@11
    b test_nested_iteration_after_for@12

test_nested_iteration_after_for@12:
    // tuple_support/nested_tuples.py:304
    // assert total // 8 == 3
    frame_dig 3
    intc_1 // 8
    /
    pushint 3 // 3
    ==
    assert
    retsub

test_nested_iteration_for_header_3@11:
    pushint 3 // 3
    frame_bury 2
    // tuple_support/nested_tuples.py:294
    // y = UInt64(2)
    intc_3 // 2
    // tuple_support/nested_tuples.py:301
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:294
    // y = UInt64(2)
    intc_3 // 2
    // tuple_support/nested_tuples.py:301
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 1
    b test_nested_iteration_for_body@7

test_nested_iteration_for_header_2@10:
    intc_3 // 2
    frame_bury 2
    // tuple_support/nested_tuples.py:293
    // x = UInt64(1)
    intc_2 // 1
    // tuple_support/nested_tuples.py:301
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:293
    // x = UInt64(1)
    intc_2 // 1
    // tuple_support/nested_tuples.py:301
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 1
    b test_nested_iteration_for_body@7

test_nested_iteration_for_header_1@9:
    intc_2 // 1
    frame_bury 2
    // tuple_support/nested_tuples.py:294
    // y = UInt64(2)
    intc_3 // 2
    // tuple_support/nested_tuples.py:301
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:293
    // x = UInt64(1)
    intc_2 // 1
    // tuple_support/nested_tuples.py:301
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 1
    b test_nested_iteration_for_body@7

test_nested_iteration_for_header_3@5:
    pushint 3 // 3
    frame_bury 4
    // tuple_support/nested_tuples.py:294
    // y = UInt64(2)
    intc_3 // 2
    // tuple_support/nested_tuples.py:297
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 5
    // tuple_support/nested_tuples.py:294
    // y = UInt64(2)
    intc_3 // 2
    // tuple_support/nested_tuples.py:297
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 6
    b test_nested_iteration_for_body@1

test_nested_iteration_for_header_2@4:
    intc_3 // 2
    frame_bury 4
    // tuple_support/nested_tuples.py:293
    // x = UInt64(1)
    intc_2 // 1
    // tuple_support/nested_tuples.py:297
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 5
    // tuple_support/nested_tuples.py:293
    // x = UInt64(1)
    intc_2 // 1
    // tuple_support/nested_tuples.py:297
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 6
    b test_nested_iteration_for_body@1

test_nested_iteration_for_header_1@3:
    intc_2 // 1
    frame_bury 4
    // tuple_support/nested_tuples.py:294
    // y = UInt64(2)
    intc_3 // 2
    // tuple_support/nested_tuples.py:297
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 5
    // tuple_support/nested_tuples.py:293
    // x = UInt64(1)
    intc_2 // 1
    // tuple_support/nested_tuples.py:297
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 6
    b test_nested_iteration_for_body@1


// test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple[routing]() -> void:
store_tuple:
    b store_tuple_block@0

store_tuple_block@0:
    // tuple_support/nested_tuples.py:61
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    intc_3 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 2
    dup
    intc_1 // 8
    intc_1 // 8
    extract3
    cover 1
    dup
    pushint 16 // 16
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    dup
    intc_1 // 8
    extract_uint16
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    dig 4
    intc_3 // 2
    extract_uint16
    cover 1
    dig 5
    len
    cover 1
    uncover 6
    uncover 3
    uncover 3
    substring3
    uncover 5
    cover 1
    uncover 5
    uncover 5
    uncover 5
    uncover 5
    uncover 4
    uncover 5
    uncover 5
    uncover 5
    uncover 5
    uncover 5
    uncover 5
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple[routing]() -> void:
load_tuple:
    b load_tuple_block@0

load_tuple_block@0:
    // tuple_support/nested_tuples.py:65
    // @arc4.abimethod()
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple
    cover 5
    cover 4
    cover 3
    cover 2
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    concat
    cover 3
    itob
    bytec_0 // 0x
    uncover 1
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    pushint 12 // 12
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 12 // 12
    +
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    cover 1
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    pushint 18 // 18
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    uncover 1
    concat
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box[routing]() -> void:
store_tuple_in_box:
    b store_tuple_in_box_block@0

store_tuple_in_box_block@0:
    // tuple_support/nested_tuples.py:69
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    intc_1 // 8
    intc_1 // 8
    extract3
    btoi
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box[routing]() -> void:
is_tuple_in_box:
    b is_tuple_in_box_block@0

is_tuple_in_box_block@0:
    // tuple_support/nested_tuples.py:73
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    intc_1 // 8
    intc_1 // 8
    extract3
    btoi
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box
    bytec 8 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box[routing]() -> void:
load_tuple_from_box:
    b load_tuple_from_box_block@0

load_tuple_from_box_block@0:
    // tuple_support/nested_tuples.py:77
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    intc_1 // 8
    intc_1 // 8
    extract3
    btoi
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box[routing]() -> void:
maybe_load_tuple_from_box:
    b maybe_load_tuple_from_box_block@0

maybe_load_tuple_from_box_block@0:
    // tuple_support/nested_tuples.py:81
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    intc_1 // 8
    intc_1 // 8
    extract3
    btoi
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box
    cover 2
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    bytec_0 // 0x
    uncover 1
    concat
    bytec 8 // 0x00
    intc_0 // 0
    uncover 3
    setbit
    concat
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default[routing]() -> void:
load_tuple_from_box_or_default:
    b load_tuple_from_box_or_default_block@0

load_tuple_from_box_or_default_block@0:
    // tuple_support/nested_tuples.py:86
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    intc_1 // 8
    intc_1 // 8
    extract3
    btoi
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default[routing]() -> void:
load_tuple_from_local_state_or_default:
    b load_tuple_from_local_state_or_default_block@0

load_tuple_from_local_state_or_default_block@0:
    // tuple_support/nested_tuples.py:90
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple[routing]() -> void:
mutate_local_tuple:
    b mutate_local_tuple_block@0

mutate_local_tuple_block@0:
    // tuple_support/nested_tuples.py:95
    // @arc4.abimethod()
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple
    cover 3
    cover 2
    cover 1
    pushint 4 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    cover 4
    dup
    len
    pushint 4 // 4
    +
    cover 3
    uncover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    pushint 12 // 12
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 12 // 12
    +
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    cover 1
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    uncover 2
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method[routing]() -> void:
mutate_tuple_in_storage_currently_supported_method:
    b mutate_tuple_in_storage_currently_supported_method_block@0

mutate_tuple_in_storage_currently_supported_method_block@0:
    // tuple_support/nested_tuples.py:114
    // @arc4.abimethod()
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.run_tests[routing]() -> void:
run_tests:
    b run_tests_block@0

run_tests_block@0:
    // tuple_support/nested_tuples.py:120
    // @arc4.abimethod()
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
    bytec 8 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params[routing]() -> void:
nested_tuple_params:
    b nested_tuple_params_block@0

nested_tuple_params_block@0:
    // tuple_support/nested_tuples.py:149
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    intc_3 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 1
    dup
    intc_3 // 2
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    cover 1
    intc_3 // 2
    intc_1 // 8
    extract3
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    uncover 2
    cover 1
    uncover 2
    uncover 1
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params
    cover 2
    cover 1
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    cover 2
    dup
    len
    pushint 4 // 4
    +
    cover 1
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    pushint 10 // 10
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    uncover 5
    itob
    concat
    uncover 1
    concat
    uncover 2
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple[routing]() -> void:
named_tuple:
    b named_tuple_block@0

named_tuple_block@0:
    // tuple_support/nested_tuples.py:156
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    dup
    intc_1 // 8
    extract_uint16
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 2
    cover 1
    uncover 2
    uncover 1
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple
    cover 2
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushint 12 // 12
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 12 // 12
    +
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    cover 1
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params[routing]() -> void:
nested_named_tuple_params:
    b nested_named_tuple_params_block@0

nested_named_tuple_params_block@0:
    // tuple_support/nested_tuples.py:161
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    dup
    intc_1 // 8
    intc_1 // 8
    extract3
    cover 1
    dup
    pushint 16 // 16
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    dup
    intc_1 // 8
    extract_uint16
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    cover 1
    uncover 4
    uncover 4
    uncover 4
    uncover 3
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    callsub test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params
    cover 4
    cover 3
    cover 2
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    concat
    cover 3
    itob
    bytec_0 // 0x
    uncover 1
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    pushint 12 // 12
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 12 // 12
    +
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    cover 1
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    pushint 18 // 18
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.__init__() -> void:
__init__:
    b __init___block@0

__init___block@0:
    // tuple_support/nested_tuples.py:50
    // self.build_nested_call_count = UInt64(0)
    bytec 4 // "build_nested_call_count"
    intc_0 // 0
    app_global_put
    // tuple_support/nested_tuples.py:53
    // arr=arc4.DynamicArray[arc4.UInt64](),
    intc_0 // 0
    itob
    extract 6 2
    // tuple_support/nested_tuples.py:52
    // self.twm = TupleWithMutable(
    pushint 4 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 4 // 4
    +
    // tuple_support/nested_tuples.py:55
    // a=UInt64(),
    intc_0 // 0
    // tuple_support/nested_tuples.py:52
    // self.twm = TupleWithMutable(
    itob
    bytec_0 // 0x
    uncover 1
    concat
    // tuple_support/nested_tuples.py:56
    // b=Bytes(),
    bytec_0 // 0x
    // tuple_support/nested_tuples.py:52
    // self.twm = TupleWithMutable(
    len
    itob
    extract 6 2
    // tuple_support/nested_tuples.py:56
    // b=Bytes(),
    bytec_0 // 0x
    // tuple_support/nested_tuples.py:52
    // self.twm = TupleWithMutable(
    concat
    pushint 12 // 12
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 12 // 12
    +
    // tuple_support/nested_tuples.py:57
    // c=String(),
    bytec_0 // ""
    // tuple_support/nested_tuples.py:52
    // self.twm = TupleWithMutable(
    len
    itob
    extract 6 2
    // tuple_support/nested_tuples.py:57
    // c=String(),
    bytec_0 // ""
    // tuple_support/nested_tuples.py:52
    // self.twm = TupleWithMutable(
    concat
    cover 1
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    uncover 1
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    bytec 6 // "twm"
    // tuple_support/nested_tuples.py:52-59
    // self.twm = TupleWithMutable(
    //     arr=arc4.DynamicArray[arc4.UInt64](),
    //     child=Child(
    //         a=UInt64(),
    //         b=Bytes(),
    //         c=String(),
    //     ),
    // )
    uncover 1
    app_global_put
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple(pwl.parent.foo: uint64, pwl.parent.foo_arc: bytes, pwl.parent.child.a: uint64, pwl.parent.child.b: bytes, pwl.parent.child.c: bytes, pwl.children: bytes) -> void:
test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple:
    // tuple_support/nested_tuples.py:61-62
    // @arc4.abimethod()
    // def store_tuple(self, pwl: ParentWithList) -> None:
    proto 6 0
    b test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_block@0:
    // tuple_support/nested_tuples.py:63
    // self.pwl = pwl
    frame_dig -6
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -5
    concat
    frame_dig -4
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    pushint 12 // 12
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 12 // 12
    +
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    cover 1
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    pushint 18 // 18
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    frame_dig -1
    concat
    bytec 10 // "pwl"
    uncover 1
    app_global_put
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple() -> uint64, bytes, uint64, bytes, bytes, bytes:
test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple:
    b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_block@0:
    // tuple_support/nested_tuples.py:67
    // return self.pwl
    intc_0 // 0
    bytec 10 // "pwl"
    app_global_get_ex
    assert // check self.pwl exists
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    intc_3 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 2
    dup
    intc_1 // 8
    intc_1 // 8
    extract3
    cover 1
    dup
    pushint 16 // 16
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    dup
    intc_1 // 8
    extract_uint16
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    dig 4
    intc_3 // 2
    extract_uint16
    cover 1
    dig 5
    len
    cover 1
    uncover 6
    uncover 3
    uncover 3
    substring3
    uncover 5
    cover 1
    uncover 5
    uncover 5
    uncover 5
    uncover 5
    uncover 4
    uncover 5
    uncover 5
    uncover 5
    uncover 5
    uncover 5
    uncover 5
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box(key.a: uint64, key.b: uint64) -> void:
test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box:
    // tuple_support/nested_tuples.py:69-70
    // @arc4.abimethod()
    // def store_tuple_in_box(self, key: SimpleTup) -> None:
    proto 2 0
    b test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box_block@0:
    // tuple_support/nested_tuples.py:71
    // self.box[key] = key._replace(b=key.b + 1)
    frame_dig -1
    intc_2 // 1
    +
    frame_dig -2
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -1
    itob
    concat
    bytec 5 // "box"
    uncover 1
    concat
    frame_dig -2
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 2
    itob
    concat
    box_put
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box(key.a: uint64, key.b: uint64) -> uint64:
test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box:
    // tuple_support/nested_tuples.py:73-74
    // @arc4.abimethod()
    // def is_tuple_in_box(self, key: SimpleTup) -> bool:
    proto 2 1
    b test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box_block@0:
    // tuple_support/nested_tuples.py:75
    // return key in self.box
    frame_dig -2
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -1
    itob
    concat
    bytec 5 // "box"
    uncover 1
    concat
    box_len
    uncover 1
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box(key.a: uint64, key.b: uint64) -> uint64, uint64:
test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box:
    // tuple_support/nested_tuples.py:77-78
    // @arc4.abimethod()
    // def load_tuple_from_box(self, key: SimpleTup) -> SimpleTup:
    proto 2 2
    b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_block@0:
    // tuple_support/nested_tuples.py:79
    // return self.box[key]
    frame_dig -2
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -1
    itob
    concat
    bytec 5 // "box"
    uncover 1
    concat
    box_get
    assert // check self.box entry exists
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    intc_1 // 8
    intc_1 // 8
    extract3
    btoi
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box(key.a: uint64, key.b: uint64) -> uint64, uint64, uint64:
test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box:
    // tuple_support/nested_tuples.py:81-82
    // @arc4.abimethod()
    // def maybe_load_tuple_from_box(self, key: SimpleTup) -> tuple[SimpleTup, bool]:
    proto 2 3
    bytec_0 // ""
    bytec_0 // ""
    b test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_block@0:
    // tuple_support/nested_tuples.py:83
    // maybe_value, exists = self.box.maybe(key)
    frame_dig -2
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -1
    itob
    concat
    bytec 5 // "box"
    uncover 1
    concat
    box_get
    dup
    cover 2
    cover 2
    cover 1
    bz test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_false@2
    b test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_true@1

test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_true@1:
    // tuple_support/nested_tuples.py:83
    // maybe_value, exists = self.box.maybe(key)
    frame_dig 3
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    intc_1 // 8
    intc_1 // 8
    extract3
    btoi
    uncover 1
    frame_bury 0
    frame_bury 1
    b test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_merge@3

test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_merge@3:
    // tuple_support/nested_tuples.py:83
    // maybe_value, exists = self.box.maybe(key)
    frame_dig 0
    frame_dig 1
    frame_dig 2
    // tuple_support/nested_tuples.py:84
    // return maybe_value, exists
    uncover 2
    uncover 2
    uncover 2
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub

test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_false@2:
    // tuple_support/nested_tuples.py:83
    // maybe_value, exists = self.box.maybe(key)
    bytec_0 // ""
    frame_bury 0
    bytec_0 // ""
    frame_bury 1
    b test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_merge@3


// test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default(key.a: uint64, key.b: uint64) -> uint64, uint64:
test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default:
    // tuple_support/nested_tuples.py:86-87
    // @arc4.abimethod()
    // def load_tuple_from_box_or_default(self, key: SimpleTup) -> SimpleTup:
    proto 2 2
    bytec_0 // ""
    bytec_0 // ""
    b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_block@0:
    // tuple_support/nested_tuples.py:88
    // return self.box.get(key, default=simple_tup(UInt64(4), UInt64(2)))
    frame_dig -2
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -1
    itob
    concat
    bytec 5 // "box"
    uncover 1
    concat
    pushint 4 // 4
    intc_3 // 2
    callsub simple_tup
    cover 2
    cover 1
    box_get
    bz test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_false@2
    b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_true@1

test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_true@1:
    // tuple_support/nested_tuples.py:88
    // return self.box.get(key, default=simple_tup(UInt64(4), UInt64(2)))
    frame_dig 4
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    intc_1 // 8
    intc_1 // 8
    extract3
    btoi
    uncover 1
    frame_bury 0
    frame_bury 1
    b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_merge@3

test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_merge@3:
    // tuple_support/nested_tuples.py:88
    // return self.box.get(key, default=simple_tup(UInt64(4), UInt64(2)))
    retsub

test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_false@2:
    // tuple_support/nested_tuples.py:88
    // return self.box.get(key, default=simple_tup(UInt64(4), UInt64(2)))
    frame_dig 3
    frame_bury 0
    frame_dig 2
    frame_bury 1
    b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_merge@3


// test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default(key: bytes) -> uint64, uint64:
test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default:
    // tuple_support/nested_tuples.py:90-91
    // @arc4.abimethod()
    // def load_tuple_from_local_state_or_default(self, key: String) -> SimpleTup:
    proto 1 2
    bytec_0 // ""
    bytec_0 // ""
    b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_block@0:
    // tuple_support/nested_tuples.py:92
    // local = LocalState(SimpleTup, key=echo(key))
    frame_dig -1
    callsub echo
    // tuple_support/nested_tuples.py:93
    // return local.get(get_sender_inefficiently(), default=simple_tup(UInt64(4), UInt64(2)))
    callsub get_sender_inefficiently
    pushint 4 // 4
    intc_3 // 2
    callsub simple_tup
    cover 3
    cover 2
    intc_0 // 0
    uncover 2
    app_local_get_ex
    bz test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_false@2
    b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_true@1

test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_true@1:
    // tuple_support/nested_tuples.py:93
    // return local.get(get_sender_inefficiently(), default=simple_tup(UInt64(4), UInt64(2)))
    frame_dig 4
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    intc_1 // 8
    intc_1 // 8
    extract3
    btoi
    uncover 1
    frame_bury 0
    frame_bury 1
    b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_merge@3

test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_merge@3:
    // tuple_support/nested_tuples.py:93
    // return local.get(get_sender_inefficiently(), default=simple_tup(UInt64(4), UInt64(2)))
    retsub

test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_false@2:
    // tuple_support/nested_tuples.py:93
    // return local.get(get_sender_inefficiently(), default=simple_tup(UInt64(4), UInt64(2)))
    frame_dig 3
    frame_bury 0
    frame_dig 2
    frame_bury 1
    b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_merge@3


// test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple() -> bytes, uint64, bytes, bytes:
test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple:
    // tuple_support/nested_tuples.py:95-96
    // @arc4.abimethod()
    // def mutate_local_tuple(self) -> TupleWithMutable:
    proto 0 4
    b test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_block@0:
    // tuple_support/nested_tuples.py:98
    // arr=arc4.DynamicArray(arc4.UInt64(0)),
    intc_2 // 1
    itob
    extract 6 2
    bytec 9 // 0x0000000000000000
    concat
    // tuple_support/nested_tuples.py:105
    // twm[0].append(arc4.UInt64(1))
    bytec_0 // 0x
    bytec 7 // 0x0000000000000001
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    // tuple_support/nested_tuples.py:106
    // twm.arr.append(arc4.UInt64(2))
    bytec_0 // 0x
    pushbytes 0x0000000000000002
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    // tuple_support/nested_tuples.py:107
    // for i in urange(3):
    intc_2 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_header@1

test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_header@1:
    // tuple_support/nested_tuples.py:107
    // for i in urange(3):
    frame_dig 1
    pushint 3 // 3
    <
    bz test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_after_for@4
    b test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_body@2

test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_body@2:
    // tuple_support/nested_tuples.py:108
    // assert twm.arr[i] == i
    frame_dig 0
    dup
    len
    cover 1
    intc_3 // 2
    uncover 2
    substring3
    frame_dig 1
    dup
    cover 2
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    uncover 1
    itob
    b==
    assert
    b test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_footer@3

test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_footer@3:
    // tuple_support/nested_tuples.py:107
    // for i in urange(3):
    frame_dig 1
    intc_2 // 1
    +
    frame_bury 1
    b test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_header@1

test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_after_for@4:
    // tuple_support/nested_tuples.py:109-112
    // # TODO: support this?
    // #       see below method for work around
    // #       self.twm.arr.append(arc4.UInt64(1))
    // return twm
    frame_dig 0
    // tuple_support/nested_tuples.py:100
    // a=UInt64(),
    intc_0 // 0
    // tuple_support/nested_tuples.py:101
    // b=Bytes(),
    bytec_0 // 0x
    // tuple_support/nested_tuples.py:102
    // c=String(),
    bytec_0 // ""
    // tuple_support/nested_tuples.py:109-112
    // # TODO: support this?
    // #       see below method for work around
    // #       self.twm.arr.append(arc4.UInt64(1))
    // return twm
    uncover 5
    uncover 5
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method() -> void:
test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method:
    b test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method_block@0:
    // tuple_support/nested_tuples.py:116
    // arr2 = self.twm.arr.copy()
    intc_0 // 0
    bytec 6 // "twm"
    app_global_get_ex
    assert // check self.twm exists
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    intc_3 // 2
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    // tuple_support/nested_tuples.py:117
    // arr2.append(arc4.UInt64(1))
    bytec_0 // 0x
    bytec 7 // 0x0000000000000001
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    // tuple_support/nested_tuples.py:118
    // self.twm = self.twm._replace(arr=arr2.copy())
    intc_0 // 0
    bytec 6 // "twm"
    app_global_get_ex
    assert // check self.twm exists
    dup
    intc_3 // 2
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_1 // 8
    extract3
    btoi
    cover 1
    dup
    intc_1 // 8
    extract_uint16
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 1
    cover 2
    cover 2
    pushint 4 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    cover 4
    dig 3
    len
    pushint 4 // 4
    +
    cover 3
    itob
    bytec_0 // 0x
    uncover 1
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    pushint 12 // 12
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 12 // 12
    +
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    cover 1
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    uncover 1
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    bytec 6 // "twm"
    uncover 1
    app_global_put
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.run_tests() -> uint64:
test_cases.tuple_support.nested_tuples.NestedTuples.run_tests:
    b test_cases.tuple_support.nested_tuples.NestedTuples.run_tests_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.run_tests_block@0:
    // tuple_support/nested_tuples.py:122
    // x = (String("Hi"), String("There"))
    bytec_3 // "Hi"
    bytec_2 // "There"
    // tuple_support/nested_tuples.py:123
    // assert test_swap(x) == (String("There"), String("Hi"))
    callsub test_swap
    cover 1
    bytec_2 // "There"
    ==
    uncover 1
    bytec_3 // "Hi"
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:122
    // x = (String("Hi"), String("There"))
    bytec_2 // "There"
    // tuple_support/nested_tuples.py:129
    // assert z2_1_1 == "There"
    bytec_2 // "There"
    ==
    assert
    // tuple_support/nested_tuples.py:122
    // x = (String("Hi"), String("There"))
    bytec_3 // "Hi"
    // tuple_support/nested_tuples.py:125
    // z = (UInt64(0), UInt64(2), y)
    intc_0 // 0
    intc_3 // 2
    // tuple_support/nested_tuples.py:124
    // y = (UInt64(1), x)
    intc_2 // 1
    // tuple_support/nested_tuples.py:122
    // x = (String("Hi"), String("There"))
    bytec_3 // "Hi"
    bytec_2 // "There"
    bytec_2 // "There"
    // tuple_support/nested_tuples.py:131
    // (a, b, (c, d, (e,))) = test_rearrange(x[0], _b=x[1], args=z)
    callsub test_rearrange
    cover 4
    cover 3
    cover 2
    cover 1
    cover 2
    cover 3
    cover 4
    uncover 1
    cover 4
    uncover 2
    cover 4
    // tuple_support/nested_tuples.py:132
    // assert (a, b) == (String("Hi"), UInt64(0))
    bytec_3 // "Hi"
    ==
    uncover 1
    intc_0 // 0
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:133
    // assert (c, d) == (UInt64(2), UInt64(1))
    intc_3 // 2
    ==
    uncover 1
    intc_2 // 1
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:134
    // assert e == String("There")
    bytec_2 // "There"
    ==
    assert
    // tuple_support/nested_tuples.py:136
    // test_intrinsics(UInt64(1), UInt64(2))
    intc_2 // 1
    intc_3 // 2
    callsub test_intrinsics
    // tuple_support/nested_tuples.py:137
    // test_nested_slicing()
    callsub test_nested_slicing
    // tuple_support/nested_tuples.py:138
    // test_nested_singles(UInt64(1), reassign=True)
    intc_2 // 1
    intc_2 // 1
    callsub test_nested_singles
    // tuple_support/nested_tuples.py:139
    // test_nested_singles(UInt64(1), reassign=False)
    intc_2 // 1
    intc_0 // 0
    callsub test_nested_singles
    // tuple_support/nested_tuples.py:140
    // test_nested_mutation()
    callsub test_nested_mutation
    // tuple_support/nested_tuples.py:124
    // y = (UInt64(1), x)
    intc_2 // 1
    intc_2 // 1
    // tuple_support/nested_tuples.py:142
    // assert z[2] == y
    ==
    // tuple_support/nested_tuples.py:122
    // x = (String("Hi"), String("There"))
    bytec_3 // "Hi"
    bytec_3 // "Hi"
    // tuple_support/nested_tuples.py:142
    // assert z[2] == y
    ==
    // tuple_support/nested_tuples.py:122
    // x = (String("Hi"), String("There"))
    bytec_2 // "There"
    bytec_2 // "There"
    // tuple_support/nested_tuples.py:142
    // assert z[2] == y
    ==
    &&
    &&
    assert
    // tuple_support/nested_tuples.py:144
    // test_nested_iteration()
    callsub test_nested_iteration
    // tuple_support/nested_tuples.py:146
    // self.test_single_evaluation_nested()
    callsub test_single_evaluation_nested
    // tuple_support/nested_tuples.py:147
    // return True
    intc_2 // 1
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(args.0: bytes, args.1.0: bytes, args.1.1.0: uint64) -> bytes, bytes, uint64:
test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params:
    // tuple_support/nested_tuples.py:149-152
    // @arc4.abimethod()
    // def nested_tuple_params(
    //     self, args: tuple[String, tuple[Bytes, tuple[UInt64]]]
    // ) -> tuple[Bytes, tuple[String, UInt64]]:
    proto 3 3
    b test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params_block@0:
    // tuple_support/nested_tuples.py:153
    // (s, (b, (u,))) = args
    frame_dig -3
    frame_dig -2
    frame_dig -1
    cover 1
    // tuple_support/nested_tuples.py:154
    // return b, (s, u)
    uncover 2
    uncover 2
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple(args.a: uint64, args.b: bytes, args.c: bytes) -> uint64, bytes, bytes:
test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple:
    // tuple_support/nested_tuples.py:156-157
    // @arc4.abimethod()
    // def named_tuple(self, args: Child) -> Child:
    proto 3 3
    b test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple_block@0:
    // tuple_support/nested_tuples.py:158
    // a, b, c = args
    frame_dig -3
    frame_dig -2
    frame_dig -1
    // tuple_support/nested_tuples.py:159
    // return Child(a, b, c)
    uncover 2
    uncover 2
    uncover 2
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params(args.foo: uint64, args.foo_arc: bytes, args.child.a: uint64, args.child.b: bytes, args.child.c: bytes) -> uint64, bytes, uint64, bytes, bytes:
test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params:
    // tuple_support/nested_tuples.py:161-162
    // @arc4.abimethod()
    // def nested_named_tuple_params(self, args: Parent) -> Parent:
    proto 5 5
    b test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params_block@0

test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params_block@0:
    // tuple_support/nested_tuples.py:163
    // foo, foo_arc, (a, b, c) = args
    frame_dig -5
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    // tuple_support/nested_tuples.py:164
    // return Parent(foo, foo_arc, Child(a, b, c))
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.build_nested() -> bytes, uint64, bytes:
build_nested:
    b build_nested_block@0

build_nested_block@0:
    // tuple_support/nested_tuples.py:168
    // self.build_nested_call_count += 1
    intc_0 // 0
    bytec 4 // "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    intc_2 // 1
    +
    bytec 4 // "build_nested_call_count"
    uncover 1
    app_global_put
    // tuple_support/nested_tuples.py:169
    // return (String("hi"), UInt64(1)), Bytes(b"hmmm")
    bytec 11 // "hi"
    intc_2 // 1
    pushbytes 0x686d6d6d
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested() -> void:
test_single_evaluation_nested:
    // tuple_support/nested_tuples.py:171-172
    // @subroutine
    // def test_single_evaluation_nested(self) -> None:
    proto 0 0
    intc_0 // 0
    intc_0 // 0
    bytec_0 // ""
    b test_single_evaluation_nested_block@0

test_single_evaluation_nested_block@0:
    // tuple_support/nested_tuples.py:173
    // self.build_nested_call_count = UInt64(0)
    bytec 4 // "build_nested_call_count"
    intc_0 // 0
    app_global_put
    // tuple_support/nested_tuples.py:174
    // result = self.build_nested() or self.build_nested()
    callsub build_nested
    cover 2
    cover 1
    dup
    cover 3
    dup
    ==
    dig 1
    uncover 2
    ==
    &&
    dig 1
    uncover 2
    ==
    ||
    bz test_single_evaluation_nested_ternary_false@2
    b test_single_evaluation_nested_ternary_true@1

test_single_evaluation_nested_ternary_true@1:
    // tuple_support/nested_tuples.py:174
    // result = self.build_nested() or self.build_nested()
    frame_dig 3
    frame_bury 0
    b test_single_evaluation_nested_ternary_merge@3

test_single_evaluation_nested_ternary_merge@3:
    // tuple_support/nested_tuples.py:174
    // result = self.build_nested() or self.build_nested()
    frame_dig 0
    // tuple_support/nested_tuples.py:175
    // assert result[0][0] == "hi"
    bytec 11 // "hi"
    ==
    assert
    // tuple_support/nested_tuples.py:176
    // assert self.build_nested_call_count == 1
    intc_0 // 0
    bytec 4 // "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    intc_2 // 1
    ==
    assert
    retsub

test_single_evaluation_nested_ternary_false@2:
    // tuple_support/nested_tuples.py:174
    // result = self.build_nested() or self.build_nested()
    callsub build_nested
    frame_bury 1
    frame_bury 2
    frame_bury 0
    b test_single_evaluation_nested_ternary_merge@3


// algopy.arc4.ARC4Contract.approval_program() -> uint64:
approval_program:
    b approval_program_block@0

approval_program_block@0:
    b approval_program_block@1

approval_program_block@1:
    // tuple_support/nested_tuples.py:48
    // class NestedTuples(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz approval_program___algopy_default_create@22
    b approval_program_abi_routing@2

approval_program_abi_routing@2:
    // tuple_support/nested_tuples.py:48
    // class NestedTuples(ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    bz approval_program_create_NoOp@20
    b approval_program_call_NoOp@3

approval_program_call_NoOp@3:
    // tuple_support/nested_tuples.py:48
    // class NestedTuples(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x383e1e8b // method "store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void"
    pushbytes 0x68cbedd7 // method "load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])"
    pushbytes 0x2263fcf1 // method "store_tuple_in_box((uint64,uint64))void"
    pushbytes 0xbfc37339 // method "is_tuple_in_box((uint64,uint64))bool"
    pushbytes 0xc660beaa // method "load_tuple_from_box((uint64,uint64))(uint64,uint64)"
    pushbytes 0xb6c215ff // method "maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)"
    pushbytes 0x907c9042 // method "load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)"
    pushbytes 0xd51c7174 // method "load_tuple_from_local_state_or_default(string)(uint64,uint64)"
    pushbytes 0xf8cc2b50 // method "mutate_local_tuple()(uint64[],(uint64,byte[],string))"
    pushbytes 0x3d486db0 // method "mutate_tuple_in_storage_currently_supported_method()void"
    pushbytes 0x9e5a3ba7 // method "run_tests()bool"
    pushbytes 0xcea0521b // method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))"
    pushbytes 0x373f5b24 // method "named_tuple((uint64,byte[],string))(uint64,byte[],string)"
    pushbytes 0xec593096 // method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))"
    uncover 14
    match approval_program_store_tuple_route@4 approval_program_load_tuple_route@5 approval_program_store_tuple_in_box_route@6 approval_program_is_tuple_in_box_route@7 approval_program_load_tuple_from_box_route@8 approval_program_maybe_load_tuple_from_box_route@9 approval_program_load_tuple_from_box_or_default_route@10 approval_program_load_tuple_from_local_state_or_default_route@11 approval_program_mutate_local_tuple_route@12 approval_program_mutate_tuple_in_storage_currently_supported_method_route@13 approval_program_run_tests_route@14 approval_program_nested_tuple_params_route@15 approval_program_named_tuple_route@16 approval_program_nested_named_tuple_params_route@17
    b approval_program_switch_case_default@18

approval_program_switch_case_default@18:
    b approval_program_switch_case_next@19

approval_program_switch_case_next@19:
    b approval_program_after_if_else@21

approval_program_after_if_else@21:
    b approval_program_after_if_else@25

approval_program_after_if_else@25:
    // tuple_support/nested_tuples.py:48
    // class NestedTuples(ARC4Contract):
    err

approval_program_nested_named_tuple_params_route@17:
    // tuple_support/nested_tuples.py:161
    // @arc4.abimethod()
    callsub nested_named_tuple_params
    b approval_program_switch_case_next@19

approval_program_named_tuple_route@16:
    // tuple_support/nested_tuples.py:156
    // @arc4.abimethod()
    callsub named_tuple
    b approval_program_switch_case_next@19

approval_program_nested_tuple_params_route@15:
    // tuple_support/nested_tuples.py:149
    // @arc4.abimethod()
    callsub nested_tuple_params
    b approval_program_switch_case_next@19

approval_program_run_tests_route@14:
    // tuple_support/nested_tuples.py:120
    // @arc4.abimethod()
    callsub run_tests
    b approval_program_switch_case_next@19

approval_program_mutate_tuple_in_storage_currently_supported_method_route@13:
    // tuple_support/nested_tuples.py:114
    // @arc4.abimethod()
    callsub mutate_tuple_in_storage_currently_supported_method
    b approval_program_switch_case_next@19

approval_program_mutate_local_tuple_route@12:
    // tuple_support/nested_tuples.py:95
    // @arc4.abimethod()
    callsub mutate_local_tuple
    b approval_program_switch_case_next@19

approval_program_load_tuple_from_local_state_or_default_route@11:
    // tuple_support/nested_tuples.py:90
    // @arc4.abimethod()
    callsub load_tuple_from_local_state_or_default
    b approval_program_switch_case_next@19

approval_program_load_tuple_from_box_or_default_route@10:
    // tuple_support/nested_tuples.py:86
    // @arc4.abimethod()
    callsub load_tuple_from_box_or_default
    b approval_program_switch_case_next@19

approval_program_maybe_load_tuple_from_box_route@9:
    // tuple_support/nested_tuples.py:81
    // @arc4.abimethod()
    callsub maybe_load_tuple_from_box
    b approval_program_switch_case_next@19

approval_program_load_tuple_from_box_route@8:
    // tuple_support/nested_tuples.py:77
    // @arc4.abimethod()
    callsub load_tuple_from_box
    b approval_program_switch_case_next@19

approval_program_is_tuple_in_box_route@7:
    // tuple_support/nested_tuples.py:73
    // @arc4.abimethod()
    callsub is_tuple_in_box
    b approval_program_switch_case_next@19

approval_program_store_tuple_in_box_route@6:
    // tuple_support/nested_tuples.py:69
    // @arc4.abimethod()
    callsub store_tuple_in_box
    b approval_program_switch_case_next@19

approval_program_load_tuple_route@5:
    // tuple_support/nested_tuples.py:65
    // @arc4.abimethod()
    callsub load_tuple
    b approval_program_switch_case_next@19

approval_program_store_tuple_route@4:
    // tuple_support/nested_tuples.py:61
    // @arc4.abimethod()
    callsub store_tuple
    b approval_program_switch_case_next@19

approval_program_create_NoOp@20:
    b approval_program_after_if_else@21

approval_program___algopy_default_create@22:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b approval_program_block@23

approval_program_block@23:
    b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create@24

approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create@24:
    intc_2 // 1
    return
