#pragma version 10

test_cases.tuple_support.nested_tuples.NestedTuples.approval_program:
    // tuple_support/nested_tuples.py:6
    // x = (String("Hi"), String("There"))
    byte "Hi"
    byte "There"
    // tuple_support/nested_tuples.py:7
    // assert test_swap(x) == (String("There"), String("Hi"))
    callsub test_swap
    cover 1
    byte "There"
    ==
    uncover 1
    byte "Hi"
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:6
    // x = (String("Hi"), String("There"))
    byte "There"
    // tuple_support/nested_tuples.py:13
    // assert z2_1_1 == "There"
    byte "There"
    ==
    assert
    // tuple_support/nested_tuples.py:9
    // z = (UInt64(0), UInt64(2), y)
    int 0
    int 2
    // tuple_support/nested_tuples.py:8
    // y = (UInt64(1), x)
    int 1
    // tuple_support/nested_tuples.py:6
    // x = (String("Hi"), String("There"))
    byte "Hi"
    byte "There"
    // tuple_support/nested_tuples.py:15
    // (a, b, (c, d, (e,))) = test_rearrange(z)
    callsub test_rearrange
    cover 4
    cover 3
    cover 2
    cover 1
    cover 2
    cover 3
    cover 4
    uncover 1
    cover 4
    uncover 2
    cover 4
    // tuple_support/nested_tuples.py:16
    // assert (a, b) == (String("Hi"), UInt64(0))
    byte "Hi"
    ==
    uncover 1
    int 0
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:17
    // assert (c, d) == (UInt64(2), UInt64(1))
    int 2
    ==
    uncover 1
    int 1
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:18
    // assert e == String("There")
    byte "There"
    ==
    assert
    // tuple_support/nested_tuples.py:20
    // test_intrinsics(UInt64(1), UInt64(2))
    int 1
    int 2
    callsub test_intrinsics
    // tuple_support/nested_tuples.py:21
    // test_nested_slicing()
    callsub test_nested_slicing
    // tuple_support/nested_tuples.py:8
    // y = (UInt64(1), x)
    int 1
    int 1
    // tuple_support/nested_tuples.py:23
    // assert z[2] == y
    ==
    // tuple_support/nested_tuples.py:6
    // x = (String("Hi"), String("There"))
    byte "Hi"
    byte "Hi"
    // tuple_support/nested_tuples.py:23
    // assert z[2] == y
    ==
    // tuple_support/nested_tuples.py:6
    // x = (String("Hi"), String("There"))
    byte "There"
    byte "There"
    // tuple_support/nested_tuples.py:23
    // assert z[2] == y
    ==
    &&
    &&
    assert
    // tuple_support/nested_tuples.py:25
    // return True
    int 1
    return


// test_cases.tuple_support.nested_tuples.test_swap(args.0: bytes, args.1: bytes) -> bytes, bytes:
test_swap:
    // tuple_support/nested_tuples.py:40-41
    // @subroutine
    // def test_swap(args: tuple[String, String]) -> tuple[String, String]:
    proto 2 2
    // tuple_support/nested_tuples.py:42
    // (a, b) = args
    frame_dig -2
    frame_dig -1
    // tuple_support/nested_tuples.py:43
    // return b, a
    uncover 1
    retsub


// test_cases.tuple_support.nested_tuples.test_rearrange(args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: bytes, args.2.1.1: bytes) -> bytes, uint64, uint64, uint64, bytes:
test_rearrange:
    // tuple_support/nested_tuples.py:31-34
    // @subroutine
    // def test_rearrange(
    //     args: tuple[UInt64, UInt64, tuple[UInt64, tuple[String, String]]]
    // ) -> tuple[String, UInt64, tuple[UInt64, UInt64, tuple[String]]]:
    proto 5 5
    // tuple_support/nested_tuples.py:35
    // (a, b, (c, (d, e))) = args
    frame_dig -5
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    cover 1
    // tuple_support/nested_tuples.py:37
    // return d, a, (b, c, (e,))
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    retsub


// test_cases.tuple_support.nested_tuples.test_intrinsics(num1: uint64, num2: uint64) -> void:
test_intrinsics:
    // tuple_support/nested_tuples.py:46-47
    // @subroutine
    // def test_intrinsics(num1: UInt64, num2: UInt64) -> None:
    proto 2 0
    // tuple_support/nested_tuples.py:48
    // nt = (UInt64(1), op.addw(num1, num2), UInt64(42))
    frame_dig -2
    frame_dig -1
    addw
    cover 1
    int 1
    // tuple_support/nested_tuples.py:49
    // assert nt[0] == 1
    int 1
    ==
    assert
    // tuple_support/nested_tuples.py:48
    // nt = (UInt64(1), op.addw(num1, num2), UInt64(42))
    int 42
    // tuple_support/nested_tuples.py:50
    // assert nt[-1] == 42
    int 42
    ==
    assert
    // tuple_support/nested_tuples.py:51
    // assert nt[1] == (0, num1 + num2)  # type: ignore[comparison-overlap]
    dup
    dig 2
    cover 1
    int 0
    ==
    cover 1
    frame_dig -2
    frame_dig -1
    +
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:52
    // assert nt[1][:1] == (0,)  # type: ignore[comparison-overlap]
    dup
    int 0
    ==
    assert
    // tuple_support/nested_tuples.py:53
    // assert nt[1][1:] == (num1 + num2,)
    dig 1
    frame_dig -2
    frame_dig -1
    +
    ==
    assert
    // tuple_support/nested_tuples.py:55
    // assert x == 0
    int 0
    ==
    assert
    // tuple_support/nested_tuples.py:56
    // assert y == num1 + num2
    frame_dig -2
    frame_dig -1
    +
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_slicing() -> void:
test_nested_slicing:
    // tuple_support/nested_tuples.py:59-60
    // @subroutine
    // def test_nested_slicing() -> None:
    proto 0 0
    // tuple_support/nested_tuples.py:70
    // UInt64(4),
    int 4
    // tuple_support/nested_tuples.py:76
    // assert b[-1] == 4
    int 4
    ==
    assert
    // tuple_support/nested_tuples.py:63
    // UInt64(2),
    int 2
    // tuple_support/nested_tuples.py:77
    // assert ((a, c),) == ((2, 5),)  # type: ignore[comparison-overlap]
    int 2
    ==
    // tuple_support/nested_tuples.py:72
    // UInt64(5),
    int 5
    // tuple_support/nested_tuples.py:77
    // assert ((a, c),) == ((2, 5),)  # type: ignore[comparison-overlap]
    int 5
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:67
    // String("a"),
    byte "a"
    // tuple_support/nested_tuples.py:78
    // assert b[1][:] == ("a", "b")  # type: ignore[comparison-overlap]
    byte "a"
    ==
    // tuple_support/nested_tuples.py:68
    // String("b"),
    byte "b"
    // tuple_support/nested_tuples.py:78
    // assert b[1][:] == ("a", "b")  # type: ignore[comparison-overlap]
    byte "b"
    ==
    &&
    assert
    retsub
