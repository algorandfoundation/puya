#pragma version 10

test_cases.tuple_support.nested_tuples.NestedTuples.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    callsub __puya_arc4_router__
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // tuple_support/nested_tuples.py:4
    // class NestedTuples(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    int 0
    !=
    bz __puya_arc4_router___bare_routing@6
    txna ApplicationArgs 0
    method "run_tests()bool"
    method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))"
    uncover 2
    match __puya_arc4_router___run_tests_route@2 __puya_arc4_router___nested_tuple_params_route@3
    b __puya_arc4_router___switch_case_default@4

__puya_arc4_router___run_tests_route@2:
    // tuple_support/nested_tuples.py:8
    // @arc4.abimethod()
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    int 0
    !=
    assert // is not creating
    callsub run_tests
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    uncover 1
    concat
    log
    int 1
    retsub

__puya_arc4_router___nested_tuple_params_route@3:
    // tuple_support/nested_tuples.py:37
    // @arc4.abimethod()
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    int 0
    !=
    assert // is not creating
    // tuple_support/nested_tuples.py:4
    // class NestedTuples(ARC4Contract):
    txna ApplicationArgs 1
    dup
    int 0
    extract_uint16
    cover 1
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    cover 1
    dup
    int 2
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    uncover 1
    extract 2 0
    cover 1
    dup
    int 0
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    cover 1
    int 2
    int 8
    extract3 // on error: Index access is out of bounds
    uncover 1
    extract 2 0
    cover 1
    int 0
    int 8
    extract3 // on error: Index access is out of bounds
    btoi
    // tuple_support/nested_tuples.py:37
    // @arc4.abimethod()
    uncover 2
    uncover 2
    uncover 2
    callsub nested_tuple_params
    cover 2
    cover 1
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    cover 2
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    uncover 1
    itob
    int 10
    itob
    extract 6 2
    byte 0x
    uncover 1
    concat
    uncover 1
    concat
    uncover 1
    concat
    int 4
    itob
    extract 6 2
    byte 0x
    uncover 1
    concat
    dig 2
    len
    int 4
    uncover 1
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    uncover 1
    concat
    byte 0x151f7c75
    uncover 1
    concat
    log
    int 1
    retsub

__puya_arc4_router___switch_case_default@4:
    b __puya_arc4_router___after_if_else@10

__puya_arc4_router___bare_routing@6:
    // tuple_support/nested_tuples.py:4
    // class NestedTuples(ARC4Contract):
    txn OnCompletion
    int 0
    uncover 1
    match __puya_arc4_router_____algopy_default_create@7
    b __puya_arc4_router___switch_case_default@8

__puya_arc4_router_____algopy_default_create@7:
    // tuple_support/nested_tuples.py:4
    // class NestedTuples(ARC4Contract):
    txn ApplicationID
    int 0
    ==
    assert // is creating
    callsub __algopy_default_create
    int 1
    retsub

__puya_arc4_router___switch_case_default@8:

__puya_arc4_router___after_if_else@10:
    // tuple_support/nested_tuples.py:4
    // class NestedTuples(ARC4Contract):
    int 0
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.run_tests() -> uint64:
run_tests:
    // tuple_support/nested_tuples.py:8-9
    // @arc4.abimethod()
    // def run_tests(self) -> bool:
    proto 0 1
    // tuple_support/nested_tuples.py:10
    // x = (String("Hi"), String("There"))
    byte "Hi"
    byte "There"
    // tuple_support/nested_tuples.py:11
    // assert test_swap(x) == (String("There"), String("Hi"))
    callsub test_swap
    cover 1
    byte "There"
    ==
    uncover 1
    byte "Hi"
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:10
    // x = (String("Hi"), String("There"))
    byte "There"
    // tuple_support/nested_tuples.py:17
    // assert z2_1_1 == "There"
    byte "There"
    ==
    assert
    // tuple_support/nested_tuples.py:10
    // x = (String("Hi"), String("There"))
    byte "Hi"
    // tuple_support/nested_tuples.py:13
    // z = (UInt64(0), UInt64(2), y)
    int 0
    int 2
    // tuple_support/nested_tuples.py:12
    // y = (UInt64(1), x)
    int 1
    // tuple_support/nested_tuples.py:10
    // x = (String("Hi"), String("There"))
    byte "Hi"
    byte "There"
    byte "There"
    // tuple_support/nested_tuples.py:19
    // (a, b, (c, d, (e,))) = test_rearrange(x[0], z, x[1])
    callsub test_rearrange
    cover 4
    cover 3
    cover 2
    cover 1
    cover 2
    cover 3
    cover 4
    uncover 1
    cover 4
    uncover 2
    cover 4
    // tuple_support/nested_tuples.py:20
    // assert (a, b) == (String("Hi"), UInt64(0))
    byte "Hi"
    ==
    uncover 1
    int 0
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:21
    // assert (c, d) == (UInt64(2), UInt64(1))
    int 2
    ==
    uncover 1
    int 1
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:22
    // assert e == String("There")
    byte "There"
    ==
    assert
    // tuple_support/nested_tuples.py:24
    // test_intrinsics(UInt64(1), UInt64(2))
    int 1
    int 2
    callsub test_intrinsics
    // tuple_support/nested_tuples.py:25
    // test_nested_slicing()
    callsub test_nested_slicing
    // tuple_support/nested_tuples.py:26
    // test_nested_singles(UInt64(1), reassign=True)
    int 1
    int 1
    callsub test_nested_singles
    // tuple_support/nested_tuples.py:27
    // test_nested_singles(UInt64(1), reassign=False)
    int 1
    int 0
    callsub test_nested_singles
    // tuple_support/nested_tuples.py:28
    // test_nested_mutation()
    callsub test_nested_mutation
    // tuple_support/nested_tuples.py:12
    // y = (UInt64(1), x)
    int 1
    int 1
    // tuple_support/nested_tuples.py:30
    // assert z[2] == y
    ==
    // tuple_support/nested_tuples.py:10
    // x = (String("Hi"), String("There"))
    byte "Hi"
    byte "Hi"
    // tuple_support/nested_tuples.py:30
    // assert z[2] == y
    ==
    // tuple_support/nested_tuples.py:10
    // x = (String("Hi"), String("There"))
    byte "There"
    byte "There"
    // tuple_support/nested_tuples.py:30
    // assert z[2] == y
    ==
    &&
    &&
    assert
    // tuple_support/nested_tuples.py:32
    // test_nested_iteration()
    callsub test_nested_iteration
    // tuple_support/nested_tuples.py:34
    // self.test_single_evaluation_nested()
    callsub test_single_evaluation_nested
    // tuple_support/nested_tuples.py:35
    // return True
    int 1
    retsub


// test_cases.tuple_support.nested_tuples.test_swap(args.0: bytes, args.1: bytes) -> bytes, bytes:
test_swap:
    // tuple_support/nested_tuples.py:66-67
    // @subroutine
    // def test_swap(args: tuple[String, String]) -> tuple[String, String]:
    proto 2 2
    // tuple_support/nested_tuples.py:68
    // (a, b) = args
    frame_dig -2
    frame_dig -1
    // tuple_support/nested_tuples.py:69
    // return b, a
    uncover 1
    retsub


// test_cases.tuple_support.nested_tuples.test_rearrange(_a: bytes, args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: bytes, args.2.1.1: bytes, _b: bytes) -> bytes, uint64, uint64, uint64, bytes:
test_rearrange:
    // tuple_support/nested_tuples.py:57-60
    // @subroutine
    // def test_rearrange(
    //     _a: String, args: tuple[UInt64, UInt64, tuple[UInt64, tuple[String, String]]], _b: String
    // ) -> tuple[String, UInt64, tuple[UInt64, UInt64, tuple[String]]]:
    proto 7 5
    // tuple_support/nested_tuples.py:61
    // (a, b, (c, (d, e))) = args
    frame_dig -6
    frame_dig -5
    frame_dig -4
    frame_dig -3
    frame_dig -2
    cover 1
    // tuple_support/nested_tuples.py:63
    // return d, a, (b, c, (e,))
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    retsub


// test_cases.tuple_support.nested_tuples.test_intrinsics(num1: uint64, num2: uint64) -> void:
test_intrinsics:
    // tuple_support/nested_tuples.py:72-73
    // @subroutine
    // def test_intrinsics(num1: UInt64, num2: UInt64) -> None:
    proto 2 0
    // tuple_support/nested_tuples.py:74
    // nt = (UInt64(1), op.addw(num1, num2), UInt64(42))
    frame_dig -2
    frame_dig -1
    addw
    cover 1
    int 1
    // tuple_support/nested_tuples.py:75
    // assert nt[0] == 1
    int 1
    ==
    assert
    // tuple_support/nested_tuples.py:74
    // nt = (UInt64(1), op.addw(num1, num2), UInt64(42))
    int 42
    // tuple_support/nested_tuples.py:76
    // assert nt[-1] == 42
    int 42
    ==
    assert
    // tuple_support/nested_tuples.py:77
    // assert nt[1] == (0, num1 + num2)  # type: ignore[comparison-overlap]
    dup
    int 0
    ==
    frame_dig -2
    frame_dig -1
    +
    dig 3
    uncover 1
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:78
    // assert nt[1][:1] == (0,)  # type: ignore[comparison-overlap]
    dup
    int 0
    ==
    assert
    // tuple_support/nested_tuples.py:79
    // assert nt[1][1:] == (num1 + num2,)
    frame_dig -2
    frame_dig -1
    +
    dig 2
    uncover 1
    ==
    assert
    // tuple_support/nested_tuples.py:81
    // assert x == 0
    int 0
    ==
    assert
    // tuple_support/nested_tuples.py:82
    // assert y == num1 + num2
    frame_dig -2
    frame_dig -1
    +
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_slicing() -> void:
test_nested_slicing:
    // tuple_support/nested_tuples.py:85-86
    // @subroutine
    // def test_nested_slicing() -> None:
    proto 0 0
    // tuple_support/nested_tuples.py:96
    // UInt64(4),
    int 4
    // tuple_support/nested_tuples.py:102
    // assert b[-1] == 4
    int 4
    ==
    assert
    // tuple_support/nested_tuples.py:89
    // UInt64(2),
    int 2
    // tuple_support/nested_tuples.py:103
    // assert ((a, c),) == ((2, 5),)  # type: ignore[comparison-overlap]
    int 2
    ==
    // tuple_support/nested_tuples.py:98
    // UInt64(5),
    int 5
    // tuple_support/nested_tuples.py:103
    // assert ((a, c),) == ((2, 5),)  # type: ignore[comparison-overlap]
    int 5
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:93
    // String("a"),
    byte "a"
    // tuple_support/nested_tuples.py:104
    // assert b[1][:] == ("a", "b")  # type: ignore[comparison-overlap]
    byte "a"
    ==
    // tuple_support/nested_tuples.py:94
    // String("b"),
    byte "b"
    // tuple_support/nested_tuples.py:104
    // assert b[1][:] == ("a", "b")  # type: ignore[comparison-overlap]
    byte "b"
    ==
    &&
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: uint64) -> void:
test_nested_singles:
    // tuple_support/nested_tuples.py:107-108
    // @subroutine
    // def test_nested_singles(one: UInt64, *, reassign: bool) -> None:
    proto 2 0
    // tuple_support/nested_tuples.py:110
    // (UInt64(0),),
    int 0
    // tuple_support/nested_tuples.py:109-113
    // s = (
    //     (UInt64(0),),
    //     (one,),
    //     (UInt64(2),),
    // )
    frame_dig -2
    dup
    cover 1
    // tuple_support/nested_tuples.py:112
    // (UInt64(2),),
    int 2
    // tuple_support/nested_tuples.py:109-113
    // s = (
    //     (UInt64(0),),
    //     (one,),
    //     (UInt64(2),),
    // )
    cover 1
    // tuple_support/nested_tuples.py:110
    // (UInt64(0),),
    int 0
    // tuple_support/nested_tuples.py:114
    // assert s[0][0] == 0
    int 0
    ==
    assert
    // tuple_support/nested_tuples.py:110
    // (UInt64(0),),
    int 0
    // tuple_support/nested_tuples.py:115
    // assert s[0] == (0,)  # type: ignore[comparison-overlap]
    int 0
    ==
    assert
    // tuple_support/nested_tuples.py:116
    // assert s[1][0] == 1
    dup
    int 1
    ==
    assert
    // tuple_support/nested_tuples.py:117
    // assert s[1] == (one,)
    dup
    frame_dig -2
    ==
    assert
    // tuple_support/nested_tuples.py:112
    // (UInt64(2),),
    int 2
    // tuple_support/nested_tuples.py:118
    // assert s[2][0] == 2
    int 2
    ==
    assert
    // tuple_support/nested_tuples.py:112
    // (UInt64(2),),
    int 2
    // tuple_support/nested_tuples.py:119
    // assert s[2] == (2,)  # type: ignore[comparison-overlap]
    int 2
    ==
    assert
    // tuple_support/nested_tuples.py:121
    // if reassign:
    frame_dig -1
    bz test_nested_singles_after_if_else@2
    // tuple_support/nested_tuples.py:123
    // (UInt64(3),),
    int 3
    // tuple_support/nested_tuples.py:122-126
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    frame_bury 0
    // tuple_support/nested_tuples.py:124
    // (UInt64(4),),
    int 4
    // tuple_support/nested_tuples.py:122-126
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    frame_bury 1
    // tuple_support/nested_tuples.py:125
    // (UInt64(5),),
    int 5
    // tuple_support/nested_tuples.py:122-126
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    frame_bury 2

test_nested_singles_after_if_else@2:
    // tuple_support/nested_tuples.py:127
    // assert s[0][0] == (3 if reassign else 0)
    int 0
    int 3
    frame_dig -1
    select
    frame_dig 0
    uncover 1
    ==
    assert
    // tuple_support/nested_tuples.py:128
    // (tmp,) = s[2]
    frame_dig 2
    // tuple_support/nested_tuples.py:129
    // assert tmp == (5 if reassign else 2)
    int 2
    int 5
    frame_dig -1
    select
    ==
    assert
    // tuple_support/nested_tuples.py:130
    // assert t == (one,)
    frame_dig 3
    frame_dig -2
    ==
    assert
    // tuple_support/nested_tuples.py:132
    // s0, (s1,), s2 = s
    frame_dig 1
    dup
    // tuple_support/nested_tuples.py:133
    // s1 += one
    frame_dig -2
    +
    // tuple_support/nested_tuples.py:134
    // assert s1 == (5 if reassign else 2)
    int 2
    int 5
    frame_dig -1
    select
    ==
    assert
    // tuple_support/nested_tuples.py:135
    // assert s[1][0] == (4 if reassign else 1)
    int 1
    int 4
    frame_dig -1
    select
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_mutation() -> void:
test_nested_mutation:
    // tuple_support/nested_tuples.py:138-139
    // @subroutine
    // def test_nested_mutation() -> None:
    proto 0 0
    // tuple_support/nested_tuples.py:142-144
    // arc4.DynamicArray(
    //     arc4.UInt64(0),
    // ),
    byte 0x
    // tuple_support/nested_tuples.py:143
    // arc4.UInt64(0),
    byte 0x0000000000000000
    // tuple_support/nested_tuples.py:142-144
    // arc4.DynamicArray(
    //     arc4.UInt64(0),
    // ),
    concat
    byte 0x0001
    uncover 1
    concat
    // tuple_support/nested_tuples.py:147
    // x[0][0].append(arc4.UInt64(1))
    extract 2 0
    byte 0x
    byte 0x0000000000000001
    concat
    concat
    dup
    len
    int 8
    /
    itob
    extract 6 2
    uncover 1
    concat
    // tuple_support/nested_tuples.py:148
    // assert x[0][0].length == 2
    int 0
    extract_uint16
    int 2
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_iteration() -> void:
test_nested_iteration:
    // tuple_support/nested_tuples.py:151-152
    // @subroutine
    // def test_nested_iteration() -> None:
    proto 0 0
    byte ""
    dup
    // tuple_support/nested_tuples.py:155
    // total = UInt64(0)
    int 0
    int 0
    // tuple_support/nested_tuples.py:153
    // x = UInt64(1)
    int 1
    // tuple_support/nested_tuples.py:154
    // y = UInt64(2)
    int 2

test_nested_iteration_for_body@1:
    // tuple_support/nested_tuples.py:158
    // a, b = t
    frame_dig 4
    uncover 1
    // tuple_support/nested_tuples.py:159
    // total += a + b
    +
    frame_dig 2
    uncover 1
    +
    frame_bury 2
    // tuple_support/nested_tuples.py:157
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_dig 3
    switch test_nested_iteration_for_header_1@3 test_nested_iteration_for_header_2@4 test_nested_iteration_for_header_3@5
    b test_nested_iteration_after_for@6

test_nested_iteration_for_header_1@3:
    int 1
    frame_bury 3
    // tuple_support/nested_tuples.py:154
    // y = UInt64(2)
    int 2
    // tuple_support/nested_tuples.py:157
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 4
    // tuple_support/nested_tuples.py:153
    // x = UInt64(1)
    int 1
    b test_nested_iteration_for_body@1

test_nested_iteration_for_header_2@4:
    int 2
    frame_bury 3
    // tuple_support/nested_tuples.py:153
    // x = UInt64(1)
    int 1
    // tuple_support/nested_tuples.py:157
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 4
    // tuple_support/nested_tuples.py:153
    // x = UInt64(1)
    int 1
    b test_nested_iteration_for_body@1

test_nested_iteration_for_header_3@5:
    int 3
    frame_bury 3
    // tuple_support/nested_tuples.py:154
    // y = UInt64(2)
    int 2
    // tuple_support/nested_tuples.py:157
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 4
    // tuple_support/nested_tuples.py:154
    // y = UInt64(2)
    int 2
    b test_nested_iteration_for_body@1

test_nested_iteration_after_for@6:
    int 0
    frame_bury 1
    // tuple_support/nested_tuples.py:153
    // x = UInt64(1)
    int 1
    // tuple_support/nested_tuples.py:161
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:154
    // y = UInt64(2)
    int 2

test_nested_iteration_for_body@7:
    // tuple_support/nested_tuples.py:162
    // total += a + b
    frame_dig 0
    uncover 1
    +
    frame_dig 2
    uncover 1
    +
    frame_bury 2
    // tuple_support/nested_tuples.py:161
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_dig 1
    switch test_nested_iteration_for_header_1@9 test_nested_iteration_for_header_2@10 test_nested_iteration_for_header_3@11
    b test_nested_iteration_after_for@12

test_nested_iteration_for_header_1@9:
    int 1
    frame_bury 1
    // tuple_support/nested_tuples.py:154
    // y = UInt64(2)
    int 2
    // tuple_support/nested_tuples.py:161
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:153
    // x = UInt64(1)
    int 1
    b test_nested_iteration_for_body@7

test_nested_iteration_for_header_2@10:
    int 2
    frame_bury 1
    // tuple_support/nested_tuples.py:153
    // x = UInt64(1)
    int 1
    // tuple_support/nested_tuples.py:161
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:153
    // x = UInt64(1)
    int 1
    b test_nested_iteration_for_body@7

test_nested_iteration_for_header_3@11:
    int 3
    frame_bury 1
    // tuple_support/nested_tuples.py:154
    // y = UInt64(2)
    int 2
    // tuple_support/nested_tuples.py:161
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:154
    // y = UInt64(2)
    int 2
    b test_nested_iteration_for_body@7

test_nested_iteration_after_for@12:
    // tuple_support/nested_tuples.py:164
    // assert total // 8 == 3
    frame_dig 2
    int 8
    /
    int 3
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested() -> void:
test_single_evaluation_nested:
    // tuple_support/nested_tuples.py:49-50
    // @subroutine
    // def test_single_evaluation_nested(self) -> None:
    proto 0 0
    // tuple_support/nested_tuples.py:6
    // self.build_nested_call_count = UInt64(0)
    byte "build_nested_call_count"
    // tuple_support/nested_tuples.py:51
    // self.build_nested_call_count = UInt64(0)
    int 0
    app_global_put
    // tuple_support/nested_tuples.py:52
    // result = self.build_nested() or self.build_nested()
    callsub build_nested
    cover 2
    cover 1
    dup
    cover 3
    dup
    uncover 1
    ==
    dig 1
    uncover 2
    ==
    &&
    dig 1
    uncover 2
    ==
    ||
    bz test_single_evaluation_nested_ternary_false@2
    frame_dig 0
    b test_single_evaluation_nested_ternary_merge@3

test_single_evaluation_nested_ternary_false@2:
    // tuple_support/nested_tuples.py:52
    // result = self.build_nested() or self.build_nested()
    callsub build_nested
    pop
    pop

test_single_evaluation_nested_ternary_merge@3:
    // tuple_support/nested_tuples.py:53
    // assert result[0][0] == "hi"
    byte "hi"
    ==
    assert
    // tuple_support/nested_tuples.py:54
    // assert self.build_nested_call_count == 1
    int 0
    // tuple_support/nested_tuples.py:6
    // self.build_nested_call_count = UInt64(0)
    byte "build_nested_call_count"
    // tuple_support/nested_tuples.py:54
    // assert self.build_nested_call_count == 1
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    int 1
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.build_nested() -> bytes, uint64, bytes:
build_nested:
    // tuple_support/nested_tuples.py:44-45
    // @subroutine
    // def build_nested(self) -> tuple[tuple[String, UInt64], Bytes]:
    proto 0 3
    // tuple_support/nested_tuples.py:46
    // self.build_nested_call_count += 1
    int 0
    // tuple_support/nested_tuples.py:6
    // self.build_nested_call_count = UInt64(0)
    byte "build_nested_call_count"
    // tuple_support/nested_tuples.py:46
    // self.build_nested_call_count += 1
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    int 1
    +
    // tuple_support/nested_tuples.py:6
    // self.build_nested_call_count = UInt64(0)
    byte "build_nested_call_count"
    // tuple_support/nested_tuples.py:46
    // self.build_nested_call_count += 1
    uncover 1
    app_global_put
    // tuple_support/nested_tuples.py:47
    // return (String("hi"), UInt64(1)), Bytes(b"hmmm")
    byte "hi"
    int 1
    byte 0x686d6d6d
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(args.0: bytes, args.1.0: bytes, args.1.1.0: uint64) -> bytes, bytes, uint64:
nested_tuple_params:
    // tuple_support/nested_tuples.py:37-40
    // @arc4.abimethod()
    // def nested_tuple_params(
    //     self, args: tuple[String, tuple[Bytes, tuple[UInt64]]]
    // ) -> tuple[Bytes, tuple[String, UInt64]]:
    proto 3 3
    // tuple_support/nested_tuples.py:41
    // (s, (b, (u,))) = args
    frame_dig -3
    frame_dig -2
    frame_dig -1
    cover 1
    // tuple_support/nested_tuples.py:42
    // return b, (s, u)
    uncover 2
    uncover 2
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create() -> void:
__algopy_default_create:
    // tuple_support/nested_tuples.py:4
    // class NestedTuples(ARC4Contract):
    proto 0 0
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.__init__() -> void:
__init__:
    // tuple_support/nested_tuples.py:5
    // def __init__(self) -> None:
    proto 0 0
    // tuple_support/nested_tuples.py:6
    // self.build_nested_call_count = UInt64(0)
    byte "build_nested_call_count"
    int 0
    app_global_put
    retsub
