#pragma version 10

test_cases.tuple_support.nested_tuples.NestedTuples.approval_program:
    intcblock 0 1 2 8
    bytecblock 0x "Hi" "There" "build_nested_call_count" 0x151f7c75 "hi"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.__init__() -> void:
__init__:
    // tuple_support/nested_tuples.py:19
    // def __init__(self) -> None:
    proto 0 0
    // tuple_support/nested_tuples.py:20
    // self.build_nested_call_count = UInt64(0)
    bytec_3 // "build_nested_call_count"
    intc_0 // 0
    app_global_put
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __puya_arc4_router___bare_routing@8
    txna ApplicationArgs 0
    pushbytes 0x9e5a3ba7 // method "run_tests()bool"
    pushbytes 0xcea0521b // method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))"
    pushbytes 0x373f5b24 // method "named_tuple((uint64,byte[],string))(uint64,byte[],string)"
    pushbytes 0xec593096 // method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))"
    uncover 4
    match __puya_arc4_router___run_tests_route@2 __puya_arc4_router___nested_tuple_params_route@3 __puya_arc4_router___named_tuple_route@4 __puya_arc4_router___nested_named_tuple_params_route@5
    b __puya_arc4_router___switch_case_default@6

__puya_arc4_router___run_tests_route@2:
    // tuple_support/nested_tuples.py:22
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub run_tests
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___nested_tuple_params_route@3:
    // tuple_support/nested_tuples.py:51
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    intc_2 // 2
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    // tuple_support/nested_tuples.py:51
    // @arc4.abimethod()
    uncover 2
    uncover 2
    uncover 2
    callsub nested_tuple_params
    cover 2
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 2
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    itob
    pushint 10 // 10
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    swap
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    dig 2
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___named_tuple_route@4:
    // tuple_support/nested_tuples.py:58
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    pushint 10 // 10
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    // tuple_support/nested_tuples.py:58
    // @arc4.abimethod()
    uncover 2
    uncover 2
    uncover 2
    callsub named_tuple
    cover 2
    swap
    itob
    cover 2
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 2
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 2
    bytec_0 // 0x
    swap
    concat
    pushint 12 // 12
    itob
    extract 6 2
    concat
    dig 1
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___nested_named_tuple_params_route@5:
    // tuple_support/nested_tuples.py:63
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_3 // 8
    dup
    extract3 // on error: Index access is out of bounds
    swap
    dup
    pushint 16 // 16
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    pushint 10 // 10
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    // tuple_support/nested_tuples.py:63
    // @arc4.abimethod()
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    callsub nested_named_tuple_params
    cover 4
    cover 3
    cover 2
    cover 4
    itob
    cover 3
    itob
    cover 2
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 2
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 2
    bytec_0 // 0x
    swap
    concat
    pushint 12 // 12
    itob
    extract 6 2
    concat
    dig 1
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    bytec_0 // 0x
    uncover 2
    concat
    uncover 2
    concat
    pushint 18 // 18
    itob
    extract 6 2
    concat
    swap
    concat
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@6:
    b __puya_arc4_router___after_if_else@12

__puya_arc4_router___bare_routing@8:
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match __puya_arc4_router_____algopy_default_create@9
    b __puya_arc4_router___switch_case_default@10

__puya_arc4_router_____algopy_default_create@9:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algopy_default_create
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@10:

__puya_arc4_router___after_if_else@12:
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    intc_0 // 0
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.run_tests() -> uint64:
run_tests:
    // tuple_support/nested_tuples.py:22-23
    // @arc4.abimethod()
    // def run_tests(self) -> bool:
    proto 0 1
    // tuple_support/nested_tuples.py:24
    // x = (String("Hi"), String("There"))
    bytec_1 // "Hi"
    bytec_2 // "There"
    // tuple_support/nested_tuples.py:25
    // assert test_swap(x) == (String("There"), String("Hi"))
    callsub test_swap
    swap
    bytec_2 // "There"
    ==
    swap
    bytec_1 // "Hi"
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:24
    // x = (String("Hi"), String("There"))
    bytec_2 // "There"
    // tuple_support/nested_tuples.py:31
    // assert z2_1_1 == "There"
    dup
    ==
    assert
    // tuple_support/nested_tuples.py:24
    // x = (String("Hi"), String("There"))
    bytec_1 // "Hi"
    // tuple_support/nested_tuples.py:27
    // z = (UInt64(0), UInt64(2), y)
    intc_0 // 0
    intc_2 // 2
    // tuple_support/nested_tuples.py:26
    // y = (UInt64(1), x)
    intc_1 // 1
    // tuple_support/nested_tuples.py:24
    // x = (String("Hi"), String("There"))
    bytec_1 // "Hi"
    bytec_2 // "There"
    dup
    // tuple_support/nested_tuples.py:33
    // (a, b, (c, d, (e,))) = test_rearrange(x[0], _b=x[1], args=z)
    callsub test_rearrange
    cover 4
    cover 3
    cover 2
    swap
    cover 2
    cover 3
    cover 4
    swap
    cover 4
    uncover 2
    cover 4
    // tuple_support/nested_tuples.py:34
    // assert (a, b) == (String("Hi"), UInt64(0))
    bytec_1 // "Hi"
    ==
    swap
    intc_0 // 0
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:35
    // assert (c, d) == (UInt64(2), UInt64(1))
    intc_2 // 2
    ==
    swap
    intc_1 // 1
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:36
    // assert e == String("There")
    bytec_2 // "There"
    ==
    assert
    // tuple_support/nested_tuples.py:38
    // test_intrinsics(UInt64(1), UInt64(2))
    intc_1 // 1
    intc_2 // 2
    callsub test_intrinsics
    // tuple_support/nested_tuples.py:39
    // test_nested_slicing()
    callsub test_nested_slicing
    // tuple_support/nested_tuples.py:40
    // test_nested_singles(UInt64(1), reassign=True)
    intc_1 // 1
    dup
    callsub test_nested_singles
    // tuple_support/nested_tuples.py:41
    // test_nested_singles(UInt64(1), reassign=False)
    intc_1 // 1
    intc_0 // 0
    callsub test_nested_singles
    // tuple_support/nested_tuples.py:42
    // test_nested_mutation()
    callsub test_nested_mutation
    // tuple_support/nested_tuples.py:26
    // y = (UInt64(1), x)
    intc_1 // 1
    dup
    // tuple_support/nested_tuples.py:44
    // assert z[2] == y
    ==
    // tuple_support/nested_tuples.py:24
    // x = (String("Hi"), String("There"))
    bytec_1 // "Hi"
    dup
    // tuple_support/nested_tuples.py:44
    // assert z[2] == y
    ==
    // tuple_support/nested_tuples.py:24
    // x = (String("Hi"), String("There"))
    bytec_2 // "There"
    dup
    // tuple_support/nested_tuples.py:44
    // assert z[2] == y
    ==
    &&
    &&
    assert
    // tuple_support/nested_tuples.py:46
    // test_nested_iteration()
    callsub test_nested_iteration
    // tuple_support/nested_tuples.py:48
    // self.test_single_evaluation_nested()
    callsub test_single_evaluation_nested
    // tuple_support/nested_tuples.py:49
    // return True
    intc_1 // 1
    retsub


// test_cases.tuple_support.nested_tuples.test_swap(args.0: bytes, args.1: bytes) -> bytes, bytes:
test_swap:
    // tuple_support/nested_tuples.py:90-91
    // @subroutine
    // def test_swap(args: tuple[String, String]) -> tuple[String, String]:
    proto 2 2
    // tuple_support/nested_tuples.py:92
    // (a, b) = args
    frame_dig -2
    frame_dig -1
    // tuple_support/nested_tuples.py:93
    // return b, a
    swap
    retsub


// test_cases.tuple_support.nested_tuples.test_rearrange(_a: bytes, args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: bytes, args.2.1.1: bytes, _b: bytes) -> bytes, uint64, uint64, uint64, bytes:
test_rearrange:
    // tuple_support/nested_tuples.py:81-84
    // @subroutine
    // def test_rearrange(
    //     _a: String, args: tuple[UInt64, UInt64, tuple[UInt64, tuple[String, String]]], _b: String
    // ) -> tuple[String, UInt64, tuple[UInt64, UInt64, tuple[String]]]:
    proto 7 5
    // tuple_support/nested_tuples.py:85
    // (a, b, (c, (d, e))) = args
    frame_dig -6
    frame_dig -5
    frame_dig -4
    frame_dig -3
    frame_dig -2
    swap
    // tuple_support/nested_tuples.py:87
    // return d, a, (b, c, (e,))
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    retsub


// test_cases.tuple_support.nested_tuples.test_intrinsics(num1: uint64, num2: uint64) -> void:
test_intrinsics:
    // tuple_support/nested_tuples.py:96-97
    // @subroutine
    // def test_intrinsics(num1: UInt64, num2: UInt64) -> None:
    proto 2 0
    // tuple_support/nested_tuples.py:98
    // nt = (UInt64(1), op.addw(num1, num2), UInt64(42))
    frame_dig -2
    frame_dig -1
    addw
    swap
    intc_1 // 1
    // tuple_support/nested_tuples.py:99
    // assert nt[0] == 1
    dup
    ==
    assert
    // tuple_support/nested_tuples.py:98
    // nt = (UInt64(1), op.addw(num1, num2), UInt64(42))
    pushint 42 // 42
    // tuple_support/nested_tuples.py:100
    // assert nt[-1] == 42
    dup
    ==
    assert
    // tuple_support/nested_tuples.py:101
    // assert nt[1] == (0, num1 + num2)  # type: ignore[comparison-overlap]
    dup
    intc_0 // 0
    ==
    frame_dig -2
    frame_dig -1
    +
    dig 3
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:102
    // assert nt[1][:1] == (0,)  # type: ignore[comparison-overlap]
    dup
    intc_0 // 0
    ==
    assert
    // tuple_support/nested_tuples.py:103
    // assert nt[1][1:] == (num1 + num2,)
    frame_dig -2
    frame_dig -1
    +
    dig 2
    ==
    assert
    // tuple_support/nested_tuples.py:105
    // assert x == 0
    intc_0 // 0
    ==
    assert
    // tuple_support/nested_tuples.py:106
    // assert y == num1 + num2
    frame_dig -2
    frame_dig -1
    +
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_slicing() -> void:
test_nested_slicing:
    // tuple_support/nested_tuples.py:109-110
    // @subroutine
    // def test_nested_slicing() -> None:
    proto 0 0
    // tuple_support/nested_tuples.py:120
    // UInt64(4),
    pushint 4 // 4
    // tuple_support/nested_tuples.py:126
    // assert b[-1] == 4
    dup
    ==
    assert
    // tuple_support/nested_tuples.py:113
    // UInt64(2),
    intc_2 // 2
    // tuple_support/nested_tuples.py:127
    // assert ((a, c),) == ((2, 5),)  # type: ignore[comparison-overlap]
    dup
    ==
    // tuple_support/nested_tuples.py:122
    // UInt64(5),
    pushint 5 // 5
    // tuple_support/nested_tuples.py:127
    // assert ((a, c),) == ((2, 5),)  # type: ignore[comparison-overlap]
    dup
    ==
    &&
    assert
    // tuple_support/nested_tuples.py:117
    // String("a"),
    pushbytes "a"
    // tuple_support/nested_tuples.py:128
    // assert b[1][:] == ("a", "b")  # type: ignore[comparison-overlap]
    dup
    ==
    // tuple_support/nested_tuples.py:118
    // String("b"),
    pushbytes "b"
    // tuple_support/nested_tuples.py:128
    // assert b[1][:] == ("a", "b")  # type: ignore[comparison-overlap]
    dup
    ==
    &&
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: uint64) -> void:
test_nested_singles:
    // tuple_support/nested_tuples.py:131-132
    // @subroutine
    // def test_nested_singles(one: UInt64, *, reassign: bool) -> None:
    proto 2 0
    // tuple_support/nested_tuples.py:134
    // (UInt64(0),),
    intc_0 // 0
    // tuple_support/nested_tuples.py:133-137
    // s = (
    //     (UInt64(0),),
    //     (one,),
    //     (UInt64(2),),
    // )
    frame_dig -2
    dup
    // tuple_support/nested_tuples.py:136
    // (UInt64(2),),
    intc_2 // 2
    // tuple_support/nested_tuples.py:133-137
    // s = (
    //     (UInt64(0),),
    //     (one,),
    //     (UInt64(2),),
    // )
    swap
    // tuple_support/nested_tuples.py:134
    // (UInt64(0),),
    intc_0 // 0
    // tuple_support/nested_tuples.py:138
    // assert s[0][0] == 0
    dup
    ==
    assert
    // tuple_support/nested_tuples.py:134
    // (UInt64(0),),
    intc_0 // 0
    // tuple_support/nested_tuples.py:139
    // assert s[0] == (0,)  # type: ignore[comparison-overlap]
    dup
    ==
    assert
    // tuple_support/nested_tuples.py:140
    // assert s[1][0] == 1
    dup
    intc_1 // 1
    ==
    assert
    // tuple_support/nested_tuples.py:141
    // assert s[1] == (one,)
    dup
    frame_dig -2
    ==
    assert
    // tuple_support/nested_tuples.py:136
    // (UInt64(2),),
    intc_2 // 2
    // tuple_support/nested_tuples.py:142
    // assert s[2][0] == 2
    dup
    ==
    assert
    // tuple_support/nested_tuples.py:136
    // (UInt64(2),),
    intc_2 // 2
    // tuple_support/nested_tuples.py:143
    // assert s[2] == (2,)  # type: ignore[comparison-overlap]
    dup
    ==
    assert
    // tuple_support/nested_tuples.py:145
    // if reassign:
    frame_dig -1
    bz test_nested_singles_after_if_else@2
    // tuple_support/nested_tuples.py:147
    // (UInt64(3),),
    pushint 3 // 3
    // tuple_support/nested_tuples.py:146-150
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    frame_bury 0
    // tuple_support/nested_tuples.py:148
    // (UInt64(4),),
    pushint 4 // 4
    // tuple_support/nested_tuples.py:146-150
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    frame_bury 1
    // tuple_support/nested_tuples.py:149
    // (UInt64(5),),
    pushint 5 // 5
    // tuple_support/nested_tuples.py:146-150
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    frame_bury 2

test_nested_singles_after_if_else@2:
    // tuple_support/nested_tuples.py:151
    // assert s[0][0] == (3 if reassign else 0)
    intc_0 // 0
    pushint 3 // 3
    frame_dig -1
    select
    frame_dig 0
    ==
    assert
    // tuple_support/nested_tuples.py:152
    // (tmp,) = s[2]
    frame_dig 2
    // tuple_support/nested_tuples.py:153
    // assert tmp == (5 if reassign else 2)
    intc_2 // 2
    pushint 5 // 5
    frame_dig -1
    select
    ==
    assert
    // tuple_support/nested_tuples.py:154
    // assert t == (one,)
    frame_dig 3
    frame_dig -2
    ==
    assert
    // tuple_support/nested_tuples.py:156
    // s0, (s1,), s2 = s
    frame_dig 1
    dup
    // tuple_support/nested_tuples.py:157
    // s1 += one
    frame_dig -2
    +
    // tuple_support/nested_tuples.py:158
    // assert s1 == (5 if reassign else 2)
    intc_2 // 2
    pushint 5 // 5
    frame_dig -1
    select
    ==
    assert
    // tuple_support/nested_tuples.py:159
    // assert s[1][0] == (4 if reassign else 1)
    intc_1 // 1
    pushint 4 // 4
    frame_dig -1
    select
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_mutation() -> void:
test_nested_mutation:
    // tuple_support/nested_tuples.py:162-163
    // @subroutine
    // def test_nested_mutation() -> None:
    proto 0 0
    // tuple_support/nested_tuples.py:166-168
    // arc4.DynamicArray(
    //     arc4.UInt64(0),
    // ),
    bytec_0 // 0x
    // tuple_support/nested_tuples.py:167
    // arc4.UInt64(0),
    pushbytes 0x0000000000000000
    // tuple_support/nested_tuples.py:166-168
    // arc4.DynamicArray(
    //     arc4.UInt64(0),
    // ),
    concat
    pushbytes 0x0001
    swap
    concat
    // tuple_support/nested_tuples.py:171
    // x[0][0].append(arc4.UInt64(1))
    extract 2 0
    bytec_0 // 0x
    pushbytes 0x0000000000000001
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // tuple_support/nested_tuples.py:172
    // assert x[0][0].length == 2
    intc_0 // 0
    extract_uint16
    intc_2 // 2
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_iteration() -> void:
test_nested_iteration:
    // tuple_support/nested_tuples.py:175-176
    // @subroutine
    // def test_nested_iteration() -> None:
    proto 0 0
    bytec_0 // ""
    dup
    // tuple_support/nested_tuples.py:179
    // total = UInt64(0)
    intc_0 // 0
    dup
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_1 // 1
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2

test_nested_iteration_for_body@1:
    // tuple_support/nested_tuples.py:182
    // a, b = t
    frame_dig 4
    // tuple_support/nested_tuples.py:183
    // total += a + b
    +
    frame_dig 2
    +
    frame_bury 2
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_dig 3
    switch test_nested_iteration_for_header_1@3 test_nested_iteration_for_header_2@4 test_nested_iteration_for_header_3@5
    b test_nested_iteration_after_for@6

test_nested_iteration_for_header_1@3:
    intc_1 // 1
    frame_bury 3
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 4
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_1 // 1
    b test_nested_iteration_for_body@1

test_nested_iteration_for_header_2@4:
    intc_2 // 2
    frame_bury 3
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_1 // 1
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 4
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_1 // 1
    b test_nested_iteration_for_body@1

test_nested_iteration_for_header_3@5:
    pushint 3 // 3
    frame_bury 3
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 4
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    b test_nested_iteration_for_body@1

test_nested_iteration_after_for@6:
    intc_0 // 0
    frame_bury 1
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_1 // 1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2

test_nested_iteration_for_body@7:
    // tuple_support/nested_tuples.py:186
    // total += a + b
    frame_dig 0
    +
    frame_dig 2
    +
    frame_bury 2
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_dig 1
    switch test_nested_iteration_for_header_1@9 test_nested_iteration_for_header_2@10 test_nested_iteration_for_header_3@11
    b test_nested_iteration_after_for@12

test_nested_iteration_for_header_1@9:
    intc_1 // 1
    frame_bury 1
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_1 // 1
    b test_nested_iteration_for_body@7

test_nested_iteration_for_header_2@10:
    intc_2 // 2
    frame_bury 1
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_1 // 1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_1 // 1
    b test_nested_iteration_for_body@7

test_nested_iteration_for_header_3@11:
    pushint 3 // 3
    frame_bury 1
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    b test_nested_iteration_for_body@7

test_nested_iteration_after_for@12:
    // tuple_support/nested_tuples.py:188
    // assert total // 8 == 3
    frame_dig 2
    intc_3 // 8
    /
    pushint 3 // 3
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested() -> void:
test_single_evaluation_nested:
    // tuple_support/nested_tuples.py:73-74
    // @subroutine
    // def test_single_evaluation_nested(self) -> None:
    proto 0 0
    // tuple_support/nested_tuples.py:75
    // self.build_nested_call_count = UInt64(0)
    bytec_3 // "build_nested_call_count"
    intc_0 // 0
    app_global_put
    // tuple_support/nested_tuples.py:76
    // result = self.build_nested() or self.build_nested()
    callsub build_nested
    cover 2
    swap
    dup
    cover 3
    dup
    ==
    dig 1
    uncover 2
    ==
    &&
    dig 1
    uncover 2
    ==
    ||
    bz test_single_evaluation_nested_ternary_false@2
    frame_dig 0
    b test_single_evaluation_nested_ternary_merge@3

test_single_evaluation_nested_ternary_false@2:
    // tuple_support/nested_tuples.py:76
    // result = self.build_nested() or self.build_nested()
    callsub build_nested
    popn 2

test_single_evaluation_nested_ternary_merge@3:
    // tuple_support/nested_tuples.py:77
    // assert result[0][0] == "hi"
    bytec 5 // "hi"
    ==
    assert
    // tuple_support/nested_tuples.py:78
    // assert self.build_nested_call_count == 1
    intc_0 // 0
    bytec_3 // "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    intc_1 // 1
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.build_nested() -> bytes, uint64, bytes:
build_nested:
    // tuple_support/nested_tuples.py:68-69
    // @subroutine
    // def build_nested(self) -> tuple[tuple[String, UInt64], Bytes]:
    proto 0 3
    // tuple_support/nested_tuples.py:70
    // self.build_nested_call_count += 1
    intc_0 // 0
    bytec_3 // "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    intc_1 // 1
    +
    bytec_3 // "build_nested_call_count"
    swap
    app_global_put
    // tuple_support/nested_tuples.py:71
    // return (String("hi"), UInt64(1)), Bytes(b"hmmm")
    bytec 5 // "hi"
    intc_1 // 1
    pushbytes 0x686d6d6d
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(args.0: bytes, args.1.0: bytes, args.1.1.0: uint64) -> bytes, bytes, uint64:
nested_tuple_params:
    // tuple_support/nested_tuples.py:51-54
    // @arc4.abimethod()
    // def nested_tuple_params(
    //     self, args: tuple[String, tuple[Bytes, tuple[UInt64]]]
    // ) -> tuple[Bytes, tuple[String, UInt64]]:
    proto 3 3
    // tuple_support/nested_tuples.py:55
    // (s, (b, (u,))) = args
    frame_dig -3
    frame_dig -2
    frame_dig -1
    swap
    // tuple_support/nested_tuples.py:56
    // return b, (s, u)
    uncover 2
    uncover 2
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple(args.a: uint64, args.b: bytes, args.c: bytes) -> uint64, bytes, bytes:
named_tuple:
    // tuple_support/nested_tuples.py:58-59
    // @arc4.abimethod()
    // def named_tuple(self, args: Child) -> Child:
    proto 3 3
    // tuple_support/nested_tuples.py:60
    // a, b, c = args
    frame_dig -3
    frame_dig -2
    frame_dig -1
    // tuple_support/nested_tuples.py:61
    // return Child(a, b, c)
    uncover 2
    uncover 2
    uncover 2
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params(args.foo: uint64, args.foo_arc: bytes, args.child.a: uint64, args.child.b: bytes, args.child.c: bytes) -> uint64, bytes, uint64, bytes, bytes:
nested_named_tuple_params:
    // tuple_support/nested_tuples.py:63-64
    // @arc4.abimethod()
    // def nested_named_tuple_params(self, args: Parent) -> Parent:
    proto 5 5
    // tuple_support/nested_tuples.py:65
    // foo, foo_arc, (a, b, c) = args
    frame_dig -5
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    // tuple_support/nested_tuples.py:66
    // return Parent(foo, foo_arc, Child(a, b, c))
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create() -> void:
__algopy_default_create:
    proto 0 0
    retsub
