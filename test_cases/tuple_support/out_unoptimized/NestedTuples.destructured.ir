contract test_cases.tuple_support.nested_tuples.NestedTuples:
    program approval:
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.approval_program() -> bool:
            block@0: // L5
                let (awst_tmp%0#0: bytes, awst_tmp%1#0: bytes) = test_cases.tuple_support.nested_tuples.test_swap("Hi", "There")
                let tmp%0#0: bool = (== awst_tmp%0#0 "There")
                let tmp%1#0: bool = (== awst_tmp%1#0 "Hi")
                let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
                (assert tmp%2#0)
                let tmp%3#0: bool = (== "There" "There")
                (assert tmp%3#0)
                let (tuple_assignment%0#0: bytes, tuple_assignment%1#0: uint64, tuple_assignment%2#0: uint64, tuple_assignment%3#0: uint64, tuple_assignment%4#0: bytes) = test_cases.tuple_support.nested_tuples.test_rearrange(0u, 2u, 1u, "Hi", "There")
                let a#0: bytes = tuple_assignment%0#0
                let b#0: uint64 = tuple_assignment%1#0
                let c#0: uint64 = tuple_assignment%2#0
                let d#0: uint64 = tuple_assignment%3#0
                let e#0: bytes = tuple_assignment%4#0
                let tmp%4#0: bool = (== a#0 "Hi")
                let tmp%5#0: bool = (== b#0 0u)
                let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
                (assert tmp%6#0)
                let tmp%7#0: bool = (== c#0 2u)
                let tmp%8#0: bool = (== d#0 1u)
                let tmp%9#0: bool = (&& tmp%7#0 tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: bool = (== e#0 "There")
                (assert tmp%10#0)
                test_cases.tuple_support.nested_tuples.test_intrinsics(1u, 2u)
                test_cases.tuple_support.nested_tuples.test_nested_slicing()
                let tmp%11#0: bool = (== 1u 1u)
                let tmp%12#0: bool = (== "Hi" "Hi")
                let tmp%13#0: bool = (== "There" "There")
                let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
                let tmp%15#0: bool = (&& tmp%11#0 tmp%14#0)
                (assert tmp%15#0)
                return 1u
        
        subroutine test_cases.tuple_support.nested_tuples.test_swap(args.0: bytes, args.1: bytes) -> <bytes, bytes>:
            block@0: // L40
                let a#0: bytes = args.0#0
                let b#0: bytes = args.1#0
                return b#0 a#0
        
        subroutine test_cases.tuple_support.nested_tuples.test_rearrange(args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: bytes, args.2.1.1: bytes) -> <bytes, uint64, uint64, uint64, bytes>:
            block@0: // L31
                let a#0: uint64 = args.0#0
                let b#0: uint64 = args.1#0
                let c#0: uint64 = args.2.0#0
                let d#0: bytes = args.2.1.0#0
                let e#0: bytes = args.2.1.1#0
                return d#0 a#0 b#0 c#0 e#0
        
        subroutine test_cases.tuple_support.nested_tuples.test_intrinsics(num1: uint64, num2: uint64) -> void:
            block@0: // L46
                let (tmp%0#0: uint64, tmp%1#0: uint64) = (addw num1#0 num2#0)
                let nt.1.0#0: uint64 = tmp%0#0
                let nt.1.1#0: uint64 = tmp%1#0
                let tmp%2#0: bool = (== 1u 1u)
                (assert tmp%2#0)
                let tmp%3#0: bool = (== 42u 42u)
                (assert tmp%3#0)
                let awst_tmp%0#0: uint64 = nt.1.0#0
                let awst_tmp%1#0: uint64 = nt.1.1#0
                let tmp%4#0: bool = (== awst_tmp%0#0 0u)
                let tmp%5#0: uint64 = (+ num1#0 num2#0)
                let tmp%6#0: bool = (== awst_tmp%1#0 tmp%5#0)
                let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
                (assert tmp%7#0)
                let awst_tmp%2#0: uint64 = nt.1.0#0
                let tmp%8#0: bool = (== awst_tmp%2#0 0u)
                (assert tmp%8#0)
                let awst_tmp%3#0: uint64 = nt.1.1#0
                let tmp%9#0: uint64 = (+ num1#0 num2#0)
                let tmp%10#0: bool = (== awst_tmp%3#0 tmp%9#0)
                (assert tmp%10#0)
                let x#0: uint64 = nt.1.0#0
                let y#0: uint64 = nt.1.1#0
                let tmp%11#0: bool = (== x#0 0u)
                (assert tmp%11#0)
                let tmp%12#0: uint64 = (+ num1#0 num2#0)
                let tmp%13#0: bool = (== y#0 tmp%12#0)
                (assert tmp%13#0)
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing() -> void:
            block@0: // L59
                let tmp%0#0: bool = (== 4u 4u)
                (assert tmp%0#0)
                let tmp%1#0: bool = (== 2u 2u)
                let tmp%2#0: bool = (== 5u 5u)
                let tmp%3#0: bool = (&& tmp%1#0 tmp%2#0)
                (assert tmp%3#0)
                let tmp%4#0: bool = (== "a" "a")
                let tmp%5#0: bool = (== "b" "b")
                let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
                (assert tmp%6#0)
                return 
    
    program clear-state:
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.clear_state_program() -> bool:
            block@0: // L27
                return 1u