{
  "version": 3,
  "sources": [
    "../nested_tuples.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;AAiHK;;;;;;AALA;;;;;;AAPA;;;;;;AA7BA;;;;;;AANA;;;;;;AAnBA;;;;;;AALA;;;;;;AAJA;;;;;;AALA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwHG;;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;AAAP;AAGH;;;;;;AAEO;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;;AAAA;;AAAA;AAGH;;;;;;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;;AAAA;AAGH;;;;;;AAIG;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAEA;;AAAA;;AAAA;;AAAA;;AAAA;AAGH;;;;;;AAEG;;AAAA;;AACA;;AAAA;AAGH;;;;;;AAEoB;;AAAA;;AAAA;AAAjB;;AAAM;AACU;AAAT;AAAP;AADsC;;AAErB;;AAAV;AAAP;AACO;AAAU;AAAV;AAAa;;AAAA;;AAAA;AAAb;;AAAA;AAAA;AAAP;AACO;AAAc;AAAd;AAAP;AACqB;;AAAA;;AAAA;AAAd;;AAAA;AAAP;AAEY;AAAL;AAAP;AACY;;AAAA;;AAAA;AAAL;AAAP;;;;;AAcQ;;AAMQ;;AAAT;AAAP;AAbI;AAckB;AAAf;AALH;;AAKqB;;AAAlB;AAAA;AAAP;AAVY;;;AAWO;;;AAAZ;AAVK;;;AAUY;;;AAAjB;AAAA;AAAP;;AAGH;;;;;;AAGQ;AADL;;AAAA;AAGK;AAHL;;AACK;AAIa;AAAX;AAAP;AAJK;AAKW;AAAT;AAAP;AACO;AAAW;AAAX;AAAP;AACO;AAAA;;AAAA;AAAP;AALK;AAMa;AAAX;AAAP;AANK;AAOW;AAAT;AAAP;AAEJ;;AAAA;;;AAAA;;;AAEa;;AADL;;AAEK;;AAFL;;AAGK;;AAHL;;;;;AAKe;AAAA;;AAAA;;AAAA;AAAZ;;AAAA;AAAP;AACA;;AACe;AAAA;;AAAA;;AAAA;AAAR;AAAP;AACO;;AAAA;;AAAA;AAAP;AAEA;;AAAA;AACA;;AAAA;AACc;AAAA;;AAAA;;AAAA;AAAP;AAAP;AACmB;AAAA;;AAAA;;AAAA;AAAZ;AAAP;;;;;AAOQ;AAAA;AAAA;;;AACI;;AADJ;AAKR;AAAe;;AAAf;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AACO;AAAA;AAAkB;AAAlB;AAAP;;AAGH;;;;;;;;;AAIW;;AAFJ;AACA;;;;AAIA;;AAAA;;AACS;AAAT;;AAAA;AAAA;;;;;AAFR;;AAAA;;;;;;;;AAAA;;;;;;AAJQ;AAQA;;AAPA;AAOA;;;;;AACS;;AAAA;;AAAA;AAAT;;AAAA;AAAA;;;;;AADR;;AAAA;;;;;;;;AAAA;;;AAGW;;AAAS;AAAT;AAAc;;AAAd;AAAP;;;;;;AAVI;AAOA;;AAPA;AAOA;;;;;;;;AARA;AAQA;;AARA;AAQA;;;;;;;;AAPA;AAOA;;AARA;AAQA;;;;;;;;;AAPA;AAGA;;AAHA;AAGA;;;;;;;;AAJA;AAIA;;AAJA;AAIA;;;;;;;;AAHA;AAGA;;AAJA;AAIA;;;;;;;;AA5OH;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAKA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAKA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAmBA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AA6BA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAKA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AA/GG;;AAA+B;AAA/B;AAGQ;AAAA;AAAA;;;AADR;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAGU;AAHV;AAAA;AAAA;;AAAA;AAIU;AAJV;AAAA;AAAA;;;AAIU;AAJV;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAKU;AALV;AAAA;AAAA;;;AAKU;AALV;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AASH;;;;;;AAEG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;;;;AAIO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAP;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAEH;;;;;;AAEkC;;AAAQ;AAAR;AAAtB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAT;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAEH;;;;;;AAEU;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAO;;AAAP;;AAAA;AAAA;AAAP;;AAAA;AAEH;;;;;;AAEmB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAT;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAP;AAEH;;;;;;;;AAEwC;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAf;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAAtB;;AAAA;;AAAA;;AACA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AADsB;AAAA;;AAAA;AAAA;;;;;AAGzB;;;;;;;;AAEuB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAb;;AAAA;;AAAA;AAAqC;;AAAW;AAAtB;;;AAAA;;AAAA;;AAA1B;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAAP;AAAiC;;AAAA;;AAAA;;AAAA;;;;;AAEpC;;;;;;;;AAEqC;;AAAA;;;AACjB;;;AAA+C;;AAAW;AAAtB;;;AAAA;;AAAA;;AAA9C;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAAP;AAAqD;;AAAA;;AAAA;;AAAA;;;;;AAExD;;;;;;AAGW;AAAA;AAAA;;;AAAkB;;AAAlB;AAOR;AAAc;;AAAd;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AACA;AAAe;;;;;;;;;;AAAf;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AACS;AAAjB;AAAiB;;;;AAAjB;;AAAwB;;AAAxB;AAAA;;;AAAA;;;AAAY;;AACO;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;;;;AADK;;AAAA;AAAA;AAAA;;;;;AAKT;;AAZU;AACA;AACA;AAUV;;AAAA;;AAAA;;;;AAIO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AACP;AAAY;;AAAZ;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AACW;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAX;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;;;;AAIK;AAAc;AACZ;;;AAAA;;AAAiB;AAAjB;AAAA;;AAAkC;AAAlC;AAAA;AAAP;AADmB;AAOF;AAAV;AAAP;AAPK;AAGA;AAAW;AADX;AAFA;AAAc;AAAA;AASI;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAvB;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACkB;AAAX;AAAA;;AAAyB;AAAzB;AAAA;AAAP;AACkB;AAAX;AAAA;;AAAsB;AAAtB;AAAA;AAAP;AACY;AAAL;AAAP;AAEgB;AAAW;AAA3B;;;AACA;;;AACoB;AAAoB;AAAxC;;;AACoB;AAAoB;AAAxC;;;AACA;;;AAhBK;AAAA;AAkBE;AApBF;AAAA;AAoBE;AApBY;AAAA;AAoBZ;AAAA;AAAA;AAAP;AAEA;;;AAEA;;;AACO;AAAP;AAEH;;;;;;AAIG;;AAAA;;AAAA;;AAAA;;AACA;;AAAA;;AAAA;AAEH;;;;;;AAEG;;AAAA;;AAAA;;AACA;;AAAA;;AAAA;;AAAA;AAEH;;;;;;AAEG;;AAAA;;AAAA;;AAAA;;AAAA;;AACA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;AAIA;AAAA;;AAAA;AAAA;AAAgC;AAAhC;AAAA;;AAAA;;AAAA;AACQ;;AAAc;AAAY;;;;;;AAAlC;AAEH;;;;;;;;;AAEG;;AAA+B;AAA/B;AACS;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;;;;;AAAT;;AACuB;;AAAhB;AAAP;AACO;AAAA;;AAAA;AAAA;AAAgC;AAAhC;AAAP;;AAFgC;;;AAAA;;AAAA;;AAAA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8"
    },
    "7": {
      "op": "bytecblock 0x 0x151f7c75 \"There\" \"Hi\" \"build_nested_call_count\" \"box\" \"twm\" 0x0000000000000001 0x00 0x0000000000000000 \"pwl\" \"hi\""
    },
    "83": {
      "op": "b main_block@0"
    },
    "86": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "88": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "91": {
      "op": "b main_call___init__@1"
    },
    "94": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.__init__",
      "op": "callsub __init__"
    },
    "97": {
      "op": "b main_after_if_else@2"
    },
    "100": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "b main_block@3"
    },
    "103": {
      "block": "main_block@3",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "105": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "106": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "107": {
      "op": "bz main___algopy_default_create@23",
      "stack_out": []
    },
    "110": {
      "op": "b main_abi_routing@4"
    },
    "113": {
      "block": "main_abi_routing@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "115": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "116": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "117": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "118": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "120": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "121": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "122": {
      "op": "bz main_create_NoOp@21",
      "stack_out": []
    },
    "125": {
      "op": "b main_call_NoOp@5"
    },
    "128": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "131": {
      "op": "pushbytes 0x383e1e8b // method \"store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void\"",
      "defined_out": [
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)"
      ]
    },
    "137": {
      "op": "pushbytes 0x68cbedd7 // method \"load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])\"",
      "defined_out": [
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))"
      ]
    },
    "143": {
      "op": "pushbytes 0x2263fcf1 // method \"store_tuple_in_box((uint64,uint64))void\"",
      "defined_out": [
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)"
      ]
    },
    "149": {
      "op": "pushbytes 0xbfc37339 // method \"is_tuple_in_box((uint64,uint64))bool\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)"
      ]
    },
    "155": {
      "op": "pushbytes 0xc660beaa // method \"load_tuple_from_box((uint64,uint64))(uint64,uint64)\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))"
      ]
    },
    "161": {
      "op": "pushbytes 0xb6c215ff // method \"maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))"
      ]
    },
    "167": {
      "op": "pushbytes 0x907c9042 // method \"load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))"
      ]
    },
    "173": {
      "op": "pushbytes 0xd51c7174 // method \"load_tuple_from_local_state_or_default(string)(uint64,uint64)\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))"
      ]
    },
    "179": {
      "op": "pushbytes 0xf8cc2b50 // method \"mutate_local_tuple()(uint64[],(uint64,byte[],string))\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))"
      ]
    },
    "185": {
      "op": "pushbytes 0x3d486db0 // method \"mutate_tuple_in_storage_currently_supported_method()void\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)"
      ]
    },
    "191": {
      "op": "pushbytes 0x9e5a3ba7 // method \"run_tests()bool\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)"
      ]
    },
    "197": {
      "op": "pushbytes 0xcea0521b // method \"nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))"
      ]
    },
    "203": {
      "op": "pushbytes 0x373f5b24 // method \"named_tuple((uint64,byte[],string))(uint64,byte[],string)\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))"
      ]
    },
    "209": {
      "op": "pushbytes 0xec593096 // method \"nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))"
      ]
    },
    "215": {
      "op": "uncover 14",
      "stack_out": [
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "tmp%6#0"
      ]
    },
    "217": {
      "op": "match main_store_tuple_route@6 main_load_tuple_route@7 main_store_tuple_in_box_route@8 main_is_tuple_in_box_route@9 main_load_tuple_from_box_route@10 main_maybe_load_tuple_from_box_route@11 main_load_tuple_from_box_or_default_route@12 main_load_tuple_from_local_state_or_default_route@13 main_mutate_local_tuple_route@14 main_mutate_tuple_in_storage_currently_supported_method_route@15 main_run_tests_route@16 main_nested_tuple_params_route@17 main_named_tuple_route@18 main_nested_named_tuple_params_route@19",
      "stack_out": []
    },
    "247": {
      "op": "b main_switch_case_next@20"
    },
    "250": {
      "block": "main_switch_case_next@20",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "253": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "b main_after_if_else@24"
    },
    "256": {
      "block": "main_after_if_else@24",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "257": {
      "block": "main_nested_named_tuple_params_route@19",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params[routing]",
      "op": "callsub nested_named_tuple_params"
    },
    "260": {
      "op": "b main_switch_case_next@20"
    },
    "263": {
      "block": "main_named_tuple_route@18",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple[routing]",
      "op": "callsub named_tuple"
    },
    "266": {
      "op": "b main_switch_case_next@20"
    },
    "269": {
      "block": "main_nested_tuple_params_route@17",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params[routing]",
      "op": "callsub nested_tuple_params"
    },
    "272": {
      "op": "b main_switch_case_next@20"
    },
    "275": {
      "block": "main_run_tests_route@16",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests[routing]",
      "op": "callsub run_tests"
    },
    "278": {
      "op": "b main_switch_case_next@20"
    },
    "281": {
      "block": "main_mutate_tuple_in_storage_currently_supported_method_route@15",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method[routing]",
      "op": "callsub mutate_tuple_in_storage_currently_supported_method"
    },
    "284": {
      "op": "b main_switch_case_next@20"
    },
    "287": {
      "block": "main_mutate_local_tuple_route@14",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple[routing]",
      "op": "callsub mutate_local_tuple"
    },
    "290": {
      "op": "b main_switch_case_next@20"
    },
    "293": {
      "block": "main_load_tuple_from_local_state_or_default_route@13",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default[routing]",
      "op": "callsub load_tuple_from_local_state_or_default"
    },
    "296": {
      "op": "b main_switch_case_next@20"
    },
    "299": {
      "block": "main_load_tuple_from_box_or_default_route@12",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default[routing]",
      "op": "callsub load_tuple_from_box_or_default"
    },
    "302": {
      "op": "b main_switch_case_next@20"
    },
    "305": {
      "block": "main_maybe_load_tuple_from_box_route@11",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box[routing]",
      "op": "callsub maybe_load_tuple_from_box"
    },
    "308": {
      "op": "b main_switch_case_next@20"
    },
    "311": {
      "block": "main_load_tuple_from_box_route@10",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box[routing]",
      "op": "callsub load_tuple_from_box"
    },
    "314": {
      "op": "b main_switch_case_next@20"
    },
    "317": {
      "block": "main_is_tuple_in_box_route@9",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box[routing]",
      "op": "callsub is_tuple_in_box"
    },
    "320": {
      "op": "b main_switch_case_next@20"
    },
    "323": {
      "block": "main_store_tuple_in_box_route@8",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box[routing]",
      "op": "callsub store_tuple_in_box"
    },
    "326": {
      "op": "b main_switch_case_next@20"
    },
    "329": {
      "block": "main_load_tuple_route@7",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple[routing]",
      "op": "callsub load_tuple"
    },
    "332": {
      "op": "b main_switch_case_next@20"
    },
    "335": {
      "block": "main_store_tuple_route@6",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple[routing]",
      "op": "callsub store_tuple"
    },
    "338": {
      "op": "b main_switch_case_next@20"
    },
    "341": {
      "block": "main_create_NoOp@21",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "344": {
      "block": "main___algopy_default_create@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "346": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "347": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "348": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "350": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "351": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "352": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "353": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "354": {
      "op": "b main_block@26"
    },
    "357": {
      "block": "main_block@26",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create@27"
    },
    "360": {
      "block": "main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create@27",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "361": {
      "op": "return",
      "stack_out": []
    },
    "362": {
      "subroutine": "test_cases.tuple_support.nested_tuples.get_sender_inefficiently",
      "params": {},
      "block": "get_sender_inefficiently",
      "stack_in": [],
      "op": "b get_sender_inefficiently_block@0"
    },
    "365": {
      "block": "get_sender_inefficiently_block@0",
      "stack_in": [],
      "op": "pushbytes \"Order is important\"",
      "defined_out": [
        "\"Order is important\""
      ],
      "stack_out": [
        "\"Order is important\""
      ]
    },
    "385": {
      "op": "log",
      "stack_out": []
    },
    "386": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "388": {
      "retsub": true,
      "op": "retsub"
    },
    "389": {
      "subroutine": "test_cases.tuple_support.nested_tuples.simple_tup",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "simple_tup",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "392": {
      "op": "b simple_tup_block@0"
    },
    "395": {
      "block": "simple_tup_block@0",
      "stack_in": [],
      "op": "pushbytes \"I'm just a simple tup\"",
      "defined_out": [
        "\"I'm just a simple tup\""
      ],
      "stack_out": [
        "\"I'm just a simple tup\""
      ]
    },
    "418": {
      "op": "log",
      "stack_out": []
    },
    "419": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "421": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "423": {
      "retsub": true,
      "op": "retsub"
    },
    "424": {
      "subroutine": "test_cases.tuple_support.nested_tuples.echo",
      "params": {
        "s#0": "bytes"
      },
      "block": "echo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "427": {
      "op": "b echo_block@0"
    },
    "430": {
      "block": "echo_block@0",
      "stack_in": [],
      "op": "pushbytes \"Is there an echo in here?\"",
      "defined_out": [
        "\"Is there an echo in here?\""
      ],
      "stack_out": [
        "\"Is there an echo in here?\""
      ]
    },
    "457": {
      "op": "log",
      "stack_out": []
    },
    "458": {
      "op": "frame_dig -1",
      "defined_out": [
        "s#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)"
      ]
    },
    "460": {
      "retsub": true,
      "op": "retsub"
    },
    "461": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_rearrange",
      "params": {
        "_a#0": "bytes",
        "args.0#0": "uint64",
        "args.1#0": "uint64",
        "args.2.0#0": "uint64",
        "args.2.1.0#0": "bytes",
        "args.2.1.1#0": "bytes",
        "_b#0": "bytes"
      },
      "block": "test_rearrange",
      "stack_in": [],
      "op": "proto 7 5"
    },
    "464": {
      "op": "b test_rearrange_block@0"
    },
    "467": {
      "block": "test_rearrange_block@0",
      "stack_in": [],
      "op": "frame_dig -6",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "469": {
      "op": "frame_dig -5",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "471": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "473": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "475": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "args.2.1.1#0 (copy)",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "args.2.1.1#0 (copy)"
      ]
    },
    "477": {
      "op": "cover 1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "e#0",
        "d#0"
      ]
    },
    "479": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "c#0",
        "e#0",
        "d#0",
        "a#0"
      ]
    },
    "481": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "e#0",
        "d#0",
        "a#0",
        "b#0"
      ]
    },
    "483": {
      "op": "uncover 4",
      "stack_out": [
        "e#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "485": {
      "op": "uncover 4",
      "stack_out": [
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "e#0"
      ]
    },
    "487": {
      "retsub": true,
      "op": "retsub"
    },
    "488": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_swap",
      "params": {
        "args.0#0": "bytes",
        "args.1#0": "bytes"
      },
      "block": "test_swap",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "491": {
      "op": "b test_swap_block@0"
    },
    "494": {
      "block": "test_swap_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "496": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "498": {
      "op": "uncover 1",
      "stack_out": [
        "b#0",
        "a#0"
      ]
    },
    "500": {
      "retsub": true,
      "op": "retsub"
    },
    "501": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_intrinsics",
      "params": {
        "num1#0": "uint64",
        "num2#0": "uint64"
      },
      "block": "test_intrinsics",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "504": {
      "op": "b test_intrinsics_block@0"
    },
    "507": {
      "block": "test_intrinsics_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "num1#0 (copy)"
      ],
      "stack_out": [
        "num1#0 (copy)"
      ]
    },
    "509": {
      "op": "frame_dig -1",
      "defined_out": [
        "num1#0 (copy)",
        "num2#0 (copy)"
      ],
      "stack_out": [
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "511": {
      "op": "addw",
      "defined_out": [
        "nt.1.0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "nt.1.0#0",
        "tmp%1#0"
      ]
    },
    "512": {
      "op": "cover 1",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "514": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "1"
      ]
    },
    "515": {
      "op": "intc_1 // 1",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "1",
        "1"
      ]
    },
    "516": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%2#0"
      ]
    },
    "517": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "518": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "42"
      ]
    },
    "520": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "42",
        "42"
      ]
    },
    "522": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%3#0"
      ]
    },
    "523": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "524": {
      "op": "dup",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)"
      ]
    },
    "525": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "0"
      ]
    },
    "526": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0"
      ]
    },
    "527": {
      "op": "frame_dig -2",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "num1#0 (copy)"
      ]
    },
    "529": {
      "op": "frame_dig -1",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "531": {
      "op": "+",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "532": {
      "op": "dig 3",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "nt.1.1#0 (copy)",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "tmp%5#0",
        "nt.1.1#0 (copy)"
      ]
    },
    "534": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "535": {
      "op": "&&",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%7#0"
      ]
    },
    "536": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "537": {
      "op": "dup",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)"
      ]
    },
    "538": {
      "op": "intc_0 // 0",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "0"
      ]
    },
    "539": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%8#0"
      ]
    },
    "540": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "541": {
      "op": "frame_dig -2",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "num1#0 (copy)"
      ]
    },
    "543": {
      "op": "frame_dig -1",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "545": {
      "op": "+",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%9#0"
      ]
    },
    "546": {
      "op": "dig 2",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%9#0",
        "nt.1.1#0 (copy)"
      ]
    },
    "548": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%10#0"
      ]
    },
    "549": {
      "op": "assert",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "x#0"
      ]
    },
    "550": {
      "op": "intc_0 // 0",
      "stack_out": [
        "y#0",
        "x#0",
        "0"
      ]
    },
    "551": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "tmp%11#0"
      ]
    },
    "552": {
      "op": "assert",
      "stack_out": [
        "y#0"
      ]
    },
    "553": {
      "op": "frame_dig -2",
      "stack_out": [
        "y#0",
        "num1#0 (copy)"
      ]
    },
    "555": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#0",
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "557": {
      "op": "+",
      "defined_out": [
        "tmp%12#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "tmp%12#0"
      ]
    },
    "558": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "559": {
      "op": "assert",
      "stack_out": []
    },
    "560": {
      "retsub": true,
      "op": "retsub"
    },
    "561": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_slicing",
      "params": {},
      "block": "test_nested_slicing",
      "stack_in": [],
      "op": "b test_nested_slicing_block@0"
    },
    "564": {
      "block": "test_nested_slicing_block@0",
      "stack_in": [],
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "566": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "4",
        "4"
      ]
    },
    "568": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "569": {
      "op": "assert",
      "stack_out": []
    },
    "570": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "571": {
      "op": "intc_2 // 2",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "572": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "573": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "5"
      ]
    },
    "575": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%1#0",
        "5",
        "5"
      ]
    },
    "577": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "578": {
      "op": "&&",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "579": {
      "op": "assert",
      "stack_out": []
    },
    "580": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\""
      ],
      "stack_out": [
        "\"a\""
      ]
    },
    "583": {
      "op": "pushbytes \"a\"",
      "stack_out": [
        "\"a\"",
        "\"a\""
      ]
    },
    "586": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "587": {
      "op": "pushbytes \"b\"",
      "defined_out": [
        "\"b\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"b\""
      ]
    },
    "590": {
      "op": "pushbytes \"b\"",
      "stack_out": [
        "tmp%4#0",
        "\"b\"",
        "\"b\""
      ]
    },
    "593": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "594": {
      "op": "&&",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "595": {
      "op": "assert",
      "stack_out": []
    },
    "596": {
      "retsub": true,
      "op": "retsub"
    },
    "597": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "params": {
        "one#0": "uint64",
        "reassign#0": "uint64"
      },
      "block": "test_nested_singles",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "600": {
      "op": "b test_nested_singles_block@0"
    },
    "603": {
      "block": "test_nested_singles_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "s.0.0#0"
      ]
    },
    "604": {
      "op": "frame_dig -2",
      "defined_out": [
        "one#0 (copy)"
      ],
      "stack_out": [
        "s.0.0#0",
        "one#0 (copy)"
      ]
    },
    "606": {
      "op": "dup",
      "defined_out": [
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0"
      ]
    },
    "607": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0",
        "2"
      ]
    },
    "608": {
      "op": "cover 1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "610": {
      "op": "intc_0 // 0",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0"
      ]
    },
    "611": {
      "op": "intc_0 // 0",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0",
        "0"
      ]
    },
    "612": {
      "op": "==",
      "defined_out": [
        "s.1.0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%0#0"
      ]
    },
    "613": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "614": {
      "op": "intc_0 // 0",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0"
      ]
    },
    "615": {
      "op": "intc_0 // 0",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0",
        "0"
      ]
    },
    "616": {
      "op": "==",
      "defined_out": [
        "s.1.0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%1#0"
      ]
    },
    "617": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "618": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)"
      ]
    },
    "619": {
      "op": "intc_1 // 1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "1"
      ]
    },
    "620": {
      "op": "==",
      "defined_out": [
        "s.1.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%2#0"
      ]
    },
    "621": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "622": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)"
      ]
    },
    "623": {
      "op": "frame_dig -2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "one#0 (copy)"
      ]
    },
    "625": {
      "op": "==",
      "defined_out": [
        "s.1.0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%3#0"
      ]
    },
    "626": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "627": {
      "op": "intc_2 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2"
      ]
    },
    "628": {
      "op": "intc_2 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2",
        "2"
      ]
    },
    "629": {
      "op": "==",
      "defined_out": [
        "s.1.0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%4#0"
      ]
    },
    "630": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "631": {
      "op": "intc_2 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2"
      ]
    },
    "632": {
      "op": "intc_2 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2",
        "2"
      ]
    },
    "633": {
      "op": "==",
      "defined_out": [
        "s.1.0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%5#0"
      ]
    },
    "634": {
      "op": "assert",
      "defined_out": [
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "635": {
      "op": "frame_dig -1",
      "defined_out": [
        "reassign#0 (copy)",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "reassign#0 (copy)"
      ]
    },
    "637": {
      "op": "bz test_nested_singles_after_if_else@2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "640": {
      "op": "b test_nested_singles_if_body@1"
    },
    "643": {
      "block": "test_nested_singles_if_body@1",
      "stack_in": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "3"
      ]
    },
    "645": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "647": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "4"
      ]
    },
    "649": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "651": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "5"
      ]
    },
    "653": {
      "op": "frame_bury 2",
      "defined_out": [],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "655": {
      "op": "b test_nested_singles_after_if_else@2"
    },
    "658": {
      "block": "test_nested_singles_after_if_else@2",
      "stack_in": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "0"
      ]
    },
    "659": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "3"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "0",
        "3"
      ]
    },
    "661": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "3",
        "reassign#0 (copy)"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "0",
        "3",
        "reassign#0 (copy)"
      ]
    },
    "663": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "select%0#0"
      ]
    },
    "664": {
      "op": "frame_dig 0",
      "defined_out": [
        "s.0.0#0",
        "select%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "select%0#0",
        "s.0.0#0"
      ]
    },
    "666": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%6#0"
      ]
    },
    "667": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "668": {
      "op": "frame_dig 2",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0"
      ]
    },
    "670": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "s.0.0#0",
        "s.2.0#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "2"
      ]
    },
    "671": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "2",
        "5",
        "s.0.0#0",
        "s.2.0#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "2",
        "5"
      ]
    },
    "673": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "2",
        "5",
        "reassign#0 (copy)"
      ]
    },
    "675": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "select%1#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "select%1#0"
      ]
    },
    "676": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%7#0"
      ]
    },
    "677": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "678": {
      "op": "frame_dig 3",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "680": {
      "op": "frame_dig -2",
      "defined_out": [
        "one#0 (copy)",
        "s.0.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "t.0#0",
        "one#0 (copy)"
      ]
    },
    "682": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%8#0"
      ]
    },
    "683": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "684": {
      "op": "frame_dig 1",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0"
      ]
    },
    "686": {
      "op": "dup",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s1#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0"
      ]
    },
    "687": {
      "op": "frame_dig -2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "one#0 (copy)"
      ]
    },
    "689": {
      "op": "+",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s1#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0"
      ]
    },
    "690": {
      "op": "intc_2 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "2"
      ]
    },
    "691": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "2",
        "5"
      ]
    },
    "693": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "2",
        "5",
        "reassign#0 (copy)"
      ]
    },
    "695": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s1#0",
        "select%2#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "select%2#0"
      ]
    },
    "696": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "tmp%10#0"
      ]
    },
    "697": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0"
      ]
    },
    "698": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "1"
      ]
    },
    "699": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "1",
        "4",
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "1",
        "4"
      ]
    },
    "701": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "1",
        "4",
        "reassign#0 (copy)"
      ]
    },
    "703": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "select%3#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "select%3#0"
      ]
    },
    "704": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%11#0"
      ]
    },
    "705": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "706": {
      "retsub": true,
      "op": "retsub"
    },
    "707": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_mutation",
      "params": {},
      "block": "test_nested_mutation",
      "stack_in": [],
      "op": "b test_nested_mutation_block@0"
    },
    "710": {
      "block": "test_nested_mutation_block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "711": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "712": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0"
      ]
    },
    "715": {
      "op": "bytec 9 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0",
        "0x0000000000000000"
      ]
    },
    "717": {
      "op": "concat",
      "defined_out": [
        "x.0.0#0"
      ],
      "stack_out": [
        "x.0.0#0"
      ]
    },
    "718": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "x.0.0#0"
      ],
      "stack_out": [
        "x.0.0#0",
        "0x"
      ]
    },
    "719": {
      "op": "bytec 7 // 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001",
        "x.0.0#0"
      ],
      "stack_out": [
        "x.0.0#0",
        "0x",
        "0x0000000000000001"
      ]
    },
    "721": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "x.0.0#0"
      ],
      "stack_out": [
        "x.0.0#0",
        "tmp%0#0"
      ]
    },
    "722": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "x.0.0#0",
        "x.0.0#0 (copy)"
      ],
      "stack_out": [
        "x.0.0#0",
        "tmp%0#0",
        "x.0.0#0 (copy)"
      ]
    },
    "724": {
      "op": "uncover 1",
      "stack_out": [
        "x.0.0#0",
        "x.0.0#0 (copy)",
        "tmp%0#0"
      ]
    },
    "726": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "x.0.0#0"
      ],
      "stack_out": [
        "x.0.0#0",
        "concat%0#0"
      ]
    },
    "727": {
      "op": "cover 1",
      "stack_out": [
        "concat%0#0",
        "x.0.0#0"
      ]
    },
    "729": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "concat%0#0",
        "x.0.0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "x.0.0#0",
        "0"
      ]
    },
    "730": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "731": {
      "op": "intc_1 // 1",
      "stack_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "732": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "add%0#0"
      ]
    },
    "733": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "734": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "737": {
      "op": "uncover 1",
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "739": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "740": {
      "op": "uncover 2",
      "stack_out": [
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "742": {
      "op": "replace3",
      "defined_out": [
        "x.0.0#0"
      ],
      "stack_out": [
        "x.0.0#0"
      ]
    },
    "743": {
      "op": "intc_0 // 0",
      "stack_out": [
        "x.0.0#0",
        "0"
      ]
    },
    "744": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "745": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "2"
      ]
    },
    "746": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "747": {
      "op": "assert",
      "stack_out": []
    },
    "748": {
      "retsub": true,
      "op": "retsub"
    },
    "749": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_iteration",
      "params": {},
      "block": "test_nested_iteration",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "752": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "a#0"
      ]
    },
    "753": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "754": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ]
    },
    "755": {
      "op": "b test_nested_iteration_block@0"
    },
    "758": {
      "block": "test_nested_iteration_block@0",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0"
      ]
    },
    "759": {
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "760": {
      "op": "intc_1 // 1",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "761": {
      "op": "intc_2 // 2",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "762": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "765": {
      "block": "test_nested_iteration_for_body@1",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "a#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "a#0"
      ]
    },
    "767": {
      "op": "frame_dig 6",
      "defined_out": [
        "a#0",
        "b#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "a#0",
        "b#0"
      ]
    },
    "769": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "t.0#0",
        "t.1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "tmp%0#0"
      ]
    },
    "770": {
      "op": "frame_dig 3",
      "defined_out": [
        "a#0",
        "b#0",
        "t.0#0",
        "t.1#0",
        "tmp%0#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "tmp%0#0",
        "total#0"
      ]
    },
    "772": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "t.0#0",
        "t.1#0",
        "tmp%1#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "tmp%1#0"
      ]
    },
    "773": {
      "op": "frame_bury 3",
      "defined_out": [
        "a#0",
        "b#0",
        "t.0#0",
        "t.1#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "775": {
      "op": "b test_nested_iteration_for_footer@2"
    },
    "778": {
      "block": "test_nested_iteration_for_footer@2",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0"
      ]
    },
    "780": {
      "op": "switch test_nested_iteration_for_header_1@3 test_nested_iteration_for_header_2@4 test_nested_iteration_for_header_3@5",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "788": {
      "op": "b test_nested_iteration_after_for@6"
    },
    "791": {
      "block": "test_nested_iteration_after_for@6",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "0"
      ]
    },
    "792": {
      "op": "frame_bury 2",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "794": {
      "op": "intc_1 // 1",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "1"
      ]
    },
    "795": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "797": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "2"
      ]
    },
    "798": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "800": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "803": {
      "block": "test_nested_iteration_for_body@7",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "a#0"
      ]
    },
    "805": {
      "op": "frame_dig 1",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "a#0",
        "b#0"
      ]
    },
    "807": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "tmp%2#0"
      ]
    },
    "808": {
      "op": "frame_dig 3",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%2#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "tmp%2#0",
        "total#0"
      ]
    },
    "810": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%3#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "tmp%3#0"
      ]
    },
    "811": {
      "op": "frame_bury 3",
      "defined_out": [
        "a#0",
        "b#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "813": {
      "op": "b test_nested_iteration_for_footer@8"
    },
    "816": {
      "block": "test_nested_iteration_for_footer@8",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%1#0"
      ]
    },
    "818": {
      "op": "switch test_nested_iteration_for_header_1@9 test_nested_iteration_for_header_2@10 test_nested_iteration_for_header_3@11",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "826": {
      "op": "b test_nested_iteration_after_for@12"
    },
    "829": {
      "block": "test_nested_iteration_after_for@12",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "total#0"
      ]
    },
    "831": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "total#0",
        "8"
      ]
    },
    "832": {
      "op": "/",
      "defined_out": [
        "tmp%4#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "tmp%4#0"
      ]
    },
    "833": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "tmp%4#0",
        "3"
      ]
    },
    "835": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "tmp%5#0"
      ]
    },
    "836": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "837": {
      "retsub": true,
      "op": "retsub"
    },
    "838": {
      "block": "test_nested_iteration_for_header_3@11",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "3"
      ]
    },
    "840": {
      "op": "frame_bury 2",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "842": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "2"
      ]
    },
    "843": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "845": {
      "op": "intc_2 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "2"
      ]
    },
    "846": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "848": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "851": {
      "block": "test_nested_iteration_for_header_2@10",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "2"
      ]
    },
    "852": {
      "op": "frame_bury 2",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "854": {
      "op": "intc_1 // 1",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "1"
      ]
    },
    "855": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "857": {
      "op": "intc_1 // 1",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "1"
      ]
    },
    "858": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "860": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "863": {
      "block": "test_nested_iteration_for_header_1@9",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "1"
      ]
    },
    "864": {
      "op": "frame_bury 2",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "866": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "2"
      ]
    },
    "867": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "869": {
      "op": "intc_1 // 1",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "1"
      ]
    },
    "870": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "872": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "875": {
      "block": "test_nested_iteration_for_header_3@5",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "3"
      ]
    },
    "877": {
      "op": "frame_bury 4",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "879": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "2"
      ]
    },
    "880": {
      "op": "frame_bury 5",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "882": {
      "op": "intc_2 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "2"
      ]
    },
    "883": {
      "op": "frame_bury 6",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "885": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "888": {
      "block": "test_nested_iteration_for_header_2@4",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "2"
      ]
    },
    "889": {
      "op": "frame_bury 4",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "891": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "1"
      ]
    },
    "892": {
      "op": "frame_bury 5",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "894": {
      "op": "intc_1 // 1",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "1"
      ]
    },
    "895": {
      "op": "frame_bury 6",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "897": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "900": {
      "block": "test_nested_iteration_for_header_1@3",
      "stack_in": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "1"
      ]
    },
    "901": {
      "op": "frame_bury 4",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "903": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "2"
      ]
    },
    "904": {
      "op": "frame_bury 5",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "906": {
      "op": "intc_1 // 1",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "1"
      ]
    },
    "907": {
      "op": "frame_bury 6",
      "stack_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "909": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "912": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple[routing]",
      "params": {},
      "block": "store_tuple",
      "stack_in": [],
      "op": "b store_tuple_block@0"
    },
    "915": {
      "block": "store_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "918": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "920": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "921": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "922": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "extract_uint16%0#0",
        "4"
      ]
    },
    "924": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "925": {
      "error": "invalid tail pointer at index 0 of ((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))",
      "op": "assert // invalid tail pointer at index 0 of ((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "926": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "927": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "928": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "929": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "931": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "932": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "933": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "934": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "936": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "938": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "940": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "941": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "942": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "16"
      ]
    },
    "944": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "extract_uint16%1#0"
      ]
    },
    "945": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "extract_uint16%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "extract_uint16%1#0",
        "18"
      ]
    },
    "947": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "948": {
      "error": "invalid tail pointer at index 2 of (uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "949": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "950": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "16"
      ]
    },
    "952": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "953": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "tmp%1#0"
      ]
    },
    "955": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "956": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "tmp%1#0",
        "aggregate%len%0#0"
      ]
    },
    "957": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "tmp%1#0"
      ]
    },
    "959": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%len%0#0",
        "tmp%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "961": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "963": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "964": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "965": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "8"
      ]
    },
    "966": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "extract_uint16%2#0"
      ]
    },
    "967": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "extract_uint16%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "extract_uint16%2#0",
        "12"
      ]
    },
    "969": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "eq%2#0"
      ]
    },
    "970": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "971": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "972": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "8"
      ]
    },
    "973": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "974": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%3#0",
        "tmp%2#0"
      ]
    },
    "976": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%3#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "977": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%extract_uint16%3#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%3#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "10"
      ]
    },
    "979": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%3#0",
        "tmp%2#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "980": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%3#0",
        "tmp%2#0",
        "aggregate%extract_uint16%4#0",
        "tmp%2#0 (copy)"
      ]
    },
    "982": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%4#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "984": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "986": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "987": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "0"
      ]
    },
    "988": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "length%0#0"
      ]
    },
    "989": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "length%0#0",
        "1"
      ]
    },
    "990": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "mul%0#0"
      ]
    },
    "991": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "mul%0#0",
        "2"
      ]
    },
    "992": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "add%0#0"
      ]
    },
    "993": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "add%0#0",
        "12"
      ]
    },
    "995": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "996": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "998": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)",
        "10"
      ]
    },
    "1000": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%1#0",
        "extract_uint16%3#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "extract_uint16%3#0"
      ]
    },
    "1001": {
      "op": "dig 1",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "extract_uint16%3#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "extract_uint16%3#0",
        "add%1#0 (copy)"
      ]
    },
    "1003": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "eq%3#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "eq%3#0"
      ]
    },
    "1004": {
      "error": "invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "1005": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1007": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)",
        "10"
      ]
    },
    "1009": {
      "op": "extract_uint16",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%5#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "1010": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%5#0",
        "add%1#0"
      ]
    },
    "1012": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%5#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1014": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%5#0",
        "add%1#0",
        "aggregate%len%1#0"
      ]
    },
    "1015": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "add%1#0"
      ]
    },
    "1017": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "add%1#0",
        "tmp%2#0"
      ]
    },
    "1019": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "aggregate%len%1#0",
        "add%1#0",
        "tmp%2#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "1021": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0"
      ]
    },
    "1023": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%1#0",
        "tmp%4#0"
      ]
    },
    "1024": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%1#0",
        "tmp%4#0",
        "0"
      ]
    },
    "1025": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%1#0",
        "length%1#0"
      ]
    },
    "1026": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%1#0",
        "length%1#0",
        "1"
      ]
    },
    "1027": {
      "op": "*",
      "defined_out": [
        "add%1#0",
        "mul%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%1#0",
        "mul%1#0"
      ]
    },
    "1028": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%1#0",
        "mul%1#0",
        "2"
      ]
    },
    "1029": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%1#0",
        "add%2#0"
      ]
    },
    "1030": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%3#0"
      ]
    },
    "1031": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%3#0",
        "18"
      ]
    },
    "1033": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%4#0"
      ]
    },
    "1034": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%4#0",
        "4"
      ]
    },
    "1036": {
      "op": "+",
      "defined_out": [
        "add%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%5#0"
      ]
    },
    "1037": {
      "op": "dup",
      "defined_out": [
        "add%5#0",
        "add%5#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "add%5#0",
        "add%5#0 (copy)"
      ]
    },
    "1038": {
      "op": "cover 2",
      "defined_out": [
        "add%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0",
        "add%5#0"
      ]
    },
    "1040": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1042": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "1043": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%5#0",
        "extract_uint16%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0",
        "add%5#0",
        "extract_uint16%4#0"
      ]
    },
    "1044": {
      "op": "==",
      "defined_out": [
        "add%5#0",
        "eq%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0",
        "eq%4#0"
      ]
    },
    "1045": {
      "error": "invalid tail pointer at index 1 of ((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))",
      "op": "assert // invalid tail pointer at index 1 of ((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0"
      ]
    },
    "1046": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1047": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "1048": {
      "op": "extract_uint16",
      "defined_out": [
        "add%5#0",
        "aggregate%extract_uint16%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "1049": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "aggregate%extract_uint16%6#0",
        "tmp%0#0"
      ]
    },
    "1051": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "aggregate%extract_uint16%6#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1052": {
      "op": "len",
      "defined_out": [
        "add%5#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "aggregate%extract_uint16%6#0",
        "tmp%0#0",
        "aggregate%len%2#0"
      ]
    },
    "1053": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "tmp%0#0"
      ]
    },
    "1055": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "aggregate%len%2#0",
        "tmp%0#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "1057": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%0#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0"
      ]
    },
    "1059": {
      "op": "substring3",
      "defined_out": [
        "add%5#0",
        "aggregate%substring3%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "aggregate%substring3%4#0"
      ]
    },
    "1060": {
      "op": "dupn 2",
      "defined_out": [
        "add%5#0",
        "tmp%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1062": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "0"
      ]
    },
    "1063": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%5#0",
        "aggregate%array_length%2#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "tmp%5#0",
        "aggregate%array_length%2#0"
      ]
    },
    "1064": {
      "op": "dup",
      "defined_out": [
        "add%5#0",
        "length%2#0",
        "length%2#0 (copy)",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "tmp%5#0",
        "length%2#0",
        "length%2#0 (copy)"
      ]
    },
    "1065": {
      "op": "cover 2",
      "defined_out": [
        "add%5#0",
        "length%2#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "tmp%5#0",
        "length%2#0"
      ]
    },
    "1067": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "tmp%5#0",
        "length%2#0",
        "2"
      ]
    },
    "1068": {
      "op": "*",
      "defined_out": [
        "add%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "tmp%5#0",
        "num_bytes%0#0"
      ]
    },
    "1069": {
      "op": "cover 1",
      "defined_out": [
        "add%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ]
    },
    "1071": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1072": {
      "op": "len",
      "defined_out": [
        "add%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%5#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "total_length%0#0"
      ]
    },
    "1073": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "tmp%5#0"
      ]
    },
    "1075": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "total_length%0#0",
        "tmp%5#0",
        "2"
      ]
    },
    "1076": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "2",
        "total_length%0#0"
      ]
    },
    "1078": {
      "op": "substring3",
      "defined_out": [
        "add%5#0",
        "array_data%0#0",
        "length%2#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0"
      ]
    },
    "1079": {
      "op": "intc_0 // 0",
      "defined_out": [
        "add%5#0",
        "array_data%0#0",
        "length%2#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1080": {
      "op": "b store_tuple_for_header@1"
    },
    "1083": {
      "block": "store_tuple_for_header@1",
      "stack_in": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1084": {
      "op": "dig 4",
      "defined_out": [
        "index%0#0",
        "length%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "length%2#0"
      ]
    },
    "1086": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "index%0#0",
        "length%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "continue_looping%0#0"
      ]
    },
    "1087": {
      "op": "bz store_tuple_after_for@4",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1090": {
      "op": "b store_tuple_for_body@2"
    },
    "1093": {
      "block": "store_tuple_for_body@2",
      "stack_in": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "dupn 2",
      "defined_out": [
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ]
    },
    "1095": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "1096": {
      "op": "*",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "1097": {
      "op": "dig 3",
      "defined_out": [
        "array_data%0#0",
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "array_data%0#0"
      ]
    },
    "1099": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "array_data%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "1101": {
      "error": "invalid array encoding",
      "op": "extract_uint16 // on error: invalid array encoding",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "item_offset%0#0"
      ]
    },
    "1102": {
      "op": "dig 4",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ]
    },
    "1104": {
      "op": "dup",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "num_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "1105": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0 (copy)"
      ]
    },
    "1107": {
      "op": "==",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "offset_is_correct%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "offset_is_correct%0#0"
      ]
    },
    "1108": {
      "error": "invalid tail pointer for (len+(uint64,(len+uint8[]),(len+utf8[]))[])",
      "op": "assert // invalid tail pointer for (len+(uint64,(len+uint8[]),(len+utf8[]))[])",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "1109": {
      "op": "dig 6",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%5#0"
      ]
    },
    "1111": {
      "op": "dup",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1112": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%5#0",
        "aggregate%total_length%0#0"
      ]
    },
    "1113": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%total_length%0#0",
        "tmp%5#0"
      ]
    },
    "1115": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%total_length%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1116": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%total_length%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "2"
      ]
    },
    "1117": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "2",
        "aggregate%total_length%0#0"
      ]
    },
    "1119": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%5#0",
        "aggregate%array_head_and_tail%0#0"
      ]
    },
    "1120": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_head_and_tail%0#0",
        "tmp%5#0"
      ]
    },
    "1122": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%array_head_and_tail%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_head_and_tail%0#0",
        "tmp%5#0",
        "0"
      ]
    },
    "1123": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%3#0"
      ]
    },
    "1124": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%3#0",
        "aggregate%array_head_and_tail%0#0"
      ]
    },
    "1126": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%3#0",
        "aggregate%array_head_and_tail%0#0",
        "index%0#0 (copy)"
      ]
    },
    "1128": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%3#0",
        "aggregate%array_head_and_tail%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "1129": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%3#0",
        "aggregate%item_offset_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%3#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset_offset%0#0"
      ]
    },
    "1130": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)",
        "aggregate%array_length%3#0",
        "aggregate%item_offset_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%3#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset_offset%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)"
      ]
    },
    "1132": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%3#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)",
        "aggregate%item_offset_offset%0#0"
      ]
    },
    "1134": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%3#0",
        "aggregate%item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%3#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "1135": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "index%0#0",
        "aggregate%array_length%3#0",
        "aggregate%array_head_and_tail%0#0"
      ]
    },
    "1137": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_length%3#0",
        "aggregate%array_head_and_tail%0#0",
        "index%0#0"
      ]
    },
    "1139": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%3#0",
        "aggregate%item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_length%3#0",
        "aggregate%array_head_and_tail%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1140": {
      "op": "+",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%3#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_length%3#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1141": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%3#0"
      ]
    },
    "1143": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_length%3#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "aggregate%next_index%0#0 (copy)",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_length%3#0",
        "aggregate%next_index%0#0 (copy)"
      ]
    },
    "1145": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "1146": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1148": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)"
      ]
    },
    "1150": {
      "op": "len",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_index%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "1151": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0"
      ]
    },
    "1153": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_index%0#0",
        "2"
      ]
    },
    "1154": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "1155": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_item_offset_offset%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)"
      ]
    },
    "1157": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%array_head_and_tail%0#0 (copy)",
        "aggregate%next_item_offset_offset%0#0"
      ]
    },
    "1159": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%has_next%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%next_item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "1160": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%end_of_array%0#0"
      ]
    },
    "1162": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%has_next%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0"
      ]
    },
    "1164": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_of_array%0#0",
        "aggregate%next_item_offset%0#0",
        "aggregate%has_next%0#0"
      ]
    },
    "1166": {
      "op": "select",
      "defined_out": [
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_offset%0#0",
        "aggregate%item_offset%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "1167": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%end_offset%0#0",
        "aggregate%array_head_and_tail%0#0"
      ]
    },
    "1169": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%end_offset%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "1171": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%array_head_and_tail%0#0",
        "aggregate%item_offset%0#0",
        "aggregate%end_offset%0#0"
      ]
    },
    "1173": {
      "op": "substring3",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0"
      ]
    },
    "1174": {
      "op": "dup",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1175": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "8"
      ]
    },
    "1176": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "array_data%0#0",
        "extract_uint16%5#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "extract_uint16%5#0"
      ]
    },
    "1177": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "array_data%0#0",
        "extract_uint16%5#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "extract_uint16%5#0",
        "12"
      ]
    },
    "1179": {
      "op": "==",
      "defined_out": [
        "array_data%0#0",
        "eq%5#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "eq%5#0"
      ]
    },
    "1180": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0"
      ]
    },
    "1181": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1182": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "8"
      ]
    },
    "1183": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "1184": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%7#0",
        "tmp%6#0"
      ]
    },
    "1186": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%7#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1187": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%extract_uint16%7#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%7#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "10"
      ]
    },
    "1189": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%7#0",
        "tmp%6#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "1190": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%7#0",
        "tmp%6#0",
        "aggregate%extract_uint16%8#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1192": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "aggregate%extract_uint16%8#0",
        "tmp%6#0 (copy)",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "1194": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "1196": {
      "op": "substring3",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1197": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "0"
      ]
    },
    "1198": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "length%3#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "length%3#0"
      ]
    },
    "1199": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "length%3#0",
        "1"
      ]
    },
    "1200": {
      "op": "*",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "mul%2#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "mul%2#0"
      ]
    },
    "1201": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "mul%2#0",
        "2"
      ]
    },
    "1202": {
      "op": "+",
      "defined_out": [
        "add%6#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "add%6#0"
      ]
    },
    "1203": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "add%6#0",
        "12"
      ]
    },
    "1205": {
      "op": "+",
      "defined_out": [
        "add%7#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "add%7#0"
      ]
    },
    "1206": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "add%7#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1208": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "add%7#0",
        "tmp%6#0 (copy)",
        "10"
      ]
    },
    "1210": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%7#0",
        "array_data%0#0",
        "extract_uint16%6#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "add%7#0",
        "extract_uint16%6#0"
      ]
    },
    "1211": {
      "op": "dig 1",
      "defined_out": [
        "add%7#0",
        "add%7#0 (copy)",
        "array_data%0#0",
        "extract_uint16%6#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "add%7#0",
        "extract_uint16%6#0",
        "add%7#0 (copy)"
      ]
    },
    "1213": {
      "op": "==",
      "defined_out": [
        "add%7#0",
        "array_data%0#0",
        "eq%6#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "add%7#0",
        "eq%6#0"
      ]
    },
    "1214": {
      "error": "invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "add%7#0"
      ]
    },
    "1215": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "add%7#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1217": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "add%7#0",
        "tmp%6#0 (copy)",
        "10"
      ]
    },
    "1219": {
      "op": "extract_uint16",
      "defined_out": [
        "add%7#0",
        "aggregate%extract_uint16%9#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "add%7#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "1220": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "aggregate%extract_uint16%9#0",
        "add%7#0"
      ]
    },
    "1222": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "aggregate%extract_uint16%9#0",
        "add%7#0",
        "tmp%6#0 (copy)"
      ]
    },
    "1224": {
      "op": "len",
      "defined_out": [
        "add%7#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%len%3#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "aggregate%extract_uint16%9#0",
        "add%7#0",
        "aggregate%len%3#0"
      ]
    },
    "1225": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%6#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%len%3#0",
        "add%7#0"
      ]
    },
    "1227": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%len%3#0",
        "add%7#0",
        "tmp%6#0"
      ]
    },
    "1229": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%len%3#0",
        "add%7#0",
        "tmp%6#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "1231": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%7#0",
        "tmp%6#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%len%3#0"
      ]
    },
    "1233": {
      "op": "substring3",
      "defined_out": [
        "add%7#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%7#0",
        "tmp%8#0"
      ]
    },
    "1234": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%7#0",
        "tmp%8#0",
        "0"
      ]
    },
    "1235": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%7#0",
        "array_data%0#0",
        "index%0#0",
        "length%4#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%7#0",
        "length%4#0"
      ]
    },
    "1236": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%7#0",
        "length%4#0",
        "1"
      ]
    },
    "1237": {
      "op": "*",
      "defined_out": [
        "add%7#0",
        "array_data%0#0",
        "index%0#0",
        "mul%3#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%7#0",
        "mul%3#0"
      ]
    },
    "1238": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%7#0",
        "mul%3#0",
        "2"
      ]
    },
    "1239": {
      "op": "+",
      "defined_out": [
        "add%7#0",
        "add%8#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%7#0",
        "add%8#0"
      ]
    },
    "1240": {
      "op": "+",
      "defined_out": [
        "add%9#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%9#0"
      ]
    },
    "1241": {
      "op": "+",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ]
    },
    "1242": {
      "op": "bury 3",
      "defined_out": [
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1244": {
      "op": "b store_tuple_for_footer@3"
    },
    "1247": {
      "block": "store_tuple_for_footer@3",
      "stack_in": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1248": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "index%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1249": {
      "op": "+",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "1250": {
      "op": "bury 1",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1252": {
      "op": "b store_tuple_for_header@1"
    },
    "1255": {
      "block": "store_tuple_after_for@4",
      "stack_in": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "num_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ]
    },
    "1257": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "2"
      ]
    },
    "1258": {
      "op": "+",
      "defined_out": [
        "num_bytes%0#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%1#0"
      ]
    },
    "1259": {
      "op": "dig 6",
      "defined_out": [
        "add%5#0",
        "num_bytes%0#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "num_bytes%1#0",
        "add%5#0"
      ]
    },
    "1261": {
      "op": "+",
      "defined_out": [
        "add%10#0",
        "add%5#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "add%10#0"
      ]
    },
    "1262": {
      "op": "dig 7",
      "defined_out": [
        "add%10#0",
        "add%5#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "add%10#0",
        "tmp%0#0"
      ]
    },
    "1264": {
      "op": "dup",
      "defined_out": [
        "add%10#0",
        "add%5#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "add%10#0",
        "tmp%0#0 (copy)",
        "tmp%0#0 (copy)"
      ]
    },
    "1265": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "tmp%0#0",
        "add%10#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1267": {
      "op": "len",
      "defined_out": [
        "add%10#0",
        "add%5#0",
        "len%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "tmp%0#0",
        "add%10#0",
        "len%0#0"
      ]
    },
    "1268": {
      "op": "==",
      "defined_out": [
        "add%5#0",
        "eq%7#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "tmp%0#0",
        "eq%7#0"
      ]
    },
    "1269": {
      "error": "invalid number of bytes for test_cases.tuple_support.nested_tuples.ParentWithList",
      "op": "assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.ParentWithList",
      "defined_out": [
        "add%5#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ]
    },
    "1270": {
      "op": "dup",
      "defined_out": [
        "add%5#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ]
    },
    "1271": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "add%5#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)",
        "0"
      ]
    },
    "1272": {
      "op": "extract_uint16",
      "defined_out": [
        "add%5#0",
        "aggregate%extract_uint16%10#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "1273": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%extract_uint16%10#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ]
    },
    "1275": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%extract_uint16%10#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ]
    },
    "1276": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%extract_uint16%10#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)",
        "2"
      ]
    },
    "1277": {
      "op": "extract_uint16",
      "defined_out": [
        "add%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%11#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%extract_uint16%10#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%11#0"
      ]
    },
    "1278": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%extract_uint16%10#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%11#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ]
    },
    "1280": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%11#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "1282": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)",
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%11#0"
      ]
    },
    "1284": {
      "op": "substring3",
      "defined_out": [
        "add%5#0",
        "aggregate%substring3%8#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%substring3%8#0"
      ]
    },
    "1285": {
      "op": "dup",
      "defined_out": [
        "add%5#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "1286": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "0"
      ]
    },
    "1287": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "add%5#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "0",
        "8"
      ]
    },
    "1288": {
      "op": "extract3",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%8#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%substring3%8#0",
        "aggregate%extract%0#0"
      ]
    },
    "1289": {
      "op": "btoi",
      "defined_out": [
        "add%5#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%8#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%substring3%8#0",
        "aggregate%item0%0#0"
      ]
    },
    "1290": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%substring3%8#0"
      ]
    },
    "1292": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "1293": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "8"
      ]
    },
    "1294": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "8",
        "8"
      ]
    },
    "1295": {
      "op": "extract3",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%8#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%substring3%8#0",
        "aggregate%extract%1#0"
      ]
    },
    "1296": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%8#0"
      ]
    },
    "1298": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "1299": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "16"
      ]
    },
    "1301": {
      "op": "extract_uint16",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%12#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%8#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%8#0",
        "aggregate%extract_uint16%12#0"
      ]
    },
    "1302": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%12#0",
        "aggregate%substring3%8#0"
      ]
    },
    "1304": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%12#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "1305": {
      "op": "len",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%12#0",
        "aggregate%item0%0#0",
        "aggregate%len%4#0",
        "aggregate%substring3%8#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%12#0",
        "aggregate%substring3%8#0",
        "aggregate%len%4#0"
      ]
    },
    "1306": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%12#0",
        "aggregate%len%4#0",
        "aggregate%substring3%8#0"
      ]
    },
    "1308": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%len%4#0",
        "aggregate%substring3%8#0",
        "aggregate%extract_uint16%12#0"
      ]
    },
    "1310": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%8#0",
        "aggregate%extract_uint16%12#0",
        "aggregate%len%4#0"
      ]
    },
    "1312": {
      "op": "substring3",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%9#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%9#0"
      ]
    },
    "1313": {
      "op": "dup",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)"
      ]
    },
    "1314": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)",
        "0"
      ]
    },
    "1315": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)",
        "0",
        "8"
      ]
    },
    "1316": {
      "op": "extract3",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract%2#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%9#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%9#0",
        "aggregate%extract%2#0"
      ]
    },
    "1317": {
      "op": "btoi",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%9#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%9#0",
        "aggregate%item0%1#0"
      ]
    },
    "1318": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%9#0"
      ]
    },
    "1320": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)"
      ]
    },
    "1321": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)",
        "8"
      ]
    },
    "1322": {
      "op": "extract_uint16",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%9#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%9#0",
        "aggregate%extract_uint16%13#0"
      ]
    },
    "1323": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%substring3%9#0"
      ]
    },
    "1325": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)"
      ]
    },
    "1326": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)",
        "10"
      ]
    },
    "1328": {
      "op": "extract_uint16",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%9#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%substring3%9#0",
        "aggregate%extract_uint16%14#0"
      ]
    },
    "1329": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%substring3%9#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%substring3%9#0 (copy)"
      ]
    },
    "1331": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%9#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%substring3%9#0 (copy)",
        "aggregate%extract_uint16%13#0"
      ]
    },
    "1333": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)",
        "aggregate%extract_uint16%13#0",
        "aggregate%extract_uint16%14#0"
      ]
    },
    "1335": {
      "op": "substring3",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%10#0",
        "aggregate%substring3%9#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%10#0"
      ]
    },
    "1336": {
      "op": "extract 2 0",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%9#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%9#0",
        "aggregate%item1%0#0"
      ]
    },
    "1339": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%9#0"
      ]
    },
    "1341": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)"
      ]
    },
    "1342": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)",
        "10"
      ]
    },
    "1344": {
      "op": "extract_uint16",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%9#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%9#0",
        "aggregate%extract_uint16%15#0"
      ]
    },
    "1345": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%9#0"
      ]
    },
    "1347": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%9#0",
        "aggregate%substring3%9#0 (copy)"
      ]
    },
    "1348": {
      "op": "len",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%len%5#0",
        "aggregate%substring3%9#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%substring3%9#0",
        "aggregate%len%5#0"
      ]
    },
    "1349": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%len%5#0",
        "aggregate%substring3%9#0"
      ]
    },
    "1351": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%len%5#0",
        "aggregate%substring3%9#0",
        "aggregate%extract_uint16%15#0"
      ]
    },
    "1353": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%9#0",
        "aggregate%extract_uint16%15#0",
        "aggregate%len%5#0"
      ]
    },
    "1355": {
      "op": "substring3",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%11#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%11#0"
      ]
    },
    "1356": {
      "op": "extract 2 0",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0"
      ]
    },
    "1359": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ]
    },
    "1361": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)",
        "2"
      ]
    },
    "1362": {
      "op": "extract_uint16",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract_uint16%16#0"
      ]
    },
    "1363": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%item2%0#0"
      ]
    },
    "1365": {
      "op": "dig 5",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%item2%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ]
    },
    "1367": {
      "op": "len",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%6#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%item2%0#0",
        "aggregate%len%6#0"
      ]
    },
    "1368": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%len%6#0",
        "aggregate%item2%0#0"
      ]
    },
    "1370": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%len%6#0",
        "aggregate%item2%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ]
    },
    "1372": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%len%6#0",
        "aggregate%item2%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%16#0"
      ]
    },
    "1374": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%16#0",
        "aggregate%len%6#0"
      ]
    },
    "1376": {
      "op": "substring3",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%12#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%12#0"
      ]
    },
    "1377": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%12#0",
        "aggregate%item0%0#0"
      ]
    },
    "1379": {
      "op": "cover 1",
      "defined_out": [
        "add%5#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%12#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%9#0",
        "aggregate%substring3%12#0"
      ]
    },
    "1381": {
      "op": "uncover 5",
      "defined_out": [
        "add%5#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%12#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%9#0",
        "aggregate%substring3%12#0",
        "tmp%10#0"
      ]
    },
    "1383": {
      "op": "uncover 5",
      "defined_out": [
        "add%5#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%12#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%9#0",
        "aggregate%substring3%12#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1385": {
      "op": "uncover 5",
      "defined_out": [
        "add%5#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%12#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "aggregate%item2%0#0",
        "tmp%9#0",
        "aggregate%substring3%12#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1387": {
      "op": "uncover 5",
      "defined_out": [
        "add%5#0",
        "aggregate%substring3%12#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "tmp%9#0",
        "aggregate%substring3%12#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1389": {
      "op": "uncover 4",
      "defined_out": [
        "add%5#0",
        "num_bytes%0#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1391": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%9#0"
      ]
    },
    "1393": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1395": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1397": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1399": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "tmp%14#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1401": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1403": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1406": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "add%5#0",
        "num_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0",
        "1"
      ]
    },
    "1407": {
      "op": "return",
      "stack_out": [
        "tmp%0#0",
        "add%5#0",
        "tmp%5#0",
        "length%2#0",
        "num_bytes%0#0",
        "array_data%0#0",
        "index%0#0"
      ]
    },
    "1408": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple[routing]",
      "params": {},
      "block": "load_tuple",
      "stack_in": [],
      "op": "b load_tuple_block@0"
    },
    "1411": {
      "block": "load_tuple_block@0",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1414": {
      "op": "cover 5",
      "stack_out": [
        "tmp%5#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1416": {
      "op": "cover 4",
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1418": {
      "op": "cover 3",
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1420": {
      "op": "cover 2",
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1422": {
      "op": "cover 1",
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1424": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1425": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "1426": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1428": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "1429": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "1431": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%head%1#0"
      ]
    },
    "1432": {
      "op": "cover 3",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "1434": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "1435": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%as_Encoded(uint64)%1#0",
        "0x"
      ]
    },
    "1436": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%3#0",
        "0x",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "1438": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%head%2#0"
      ]
    },
    "1439": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%head%2#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1441": {
      "op": "len",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%length%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%head%2#0",
        "aggregate%length%0#0"
      ]
    },
    "1442": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%head%2#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1443": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1446": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%0#0",
        "tmp%3#0"
      ]
    },
    "1448": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "1449": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "12"
      ]
    },
    "1451": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "1452": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "1455": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "aggregate%head%2#0"
      ]
    },
    "1457": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "1459": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0"
      ]
    },
    "1460": {
      "op": "cover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "1462": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "1463": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "1464": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "12"
      ]
    },
    "1466": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1467": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1469": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%length%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "1470": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "1471": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%length_uint16%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "tmp%4#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "1474": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%4#0"
      ]
    },
    "1476": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "1477": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1479": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "1480": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "1483": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%3#0"
      ]
    },
    "1485": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "1487": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%4#0"
      ]
    },
    "1488": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "1490": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0",
        "aggregate%head%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "1491": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1493": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "1494": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "18"
      ]
    },
    "1496": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%4#0",
        "aggregate%head%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "1497": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "1500": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%1#0"
      ]
    },
    "1502": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "1504": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%5#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%5#0"
      ]
    },
    "1505": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%5#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "1507": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "1508": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "4"
      ]
    },
    "1510": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%as_bytes%5#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "1511": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%offset_as_uint16%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "1514": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%offset_as_uint16%3#0",
        "0x"
      ]
    },
    "1515": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "0x",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "1517": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%head%6#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%head%6#0"
      ]
    },
    "1518": {
      "op": "cover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "1520": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)",
        "aggregate%head%6#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)"
      ]
    },
    "1521": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%data_length%3#0",
        "aggregate%head%6#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%data_length%3#0"
      ]
    },
    "1522": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%data_length%3#0",
        "4"
      ]
    },
    "1524": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%current_tail_offset%3#0",
        "aggregate%head%6#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%current_tail_offset%3#0"
      ]
    },
    "1525": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%as_bytes%6#0",
        "aggregate%head%6#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "1526": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%head%6#0",
        "aggregate%offset_as_uint16%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "1529": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%offset_as_uint16%4#0",
        "aggregate%head%6#0"
      ]
    },
    "1531": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%head%6#0",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "1533": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%head%7#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%head%7#0"
      ]
    },
    "1534": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "1536": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%concat%3#0"
      ]
    },
    "1537": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%3#0",
        "tmp%5#0"
      ]
    },
    "1539": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1540": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "1541": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%6#0"
      ]
    },
    "1543": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1544": {
      "op": "log",
      "stack_out": []
    },
    "1545": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1546": {
      "op": "return",
      "stack_out": []
    },
    "1547": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box[routing]",
      "params": {},
      "block": "store_tuple_in_box",
      "stack_in": [],
      "op": "b store_tuple_in_box_block@0"
    },
    "1550": {
      "block": "store_tuple_in_box_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1553": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1554": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1555": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "16"
      ]
    },
    "1557": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1558": {
      "error": "invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup",
      "op": "assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1559": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "1560": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0"
      ]
    },
    "1561": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "1562": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1563": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "1564": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1566": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8"
      ]
    },
    "1567": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8",
        "8"
      ]
    },
    "1568": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1569": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1570": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box",
      "stack_out": []
    },
    "1573": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1574": {
      "op": "return",
      "stack_out": []
    },
    "1575": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box[routing]",
      "params": {},
      "block": "is_tuple_in_box",
      "stack_in": [],
      "op": "b is_tuple_in_box_block@0"
    },
    "1578": {
      "block": "is_tuple_in_box_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1581": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1582": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1583": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "16"
      ]
    },
    "1585": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1586": {
      "error": "invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup",
      "op": "assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1587": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "1588": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0"
      ]
    },
    "1589": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "1590": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1591": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "1592": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1594": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8"
      ]
    },
    "1595": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8",
        "8"
      ]
    },
    "1596": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1597": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1598": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1601": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x00"
      ]
    },
    "1603": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0x00",
        "0"
      ]
    },
    "1604": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%3#0"
      ]
    },
    "1606": {
      "op": "setbit",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1607": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "1608": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%4#0"
      ]
    },
    "1610": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1611": {
      "op": "log",
      "stack_out": []
    },
    "1612": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1613": {
      "op": "return",
      "stack_out": []
    },
    "1614": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box[routing]",
      "params": {},
      "block": "load_tuple_from_box",
      "stack_in": [],
      "op": "b load_tuple_from_box_block@0"
    },
    "1617": {
      "block": "load_tuple_from_box_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1620": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1621": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1622": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "16"
      ]
    },
    "1624": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1625": {
      "error": "invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup",
      "op": "assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1626": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "1627": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0"
      ]
    },
    "1628": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "1629": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1630": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "1631": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1633": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8"
      ]
    },
    "1634": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8",
        "8"
      ]
    },
    "1635": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1636": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1637": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1640": {
      "op": "cover 1",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0"
      ]
    },
    "1642": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1643": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "1644": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%4#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1646": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%head%0#0"
      ]
    },
    "1647": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%4#0"
      ]
    },
    "1649": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "1650": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1651": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "1652": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%5#0"
      ]
    },
    "1654": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1655": {
      "op": "log",
      "stack_out": []
    },
    "1656": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1657": {
      "op": "return",
      "stack_out": []
    },
    "1658": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box[routing]",
      "params": {},
      "block": "maybe_load_tuple_from_box",
      "stack_in": [],
      "op": "b maybe_load_tuple_from_box_block@0"
    },
    "1661": {
      "block": "maybe_load_tuple_from_box_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1664": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1665": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1666": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "16"
      ]
    },
    "1668": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1669": {
      "error": "invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup",
      "op": "assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1670": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "1671": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0"
      ]
    },
    "1672": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "1673": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1674": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "1675": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1677": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8"
      ]
    },
    "1678": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8",
        "8"
      ]
    },
    "1679": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1680": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1681": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1684": {
      "op": "cover 2",
      "stack_out": [
        "tmp%5#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1686": {
      "op": "cover 1",
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0"
      ]
    },
    "1688": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1689": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "1690": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1692": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%head%0#0"
      ]
    },
    "1693": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%0#0",
        "tmp%4#0"
      ]
    },
    "1695": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "1696": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64)%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1697": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%5#0",
        "aggregate%as_Encoded(uint64,uint64)%0#0",
        "0x"
      ]
    },
    "1698": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "0x",
        "aggregate%as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1700": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%2#0"
      ]
    },
    "1701": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "aggregate%head%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%2#0",
        "0x00"
      ]
    },
    "1703": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%2#0",
        "0x00",
        "0"
      ]
    },
    "1704": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%head%2#0",
        "0x00",
        "0",
        "tmp%5#0"
      ]
    },
    "1706": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "1707": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1708": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "1709": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%6#0"
      ]
    },
    "1711": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1712": {
      "op": "log",
      "stack_out": []
    },
    "1713": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1714": {
      "op": "return",
      "stack_out": []
    },
    "1715": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default[routing]",
      "params": {},
      "block": "load_tuple_from_box_or_default",
      "stack_in": [],
      "op": "b load_tuple_from_box_or_default_block@0"
    },
    "1718": {
      "block": "load_tuple_from_box_or_default_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1721": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1722": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1723": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "16"
      ]
    },
    "1725": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1726": {
      "error": "invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup",
      "op": "assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1727": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "1728": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0"
      ]
    },
    "1729": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "1730": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1731": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "1732": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "1734": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8"
      ]
    },
    "1735": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8",
        "8"
      ]
    },
    "1736": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1737": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1738": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1741": {
      "op": "cover 1",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0"
      ]
    },
    "1743": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1744": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "1745": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%4#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1747": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%head%0#0"
      ]
    },
    "1748": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%4#0"
      ]
    },
    "1750": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "1751": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1752": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "1753": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%5#0"
      ]
    },
    "1755": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1756": {
      "op": "log",
      "stack_out": []
    },
    "1757": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1758": {
      "op": "return",
      "stack_out": []
    },
    "1759": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default[routing]",
      "params": {},
      "block": "load_tuple_from_local_state_or_default",
      "stack_in": [],
      "op": "b load_tuple_from_local_state_or_default_block@0"
    },
    "1762": {
      "block": "load_tuple_from_local_state_or_default_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1765": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1766": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "1767": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "1768": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "1"
      ]
    },
    "1769": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "1770": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "1771": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "1772": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1774": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "1775": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1776": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1777": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1780": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1783": {
      "op": "cover 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "1785": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1786": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "1787": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%3#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1789": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%head%0#0"
      ]
    },
    "1790": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0"
      ]
    },
    "1792": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "1793": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1794": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "1795": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%4#0"
      ]
    },
    "1797": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1798": {
      "op": "log",
      "stack_out": []
    },
    "1799": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1800": {
      "op": "return",
      "stack_out": []
    },
    "1801": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple[routing]",
      "params": {},
      "block": "mutate_local_tuple",
      "stack_in": [],
      "op": "b mutate_local_tuple_block@0"
    },
    "1804": {
      "block": "mutate_local_tuple_block@0",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1807": {
      "op": "cover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1809": {
      "op": "cover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1811": {
      "op": "cover 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1813": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "4"
      ]
    },
    "1815": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1816": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "1819": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "1820": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "1822": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%head%0#0"
      ]
    },
    "1823": {
      "op": "cover 4",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1825": {
      "op": "dup",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1826": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "1827": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%data_length%0#0",
        "4"
      ]
    },
    "1829": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1830": {
      "op": "cover 3",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1832": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1834": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1835": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "1836": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%2#0",
        "tmp%0#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1838": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%head%1#0"
      ]
    },
    "1839": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1841": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0"
      ]
    },
    "1842": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "1843": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1846": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%2#0"
      ]
    },
    "1848": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "1849": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "12"
      ]
    },
    "1851": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "1852": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "1855": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%1#0"
      ]
    },
    "1857": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "1859": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "1860": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "1862": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "1863": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%data_length%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%1#0"
      ]
    },
    "1864": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%1#0",
        "12"
      ]
    },
    "1866": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "1867": {
      "op": "dig 5",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1869": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "aggregate%length%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length%1#0"
      ]
    },
    "1870": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "1871": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "1874": {
      "op": "uncover 6",
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%1#0",
        "tmp%3#0"
      ]
    },
    "1876": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "1877": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "1879": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "1880": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "1883": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%2#0"
      ]
    },
    "1885": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "1887": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0"
      ]
    },
    "1888": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "1890": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "1891": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1893": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "1894": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1896": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%5#0",
        "aggregate%head%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "1897": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "1900": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%3#0",
        "aggregate%head%0#0"
      ]
    },
    "1902": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "1904": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%4#0"
      ]
    },
    "1905": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%4#0",
        "tmp%0#0"
      ]
    },
    "1907": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%concat%2#0"
      ]
    },
    "1908": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "1910": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1911": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "1912": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%4#0"
      ]
    },
    "1914": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1915": {
      "op": "log",
      "stack_out": []
    },
    "1916": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1917": {
      "op": "return",
      "stack_out": []
    },
    "1918": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method[routing]",
      "params": {},
      "block": "mutate_tuple_in_storage_currently_supported_method",
      "stack_in": [],
      "op": "b mutate_tuple_in_storage_currently_supported_method_block@0"
    },
    "1921": {
      "block": "mutate_tuple_in_storage_currently_supported_method_block@0",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method"
    },
    "1924": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1925": {
      "op": "return",
      "stack_out": []
    },
    "1926": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests[routing]",
      "params": {},
      "block": "run_tests",
      "stack_in": [],
      "op": "b run_tests_block@0"
    },
    "1929": {
      "block": "run_tests_block@0",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.run_tests",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1932": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "1934": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0"
      ]
    },
    "1935": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%0#0"
      ]
    },
    "1937": {
      "op": "setbit",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1938": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "1939": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "1941": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1942": {
      "op": "log",
      "stack_out": []
    },
    "1943": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1944": {
      "op": "return",
      "stack_out": []
    },
    "1945": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params[routing]",
      "params": {},
      "block": "nested_tuple_params",
      "stack_in": [],
      "op": "b nested_tuple_params_block@0"
    },
    "1948": {
      "block": "nested_tuple_params_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1951": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1952": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "1953": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1954": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "4"
      ]
    },
    "1956": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1957": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),((len+uint8[]),(uint64)))",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),((len+uint8[]),(uint64)))",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1958": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1959": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "1960": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1961": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "1963": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1964": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "1965": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1966": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1968": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1970": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1972": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1973": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1974": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "1975": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "1"
      ]
    },
    "1976": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "1977": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "1978": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "1979": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "4"
      ]
    },
    "1981": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0"
      ]
    },
    "1982": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1984": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "1985": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%1#0",
        "extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "extract_uint16%1#0"
      ]
    },
    "1986": {
      "op": "dig 1",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "extract_uint16%1#0",
        "add%1#0 (copy)"
      ]
    },
    "1988": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "eq%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "eq%1#0"
      ]
    },
    "1989": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),((len+uint8[]),(uint64)))",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),((len+uint8[]),(uint64)))",
      "stack_out": [
        "tmp%0#0",
        "add%1#0"
      ]
    },
    "1990": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1992": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "1993": {
      "op": "extract_uint16",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "1994": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0"
      ]
    },
    "1996": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1998": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0",
        "aggregate%len%0#0"
      ]
    },
    "1999": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "add%1#0"
      ]
    },
    "2001": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "add%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2003": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "add%1#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "2005": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "2007": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0"
      ]
    },
    "2008": {
      "op": "dup",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2009": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "2010": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%1#0",
        "extract_uint16%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0",
        "extract_uint16%2#0"
      ]
    },
    "2011": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "add%1#0",
        "extract_uint16%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0",
        "extract_uint16%2#0",
        "10"
      ]
    },
    "2013": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "eq%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0",
        "eq%2#0"
      ]
    },
    "2014": {
      "error": "invalid tail pointer at index 0 of ((len+uint8[]),(uint64))",
      "op": "assert // invalid tail pointer at index 0 of ((len+uint8[]),(uint64))",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0"
      ]
    },
    "2015": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2016": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "2017": {
      "op": "extract_uint16",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "2018": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "tmp%2#0"
      ]
    },
    "2020": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2021": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "tmp%2#0",
        "aggregate%len%1#0"
      ]
    },
    "2022": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%1#0",
        "tmp%2#0"
      ]
    },
    "2024": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "aggregate%len%1#0",
        "tmp%2#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "2026": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%1#0"
      ]
    },
    "2028": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%3#0"
      ]
    },
    "2029": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%3#0",
        "0"
      ]
    },
    "2030": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "length%1#0"
      ]
    },
    "2031": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "length%1#0",
        "1"
      ]
    },
    "2032": {
      "op": "*",
      "defined_out": [
        "add%1#0",
        "mul%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "mul%1#0"
      ]
    },
    "2033": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "mul%1#0",
        "2"
      ]
    },
    "2034": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "add%2#0"
      ]
    },
    "2035": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "add%2#0",
        "10"
      ]
    },
    "2037": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "add%3#0"
      ]
    },
    "2038": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%4#0"
      ]
    },
    "2039": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%4#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2041": {
      "op": "len",
      "defined_out": [
        "add%4#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%4#0",
        "len%0#0"
      ]
    },
    "2042": {
      "op": "==",
      "defined_out": [
        "eq%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%3#0"
      ]
    },
    "2043": {
      "error": "invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.tuple<arc4.uint64>>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.tuple<arc4.uint64>>>",
      "defined_out": [
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ]
    },
    "2044": {
      "op": "dup",
      "defined_out": [
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "2045": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "0"
      ]
    },
    "2046": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "2047": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%4#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ]
    },
    "2049": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%4#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "2050": {
      "op": "intc_2 // 2",
      "stack_out": [
        "aggregate%extract_uint16%4#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "2"
      ]
    },
    "2051": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%extract_uint16%5#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%4#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "2052": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract_uint16%4#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%5#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "2054": {
      "op": "uncover 3",
      "stack_out": [
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%5#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "2056": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "aggregate%extract_uint16%4#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "2058": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%3#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%substring3%3#0"
      ]
    },
    "2059": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "2062": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ]
    },
    "2064": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "2065": {
      "op": "intc_2 // 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "2"
      ]
    },
    "2066": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "2067": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%6#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ]
    },
    "2069": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%6#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "2070": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%item0%0#0",
        "aggregate%len%2#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%6#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%len%2#0"
      ]
    },
    "2071": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ]
    },
    "2073": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%len%2#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "2075": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0"
      ]
    },
    "2077": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%4#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%4#0"
      ]
    },
    "2078": {
      "op": "dup",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%4#0",
        "aggregate%substring3%4#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%4#0",
        "aggregate%substring3%4#0 (copy)"
      ]
    },
    "2079": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%4#0",
        "aggregate%substring3%4#0 (copy)",
        "0"
      ]
    },
    "2080": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%4#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%4#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "2081": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%substring3%4#0"
      ]
    },
    "2083": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%substring3%4#0",
        "aggregate%substring3%4#0 (copy)"
      ]
    },
    "2084": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%item0%0#0",
        "aggregate%len%3#0",
        "aggregate%substring3%4#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%substring3%4#0",
        "aggregate%len%3#0"
      ]
    },
    "2085": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%3#0",
        "aggregate%substring3%4#0"
      ]
    },
    "2087": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%3#0",
        "aggregate%substring3%4#0",
        "aggregate%substring3%4#0 (copy)"
      ]
    },
    "2088": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%len%3#0",
        "aggregate%substring3%4#0",
        "aggregate%substring3%4#0 (copy)",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "2090": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%4#0",
        "aggregate%substring3%4#0 (copy)",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%3#0"
      ]
    },
    "2092": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%4#0",
        "aggregate%substring3%5#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%4#0",
        "aggregate%substring3%5#0"
      ]
    },
    "2093": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%4#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%4#0",
        "aggregate%item0%1#0"
      ]
    },
    "2096": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%4#0"
      ]
    },
    "2098": {
      "op": "intc_2 // 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%4#0",
        "2"
      ]
    },
    "2099": {
      "op": "intc_3 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%4#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%4#0",
        "2",
        "8"
      ]
    },
    "2100": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%extract%0#0"
      ]
    },
    "2101": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%extract%0#0",
        "0"
      ]
    },
    "2102": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%extract%0#0",
        "0",
        "8"
      ]
    },
    "2103": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0"
      ]
    },
    "2104": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item0%2#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item0%2#0"
      ]
    },
    "2105": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%1#0",
        "aggregate%item0%2#0",
        "aggregate%item0%0#0"
      ]
    },
    "2107": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%item0%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%item0%1#0",
        "tmp%4#0",
        "aggregate%item0%2#0"
      ]
    },
    "2109": {
      "op": "uncover 2",
      "defined_out": [
        "aggregate%item0%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%item0%2#0",
        "tmp%5#0"
      ]
    },
    "2111": {
      "op": "uncover 1",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2113": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%4#0"
      ]
    },
    "2115": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2117": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2119": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "2122": {
      "op": "cover 2",
      "stack_out": [
        "tmp%9#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2124": {
      "op": "cover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0"
      ]
    },
    "2126": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2127": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%length%0#0"
      ]
    },
    "2128": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "2129": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "2132": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%length_uint16%0#0",
        "tmp%7#0"
      ]
    },
    "2134": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2135": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "4"
      ]
    },
    "2137": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "2138": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "2141": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "2142": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "2144": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0"
      ]
    },
    "2145": {
      "op": "cover 2",
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2147": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)",
        "aggregate%head%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "2148": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "2149": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "4"
      ]
    },
    "2151": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "2152": {
      "op": "cover 1",
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2154": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "tmp%8#0 (copy)"
      ]
    },
    "2156": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%length%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%length%1#0"
      ]
    },
    "2157": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "2158": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "tmp%8#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "2161": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%8#0"
      ]
    },
    "2163": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "2164": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "10"
      ]
    },
    "2166": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "2167": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "2170": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "0x"
      ]
    },
    "2171": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "2173": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "2174": {
      "op": "uncover 5",
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "tmp%9#0"
      ]
    },
    "2176": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "2177": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "2178": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "2180": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0"
      ]
    },
    "2181": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "2183": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%4#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "2184": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%2#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "2187": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%0#0"
      ]
    },
    "2189": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "2191": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%head%3#0"
      ]
    },
    "2192": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2194": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0",
        "aggregate%concat%1#0"
      ]
    },
    "2195": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%as_Encoded((len+utf8[]),uint64)%0#0"
      ]
    },
    "2197": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2198": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "2199": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%10#0"
      ]
    },
    "2201": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "2202": {
      "op": "log",
      "stack_out": []
    },
    "2203": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "2204": {
      "op": "return",
      "stack_out": []
    },
    "2205": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple[routing]",
      "params": {},
      "block": "named_tuple",
      "stack_in": [],
      "op": "b named_tuple_block@0"
    },
    "2208": {
      "block": "named_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2211": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2212": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "8"
      ]
    },
    "2213": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "2214": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "12"
      ]
    },
    "2216": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "2217": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2218": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2219": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "8"
      ]
    },
    "2220": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2221": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "2223": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2224": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "10"
      ]
    },
    "2226": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2227": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2229": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2231": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2233": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2234": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "2235": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "2236": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "1"
      ]
    },
    "2237": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "2238": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "2239": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "2240": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "12"
      ]
    },
    "2242": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0"
      ]
    },
    "2243": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2245": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)",
        "10"
      ]
    },
    "2247": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%1#0",
        "extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "extract_uint16%1#0"
      ]
    },
    "2248": {
      "op": "dig 1",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "extract_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "extract_uint16%1#0",
        "add%1#0 (copy)"
      ]
    },
    "2250": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "eq%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "eq%1#0"
      ]
    },
    "2251": {
      "error": "invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))",
      "stack_out": [
        "tmp%0#0",
        "add%1#0"
      ]
    },
    "2252": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2254": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)",
        "10"
      ]
    },
    "2256": {
      "op": "extract_uint16",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "2257": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0"
      ]
    },
    "2259": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2261": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0",
        "aggregate%len%0#0"
      ]
    },
    "2262": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "add%1#0"
      ]
    },
    "2264": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "add%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2266": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "add%1#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "2268": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "2270": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0"
      ]
    },
    "2271": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "2272": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "length%1#0"
      ]
    },
    "2273": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "length%1#0",
        "1"
      ]
    },
    "2274": {
      "op": "*",
      "defined_out": [
        "add%1#0",
        "mul%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "mul%1#0"
      ]
    },
    "2275": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "mul%1#0",
        "2"
      ]
    },
    "2276": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "add%2#0"
      ]
    },
    "2277": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%3#0"
      ]
    },
    "2278": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2280": {
      "op": "len",
      "defined_out": [
        "add%3#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "len%0#0"
      ]
    },
    "2281": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%2#0"
      ]
    },
    "2282": {
      "error": "invalid number of bytes for test_cases.tuple_support.nested_tuples.Child",
      "op": "assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.Child",
      "defined_out": [
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "2283": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)"
      ]
    },
    "2284": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "2285": {
      "op": "intc_3 // 8",
      "stack_out": [
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "2286": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "2287": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "2288": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "2290": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)"
      ]
    },
    "2291": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)",
        "8"
      ]
    },
    "2292": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "2293": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "2295": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)"
      ]
    },
    "2296": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)",
        "10"
      ]
    },
    "2298": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "2299": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%extract_uint16%4#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)"
      ]
    },
    "2301": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%extract_uint16%4#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "2303": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "2305": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%substring3%2#0"
      ]
    },
    "2306": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "2309": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "2311": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)"
      ]
    },
    "2312": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)",
        "10"
      ]
    },
    "2314": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%5#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "2315": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%5#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "2317": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%5#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 (copy)"
      ]
    },
    "2318": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%5#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%len%1#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%5#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%len%1#0"
      ]
    },
    "2319": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "2321": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%len%1#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "2323": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0"
      ]
    },
    "2325": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0"
      ]
    },
    "2326": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0"
      ]
    },
    "2329": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "2331": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%item1%0#0",
        "tmp%3#0",
        "aggregate%item2%0#0"
      ]
    },
    "2333": {
      "op": "uncover 2",
      "defined_out": [
        "aggregate%item2%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%item2%0#0",
        "tmp%4#0"
      ]
    },
    "2335": {
      "op": "uncover 1",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2337": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "2339": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2341": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2343": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2346": {
      "op": "cover 2",
      "stack_out": [
        "tmp%8#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2348": {
      "op": "cover 1",
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0"
      ]
    },
    "2350": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "2351": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "2352": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "2354": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%head%0#0"
      ]
    },
    "2355": {
      "op": "cover 1",
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%0#0",
        "tmp%7#0"
      ]
    },
    "2357": {
      "op": "dup",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2358": {
      "op": "len",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%length%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%0#0",
        "tmp%7#0",
        "aggregate%length%0#0"
      ]
    },
    "2359": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%head%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%0#0",
        "tmp%7#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "2360": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%length_uint16%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%0#0",
        "tmp%7#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "2363": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%0#0",
        "aggregate%length_uint16%0#0",
        "tmp%7#0"
      ]
    },
    "2365": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2366": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "12"
      ]
    },
    "2368": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0",
        "aggregate%head%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "2369": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "2372": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "aggregate%head%0#0"
      ]
    },
    "2374": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "2376": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "2377": {
      "op": "cover 1",
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2379": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)",
        "aggregate%head%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "2380": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "aggregate%head%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "2381": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "12"
      ]
    },
    "2383": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "2384": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%8#0 (copy)"
      ]
    },
    "2386": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "2387": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "2388": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "2391": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%8#0"
      ]
    },
    "2393": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "2394": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "2396": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "2397": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "2400": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%1#0"
      ]
    },
    "2402": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "2404": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "2405": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2407": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "2408": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "2410": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2411": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "2412": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%9#0"
      ]
    },
    "2414": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2415": {
      "op": "log",
      "stack_out": []
    },
    "2416": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "2417": {
      "op": "return",
      "stack_out": []
    },
    "2418": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params[routing]",
      "params": {},
      "block": "nested_named_tuple_params",
      "stack_in": [],
      "op": "b nested_named_tuple_params_block@0"
    },
    "2421": {
      "block": "nested_named_tuple_params_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2424": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2425": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "16"
      ]
    },
    "2427": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0"
      ]
    },
    "2428": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_uint16%0#0",
        "18"
      ]
    },
    "2430": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "2431": {
      "error": "invalid tail pointer at index 2 of (uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2432": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2433": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "16"
      ]
    },
    "2435": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2436": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "2438": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2439": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "aggregate%len%0#0"
      ]
    },
    "2440": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "tmp%0#0"
      ]
    },
    "2442": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2443": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2445": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "2447": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2448": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2449": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "8"
      ]
    },
    "2450": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "extract_uint16%1#0"
      ]
    },
    "2451": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "extract_uint16%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "extract_uint16%1#0",
        "12"
      ]
    },
    "2453": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "2454": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2455": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2456": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "8"
      ]
    },
    "2457": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2458": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%1#0"
      ]
    },
    "2460": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2461": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "10"
      ]
    },
    "2463": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "2464": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%1#0",
        "aggregate%extract_uint16%2#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2466": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%extract_uint16%2#0",
        "tmp%1#0 (copy)",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2468": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "2470": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2471": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "2472": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "length%0#0"
      ]
    },
    "2473": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "length%0#0",
        "1"
      ]
    },
    "2474": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "mul%0#0"
      ]
    },
    "2475": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "mul%0#0",
        "2"
      ]
    },
    "2476": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "2477": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "add%0#0",
        "12"
      ]
    },
    "2479": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "add%1#0"
      ]
    },
    "2480": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "add%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2482": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "add%1#0",
        "tmp%1#0 (copy)",
        "10"
      ]
    },
    "2484": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%1#0",
        "extract_uint16%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "add%1#0",
        "extract_uint16%2#0"
      ]
    },
    "2485": {
      "op": "dig 1",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "extract_uint16%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "add%1#0",
        "extract_uint16%2#0",
        "add%1#0 (copy)"
      ]
    },
    "2487": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "eq%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "add%1#0",
        "eq%2#0"
      ]
    },
    "2488": {
      "error": "invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "add%1#0"
      ]
    },
    "2489": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "add%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2491": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "add%1#0",
        "tmp%1#0 (copy)",
        "10"
      ]
    },
    "2493": {
      "op": "extract_uint16",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "add%1#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "2494": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%extract_uint16%3#0",
        "add%1#0"
      ]
    },
    "2496": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%extract_uint16%3#0",
        "add%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2498": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%extract_uint16%3#0",
        "add%1#0",
        "aggregate%len%1#0"
      ]
    },
    "2499": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%1#0",
        "add%1#0"
      ]
    },
    "2501": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%1#0",
        "add%1#0",
        "tmp%1#0"
      ]
    },
    "2503": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%1#0",
        "add%1#0",
        "tmp%1#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "2505": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%1#0"
      ]
    },
    "2507": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%3#0"
      ]
    },
    "2508": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "tmp%3#0",
        "0"
      ]
    },
    "2509": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "length%1#0"
      ]
    },
    "2510": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "length%1#0",
        "1"
      ]
    },
    "2511": {
      "op": "*",
      "defined_out": [
        "add%1#0",
        "mul%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "mul%1#0"
      ]
    },
    "2512": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "mul%1#0",
        "2"
      ]
    },
    "2513": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%1#0",
        "add%2#0"
      ]
    },
    "2514": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%3#0"
      ]
    },
    "2515": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "tmp%0#0",
        "add%3#0",
        "18"
      ]
    },
    "2517": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%4#0"
      ]
    },
    "2518": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%4#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2520": {
      "op": "len",
      "defined_out": [
        "add%4#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%4#0",
        "len%0#0"
      ]
    },
    "2521": {
      "op": "==",
      "defined_out": [
        "eq%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%3#0"
      ]
    },
    "2522": {
      "error": "invalid number of bytes for test_cases.tuple_support.nested_tuples.Parent",
      "op": "assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.Parent",
      "defined_out": [
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "2523": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)"
      ]
    },
    "2524": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)",
        "0"
      ]
    },
    "2525": {
      "op": "intc_3 // 8",
      "stack_out": [
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "2526": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "2527": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "2528": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "2530": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)"
      ]
    },
    "2531": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)",
        "8"
      ]
    },
    "2532": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)",
        "8",
        "8"
      ]
    },
    "2533": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "2534": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "2536": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)"
      ]
    },
    "2537": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)",
        "16"
      ]
    },
    "2539": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "2540": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%4#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "2542": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%4#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)"
      ]
    },
    "2543": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%len%2#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%4#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%len%2#0"
      ]
    },
    "2544": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%2#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "2546": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%len%2#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "2548": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%2#0"
      ]
    },
    "2550": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "2551": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "2552": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "0"
      ]
    },
    "2553": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "0",
        "8"
      ]
    },
    "2554": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract%2#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract%2#0"
      ]
    },
    "2555": {
      "op": "btoi",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%item0%1#0"
      ]
    },
    "2556": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "2558": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "2559": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "8"
      ]
    },
    "2560": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "2561": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%3#0"
      ]
    },
    "2563": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "2564": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "10"
      ]
    },
    "2566": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "2567": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "2569": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%substring3%3#0 (copy)",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "2571": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "aggregate%extract_uint16%5#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "2573": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%4#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%4#0"
      ]
    },
    "2574": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%item1%0#0"
      ]
    },
    "2577": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0"
      ]
    },
    "2579": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "2580": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "10"
      ]
    },
    "2582": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "2583": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%substring3%3#0"
      ]
    },
    "2585": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "2586": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%len%3#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%substring3%3#0",
        "aggregate%len%3#0"
      ]
    },
    "2587": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%3#0",
        "aggregate%substring3%3#0"
      ]
    },
    "2589": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%len%3#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "2591": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%3#0"
      ]
    },
    "2593": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%5#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%5#0"
      ]
    },
    "2594": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0"
      ]
    },
    "2597": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "2599": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "tmp%4#0",
        "aggregate%item2%0#0"
      ]
    },
    "2601": {
      "op": "uncover 4",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "tmp%4#0",
        "aggregate%item2%0#0",
        "tmp%5#0"
      ]
    },
    "2603": {
      "op": "uncover 4",
      "defined_out": [
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "aggregate%item1%0#0",
        "tmp%4#0",
        "aggregate%item2%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2605": {
      "op": "uncover 4",
      "defined_out": [
        "aggregate%item2%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%item2%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2607": {
      "op": "uncover 3",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2609": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%4#0"
      ]
    },
    "2611": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2613": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2615": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%8#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2617": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2619": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params",
      "op": "callsub test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "2622": {
      "op": "cover 4",
      "stack_out": [
        "tmp%13#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "2624": {
      "op": "cover 3",
      "stack_out": [
        "tmp%13#0",
        "tmp%12#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2626": {
      "op": "cover 2",
      "stack_out": [
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "2628": {
      "op": "cover 1",
      "stack_out": [
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "2630": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "2631": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "2632": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "2634": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "aggregate%head%0#0"
      ]
    },
    "2635": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "aggregate%head%0#0",
        "tmp%10#0"
      ]
    },
    "2637": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "aggregate%head%1#0"
      ]
    },
    "2638": {
      "op": "cover 3",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0"
      ]
    },
    "2640": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%1#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "tmp%12#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "2641": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "tmp%12#0",
        "aggregate%as_Encoded(uint64)%1#0",
        "0x"
      ]
    },
    "2642": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "tmp%12#0",
        "0x",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "2644": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "tmp%12#0",
        "aggregate%head%2#0"
      ]
    },
    "2645": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "tmp%12#0",
        "aggregate%head%2#0",
        "tmp%12#0 (copy)"
      ]
    },
    "2647": {
      "op": "len",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%length%0#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "tmp%12#0",
        "aggregate%head%2#0",
        "aggregate%length%0#0"
      ]
    },
    "2648": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "tmp%12#0",
        "aggregate%head%2#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "2649": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%0#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "tmp%12#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "2652": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%0#0",
        "tmp%12#0"
      ]
    },
    "2654": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2655": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "12"
      ]
    },
    "2657": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "2658": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "2661": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "aggregate%head%2#0"
      ]
    },
    "2663": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "2665": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0"
      ]
    },
    "2666": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2668": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "2669": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "2670": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "12"
      ]
    },
    "2672": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "2673": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%13#0 (copy)"
      ]
    },
    "2675": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%length%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "2676": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "2677": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%length_uint16%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%13#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "2680": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%13#0"
      ]
    },
    "2682": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "2683": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "2685": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "2686": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "2689": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%3#0"
      ]
    },
    "2691": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "2693": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%4#0"
      ]
    },
    "2694": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2696": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "2697": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "2699": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "2700": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "18"
      ]
    },
    "2702": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%4#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "2703": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "2706": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%1#0"
      ]
    },
    "2708": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "2710": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%5#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%5#0"
      ]
    },
    "2711": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%5#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "2713": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2714": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "2715": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%14#0"
      ]
    },
    "2717": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "2718": {
      "op": "log",
      "stack_out": []
    },
    "2719": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "2720": {
      "op": "return",
      "stack_out": []
    },
    "2721": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "2724": {
      "block": "__init___block@0",
      "stack_in": [],
      "op": "bytec 4 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\""
      ],
      "stack_out": [
        "\"build_nested_call_count\""
      ]
    },
    "2726": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "\"build_nested_call_count\"",
        "0"
      ]
    },
    "2727": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2728": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2729": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "2730": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "2733": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "4"
      ]
    },
    "2735": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "2736": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "2739": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "2740": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "2742": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%0#0"
      ]
    },
    "2743": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0"
      ]
    },
    "2745": {
      "op": "dup",
      "defined_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "encoded_array%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "encoded_array%0#0 (copy)"
      ]
    },
    "2746": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%head%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "2747": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%data_length%0#0",
        "4"
      ]
    },
    "2749": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "2750": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "0"
      ]
    },
    "2751": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "2752": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "2753": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "2755": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0"
      ]
    },
    "2756": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "0x"
      ]
    },
    "2757": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0"
      ]
    },
    "2758": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "2759": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "2762": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "0x"
      ]
    },
    "2763": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2764": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "12"
      ]
    },
    "2766": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "2767": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "2770": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%1#0"
      ]
    },
    "2772": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "2774": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "2775": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2777": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "2778": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%data_length%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%1#0"
      ]
    },
    "2779": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%1#0",
        "12"
      ]
    },
    "2781": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "2782": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\"",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "\"\""
      ]
    },
    "2783": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "aggregate%length%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length%1#0"
      ]
    },
    "2784": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "2785": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "2788": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%1#0",
        "\"\""
      ]
    },
    "2789": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "2790": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "2792": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%5#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "2793": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "2796": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%2#0"
      ]
    },
    "2798": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "2800": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%head%3#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0"
      ]
    },
    "2801": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2803": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "2804": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "2806": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "2807": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "2809": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%6#0",
        "aggregate%head%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "2810": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%3#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "2813": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%3#0",
        "aggregate%head%0#0"
      ]
    },
    "2815": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "2817": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%4#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%4#0"
      ]
    },
    "2818": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%4#0",
        "encoded_array%0#0"
      ]
    },
    "2820": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%concat%2#0"
      ]
    },
    "2821": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "2823": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "2824": {
      "op": "bytec 6 // \"twm\"",
      "defined_out": [
        "\"twm\"",
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"twm\""
      ]
    },
    "2826": {
      "op": "uncover 1",
      "stack_out": [
        "\"twm\"",
        "encoded_for_storage%0#0"
      ]
    },
    "2828": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2829": {
      "retsub": true,
      "op": "retsub"
    },
    "2830": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple",
      "params": {
        "pwl.parent.foo#0": "uint64",
        "pwl.parent.foo_arc#0": "bytes",
        "pwl.parent.child.a#0": "uint64",
        "pwl.parent.child.b#0": "bytes",
        "pwl.parent.child.c#0": "bytes",
        "pwl.children#0": "bytes"
      },
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "2833": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_block@0"
    },
    "2836": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -6",
      "defined_out": [
        "pwl.parent.foo#0 (copy)"
      ],
      "stack_out": [
        "pwl.parent.foo#0 (copy)"
      ]
    },
    "2838": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "2839": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "2840": {
      "op": "uncover 1",
      "stack_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "2842": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "2843": {
      "op": "frame_dig -5",
      "defined_out": [
        "aggregate%head%0#0",
        "pwl.parent.foo_arc#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "pwl.parent.foo_arc#0 (copy)"
      ]
    },
    "2845": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "2846": {
      "op": "frame_dig -4",
      "defined_out": [
        "aggregate%head%1#0",
        "pwl.parent.child.a#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "pwl.parent.child.a#0 (copy)"
      ]
    },
    "2848": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "2849": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%1#0",
        "0x"
      ]
    },
    "2850": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "0x",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "2852": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0"
      ]
    },
    "2853": {
      "op": "frame_dig -3",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "pwl.parent.child.b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "pwl.parent.child.b#0 (copy)"
      ]
    },
    "2855": {
      "op": "len",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%length%0#0"
      ]
    },
    "2856": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "2857": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "2860": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%0#0",
        "pwl.parent.child.b#0 (copy)"
      ]
    },
    "2862": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2863": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "12"
      ]
    },
    "2865": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "2866": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "2869": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "aggregate%head%2#0"
      ]
    },
    "2871": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "2873": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0"
      ]
    },
    "2874": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2876": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "2877": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "2878": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "12"
      ]
    },
    "2880": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "2881": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "pwl.parent.child.c#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "pwl.parent.child.c#0 (copy)"
      ]
    },
    "2883": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "2884": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "2885": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "2888": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "pwl.parent.child.c#0 (copy)"
      ]
    },
    "2890": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "2891": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "2893": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "2894": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "2897": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%3#0"
      ]
    },
    "2899": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "2901": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%4#0"
      ]
    },
    "2902": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2904": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "2905": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "2907": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "2908": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "18"
      ]
    },
    "2910": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%4#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "2911": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "2914": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%1#0"
      ]
    },
    "2916": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "2918": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%5#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%5#0"
      ]
    },
    "2919": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%5#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "2921": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "2922": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "4"
      ]
    },
    "2924": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%as_bytes%5#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "2925": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%offset_as_uint16%3#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "2928": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%offset_as_uint16%3#0",
        "0x"
      ]
    },
    "2929": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "0x",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "2931": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%head%6#0"
      ]
    },
    "2932": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "2934": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 (copy)"
      ]
    },
    "2935": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%data_length%3#0",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%data_length%3#0"
      ]
    },
    "2936": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%data_length%3#0",
        "4"
      ]
    },
    "2938": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%current_tail_offset%3#0",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%current_tail_offset%3#0"
      ]
    },
    "2939": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%as_bytes%6#0",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "2940": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%head%6#0",
        "aggregate%offset_as_uint16%4#0"
      ],
      "stack_out": [
        "aggregate%head%6#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "2943": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%offset_as_uint16%4#0",
        "aggregate%head%6#0"
      ]
    },
    "2945": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%head%6#0",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "2947": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%head%7#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0",
        "aggregate%head%7#0"
      ]
    },
    "2948": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%7#0",
        "aggregate%as_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "2950": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%3#0"
      ],
      "stack_out": [
        "aggregate%concat%3#0"
      ]
    },
    "2951": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%concat%3#0",
        "pwl.children#0 (copy)"
      ],
      "stack_out": [
        "aggregate%concat%3#0",
        "pwl.children#0 (copy)"
      ]
    },
    "2953": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "2954": {
      "op": "bytec 10 // \"pwl\"",
      "defined_out": [
        "\"pwl\"",
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"pwl\""
      ]
    },
    "2956": {
      "op": "uncover 1",
      "stack_out": [
        "\"pwl\"",
        "encoded_for_storage%0#0"
      ]
    },
    "2958": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2959": {
      "retsub": true,
      "op": "retsub"
    },
    "2960": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple",
      "params": {},
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple",
      "stack_in": [],
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_block@0"
    },
    "2963": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2964": {
      "op": "bytec 10 // \"pwl\"",
      "defined_out": [
        "\"pwl\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pwl\""
      ]
    },
    "2966": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2967": {
      "error": "check self.pwl exists",
      "op": "assert // check self.pwl exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2968": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "2969": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "2970": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2971": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "2973": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "2974": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "2975": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2976": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "2978": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "2980": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "2982": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "2983": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "2984": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "0"
      ]
    },
    "2985": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "2986": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "2987": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "2988": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "2990": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "2991": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "8"
      ]
    },
    "2992": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "8",
        "8"
      ]
    },
    "2993": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "2994": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "2996": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "2997": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "16"
      ]
    },
    "2999": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "3000": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0"
      ]
    },
    "3002": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "3003": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%item0%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%len%0#0"
      ]
    },
    "3004": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "3006": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "3008": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "3010": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0"
      ]
    },
    "3011": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "3012": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "0"
      ]
    },
    "3013": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "0",
        "8"
      ]
    },
    "3014": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract%2#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%extract%2#0"
      ]
    },
    "3015": {
      "op": "btoi",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0"
      ]
    },
    "3016": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0"
      ]
    },
    "3018": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "3019": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "8"
      ]
    },
    "3020": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "3021": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0"
      ]
    },
    "3023": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "3024": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "10"
      ]
    },
    "3026": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "3027": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "3029": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%1#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "3031": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "3033": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%2#0"
      ]
    },
    "3034": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item1%0#0"
      ]
    },
    "3037": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0"
      ]
    },
    "3039": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "3040": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "10"
      ]
    },
    "3042": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "3043": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%1#0"
      ]
    },
    "3045": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "3046": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%len%1#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%1#0",
        "aggregate%len%1#0"
      ]
    },
    "3047": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "aggregate%substring3%1#0"
      ]
    },
    "3049": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%len%1#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "3051": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0"
      ]
    },
    "3053": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0"
      ]
    },
    "3054": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0"
      ]
    },
    "3057": {
      "op": "dig 4",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "3059": {
      "op": "intc_2 // 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "3060": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "3061": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%item2%0#0"
      ]
    },
    "3063": {
      "op": "dig 5",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%item2%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "3065": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%item2%0#0",
        "aggregate%len%2#0"
      ]
    },
    "3066": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "aggregate%item2%0#0"
      ]
    },
    "3068": {
      "op": "uncover 6",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "aggregate%item2%0#0",
        "maybe_value%0#0"
      ]
    },
    "3070": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%len%2#0",
        "aggregate%item2%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "3072": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0"
      ]
    },
    "3074": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%4#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%4#0"
      ]
    },
    "3075": {
      "op": "uncover 5",
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%4#0",
        "aggregate%item0%0#0"
      ]
    },
    "3077": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%0#0",
        "aggregate%substring3%4#0"
      ]
    },
    "3079": {
      "op": "uncover 5",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%4#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%0#0",
        "aggregate%substring3%4#0",
        "tmp%1#0"
      ]
    },
    "3081": {
      "op": "uncover 5",
      "defined_out": [
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%4#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%0#0",
        "aggregate%substring3%4#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "3083": {
      "op": "uncover 5",
      "defined_out": [
        "aggregate%item2%0#0",
        "aggregate%substring3%4#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%item2%0#0",
        "tmp%0#0",
        "aggregate%substring3%4#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3085": {
      "op": "uncover 5",
      "defined_out": [
        "aggregate%substring3%4#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%4#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "3087": {
      "op": "uncover 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "3089": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%0#0"
      ]
    },
    "3091": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3093": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "3095": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3097": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%5#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "3099": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "3101": {
      "retsub": true,
      "op": "retsub"
    },
    "3102": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3105": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box_block@0"
    },
    "3108": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "key.b#0 (copy)"
      ]
    },
    "3110": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "key.b#0 (copy)",
        "1"
      ]
    },
    "3111": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3112": {
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "key.a#0 (copy)"
      ]
    },
    "3114": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "3115": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "3116": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "3118": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%0#0"
      ]
    },
    "3119": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%0#0",
        "key.b#0 (copy)"
      ]
    },
    "3121": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "3122": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_for_storage%0#0"
      ]
    },
    "3123": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_for_storage%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "3125": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "\"box\"",
        "encoded_for_storage%0#0"
      ]
    },
    "3127": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3128": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "key.a#0 (copy)"
      ]
    },
    "3130": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%2#0",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "3131": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "aggregate%as_Encoded(uint64)%2#0",
        "0x"
      ]
    },
    "3132": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "0x",
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "3134": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "aggregate%head%2#0"
      ]
    },
    "3135": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%head%2#0",
        "tmp%0#0"
      ]
    },
    "3137": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%3#0",
        "aggregate%head%2#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(uint64)%3#0"
      ]
    },
    "3138": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_for_storage%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_for_storage%1#0"
      ]
    },
    "3139": {
      "op": "box_put",
      "stack_out": []
    },
    "3140": {
      "retsub": true,
      "op": "retsub"
    },
    "3141": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3144": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box_block@0"
    },
    "3147": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "key.a#0 (copy)"
      ]
    },
    "3149": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "3150": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "3151": {
      "op": "uncover 1",
      "stack_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "3153": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "3154": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%head%0#0",
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "key.b#0 (copy)"
      ]
    },
    "3156": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "3157": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "3158": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "3160": {
      "op": "uncover 1",
      "stack_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ]
    },
    "3162": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "3163": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3164": {
      "op": "uncover 1"
    },
    "3166": {
      "retsub": true,
      "op": "retsub"
    },
    "3167": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "3170": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_block@0"
    },
    "3173": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "key.a#0 (copy)"
      ]
    },
    "3175": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "3176": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "3177": {
      "op": "uncover 1",
      "stack_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "3179": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "3180": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%head%0#0",
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "key.b#0 (copy)"
      ]
    },
    "3182": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "3183": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "3184": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "3186": {
      "op": "uncover 1",
      "stack_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ]
    },
    "3188": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "3189": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "3190": {
      "error": "check self.box entry exists",
      "op": "assert // check self.box entry exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "3191": {
      "op": "dup",
      "defined_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ],
      "stack_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ]
    },
    "3192": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ],
      "stack_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)",
        "0"
      ]
    },
    "3193": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ],
      "stack_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "3194": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "3195": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "3196": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "storage_value%0#0"
      ]
    },
    "3198": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "storage_value%0#0",
        "8"
      ]
    },
    "3199": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "storage_value%0#0",
        "8",
        "8"
      ]
    },
    "3200": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "3201": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3202": {
      "retsub": true,
      "op": "retsub"
    },
    "3203": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box",
      "stack_in": [],
      "op": "proto 2 3"
    },
    "3206": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.a#0"
      ]
    },
    "3207": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ]
    },
    "3208": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_block@0"
    },
    "3211": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_block@0",
      "stack_in": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "key.a#0 (copy)"
      ]
    },
    "3213": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "3214": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "3215": {
      "op": "uncover 1",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "3217": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "aggregate%head%0#0"
      ]
    },
    "3218": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%head%0#0",
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "aggregate%head%0#0",
        "key.b#0 (copy)"
      ]
    },
    "3220": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "3221": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "encoded_for_storage%0#0"
      ]
    },
    "3222": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "3224": {
      "op": "uncover 1",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "\"box\"",
        "encoded_for_storage%0#0"
      ]
    },
    "3226": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3227": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3228": {
      "op": "dup",
      "defined_out": [
        "maybe_exists%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_value%0#0",
        "maybe_exists%0#0 (copy)",
        "maybe_exists%0#0 (copy)"
      ]
    },
    "3229": {
      "op": "cover 2",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0 (copy)"
      ]
    },
    "3231": {
      "op": "cover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "3233": {
      "op": "cover 1",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3235": {
      "op": "bz test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_false@2",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "3238": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_true@1"
    },
    "3241": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_true@1",
      "stack_in": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "3243": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "3244": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "3245": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "3246": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "3247": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "3248": {
      "op": "cover 1",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ]
    },
    "3250": {
      "op": "intc_3 // 8",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "3251": {
      "op": "intc_3 // 8",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "8",
        "8"
      ]
    },
    "3252": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "3253": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "3254": {
      "op": "uncover 1",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "aggregate%item1%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "3256": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "3258": {
      "op": "frame_bury 1",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "3260": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_merge@3"
    },
    "3263": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_merge@3",
      "stack_in": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value.a#0",
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value.a#0"
      ]
    },
    "3265": {
      "op": "frame_dig 1",
      "defined_out": [
        "maybe_value.a#0",
        "maybe_value.b#0",
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ]
    },
    "3267": {
      "op": "frame_dig 2",
      "defined_out": [
        "exists#0",
        "maybe_exists%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0",
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0",
        "exists#0"
      ]
    },
    "3269": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value.b#0",
        "exists#0",
        "maybe_value.a#0"
      ]
    },
    "3271": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "exists#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ]
    },
    "3273": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0",
        "exists#0"
      ]
    },
    "3275": {
      "op": "frame_bury 2"
    },
    "3277": {
      "op": "frame_bury 1"
    },
    "3279": {
      "op": "frame_bury 0"
    },
    "3281": {
      "retsub": true,
      "op": "retsub"
    },
    "3282": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_false@2",
      "stack_in": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "undefined"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "undefined"
      ]
    },
    "3283": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "3285": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "undefined"
      ]
    },
    "3286": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "3288": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box_ternary_merge@3"
    },
    "3291": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "3294": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.a#0"
      ]
    },
    "3295": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ]
    },
    "3296": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_block@0"
    },
    "3299": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_block@0",
      "stack_in": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "key.a#0 (copy)"
      ]
    },
    "3301": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "3302": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "3303": {
      "op": "uncover 1",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "3305": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "aggregate%head%0#0"
      ]
    },
    "3306": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%head%0#0",
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "aggregate%head%0#0",
        "key.b#0 (copy)"
      ]
    },
    "3308": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "3309": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "encoded_for_storage%0#0"
      ]
    },
    "3310": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "3312": {
      "op": "uncover 1",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "\"box\"",
        "encoded_for_storage%0#0"
      ]
    },
    "3314": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3315": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "box_prefixed_key%0#0",
        "4"
      ]
    },
    "3317": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "4",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "box_prefixed_key%0#0",
        "4",
        "2"
      ]
    },
    "3318": {
      "callsub": "test_cases.tuple_support.nested_tuples.simple_tup",
      "op": "callsub simple_tup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3321": {
      "op": "cover 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "3323": {
      "op": "cover 1",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "3325": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3326": {
      "op": "bz test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_false@2",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3329": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_true@1"
    },
    "3332": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_true@1",
      "stack_in": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "3334": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "3335": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "3336": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "3337": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "3338": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "3339": {
      "op": "cover 1",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ]
    },
    "3341": {
      "op": "intc_3 // 8",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "3342": {
      "op": "intc_3 // 8",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "8",
        "8"
      ]
    },
    "3343": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "3344": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "3345": {
      "op": "uncover 1",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%item1%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "3347": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "3349": {
      "op": "frame_bury 1",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3351": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_merge@3"
    },
    "3354": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_merge@3",
      "stack_in": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ]
    },
    "3355": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_false@2",
      "stack_in": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "3357": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3359": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ]
    },
    "3361": {
      "op": "frame_bury 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3363": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default_ternary_merge@3"
    },
    "3366": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default",
      "params": {
        "key#0": "bytes"
      },
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "3369": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.a#0"
      ]
    },
    "3370": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ]
    },
    "3371": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_block@0"
    },
    "3374": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_block@0",
      "stack_in": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "key#0 (copy)"
      ]
    },
    "3376": {
      "callsub": "test_cases.tuple_support.nested_tuples.echo",
      "op": "callsub echo",
      "defined_out": [
        "local#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "local#0"
      ]
    },
    "3379": {
      "callsub": "test_cases.tuple_support.nested_tuples.get_sender_inefficiently",
      "op": "callsub get_sender_inefficiently",
      "defined_out": [
        "local#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "local#0",
        "tmp%1#0"
      ]
    },
    "3382": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "local#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "local#0",
        "tmp%1#0",
        "4"
      ]
    },
    "3384": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "4",
        "local#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "local#0",
        "tmp%1#0",
        "4",
        "2"
      ]
    },
    "3385": {
      "callsub": "test_cases.tuple_support.nested_tuples.simple_tup",
      "op": "callsub simple_tup",
      "defined_out": [
        "local#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "local#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3388": {
      "op": "cover 3",
      "defined_out": [
        "local#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "local#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "3390": {
      "op": "cover 2",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "local#0",
        "tmp%1#0"
      ]
    },
    "3392": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "local#0",
        "tmp%1#0",
        "0"
      ]
    },
    "3393": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "0",
        "local#0"
      ]
    },
    "3395": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3396": {
      "op": "bz test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_false@2",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "3399": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_true@1"
    },
    "3402": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_true@1",
      "stack_in": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "3404": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "3405": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "3406": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "3407": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "3408": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "3409": {
      "op": "cover 1",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ]
    },
    "3411": {
      "op": "intc_3 // 8",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "3412": {
      "op": "intc_3 // 8",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "8",
        "8"
      ]
    },
    "3413": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "3414": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "3415": {
      "op": "uncover 1",
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "aggregate%item1%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "3417": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "3419": {
      "op": "frame_bury 1",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "3421": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_merge@3"
    },
    "3424": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_merge@3",
      "stack_in": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ]
    },
    "3425": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_false@2",
      "stack_in": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ]
    },
    "3427": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "3429": {
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ]
    },
    "3431": {
      "op": "frame_bury 1",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0",
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "3433": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default_ternary_merge@3"
    },
    "3436": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple",
      "params": {},
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple",
      "stack_in": [],
      "op": "proto 0 4"
    },
    "3439": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_block@0"
    },
    "3442": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "3443": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "3444": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0"
      ]
    },
    "3447": {
      "op": "bytec 9 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0",
        "0x0000000000000000"
      ]
    },
    "3449": {
      "op": "concat",
      "defined_out": [
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0"
      ]
    },
    "3450": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "0x"
      ]
    },
    "3451": {
      "op": "bytec 7 // 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "0x",
        "0x0000000000000001"
      ]
    },
    "3453": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "tmp%0#0"
      ]
    },
    "3454": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "twm.arr#0",
        "twm.arr#0 (copy)"
      ],
      "stack_out": [
        "twm.arr#0",
        "tmp%0#0",
        "twm.arr#0 (copy)"
      ]
    },
    "3456": {
      "op": "uncover 1",
      "stack_out": [
        "twm.arr#0",
        "twm.arr#0 (copy)",
        "tmp%0#0"
      ]
    },
    "3458": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "concat%0#0"
      ]
    },
    "3459": {
      "op": "cover 1",
      "stack_out": [
        "concat%0#0",
        "twm.arr#0"
      ]
    },
    "3461": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "concat%0#0",
        "twm.arr#0"
      ],
      "stack_out": [
        "concat%0#0",
        "twm.arr#0",
        "0"
      ]
    },
    "3462": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "3463": {
      "op": "intc_1 // 1",
      "stack_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "3464": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "add%0#0"
      ]
    },
    "3465": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "3466": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "3469": {
      "op": "uncover 1",
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "3471": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "3472": {
      "op": "uncover 2",
      "stack_out": [
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "3474": {
      "op": "replace3",
      "defined_out": [
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0"
      ]
    },
    "3475": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "twm.arr#0",
        "0x"
      ]
    },
    "3476": {
      "op": "pushbytes 0x0000000000000002",
      "defined_out": [
        "0x",
        "0x0000000000000002",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "0x",
        "0x0000000000000002"
      ]
    },
    "3486": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "tmp%1#0"
      ]
    },
    "3487": {
      "op": "dig 1",
      "stack_out": [
        "twm.arr#0",
        "tmp%1#0",
        "twm.arr#0 (copy)"
      ]
    },
    "3489": {
      "op": "uncover 1",
      "stack_out": [
        "twm.arr#0",
        "twm.arr#0 (copy)",
        "tmp%1#0"
      ]
    },
    "3491": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%1#0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "concat%1#0"
      ]
    },
    "3492": {
      "op": "cover 1",
      "stack_out": [
        "concat%1#0",
        "twm.arr#0"
      ]
    },
    "3494": {
      "op": "intc_0 // 0",
      "stack_out": [
        "concat%1#0",
        "twm.arr#0",
        "0"
      ]
    },
    "3495": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%1#0",
        "extract_uint16%1#0"
      ],
      "stack_out": [
        "concat%1#0",
        "extract_uint16%1#0"
      ]
    },
    "3496": {
      "op": "intc_1 // 1",
      "stack_out": [
        "concat%1#0",
        "extract_uint16%1#0",
        "1"
      ]
    },
    "3497": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "concat%1#0"
      ],
      "stack_out": [
        "concat%1#0",
        "add%1#0"
      ]
    },
    "3498": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concat%1#0"
      ],
      "stack_out": [
        "concat%1#0",
        "as_bytes%1#0"
      ]
    },
    "3499": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%1#0",
        "concat%1#0"
      ],
      "stack_out": [
        "concat%1#0",
        "as_u16_bytes%1#0"
      ]
    },
    "3502": {
      "op": "uncover 1",
      "stack_out": [
        "as_u16_bytes%1#0",
        "concat%1#0"
      ]
    },
    "3504": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_u16_bytes%1#0",
        "concat%1#0",
        "0"
      ]
    },
    "3505": {
      "op": "uncover 2",
      "stack_out": [
        "concat%1#0",
        "0",
        "as_u16_bytes%1#0"
      ]
    },
    "3507": {
      "op": "replace3",
      "defined_out": [
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0"
      ]
    },
    "3508": {
      "op": "intc_1 // 1",
      "stack_out": [
        "twm.arr#0",
        "1"
      ]
    },
    "3509": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "twm.arr#0"
      ]
    },
    "3510": {
      "op": "intc_0 // 0",
      "defined_out": [
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0"
      ]
    },
    "3511": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_header@1"
    },
    "3514": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_header@1",
      "stack_in": [
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "3516": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "3"
      ]
    },
    "3518": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "3519": {
      "op": "bz test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_after_for@4",
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0"
      ]
    },
    "3522": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_body@2"
    },
    "3525": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_body@2",
      "stack_in": [
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0"
      ]
    },
    "3527": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0",
        "twm.arr#0"
      ]
    },
    "3529": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "twm.arr#0",
        "twm.arr#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0",
        "twm.arr#0",
        "twm.arr#0 (copy)"
      ]
    },
    "3530": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%0#0",
        "i#0",
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0",
        "twm.arr#0",
        "aggregate%total_length%0#0"
      ]
    },
    "3531": {
      "op": "cover 1",
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%total_length%0#0",
        "twm.arr#0"
      ]
    },
    "3533": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%total_length%0#0",
        "i#0",
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%total_length%0#0",
        "twm.arr#0",
        "2"
      ]
    },
    "3534": {
      "op": "uncover 2",
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0",
        "twm.arr#0",
        "2",
        "aggregate%total_length%0#0"
      ]
    },
    "3536": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "i#0",
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "3537": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "i#0",
        "i#0 (copy)",
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%array_trimmed%0#0",
        "i#0 (copy)"
      ]
    },
    "3539": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%array_trimmed%0#0",
        "i#0",
        "i#0 (copy)",
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%array_trimmed%0#0",
        "i#0 (copy)",
        "8"
      ]
    },
    "3540": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "i#0",
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "3541": {
      "op": "intc_3 // 8",
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "8"
      ]
    },
    "3542": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "i#0",
        "reinterpret_biguint%0#0",
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "i#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "3543": {
      "op": "uncover 1",
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "reinterpret_biguint%0#0",
        "i#0"
      ]
    },
    "3545": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%2#0",
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "reinterpret_biguint%0#0",
        "tmp%2#0"
      ]
    },
    "3546": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0",
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "tmp%3#0"
      ]
    },
    "3547": {
      "op": "assert",
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0"
      ]
    },
    "3548": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_footer@3"
    },
    "3551": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_footer@3",
      "stack_in": [
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "3553": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "1"
      ]
    },
    "3554": {
      "op": "+",
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "3555": {
      "op": "frame_bury 1",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0"
      ]
    },
    "3557": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_for_header@1"
    },
    "3560": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple_after_for@4",
      "stack_in": [
        "twm.arr#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "twm.arr#0"
      ]
    },
    "3562": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "twm.arr#0",
        "0"
      ]
    },
    "3563": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0",
        "0x",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "twm.arr#0",
        "0",
        "0x"
      ]
    },
    "3564": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\"",
        "0",
        "0x",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "value_internal%0#0",
        "twm.arr#0",
        "0",
        "0x",
        "\"\""
      ]
    },
    "3565": {
      "op": "uncover 5"
    },
    "3567": {
      "op": "uncover 5"
    },
    "3569": {
      "retsub": true,
      "op": "retsub"
    },
    "3570": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method",
      "params": {},
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method",
      "stack_in": [],
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method_block@0"
    },
    "3573": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3574": {
      "op": "bytec 6 // \"twm\"",
      "defined_out": [
        "\"twm\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"twm\""
      ]
    },
    "3576": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3577": {
      "error": "check self.twm exists",
      "op": "assert // check self.twm exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3578": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "3579": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "3580": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "3581": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "3583": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "3584": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "3585": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "3586": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0"
      ]
    },
    "3588": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "3590": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "3592": {
      "op": "substring3",
      "defined_out": [
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0"
      ]
    },
    "3593": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "0x"
      ]
    },
    "3594": {
      "op": "bytec 7 // 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "0x",
        "0x0000000000000001"
      ]
    },
    "3596": {
      "op": "concat",
      "defined_out": [
        "arr2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr2#0",
        "tmp%4#0"
      ]
    },
    "3597": {
      "op": "dig 1",
      "defined_out": [
        "arr2#0",
        "arr2#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr2#0",
        "tmp%4#0",
        "arr2#0 (copy)"
      ]
    },
    "3599": {
      "op": "uncover 1",
      "stack_out": [
        "arr2#0",
        "arr2#0 (copy)",
        "tmp%4#0"
      ]
    },
    "3601": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "arr2#0",
        "concat%0#0"
      ],
      "stack_out": [
        "arr2#0",
        "concat%0#0"
      ]
    },
    "3602": {
      "op": "cover 1",
      "stack_out": [
        "concat%0#0",
        "arr2#0"
      ]
    },
    "3604": {
      "op": "intc_0 // 0",
      "stack_out": [
        "concat%0#0",
        "arr2#0",
        "0"
      ]
    },
    "3605": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "3606": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "3607": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "add%0#0"
      ]
    },
    "3608": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "3609": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "3612": {
      "op": "uncover 1",
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "3614": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "3615": {
      "op": "uncover 2",
      "stack_out": [
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "3617": {
      "op": "replace3",
      "defined_out": [
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0"
      ]
    },
    "3618": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr2#0",
        "0"
      ]
    },
    "3619": {
      "op": "bytec 6 // \"twm\"",
      "stack_out": [
        "arr2#0",
        "0",
        "\"twm\""
      ]
    },
    "3621": {
      "op": "app_global_get_ex",
      "defined_out": [
        "arr2#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "arr2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3622": {
      "error": "check self.twm exists",
      "op": "assert // check self.twm exists",
      "stack_out": [
        "arr2#0",
        "maybe_value%1#0"
      ]
    },
    "3623": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "arr2#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "3624": {
      "op": "intc_2 // 2",
      "stack_out": [
        "arr2#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "2"
      ]
    },
    "3625": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "arr2#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "arr2#0",
        "maybe_value%1#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "3626": {
      "op": "cover 1",
      "stack_out": [
        "arr2#0",
        "aggregate%extract_uint16%8#0",
        "maybe_value%1#0"
      ]
    },
    "3628": {
      "op": "dup",
      "stack_out": [
        "arr2#0",
        "aggregate%extract_uint16%8#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "3629": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%len%2#0",
        "arr2#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%extract_uint16%8#0",
        "maybe_value%1#0",
        "aggregate%len%2#0"
      ]
    },
    "3630": {
      "op": "cover 1",
      "stack_out": [
        "arr2#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%2#0",
        "maybe_value%1#0"
      ]
    },
    "3632": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "aggregate%len%2#0",
        "maybe_value%1#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "3634": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "maybe_value%1#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%2#0"
      ]
    },
    "3636": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0"
      ]
    },
    "3637": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3638": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "0"
      ]
    },
    "3639": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "0",
        "8"
      ]
    },
    "3640": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0"
      ]
    },
    "3641": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0"
      ]
    },
    "3642": {
      "op": "cover 1",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0"
      ]
    },
    "3644": {
      "op": "dup",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3645": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "8"
      ]
    },
    "3646": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%9#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "3647": {
      "op": "cover 1",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0"
      ]
    },
    "3649": {
      "op": "dup",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3650": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%extract_uint16%9#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "10"
      ]
    },
    "3652": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "3653": {
      "op": "dig 1",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3655": {
      "op": "uncover 3",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "3657": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "3659": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%6#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%6#0"
      ]
    },
    "3660": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%item1%1#0"
      ]
    },
    "3663": {
      "op": "cover 1",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0"
      ]
    },
    "3665": {
      "op": "dup",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3666": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "10"
      ]
    },
    "3668": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%11#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%11#0"
      ]
    },
    "3669": {
      "op": "cover 1",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%substring3%5#0"
      ]
    },
    "3671": {
      "op": "dup",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "3672": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%11#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%substring3%5#0",
        "aggregate%len%3#0"
      ]
    },
    "3673": {
      "op": "cover 1",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0"
      ]
    },
    "3675": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%11#0"
      ]
    },
    "3677": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%len%3#0"
      ]
    },
    "3679": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%7#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%7#0"
      ]
    },
    "3680": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "arr2#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "arr2#0",
        "awst_tmp%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0"
      ]
    },
    "3683": {
      "op": "uncover 1",
      "stack_out": [
        "arr2#0",
        "awst_tmp%1#0",
        "aggregate%item2%1#0",
        "aggregate%item1%1#0"
      ]
    },
    "3685": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%item2%1#0",
        "arr2#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "arr2#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "aggregate%item2%1#0"
      ]
    },
    "3687": {
      "op": "cover 2",
      "defined_out": [
        "arr2#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0"
      ]
    },
    "3689": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "arr2#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "4"
      ]
    },
    "3691": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "arr2#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "3692": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "arr2#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "3695": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "3696": {
      "op": "uncover 1",
      "stack_out": [
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "3698": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "aggregate%head%1#0"
      ]
    },
    "3699": {
      "op": "cover 4",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0"
      ]
    },
    "3701": {
      "op": "dig 3",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "arr2#0 (copy)"
      ]
    },
    "3703": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%head%1#0",
        "arr2#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "aggregate%data_length%0#0"
      ]
    },
    "3704": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "aggregate%data_length%0#0",
        "4"
      ]
    },
    "3706": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "arr2#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "3707": {
      "op": "cover 3",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0"
      ]
    },
    "3709": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "arr2#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "3710": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "3711": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "3713": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "arr2#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "aggregate%head%2#0"
      ]
    },
    "3714": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "arr2#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "aggregate%head%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3716": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%length%0#0",
        "arr2#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%length%0#0"
      ]
    },
    "3717": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "arr2#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "3718": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%0#0",
        "arr2#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "3721": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%0#0",
        "awst_tmp%2#0"
      ]
    },
    "3723": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "arr2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "3724": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "arr2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "12"
      ]
    },
    "3726": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "arr2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "3727": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0",
        "arr2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "3730": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%2#0"
      ]
    },
    "3732": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "3734": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "arr2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0"
      ]
    },
    "3735": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "3737": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "arr2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "3738": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%data_length%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "arr2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%1#0"
      ]
    },
    "3739": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%1#0",
        "12"
      ]
    },
    "3741": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "arr2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "3742": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "arr2#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3744": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%length%1#0",
        "arr2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length%1#0"
      ]
    },
    "3745": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "arr2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "3746": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%length_uint16%1#0",
        "arr2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "awst_tmp%3#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "3749": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%1#0",
        "awst_tmp%3#0"
      ]
    },
    "3751": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "arr2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "3752": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "arr2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "3754": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "arr2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "3755": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%2#0",
        "arr2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "3758": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%3#0"
      ]
    },
    "3760": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "3762": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%head%4#0",
        "arr2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%4#0"
      ]
    },
    "3763": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "3765": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "3766": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "3768": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "3769": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "3771": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%5#0",
        "aggregate%head%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "3772": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%3#0",
        "arr2#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "arr2#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "3775": {
      "op": "uncover 3",
      "stack_out": [
        "arr2#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%3#0",
        "aggregate%head%1#0"
      ]
    },
    "3777": {
      "op": "uncover 1",
      "stack_out": [
        "arr2#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "3779": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%5#0"
      ]
    },
    "3780": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%head%5#0",
        "arr2#0"
      ]
    },
    "3782": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0",
        "aggregate%concat%2#0"
      ]
    },
    "3783": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "3785": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "3786": {
      "op": "bytec 6 // \"twm\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"twm\""
      ]
    },
    "3788": {
      "op": "uncover 1",
      "stack_out": [
        "\"twm\"",
        "encoded_for_storage%0#0"
      ]
    },
    "3790": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3791": {
      "retsub": true,
      "op": "retsub"
    },
    "3792": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests",
      "params": {},
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests",
      "stack_in": [],
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.run_tests_block@0"
    },
    "3795": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests_block@0",
      "stack_in": [],
      "op": "bytec_3 // \"Hi\"",
      "defined_out": [
        "\"Hi\""
      ],
      "stack_out": [
        "\"Hi\""
      ]
    },
    "3796": {
      "op": "bytec_2 // \"There\"",
      "defined_out": [
        "\"Hi\"",
        "\"There\""
      ],
      "stack_out": [
        "\"Hi\"",
        "\"There\""
      ]
    },
    "3797": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_swap",
      "op": "callsub test_swap",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "3800": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "3802": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%0#0",
        "\"There\""
      ]
    },
    "3803": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%0#0"
      ]
    },
    "3804": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "3806": {
      "op": "bytec_3 // \"Hi\"",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%1#0",
        "\"Hi\""
      ]
    },
    "3807": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3808": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3809": {
      "op": "assert",
      "stack_out": []
    },
    "3810": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "\"There\""
      ]
    },
    "3811": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "\"There\"",
        "\"There\""
      ]
    },
    "3812": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3813": {
      "op": "assert",
      "stack_out": []
    },
    "3814": {
      "op": "bytec_3 // \"Hi\"",
      "stack_out": [
        "\"Hi\""
      ]
    },
    "3815": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"Hi\"",
        "0"
      ],
      "stack_out": [
        "\"Hi\"",
        "0"
      ]
    },
    "3816": {
      "op": "intc_2 // 2",
      "defined_out": [
        "\"Hi\"",
        "0",
        "2"
      ],
      "stack_out": [
        "\"Hi\"",
        "0",
        "2"
      ]
    },
    "3817": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"Hi\"",
        "0",
        "1",
        "2"
      ],
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1"
      ]
    },
    "3818": {
      "op": "bytec_3 // \"Hi\"",
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1",
        "\"Hi\""
      ]
    },
    "3819": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1",
        "\"Hi\"",
        "\"There\""
      ]
    },
    "3820": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1",
        "\"Hi\"",
        "\"There\"",
        "\"There\""
      ]
    },
    "3821": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_rearrange",
      "op": "callsub test_rearrange",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "3824": {
      "op": "cover 4",
      "stack_out": [
        "tmp%8#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "3826": {
      "op": "cover 3",
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "3828": {
      "op": "cover 2",
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "3830": {
      "op": "cover 1",
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "3832": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "a#0",
        "tmp%6#0",
        "tmp%5#0"
      ]
    },
    "3834": {
      "op": "cover 3",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "b#0",
        "tmp%7#0",
        "a#0",
        "tmp%6#0"
      ]
    },
    "3836": {
      "op": "cover 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "c#0",
        "tmp%8#0",
        "b#0",
        "tmp%7#0",
        "a#0"
      ]
    },
    "3838": {
      "op": "uncover 1",
      "stack_out": [
        "c#0",
        "tmp%8#0",
        "b#0",
        "a#0",
        "tmp%7#0"
      ]
    },
    "3840": {
      "op": "cover 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "d#0",
        "c#0",
        "tmp%8#0",
        "b#0",
        "a#0"
      ]
    },
    "3842": {
      "op": "uncover 2",
      "stack_out": [
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "tmp%8#0"
      ]
    },
    "3844": {
      "op": "cover 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0"
      ]
    },
    "3846": {
      "op": "bytec_3 // \"Hi\"",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "\"Hi\""
      ]
    },
    "3847": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "b#0",
        "tmp%9#0"
      ]
    },
    "3848": {
      "op": "uncover 1",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%9#0",
        "b#0"
      ]
    },
    "3850": {
      "op": "intc_0 // 0",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%9#0",
        "b#0",
        "0"
      ]
    },
    "3851": {
      "op": "==",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "3852": {
      "op": "&&",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%11#0"
      ]
    },
    "3853": {
      "op": "assert",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0"
      ]
    },
    "3854": {
      "op": "intc_2 // 2",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "2"
      ]
    },
    "3855": {
      "op": "==",
      "defined_out": [
        "d#0",
        "e#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "tmp%12#0"
      ]
    },
    "3856": {
      "op": "uncover 1",
      "stack_out": [
        "e#0",
        "tmp%12#0",
        "d#0"
      ]
    },
    "3858": {
      "op": "intc_1 // 1",
      "stack_out": [
        "e#0",
        "tmp%12#0",
        "d#0",
        "1"
      ]
    },
    "3859": {
      "op": "==",
      "defined_out": [
        "e#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "e#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "3860": {
      "op": "&&",
      "defined_out": [
        "e#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "e#0",
        "tmp%14#0"
      ]
    },
    "3861": {
      "op": "assert",
      "stack_out": [
        "e#0"
      ]
    },
    "3862": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "e#0",
        "\"There\""
      ]
    },
    "3863": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "3864": {
      "op": "assert",
      "stack_out": []
    },
    "3865": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "3866": {
      "op": "intc_2 // 2",
      "stack_out": [
        "1",
        "2"
      ]
    },
    "3867": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_intrinsics",
      "op": "callsub test_intrinsics",
      "stack_out": []
    },
    "3870": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_slicing",
      "op": "callsub test_nested_slicing"
    },
    "3873": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "3874": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "3875": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "op": "callsub test_nested_singles",
      "stack_out": []
    },
    "3878": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "3879": {
      "op": "intc_0 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "3880": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "op": "callsub test_nested_singles",
      "stack_out": []
    },
    "3883": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_mutation",
      "op": "callsub test_nested_mutation"
    },
    "3886": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "3887": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "3888": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "3889": {
      "op": "bytec_3 // \"Hi\"",
      "stack_out": [
        "tmp%16#0",
        "\"Hi\""
      ]
    },
    "3890": {
      "op": "bytec_3 // \"Hi\"",
      "stack_out": [
        "tmp%16#0",
        "\"Hi\"",
        "\"Hi\""
      ]
    },
    "3891": {
      "op": "==",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "3892": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "\"There\""
      ]
    },
    "3893": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "\"There\"",
        "\"There\""
      ]
    },
    "3894": {
      "op": "==",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "3895": {
      "op": "&&",
      "defined_out": [
        "tmp%16#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%19#0"
      ]
    },
    "3896": {
      "op": "&&",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "3897": {
      "op": "assert",
      "stack_out": []
    },
    "3898": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_iteration",
      "op": "callsub test_nested_iteration"
    },
    "3901": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested",
      "op": "callsub test_single_evaluation_nested"
    },
    "3904": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "3905": {
      "retsub": true,
      "op": "retsub"
    },
    "3906": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params",
      "params": {
        "args.0#0": "bytes",
        "args.1.0#0": "bytes",
        "args.1.1.0#0": "uint64"
      },
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "3909": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params_block@0"
    },
    "3912": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "s#0"
      ],
      "stack_out": [
        "s#0"
      ]
    },
    "3914": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "b#0"
      ]
    },
    "3916": {
      "op": "frame_dig -1",
      "defined_out": [
        "args.1.1.0#0 (copy)",
        "b#0",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "args.1.1.0#0 (copy)"
      ]
    },
    "3918": {
      "op": "cover 1",
      "defined_out": [
        "b#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "u#0",
        "b#0"
      ]
    },
    "3920": {
      "op": "uncover 2",
      "stack_out": [
        "u#0",
        "b#0",
        "s#0"
      ]
    },
    "3922": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "s#0",
        "u#0"
      ]
    },
    "3924": {
      "retsub": true,
      "op": "retsub"
    },
    "3925": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple",
      "params": {
        "args.a#0": "uint64",
        "args.b#0": "bytes",
        "args.c#0": "bytes"
      },
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "3928": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple_block@0"
    },
    "3931": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "3933": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "3935": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "3937": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "a#0"
      ]
    },
    "3939": {
      "op": "uncover 2",
      "stack_out": [
        "c#0",
        "a#0",
        "b#0"
      ]
    },
    "3941": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "3943": {
      "retsub": true,
      "op": "retsub"
    },
    "3944": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params",
      "params": {
        "args.foo#0": "uint64",
        "args.foo_arc#0": "bytes",
        "args.child.a#0": "uint64",
        "args.child.b#0": "bytes",
        "args.child.c#0": "bytes"
      },
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params",
      "stack_in": [],
      "op": "proto 5 5"
    },
    "3947": {
      "op": "b test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params_block@0"
    },
    "3950": {
      "block": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params_block@0",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "foo#0"
      ],
      "stack_out": [
        "foo#0"
      ]
    },
    "3952": {
      "op": "frame_dig -4",
      "defined_out": [
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0"
      ]
    },
    "3954": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0"
      ]
    },
    "3956": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b#0",
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0"
      ]
    },
    "3958": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "3960": {
      "op": "uncover 4",
      "stack_out": [
        "foo_arc#0",
        "a#0",
        "b#0",
        "c#0",
        "foo#0"
      ]
    },
    "3962": {
      "op": "uncover 4",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "foo#0",
        "foo_arc#0"
      ]
    },
    "3964": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "c#0",
        "foo#0",
        "foo_arc#0",
        "a#0"
      ]
    },
    "3966": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0"
      ]
    },
    "3968": {
      "op": "uncover 4",
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "3970": {
      "retsub": true,
      "op": "retsub"
    },
    "3971": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.build_nested",
      "params": {},
      "block": "build_nested",
      "stack_in": [],
      "op": "b build_nested_block@0"
    },
    "3974": {
      "block": "build_nested_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3975": {
      "op": "bytec 4 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"build_nested_call_count\""
      ]
    },
    "3977": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3978": {
      "error": "check self.build_nested_call_count exists",
      "op": "assert // check self.build_nested_call_count exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3979": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "3980": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3981": {
      "op": "bytec 4 // \"build_nested_call_count\"",
      "stack_out": [
        "tmp%0#0",
        "\"build_nested_call_count\""
      ]
    },
    "3983": {
      "op": "uncover 1",
      "stack_out": [
        "\"build_nested_call_count\"",
        "tmp%0#0"
      ]
    },
    "3985": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3986": {
      "op": "bytec 11 // \"hi\"",
      "defined_out": [
        "\"hi\""
      ],
      "stack_out": [
        "\"hi\""
      ]
    },
    "3988": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"hi\"",
        "1"
      ]
    },
    "3989": {
      "op": "pushbytes 0x686d6d6d",
      "defined_out": [
        "\"hi\"",
        "0x686d6d6d",
        "1"
      ],
      "stack_out": [
        "\"hi\"",
        "1",
        "0x686d6d6d"
      ]
    },
    "3995": {
      "retsub": true,
      "op": "retsub"
    },
    "3996": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested",
      "params": {},
      "block": "test_single_evaluation_nested",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "3999": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ternary_result%0.0.0#0"
      ]
    },
    "4000": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1"
      ]
    },
    "4001": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1"
      ]
    },
    "4002": {
      "op": "b test_single_evaluation_nested_block@0"
    },
    "4005": {
      "block": "test_single_evaluation_nested_block@0",
      "stack_in": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1"
      ],
      "op": "bytec 4 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\""
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "\"build_nested_call_count\""
      ]
    },
    "4007": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "\"build_nested_call_count\"",
        "0"
      ]
    },
    "4008": {
      "op": "app_global_put",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1"
      ]
    },
    "4009": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.build_nested",
      "op": "callsub build_nested",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ]
    },
    "4012": {
      "op": "cover 2",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%2#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "4014": {
      "op": "cover 1",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "4016": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4017": {
      "op": "cover 3",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "4019": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0 (copy)",
        "awst_tmp%0#0"
      ]
    },
    "4020": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "tmp%0#0"
      ]
    },
    "4021": {
      "op": "dig 1",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "awst_tmp%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "tmp%0#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4023": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%0#0",
        "awst_tmp%1#0 (copy)",
        "awst_tmp%1#0"
      ]
    },
    "4025": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4026": {
      "op": "&&",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%2#0"
      ]
    },
    "4027": {
      "op": "dig 1",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "4029": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "awst_tmp%2#0"
      ]
    },
    "4031": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "4032": {
      "op": "||",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "4033": {
      "op": "bz test_single_evaluation_nested_ternary_false@2",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0"
      ]
    },
    "4036": {
      "op": "b test_single_evaluation_nested_ternary_true@1"
    },
    "4039": {
      "block": "test_single_evaluation_nested_ternary_true@1",
      "stack_in": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "4041": {
      "op": "frame_bury 0",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0"
      ]
    },
    "4043": {
      "op": "b test_single_evaluation_nested_ternary_merge@3"
    },
    "4046": {
      "block": "test_single_evaluation_nested_ternary_merge@3",
      "stack_in": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "result.0.0#0",
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "result.0.0#0"
      ]
    },
    "4048": {
      "op": "bytec 11 // \"hi\"",
      "defined_out": [
        "\"hi\"",
        "result.0.0#0",
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "result.0.0#0",
        "\"hi\""
      ]
    },
    "4050": {
      "op": "==",
      "defined_out": [
        "ternary_result%0.0.0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "4051": {
      "op": "assert",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0"
      ]
    },
    "4052": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "4053": {
      "op": "bytec 4 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0",
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "0",
        "\"build_nested_call_count\""
      ]
    },
    "4055": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4056": {
      "error": "check self.build_nested_call_count exists",
      "op": "assert // check self.build_nested_call_count exists",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4057": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0",
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "4058": {
      "op": "==",
      "defined_out": [
        "ternary_result%0.0.0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "4059": {
      "op": "assert",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0"
      ]
    },
    "4060": {
      "retsub": true,
      "op": "retsub"
    },
    "4061": {
      "block": "test_single_evaluation_nested_ternary_false@2",
      "stack_in": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0"
      ],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.build_nested",
      "op": "callsub build_nested",
      "defined_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.0.1#1",
        "ternary_result%0.1#1"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0",
        "ternary_result%0.0.1#1",
        "ternary_result%0.1#1"
      ]
    },
    "4064": {
      "op": "frame_bury 1",
      "defined_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.0.1#1",
        "ternary_result%0.1#1"
      ],
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0",
        "ternary_result%0.0.1#1"
      ]
    },
    "4066": {
      "op": "frame_bury 2",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0"
      ]
    },
    "4068": {
      "op": "frame_bury 0",
      "stack_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.1#1",
        "ternary_result%0.0.1#1",
        "awst_tmp%0#0"
      ]
    },
    "4070": {
      "op": "b test_single_evaluation_nested_ternary_merge@3"
    }
  }
}