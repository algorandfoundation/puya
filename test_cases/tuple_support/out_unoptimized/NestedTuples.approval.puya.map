{
  "version": 3,
  "sources": [
    "../nested_tuples.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;;;AAII;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAEA;;AAAA;;AAAA;;AAAA;;AAAA;AAGJ;;;AAEI;;AAAA;;AACA;AAAA;AAGJ;;;AAEqB;;AAAA;;AAAA;AAAjB;AAAM;AACU;AAAT;AAAP;AADsC;;AAErB;AAAV;AAAP;AACO;AAAU;AAAV;AAAa;;AAAA;;AAAA;AAAb;;AAAA;AAAA;AAAP;AACO;AAAc;AAAd;AAAP;AACqB;;AAAA;;AAAA;AAAd;;AAAA;AAAP;AAEY;AAAL;AAAP;AACY;;AAAA;;AAAA;AAAL;AAAP;;AAGJ;;;AAWY;;AAMQ;AAAT;AAAP;AAbI;AAckB;AAAf;AALH;;AAKqB;AAAlB;AAAA;AAAP;AAVY;;;AAWO;AAAZ;AAVK;;;AAUY;AAAjB;AAAA;AAAP;;AAGJ;;;AAGS;AADL;;AAAA;AAGK;AAHL;AACK;AAIa;AAAX;AAAP;AAJK;AAKW;AAAT;AAAP;AACO;AAAW;AAAX;AAAP;AACO;AAAA;;AAAA;AAAP;AALK;AAMa;AAAX;AAAP;AANK;AAOW;AAAT;AAAP;AAEJ;;AAAA;;;AAEa;;AADL;;AAEK;;AAFL;;AAGK;;AAHL;;AAKe;AAAA;;AAAA;;AAAA;AAAZ;;AAAA;AAAP;AACA;;AACe;AAAA;;AAAA;;AAAA;AAAR;AAAP;AACO;;AAAA;;AAAA;AAAP;AAEA;;AAAA;AACA;;AAAA;AACc;AAAA;;AAAA;;AAAA;AAAP;AAAP;AACmB;AAAA;;AAAA;;AAAA;AAAZ;AAAP;;AAGJ;;;AAIY;AACI;;;;;;;;;;AADJ;AAAA;;;;AAAA;AAAA;AAKR;;;AAAA;AAAe;;;;;;;;;;AAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACO;AAAA;AAAkB;AAAlB;AAAP;;AAGJ;;;;;AAIY;;AAFJ;AACA;AAIA;;AACS;AAAT;;AAAA;AAAA;;AAFR;;AAAA;;;;;;;;;;;AAJQ;AAQA;;AAPA;AAQS;;AAAA;AAAT;;AAAA;AAAA;;AADR;;AAAA;;;;;;;;AAGW;;AAAS;AAAT;AAAc;;AAAd;AAAP;;;;;;AAVI;AAOA;;AAPA;;;;;;;AADA;AAQA;;AARA;;;;;;;AACA;AAOA;;AARA;;;;;;;;AACA;AAGA;;AAHA;;;;;;;AADA;AAIA;;AAJA;;;;;;;AACA;AAGA;;AAJA;;;;AA9JR;;;AACQ;AAA+B;AAA/B;;AAER;;;AAEa;AAAc;AACZ;;;AAAA;AAAiB;AAAjB;AAAA;AAAkC;AAAlC;AAAA;AAAP;AADmB;AAOF;AAAV;AAAP;AAPK;AAGA;AAAW;AADX;AAFA;AAAc;AAAA;AASI;;;AAAA;;AAAA;;AAAA;;AAAA;AAAvB;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AACkB;AAAX;AAAA;AAAyB;AAAzB;AAAA;AAAP;AACkB;AAAX;AAAA;AAAsB;AAAtB;AAAA;AAAP;AACY;AAAL;AAAP;AAEgB;AAAW;AAA3B;;;AACA;;;AACoB;AAAoB;AAAxC;;;AACoB;AAAoB;AAAxC;;;AACA;;;AAhBK;AAAA;AAkBE;AApBF;AAAA;AAoBE;AApBY;AAAA;AAoBZ;AAAA;AAAA;AAAP;AAEA;;;AAEA;;;AACO;AAAP;AAER;;;AAIQ;;AAAA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAER;;;AAEQ;;AAAA;;AAAA;;AACA;;AAAA;;AAAA;;AAAA;AAER;;;AAEQ;;AAAA;;AAAA;;AAAA;;AAAA;;AACA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAER;;;AAEQ;AAAA;AAAA;AAAA;AAAgC;AAAhC;AAAA;AAAA;AAAA;AACQ;;AAAc;AAAY;;;;;;AAAlC;AAER;;;AAEQ;AAA+B;AAA/B;AACS;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AACc;;AAAhB;AAAP;AACO;AAAA;AAAA;AAAA;AAAgC;AAAhC;AAAP;;AAFgC;;;AAAA;;;;;;;;AA1DxC;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;AA6CK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA7CL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AA6CK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxCL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAwCK;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjCL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCK;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AA7BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8"
    },
    "7": {
      "op": "bytecblock 0x \"Hi\" \"There\" \"build_nested_call_count\" 0x151f7c75 \"hi\""
    },
    "51": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "53": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "56": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.__init__",
      "op": "callsub __init__"
    },
    "59": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "62": {
      "op": "return",
      "stack_out": []
    },
    "63": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_rearrange",
      "params": {
        "_a#0": "bytes",
        "args.0#0": "uint64",
        "args.1#0": "uint64",
        "args.2.0#0": "uint64",
        "args.2.1.0#0": "bytes",
        "args.2.1.1#0": "bytes",
        "_b#0": "bytes"
      },
      "block": "test_rearrange",
      "stack_in": [],
      "op": "proto 7 5"
    },
    "66": {
      "op": "frame_dig -6",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "68": {
      "op": "frame_dig -5",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "70": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "72": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "74": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ]
    },
    "76": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "e#0",
        "d#0"
      ]
    },
    "77": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "c#0",
        "e#0",
        "d#0",
        "a#0"
      ]
    },
    "79": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "e#0",
        "d#0",
        "a#0",
        "b#0"
      ]
    },
    "81": {
      "op": "uncover 4",
      "stack_out": [
        "e#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "83": {
      "op": "uncover 4",
      "stack_out": [
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "e#0"
      ]
    },
    "85": {
      "retsub": true,
      "op": "retsub"
    },
    "86": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_swap",
      "params": {
        "args.0#0": "bytes",
        "args.1#0": "bytes"
      },
      "block": "test_swap",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "89": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "91": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "93": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "a#0"
      ]
    },
    "94": {
      "retsub": true,
      "op": "retsub"
    },
    "95": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_intrinsics",
      "params": {
        "num1#0": "uint64",
        "num2#0": "uint64"
      },
      "block": "test_intrinsics",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "98": {
      "op": "frame_dig -2",
      "defined_out": [
        "num1#0 (copy)"
      ],
      "stack_out": [
        "num1#0 (copy)"
      ]
    },
    "100": {
      "op": "frame_dig -1",
      "defined_out": [
        "num1#0 (copy)",
        "num2#0 (copy)"
      ],
      "stack_out": [
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "102": {
      "op": "addw",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.0#0",
        "nt.1.1#0"
      ]
    },
    "103": {
      "op": "swap",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "104": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "1"
      ]
    },
    "105": {
      "op": "dup",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "1",
        "1"
      ]
    },
    "106": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%2#0"
      ]
    },
    "107": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "108": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "42"
      ]
    },
    "110": {
      "op": "dup",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "42",
        "42"
      ]
    },
    "111": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%3#0"
      ]
    },
    "112": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "113": {
      "op": "dup",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)"
      ]
    },
    "114": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "0"
      ]
    },
    "115": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0"
      ]
    },
    "116": {
      "op": "frame_dig -2",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "num1#0 (copy)"
      ]
    },
    "118": {
      "op": "frame_dig -1",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "120": {
      "op": "+",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "121": {
      "op": "dig 3",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "nt.1.1#0 (copy)",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "tmp%5#0",
        "nt.1.1#0 (copy)"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "124": {
      "op": "&&",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%7#0"
      ]
    },
    "125": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "126": {
      "op": "dup",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)"
      ]
    },
    "127": {
      "op": "intc_0 // 0",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "0"
      ]
    },
    "128": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%8#0"
      ]
    },
    "129": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "130": {
      "op": "frame_dig -2",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "num1#0 (copy)"
      ]
    },
    "132": {
      "op": "frame_dig -1",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "134": {
      "op": "+",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%9#0"
      ]
    },
    "135": {
      "op": "dig 2",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%9#0",
        "nt.1.1#0 (copy)"
      ]
    },
    "137": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%10#0"
      ]
    },
    "138": {
      "op": "assert",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "x#0"
      ]
    },
    "139": {
      "op": "intc_0 // 0",
      "stack_out": [
        "y#0",
        "x#0",
        "0"
      ]
    },
    "140": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "tmp%11#0"
      ]
    },
    "141": {
      "op": "assert",
      "stack_out": [
        "y#0"
      ]
    },
    "142": {
      "op": "frame_dig -2",
      "stack_out": [
        "y#0",
        "num1#0 (copy)"
      ]
    },
    "144": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#0",
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "146": {
      "op": "+",
      "defined_out": [
        "tmp%12#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "tmp%12#0"
      ]
    },
    "147": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "148": {
      "op": "assert",
      "stack_out": []
    },
    "149": {
      "retsub": true,
      "op": "retsub"
    },
    "150": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_slicing",
      "params": {},
      "block": "test_nested_slicing",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "153": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "155": {
      "op": "dup",
      "stack_out": [
        "4",
        "4"
      ]
    },
    "156": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "157": {
      "op": "assert",
      "stack_out": []
    },
    "158": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "159": {
      "op": "dup",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "160": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "161": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "5"
      ]
    },
    "163": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "5",
        "5"
      ]
    },
    "164": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "165": {
      "op": "&&",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "166": {
      "op": "assert",
      "stack_out": []
    },
    "167": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\""
      ],
      "stack_out": [
        "\"a\""
      ]
    },
    "170": {
      "op": "dup",
      "stack_out": [
        "\"a\"",
        "\"a\""
      ]
    },
    "171": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "172": {
      "op": "pushbytes \"b\"",
      "defined_out": [
        "\"b\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"b\""
      ]
    },
    "175": {
      "op": "dup",
      "stack_out": [
        "tmp%4#0",
        "\"b\"",
        "\"b\""
      ]
    },
    "176": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "177": {
      "op": "&&",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "178": {
      "op": "assert",
      "stack_out": []
    },
    "179": {
      "retsub": true,
      "op": "retsub"
    },
    "180": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "params": {
        "one#0": "uint64",
        "reassign#0": "uint64"
      },
      "block": "test_nested_singles",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "183": {
      "op": "intc_0 // 0",
      "defined_out": [
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0"
      ]
    },
    "184": {
      "op": "frame_dig -2",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0"
      ]
    },
    "186": {
      "op": "dup",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0"
      ]
    },
    "187": {
      "op": "intc_2 // 2",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ]
    },
    "188": {
      "op": "swap",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "189": {
      "op": "intc_0 // 0",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0"
      ]
    },
    "190": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0",
        "0"
      ]
    },
    "191": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "193": {
      "op": "intc_0 // 0",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0"
      ]
    },
    "194": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0",
        "0"
      ]
    },
    "195": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%1#0"
      ]
    },
    "196": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "197": {
      "op": "dup",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)"
      ]
    },
    "198": {
      "op": "intc_1 // 1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "1"
      ]
    },
    "199": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%2#0"
      ]
    },
    "200": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "201": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)"
      ]
    },
    "202": {
      "op": "frame_dig -2",
      "defined_out": [
        "one#0 (copy)",
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "one#0 (copy)"
      ]
    },
    "204": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%3#0"
      ]
    },
    "205": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "206": {
      "op": "intc_2 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2"
      ]
    },
    "207": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2",
        "2"
      ]
    },
    "208": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%4#0"
      ]
    },
    "209": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "210": {
      "op": "intc_2 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2"
      ]
    },
    "211": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2",
        "2"
      ]
    },
    "212": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%5#0"
      ]
    },
    "213": {
      "op": "assert",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "214": {
      "op": "frame_dig -1",
      "defined_out": [
        "reassign#0 (copy)",
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "reassign#0 (copy)"
      ]
    },
    "216": {
      "op": "bz test_nested_singles_after_if_else@2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "219": {
      "block": "test_nested_singles_if_body@1",
      "stack_in": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.0.0#0"
      ]
    },
    "221": {
      "op": "frame_bury 0",
      "defined_out": [
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "223": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0"
      ]
    },
    "225": {
      "op": "frame_bury 1",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "227": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.2.0#0"
      ]
    },
    "229": {
      "op": "frame_bury 2",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "231": {
      "block": "test_nested_singles_after_if_else@2",
      "stack_in": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "0"
      ]
    },
    "232": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "3"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "0",
        "3"
      ]
    },
    "234": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "3",
        "reassign#0 (copy)"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "0",
        "3",
        "reassign#0 (copy)"
      ]
    },
    "236": {
      "op": "select",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%6#0"
      ]
    },
    "237": {
      "op": "frame_dig 0",
      "defined_out": [
        "s.0.0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%6#0",
        "s.0.0#0"
      ]
    },
    "239": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%7#0"
      ]
    },
    "240": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "241": {
      "op": "frame_dig 2",
      "defined_out": [
        "s.0.0#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0"
      ]
    },
    "243": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "s.0.0#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "2"
      ]
    },
    "244": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "2",
        "5",
        "s.0.0#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "2",
        "5"
      ]
    },
    "246": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "2",
        "5",
        "reassign#0 (copy)"
      ]
    },
    "248": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "tmp#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "tmp%8#0"
      ]
    },
    "249": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%9#0"
      ]
    },
    "250": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "251": {
      "op": "frame_dig 3",
      "defined_out": [
        "s.0.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "253": {
      "op": "frame_dig -2",
      "defined_out": [
        "one#0 (copy)",
        "s.0.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "t.0#0",
        "one#0 (copy)"
      ]
    },
    "255": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "t.0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%10#0"
      ]
    },
    "256": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "257": {
      "op": "frame_dig 1",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0"
      ]
    },
    "259": {
      "op": "dup",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s1#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0"
      ]
    },
    "260": {
      "op": "frame_dig -2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "one#0 (copy)"
      ]
    },
    "262": {
      "op": "+",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0"
      ]
    },
    "263": {
      "op": "intc_2 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "2"
      ]
    },
    "264": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "2",
        "5"
      ]
    },
    "266": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "2",
        "5",
        "reassign#0 (copy)"
      ]
    },
    "268": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s1#0",
        "t.0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "tmp%11#0"
      ]
    },
    "269": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "tmp%12#0"
      ]
    },
    "270": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0"
      ]
    },
    "271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "1"
      ]
    },
    "272": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "1",
        "4",
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "1",
        "4"
      ]
    },
    "274": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "1",
        "4",
        "reassign#0 (copy)"
      ]
    },
    "276": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "tmp%13#0"
      ]
    },
    "277": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%14#0"
      ]
    },
    "278": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "279": {
      "retsub": true,
      "op": "retsub"
    },
    "280": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_mutation",
      "params": {},
      "block": "test_nested_mutation",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "283": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "284": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x",
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x",
        "0x0000000000000000"
      ]
    },
    "294": {
      "op": "concat",
      "defined_out": [
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0"
      ]
    },
    "295": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001",
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0",
        "0x0001"
      ]
    },
    "299": {
      "op": "swap",
      "stack_out": [
        "0x0001",
        "result%0#0"
      ]
    },
    "300": {
      "op": "concat",
      "defined_out": [
        "x.0.0#0"
      ],
      "stack_out": [
        "x.0.0#0"
      ]
    },
    "301": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "304": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x"
      ]
    },
    "305": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "0x0000000000000001"
      ]
    },
    "315": {
      "op": "concat",
      "defined_out": [
        "data%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "data%0#0"
      ]
    },
    "316": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "317": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "318": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "319": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "320": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "321": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "322": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "325": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "326": {
      "op": "concat",
      "stack_out": [
        "x.0.0#0"
      ]
    },
    "327": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "x.0.0#0"
      ],
      "stack_out": [
        "x.0.0#0",
        "0"
      ]
    },
    "328": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "329": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "330": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "331": {
      "op": "assert",
      "stack_out": []
    },
    "332": {
      "retsub": true,
      "op": "retsub"
    },
    "333": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_iteration",
      "params": {},
      "block": "test_nested_iteration",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "336": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "a#0"
      ]
    },
    "337": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "loop_counter%1#0"
      ]
    },
    "338": {
      "op": "intc_0 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0"
      ]
    },
    "339": {
      "op": "dup",
      "defined_out": [
        "loop_counter%0#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "340": {
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "341": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "342": {
      "block": "test_nested_iteration_for_body@1",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "a#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "a#0"
      ]
    },
    "344": {
      "op": "+",
      "defined_out": [
        "a#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%0#0"
      ]
    },
    "345": {
      "op": "frame_dig 2",
      "defined_out": [
        "a#0",
        "tmp%0#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%0#0",
        "total#0"
      ]
    },
    "347": {
      "op": "+",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ]
    },
    "348": {
      "op": "frame_bury 2",
      "defined_out": [
        "a#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "350": {
      "block": "test_nested_iteration_for_footer@2",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "352": {
      "op": "switch test_nested_iteration_for_header_1@3 test_nested_iteration_for_header_2@4 test_nested_iteration_for_header_3@5",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "360": {
      "block": "test_nested_iteration_after_for@6",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "361": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "363": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "a#0"
      ]
    },
    "364": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "366": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ]
    },
    "367": {
      "block": "test_nested_iteration_for_body@7",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0",
        "a#0"
      ]
    },
    "369": {
      "op": "+",
      "defined_out": [
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%1#0"
      ]
    },
    "370": {
      "op": "frame_dig 2",
      "defined_out": [
        "a#0",
        "tmp%1#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%1#0",
        "total#0"
      ]
    },
    "372": {
      "op": "+",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ]
    },
    "373": {
      "op": "frame_bury 2",
      "defined_out": [
        "a#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "375": {
      "block": "test_nested_iteration_for_footer@8",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "377": {
      "op": "switch test_nested_iteration_for_header_1@9 test_nested_iteration_for_header_2@10 test_nested_iteration_for_header_3@11",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "385": {
      "block": "test_nested_iteration_after_for@12",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ]
    },
    "387": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "total#0",
        "8"
      ]
    },
    "388": {
      "op": "/",
      "defined_out": [
        "tmp%2#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%2#0"
      ]
    },
    "389": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%2#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%2#0",
        "3"
      ]
    },
    "391": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%3#0"
      ]
    },
    "392": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "393": {
      "retsub": true,
      "op": "retsub"
    },
    "394": {
      "block": "test_nested_iteration_for_header_3@11",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "396": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "398": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "a#0"
      ]
    },
    "399": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "401": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ]
    },
    "402": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "405": {
      "block": "test_nested_iteration_for_header_2@10",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "406": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "408": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "a#0"
      ]
    },
    "409": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "411": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ]
    },
    "412": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "415": {
      "block": "test_nested_iteration_for_header_1@9",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "416": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "418": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "a#0"
      ]
    },
    "419": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "421": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ]
    },
    "422": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "425": {
      "block": "test_nested_iteration_for_header_3@5",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "427": {
      "op": "frame_bury 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "429": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "430": {
      "op": "frame_bury 4",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "432": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "433": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "436": {
      "block": "test_nested_iteration_for_header_2@4",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "437": {
      "op": "frame_bury 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "439": {
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "440": {
      "op": "frame_bury 4",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "442": {
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "443": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "446": {
      "block": "test_nested_iteration_for_header_1@3",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "447": {
      "op": "frame_bury 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "449": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "450": {
      "op": "frame_bury 4",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "452": {
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "453": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "456": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "459": {
      "op": "bytec_3 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\""
      ],
      "stack_out": [
        "\"build_nested_call_count\""
      ]
    },
    "460": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "\"build_nested_call_count\"",
        "0"
      ]
    },
    "461": {
      "op": "app_global_put",
      "stack_out": []
    },
    "462": {
      "retsub": true,
      "op": "retsub"
    },
    "463": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests",
      "params": {},
      "block": "run_tests",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "466": {
      "op": "bytec_1 // \"Hi\"",
      "defined_out": [
        "\"Hi\""
      ],
      "stack_out": [
        "\"Hi\""
      ]
    },
    "467": {
      "op": "bytec_2 // \"There\"",
      "defined_out": [
        "\"Hi\"",
        "\"There\""
      ],
      "stack_out": [
        "\"Hi\"",
        "\"There\""
      ]
    },
    "468": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_swap",
      "op": "callsub test_swap",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "471": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "472": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%0#0",
        "\"There\""
      ]
    },
    "473": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%0#0"
      ]
    },
    "474": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "475": {
      "op": "bytec_1 // \"Hi\"",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%1#0",
        "\"Hi\""
      ]
    },
    "476": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "477": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "478": {
      "op": "assert",
      "stack_out": []
    },
    "479": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "\"There\""
      ]
    },
    "480": {
      "op": "dup",
      "stack_out": [
        "\"There\"",
        "\"There\""
      ]
    },
    "481": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "482": {
      "op": "assert",
      "stack_out": []
    },
    "483": {
      "op": "bytec_1 // \"Hi\"",
      "stack_out": [
        "\"Hi\""
      ]
    },
    "484": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"Hi\"",
        "0"
      ],
      "stack_out": [
        "\"Hi\"",
        "0"
      ]
    },
    "485": {
      "op": "intc_2 // 2",
      "defined_out": [
        "\"Hi\"",
        "0",
        "2"
      ],
      "stack_out": [
        "\"Hi\"",
        "0",
        "2"
      ]
    },
    "486": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"Hi\"",
        "0",
        "1",
        "2"
      ],
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1"
      ]
    },
    "487": {
      "op": "bytec_1 // \"Hi\"",
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1",
        "\"Hi\""
      ]
    },
    "488": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1",
        "\"Hi\"",
        "\"There\""
      ]
    },
    "489": {
      "op": "dup",
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1",
        "\"Hi\"",
        "\"There\"",
        "\"There\""
      ]
    },
    "490": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_rearrange",
      "op": "callsub test_rearrange",
      "defined_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ]
    },
    "493": {
      "op": "cover 4",
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0"
      ]
    },
    "495": {
      "op": "cover 3",
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%3#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0"
      ]
    },
    "497": {
      "op": "cover 2",
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%3#0",
        "tuple_assignment%2#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0"
      ]
    },
    "499": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%3#0",
        "tuple_assignment%2#0",
        "tuple_assignment%1#0",
        "a#0"
      ]
    },
    "500": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%3#0",
        "a#0",
        "tuple_assignment%2#0",
        "b#0"
      ]
    },
    "502": {
      "op": "cover 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "tuple_assignment%4#0",
        "b#0",
        "tuple_assignment%3#0",
        "a#0",
        "c#0"
      ]
    },
    "504": {
      "op": "cover 4",
      "stack_out": [
        "c#0",
        "tuple_assignment%4#0",
        "b#0",
        "tuple_assignment%3#0",
        "a#0"
      ]
    },
    "506": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "c#0",
        "tuple_assignment%4#0",
        "b#0",
        "a#0",
        "d#0"
      ]
    },
    "507": {
      "op": "cover 4",
      "stack_out": [
        "d#0",
        "c#0",
        "tuple_assignment%4#0",
        "b#0",
        "a#0"
      ]
    },
    "509": {
      "op": "uncover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ],
      "stack_out": [
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "e#0"
      ]
    },
    "511": {
      "op": "cover 4",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0"
      ]
    },
    "513": {
      "op": "bytec_1 // \"Hi\"",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "\"Hi\""
      ]
    },
    "514": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "b#0",
        "tmp%4#0"
      ]
    },
    "515": {
      "op": "swap",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%4#0",
        "b#0"
      ]
    },
    "516": {
      "op": "intc_0 // 0",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%4#0",
        "b#0",
        "0"
      ]
    },
    "517": {
      "op": "==",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "518": {
      "op": "&&",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%6#0"
      ]
    },
    "519": {
      "op": "assert",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0"
      ]
    },
    "520": {
      "op": "intc_2 // 2",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "2"
      ]
    },
    "521": {
      "op": "==",
      "defined_out": [
        "d#0",
        "e#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "tmp%7#0"
      ]
    },
    "522": {
      "op": "swap",
      "stack_out": [
        "e#0",
        "tmp%7#0",
        "d#0"
      ]
    },
    "523": {
      "op": "intc_1 // 1",
      "stack_out": [
        "e#0",
        "tmp%7#0",
        "d#0",
        "1"
      ]
    },
    "524": {
      "op": "==",
      "defined_out": [
        "e#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "e#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "525": {
      "op": "&&",
      "defined_out": [
        "e#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "e#0",
        "tmp%9#0"
      ]
    },
    "526": {
      "op": "assert",
      "stack_out": [
        "e#0"
      ]
    },
    "527": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "e#0",
        "\"There\""
      ]
    },
    "528": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "529": {
      "op": "assert",
      "stack_out": []
    },
    "530": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "531": {
      "op": "intc_2 // 2",
      "stack_out": [
        "1",
        "2"
      ]
    },
    "532": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_intrinsics",
      "op": "callsub test_intrinsics",
      "stack_out": []
    },
    "535": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_slicing",
      "op": "callsub test_nested_slicing"
    },
    "538": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "539": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "540": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "op": "callsub test_nested_singles",
      "stack_out": []
    },
    "543": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "544": {
      "op": "intc_0 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "545": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "op": "callsub test_nested_singles",
      "stack_out": []
    },
    "548": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_mutation",
      "op": "callsub test_nested_mutation"
    },
    "551": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "552": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "553": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "554": {
      "op": "bytec_1 // \"Hi\"",
      "stack_out": [
        "tmp%11#0",
        "\"Hi\""
      ]
    },
    "555": {
      "op": "dup",
      "stack_out": [
        "tmp%11#0",
        "\"Hi\"",
        "\"Hi\""
      ]
    },
    "556": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "557": {
      "op": "bytec_2 // \"There\"",
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "\"There\""
      ]
    },
    "558": {
      "op": "dup",
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "\"There\"",
        "\"There\""
      ]
    },
    "559": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "560": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%14#0"
      ]
    },
    "561": {
      "op": "&&",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "562": {
      "op": "assert",
      "stack_out": []
    },
    "563": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_iteration",
      "op": "callsub test_nested_iteration"
    },
    "566": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested",
      "op": "callsub test_single_evaluation_nested"
    },
    "569": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "570": {
      "retsub": true,
      "op": "retsub"
    },
    "571": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params",
      "params": {
        "args.0#0": "bytes",
        "args.1.0#0": "bytes",
        "args.1.1.0#0": "uint64"
      },
      "block": "nested_tuple_params",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "574": {
      "op": "frame_dig -3",
      "defined_out": [
        "s#0"
      ],
      "stack_out": [
        "s#0"
      ]
    },
    "576": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "b#0"
      ]
    },
    "578": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0"
      ]
    },
    "580": {
      "op": "swap",
      "stack_out": [
        "s#0",
        "u#0",
        "b#0"
      ]
    },
    "581": {
      "op": "uncover 2",
      "stack_out": [
        "u#0",
        "b#0",
        "s#0"
      ]
    },
    "583": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "s#0",
        "u#0"
      ]
    },
    "585": {
      "retsub": true,
      "op": "retsub"
    },
    "586": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple",
      "params": {
        "args.a#0": "uint64",
        "args.b#0": "bytes",
        "args.c#0": "bytes"
      },
      "block": "named_tuple",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "589": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "591": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "593": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "595": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "a#0"
      ]
    },
    "597": {
      "op": "uncover 2",
      "stack_out": [
        "c#0",
        "a#0",
        "b#0"
      ]
    },
    "599": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "601": {
      "retsub": true,
      "op": "retsub"
    },
    "602": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params",
      "params": {
        "args.foo#0": "uint64",
        "args.foo_arc#0": "bytes",
        "args.child.a#0": "uint64",
        "args.child.b#0": "bytes",
        "args.child.c#0": "bytes"
      },
      "block": "nested_named_tuple_params",
      "stack_in": [],
      "op": "proto 5 5"
    },
    "605": {
      "op": "frame_dig -5",
      "defined_out": [
        "foo#0"
      ],
      "stack_out": [
        "foo#0"
      ]
    },
    "607": {
      "op": "frame_dig -4",
      "defined_out": [
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0"
      ]
    },
    "609": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0"
      ]
    },
    "611": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b#0",
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0"
      ]
    },
    "613": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "615": {
      "op": "uncover 4",
      "stack_out": [
        "foo_arc#0",
        "a#0",
        "b#0",
        "c#0",
        "foo#0"
      ]
    },
    "617": {
      "op": "uncover 4",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "foo#0",
        "foo_arc#0"
      ]
    },
    "619": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "c#0",
        "foo#0",
        "foo_arc#0",
        "a#0"
      ]
    },
    "621": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0"
      ]
    },
    "623": {
      "op": "uncover 4",
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "625": {
      "retsub": true,
      "op": "retsub"
    },
    "626": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.build_nested",
      "params": {},
      "block": "build_nested",
      "stack_in": [],
      "op": "proto 0 3"
    },
    "629": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "630": {
      "op": "bytec_3 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"build_nested_call_count\""
      ]
    },
    "631": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "632": {
      "error": "check self.build_nested_call_count exists",
      "op": "assert // check self.build_nested_call_count exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "633": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "634": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "635": {
      "op": "bytec_3 // \"build_nested_call_count\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"build_nested_call_count\""
      ]
    },
    "636": {
      "op": "swap",
      "stack_out": [
        "\"build_nested_call_count\"",
        "new_state_value%0#0"
      ]
    },
    "637": {
      "op": "app_global_put",
      "stack_out": []
    },
    "638": {
      "op": "bytec 5 // \"hi\"",
      "defined_out": [
        "\"hi\""
      ],
      "stack_out": [
        "\"hi\""
      ]
    },
    "640": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"hi\"",
        "1"
      ]
    },
    "641": {
      "op": "pushbytes 0x686d6d6d",
      "defined_out": [
        "\"hi\"",
        "0x686d6d6d",
        "1"
      ],
      "stack_out": [
        "\"hi\"",
        "1",
        "0x686d6d6d"
      ]
    },
    "647": {
      "retsub": true,
      "op": "retsub"
    },
    "648": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested",
      "params": {},
      "block": "test_single_evaluation_nested",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "651": {
      "op": "bytec_3 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\""
      ],
      "stack_out": [
        "\"build_nested_call_count\""
      ]
    },
    "652": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "\"build_nested_call_count\"",
        "0"
      ]
    },
    "653": {
      "op": "app_global_put",
      "stack_out": []
    },
    "654": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.build_nested",
      "op": "callsub build_nested",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ]
    },
    "657": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "659": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "660": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "661": {
      "op": "cover 3",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "663": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0 (copy)",
        "awst_tmp%0#0"
      ]
    },
    "664": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "tmp%0#0"
      ]
    },
    "665": {
      "op": "dig 1",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "awst_tmp%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "tmp%0#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "667": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%0#0",
        "awst_tmp%1#0 (copy)",
        "awst_tmp%1#0"
      ]
    },
    "669": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "670": {
      "op": "&&",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%2#0"
      ]
    },
    "671": {
      "op": "dig 1",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "673": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "awst_tmp%2#0"
      ]
    },
    "675": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "676": {
      "op": "||",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "677": {
      "op": "bz test_single_evaluation_nested_ternary_false@2",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "680": {
      "block": "test_single_evaluation_nested_ternary_true@1",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0"
      ]
    },
    "682": {
      "block": "test_single_evaluation_nested_ternary_merge@3",
      "stack_in": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0"
      ],
      "op": "bytec 5 // \"hi\"",
      "defined_out": [
        "\"hi\"",
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0",
        "\"hi\""
      ]
    },
    "684": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "685": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "686": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0"
      ]
    },
    "687": {
      "op": "bytec_3 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0",
        "\"build_nested_call_count\""
      ]
    },
    "688": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "689": {
      "error": "check self.build_nested_call_count exists",
      "op": "assert // check self.build_nested_call_count exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "690": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "691": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "692": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "693": {
      "retsub": true,
      "op": "retsub"
    },
    "694": {
      "block": "test_single_evaluation_nested_ternary_false@2",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.build_nested",
      "op": "callsub build_nested",
      "defined_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.0.1#1",
        "ternary_result%0.1#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0",
        "ternary_result%0.0.1#1",
        "ternary_result%0.1#1"
      ]
    },
    "697": {
      "op": "popn 2",
      "defined_out": [
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0"
      ]
    },
    "699": {
      "op": "b test_single_evaluation_nested_ternary_merge@3"
    },
    "702": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "705": {
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "707": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "708": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "709": {
      "op": "bz approval_program_bare_routing@9",
      "stack_out": []
    },
    "712": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "715": {
      "op": "pushbytes 0x9e5a3ba7 // method \"run_tests()bool\"",
      "defined_out": [
        "Method(run_tests()bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(run_tests()bool)"
      ]
    },
    "721": {
      "op": "pushbytes 0xcea0521b // method \"nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))\"",
      "defined_out": [
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))"
      ]
    },
    "727": {
      "op": "pushbytes 0x373f5b24 // method \"named_tuple((uint64,byte[],string))(uint64,byte[],string)\"",
      "defined_out": [
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))"
      ]
    },
    "733": {
      "op": "pushbytes 0xec593096 // method \"nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))\"",
      "defined_out": [
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))"
      ]
    },
    "739": {
      "op": "uncover 4",
      "stack_out": [
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "tmp%2#0"
      ]
    },
    "741": {
      "op": "match approval_program_run_tests_route@3 approval_program_nested_tuple_params_route@4 approval_program_named_tuple_route@5 approval_program_nested_named_tuple_params_route@6",
      "stack_out": []
    },
    "751": {
      "block": "approval_program_after_if_else@15",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "752": {
      "block": "approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@16",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "753": {
      "block": "approval_program_nested_named_tuple_params_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "755": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "NoOp"
      ]
    },
    "756": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "757": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "758": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "760": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "0"
      ]
    },
    "761": {
      "op": "!=",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "762": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "763": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "766": {
      "op": "dup",
      "defined_out": [
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ]
    },
    "767": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "0"
      ]
    },
    "768": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "0",
        "8"
      ]
    },
    "769": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%4#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "item0%4#0"
      ]
    },
    "770": {
      "op": "btoi",
      "defined_out": [
        "item0%4%0#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "item0%4%0#0"
      ]
    },
    "771": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "tmp%24#0"
      ]
    },
    "772": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ]
    },
    "773": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%4%0#0",
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "8"
      ]
    },
    "774": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "8",
        "8"
      ]
    },
    "775": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%4%0#0",
        "item1%3#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "tmp%24#0",
        "item1%3#0"
      ]
    },
    "776": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "tmp%24#0"
      ]
    },
    "777": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ]
    },
    "778": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%4%0#0",
        "item1%3#0",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "16"
      ]
    },
    "780": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_start_offset%5#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "tmp%24#0",
        "item_start_offset%5#0"
      ]
    },
    "781": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_start_offset%5#0",
        "tmp%24#0"
      ]
    },
    "782": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_start_offset%5#0",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ]
    },
    "783": {
      "op": "len",
      "defined_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_start_offset%5#0",
        "tmp%24#0",
        "item_end_offset%5#0"
      ]
    },
    "784": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0",
        "tmp%24#0"
      ]
    },
    "785": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item_end_offset%5#0",
        "tmp%24#0",
        "item_start_offset%5#0"
      ]
    },
    "787": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "tmp%24#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "789": {
      "op": "substring3",
      "defined_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item2%1#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item2%1#0"
      ]
    },
    "790": {
      "op": "dup",
      "defined_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item2%1#0",
        "item2%1#0 (copy)"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item2%1#0",
        "item2%1#0 (copy)"
      ]
    },
    "791": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item2%1#0",
        "item2%1#0 (copy)",
        "0"
      ]
    },
    "792": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item2%1#0",
        "item2%1#0 (copy)",
        "0",
        "8"
      ]
    },
    "793": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%4%0#0",
        "item0%5#0",
        "item1%3#0",
        "item2%1#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item2%1#0",
        "item0%5#0"
      ]
    },
    "794": {
      "op": "btoi",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item2%1#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item2%1#0",
        "item0%5%0#0"
      ]
    },
    "795": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item2%1#0"
      ]
    },
    "796": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item2%1#0",
        "item2%1#0 (copy)"
      ]
    },
    "797": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item2%1#0",
        "item2%1#0 (copy)",
        "8"
      ]
    },
    "798": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item2%1#0",
        "item_start_offset%6#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item2%1#0",
        "item_start_offset%6#0"
      ]
    },
    "799": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item_start_offset%6#0",
        "item2%1#0"
      ]
    },
    "800": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item_start_offset%6#0",
        "item2%1#0",
        "item2%1#0 (copy)"
      ]
    },
    "801": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item2%1#0",
        "item2%1#0 (copy)",
        "item_start_offset%6#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item_start_offset%6#0",
        "item2%1#0",
        "item2%1#0 (copy)",
        "10"
      ]
    },
    "803": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item2%1#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item_start_offset%6#0",
        "item2%1#0",
        "item_end_offset%6#0"
      ]
    },
    "804": {
      "op": "dig 1",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item_start_offset%6#0",
        "item2%1#0",
        "item_end_offset%6#0",
        "item2%1#0 (copy)"
      ]
    },
    "806": {
      "op": "uncover 3",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item2%1#0",
        "item_end_offset%6#0",
        "item2%1#0 (copy)",
        "item_start_offset%6#0"
      ]
    },
    "808": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item2%1#0",
        "item2%1#0 (copy)",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "810": {
      "op": "substring3",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%4#0",
        "item2%1#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item2%1#0",
        "item1%4#0"
      ]
    },
    "811": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%4%0#0",
        "item2%1#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item2%1#0",
        "item1%4%0#0"
      ]
    },
    "814": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item2%1#0"
      ]
    },
    "815": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item2%1#0",
        "item2%1#0 (copy)"
      ]
    },
    "816": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item2%1#0",
        "item2%1#0 (copy)",
        "10"
      ]
    },
    "818": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%4%0#0",
        "item2%1#0",
        "item_start_offset%7#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item2%1#0",
        "item_start_offset%7#0"
      ]
    },
    "819": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item_start_offset%7#0",
        "item2%1#0"
      ]
    },
    "820": {
      "op": "dup",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item_start_offset%7#0",
        "item2%1#0",
        "item2%1#0 (copy)"
      ]
    },
    "821": {
      "op": "len",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%4%0#0",
        "item2%1#0",
        "item_end_offset%7#0",
        "item_start_offset%7#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item_start_offset%7#0",
        "item2%1#0",
        "item_end_offset%7#0"
      ]
    },
    "822": {
      "op": "swap",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "item2%1#0"
      ]
    },
    "823": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item_end_offset%7#0",
        "item2%1#0",
        "item_start_offset%7#0"
      ]
    },
    "825": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item2%1#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0"
      ]
    },
    "827": {
      "op": "substring3",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%4%0#0",
        "item2%2#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item2%2#0"
      ]
    },
    "828": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%4%0#0",
        "item0%5%0#0",
        "item1%3#0",
        "item1%4%0#0",
        "item2%2%0#0"
      ],
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item2%2%0#0"
      ]
    },
    "831": {
      "op": "uncover 4",
      "stack_out": [
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item2%2%0#0",
        "item0%4%0#0"
      ]
    },
    "833": {
      "op": "uncover 4",
      "stack_out": [
        "item0%5%0#0",
        "item1%4%0#0",
        "item2%2%0#0",
        "item0%4%0#0",
        "item1%3#0"
      ]
    },
    "835": {
      "op": "uncover 4",
      "stack_out": [
        "item1%4%0#0",
        "item2%2%0#0",
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0"
      ]
    },
    "837": {
      "op": "uncover 4",
      "stack_out": [
        "item2%2%0#0",
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0"
      ]
    },
    "839": {
      "op": "uncover 4",
      "stack_out": [
        "item0%4%0#0",
        "item1%3#0",
        "item0%5%0#0",
        "item1%4%0#0",
        "item2%2%0#0"
      ]
    },
    "841": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params",
      "op": "callsub nested_named_tuple_params",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0"
      ]
    },
    "844": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ]
    },
    "846": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ]
    },
    "848": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "850": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0"
      ]
    },
    "852": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "val_as_bytes%2#0"
      ]
    },
    "853": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0"
      ]
    },
    "855": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%7#0",
        "elements_to_encode%9#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "val_as_bytes%3#0"
      ]
    },
    "856": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0"
      ]
    },
    "858": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%7#0",
        "elements_to_encode%9#0",
        "elements_to_encode%9#0 (copy)",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%9#0 (copy)"
      ]
    },
    "859": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%7#0",
        "elements_to_encode%9#0",
        "length%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "length%4#0"
      ]
    },
    "860": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%7#0",
        "elements_to_encode%9#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "as_bytes%9#0"
      ]
    },
    "861": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%7#0",
        "elements_to_encode%9#0",
        "length_uint16%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "length_uint16%4#0"
      ]
    },
    "864": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "elements_to_encode%10#0",
        "length_uint16%4#0",
        "elements_to_encode%9#0"
      ]
    },
    "865": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%7#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "elements_to_encode%10#0",
        "encoded_value%4#0"
      ]
    },
    "866": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "elements_to_encode%10#0"
      ]
    },
    "868": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%10#0 (copy)",
        "elements_to_encode%7#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "elements_to_encode%10#0",
        "elements_to_encode%10#0 (copy)"
      ]
    },
    "869": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%7#0",
        "encoded_value%4#0",
        "length%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "elements_to_encode%10#0",
        "length%5#0"
      ]
    },
    "870": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "elements_to_encode%10#0",
        "elements_to_encode%7#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "elements_to_encode%10#0",
        "as_bytes%10#0"
      ]
    },
    "871": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%7#0",
        "encoded_value%4#0",
        "length_uint16%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "elements_to_encode%10#0",
        "length_uint16%5#0"
      ]
    },
    "874": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "length_uint16%5#0",
        "elements_to_encode%10#0"
      ]
    },
    "875": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "encoded_value%5#0"
      ]
    },
    "876": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "878": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "elements_to_encode%7#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "0x"
      ]
    },
    "879": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "0x",
        "val_as_bytes%3#0"
      ]
    },
    "880": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%16#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "881": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%16#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%16#0",
        "12"
      ]
    },
    "883": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%16#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%16#0",
        "as_bytes%11#0"
      ]
    },
    "884": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%16#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "offset_as_uint16%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%16#0",
        "offset_as_uint16%5#0"
      ]
    },
    "887": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%17#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "888": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%17#0",
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)",
        "encoded_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%17#0",
        "encoded_value%4#0 (copy)"
      ]
    },
    "890": {
      "op": "len",
      "defined_out": [
        "data_length%5#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%17#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%17#0",
        "data_length%5#0"
      ]
    },
    "891": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%17#0",
        "data_length%5#0",
        "12"
      ]
    },
    "893": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%9#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%17#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%17#0",
        "current_tail_offset%9#0"
      ]
    },
    "894": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%17#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%17#0",
        "as_bytes%12#0"
      ]
    },
    "895": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%17#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "offset_as_uint16%6#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%17#0",
        "offset_as_uint16%6#0"
      ]
    },
    "898": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%18#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "899": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%18#0",
        "encoded_value%4#0"
      ]
    },
    "900": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%19#0",
        "encoded_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "901": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%19#0",
        "encoded_value%5#0"
      ]
    },
    "902": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "903": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%20#0",
        "0x"
      ]
    },
    "904": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%20#0",
        "0x",
        "val_as_bytes%2#0"
      ]
    },
    "906": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%22#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%22#0"
      ]
    },
    "907": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%22#0",
        "elements_to_encode%7#0"
      ]
    },
    "909": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%23#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%23#0"
      ]
    },
    "910": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%23#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%23#0",
        "18"
      ]
    },
    "912": {
      "op": "itob",
      "defined_out": [
        "as_bytes%13#0",
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%23#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%23#0",
        "as_bytes%13#0"
      ]
    },
    "913": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%23#0",
        "offset_as_uint16%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%23#0",
        "offset_as_uint16%7#0"
      ]
    },
    "916": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%24#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%24#0"
      ]
    },
    "917": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%24#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "918": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%25#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%25#0"
      ]
    },
    "919": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%25#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%25#0",
        "0x151f7c75"
      ]
    },
    "921": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%25#0"
      ]
    },
    "922": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "923": {
      "op": "log",
      "stack_out": []
    },
    "924": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "925": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@16"
    },
    "928": {
      "block": "approval_program_named_tuple_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "930": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "NoOp"
      ]
    },
    "931": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "932": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "933": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "935": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0"
      ]
    },
    "936": {
      "op": "!=",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "937": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "938": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "941": {
      "op": "dup",
      "defined_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "942": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "0"
      ]
    },
    "943": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "0",
        "8"
      ]
    },
    "944": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "item0%3#0"
      ]
    },
    "945": {
      "op": "btoi",
      "defined_out": [
        "item0%3%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "item0%3%0#0"
      ]
    },
    "946": {
      "op": "swap",
      "stack_out": [
        "item0%3%0#0",
        "tmp%18#0"
      ]
    },
    "947": {
      "op": "dup",
      "stack_out": [
        "item0%3%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "948": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%3%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "8"
      ]
    },
    "949": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%3%0#0",
        "item_start_offset%3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "tmp%18#0",
        "item_start_offset%3#0"
      ]
    },
    "950": {
      "op": "swap",
      "stack_out": [
        "item0%3%0#0",
        "item_start_offset%3#0",
        "tmp%18#0"
      ]
    },
    "951": {
      "op": "dup",
      "stack_out": [
        "item0%3%0#0",
        "item_start_offset%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "952": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "item0%3%0#0",
        "item_start_offset%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item_start_offset%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "10"
      ]
    },
    "954": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%3%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item_start_offset%3#0",
        "tmp%18#0",
        "item_end_offset%3#0"
      ]
    },
    "955": {
      "op": "dig 1",
      "stack_out": [
        "item0%3%0#0",
        "item_start_offset%3#0",
        "tmp%18#0",
        "item_end_offset%3#0",
        "tmp%18#0 (copy)"
      ]
    },
    "957": {
      "op": "uncover 3",
      "stack_out": [
        "item0%3%0#0",
        "tmp%18#0",
        "item_end_offset%3#0",
        "tmp%18#0 (copy)",
        "item_start_offset%3#0"
      ]
    },
    "959": {
      "op": "uncover 2",
      "stack_out": [
        "item0%3%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "961": {
      "op": "substring3",
      "defined_out": [
        "item0%3%0#0",
        "item1%2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "tmp%18#0",
        "item1%2#0"
      ]
    },
    "962": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "tmp%18#0",
        "item1%2%0#0"
      ]
    },
    "965": {
      "op": "swap",
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "tmp%18#0"
      ]
    },
    "966": {
      "op": "dup",
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "967": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "10"
      ]
    },
    "969": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "item_start_offset%4#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "tmp%18#0",
        "item_start_offset%4#0"
      ]
    },
    "970": {
      "op": "swap",
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "item_start_offset%4#0",
        "tmp%18#0"
      ]
    },
    "971": {
      "op": "dup",
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "item_start_offset%4#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "972": {
      "op": "len",
      "defined_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "item_start_offset%4#0",
        "tmp%18#0",
        "item_end_offset%4#0"
      ]
    },
    "973": {
      "op": "swap",
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "tmp%18#0"
      ]
    },
    "974": {
      "op": "uncover 2",
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "item_end_offset%4#0",
        "tmp%18#0",
        "item_start_offset%4#0"
      ]
    },
    "976": {
      "op": "uncover 2",
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "tmp%18#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "978": {
      "op": "substring3",
      "defined_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "item2%0#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "item2%0#0"
      ]
    },
    "979": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "item2%0%0#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "item2%0%0#0"
      ]
    },
    "982": {
      "op": "uncover 2",
      "stack_out": [
        "item1%2%0#0",
        "item2%0%0#0",
        "item0%3%0#0"
      ]
    },
    "984": {
      "op": "uncover 2",
      "stack_out": [
        "item2%0%0#0",
        "item0%3%0#0",
        "item1%2%0#0"
      ]
    },
    "986": {
      "op": "uncover 2",
      "stack_out": [
        "item0%3%0#0",
        "item1%2%0#0",
        "item2%0%0#0"
      ]
    },
    "988": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple",
      "op": "callsub named_tuple",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "991": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "993": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0"
      ]
    },
    "994": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0"
      ]
    },
    "995": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%1#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0"
      ]
    },
    "997": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "elements_to_encode%5#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "998": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "length%2#0"
      ]
    },
    "999": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "as_bytes%5#0"
      ]
    },
    "1000": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "length_uint16%2#0"
      ]
    },
    "1003": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%1#0",
        "elements_to_encode%5#0",
        "length_uint16%2#0",
        "elements_to_encode%4#0"
      ]
    },
    "1004": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "elements_to_encode%5#0",
        "encoded_value%2#0"
      ]
    },
    "1005": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "elements_to_encode%5#0"
      ]
    },
    "1007": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%5#0 (copy)",
        "encoded_value%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "elements_to_encode%5#0",
        "elements_to_encode%5#0 (copy)"
      ]
    },
    "1008": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_value%2#0",
        "length%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "elements_to_encode%5#0",
        "length%3#0"
      ]
    },
    "1009": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "elements_to_encode%5#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "elements_to_encode%5#0",
        "as_bytes%6#0"
      ]
    },
    "1010": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_value%2#0",
        "length_uint16%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "elements_to_encode%5#0",
        "length_uint16%3#0"
      ]
    },
    "1013": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "length_uint16%3#0",
        "elements_to_encode%5#0"
      ]
    },
    "1014": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "encoded_value%3#0"
      ]
    },
    "1015": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "1017": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "0x"
      ]
    },
    "1018": {
      "op": "swap",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "0x",
        "val_as_bytes%1#0"
      ]
    },
    "1019": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1020": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "encoded_tuple_buffer%10#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%10#0",
        "12"
      ]
    },
    "1022": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "encoded_tuple_buffer%10#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%10#0",
        "as_bytes%7#0"
      ]
    },
    "1023": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0"
      ]
    },
    "1026": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "1027": {
      "op": "dig 1",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%2#0 (copy)"
      ]
    },
    "1029": {
      "op": "len",
      "defined_out": [
        "data_length%3#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%11#0",
        "data_length%3#0"
      ]
    },
    "1030": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%11#0",
        "data_length%3#0",
        "12"
      ]
    },
    "1032": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%6#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%11#0",
        "current_tail_offset%6#0"
      ]
    },
    "1033": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%11#0",
        "as_bytes%8#0"
      ]
    },
    "1034": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%4#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%11#0",
        "offset_as_uint16%4#0"
      ]
    },
    "1037": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "1038": {
      "op": "swap",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%12#0",
        "encoded_value%2#0"
      ]
    },
    "1039": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "1040": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_value%3#0"
      ]
    },
    "1041": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%14#0"
      ]
    },
    "1042": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%14#0",
        "0x151f7c75"
      ]
    },
    "1044": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "1045": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1046": {
      "op": "log",
      "stack_out": []
    },
    "1047": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1048": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@16"
    },
    "1051": {
      "block": "approval_program_nested_tuple_params_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1053": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "1054": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1055": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1056": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1058": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "1059": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1060": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1061": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1064": {
      "op": "dup",
      "defined_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1065": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "0"
      ]
    },
    "1066": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "item_start_offset%0#0"
      ]
    },
    "1067": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%12#0"
      ]
    },
    "1068": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1069": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "2"
      ]
    },
    "1070": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%12#0",
        "item_end_offset%0#0"
      ]
    },
    "1071": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%12#0",
        "item_end_offset%0#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1073": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%12#0",
        "item_end_offset%0#0",
        "tmp%12#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "1075": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1077": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "item0%0#0"
      ]
    },
    "1078": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "item0%0%0#0"
      ]
    },
    "1081": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "tmp%12#0"
      ]
    },
    "1082": {
      "op": "dup",
      "stack_out": [
        "item0%0%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1083": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%0%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "2"
      ]
    },
    "1084": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0%0#0",
        "item_start_offset%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "tmp%12#0",
        "item_start_offset%1#0"
      ]
    },
    "1085": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "item_start_offset%1#0",
        "tmp%12#0"
      ]
    },
    "1086": {
      "op": "dup",
      "stack_out": [
        "item0%0%0#0",
        "item_start_offset%1#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1087": {
      "op": "len",
      "defined_out": [
        "item0%0%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item_start_offset%1#0",
        "tmp%12#0",
        "item_end_offset%1#0"
      ]
    },
    "1088": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "tmp%12#0"
      ]
    },
    "1089": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0%0#0",
        "item_end_offset%1#0",
        "tmp%12#0",
        "item_start_offset%1#0"
      ]
    },
    "1091": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0%0#0",
        "tmp%12#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "1093": {
      "op": "substring3",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0"
      ]
    },
    "1094": {
      "op": "dup",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item1%0#0 (copy)"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item1%0#0 (copy)"
      ]
    },
    "1095": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item1%0#0 (copy)",
        "0"
      ]
    },
    "1096": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item_start_offset%2#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item_start_offset%2#0"
      ]
    },
    "1097": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "item_start_offset%2#0",
        "item1%0#0"
      ]
    },
    "1098": {
      "op": "dup",
      "stack_out": [
        "item0%0%0#0",
        "item_start_offset%2#0",
        "item1%0#0",
        "item1%0#0 (copy)"
      ]
    },
    "1099": {
      "op": "len",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item_start_offset%2#0",
        "item1%0#0",
        "item_end_offset%2#0"
      ]
    },
    "1100": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "item1%0#0"
      ]
    },
    "1101": {
      "op": "dup",
      "stack_out": [
        "item0%0%0#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "item1%0#0",
        "item1%0#0 (copy)"
      ]
    },
    "1102": {
      "op": "uncover 3",
      "stack_out": [
        "item0%0%0#0",
        "item_end_offset%2#0",
        "item1%0#0",
        "item1%0#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "1104": {
      "op": "uncover 3",
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item1%0#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "1106": {
      "op": "substring3",
      "defined_out": [
        "item0%0%0#0",
        "item0%1#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item0%1#0"
      ]
    },
    "1107": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item0%1%0#0"
      ]
    },
    "1110": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item1%0#0"
      ]
    },
    "1111": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item1%0#0",
        "2"
      ]
    },
    "1112": {
      "op": "intc_3 // 8",
      "defined_out": [
        "2",
        "8",
        "item0%0%0#0",
        "item0%1%0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item1%0#0",
        "2",
        "8"
      ]
    },
    "1113": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item1%1#0"
      ]
    },
    "1114": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item1%1#0",
        "0"
      ]
    },
    "1115": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item1%1#0",
        "0",
        "8"
      ]
    },
    "1116": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item0%2#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item0%2#0"
      ]
    },
    "1117": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item0%2%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item0%2%0#0"
      ]
    },
    "1118": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item0%0%0#0"
      ]
    },
    "1120": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2%0#0",
        "item0%0%0#0",
        "item0%1%0#0"
      ]
    },
    "1122": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0%0#0",
        "item0%1%0#0",
        "item0%2%0#0"
      ]
    },
    "1124": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params",
      "op": "callsub nested_tuple_params",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "1127": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "1129": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "1130": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)"
      ]
    },
    "1131": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "length%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "length%0#0"
      ]
    },
    "1132": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "1133": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "1136": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "length_uint16%0#0",
        "elements_to_encode%0#0"
      ]
    },
    "1137": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "encoded_value%0#0"
      ]
    },
    "1138": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0"
      ]
    },
    "1140": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)",
        "elements_to_encode%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)"
      ]
    },
    "1141": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "encoded_value%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "length%1#0"
      ]
    },
    "1142": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "1143": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "1146": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "elements_to_encode%2#0",
        "length_uint16%1#0",
        "elements_to_encode%1#0"
      ]
    },
    "1147": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "elements_to_encode%2#0",
        "encoded_value%1#0"
      ]
    },
    "1148": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "1149": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1150": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "10"
      ]
    },
    "1152": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "as_bytes%2#0"
      ]
    },
    "1153": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "1156": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "1157": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "1158": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "1159": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1160": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1161": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%1#0"
      ]
    },
    "1162": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1163": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "4"
      ]
    },
    "1165": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "as_bytes%3#0"
      ]
    },
    "1166": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "1169": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%1#0",
        "0x"
      ]
    },
    "1170": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "0x",
        "offset_as_uint16%1#0"
      ]
    },
    "1171": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1172": {
      "op": "dig 2",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1174": {
      "op": "len",
      "defined_out": [
        "data_length%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "data_length%1#0"
      ]
    },
    "1175": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "data_length%1#0",
        "4"
      ]
    },
    "1177": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%3#0"
      ]
    },
    "1178": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "as_bytes%4#0"
      ]
    },
    "1179": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%2#0"
      ]
    },
    "1182": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1183": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ]
    },
    "1185": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1186": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1187": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1188": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "0x151f7c75"
      ]
    },
    "1190": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1191": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1192": {
      "op": "log",
      "stack_out": []
    },
    "1193": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1194": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@16"
    },
    "1197": {
      "block": "approval_program_run_tests_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1199": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "1200": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1201": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1202": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1204": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1205": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1206": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1207": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests",
      "op": "callsub run_tests",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1210": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "1213": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "1214": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "1216": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "1217": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "1219": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "1220": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1221": {
      "op": "log",
      "stack_out": []
    },
    "1222": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1223": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@16"
    },
    "1226": {
      "block": "approval_program_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1228": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0"
      ]
    },
    "1229": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%26#0"
      ]
    },
    "1230": {
      "op": "match approval_program___algopy_default_create@10",
      "stack_out": []
    },
    "1234": {
      "block": "approval_program_switch_case_next@14",
      "stack_in": [],
      "op": "b approval_program_after_if_else@15"
    },
    "1237": {
      "block": "approval_program___algopy_default_create@10",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1239": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0"
      ]
    },
    "1240": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1241": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1242": {
      "block": "approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create@12",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1243": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@16"
    }
  }
}