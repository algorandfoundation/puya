{
  "version": 3,
  "sources": [
    "../nested_tuples.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoLQ;;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;AAAP;AAGJ;;;AAEQ;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;;AAAA;;AAAA;AAGJ;;;AAEQ;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;;AAAA;AAGJ;;;AAII;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAEA;;AAAA;;AAAA;;AAAA;;AAAA;AAGJ;;;AAEI;;AAAA;;AACA;AAAA;AAGJ;;;AAEqB;;AAAA;;AAAA;AAAjB;AAAM;AACU;AAAT;AAAP;AADsC;;AAErB;AAAV;AAAP;AACO;AAAU;AAAV;AAAa;;AAAA;;AAAA;AAAb;;AAAA;AAAA;AAAP;AACO;AAAc;AAAd;AAAP;AACqB;;AAAA;;AAAA;AAAd;;AAAA;AAAP;AAEY;AAAL;AAAP;AACY;;AAAA;;AAAA;AAAL;AAAP;;AAcQ;;AAMQ;AAAT;AAAP;AAbI;AAckB;AAAf;AALH;;AAKqB;AAAlB;AAAA;AAAP;AAVY;;;AAWO;AAAZ;AAVK;;;AAUY;AAAjB;AAAA;AAAP;;AAGJ;;;AAGS;AADL;;AAAA;AAGK;AAHL;AACK;AAIa;AAAX;AAAP;AAJK;AAKW;AAAT;AAAP;AACO;AAAW;AAAX;AAAP;AACO;AAAA;;AAAA;AAAP;AALK;AAMa;AAAX;AAAP;AANK;AAOW;AAAT;AAAP;AAEJ;;AAAA;;;AAEa;;AADL;;AAEK;;AAFL;;AAGK;;AAHL;;AAKe;AAAA;;AAAA;;AAAA;AAAZ;;AAAA;AAAP;AACA;;AACe;AAAA;;AAAA;;AAAA;AAAR;AAAP;AACO;;AAAA;;AAAA;AAAP;AAEA;;AAAA;AACA;;AAAA;AACc;AAAA;;AAAA;;AAAA;AAAP;AAAP;AACmB;AAAA;;AAAA;;AAAA;AAAZ;AAAP;;AAOQ;AACI;;AADJ;AAAA;;AAAA;AAAA;AAKR;;;AAAe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACO;AAAA;AAAkB;AAAlB;AAAP;;AAGJ;;;;;AAIY;;AAFJ;AACA;AAIA;;AACS;AAAT;;AAAA;AAAA;;AAFR;;AAAA;;;;;;;;;;;AAJQ;AAQA;;AAPA;AAQS;;AAAA;AAAT;;AAAA;AAAA;;AADR;;AAAA;;;;;;;;AAGW;;AAAS;AAAT;AAAc;;AAAd;AAAP;;;;;;AAVI;AAOA;;AAPA;;;;;;;AADA;AAQA;;AARA;;;;;;;AACA;AAOA;;AARA;;;;;;;;AACA;AAGA;;AAHA;;;;;;;AADA;AAIA;;AAJA;;;;;;;AACA;AAGA;;AAJA;;;;AAnPA;;AAA+B;AAA/B;AAGQ;;;;AAAA;AAAA;AAEE;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAFA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAHV;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AASR;;;AAC0B;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACluC;;AAAQ;AAAR;AADN;;AAAA;AAAA;;AAAA;AAAA;AAChB;AAAA;AAAA;AAAA;AAAA;AAAT;;AAAA;AAAA;AADyB;;AAAA;AACM;;AAAA;AAAA;AAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAC8B;;AAAA;AAAA;;AAAA;AAAA;AACf;AAAA;AAAA;AAAA;AAAA;AAAO;;AAAP;AAAA;AAAA;AAAA;;AAAP;AAER;;;AACkC;;AAAA;AAAA;;AAAA;AAAA;AACV;AAAA;AAAA;AAAA;AAAA;AAAT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;;AACwC;;AAAA;AAAA;;AAAA;AAAA;AACK;AAAA;AAAA;AAAA;AAAA;AAAf;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAtB;;AAAA;AAAA;;AACA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AADsB;AAAA;;AAAA;;;;AAG9B;;;;AAC6C;;AAAA;AAAA;;AAAA;AAAA;AACjB;AAAA;AAAA;AAAA;AAAA;AAAb;;AAAA;AAAA;AAAqC;;AAAW;AAAtB;;;AAAA;;AAAA;AAA1B;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP;;AAAA;AAAA;;AAAA;;AAAA;AAAiC;;AAAA;;AAAA;;;;;AAEzC;;;;AAEQ;;AAAkC;;;AACjB;;;AAA+C;;AAAW;AAAtB;;;AAAA;;AAAA;;AAA9C;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAP;;AAAA;AAAA;;AAAA;;AAAA;AAAqD;;AAAA;;AAAA;;;;;AAE7D;;;AAGgB;AAAkB;;AAAlB;AAAA;;AAAA;AAAA;AAOR;;;AAAc;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;;;AAAe;AAAA;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACS;AAAjB;AAAiB;AAAA;;AAAO;;AAAP;AAAjB;;;AACmB;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AADK;;AAAA;AAAA;AAAA;;;;;AAKT;;AAZU;AACA;AACA;AAUV;;AAAA;;AAAA;AAIO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACP;;;AAAY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACW;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIK;AAAc;AACZ;;;AAAA;AAAiB;AAAjB;AAAA;AAAkC;AAAlC;AAAA;AAAP;AADmB;AAOF;AAAV;AAAP;AAPK;AAGA;AAAW;AADX;AAFA;AAAc;AAAA;AASI;;;AAAA;;AAAA;;AAAA;;AAAA;AAAvB;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AACkB;AAAX;AAAA;AAAyB;AAAzB;AAAA;AAAP;AACkB;AAAX;AAAA;AAAsB;AAAtB;AAAA;AAAP;AACY;AAAL;AAAP;AAEgB;AAAW;AAA3B;;;AACA;;;AACoB;AAAoB;AAAxC;;;AACoB;AAAoB;AAAxC;;;AACA;;;AAhBK;AAAA;AAkBE;AApBF;AAAA;AAoBE;AApBY;AAAA;AAoBZ;AAAA;AAAA;AAAP;AAEA;;;AAEA;;;AACO;AAAP;AAER;;;AAIQ;;AAAA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAER;;;AAEQ;;AAAA;;AAAA;;AACA;;AAAA;;AAAA;;AAAA;AAER;;;AAEQ;;AAAA;;AAAA;;AAAA;;AAAA;;AACA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAIA;AAAA;;AAAA;AAAA;AAAgC;AAAhC;AAAA;;AAAA;AAAA;AACQ;;AAAc;AAAY;;;;;;AAAlC;AAER;;;AAEQ;;AAA+B;AAA/B;AACS;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AACc;;AAAhB;AAAP;AACO;AAAA;;AAAA;AAAA;AAAgC;AAAhC;AAAP;;AAFgC;;;AAAA;;;;;AA9HxC;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAiHK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjHL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAiHK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5GL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AA4GK;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArGL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqGK;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA7BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAnBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1CL;;;AAAA;;;AA0CK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtCL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjCL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA7BL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAzBL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBK;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArBL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAbL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAaK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAbL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 1 2"
    },
    "7": {
      "op": "bytecblock 0x 0x151f7c75 \"Hi\" \"There\" \"build_nested_call_count\" \"box\" \"twm\" 0x0000000000000001 0x00 0x0000000000000000 0x0001 \"pwl\" \"hi\""
    },
    "86": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "88": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "91": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.__init__",
      "op": "callsub __init__"
    },
    "94": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "97": {
      "op": "return",
      "stack_out": []
    },
    "98": {
      "subroutine": "test_cases.tuple_support.nested_tuples.get_sender_inefficiently",
      "params": {},
      "block": "get_sender_inefficiently_block@0",
      "stack_in": [],
      "op": "pushbytes \"Order is important\"",
      "defined_out": [
        "\"Order is important\""
      ],
      "stack_out": [
        "\"Order is important\""
      ]
    },
    "118": {
      "op": "log",
      "stack_out": []
    },
    "119": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "121": {
      "retsub": true,
      "op": "retsub"
    },
    "122": {
      "subroutine": "test_cases.tuple_support.nested_tuples.simple_tup",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "simple_tup",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "125": {
      "block": "simple_tup_block@0",
      "stack_in": [],
      "op": "pushbytes \"I'm just a simple tup\"",
      "defined_out": [
        "\"I'm just a simple tup\""
      ],
      "stack_out": [
        "\"I'm just a simple tup\""
      ]
    },
    "148": {
      "op": "log",
      "stack_out": []
    },
    "149": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "151": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "153": {
      "retsub": true,
      "op": "retsub"
    },
    "154": {
      "subroutine": "test_cases.tuple_support.nested_tuples.echo",
      "params": {
        "s#0": "bytes"
      },
      "block": "echo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "157": {
      "block": "echo_block@0",
      "stack_in": [],
      "op": "pushbytes \"Is there an echo in here?\"",
      "defined_out": [
        "\"Is there an echo in here?\""
      ],
      "stack_out": [
        "\"Is there an echo in here?\""
      ]
    },
    "184": {
      "op": "log",
      "stack_out": []
    },
    "185": {
      "op": "frame_dig -1",
      "defined_out": [
        "s#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)"
      ]
    },
    "187": {
      "retsub": true,
      "op": "retsub"
    },
    "188": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_rearrange",
      "params": {
        "_a#0": "bytes",
        "args.0#0": "uint64",
        "args.1#0": "uint64",
        "args.2.0#0": "uint64",
        "args.2.1.0#0": "bytes",
        "args.2.1.1#0": "bytes",
        "_b#0": "bytes"
      },
      "block": "test_rearrange",
      "stack_in": [],
      "op": "proto 7 5"
    },
    "191": {
      "block": "test_rearrange_block@0",
      "stack_in": [],
      "op": "frame_dig -6",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "193": {
      "op": "frame_dig -5",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "195": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "197": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "199": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ]
    },
    "201": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "e#0",
        "d#0"
      ]
    },
    "202": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "c#0",
        "e#0",
        "d#0",
        "a#0"
      ]
    },
    "204": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "e#0",
        "d#0",
        "a#0",
        "b#0"
      ]
    },
    "206": {
      "op": "uncover 4",
      "stack_out": [
        "e#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "208": {
      "op": "uncover 4",
      "stack_out": [
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "e#0"
      ]
    },
    "210": {
      "retsub": true,
      "op": "retsub"
    },
    "211": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_swap",
      "params": {
        "args.0#0": "bytes",
        "args.1#0": "bytes"
      },
      "block": "test_swap",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "214": {
      "block": "test_swap_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "216": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "218": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "a#0"
      ]
    },
    "219": {
      "retsub": true,
      "op": "retsub"
    },
    "220": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_intrinsics",
      "params": {
        "num1#0": "uint64",
        "num2#0": "uint64"
      },
      "block": "test_intrinsics",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "223": {
      "block": "test_intrinsics_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "num1#0 (copy)"
      ],
      "stack_out": [
        "num1#0 (copy)"
      ]
    },
    "225": {
      "op": "frame_dig -1",
      "defined_out": [
        "num1#0 (copy)",
        "num2#0 (copy)"
      ],
      "stack_out": [
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "227": {
      "op": "addw",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.0#0",
        "nt.1.1#0"
      ]
    },
    "228": {
      "op": "swap",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "229": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "1"
      ]
    },
    "230": {
      "op": "dup",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "1",
        "1"
      ]
    },
    "231": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%2#0"
      ]
    },
    "232": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "233": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "42"
      ]
    },
    "235": {
      "op": "dup",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "42",
        "42"
      ]
    },
    "236": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%3#0"
      ]
    },
    "237": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "238": {
      "op": "dup",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)"
      ]
    },
    "239": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "0"
      ]
    },
    "240": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0"
      ]
    },
    "241": {
      "op": "frame_dig -2",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "num1#0 (copy)"
      ]
    },
    "243": {
      "op": "frame_dig -1",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "245": {
      "op": "+",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "246": {
      "op": "dig 3",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "nt.1.1#0 (copy)",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "tmp%5#0",
        "nt.1.1#0 (copy)"
      ]
    },
    "248": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "249": {
      "op": "&&",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%7#0"
      ]
    },
    "250": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "251": {
      "op": "dup",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)"
      ]
    },
    "252": {
      "op": "intc_0 // 0",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "0"
      ]
    },
    "253": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%8#0"
      ]
    },
    "254": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "255": {
      "op": "frame_dig -2",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "num1#0 (copy)"
      ]
    },
    "257": {
      "op": "frame_dig -1",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "259": {
      "op": "+",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%9#0"
      ]
    },
    "260": {
      "op": "dig 2",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%9#0",
        "nt.1.1#0 (copy)"
      ]
    },
    "262": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%10#0"
      ]
    },
    "263": {
      "op": "assert",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "x#0"
      ]
    },
    "264": {
      "op": "intc_0 // 0",
      "stack_out": [
        "y#0",
        "x#0",
        "0"
      ]
    },
    "265": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "tmp%11#0"
      ]
    },
    "266": {
      "op": "assert",
      "stack_out": [
        "y#0"
      ]
    },
    "267": {
      "op": "frame_dig -2",
      "stack_out": [
        "y#0",
        "num1#0 (copy)"
      ]
    },
    "269": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#0",
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "271": {
      "op": "+",
      "defined_out": [
        "tmp%12#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "tmp%12#0"
      ]
    },
    "272": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "273": {
      "op": "assert",
      "stack_out": []
    },
    "274": {
      "retsub": true,
      "op": "retsub"
    },
    "275": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_slicing",
      "params": {},
      "block": "test_nested_slicing_block@0",
      "stack_in": [],
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "277": {
      "op": "dup",
      "stack_out": [
        "4",
        "4"
      ]
    },
    "278": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "279": {
      "op": "assert",
      "stack_out": []
    },
    "280": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "281": {
      "op": "dup",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "282": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "283": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "5"
      ]
    },
    "285": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "5",
        "5"
      ]
    },
    "286": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "287": {
      "op": "&&",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "288": {
      "op": "assert",
      "stack_out": []
    },
    "289": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\""
      ],
      "stack_out": [
        "\"a\""
      ]
    },
    "292": {
      "op": "dup",
      "stack_out": [
        "\"a\"",
        "\"a\""
      ]
    },
    "293": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "294": {
      "op": "pushbytes \"b\"",
      "defined_out": [
        "\"b\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"b\""
      ]
    },
    "297": {
      "op": "dup",
      "stack_out": [
        "tmp%4#0",
        "\"b\"",
        "\"b\""
      ]
    },
    "298": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "299": {
      "op": "&&",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "300": {
      "op": "assert",
      "stack_out": []
    },
    "301": {
      "retsub": true,
      "op": "retsub"
    },
    "302": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "params": {
        "one#0": "uint64",
        "reassign#0": "uint64"
      },
      "block": "test_nested_singles",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "305": {
      "block": "test_nested_singles_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0"
      ]
    },
    "306": {
      "op": "frame_dig -2",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0"
      ]
    },
    "308": {
      "op": "dup",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0"
      ]
    },
    "309": {
      "op": "intc_3 // 2",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ]
    },
    "310": {
      "op": "swap",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "311": {
      "op": "intc_0 // 0",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0"
      ]
    },
    "312": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0",
        "0"
      ]
    },
    "313": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%0#0"
      ]
    },
    "314": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "315": {
      "op": "intc_0 // 0",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0"
      ]
    },
    "316": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0",
        "0"
      ]
    },
    "317": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%1#0"
      ]
    },
    "318": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "319": {
      "op": "dup",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)"
      ]
    },
    "320": {
      "op": "intc_2 // 1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "1"
      ]
    },
    "321": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%2#0"
      ]
    },
    "322": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "323": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)"
      ]
    },
    "324": {
      "op": "frame_dig -2",
      "defined_out": [
        "one#0 (copy)",
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "one#0 (copy)"
      ]
    },
    "326": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%3#0"
      ]
    },
    "327": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "328": {
      "op": "intc_3 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2"
      ]
    },
    "329": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2",
        "2"
      ]
    },
    "330": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%4#0"
      ]
    },
    "331": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "332": {
      "op": "intc_3 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2"
      ]
    },
    "333": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2",
        "2"
      ]
    },
    "334": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%5#0"
      ]
    },
    "335": {
      "op": "assert",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "336": {
      "op": "frame_dig -1",
      "defined_out": [
        "reassign#0 (copy)",
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "reassign#0 (copy)"
      ]
    },
    "338": {
      "op": "bz test_nested_singles_after_if_else@2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "341": {
      "block": "test_nested_singles_if_body@1",
      "stack_in": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.0.0#0"
      ]
    },
    "343": {
      "op": "frame_bury 0",
      "defined_out": [
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "345": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0"
      ]
    },
    "347": {
      "op": "frame_bury 1",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "349": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.2.0#0"
      ]
    },
    "351": {
      "op": "frame_bury 2",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "353": {
      "block": "test_nested_singles_after_if_else@2",
      "stack_in": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "0"
      ]
    },
    "354": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "3"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "0",
        "3"
      ]
    },
    "356": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "3",
        "reassign#0 (copy)"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "0",
        "3",
        "reassign#0 (copy)"
      ]
    },
    "358": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "select%0#0"
      ]
    },
    "359": {
      "op": "frame_dig 0",
      "defined_out": [
        "s.0.0#0",
        "select%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "select%0#0",
        "s.0.0#0"
      ]
    },
    "361": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%6#0"
      ]
    },
    "362": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "363": {
      "op": "frame_dig 2",
      "defined_out": [
        "s.0.0#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0"
      ]
    },
    "365": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "s.0.0#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "2"
      ]
    },
    "366": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "2",
        "5",
        "s.0.0#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "2",
        "5"
      ]
    },
    "368": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "2",
        "5",
        "reassign#0 (copy)"
      ]
    },
    "370": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "select%1#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "select%1#0"
      ]
    },
    "371": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%7#0"
      ]
    },
    "372": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "373": {
      "op": "frame_dig 3",
      "defined_out": [
        "s.0.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "375": {
      "op": "frame_dig -2",
      "defined_out": [
        "one#0 (copy)",
        "s.0.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "t.0#0",
        "one#0 (copy)"
      ]
    },
    "377": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "t.0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%8#0"
      ]
    },
    "378": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "379": {
      "op": "frame_dig 1",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0"
      ]
    },
    "381": {
      "op": "dup",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s1#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0"
      ]
    },
    "382": {
      "op": "frame_dig -2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "one#0 (copy)"
      ]
    },
    "384": {
      "op": "+",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0"
      ]
    },
    "385": {
      "op": "intc_3 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "2"
      ]
    },
    "386": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "2",
        "5"
      ]
    },
    "388": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "2",
        "5",
        "reassign#0 (copy)"
      ]
    },
    "390": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s1#0",
        "select%2#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "select%2#0"
      ]
    },
    "391": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "tmp%9#0"
      ]
    },
    "392": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0"
      ]
    },
    "393": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "1"
      ]
    },
    "394": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "1",
        "4",
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "1",
        "4"
      ]
    },
    "396": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "1",
        "4",
        "reassign#0 (copy)"
      ]
    },
    "398": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "select%3#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "select%3#0"
      ]
    },
    "399": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%10#0"
      ]
    },
    "400": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "401": {
      "retsub": true,
      "op": "retsub"
    },
    "402": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_mutation",
      "params": {},
      "block": "test_nested_mutation_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "403": {
      "op": "bytec 9 // 0x0000000000000000",
      "defined_out": [
        "0x",
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x",
        "0x0000000000000000"
      ]
    },
    "405": {
      "op": "concat",
      "defined_out": [
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0"
      ]
    },
    "406": {
      "op": "bytec 10 // 0x0001",
      "defined_out": [
        "0x0001",
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0",
        "0x0001"
      ]
    },
    "408": {
      "op": "swap",
      "stack_out": [
        "0x0001",
        "result%0#0"
      ]
    },
    "409": {
      "op": "concat",
      "defined_out": [
        "x.0.0#0"
      ],
      "stack_out": [
        "x.0.0#0"
      ]
    },
    "410": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "413": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x"
      ]
    },
    "414": {
      "op": "bytec 7 // 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "0x0000000000000001"
      ]
    },
    "416": {
      "op": "concat",
      "defined_out": [
        "array%encoded%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1"
      ]
    },
    "417": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "418": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "419": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "encoded%0#0"
      ]
    },
    "420": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "421": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "422": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "423": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "424": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "425": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "426": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "429": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "430": {
      "op": "concat",
      "stack_out": [
        "x.0.0#0"
      ]
    },
    "431": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "x.0.0#0"
      ],
      "stack_out": [
        "x.0.0#0",
        "0"
      ]
    },
    "432": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "433": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "434": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "435": {
      "op": "assert",
      "stack_out": []
    },
    "436": {
      "retsub": true,
      "op": "retsub"
    },
    "437": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_iteration",
      "params": {},
      "block": "test_nested_iteration",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "440": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "a#0"
      ]
    },
    "441": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "loop_counter%1#0"
      ]
    },
    "442": {
      "block": "test_nested_iteration_block@0",
      "stack_in": [
        "a#0",
        "loop_counter%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0"
      ]
    },
    "443": {
      "op": "dup",
      "defined_out": [
        "loop_counter%0#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "444": {
      "op": "intc_2 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "445": {
      "op": "intc_3 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "446": {
      "block": "test_nested_iteration_for_body@1",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "a#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "a#0"
      ]
    },
    "448": {
      "op": "+",
      "defined_out": [
        "a#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%0#0"
      ]
    },
    "449": {
      "op": "frame_dig 2",
      "defined_out": [
        "a#0",
        "tmp%0#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%0#0",
        "total#0"
      ]
    },
    "451": {
      "op": "+",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ]
    },
    "452": {
      "op": "frame_bury 2",
      "defined_out": [
        "a#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "454": {
      "block": "test_nested_iteration_for_footer@2",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "456": {
      "op": "switch test_nested_iteration_for_header_1@3 test_nested_iteration_for_header_2@4 test_nested_iteration_for_header_3@5",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "464": {
      "block": "test_nested_iteration_after_for@6",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "465": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "467": {
      "op": "intc_2 // 1",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "a#0"
      ]
    },
    "468": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "470": {
      "op": "intc_3 // 2",
      "defined_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ]
    },
    "471": {
      "block": "test_nested_iteration_for_body@7",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0",
        "a#0"
      ]
    },
    "473": {
      "op": "+",
      "defined_out": [
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%1#0"
      ]
    },
    "474": {
      "op": "frame_dig 2",
      "defined_out": [
        "a#0",
        "tmp%1#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%1#0",
        "total#0"
      ]
    },
    "476": {
      "op": "+",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ]
    },
    "477": {
      "op": "frame_bury 2",
      "defined_out": [
        "a#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "479": {
      "block": "test_nested_iteration_for_footer@8",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "481": {
      "op": "switch test_nested_iteration_for_header_1@9 test_nested_iteration_for_header_2@10 test_nested_iteration_for_header_3@11",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "489": {
      "block": "test_nested_iteration_after_for@12",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ]
    },
    "491": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "total#0",
        "8"
      ]
    },
    "492": {
      "op": "/",
      "defined_out": [
        "tmp%2#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%2#0"
      ]
    },
    "493": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%2#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%2#0",
        "3"
      ]
    },
    "495": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%3#0"
      ]
    },
    "496": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "497": {
      "retsub": true,
      "op": "retsub"
    },
    "498": {
      "block": "test_nested_iteration_for_header_3@11",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "500": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "502": {
      "op": "intc_3 // 2",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "a#0"
      ]
    },
    "503": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "505": {
      "op": "intc_3 // 2",
      "defined_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ]
    },
    "506": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "509": {
      "block": "test_nested_iteration_for_header_2@10",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_3 // 2",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "510": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "512": {
      "op": "intc_2 // 1",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "a#0"
      ]
    },
    "513": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "515": {
      "op": "intc_2 // 1",
      "defined_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ]
    },
    "516": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "519": {
      "block": "test_nested_iteration_for_header_1@9",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "520": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "522": {
      "op": "intc_3 // 2",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "a#0"
      ]
    },
    "523": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "525": {
      "op": "intc_2 // 1",
      "defined_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ]
    },
    "526": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "529": {
      "block": "test_nested_iteration_for_header_3@5",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "531": {
      "op": "frame_bury 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "533": {
      "op": "intc_3 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "534": {
      "op": "frame_bury 4",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "536": {
      "op": "intc_3 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "537": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "540": {
      "block": "test_nested_iteration_for_header_2@4",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_3 // 2",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "541": {
      "op": "frame_bury 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "543": {
      "op": "intc_2 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "544": {
      "op": "frame_bury 4",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "546": {
      "op": "intc_2 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "547": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "550": {
      "block": "test_nested_iteration_for_header_1@3",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_2 // 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "551": {
      "op": "frame_bury 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "553": {
      "op": "intc_3 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "554": {
      "op": "frame_bury 4",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "556": {
      "op": "intc_2 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "557": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "560": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "op": "bytec 4 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\""
      ],
      "stack_out": [
        "\"build_nested_call_count\""
      ]
    },
    "562": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "\"build_nested_call_count\"",
        "0"
      ]
    },
    "563": {
      "op": "app_global_put",
      "stack_out": []
    },
    "564": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "568": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "0x0000"
      ],
      "stack_out": [
        "0x0000",
        "0x"
      ]
    },
    "569": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "570": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_data%0#0",
        "0"
      ]
    },
    "571": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "572": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "array_data%0#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "573": {
      "op": "len",
      "defined_out": [
        "array_data%0#0",
        "length%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "val_as_bytes%0#0",
        "length%0#0"
      ]
    },
    "574": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "as_bytes%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "val_as_bytes%0#0",
        "as_bytes%0#0"
      ]
    },
    "575": {
      "op": "extract 6 2",
      "defined_out": [
        "array_data%0#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "val_as_bytes%0#0",
        "length_uint16%0#0"
      ]
    },
    "578": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "array_data%0#0",
        "val_as_bytes%0#0",
        "length_uint16%0#0",
        "0x"
      ]
    },
    "579": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0"
      ]
    },
    "580": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "581": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\"",
        "array_data%0#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "\"\""
      ]
    },
    "582": {
      "op": "len",
      "defined_out": [
        "array_data%0#0",
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "length%1#0"
      ]
    },
    "583": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "as_bytes%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "as_bytes%1#0"
      ]
    },
    "584": {
      "op": "extract 6 2",
      "defined_out": [
        "array_data%0#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "length_uint16%1#0"
      ]
    },
    "587": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "array_data%0#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "length_uint16%1#0",
        "\"\""
      ]
    },
    "588": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0"
      ]
    },
    "589": {
      "op": "cover 2",
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "591": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "592": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "593": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "594": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "array_data%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "12"
      ]
    },
    "596": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "as_bytes%2#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%2#0"
      ]
    },
    "597": {
      "op": "extract 6 2",
      "defined_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "600": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "601": {
      "op": "dig 1",
      "defined_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "603": {
      "op": "len",
      "defined_out": [
        "array_data%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0"
      ]
    },
    "604": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0",
        "12"
      ]
    },
    "606": {
      "op": "+",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "607": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "as_bytes%3#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%3#0"
      ]
    },
    "608": {
      "op": "extract 6 2",
      "defined_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "611": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "612": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ]
    },
    "613": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "614": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0"
      ]
    },
    "615": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "616": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "array_data%0#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "4"
      ]
    },
    "618": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "as_bytes%4#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "as_bytes%4#0"
      ]
    },
    "619": {
      "op": "extract 6 2",
      "defined_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%2#0"
      ]
    },
    "622": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%2#0",
        "0x"
      ]
    },
    "623": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "0x",
        "offset_as_uint16%2#0"
      ]
    },
    "624": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "625": {
      "op": "dig 2",
      "defined_out": [
        "array_data%0#0",
        "array_data%0#0 (copy)",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "array_data%0#0 (copy)"
      ]
    },
    "627": {
      "op": "len",
      "defined_out": [
        "array_data%0#0",
        "data_length%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "data_length%2#0"
      ]
    },
    "628": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "data_length%2#0",
        "4"
      ]
    },
    "630": {
      "op": "+",
      "defined_out": [
        "array_data%0#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "current_tail_offset%4#0"
      ]
    },
    "631": {
      "op": "itob",
      "defined_out": [
        "array_data%0#0",
        "as_bytes%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "as_bytes%5#0"
      ]
    },
    "632": {
      "op": "extract 6 2",
      "defined_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "offset_as_uint16%3#0"
      ]
    },
    "635": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "636": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "array_data%0#0"
      ]
    },
    "638": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "639": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "640": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "641": {
      "op": "bytec 6 // \"twm\"",
      "defined_out": [
        "\"twm\"",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "\"twm\""
      ]
    },
    "643": {
      "op": "swap",
      "stack_out": [
        "\"twm\"",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "644": {
      "op": "app_global_put",
      "stack_out": []
    },
    "645": {
      "retsub": true,
      "op": "retsub"
    },
    "646": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple",
      "params": {
        "pwl.parent.foo#0": "uint64",
        "pwl.parent.foo_arc#0": "bytes",
        "pwl.parent.child.a#0": "uint64",
        "pwl.parent.child.b#0": "bytes",
        "pwl.parent.child.c#0": "bytes",
        "pwl.children#0": "bytes"
      },
      "block": "store_tuple",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "649": {
      "block": "store_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -6",
      "defined_out": [
        "pwl.parent.foo#0 (copy)"
      ],
      "stack_out": [
        "pwl.parent.foo#0 (copy)"
      ]
    },
    "651": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "652": {
      "op": "frame_dig -4",
      "defined_out": [
        "pwl.parent.child.a#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "pwl.parent.child.a#0 (copy)"
      ]
    },
    "654": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "655": {
      "op": "frame_dig -3",
      "defined_out": [
        "pwl.parent.child.b#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "pwl.parent.child.b#0 (copy)"
      ]
    },
    "657": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length%0#0"
      ]
    },
    "658": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "as_bytes%0#0"
      ]
    },
    "659": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0"
      ]
    },
    "662": {
      "op": "frame_dig -3",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0",
        "pwl.parent.child.b#0 (copy)"
      ]
    },
    "664": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0"
      ]
    },
    "665": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "666": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_value%0#0",
        "pwl.parent.child.c#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "pwl.parent.child.c#0 (copy)"
      ]
    },
    "668": {
      "op": "len",
      "defined_out": [
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "length%1#0"
      ]
    },
    "669": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "as_bytes%1#0"
      ]
    },
    "670": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "length_uint16%1#0"
      ]
    },
    "673": {
      "op": "frame_dig -2",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "length_uint16%1#0",
        "pwl.parent.child.c#0 (copy)"
      ]
    },
    "675": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "encoded_value%1#0"
      ]
    },
    "676": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "678": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "0x"
      ]
    },
    "679": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "0x",
        "val_as_bytes%1#0"
      ]
    },
    "680": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "681": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "12"
      ]
    },
    "683": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%2#0"
      ]
    },
    "684": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "687": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "688": {
      "op": "dig 1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "690": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0"
      ]
    },
    "691": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0",
        "12"
      ]
    },
    "693": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "694": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%3#0"
      ]
    },
    "695": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "698": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "699": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ]
    },
    "700": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "701": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0"
      ]
    },
    "702": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "703": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0",
        "0x"
      ]
    },
    "704": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "706": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "707": {
      "op": "frame_dig -5",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "pwl.parent.foo_arc#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "pwl.parent.foo_arc#0 (copy)"
      ]
    },
    "709": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "710": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "18"
      ]
    },
    "712": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "as_bytes%4#0"
      ]
    },
    "713": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%2#0"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "717": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "718": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "719": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "4"
      ]
    },
    "721": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "as_bytes%5#0"
      ]
    },
    "722": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0"
      ]
    },
    "725": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0",
        "0x"
      ]
    },
    "726": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "0x",
        "offset_as_uint16%3#0"
      ]
    },
    "727": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "728": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "729": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%10#0 (copy)",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%10#0 (copy)"
      ]
    },
    "730": {
      "op": "len",
      "defined_out": [
        "data_length%3#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "data_length%3#0"
      ]
    },
    "731": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "data_length%3#0",
        "4"
      ]
    },
    "733": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%6#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "current_tail_offset%6#0"
      ]
    },
    "734": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "as_bytes%6#0"
      ]
    },
    "735": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0",
        "offset_as_uint16%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%4#0"
      ]
    },
    "738": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%4#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "740": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0",
        "offset_as_uint16%4#0"
      ]
    },
    "741": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%13#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "742": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "743": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%14#0"
      ]
    },
    "744": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "pwl.children#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%14#0",
        "pwl.children#0 (copy)"
      ]
    },
    "746": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%15#0"
      ]
    },
    "747": {
      "op": "bytec 11 // \"pwl\"",
      "defined_out": [
        "\"pwl\"",
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%15#0",
        "\"pwl\""
      ]
    },
    "749": {
      "op": "swap",
      "stack_out": [
        "\"pwl\"",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "750": {
      "op": "app_global_put",
      "stack_out": []
    },
    "751": {
      "retsub": true,
      "op": "retsub"
    },
    "752": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple",
      "params": {},
      "block": "load_tuple_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "753": {
      "op": "bytec 11 // \"pwl\"",
      "defined_out": [
        "\"pwl\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pwl\""
      ]
    },
    "755": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "756": {
      "error": "check self.pwl exists",
      "op": "assert // check self.pwl exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "757": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "758": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "759": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "item_start_offset%0#0"
      ]
    },
    "760": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0"
      ]
    },
    "761": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "762": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "763": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "item_end_offset%0#0"
      ]
    },
    "764": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "item_end_offset%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "766": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "item_end_offset%0#0",
        "maybe_value%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "768": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "770": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "item0%0#0"
      ]
    },
    "771": {
      "op": "dup",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "772": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0"
      ]
    },
    "773": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "item0%0#0",
        "item0%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "774": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item0%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "item0%0#0",
        "item0%1#0"
      ]
    },
    "775": {
      "op": "btoi",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "item0%0#0",
        "item0%2#0"
      ]
    },
    "776": {
      "op": "cover 2",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item0%0#0"
      ]
    },
    "778": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "779": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "8"
      ]
    },
    "780": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "8",
        "8"
      ]
    },
    "781": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item1%0#0"
      ]
    },
    "782": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%0#0"
      ]
    },
    "783": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "784": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%0#0",
        "item0%0#0 (copy)",
        "item0%2#0",
        "item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "16"
      ]
    },
    "786": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "787": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item0%0#0"
      ]
    },
    "788": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "789": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item1%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item_end_offset%1#0"
      ]
    },
    "790": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "item0%0#0"
      ]
    },
    "791": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item_end_offset%1#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "793": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "795": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item2%0#0"
      ]
    },
    "796": {
      "op": "dup",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "797": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "0"
      ]
    },
    "798": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "799": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%2#0",
        "item0%3#0",
        "item1%0#0",
        "item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item2%0#0",
        "item0%3#0"
      ]
    },
    "800": {
      "op": "btoi",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item2%0#0",
        "item0%4#0"
      ]
    },
    "801": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0"
      ]
    },
    "802": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "803": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "8"
      ]
    },
    "804": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "item_start_offset%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item_start_offset%2#0"
      ]
    },
    "805": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0"
      ]
    },
    "806": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "807": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "item_start_offset%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "10"
      ]
    },
    "809": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item_end_offset%2#0"
      ]
    },
    "810": {
      "op": "dig 1",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item_end_offset%2#0",
        "item2%0#0 (copy)"
      ]
    },
    "812": {
      "op": "uncover 3",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item_end_offset%2#0",
        "item2%0#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "814": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "816": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0",
        "item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item1%1#0"
      ]
    },
    "817": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item1%2#0"
      ]
    },
    "820": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0"
      ]
    },
    "821": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "822": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "10"
      ]
    },
    "824": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0",
        "item_start_offset%3#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item_start_offset%3#0"
      ]
    },
    "825": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item2%0#0"
      ]
    },
    "826": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "827": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item2%0#0",
        "item_end_offset%3#0"
      ]
    },
    "828": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "item2%0#0"
      ]
    },
    "829": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_end_offset%3#0",
        "item2%0#0",
        "item_start_offset%3#0"
      ]
    },
    "831": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "833": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%1#0"
      ]
    },
    "834": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0"
      ]
    },
    "837": {
      "op": "dig 4",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "839": {
      "op": "intc_3 // 2",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "840": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%2#0",
        "item_start_offset%4#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item_start_offset%4#0"
      ]
    },
    "841": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item2%2#0"
      ]
    },
    "842": {
      "op": "dig 5",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item2%2#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "844": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%2#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item2%2#0",
        "item_end_offset%4#0"
      ]
    },
    "845": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item2%2#0"
      ]
    },
    "846": {
      "op": "uncover 6",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item2%2#0",
        "maybe_value%0#0"
      ]
    },
    "848": {
      "op": "uncover 3",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_end_offset%4#0",
        "item2%2#0",
        "maybe_value%0#0",
        "item_start_offset%4#0"
      ]
    },
    "850": {
      "op": "uncover 3",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "maybe_value%0#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "852": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item1%3#0",
        "item2%2#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0"
      ]
    },
    "853": {
      "op": "uncover 5",
      "stack_out": [
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0",
        "item0%2#0"
      ]
    },
    "855": {
      "op": "uncover 5",
      "stack_out": [
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0",
        "item0%2#0",
        "item1%0#0"
      ]
    },
    "857": {
      "op": "uncover 5",
      "stack_out": [
        "item1%2#0",
        "item2%2#0",
        "item1%3#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0"
      ]
    },
    "859": {
      "op": "uncover 5",
      "stack_out": [
        "item2%2#0",
        "item1%3#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0"
      ]
    },
    "861": {
      "op": "uncover 5",
      "stack_out": [
        "item1%3#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0"
      ]
    },
    "863": {
      "op": "uncover 5",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0"
      ]
    },
    "865": {
      "retsub": true,
      "op": "retsub"
    },
    "866": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "store_tuple_in_box",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "869": {
      "block": "store_tuple_in_box_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "key.b#0 (copy)"
      ]
    },
    "871": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "key.b#0 (copy)",
        "1"
      ]
    },
    "872": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "873": {
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "key.a#0 (copy)"
      ]
    },
    "875": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "876": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "878": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "879": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "880": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "881": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%1#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "882": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "883": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "884": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "885": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_tuple_buffer%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%2#0",
        "\"box\""
      ]
    },
    "887": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "888": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "889": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "key.a#0 (copy)"
      ]
    },
    "891": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_prefixed_key%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "892": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "val_as_bytes%2#0",
        "tmp%0#0"
      ]
    },
    "894": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "895": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "896": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "box_prefixed_key%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%2#0",
        "0x"
      ]
    },
    "897": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "val_as_bytes%3#0",
        "0x",
        "val_as_bytes%2#0"
      ]
    },
    "898": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "899": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "900": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "901": {
      "op": "box_put",
      "stack_out": []
    },
    "902": {
      "retsub": true,
      "op": "retsub"
    },
    "903": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "is_tuple_in_box",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "906": {
      "block": "is_tuple_in_box_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "key.a#0 (copy)"
      ]
    },
    "908": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "909": {
      "op": "frame_dig -1",
      "defined_out": [
        "key.b#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "911": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "912": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "913": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "914": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%1#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "915": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "916": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "917": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "918": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "\"box\""
      ]
    },
    "920": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "921": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "922": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "923": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "925": {
      "retsub": true,
      "op": "retsub"
    },
    "926": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "load_tuple_from_box",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "929": {
      "block": "load_tuple_from_box_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "key.a#0 (copy)"
      ]
    },
    "931": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "932": {
      "op": "frame_dig -1",
      "defined_out": [
        "key.b#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "934": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "935": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "936": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "937": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%1#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "938": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "939": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "940": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "941": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "\"box\""
      ]
    },
    "943": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "944": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "945": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "946": {
      "error": "check self.box entry exists",
      "op": "assert // check self.box entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "947": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "948": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "949": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "950": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "item0%0#0"
      ]
    },
    "951": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "item0%1#0"
      ]
    },
    "952": {
      "op": "swap",
      "stack_out": [
        "item0%1#0",
        "maybe_value%0#0"
      ]
    },
    "953": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%1#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "954": {
      "op": "dup",
      "stack_out": [
        "item0%1#0",
        "maybe_value%0#0",
        "8",
        "8"
      ]
    },
    "955": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%0#0"
      ]
    },
    "956": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%1#0"
      ]
    },
    "957": {
      "retsub": true,
      "op": "retsub"
    },
    "958": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "maybe_load_tuple_from_box",
      "stack_in": [],
      "op": "proto 2 3"
    },
    "961": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.a#0"
      ]
    },
    "962": {
      "block": "maybe_load_tuple_from_box_block@0",
      "stack_in": [
        "ternary_result%0.a#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "key.a#0 (copy)"
      ]
    },
    "964": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%0#0"
      ]
    },
    "965": {
      "op": "frame_dig -1",
      "defined_out": [
        "key.b#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "967": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "968": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "969": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "970": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%1#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "971": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "972": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "973": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "974": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "encoded_tuple_buffer%2#0",
        "\"box\""
      ]
    },
    "976": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "977": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "box_prefixed_key%0#0"
      ]
    },
    "978": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "979": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "maybe_exists%0#0 (copy)"
      ]
    },
    "980": {
      "op": "cover 2",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "982": {
      "op": "cover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "984": {
      "op": "swap",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "985": {
      "op": "bz maybe_load_tuple_from_box_ternary_false@2",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "988": {
      "block": "maybe_load_tuple_from_box_ternary_true@1",
      "stack_in": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "990": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "991": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "992": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "993": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%0#0"
      ]
    },
    "994": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%1#0"
      ]
    },
    "995": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "maybe_value%0#0"
      ]
    },
    "996": {
      "op": "intc_1 // 8",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "997": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "maybe_value%0#0",
        "8",
        "8"
      ]
    },
    "998": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "item1%0#0"
      ]
    },
    "999": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "item1%1#0"
      ]
    },
    "1000": {
      "op": "swap",
      "defined_out": [
        "item1%1#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item1%1#0",
        "ternary_result%0.a#0"
      ]
    },
    "1001": {
      "op": "frame_bury 0",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ]
    },
    "1003": {
      "block": "maybe_load_tuple_from_box_ternary_merge@3",
      "stack_in": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0",
        "maybe_value.a#0"
      ]
    },
    "1005": {
      "op": "swap",
      "defined_out": [
        "maybe_value.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "ternary_result%0.b#0"
      ]
    },
    "1006": {
      "op": "frame_dig 1",
      "defined_out": [
        "exists#0",
        "maybe_value.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "ternary_result%0.b#0",
        "exists#0"
      ]
    },
    "1008": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0",
        "exists#0",
        "maybe_value.a#0"
      ]
    },
    "1010": {
      "op": "uncover 2",
      "defined_out": [
        "exists#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "exists#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ]
    },
    "1012": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0",
        "exists#0"
      ]
    },
    "1014": {
      "op": "uncover 5"
    },
    "1016": {
      "op": "uncover 5"
    },
    "1018": {
      "op": "uncover 5"
    },
    "1020": {
      "retsub": true,
      "op": "retsub"
    },
    "1021": {
      "block": "maybe_load_tuple_from_box_ternary_false@2",
      "stack_in": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0"
      ]
    },
    "1022": {
      "op": "frame_bury 0",
      "defined_out": [
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1024": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ]
    },
    "1025": {
      "op": "b maybe_load_tuple_from_box_ternary_merge@3"
    },
    "1028": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "load_tuple_from_box_or_default",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "1031": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.a#0"
      ]
    },
    "1032": {
      "block": "load_tuple_from_box_or_default_block@0",
      "stack_in": [
        "ternary_result%0.a#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "key.a#0 (copy)"
      ]
    },
    "1034": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%0#0"
      ]
    },
    "1035": {
      "op": "frame_dig -1",
      "defined_out": [
        "key.b#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "1037": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1038": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1039": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "1040": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%1#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "1041": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "1042": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "1043": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1044": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "encoded_tuple_buffer%2#0",
        "\"box\""
      ]
    },
    "1046": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1047": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1048": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "box_prefixed_key%0#0",
        "4"
      ]
    },
    "1050": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "4",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "box_prefixed_key%0#0",
        "4",
        "2"
      ]
    },
    "1051": {
      "callsub": "test_cases.tuple_support.nested_tuples.simple_tup",
      "op": "callsub simple_tup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1054": {
      "op": "cover 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "1056": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1057": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1058": {
      "op": "bz load_tuple_from_box_or_default_ternary_false@2",
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1061": {
      "block": "load_tuple_from_box_or_default_ternary_true@1",
      "stack_in": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "1063": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1064": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "1065": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "1066": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%0#0"
      ]
    },
    "1067": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%1#0"
      ]
    },
    "1068": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "maybe_value%0#0"
      ]
    },
    "1069": {
      "op": "intc_1 // 8",
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "1070": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "maybe_value%0#0",
        "8",
        "8"
      ]
    },
    "1071": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "item1%0#0"
      ]
    },
    "1072": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "item1%1#0"
      ]
    },
    "1073": {
      "op": "swap",
      "defined_out": [
        "item1%1#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "item1%1#0",
        "ternary_result%0.a#0"
      ]
    },
    "1074": {
      "op": "frame_bury 0",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ]
    },
    "1076": {
      "block": "load_tuple_from_box_or_default_ternary_merge@3",
      "stack_in": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0",
        "ternary_result%0.a#0"
      ]
    },
    "1078": {
      "op": "swap",
      "defined_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ]
    },
    "1079": {
      "op": "frame_bury 1"
    },
    "1081": {
      "op": "frame_bury 0"
    },
    "1083": {
      "retsub": true,
      "op": "retsub"
    },
    "1084": {
      "block": "load_tuple_from_box_or_default_ternary_false@2",
      "stack_in": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0"
      ]
    },
    "1086": {
      "op": "frame_bury 0",
      "defined_out": [
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1088": {
      "op": "frame_dig 1",
      "defined_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ]
    },
    "1090": {
      "op": "b load_tuple_from_box_or_default_ternary_merge@3"
    },
    "1093": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default",
      "params": {
        "key#0": "bytes"
      },
      "block": "load_tuple_from_local_state_or_default",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "1096": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.a#0"
      ]
    },
    "1097": {
      "block": "load_tuple_from_local_state_or_default_block@0",
      "stack_in": [
        "ternary_result%0.a#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "key#0 (copy)"
      ]
    },
    "1099": {
      "callsub": "test_cases.tuple_support.nested_tuples.echo",
      "op": "callsub echo",
      "defined_out": [
        "local#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "local#0"
      ]
    },
    "1102": {
      "callsub": "test_cases.tuple_support.nested_tuples.get_sender_inefficiently",
      "op": "callsub get_sender_inefficiently",
      "defined_out": [
        "local#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "local#0",
        "tmp%0#0"
      ]
    },
    "1105": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "local#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "local#0",
        "tmp%0#0",
        "4"
      ]
    },
    "1107": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "4",
        "local#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "local#0",
        "tmp%0#0",
        "4",
        "2"
      ]
    },
    "1108": {
      "callsub": "test_cases.tuple_support.nested_tuples.simple_tup",
      "op": "callsub simple_tup",
      "defined_out": [
        "local#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "local#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1111": {
      "op": "cover 3",
      "defined_out": [
        "local#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "local#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1113": {
      "op": "cover 2",
      "defined_out": [
        "local#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "local#0",
        "tmp%0#0"
      ]
    },
    "1115": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "local#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1116": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "0",
        "local#0"
      ]
    },
    "1118": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1119": {
      "op": "bz load_tuple_from_local_state_or_default_ternary_false@2",
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0"
      ]
    },
    "1122": {
      "block": "load_tuple_from_local_state_or_default_ternary_true@1",
      "stack_in": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "1124": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1125": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "1126": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "1127": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%0#0"
      ]
    },
    "1128": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%1#0"
      ]
    },
    "1129": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "item0%1#0",
        "maybe_value%0#0"
      ]
    },
    "1130": {
      "op": "intc_1 // 8",
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "item0%1#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "1131": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "item0%1#0",
        "maybe_value%0#0",
        "8",
        "8"
      ]
    },
    "1132": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "item0%1#0",
        "item1%0#0"
      ]
    },
    "1133": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "item0%1#0",
        "item1%1#0"
      ]
    },
    "1134": {
      "op": "swap",
      "defined_out": [
        "item1%1#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "item1%1#0",
        "ternary_result%0.a#0"
      ]
    },
    "1135": {
      "op": "frame_bury 0",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ]
    },
    "1137": {
      "block": "load_tuple_from_local_state_or_default_ternary_merge@3",
      "stack_in": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0",
        "ternary_result%0.a#0"
      ]
    },
    "1139": {
      "op": "swap",
      "defined_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ]
    },
    "1140": {
      "op": "frame_bury 1"
    },
    "1142": {
      "op": "frame_bury 0"
    },
    "1144": {
      "retsub": true,
      "op": "retsub"
    },
    "1145": {
      "block": "load_tuple_from_local_state_or_default_ternary_false@2",
      "stack_in": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0"
      ]
    },
    "1147": {
      "op": "frame_bury 0",
      "defined_out": [
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0"
      ]
    },
    "1149": {
      "op": "frame_dig 1",
      "defined_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "tmp%2#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ]
    },
    "1151": {
      "op": "b load_tuple_from_local_state_or_default_ternary_merge@3"
    },
    "1154": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple",
      "params": {},
      "block": "mutate_local_tuple",
      "stack_in": [],
      "op": "proto 0 4"
    },
    "1157": {
      "block": "mutate_local_tuple_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "1158": {
      "op": "bytec 9 // 0x0000000000000000",
      "defined_out": [
        "0x",
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x",
        "0x0000000000000000"
      ]
    },
    "1160": {
      "op": "concat",
      "defined_out": [
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0"
      ]
    },
    "1161": {
      "op": "bytec 10 // 0x0001",
      "defined_out": [
        "0x0001",
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0",
        "0x0001"
      ]
    },
    "1163": {
      "op": "swap",
      "stack_out": [
        "0x0001",
        "result%0#0"
      ]
    },
    "1164": {
      "op": "concat",
      "defined_out": [
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0"
      ]
    },
    "1165": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "1168": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x"
      ]
    },
    "1169": {
      "op": "bytec 7 // 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "0x0000000000000001"
      ]
    },
    "1171": {
      "op": "concat",
      "defined_out": [
        "array%encoded%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1"
      ]
    },
    "1172": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "1173": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "1174": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "encoded%0#0"
      ]
    },
    "1175": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "1176": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1177": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "1178": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "1179": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1180": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1181": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1184": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1185": {
      "op": "concat",
      "stack_out": [
        "twm.arr#0"
      ]
    },
    "1186": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0"
      ]
    },
    "1189": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%1#0",
        "0x"
      ]
    },
    "1190": {
      "op": "pushbytes 0x0000000000000002",
      "defined_out": [
        "0x",
        "0x0000000000000002",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "0x",
        "0x0000000000000002"
      ]
    },
    "1200": {
      "op": "concat",
      "defined_out": [
        "array%encoded%1#1",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "array%encoded%1#1"
      ]
    },
    "1201": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%1#0",
        "array%encoded%1#1",
        "0x"
      ]
    },
    "1202": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%1#0",
        "0x",
        "array%encoded%1#1"
      ]
    },
    "1203": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "encoded%1#0"
      ]
    },
    "1204": {
      "op": "concat",
      "defined_out": [
        "concatenated%1#0"
      ],
      "stack_out": [
        "concatenated%1#0"
      ]
    },
    "1205": {
      "op": "dup",
      "defined_out": [
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ],
      "stack_out": [
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ]
    },
    "1206": {
      "op": "len",
      "defined_out": [
        "byte_len%1#0",
        "concatenated%1#0"
      ],
      "stack_out": [
        "concatenated%1#0",
        "byte_len%1#0"
      ]
    },
    "1207": {
      "op": "intc_1 // 8",
      "stack_out": [
        "concatenated%1#0",
        "byte_len%1#0",
        "8"
      ]
    },
    "1208": {
      "op": "/",
      "defined_out": [
        "concatenated%1#0",
        "len_%1#0"
      ],
      "stack_out": [
        "concatenated%1#0",
        "len_%1#0"
      ]
    },
    "1209": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concatenated%1#0"
      ],
      "stack_out": [
        "concatenated%1#0",
        "as_bytes%1#0"
      ]
    },
    "1210": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%1#0",
        "len_16_bit%1#0"
      ],
      "stack_out": [
        "concatenated%1#0",
        "len_16_bit%1#0"
      ]
    },
    "1213": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%1#0",
        "concatenated%1#0"
      ]
    },
    "1214": {
      "op": "concat",
      "defined_out": [
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0"
      ]
    },
    "1215": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "1"
      ]
    },
    "1216": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "twm.arr#0"
      ]
    },
    "1217": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0"
      ]
    },
    "1218": {
      "block": "mutate_local_tuple_for_header@1",
      "stack_in": [
        "twm.arr#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "i#0"
      ]
    },
    "1220": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "i#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "i#0",
        "3"
      ]
    },
    "1222": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1223": {
      "op": "bz mutate_local_tuple_after_for@4",
      "stack_out": [
        "twm.arr#0",
        "i#0"
      ]
    },
    "1226": {
      "block": "mutate_local_tuple_for_body@2",
      "stack_in": [
        "twm.arr#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "twm.arr#0"
      ]
    },
    "1228": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1231": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0"
      ]
    },
    "1233": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0",
        "i#0 (copy)",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "1234": {
      "op": "cover 2",
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0 (copy)"
      ]
    },
    "1236": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "i#0",
        "i#0 (copy)",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0 (copy)",
        "8"
      ]
    },
    "1237": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0",
        "item_offset%0#0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1238": {
      "op": "intc_1 // 8",
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "8"
      ]
    },
    "1239": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "i#0",
        "reinterpret_biguint%0#0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "i#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "1240": {
      "op": "swap",
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "reinterpret_biguint%0#0",
        "i#0"
      ]
    },
    "1241": {
      "op": "itob",
      "defined_out": [
        "i#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ]
    },
    "1242": {
      "op": "b==",
      "defined_out": [
        "i#0",
        "tmp%1#0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "1243": {
      "op": "assert",
      "stack_out": [
        "twm.arr#0",
        "i#0"
      ]
    },
    "1244": {
      "block": "mutate_local_tuple_for_footer@3",
      "stack_in": [
        "twm.arr#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "i#0"
      ]
    },
    "1246": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1247": {
      "op": "+",
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "i#0"
      ]
    },
    "1248": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0"
      ]
    },
    "1250": {
      "op": "b mutate_local_tuple_for_header@1"
    },
    "1253": {
      "block": "mutate_local_tuple_after_for@4",
      "stack_in": [
        "twm.arr#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "twm.arr#0"
      ]
    },
    "1255": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "twm.arr#0",
        "0"
      ]
    },
    "1256": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0",
        "0x",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "twm.arr#0",
        "0",
        "0x"
      ]
    },
    "1257": {
      "op": "dup",
      "defined_out": [
        "\"\"",
        "0",
        "0x",
        "twm.arr#0"
      ],
      "stack_out": [
        "twm.arr#0",
        "i#0",
        "twm.arr#0",
        "0",
        "0x",
        "\"\""
      ]
    },
    "1258": {
      "op": "uncover 5"
    },
    "1260": {
      "op": "uncover 5"
    },
    "1262": {
      "retsub": true,
      "op": "retsub"
    },
    "1263": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method",
      "params": {},
      "block": "mutate_tuple_in_storage_currently_supported_method_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1264": {
      "op": "bytec 6 // \"twm\"",
      "defined_out": [
        "\"twm\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"twm\""
      ]
    },
    "1266": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1267": {
      "error": "check self.twm exists",
      "op": "assert // check self.twm exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1268": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1269": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "1270": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "item_start_offset%0#0"
      ]
    },
    "1271": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0"
      ]
    },
    "1272": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1273": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "1274": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1275": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "maybe_value%0#0"
      ]
    },
    "1276": {
      "op": "uncover 2",
      "stack_out": [
        "item_end_offset%0#0",
        "maybe_value%0#0",
        "item_start_offset%0#0"
      ]
    },
    "1278": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1280": {
      "op": "substring3",
      "defined_out": [
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0"
      ]
    },
    "1281": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "1284": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x"
      ]
    },
    "1285": {
      "op": "bytec 7 // 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "0x0000000000000001"
      ]
    },
    "1287": {
      "op": "concat",
      "defined_out": [
        "array%encoded%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1"
      ]
    },
    "1288": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "1289": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "1290": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "encoded%0#0"
      ]
    },
    "1291": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "1292": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1293": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "1294": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "1295": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1296": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1297": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1300": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1301": {
      "op": "concat",
      "defined_out": [
        "copy%1#0"
      ],
      "stack_out": [
        "copy%1#0"
      ]
    },
    "1302": {
      "op": "intc_0 // 0",
      "stack_out": [
        "copy%1#0",
        "0"
      ]
    },
    "1303": {
      "op": "bytec 6 // \"twm\"",
      "stack_out": [
        "copy%1#0",
        "0",
        "\"twm\""
      ]
    },
    "1305": {
      "op": "app_global_get_ex",
      "defined_out": [
        "copy%1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1306": {
      "error": "check self.twm exists",
      "op": "assert // check self.twm exists",
      "stack_out": [
        "copy%1#0",
        "maybe_value%1#0"
      ]
    },
    "1307": {
      "op": "dup",
      "defined_out": [
        "copy%1#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "copy%1#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "1308": {
      "op": "intc_3 // 2",
      "stack_out": [
        "copy%1#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "2"
      ]
    },
    "1309": {
      "op": "extract_uint16",
      "defined_out": [
        "copy%1#0",
        "item_start_offset%5#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "maybe_value%1#0",
        "item_start_offset%5#0"
      ]
    },
    "1310": {
      "op": "swap",
      "stack_out": [
        "copy%1#0",
        "item_start_offset%5#0",
        "maybe_value%1#0"
      ]
    },
    "1311": {
      "op": "dup",
      "stack_out": [
        "copy%1#0",
        "item_start_offset%5#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "1312": {
      "op": "len",
      "defined_out": [
        "copy%1#0",
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item_start_offset%5#0",
        "maybe_value%1#0",
        "item_end_offset%5#0"
      ]
    },
    "1313": {
      "op": "swap",
      "stack_out": [
        "copy%1#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0",
        "maybe_value%1#0"
      ]
    },
    "1314": {
      "op": "uncover 2",
      "stack_out": [
        "copy%1#0",
        "item_end_offset%5#0",
        "maybe_value%1#0",
        "item_start_offset%5#0"
      ]
    },
    "1316": {
      "op": "uncover 2",
      "stack_out": [
        "copy%1#0",
        "maybe_value%1#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "1318": {
      "op": "substring3",
      "defined_out": [
        "copy%1#0",
        "item1%3#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item1%3#0"
      ]
    },
    "1319": {
      "op": "dup",
      "defined_out": [
        "copy%1#0",
        "item1%3#0",
        "item1%3#0 (copy)"
      ],
      "stack_out": [
        "copy%1#0",
        "item1%3#0",
        "item1%3#0 (copy)"
      ]
    },
    "1320": {
      "op": "intc_0 // 0",
      "stack_out": [
        "copy%1#0",
        "item1%3#0",
        "item1%3#0 (copy)",
        "0"
      ]
    },
    "1321": {
      "op": "intc_1 // 8",
      "stack_out": [
        "copy%1#0",
        "item1%3#0",
        "item1%3#0 (copy)",
        "0",
        "8"
      ]
    },
    "1322": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "copy%1#0",
        "item0%4#0",
        "item1%3#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item1%3#0",
        "item0%4#0"
      ]
    },
    "1323": {
      "op": "btoi",
      "defined_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item1%3#0",
        "item0%5#0"
      ]
    },
    "1324": {
      "op": "swap",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0"
      ]
    },
    "1325": {
      "op": "dup",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item1%3#0 (copy)"
      ]
    },
    "1326": {
      "op": "intc_1 // 8",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item1%3#0 (copy)",
        "8"
      ]
    },
    "1327": {
      "op": "extract_uint16",
      "defined_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item_start_offset%6#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item_start_offset%6#0"
      ]
    },
    "1328": {
      "op": "swap",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item_start_offset%6#0",
        "item1%3#0"
      ]
    },
    "1329": {
      "op": "dup",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item_start_offset%6#0",
        "item1%3#0",
        "item1%3#0 (copy)"
      ]
    },
    "1330": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item1%3#0 (copy)",
        "item_start_offset%6#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item_start_offset%6#0",
        "item1%3#0",
        "item1%3#0 (copy)",
        "10"
      ]
    },
    "1332": {
      "op": "extract_uint16",
      "defined_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item_start_offset%6#0",
        "item1%3#0",
        "item_end_offset%6#0"
      ]
    },
    "1333": {
      "op": "dig 1",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item_start_offset%6#0",
        "item1%3#0",
        "item_end_offset%6#0",
        "item1%3#0 (copy)"
      ]
    },
    "1335": {
      "op": "uncover 3",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item_end_offset%6#0",
        "item1%3#0 (copy)",
        "item_start_offset%6#0"
      ]
    },
    "1337": {
      "op": "uncover 2",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item1%3#0 (copy)",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "1339": {
      "op": "substring3",
      "defined_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item1%4#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item1%4#0"
      ]
    },
    "1340": {
      "op": "extract 2 0",
      "defined_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item1%5#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item1%5#0"
      ]
    },
    "1343": {
      "op": "swap",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item1%3#0"
      ]
    },
    "1344": {
      "op": "dup",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item1%3#0",
        "item1%3#0 (copy)"
      ]
    },
    "1345": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item1%3#0",
        "item1%3#0 (copy)",
        "10"
      ]
    },
    "1347": {
      "op": "extract_uint16",
      "defined_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item1%5#0",
        "item_start_offset%7#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item1%3#0",
        "item_start_offset%7#0"
      ]
    },
    "1348": {
      "op": "swap",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item_start_offset%7#0",
        "item1%3#0"
      ]
    },
    "1349": {
      "op": "dup",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item_start_offset%7#0",
        "item1%3#0",
        "item1%3#0 (copy)"
      ]
    },
    "1350": {
      "op": "len",
      "defined_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%3#0",
        "item1%5#0",
        "item_end_offset%7#0",
        "item_start_offset%7#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item_start_offset%7#0",
        "item1%3#0",
        "item_end_offset%7#0"
      ]
    },
    "1351": {
      "op": "swap",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "item1%3#0"
      ]
    },
    "1352": {
      "op": "uncover 2",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item_end_offset%7#0",
        "item1%3#0",
        "item_start_offset%7#0"
      ]
    },
    "1354": {
      "op": "uncover 2",
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item1%3#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0"
      ]
    },
    "1356": {
      "op": "substring3",
      "defined_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item2%2#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item2%2#0"
      ]
    },
    "1357": {
      "op": "extract 2 0",
      "defined_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item2%3#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item0%5#0",
        "item1%5#0",
        "item2%3#0"
      ]
    },
    "1360": {
      "op": "uncover 2",
      "stack_out": [
        "copy%1#0",
        "item1%5#0",
        "item2%3#0",
        "item0%5#0"
      ]
    },
    "1362": {
      "op": "itob",
      "defined_out": [
        "copy%1#0",
        "item1%5#0",
        "item2%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "item1%5#0",
        "item2%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "1363": {
      "op": "cover 2",
      "stack_out": [
        "copy%1#0",
        "val_as_bytes%0#0",
        "item1%5#0",
        "item2%3#0"
      ]
    },
    "1365": {
      "op": "dig 1",
      "defined_out": [
        "copy%1#0",
        "item1%5#0",
        "item1%5#0 (copy)",
        "item2%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "val_as_bytes%0#0",
        "item1%5#0",
        "item2%3#0",
        "item1%5#0 (copy)"
      ]
    },
    "1367": {
      "op": "len",
      "defined_out": [
        "copy%1#0",
        "item1%5#0",
        "item2%3#0",
        "length%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "val_as_bytes%0#0",
        "item1%5#0",
        "item2%3#0",
        "length%0#0"
      ]
    },
    "1368": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "copy%1#0",
        "item1%5#0",
        "item2%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "val_as_bytes%0#0",
        "item1%5#0",
        "item2%3#0",
        "as_bytes%1#0"
      ]
    },
    "1369": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%1#0",
        "item1%5#0",
        "item2%3#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "val_as_bytes%0#0",
        "item1%5#0",
        "item2%3#0",
        "length_uint16%0#0"
      ]
    },
    "1372": {
      "op": "uncover 2",
      "stack_out": [
        "copy%1#0",
        "val_as_bytes%0#0",
        "item2%3#0",
        "length_uint16%0#0",
        "item1%5#0"
      ]
    },
    "1374": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "encoded_value%0#0",
        "item2%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "val_as_bytes%0#0",
        "item2%3#0",
        "encoded_value%0#0"
      ]
    },
    "1375": {
      "op": "cover 2",
      "stack_out": [
        "copy%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "item2%3#0"
      ]
    },
    "1377": {
      "op": "dup",
      "defined_out": [
        "copy%1#0",
        "encoded_value%0#0",
        "item2%3#0",
        "item2%3#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "item2%3#0",
        "item2%3#0 (copy)"
      ]
    },
    "1378": {
      "op": "len",
      "defined_out": [
        "copy%1#0",
        "encoded_value%0#0",
        "item2%3#0",
        "length%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "item2%3#0",
        "length%1#0"
      ]
    },
    "1379": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "copy%1#0",
        "encoded_value%0#0",
        "item2%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "item2%3#0",
        "as_bytes%2#0"
      ]
    },
    "1380": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%1#0",
        "encoded_value%0#0",
        "item2%3#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "item2%3#0",
        "length_uint16%1#0"
      ]
    },
    "1383": {
      "op": "swap",
      "stack_out": [
        "copy%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "length_uint16%1#0",
        "item2%3#0"
      ]
    },
    "1384": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0"
      ]
    },
    "1385": {
      "op": "cover 2",
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1387": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "1388": {
      "op": "swap",
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "1389": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "1390": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "copy%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "12"
      ]
    },
    "1392": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "copy%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%3#0"
      ]
    },
    "1393": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "1396": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1397": {
      "op": "dig 1",
      "defined_out": [
        "copy%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1399": {
      "op": "len",
      "defined_out": [
        "copy%1#0",
        "data_length%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0"
      ]
    },
    "1400": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0",
        "12"
      ]
    },
    "1402": {
      "op": "+",
      "defined_out": [
        "copy%1#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "1403": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "copy%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%4#0"
      ]
    },
    "1404": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "1407": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1408": {
      "op": "swap",
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ]
    },
    "1409": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1410": {
      "op": "swap",
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0"
      ]
    },
    "1411": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1412": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "copy%1#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "4"
      ]
    },
    "1414": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "copy%1#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "as_bytes%5#0"
      ]
    },
    "1415": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%2#0"
      ]
    },
    "1418": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%2#0",
        "0x"
      ]
    },
    "1419": {
      "op": "swap",
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "0x",
        "offset_as_uint16%2#0"
      ]
    },
    "1420": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1421": {
      "op": "dig 2",
      "defined_out": [
        "copy%1#0",
        "copy%1#0 (copy)",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "copy%1#0 (copy)"
      ]
    },
    "1423": {
      "op": "len",
      "defined_out": [
        "copy%1#0",
        "data_length%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "data_length%2#0"
      ]
    },
    "1424": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "data_length%2#0",
        "4"
      ]
    },
    "1426": {
      "op": "+",
      "defined_out": [
        "copy%1#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "current_tail_offset%4#0"
      ]
    },
    "1427": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "as_bytes%6#0"
      ]
    },
    "1428": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "offset_as_uint16%3#0"
      ]
    },
    "1431": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "copy%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1432": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "copy%1#0"
      ]
    },
    "1434": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1435": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1436": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1437": {
      "op": "bytec 6 // \"twm\"",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "\"twm\""
      ]
    },
    "1439": {
      "op": "swap",
      "stack_out": [
        "\"twm\"",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1440": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1441": {
      "retsub": true,
      "op": "retsub"
    },
    "1442": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests",
      "params": {},
      "block": "run_tests_block@0",
      "stack_in": [],
      "op": "bytec_2 // \"Hi\"",
      "defined_out": [
        "\"Hi\""
      ],
      "stack_out": [
        "\"Hi\""
      ]
    },
    "1443": {
      "op": "bytec_3 // \"There\"",
      "defined_out": [
        "\"Hi\"",
        "\"There\""
      ],
      "stack_out": [
        "\"Hi\"",
        "\"There\""
      ]
    },
    "1444": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_swap",
      "op": "callsub test_swap",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "1447": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "1448": {
      "op": "bytec_3 // \"There\"",
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%0#0",
        "\"There\""
      ]
    },
    "1449": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1450": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "1451": {
      "op": "bytec_2 // \"Hi\"",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%1#0",
        "\"Hi\""
      ]
    },
    "1452": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1453": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1454": {
      "op": "assert",
      "stack_out": []
    },
    "1455": {
      "op": "bytec_3 // \"There\"",
      "stack_out": [
        "\"There\""
      ]
    },
    "1456": {
      "op": "dup",
      "stack_out": [
        "\"There\"",
        "\"There\""
      ]
    },
    "1457": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1458": {
      "op": "assert",
      "stack_out": []
    },
    "1459": {
      "op": "bytec_2 // \"Hi\"",
      "stack_out": [
        "\"Hi\""
      ]
    },
    "1460": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"Hi\"",
        "0"
      ],
      "stack_out": [
        "\"Hi\"",
        "0"
      ]
    },
    "1461": {
      "op": "intc_3 // 2",
      "defined_out": [
        "\"Hi\"",
        "0",
        "2"
      ],
      "stack_out": [
        "\"Hi\"",
        "0",
        "2"
      ]
    },
    "1462": {
      "op": "intc_2 // 1",
      "defined_out": [
        "\"Hi\"",
        "0",
        "1",
        "2"
      ],
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1"
      ]
    },
    "1463": {
      "op": "bytec_2 // \"Hi\"",
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1",
        "\"Hi\""
      ]
    },
    "1464": {
      "op": "bytec_3 // \"There\"",
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1",
        "\"Hi\"",
        "\"There\""
      ]
    },
    "1465": {
      "op": "dup",
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1",
        "\"Hi\"",
        "\"There\"",
        "\"There\""
      ]
    },
    "1466": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_rearrange",
      "op": "callsub test_rearrange",
      "defined_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ]
    },
    "1469": {
      "op": "cover 4",
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0"
      ]
    },
    "1471": {
      "op": "cover 3",
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%3#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0"
      ]
    },
    "1473": {
      "op": "cover 2",
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%3#0",
        "tuple_assignment%2#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0"
      ]
    },
    "1475": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%3#0",
        "tuple_assignment%2#0",
        "tuple_assignment%1#0",
        "a#0"
      ]
    },
    "1476": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%3#0",
        "a#0",
        "tuple_assignment%2#0",
        "b#0"
      ]
    },
    "1478": {
      "op": "cover 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "tuple_assignment%4#0",
        "b#0",
        "tuple_assignment%3#0",
        "a#0",
        "c#0"
      ]
    },
    "1480": {
      "op": "cover 4",
      "stack_out": [
        "c#0",
        "tuple_assignment%4#0",
        "b#0",
        "tuple_assignment%3#0",
        "a#0"
      ]
    },
    "1482": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "c#0",
        "tuple_assignment%4#0",
        "b#0",
        "a#0",
        "d#0"
      ]
    },
    "1483": {
      "op": "cover 4",
      "stack_out": [
        "d#0",
        "c#0",
        "tuple_assignment%4#0",
        "b#0",
        "a#0"
      ]
    },
    "1485": {
      "op": "uncover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ],
      "stack_out": [
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "e#0"
      ]
    },
    "1487": {
      "op": "cover 4",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0"
      ]
    },
    "1489": {
      "op": "bytec_2 // \"Hi\"",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "\"Hi\""
      ]
    },
    "1490": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "b#0",
        "tmp%4#0"
      ]
    },
    "1491": {
      "op": "swap",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%4#0",
        "b#0"
      ]
    },
    "1492": {
      "op": "intc_0 // 0",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%4#0",
        "b#0",
        "0"
      ]
    },
    "1493": {
      "op": "==",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1494": {
      "op": "&&",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%6#0"
      ]
    },
    "1495": {
      "op": "assert",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0"
      ]
    },
    "1496": {
      "op": "intc_3 // 2",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "2"
      ]
    },
    "1497": {
      "op": "==",
      "defined_out": [
        "d#0",
        "e#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "tmp%7#0"
      ]
    },
    "1498": {
      "op": "swap",
      "stack_out": [
        "e#0",
        "tmp%7#0",
        "d#0"
      ]
    },
    "1499": {
      "op": "intc_2 // 1",
      "stack_out": [
        "e#0",
        "tmp%7#0",
        "d#0",
        "1"
      ]
    },
    "1500": {
      "op": "==",
      "defined_out": [
        "e#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "e#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1501": {
      "op": "&&",
      "defined_out": [
        "e#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "e#0",
        "tmp%9#0"
      ]
    },
    "1502": {
      "op": "assert",
      "stack_out": [
        "e#0"
      ]
    },
    "1503": {
      "op": "bytec_3 // \"There\"",
      "stack_out": [
        "e#0",
        "\"There\""
      ]
    },
    "1504": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1505": {
      "op": "assert",
      "stack_out": []
    },
    "1506": {
      "op": "intc_2 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1507": {
      "op": "intc_3 // 2",
      "stack_out": [
        "1",
        "2"
      ]
    },
    "1508": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_intrinsics",
      "op": "callsub test_intrinsics",
      "stack_out": []
    },
    "1511": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_slicing",
      "op": "callsub test_nested_slicing"
    },
    "1514": {
      "op": "intc_2 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1515": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "1516": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "op": "callsub test_nested_singles",
      "stack_out": []
    },
    "1519": {
      "op": "intc_2 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1520": {
      "op": "intc_0 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "1521": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "op": "callsub test_nested_singles",
      "stack_out": []
    },
    "1524": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_mutation",
      "op": "callsub test_nested_mutation"
    },
    "1527": {
      "op": "intc_2 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1528": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "1529": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1530": {
      "op": "bytec_2 // \"Hi\"",
      "stack_out": [
        "tmp%11#0",
        "\"Hi\""
      ]
    },
    "1531": {
      "op": "dup",
      "stack_out": [
        "tmp%11#0",
        "\"Hi\"",
        "\"Hi\""
      ]
    },
    "1532": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1533": {
      "op": "bytec_3 // \"There\"",
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "\"There\""
      ]
    },
    "1534": {
      "op": "dup",
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "\"There\"",
        "\"There\""
      ]
    },
    "1535": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1536": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%14#0"
      ]
    },
    "1537": {
      "op": "&&",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1538": {
      "op": "assert",
      "stack_out": []
    },
    "1539": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_iteration",
      "op": "callsub test_nested_iteration"
    },
    "1542": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested",
      "op": "callsub test_single_evaluation_nested"
    },
    "1545": {
      "op": "intc_2 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1546": {
      "retsub": true,
      "op": "retsub"
    },
    "1547": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params",
      "params": {
        "args.0#0": "bytes",
        "args.1.0#0": "bytes",
        "args.1.1.0#0": "uint64"
      },
      "block": "nested_tuple_params",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "1550": {
      "block": "nested_tuple_params_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "s#0"
      ],
      "stack_out": [
        "s#0"
      ]
    },
    "1552": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "b#0"
      ]
    },
    "1554": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0"
      ]
    },
    "1556": {
      "op": "swap",
      "stack_out": [
        "s#0",
        "u#0",
        "b#0"
      ]
    },
    "1557": {
      "op": "uncover 2",
      "stack_out": [
        "u#0",
        "b#0",
        "s#0"
      ]
    },
    "1559": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "s#0",
        "u#0"
      ]
    },
    "1561": {
      "retsub": true,
      "op": "retsub"
    },
    "1562": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple",
      "params": {
        "args.a#0": "uint64",
        "args.b#0": "bytes",
        "args.c#0": "bytes"
      },
      "block": "named_tuple",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "1565": {
      "block": "named_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1567": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "1569": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "1571": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "a#0"
      ]
    },
    "1573": {
      "op": "uncover 2",
      "stack_out": [
        "c#0",
        "a#0",
        "b#0"
      ]
    },
    "1575": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "1577": {
      "retsub": true,
      "op": "retsub"
    },
    "1578": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params",
      "params": {
        "args.foo#0": "uint64",
        "args.foo_arc#0": "bytes",
        "args.child.a#0": "uint64",
        "args.child.b#0": "bytes",
        "args.child.c#0": "bytes"
      },
      "block": "nested_named_tuple_params",
      "stack_in": [],
      "op": "proto 5 5"
    },
    "1581": {
      "block": "nested_named_tuple_params_block@0",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "foo#0"
      ],
      "stack_out": [
        "foo#0"
      ]
    },
    "1583": {
      "op": "frame_dig -4",
      "defined_out": [
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0"
      ]
    },
    "1585": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0"
      ]
    },
    "1587": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b#0",
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0"
      ]
    },
    "1589": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "1591": {
      "op": "uncover 4",
      "stack_out": [
        "foo_arc#0",
        "a#0",
        "b#0",
        "c#0",
        "foo#0"
      ]
    },
    "1593": {
      "op": "uncover 4",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "foo#0",
        "foo_arc#0"
      ]
    },
    "1595": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "c#0",
        "foo#0",
        "foo_arc#0",
        "a#0"
      ]
    },
    "1597": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0"
      ]
    },
    "1599": {
      "op": "uncover 4",
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "1601": {
      "retsub": true,
      "op": "retsub"
    },
    "1602": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.build_nested",
      "params": {},
      "block": "build_nested_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1603": {
      "op": "bytec 4 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"build_nested_call_count\""
      ]
    },
    "1605": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1606": {
      "error": "check self.build_nested_call_count exists",
      "op": "assert // check self.build_nested_call_count exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1607": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1608": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "1609": {
      "op": "bytec 4 // \"build_nested_call_count\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"build_nested_call_count\""
      ]
    },
    "1611": {
      "op": "swap",
      "stack_out": [
        "\"build_nested_call_count\"",
        "materialized_values%0#0"
      ]
    },
    "1612": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1613": {
      "op": "bytec 12 // \"hi\"",
      "defined_out": [
        "\"hi\""
      ],
      "stack_out": [
        "\"hi\""
      ]
    },
    "1615": {
      "op": "intc_2 // 1",
      "stack_out": [
        "\"hi\"",
        "1"
      ]
    },
    "1616": {
      "op": "pushbytes 0x686d6d6d",
      "defined_out": [
        "\"hi\"",
        "0x686d6d6d",
        "1"
      ],
      "stack_out": [
        "\"hi\"",
        "1",
        "0x686d6d6d"
      ]
    },
    "1622": {
      "retsub": true,
      "op": "retsub"
    },
    "1623": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested",
      "params": {},
      "block": "test_single_evaluation_nested",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1626": {
      "block": "test_single_evaluation_nested_block@0",
      "stack_in": [],
      "op": "bytec 4 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\""
      ],
      "stack_out": [
        "\"build_nested_call_count\""
      ]
    },
    "1628": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "\"build_nested_call_count\"",
        "0"
      ]
    },
    "1629": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1630": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.build_nested",
      "op": "callsub build_nested",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ]
    },
    "1633": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "1635": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "1636": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1637": {
      "op": "cover 3",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "1639": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0 (copy)",
        "awst_tmp%0#0"
      ]
    },
    "1640": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1641": {
      "op": "dig 1",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "awst_tmp%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "tmp%0#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1643": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%0#0",
        "awst_tmp%1#0 (copy)",
        "awst_tmp%1#0"
      ]
    },
    "1645": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1646": {
      "op": "&&",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%2#0"
      ]
    },
    "1647": {
      "op": "dig 1",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1649": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "awst_tmp%2#0"
      ]
    },
    "1651": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1652": {
      "op": "||",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1653": {
      "op": "bz test_single_evaluation_nested_ternary_false@2",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1656": {
      "block": "test_single_evaluation_nested_ternary_true@1",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0"
      ]
    },
    "1658": {
      "block": "test_single_evaluation_nested_ternary_merge@3",
      "stack_in": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0"
      ],
      "op": "bytec 12 // \"hi\"",
      "defined_out": [
        "\"hi\"",
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0",
        "\"hi\""
      ]
    },
    "1660": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "1661": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1662": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0"
      ]
    },
    "1663": {
      "op": "bytec 4 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0",
        "\"build_nested_call_count\""
      ]
    },
    "1665": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1666": {
      "error": "check self.build_nested_call_count exists",
      "op": "assert // check self.build_nested_call_count exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1667": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "1668": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "1669": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1670": {
      "retsub": true,
      "op": "retsub"
    },
    "1671": {
      "block": "test_single_evaluation_nested_ternary_false@2",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.build_nested",
      "op": "callsub build_nested",
      "defined_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.0.1#1",
        "ternary_result%0.1#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0",
        "ternary_result%0.0.1#1",
        "ternary_result%0.1#1"
      ]
    },
    "1674": {
      "op": "popn 2",
      "defined_out": [
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0"
      ]
    },
    "1676": {
      "op": "b test_single_evaluation_nested_ternary_merge@3"
    },
    "1679": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1681": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "1682": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1683": {
      "op": "bz approval_program_bare_routing@19",
      "stack_out": []
    },
    "1686": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1689": {
      "op": "pushbytes 0x383e1e8b // method \"store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void\"",
      "defined_out": [
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)"
      ]
    },
    "1695": {
      "op": "pushbytes 0x68cbedd7 // method \"load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])\"",
      "defined_out": [
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))"
      ]
    },
    "1701": {
      "op": "pushbytes 0x2263fcf1 // method \"store_tuple_in_box((uint64,uint64))void\"",
      "defined_out": [
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)"
      ]
    },
    "1707": {
      "op": "pushbytes 0xbfc37339 // method \"is_tuple_in_box((uint64,uint64))bool\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)"
      ]
    },
    "1713": {
      "op": "pushbytes 0xc660beaa // method \"load_tuple_from_box((uint64,uint64))(uint64,uint64)\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))"
      ]
    },
    "1719": {
      "op": "pushbytes 0xb6c215ff // method \"maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))"
      ]
    },
    "1725": {
      "op": "pushbytes 0x907c9042 // method \"load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))"
      ]
    },
    "1731": {
      "op": "pushbytes 0xd51c7174 // method \"load_tuple_from_local_state_or_default(string)(uint64,uint64)\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))"
      ]
    },
    "1737": {
      "op": "pushbytes 0xf8cc2b50 // method \"mutate_local_tuple()(uint64[],(uint64,byte[],string))\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))"
      ]
    },
    "1743": {
      "op": "pushbytes 0x3d486db0 // method \"mutate_tuple_in_storage_currently_supported_method()void\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)"
      ]
    },
    "1749": {
      "op": "pushbytes 0x9e5a3ba7 // method \"run_tests()bool\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)"
      ]
    },
    "1755": {
      "op": "pushbytes 0xcea0521b // method \"nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))"
      ]
    },
    "1761": {
      "op": "pushbytes 0x373f5b24 // method \"named_tuple((uint64,byte[],string))(uint64,byte[],string)\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))"
      ]
    },
    "1767": {
      "op": "pushbytes 0xec593096 // method \"nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))"
      ]
    },
    "1773": {
      "op": "uncover 14",
      "stack_out": [
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "tmp%2#0"
      ]
    },
    "1775": {
      "op": "match approval_program_store_tuple_route@3 approval_program_load_tuple_route@4 approval_program_store_tuple_in_box_route@5 approval_program_is_tuple_in_box_route@6 approval_program_load_tuple_from_box_route@7 approval_program_maybe_load_tuple_from_box_route@8 approval_program_load_tuple_from_box_or_default_route@9 approval_program_load_tuple_from_local_state_or_default_route@10 approval_program_mutate_local_tuple_route@11 approval_program_mutate_tuple_in_storage_currently_supported_method_route@12 approval_program_run_tests_route@13 approval_program_nested_tuple_params_route@14 approval_program_named_tuple_route@15 approval_program_nested_named_tuple_params_route@16",
      "stack_out": []
    },
    "1805": {
      "block": "approval_program_after_if_else@25",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1806": {
      "block": "approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "1807": {
      "block": "approval_program_nested_named_tuple_params_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1809": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "NoOp"
      ]
    },
    "1810": {
      "op": "==",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1811": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1812": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1814": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "0"
      ]
    },
    "1815": {
      "op": "!=",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "1816": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1817": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1820": {
      "op": "dup",
      "defined_out": [
        "tmp%74#0",
        "tmp%74#0 (copy)"
      ],
      "stack_out": [
        "tmp%74#0",
        "tmp%74#0 (copy)"
      ]
    },
    "1821": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%74#0",
        "tmp%74#0 (copy)",
        "0"
      ]
    },
    "1822": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "tmp%74#0",
        "tmp%74#0 (copy)"
      ],
      "stack_out": [
        "tmp%74#0",
        "tmp%74#0 (copy)",
        "0",
        "8"
      ]
    },
    "1823": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%23#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0",
        "item0%23#0"
      ]
    },
    "1824": {
      "op": "btoi",
      "defined_out": [
        "item0%24#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0",
        "item0%24#0"
      ]
    },
    "1825": {
      "op": "swap",
      "stack_out": [
        "item0%24#0",
        "tmp%74#0"
      ]
    },
    "1826": {
      "op": "dup",
      "stack_out": [
        "item0%24#0",
        "tmp%74#0",
        "tmp%74#0 (copy)"
      ]
    },
    "1827": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%24#0",
        "tmp%74#0",
        "tmp%74#0 (copy)",
        "8"
      ]
    },
    "1828": {
      "op": "dup",
      "stack_out": [
        "item0%24#0",
        "tmp%74#0",
        "tmp%74#0 (copy)",
        "8",
        "8"
      ]
    },
    "1829": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%24#0",
        "item1%18#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "item0%24#0",
        "tmp%74#0",
        "item1%18#0"
      ]
    },
    "1830": {
      "op": "swap",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "tmp%74#0"
      ]
    },
    "1831": {
      "op": "dup",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "tmp%74#0",
        "tmp%74#0 (copy)"
      ]
    },
    "1832": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%24#0",
        "item1%18#0",
        "tmp%74#0",
        "tmp%74#0 (copy)"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "tmp%74#0",
        "tmp%74#0 (copy)",
        "16"
      ]
    },
    "1834": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%24#0",
        "item1%18#0",
        "item_start_offset%10#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "tmp%74#0",
        "item_start_offset%10#0"
      ]
    },
    "1835": {
      "op": "swap",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item_start_offset%10#0",
        "tmp%74#0"
      ]
    },
    "1836": {
      "op": "dup",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item_start_offset%10#0",
        "tmp%74#0",
        "tmp%74#0 (copy)"
      ]
    },
    "1837": {
      "op": "len",
      "defined_out": [
        "item0%24#0",
        "item1%18#0",
        "item_end_offset%10#0",
        "item_start_offset%10#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item_start_offset%10#0",
        "tmp%74#0",
        "item_end_offset%10#0"
      ]
    },
    "1838": {
      "op": "swap",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item_start_offset%10#0",
        "item_end_offset%10#0",
        "tmp%74#0"
      ]
    },
    "1839": {
      "op": "uncover 2",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item_end_offset%10#0",
        "tmp%74#0",
        "item_start_offset%10#0"
      ]
    },
    "1841": {
      "op": "uncover 2",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "tmp%74#0",
        "item_start_offset%10#0",
        "item_end_offset%10#0"
      ]
    },
    "1843": {
      "op": "substring3",
      "defined_out": [
        "item0%24#0",
        "item1%18#0",
        "item2%5#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item2%5#0"
      ]
    },
    "1844": {
      "op": "dup",
      "defined_out": [
        "item0%24#0",
        "item1%18#0",
        "item2%5#0",
        "item2%5#0 (copy)"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item2%5#0",
        "item2%5#0 (copy)"
      ]
    },
    "1845": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "0"
      ]
    },
    "1846": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "0",
        "8"
      ]
    },
    "1847": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%24#0",
        "item0%25#0",
        "item1%18#0",
        "item2%5#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item2%5#0",
        "item0%25#0"
      ]
    },
    "1848": {
      "op": "btoi",
      "defined_out": [
        "item0%24#0",
        "item0%26#0",
        "item1%18#0",
        "item2%5#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item2%5#0",
        "item0%26#0"
      ]
    },
    "1849": {
      "op": "swap",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item2%5#0"
      ]
    },
    "1850": {
      "op": "dup",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item2%5#0",
        "item2%5#0 (copy)"
      ]
    },
    "1851": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "8"
      ]
    },
    "1852": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%24#0",
        "item0%26#0",
        "item1%18#0",
        "item2%5#0",
        "item_start_offset%11#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item2%5#0",
        "item_start_offset%11#0"
      ]
    },
    "1853": {
      "op": "swap",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item_start_offset%11#0",
        "item2%5#0"
      ]
    },
    "1854": {
      "op": "dup",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item_start_offset%11#0",
        "item2%5#0",
        "item2%5#0 (copy)"
      ]
    },
    "1855": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "item0%24#0",
        "item0%26#0",
        "item1%18#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "item_start_offset%11#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item_start_offset%11#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "10"
      ]
    },
    "1857": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%24#0",
        "item0%26#0",
        "item1%18#0",
        "item2%5#0",
        "item_end_offset%11#0",
        "item_start_offset%11#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item_start_offset%11#0",
        "item2%5#0",
        "item_end_offset%11#0"
      ]
    },
    "1858": {
      "op": "dig 1",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item_start_offset%11#0",
        "item2%5#0",
        "item_end_offset%11#0",
        "item2%5#0 (copy)"
      ]
    },
    "1860": {
      "op": "uncover 3",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item2%5#0",
        "item_end_offset%11#0",
        "item2%5#0 (copy)",
        "item_start_offset%11#0"
      ]
    },
    "1862": {
      "op": "uncover 2",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "item_start_offset%11#0",
        "item_end_offset%11#0"
      ]
    },
    "1864": {
      "op": "substring3",
      "defined_out": [
        "item0%24#0",
        "item0%26#0",
        "item1%18#0",
        "item1%19#0",
        "item2%5#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item2%5#0",
        "item1%19#0"
      ]
    },
    "1865": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%24#0",
        "item0%26#0",
        "item1%18#0",
        "item1%20#0",
        "item2%5#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item2%5#0",
        "item1%20#0"
      ]
    },
    "1868": {
      "op": "swap",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item2%5#0"
      ]
    },
    "1869": {
      "op": "dup",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item2%5#0",
        "item2%5#0 (copy)"
      ]
    },
    "1870": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "10"
      ]
    },
    "1872": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%24#0",
        "item0%26#0",
        "item1%18#0",
        "item1%20#0",
        "item2%5#0",
        "item_start_offset%12#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item2%5#0",
        "item_start_offset%12#0"
      ]
    },
    "1873": {
      "op": "swap",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item_start_offset%12#0",
        "item2%5#0"
      ]
    },
    "1874": {
      "op": "dup",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item_start_offset%12#0",
        "item2%5#0",
        "item2%5#0 (copy)"
      ]
    },
    "1875": {
      "op": "len",
      "defined_out": [
        "item0%24#0",
        "item0%26#0",
        "item1%18#0",
        "item1%20#0",
        "item2%5#0",
        "item_end_offset%12#0",
        "item_start_offset%12#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item_start_offset%12#0",
        "item2%5#0",
        "item_end_offset%12#0"
      ]
    },
    "1876": {
      "op": "swap",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item_start_offset%12#0",
        "item_end_offset%12#0",
        "item2%5#0"
      ]
    },
    "1877": {
      "op": "uncover 2",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item_end_offset%12#0",
        "item2%5#0",
        "item_start_offset%12#0"
      ]
    },
    "1879": {
      "op": "uncover 2",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item2%5#0",
        "item_start_offset%12#0",
        "item_end_offset%12#0"
      ]
    },
    "1881": {
      "op": "substring3",
      "defined_out": [
        "item0%24#0",
        "item0%26#0",
        "item1%18#0",
        "item1%20#0",
        "item2%6#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item2%6#0"
      ]
    },
    "1882": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%24#0",
        "item0%26#0",
        "item1%18#0",
        "item1%20#0",
        "item2%7#0"
      ],
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item2%7#0"
      ]
    },
    "1885": {
      "op": "uncover 4",
      "stack_out": [
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item2%7#0",
        "item0%24#0"
      ]
    },
    "1887": {
      "op": "uncover 4",
      "stack_out": [
        "item0%26#0",
        "item1%20#0",
        "item2%7#0",
        "item0%24#0",
        "item1%18#0"
      ]
    },
    "1889": {
      "op": "uncover 4",
      "stack_out": [
        "item1%20#0",
        "item2%7#0",
        "item0%24#0",
        "item1%18#0",
        "item0%26#0"
      ]
    },
    "1891": {
      "op": "uncover 4",
      "stack_out": [
        "item2%7#0",
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0"
      ]
    },
    "1893": {
      "op": "uncover 4",
      "stack_out": [
        "item0%24#0",
        "item1%18#0",
        "item0%26#0",
        "item1%20#0",
        "item2%7#0"
      ]
    },
    "1895": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params",
      "op": "callsub nested_named_tuple_params",
      "defined_out": [
        "elements_to_encode%25#0",
        "elements_to_encode%26#0",
        "elements_to_encode%27#0",
        "elements_to_encode%28#0",
        "elements_to_encode%29#0"
      ],
      "stack_out": [
        "elements_to_encode%25#0",
        "elements_to_encode%26#0",
        "elements_to_encode%27#0",
        "elements_to_encode%28#0",
        "elements_to_encode%29#0"
      ]
    },
    "1898": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%29#0",
        "elements_to_encode%25#0",
        "elements_to_encode%26#0",
        "elements_to_encode%27#0",
        "elements_to_encode%28#0"
      ]
    },
    "1900": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%29#0",
        "elements_to_encode%28#0",
        "elements_to_encode%25#0",
        "elements_to_encode%26#0",
        "elements_to_encode%27#0"
      ]
    },
    "1902": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%29#0",
        "elements_to_encode%28#0",
        "elements_to_encode%27#0",
        "elements_to_encode%25#0",
        "elements_to_encode%26#0"
      ]
    },
    "1904": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%26#0",
        "elements_to_encode%29#0",
        "elements_to_encode%28#0",
        "elements_to_encode%27#0",
        "elements_to_encode%25#0"
      ]
    },
    "1906": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%26#0",
        "elements_to_encode%27#0",
        "elements_to_encode%28#0",
        "elements_to_encode%29#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "elements_to_encode%29#0",
        "elements_to_encode%28#0",
        "elements_to_encode%27#0",
        "val_as_bytes%13#0"
      ]
    },
    "1907": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "elements_to_encode%29#0",
        "elements_to_encode%28#0",
        "elements_to_encode%27#0"
      ]
    },
    "1909": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%26#0",
        "elements_to_encode%28#0",
        "elements_to_encode%29#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "elements_to_encode%29#0",
        "elements_to_encode%28#0",
        "val_as_bytes%14#0"
      ]
    },
    "1910": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "elements_to_encode%29#0",
        "elements_to_encode%28#0"
      ]
    },
    "1912": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%26#0",
        "elements_to_encode%28#0",
        "elements_to_encode%28#0 (copy)",
        "elements_to_encode%29#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "elements_to_encode%29#0",
        "elements_to_encode%28#0",
        "elements_to_encode%28#0 (copy)"
      ]
    },
    "1913": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%26#0",
        "elements_to_encode%28#0",
        "elements_to_encode%29#0",
        "length%8#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "elements_to_encode%29#0",
        "elements_to_encode%28#0",
        "length%8#0"
      ]
    },
    "1914": {
      "op": "itob",
      "defined_out": [
        "as_bytes%22#0",
        "elements_to_encode%26#0",
        "elements_to_encode%28#0",
        "elements_to_encode%29#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "elements_to_encode%29#0",
        "elements_to_encode%28#0",
        "as_bytes%22#0"
      ]
    },
    "1915": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%26#0",
        "elements_to_encode%28#0",
        "elements_to_encode%29#0",
        "length_uint16%8#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "elements_to_encode%29#0",
        "elements_to_encode%28#0",
        "length_uint16%8#0"
      ]
    },
    "1918": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "elements_to_encode%29#0",
        "length_uint16%8#0",
        "elements_to_encode%28#0"
      ]
    },
    "1919": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%26#0",
        "elements_to_encode%29#0",
        "encoded_value%8#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "elements_to_encode%29#0",
        "encoded_value%8#0"
      ]
    },
    "1920": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%8#0",
        "val_as_bytes%14#0",
        "elements_to_encode%29#0"
      ]
    },
    "1922": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%26#0",
        "elements_to_encode%29#0",
        "elements_to_encode%29#0 (copy)",
        "encoded_value%8#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%8#0",
        "val_as_bytes%14#0",
        "elements_to_encode%29#0",
        "elements_to_encode%29#0 (copy)"
      ]
    },
    "1923": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%26#0",
        "elements_to_encode%29#0",
        "encoded_value%8#0",
        "length%9#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%8#0",
        "val_as_bytes%14#0",
        "elements_to_encode%29#0",
        "length%9#0"
      ]
    },
    "1924": {
      "op": "itob",
      "defined_out": [
        "as_bytes%23#0",
        "elements_to_encode%26#0",
        "elements_to_encode%29#0",
        "encoded_value%8#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%8#0",
        "val_as_bytes%14#0",
        "elements_to_encode%29#0",
        "as_bytes%23#0"
      ]
    },
    "1925": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%26#0",
        "elements_to_encode%29#0",
        "encoded_value%8#0",
        "length_uint16%9#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%8#0",
        "val_as_bytes%14#0",
        "elements_to_encode%29#0",
        "length_uint16%9#0"
      ]
    },
    "1928": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%8#0",
        "val_as_bytes%14#0",
        "length_uint16%9#0",
        "elements_to_encode%29#0"
      ]
    },
    "1929": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%26#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%8#0",
        "val_as_bytes%14#0",
        "encoded_value%9#0"
      ]
    },
    "1930": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "val_as_bytes%14#0"
      ]
    },
    "1932": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "elements_to_encode%26#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "val_as_bytes%14#0",
        "0x"
      ]
    },
    "1933": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "0x",
        "val_as_bytes%14#0"
      ]
    },
    "1934": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%58#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "encoded_tuple_buffer%58#0"
      ]
    },
    "1935": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%58#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "encoded_tuple_buffer%58#0",
        "12"
      ]
    },
    "1937": {
      "op": "itob",
      "defined_out": [
        "as_bytes%24#0",
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%58#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "encoded_tuple_buffer%58#0",
        "as_bytes%24#0"
      ]
    },
    "1938": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%58#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "offset_as_uint16%14#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "encoded_tuple_buffer%58#0",
        "offset_as_uint16%14#0"
      ]
    },
    "1941": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%59#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "encoded_tuple_buffer%59#0"
      ]
    },
    "1942": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%59#0",
        "encoded_value%8#0",
        "encoded_value%8#0 (copy)",
        "encoded_value%9#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "encoded_tuple_buffer%59#0",
        "encoded_value%8#0 (copy)"
      ]
    },
    "1944": {
      "op": "len",
      "defined_out": [
        "data_length%14#0",
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%59#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "encoded_tuple_buffer%59#0",
        "data_length%14#0"
      ]
    },
    "1945": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "encoded_tuple_buffer%59#0",
        "data_length%14#0",
        "12"
      ]
    },
    "1947": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%28#0",
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%59#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "encoded_tuple_buffer%59#0",
        "current_tail_offset%28#0"
      ]
    },
    "1948": {
      "op": "itob",
      "defined_out": [
        "as_bytes%25#0",
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%59#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "encoded_tuple_buffer%59#0",
        "as_bytes%25#0"
      ]
    },
    "1949": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%59#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "offset_as_uint16%15#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "encoded_tuple_buffer%59#0",
        "offset_as_uint16%15#0"
      ]
    },
    "1952": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%60#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_value%8#0",
        "encoded_tuple_buffer%60#0"
      ]
    },
    "1953": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%60#0",
        "encoded_value%8#0"
      ]
    },
    "1954": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%61#0",
        "encoded_value%9#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%61#0"
      ]
    },
    "1955": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%61#0",
        "encoded_value%9#0"
      ]
    },
    "1956": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%62#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%62#0"
      ]
    },
    "1957": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "elements_to_encode%26#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%62#0",
        "0x"
      ]
    },
    "1958": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%62#0",
        "0x",
        "val_as_bytes%13#0"
      ]
    },
    "1960": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%64#0"
      ],
      "stack_out": [
        "elements_to_encode%26#0",
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%64#0"
      ]
    },
    "1961": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%64#0",
        "elements_to_encode%26#0"
      ]
    },
    "1963": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%65#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%65#0"
      ]
    },
    "1964": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%65#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%65#0",
        "18"
      ]
    },
    "1966": {
      "op": "itob",
      "defined_out": [
        "as_bytes%26#0",
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%65#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%65#0",
        "as_bytes%26#0"
      ]
    },
    "1967": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%65#0",
        "offset_as_uint16%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%65#0",
        "offset_as_uint16%16#0"
      ]
    },
    "1970": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%66#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%62#0",
        "encoded_tuple_buffer%66#0"
      ]
    },
    "1971": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%66#0",
        "encoded_tuple_buffer%62#0"
      ]
    },
    "1972": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%67#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%67#0"
      ]
    },
    "1973": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%67#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%67#0",
        "0x151f7c75"
      ]
    },
    "1974": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%67#0"
      ]
    },
    "1975": {
      "op": "concat",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1976": {
      "op": "log",
      "stack_out": []
    },
    "1977": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1978": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "1981": {
      "block": "approval_program_named_tuple_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1983": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0",
        "NoOp"
      ]
    },
    "1984": {
      "op": "==",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1985": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1986": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1988": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "0"
      ]
    },
    "1989": {
      "op": "!=",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1990": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1991": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1994": {
      "op": "dup",
      "defined_out": [
        "tmp%68#0",
        "tmp%68#0 (copy)"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%68#0 (copy)"
      ]
    },
    "1995": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%68#0",
        "tmp%68#0 (copy)",
        "0"
      ]
    },
    "1996": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "tmp%68#0",
        "tmp%68#0 (copy)"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%68#0 (copy)",
        "0",
        "8"
      ]
    },
    "1997": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%21#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "item0%21#0"
      ]
    },
    "1998": {
      "op": "btoi",
      "defined_out": [
        "item0%22#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "item0%22#0"
      ]
    },
    "1999": {
      "op": "swap",
      "stack_out": [
        "item0%22#0",
        "tmp%68#0"
      ]
    },
    "2000": {
      "op": "dup",
      "stack_out": [
        "item0%22#0",
        "tmp%68#0",
        "tmp%68#0 (copy)"
      ]
    },
    "2001": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%22#0",
        "tmp%68#0",
        "tmp%68#0 (copy)",
        "8"
      ]
    },
    "2002": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%22#0",
        "item_start_offset%8#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "item0%22#0",
        "tmp%68#0",
        "item_start_offset%8#0"
      ]
    },
    "2003": {
      "op": "swap",
      "stack_out": [
        "item0%22#0",
        "item_start_offset%8#0",
        "tmp%68#0"
      ]
    },
    "2004": {
      "op": "dup",
      "stack_out": [
        "item0%22#0",
        "item_start_offset%8#0",
        "tmp%68#0",
        "tmp%68#0 (copy)"
      ]
    },
    "2005": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "item0%22#0",
        "item_start_offset%8#0",
        "tmp%68#0",
        "tmp%68#0 (copy)"
      ],
      "stack_out": [
        "item0%22#0",
        "item_start_offset%8#0",
        "tmp%68#0",
        "tmp%68#0 (copy)",
        "10"
      ]
    },
    "2007": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%22#0",
        "item_end_offset%8#0",
        "item_start_offset%8#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "item0%22#0",
        "item_start_offset%8#0",
        "tmp%68#0",
        "item_end_offset%8#0"
      ]
    },
    "2008": {
      "op": "dig 1",
      "stack_out": [
        "item0%22#0",
        "item_start_offset%8#0",
        "tmp%68#0",
        "item_end_offset%8#0",
        "tmp%68#0 (copy)"
      ]
    },
    "2010": {
      "op": "uncover 3",
      "stack_out": [
        "item0%22#0",
        "tmp%68#0",
        "item_end_offset%8#0",
        "tmp%68#0 (copy)",
        "item_start_offset%8#0"
      ]
    },
    "2012": {
      "op": "uncover 2",
      "stack_out": [
        "item0%22#0",
        "tmp%68#0",
        "tmp%68#0 (copy)",
        "item_start_offset%8#0",
        "item_end_offset%8#0"
      ]
    },
    "2014": {
      "op": "substring3",
      "defined_out": [
        "item0%22#0",
        "item1%16#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "item0%22#0",
        "tmp%68#0",
        "item1%16#0"
      ]
    },
    "2015": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%22#0",
        "item1%17#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "item0%22#0",
        "tmp%68#0",
        "item1%17#0"
      ]
    },
    "2018": {
      "op": "swap",
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "tmp%68#0"
      ]
    },
    "2019": {
      "op": "dup",
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "tmp%68#0",
        "tmp%68#0 (copy)"
      ]
    },
    "2020": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "tmp%68#0",
        "tmp%68#0 (copy)",
        "10"
      ]
    },
    "2022": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%22#0",
        "item1%17#0",
        "item_start_offset%9#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "tmp%68#0",
        "item_start_offset%9#0"
      ]
    },
    "2023": {
      "op": "swap",
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "item_start_offset%9#0",
        "tmp%68#0"
      ]
    },
    "2024": {
      "op": "dup",
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "item_start_offset%9#0",
        "tmp%68#0",
        "tmp%68#0 (copy)"
      ]
    },
    "2025": {
      "op": "len",
      "defined_out": [
        "item0%22#0",
        "item1%17#0",
        "item_end_offset%9#0",
        "item_start_offset%9#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "item_start_offset%9#0",
        "tmp%68#0",
        "item_end_offset%9#0"
      ]
    },
    "2026": {
      "op": "swap",
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0",
        "tmp%68#0"
      ]
    },
    "2027": {
      "op": "uncover 2",
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "item_end_offset%9#0",
        "tmp%68#0",
        "item_start_offset%9#0"
      ]
    },
    "2029": {
      "op": "uncover 2",
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "tmp%68#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0"
      ]
    },
    "2031": {
      "op": "substring3",
      "defined_out": [
        "item0%22#0",
        "item1%17#0",
        "item2%3#0"
      ],
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "item2%3#0"
      ]
    },
    "2032": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%22#0",
        "item1%17#0",
        "item2%4#0"
      ],
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "item2%4#0"
      ]
    },
    "2035": {
      "op": "uncover 2",
      "stack_out": [
        "item1%17#0",
        "item2%4#0",
        "item0%22#0"
      ]
    },
    "2037": {
      "op": "uncover 2",
      "stack_out": [
        "item2%4#0",
        "item0%22#0",
        "item1%17#0"
      ]
    },
    "2039": {
      "op": "uncover 2",
      "stack_out": [
        "item0%22#0",
        "item1%17#0",
        "item2%4#0"
      ]
    },
    "2041": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple",
      "op": "callsub named_tuple",
      "defined_out": [
        "elements_to_encode%22#0",
        "elements_to_encode%23#0",
        "elements_to_encode%24#0"
      ],
      "stack_out": [
        "elements_to_encode%22#0",
        "elements_to_encode%23#0",
        "elements_to_encode%24#0"
      ]
    },
    "2044": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%24#0",
        "elements_to_encode%22#0",
        "elements_to_encode%23#0"
      ]
    },
    "2046": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%24#0",
        "elements_to_encode%23#0",
        "elements_to_encode%22#0"
      ]
    },
    "2047": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%23#0",
        "elements_to_encode%24#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "elements_to_encode%24#0",
        "elements_to_encode%23#0",
        "val_as_bytes%12#0"
      ]
    },
    "2048": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%12#0",
        "elements_to_encode%24#0",
        "elements_to_encode%23#0"
      ]
    },
    "2050": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%23#0",
        "elements_to_encode%23#0 (copy)",
        "elements_to_encode%24#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0",
        "elements_to_encode%24#0",
        "elements_to_encode%23#0",
        "elements_to_encode%23#0 (copy)"
      ]
    },
    "2051": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%23#0",
        "elements_to_encode%24#0",
        "length%6#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0",
        "elements_to_encode%24#0",
        "elements_to_encode%23#0",
        "length%6#0"
      ]
    },
    "2052": {
      "op": "itob",
      "defined_out": [
        "as_bytes%18#0",
        "elements_to_encode%23#0",
        "elements_to_encode%24#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0",
        "elements_to_encode%24#0",
        "elements_to_encode%23#0",
        "as_bytes%18#0"
      ]
    },
    "2053": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%23#0",
        "elements_to_encode%24#0",
        "length_uint16%6#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0",
        "elements_to_encode%24#0",
        "elements_to_encode%23#0",
        "length_uint16%6#0"
      ]
    },
    "2056": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%12#0",
        "elements_to_encode%24#0",
        "length_uint16%6#0",
        "elements_to_encode%23#0"
      ]
    },
    "2057": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%24#0",
        "encoded_value%6#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0",
        "elements_to_encode%24#0",
        "encoded_value%6#0"
      ]
    },
    "2058": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%6#0",
        "val_as_bytes%12#0",
        "elements_to_encode%24#0"
      ]
    },
    "2060": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%24#0",
        "elements_to_encode%24#0 (copy)",
        "encoded_value%6#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "val_as_bytes%12#0",
        "elements_to_encode%24#0",
        "elements_to_encode%24#0 (copy)"
      ]
    },
    "2061": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%24#0",
        "encoded_value%6#0",
        "length%7#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "val_as_bytes%12#0",
        "elements_to_encode%24#0",
        "length%7#0"
      ]
    },
    "2062": {
      "op": "itob",
      "defined_out": [
        "as_bytes%19#0",
        "elements_to_encode%24#0",
        "encoded_value%6#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "val_as_bytes%12#0",
        "elements_to_encode%24#0",
        "as_bytes%19#0"
      ]
    },
    "2063": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%24#0",
        "encoded_value%6#0",
        "length_uint16%7#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "val_as_bytes%12#0",
        "elements_to_encode%24#0",
        "length_uint16%7#0"
      ]
    },
    "2066": {
      "op": "swap",
      "stack_out": [
        "encoded_value%6#0",
        "val_as_bytes%12#0",
        "length_uint16%7#0",
        "elements_to_encode%24#0"
      ]
    },
    "2067": {
      "op": "concat",
      "defined_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "val_as_bytes%12#0",
        "encoded_value%7#0"
      ]
    },
    "2068": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "val_as_bytes%12#0"
      ]
    },
    "2070": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "val_as_bytes%12#0",
        "0x"
      ]
    },
    "2071": {
      "op": "swap",
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "0x",
        "val_as_bytes%12#0"
      ]
    },
    "2072": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%52#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%52#0"
      ]
    },
    "2073": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "encoded_tuple_buffer%52#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%52#0",
        "12"
      ]
    },
    "2075": {
      "op": "itob",
      "defined_out": [
        "as_bytes%20#0",
        "encoded_tuple_buffer%52#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%52#0",
        "as_bytes%20#0"
      ]
    },
    "2076": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%52#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "offset_as_uint16%12#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%52#0",
        "offset_as_uint16%12#0"
      ]
    },
    "2079": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%53#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%53#0"
      ]
    },
    "2080": {
      "op": "dig 1",
      "defined_out": [
        "encoded_tuple_buffer%53#0",
        "encoded_value%6#0",
        "encoded_value%6#0 (copy)",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%53#0",
        "encoded_value%6#0 (copy)"
      ]
    },
    "2082": {
      "op": "len",
      "defined_out": [
        "data_length%12#0",
        "encoded_tuple_buffer%53#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%53#0",
        "data_length%12#0"
      ]
    },
    "2083": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%53#0",
        "data_length%12#0",
        "12"
      ]
    },
    "2085": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%25#0",
        "encoded_tuple_buffer%53#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%53#0",
        "current_tail_offset%25#0"
      ]
    },
    "2086": {
      "op": "itob",
      "defined_out": [
        "as_bytes%21#0",
        "encoded_tuple_buffer%53#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%53#0",
        "as_bytes%21#0"
      ]
    },
    "2087": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%53#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "offset_as_uint16%13#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%53#0",
        "offset_as_uint16%13#0"
      ]
    },
    "2090": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%54#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%54#0"
      ]
    },
    "2091": {
      "op": "swap",
      "stack_out": [
        "encoded_value%7#0",
        "encoded_tuple_buffer%54#0",
        "encoded_value%6#0"
      ]
    },
    "2092": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%55#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_tuple_buffer%55#0"
      ]
    },
    "2093": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%55#0",
        "encoded_value%7#0"
      ]
    },
    "2094": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%56#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%56#0"
      ]
    },
    "2095": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%56#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%56#0",
        "0x151f7c75"
      ]
    },
    "2096": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%56#0"
      ]
    },
    "2097": {
      "op": "concat",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "2098": {
      "op": "log",
      "stack_out": []
    },
    "2099": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2100": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2103": {
      "block": "approval_program_nested_tuple_params_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "2105": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0",
        "NoOp"
      ]
    },
    "2106": {
      "op": "==",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "2107": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2108": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "2110": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "0"
      ]
    },
    "2111": {
      "op": "!=",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "2112": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2113": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "2116": {
      "op": "dup",
      "defined_out": [
        "tmp%62#0",
        "tmp%62#0 (copy)"
      ],
      "stack_out": [
        "tmp%62#0",
        "tmp%62#0 (copy)"
      ]
    },
    "2117": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%62#0",
        "tmp%62#0 (copy)",
        "0"
      ]
    },
    "2118": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%5#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "item_start_offset%5#0"
      ]
    },
    "2119": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%62#0"
      ]
    },
    "2120": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%62#0",
        "tmp%62#0 (copy)"
      ]
    },
    "2121": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "item_start_offset%5#0",
        "tmp%62#0",
        "tmp%62#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%62#0",
        "tmp%62#0 (copy)",
        "2"
      ]
    },
    "2122": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%62#0",
        "item_end_offset%5#0"
      ]
    },
    "2123": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%62#0",
        "item_end_offset%5#0",
        "tmp%62#0 (copy)"
      ]
    },
    "2125": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%62#0",
        "item_end_offset%5#0",
        "tmp%62#0 (copy)",
        "item_start_offset%5#0"
      ]
    },
    "2127": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%62#0",
        "tmp%62#0 (copy)",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "2129": {
      "op": "substring3",
      "defined_out": [
        "item0%15#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "item0%15#0"
      ]
    },
    "2130": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%16#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "item0%16#0"
      ]
    },
    "2133": {
      "op": "swap",
      "stack_out": [
        "item0%16#0",
        "tmp%62#0"
      ]
    },
    "2134": {
      "op": "dup",
      "stack_out": [
        "item0%16#0",
        "tmp%62#0",
        "tmp%62#0 (copy)"
      ]
    },
    "2135": {
      "op": "intc_3 // 2",
      "stack_out": [
        "item0%16#0",
        "tmp%62#0",
        "tmp%62#0 (copy)",
        "2"
      ]
    },
    "2136": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%16#0",
        "item_start_offset%6#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "item0%16#0",
        "tmp%62#0",
        "item_start_offset%6#0"
      ]
    },
    "2137": {
      "op": "swap",
      "stack_out": [
        "item0%16#0",
        "item_start_offset%6#0",
        "tmp%62#0"
      ]
    },
    "2138": {
      "op": "dup",
      "stack_out": [
        "item0%16#0",
        "item_start_offset%6#0",
        "tmp%62#0",
        "tmp%62#0 (copy)"
      ]
    },
    "2139": {
      "op": "len",
      "defined_out": [
        "item0%16#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "item0%16#0",
        "item_start_offset%6#0",
        "tmp%62#0",
        "item_end_offset%6#0"
      ]
    },
    "2140": {
      "op": "swap",
      "stack_out": [
        "item0%16#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0",
        "tmp%62#0"
      ]
    },
    "2141": {
      "op": "uncover 2",
      "stack_out": [
        "item0%16#0",
        "item_end_offset%6#0",
        "tmp%62#0",
        "item_start_offset%6#0"
      ]
    },
    "2143": {
      "op": "uncover 2",
      "stack_out": [
        "item0%16#0",
        "tmp%62#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "2145": {
      "op": "substring3",
      "defined_out": [
        "item0%16#0",
        "item1%14#0"
      ],
      "stack_out": [
        "item0%16#0",
        "item1%14#0"
      ]
    },
    "2146": {
      "op": "dup",
      "defined_out": [
        "item0%16#0",
        "item1%14#0",
        "item1%14#0 (copy)"
      ],
      "stack_out": [
        "item0%16#0",
        "item1%14#0",
        "item1%14#0 (copy)"
      ]
    },
    "2147": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%16#0",
        "item1%14#0",
        "item1%14#0 (copy)",
        "0"
      ]
    },
    "2148": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%16#0",
        "item1%14#0",
        "item_start_offset%7#0"
      ],
      "stack_out": [
        "item0%16#0",
        "item1%14#0",
        "item_start_offset%7#0"
      ]
    },
    "2149": {
      "op": "swap",
      "stack_out": [
        "item0%16#0",
        "item_start_offset%7#0",
        "item1%14#0"
      ]
    },
    "2150": {
      "op": "dup",
      "stack_out": [
        "item0%16#0",
        "item_start_offset%7#0",
        "item1%14#0",
        "item1%14#0 (copy)"
      ]
    },
    "2151": {
      "op": "len",
      "defined_out": [
        "item0%16#0",
        "item1%14#0",
        "item_end_offset%7#0",
        "item_start_offset%7#0"
      ],
      "stack_out": [
        "item0%16#0",
        "item_start_offset%7#0",
        "item1%14#0",
        "item_end_offset%7#0"
      ]
    },
    "2152": {
      "op": "swap",
      "stack_out": [
        "item0%16#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "item1%14#0"
      ]
    },
    "2153": {
      "op": "dup",
      "stack_out": [
        "item0%16#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "item1%14#0",
        "item1%14#0 (copy)"
      ]
    },
    "2154": {
      "op": "uncover 3",
      "stack_out": [
        "item0%16#0",
        "item_end_offset%7#0",
        "item1%14#0",
        "item1%14#0 (copy)",
        "item_start_offset%7#0"
      ]
    },
    "2156": {
      "op": "uncover 3",
      "stack_out": [
        "item0%16#0",
        "item1%14#0",
        "item1%14#0 (copy)",
        "item_start_offset%7#0",
        "item_end_offset%7#0"
      ]
    },
    "2158": {
      "op": "substring3",
      "defined_out": [
        "item0%16#0",
        "item0%17#0",
        "item1%14#0"
      ],
      "stack_out": [
        "item0%16#0",
        "item1%14#0",
        "item0%17#0"
      ]
    },
    "2159": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%16#0",
        "item0%18#0",
        "item1%14#0"
      ],
      "stack_out": [
        "item0%16#0",
        "item1%14#0",
        "item0%18#0"
      ]
    },
    "2162": {
      "op": "swap",
      "stack_out": [
        "item0%16#0",
        "item0%18#0",
        "item1%14#0"
      ]
    },
    "2163": {
      "op": "intc_3 // 2",
      "stack_out": [
        "item0%16#0",
        "item0%18#0",
        "item1%14#0",
        "2"
      ]
    },
    "2164": {
      "op": "intc_1 // 8",
      "defined_out": [
        "2",
        "8",
        "item0%16#0",
        "item0%18#0",
        "item1%14#0"
      ],
      "stack_out": [
        "item0%16#0",
        "item0%18#0",
        "item1%14#0",
        "2",
        "8"
      ]
    },
    "2165": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%16#0",
        "item0%18#0",
        "item1%15#0"
      ],
      "stack_out": [
        "item0%16#0",
        "item0%18#0",
        "item1%15#0"
      ]
    },
    "2166": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%16#0",
        "item0%18#0",
        "item1%15#0",
        "0"
      ]
    },
    "2167": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%16#0",
        "item0%18#0",
        "item1%15#0",
        "0",
        "8"
      ]
    },
    "2168": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%16#0",
        "item0%18#0",
        "item0%19#0"
      ],
      "stack_out": [
        "item0%16#0",
        "item0%18#0",
        "item0%19#0"
      ]
    },
    "2169": {
      "op": "btoi",
      "defined_out": [
        "item0%16#0",
        "item0%18#0",
        "item0%20#0"
      ],
      "stack_out": [
        "item0%16#0",
        "item0%18#0",
        "item0%20#0"
      ]
    },
    "2170": {
      "op": "uncover 2",
      "stack_out": [
        "item0%18#0",
        "item0%20#0",
        "item0%16#0"
      ]
    },
    "2172": {
      "op": "uncover 2",
      "stack_out": [
        "item0%20#0",
        "item0%16#0",
        "item0%18#0"
      ]
    },
    "2174": {
      "op": "uncover 2",
      "stack_out": [
        "item0%16#0",
        "item0%18#0",
        "item0%20#0"
      ]
    },
    "2176": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params",
      "op": "callsub nested_tuple_params",
      "defined_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0"
      ],
      "stack_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0"
      ]
    },
    "2179": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%21#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0"
      ]
    },
    "2181": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%21#0",
        "elements_to_encode%20#0",
        "elements_to_encode%19#0"
      ]
    },
    "2182": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%19#0 (copy)",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0"
      ],
      "stack_out": [
        "elements_to_encode%21#0",
        "elements_to_encode%20#0",
        "elements_to_encode%19#0",
        "elements_to_encode%19#0 (copy)"
      ]
    },
    "2183": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "length%4#0"
      ],
      "stack_out": [
        "elements_to_encode%21#0",
        "elements_to_encode%20#0",
        "elements_to_encode%19#0",
        "length%4#0"
      ]
    },
    "2184": {
      "op": "itob",
      "defined_out": [
        "as_bytes%13#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0"
      ],
      "stack_out": [
        "elements_to_encode%21#0",
        "elements_to_encode%20#0",
        "elements_to_encode%19#0",
        "as_bytes%13#0"
      ]
    },
    "2185": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "length_uint16%4#0"
      ],
      "stack_out": [
        "elements_to_encode%21#0",
        "elements_to_encode%20#0",
        "elements_to_encode%19#0",
        "length_uint16%4#0"
      ]
    },
    "2188": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%21#0",
        "elements_to_encode%20#0",
        "length_uint16%4#0",
        "elements_to_encode%19#0"
      ]
    },
    "2189": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%21#0",
        "elements_to_encode%20#0",
        "encoded_value%4#0"
      ]
    },
    "2190": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%4#0",
        "elements_to_encode%21#0",
        "elements_to_encode%20#0"
      ]
    },
    "2192": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%20#0 (copy)",
        "elements_to_encode%21#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "elements_to_encode%21#0",
        "elements_to_encode%20#0",
        "elements_to_encode%20#0 (copy)"
      ]
    },
    "2193": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%4#0",
        "length%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "elements_to_encode%21#0",
        "elements_to_encode%20#0",
        "length%5#0"
      ]
    },
    "2194": {
      "op": "itob",
      "defined_out": [
        "as_bytes%14#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "elements_to_encode%21#0",
        "elements_to_encode%20#0",
        "as_bytes%14#0"
      ]
    },
    "2195": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%4#0",
        "length_uint16%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "elements_to_encode%21#0",
        "elements_to_encode%20#0",
        "length_uint16%5#0"
      ]
    },
    "2198": {
      "op": "swap",
      "stack_out": [
        "encoded_value%4#0",
        "elements_to_encode%21#0",
        "length_uint16%5#0",
        "elements_to_encode%20#0"
      ]
    },
    "2199": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%21#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0"
      ]
    },
    "2200": {
      "op": "swap",
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "elements_to_encode%21#0"
      ]
    },
    "2201": {
      "op": "itob",
      "defined_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%11#0"
      ]
    },
    "2202": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%11#0",
        "10"
      ]
    },
    "2204": {
      "op": "itob",
      "defined_out": [
        "as_bytes%15#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%11#0",
        "as_bytes%15#0"
      ]
    },
    "2205": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "offset_as_uint16%9#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%11#0",
        "offset_as_uint16%9#0"
      ]
    },
    "2208": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "offset_as_uint16%9#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%11#0",
        "offset_as_uint16%9#0",
        "0x"
      ]
    },
    "2209": {
      "op": "swap",
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%11#0",
        "0x",
        "offset_as_uint16%9#0"
      ]
    },
    "2210": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%43#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%43#0"
      ]
    },
    "2211": {
      "op": "swap",
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%43#0",
        "val_as_bytes%11#0"
      ]
    },
    "2212": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%44#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%44#0"
      ]
    },
    "2213": {
      "op": "swap",
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%44#0",
        "encoded_value%5#0"
      ]
    },
    "2214": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%45#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0"
      ]
    },
    "2215": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "encoded_tuple_buffer%45#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "4"
      ]
    },
    "2217": {
      "op": "itob",
      "defined_out": [
        "as_bytes%16#0",
        "encoded_tuple_buffer%45#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "as_bytes%16#0"
      ]
    },
    "2218": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%45#0",
        "encoded_value%4#0",
        "offset_as_uint16%10#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "offset_as_uint16%10#0"
      ]
    },
    "2221": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "offset_as_uint16%10#0",
        "0x"
      ]
    },
    "2222": {
      "op": "swap",
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "0x",
        "offset_as_uint16%10#0"
      ]
    },
    "2223": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0"
      ]
    },
    "2224": {
      "op": "dig 2",
      "defined_out": [
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0",
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0",
        "encoded_value%4#0 (copy)"
      ]
    },
    "2226": {
      "op": "len",
      "defined_out": [
        "data_length%10#0",
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0",
        "data_length%10#0"
      ]
    },
    "2227": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0",
        "data_length%10#0",
        "4"
      ]
    },
    "2229": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%22#0",
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0",
        "current_tail_offset%22#0"
      ]
    },
    "2230": {
      "op": "itob",
      "defined_out": [
        "as_bytes%17#0",
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0",
        "as_bytes%17#0"
      ]
    },
    "2231": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0",
        "encoded_value%4#0",
        "offset_as_uint16%11#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%47#0",
        "offset_as_uint16%11#0"
      ]
    },
    "2234": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%48#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%48#0"
      ]
    },
    "2235": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%48#0",
        "encoded_value%4#0"
      ]
    },
    "2237": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%49#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%45#0",
        "encoded_tuple_buffer%49#0"
      ]
    },
    "2238": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%49#0",
        "encoded_tuple_buffer%45#0"
      ]
    },
    "2239": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%50#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%50#0"
      ]
    },
    "2240": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%50#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%50#0",
        "0x151f7c75"
      ]
    },
    "2241": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%50#0"
      ]
    },
    "2242": {
      "op": "concat",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "2243": {
      "op": "log",
      "stack_out": []
    },
    "2244": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2245": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2248": {
      "block": "approval_program_run_tests_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "2250": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "NoOp"
      ]
    },
    "2251": {
      "op": "==",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "2252": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2253": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "2255": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "0"
      ]
    },
    "2256": {
      "op": "!=",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "2257": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2258": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests",
      "op": "callsub run_tests",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "2261": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "2263": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "2264": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "2266": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "2267": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "2268": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "2269": {
      "op": "concat",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "2270": {
      "op": "log",
      "stack_out": []
    },
    "2271": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2272": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2275": {
      "block": "approval_program_mutate_tuple_in_storage_currently_supported_method_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "2277": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "NoOp"
      ]
    },
    "2278": {
      "op": "==",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "2279": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2280": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "2282": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "0"
      ]
    },
    "2283": {
      "op": "!=",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "2284": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2285": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method",
      "op": "callsub mutate_tuple_in_storage_currently_supported_method"
    },
    "2288": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2289": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2292": {
      "block": "approval_program_mutate_local_tuple_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "2294": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "NoOp"
      ]
    },
    "2295": {
      "op": "==",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "2296": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2297": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "2299": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "0"
      ]
    },
    "2300": {
      "op": "!=",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "2301": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2302": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple",
      "op": "callsub mutate_local_tuple",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0"
      ]
    },
    "2305": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%17#0"
      ]
    },
    "2307": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0"
      ]
    },
    "2309": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "elements_to_encode%16#0",
        "elements_to_encode%15#0"
      ]
    },
    "2310": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "elements_to_encode%16#0"
      ]
    },
    "2312": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "val_as_bytes%10#0"
      ]
    },
    "2313": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%10#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0"
      ]
    },
    "2315": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%17#0",
        "elements_to_encode%17#0 (copy)",
        "elements_to_encode%18#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%10#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "elements_to_encode%17#0 (copy)"
      ]
    },
    "2316": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "length%2#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%10#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "length%2#0"
      ]
    },
    "2317": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "elements_to_encode%15#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%10#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "as_bytes%7#0"
      ]
    },
    "2318": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "length_uint16%2#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%10#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "length_uint16%2#0"
      ]
    },
    "2321": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%10#0",
        "elements_to_encode%18#0",
        "length_uint16%2#0",
        "elements_to_encode%17#0"
      ]
    },
    "2322": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "encoded_value%2#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%10#0",
        "elements_to_encode%18#0",
        "encoded_value%2#0"
      ]
    },
    "2323": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%2#0",
        "val_as_bytes%10#0",
        "elements_to_encode%18#0"
      ]
    },
    "2325": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "elements_to_encode%18#0 (copy)",
        "encoded_value%2#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%2#0",
        "val_as_bytes%10#0",
        "elements_to_encode%18#0",
        "elements_to_encode%18#0 (copy)"
      ]
    },
    "2326": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "encoded_value%2#0",
        "length%3#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%2#0",
        "val_as_bytes%10#0",
        "elements_to_encode%18#0",
        "length%3#0"
      ]
    },
    "2327": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "encoded_value%2#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%2#0",
        "val_as_bytes%10#0",
        "elements_to_encode%18#0",
        "as_bytes%8#0"
      ]
    },
    "2328": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "encoded_value%2#0",
        "length_uint16%3#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%2#0",
        "val_as_bytes%10#0",
        "elements_to_encode%18#0",
        "length_uint16%3#0"
      ]
    },
    "2331": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%2#0",
        "val_as_bytes%10#0",
        "length_uint16%3#0",
        "elements_to_encode%18#0"
      ]
    },
    "2332": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%2#0",
        "val_as_bytes%10#0",
        "encoded_value%3#0"
      ]
    },
    "2333": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "val_as_bytes%10#0"
      ]
    },
    "2335": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "elements_to_encode%15#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "val_as_bytes%10#0",
        "0x"
      ]
    },
    "2336": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "0x",
        "val_as_bytes%10#0"
      ]
    },
    "2337": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%32#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%32#0"
      ]
    },
    "2338": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%32#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%32#0",
        "12"
      ]
    },
    "2340": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%32#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%32#0",
        "as_bytes%9#0"
      ]
    },
    "2341": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%32#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%5#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%32#0",
        "offset_as_uint16%5#0"
      ]
    },
    "2344": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%33#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%33#0"
      ]
    },
    "2345": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%33#0",
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%33#0",
        "encoded_value%2#0 (copy)"
      ]
    },
    "2347": {
      "op": "len",
      "defined_out": [
        "data_length%5#0",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%33#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%33#0",
        "data_length%5#0"
      ]
    },
    "2348": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%33#0",
        "data_length%5#0",
        "12"
      ]
    },
    "2350": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%14#0",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%33#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%33#0",
        "current_tail_offset%14#0"
      ]
    },
    "2351": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%33#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%33#0",
        "as_bytes%10#0"
      ]
    },
    "2352": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%33#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%33#0",
        "offset_as_uint16%6#0"
      ]
    },
    "2355": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%34#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%34#0"
      ]
    },
    "2356": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%34#0",
        "encoded_value%2#0"
      ]
    },
    "2357": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%35#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%35#0"
      ]
    },
    "2358": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%35#0",
        "encoded_value%3#0"
      ]
    },
    "2359": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0"
      ]
    },
    "2360": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "4"
      ]
    },
    "2362": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "as_bytes%11#0"
      ]
    },
    "2363": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "offset_as_uint16%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "offset_as_uint16%7#0"
      ]
    },
    "2366": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "offset_as_uint16%7#0",
        "0x"
      ]
    },
    "2367": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "0x",
        "offset_as_uint16%7#0"
      ]
    },
    "2368": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0"
      ]
    },
    "2369": {
      "op": "dig 2",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%15#0 (copy)",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0",
        "elements_to_encode%15#0 (copy)"
      ]
    },
    "2371": {
      "op": "len",
      "defined_out": [
        "data_length%7#0",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0",
        "data_length%7#0"
      ]
    },
    "2372": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0",
        "data_length%7#0",
        "4"
      ]
    },
    "2374": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%17#0",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0",
        "current_tail_offset%17#0"
      ]
    },
    "2375": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0",
        "as_bytes%12#0"
      ]
    },
    "2376": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0",
        "offset_as_uint16%8#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%38#0",
        "offset_as_uint16%8#0"
      ]
    },
    "2379": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%39#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%39#0"
      ]
    },
    "2380": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%39#0",
        "elements_to_encode%15#0"
      ]
    },
    "2382": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%40#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%36#0",
        "encoded_tuple_buffer%40#0"
      ]
    },
    "2383": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%40#0",
        "encoded_tuple_buffer%36#0"
      ]
    },
    "2384": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%41#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%41#0"
      ]
    },
    "2385": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%41#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%41#0",
        "0x151f7c75"
      ]
    },
    "2386": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%41#0"
      ]
    },
    "2387": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "2388": {
      "op": "log",
      "stack_out": []
    },
    "2389": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2390": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2393": {
      "block": "approval_program_load_tuple_from_local_state_or_default_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "2395": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "NoOp"
      ]
    },
    "2396": {
      "op": "==",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "2397": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2398": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "2400": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "0"
      ]
    },
    "2401": {
      "op": "!=",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "2402": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2403": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "2406": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "2409": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default",
      "op": "callsub load_tuple_from_local_state_or_default",
      "defined_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%14#0"
      ],
      "stack_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%14#0"
      ]
    },
    "2412": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%14#0",
        "elements_to_encode%13#0"
      ]
    },
    "2413": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%14#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%14#0",
        "val_as_bytes%8#0"
      ]
    },
    "2414": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%8#0",
        "elements_to_encode%14#0"
      ]
    },
    "2415": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "2416": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%8#0"
      ]
    },
    "2417": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%8#0",
        "0x"
      ]
    },
    "2418": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%9#0",
        "0x",
        "val_as_bytes%8#0"
      ]
    },
    "2419": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%29#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "encoded_tuple_buffer%29#0"
      ]
    },
    "2420": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%29#0",
        "val_as_bytes%9#0"
      ]
    },
    "2421": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%30#0"
      ]
    },
    "2422": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%30#0",
        "0x151f7c75"
      ]
    },
    "2423": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%30#0"
      ]
    },
    "2424": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "2425": {
      "op": "log",
      "stack_out": []
    },
    "2426": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2427": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2430": {
      "block": "approval_program_load_tuple_from_box_or_default_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "2432": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "NoOp"
      ]
    },
    "2433": {
      "op": "==",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "2434": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2435": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "2437": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0"
      ]
    },
    "2438": {
      "op": "!=",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "2439": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2440": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%4#0"
      ]
    },
    "2443": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[16]%4#0",
        "reinterpret_bytes[16]%4#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%4#0",
        "reinterpret_bytes[16]%4#0 (copy)"
      ]
    },
    "2444": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[16]%4#0",
        "reinterpret_bytes[16]%4#0 (copy)",
        "0"
      ]
    },
    "2445": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[16]%4#0",
        "reinterpret_bytes[16]%4#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%4#0",
        "reinterpret_bytes[16]%4#0 (copy)",
        "0",
        "8"
      ]
    },
    "2446": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%13#0",
        "reinterpret_bytes[16]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%4#0",
        "item0%13#0"
      ]
    },
    "2447": {
      "op": "btoi",
      "defined_out": [
        "item0%14#0",
        "reinterpret_bytes[16]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%4#0",
        "item0%14#0"
      ]
    },
    "2448": {
      "op": "swap",
      "stack_out": [
        "item0%14#0",
        "reinterpret_bytes[16]%4#0"
      ]
    },
    "2449": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%14#0",
        "reinterpret_bytes[16]%4#0",
        "8"
      ]
    },
    "2450": {
      "op": "dup",
      "stack_out": [
        "item0%14#0",
        "reinterpret_bytes[16]%4#0",
        "8",
        "8"
      ]
    },
    "2451": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%14#0",
        "item1%12#0"
      ],
      "stack_out": [
        "item0%14#0",
        "item1%12#0"
      ]
    },
    "2452": {
      "op": "btoi",
      "defined_out": [
        "item0%14#0",
        "item1%13#0"
      ],
      "stack_out": [
        "item0%14#0",
        "item1%13#0"
      ]
    },
    "2453": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default",
      "op": "callsub load_tuple_from_box_or_default",
      "defined_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%12#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%12#0"
      ]
    },
    "2456": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%11#0"
      ]
    },
    "2457": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%12#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%12#0",
        "val_as_bytes%6#0"
      ]
    },
    "2458": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%6#0",
        "elements_to_encode%12#0"
      ]
    },
    "2459": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "2460": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%6#0"
      ]
    },
    "2461": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%6#0",
        "0x"
      ]
    },
    "2462": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%7#0",
        "0x",
        "val_as_bytes%6#0"
      ]
    },
    "2463": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%26#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "encoded_tuple_buffer%26#0"
      ]
    },
    "2464": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%26#0",
        "val_as_bytes%7#0"
      ]
    },
    "2465": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%27#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%27#0"
      ]
    },
    "2466": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%27#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%27#0",
        "0x151f7c75"
      ]
    },
    "2467": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%27#0"
      ]
    },
    "2468": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "2469": {
      "op": "log",
      "stack_out": []
    },
    "2470": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2471": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2474": {
      "block": "approval_program_maybe_load_tuple_from_box_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "2476": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "NoOp"
      ]
    },
    "2477": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "2478": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2479": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "2481": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "0"
      ]
    },
    "2482": {
      "op": "!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "2483": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2484": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%3#0"
      ]
    },
    "2487": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[16]%3#0",
        "reinterpret_bytes[16]%3#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%3#0",
        "reinterpret_bytes[16]%3#0 (copy)"
      ]
    },
    "2488": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[16]%3#0",
        "reinterpret_bytes[16]%3#0 (copy)",
        "0"
      ]
    },
    "2489": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[16]%3#0",
        "reinterpret_bytes[16]%3#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%3#0",
        "reinterpret_bytes[16]%3#0 (copy)",
        "0",
        "8"
      ]
    },
    "2490": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%11#0",
        "reinterpret_bytes[16]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%3#0",
        "item0%11#0"
      ]
    },
    "2491": {
      "op": "btoi",
      "defined_out": [
        "item0%12#0",
        "reinterpret_bytes[16]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%3#0",
        "item0%12#0"
      ]
    },
    "2492": {
      "op": "swap",
      "stack_out": [
        "item0%12#0",
        "reinterpret_bytes[16]%3#0"
      ]
    },
    "2493": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%12#0",
        "reinterpret_bytes[16]%3#0",
        "8"
      ]
    },
    "2494": {
      "op": "dup",
      "stack_out": [
        "item0%12#0",
        "reinterpret_bytes[16]%3#0",
        "8",
        "8"
      ]
    },
    "2495": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%12#0",
        "item1%10#0"
      ],
      "stack_out": [
        "item0%12#0",
        "item1%10#0"
      ]
    },
    "2496": {
      "op": "btoi",
      "defined_out": [
        "item0%12#0",
        "item1%11#0"
      ],
      "stack_out": [
        "item0%12#0",
        "item1%11#0"
      ]
    },
    "2497": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box",
      "op": "callsub maybe_load_tuple_from_box",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0"
      ]
    },
    "2500": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ]
    },
    "2502": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0"
      ]
    },
    "2503": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "val_as_bytes%4#0"
      ]
    },
    "2504": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%10#0",
        "val_as_bytes%4#0",
        "elements_to_encode%9#0"
      ]
    },
    "2505": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "2506": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%10#0",
        "val_as_bytes%5#0",
        "val_as_bytes%4#0"
      ]
    },
    "2507": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "elements_to_encode%10#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "val_as_bytes%5#0",
        "val_as_bytes%4#0",
        "0x"
      ]
    },
    "2508": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%10#0",
        "val_as_bytes%5#0",
        "0x",
        "val_as_bytes%4#0"
      ]
    },
    "2509": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%20#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "2510": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%20#0",
        "val_as_bytes%5#0"
      ]
    },
    "2511": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "2512": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%21#0",
        "0x00"
      ]
    },
    "2514": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%10#0",
        "encoded_tuple_buffer%21#0",
        "0x00",
        "0"
      ]
    },
    "2515": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_tuple_buffer%21#0",
        "0x00",
        "0",
        "elements_to_encode%10#0"
      ]
    },
    "2517": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%21#0",
        "encoded_bool%1#0"
      ]
    },
    "2518": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%21#0",
        "encoded_bool%1#0",
        "0x"
      ]
    },
    "2519": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%1#0",
        "0x",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "2521": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%23#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%23#0"
      ]
    },
    "2522": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%23#0",
        "encoded_bool%1#0"
      ]
    },
    "2523": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%24#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%24#0"
      ]
    },
    "2524": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%24#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%24#0",
        "0x151f7c75"
      ]
    },
    "2525": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%24#0"
      ]
    },
    "2526": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "2527": {
      "op": "log",
      "stack_out": []
    },
    "2528": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2529": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2532": {
      "block": "approval_program_load_tuple_from_box_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "2534": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "NoOp"
      ]
    },
    "2535": {
      "op": "==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "2536": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2537": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "2539": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "2540": {
      "op": "!=",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "2541": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2542": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0"
      ]
    },
    "2545": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[16]%2#0",
        "reinterpret_bytes[16]%2#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0",
        "reinterpret_bytes[16]%2#0 (copy)"
      ]
    },
    "2546": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[16]%2#0",
        "reinterpret_bytes[16]%2#0 (copy)",
        "0"
      ]
    },
    "2547": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[16]%2#0",
        "reinterpret_bytes[16]%2#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0",
        "reinterpret_bytes[16]%2#0 (copy)",
        "0",
        "8"
      ]
    },
    "2548": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%9#0",
        "reinterpret_bytes[16]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0",
        "item0%9#0"
      ]
    },
    "2549": {
      "op": "btoi",
      "defined_out": [
        "item0%10#0",
        "reinterpret_bytes[16]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0",
        "item0%10#0"
      ]
    },
    "2550": {
      "op": "swap",
      "stack_out": [
        "item0%10#0",
        "reinterpret_bytes[16]%2#0"
      ]
    },
    "2551": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%10#0",
        "reinterpret_bytes[16]%2#0",
        "8"
      ]
    },
    "2552": {
      "op": "dup",
      "stack_out": [
        "item0%10#0",
        "reinterpret_bytes[16]%2#0",
        "8",
        "8"
      ]
    },
    "2553": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%10#0",
        "item1%8#0"
      ],
      "stack_out": [
        "item0%10#0",
        "item1%8#0"
      ]
    },
    "2554": {
      "op": "btoi",
      "defined_out": [
        "item0%10#0",
        "item1%9#0"
      ],
      "stack_out": [
        "item0%10#0",
        "item1%9#0"
      ]
    },
    "2555": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box",
      "op": "callsub load_tuple_from_box",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "2558": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%6#0"
      ]
    },
    "2559": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0"
      ]
    },
    "2560": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%2#0",
        "elements_to_encode%7#0"
      ]
    },
    "2561": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "2562": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "2563": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%2#0",
        "0x"
      ]
    },
    "2564": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%3#0",
        "0x",
        "val_as_bytes%2#0"
      ]
    },
    "2565": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%17#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "2566": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%17#0",
        "val_as_bytes%3#0"
      ]
    },
    "2567": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%18#0"
      ]
    },
    "2568": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%18#0",
        "0x151f7c75"
      ]
    },
    "2569": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "2570": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "2571": {
      "op": "log",
      "stack_out": []
    },
    "2572": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2573": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2576": {
      "block": "approval_program_is_tuple_in_box_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "2578": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "NoOp"
      ]
    },
    "2579": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2580": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2581": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "2583": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "2584": {
      "op": "!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "2585": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2586": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%1#0"
      ]
    },
    "2589": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)"
      ]
    },
    "2590": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)",
        "0"
      ]
    },
    "2591": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)",
        "0",
        "8"
      ]
    },
    "2592": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%7#0",
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%1#0",
        "item0%7#0"
      ]
    },
    "2593": {
      "op": "btoi",
      "defined_out": [
        "item0%8#0",
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%1#0",
        "item0%8#0"
      ]
    },
    "2594": {
      "op": "swap",
      "stack_out": [
        "item0%8#0",
        "reinterpret_bytes[16]%1#0"
      ]
    },
    "2595": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%8#0",
        "reinterpret_bytes[16]%1#0",
        "8"
      ]
    },
    "2596": {
      "op": "dup",
      "stack_out": [
        "item0%8#0",
        "reinterpret_bytes[16]%1#0",
        "8",
        "8"
      ]
    },
    "2597": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%8#0",
        "item1%6#0"
      ],
      "stack_out": [
        "item0%8#0",
        "item1%6#0"
      ]
    },
    "2598": {
      "op": "btoi",
      "defined_out": [
        "item0%8#0",
        "item1%7#0"
      ],
      "stack_out": [
        "item0%8#0",
        "item1%7#0"
      ]
    },
    "2599": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box",
      "op": "callsub is_tuple_in_box",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2602": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "2604": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "2605": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "2607": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "2608": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "2609": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "2610": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "2611": {
      "op": "log",
      "stack_out": []
    },
    "2612": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2613": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2616": {
      "block": "approval_program_store_tuple_in_box_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "2618": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "2619": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2620": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2621": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "2623": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "2624": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "2625": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2626": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "2629": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ]
    },
    "2630": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)",
        "0"
      ]
    },
    "2631": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "2632": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%5#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "item0%5#0"
      ]
    },
    "2633": {
      "op": "btoi",
      "defined_out": [
        "item0%6#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "item0%6#0"
      ]
    },
    "2634": {
      "op": "swap",
      "stack_out": [
        "item0%6#0",
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "2635": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%6#0",
        "reinterpret_bytes[16]%0#0",
        "8"
      ]
    },
    "2636": {
      "op": "dup",
      "stack_out": [
        "item0%6#0",
        "reinterpret_bytes[16]%0#0",
        "8",
        "8"
      ]
    },
    "2637": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%6#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0"
      ]
    },
    "2638": {
      "op": "btoi",
      "defined_out": [
        "item0%6#0",
        "item1%5#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%5#0"
      ]
    },
    "2639": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box",
      "op": "callsub store_tuple_in_box",
      "stack_out": []
    },
    "2642": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2643": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2646": {
      "block": "approval_program_load_tuple_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "2648": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "2649": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2650": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2651": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2653": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "2654": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "2655": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2656": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple",
      "op": "callsub load_tuple",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "2659": {
      "op": "cover 5",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "2661": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "2663": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "2665": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "2667": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%0#0"
      ]
    },
    "2669": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "2670": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0"
      ]
    },
    "2672": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "2673": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0"
      ]
    },
    "2675": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "2676": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "length%0#0"
      ]
    },
    "2677": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "as_bytes%0#0"
      ]
    },
    "2678": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "length_uint16%0#0"
      ]
    },
    "2681": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "length_uint16%0#0",
        "elements_to_encode%3#0"
      ]
    },
    "2682": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0"
      ]
    },
    "2683": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0"
      ]
    },
    "2685": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "2686": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "length%1#0"
      ]
    },
    "2687": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "as_bytes%1#0"
      ]
    },
    "2688": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "length_uint16%1#0"
      ]
    },
    "2691": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "length_uint16%1#0",
        "elements_to_encode%4#0"
      ]
    },
    "2692": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "encoded_value%1#0"
      ]
    },
    "2693": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2695": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "0x"
      ]
    },
    "2696": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "0x",
        "val_as_bytes%1#0"
      ]
    },
    "2697": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "2698": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "12"
      ]
    },
    "2700": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%2#0"
      ]
    },
    "2701": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "2704": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2705": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "2707": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0"
      ]
    },
    "2708": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0",
        "12"
      ]
    },
    "2710": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "2711": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%3#0"
      ]
    },
    "2712": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2715": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2716": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ]
    },
    "2717": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2718": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0"
      ]
    },
    "2719": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2720": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0",
        "0x"
      ]
    },
    "2721": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "encoded_tuple_buffer%5#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "2723": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2724": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "elements_to_encode%1#0"
      ]
    },
    "2726": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2727": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "18"
      ]
    },
    "2729": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "as_bytes%4#0"
      ]
    },
    "2730": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%2#0"
      ]
    },
    "2733": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2734": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2735": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2736": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "4"
      ]
    },
    "2738": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "as_bytes%5#0"
      ]
    },
    "2739": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0"
      ]
    },
    "2742": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0",
        "0x"
      ]
    },
    "2743": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "0x",
        "offset_as_uint16%3#0"
      ]
    },
    "2744": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2745": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2746": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%10#0 (copy)",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%10#0 (copy)"
      ]
    },
    "2747": {
      "op": "len",
      "defined_out": [
        "data_length%3#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "data_length%3#0"
      ]
    },
    "2748": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "data_length%3#0",
        "4"
      ]
    },
    "2750": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "current_tail_offset%6#0"
      ]
    },
    "2751": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "as_bytes%6#0"
      ]
    },
    "2752": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0",
        "offset_as_uint16%4#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%4#0"
      ]
    },
    "2755": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%4#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2757": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0",
        "offset_as_uint16%4#0"
      ]
    },
    "2758": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%13#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "2759": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%13#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2760": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "2761": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%14#0",
        "elements_to_encode%5#0"
      ]
    },
    "2762": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%15#0"
      ]
    },
    "2763": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%15#0",
        "0x151f7c75"
      ]
    },
    "2764": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "2765": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "2766": {
      "op": "log",
      "stack_out": []
    },
    "2767": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2768": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2771": {
      "block": "approval_program_store_tuple_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2773": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "2774": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2775": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2776": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2778": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "2779": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2780": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2781": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2784": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2785": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "0"
      ]
    },
    "2786": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item_start_offset%0#0"
      ]
    },
    "2787": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%7#0"
      ]
    },
    "2788": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2789": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "2"
      ]
    },
    "2790": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%7#0",
        "item_end_offset%0#0"
      ]
    },
    "2791": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%7#0",
        "item_end_offset%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2793": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%7#0",
        "item_end_offset%0#0",
        "tmp%7#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "2795": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "2797": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0#0"
      ]
    },
    "2798": {
      "op": "dup",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "2799": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0"
      ]
    },
    "2800": {
      "op": "intc_1 // 8",
      "defined_out": [
        "0",
        "8",
        "item0%0#0",
        "item0%0#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "2801": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item0%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0#0",
        "item0%1#0"
      ]
    },
    "2802": {
      "op": "btoi",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0#0",
        "item0%2#0"
      ]
    },
    "2803": {
      "op": "cover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item0%0#0"
      ]
    },
    "2805": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "2806": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "8"
      ]
    },
    "2807": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "8",
        "8"
      ]
    },
    "2808": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item1%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item0%0#0",
        "item1%0#0"
      ]
    },
    "2809": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%0#0"
      ]
    },
    "2810": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "2811": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%0#0",
        "item0%0#0 (copy)",
        "item0%2#0",
        "item1%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "16"
      ]
    },
    "2813": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "2814": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item0%0#0"
      ]
    },
    "2815": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "2816": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item1%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item_end_offset%1#0"
      ]
    },
    "2817": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "item0%0#0"
      ]
    },
    "2818": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item_end_offset%1#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "2820": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "2822": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item2%0#0"
      ]
    },
    "2823": {
      "op": "dup",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "2824": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "0"
      ]
    },
    "2825": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "2826": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%2#0",
        "item0%3#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item2%0#0",
        "item0%3#0"
      ]
    },
    "2827": {
      "op": "btoi",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item2%0#0",
        "item0%4#0"
      ]
    },
    "2828": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0"
      ]
    },
    "2829": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "2830": {
      "op": "intc_1 // 8",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "8"
      ]
    },
    "2831": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "item_start_offset%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item_start_offset%2#0"
      ]
    },
    "2832": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0"
      ]
    },
    "2833": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "2834": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "item_start_offset%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "10"
      ]
    },
    "2836": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item_end_offset%2#0"
      ]
    },
    "2837": {
      "op": "dig 1",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item_end_offset%2#0",
        "item2%0#0 (copy)"
      ]
    },
    "2839": {
      "op": "uncover 3",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item_end_offset%2#0",
        "item2%0#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "2841": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "2843": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0",
        "item2%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item1%1#0"
      ]
    },
    "2844": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item1%2#0"
      ]
    },
    "2847": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0"
      ]
    },
    "2848": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "2849": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "10"
      ]
    },
    "2851": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0",
        "item_start_offset%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item_start_offset%3#0"
      ]
    },
    "2852": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item2%0#0"
      ]
    },
    "2853": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "2854": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item2%0#0",
        "item_end_offset%3#0"
      ]
    },
    "2855": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "item2%0#0"
      ]
    },
    "2856": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_end_offset%3#0",
        "item2%0#0",
        "item_start_offset%3#0"
      ]
    },
    "2858": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "2860": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%1#0"
      ]
    },
    "2861": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0"
      ]
    },
    "2864": {
      "op": "dig 4",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2866": {
      "op": "intc_3 // 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%7#0 (copy)",
        "2"
      ]
    },
    "2867": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%2#0",
        "item_start_offset%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item_start_offset%4#0"
      ]
    },
    "2868": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item2%2#0"
      ]
    },
    "2869": {
      "op": "dig 5",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item2%2#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2871": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%2#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item2%2#0",
        "item_end_offset%4#0"
      ]
    },
    "2872": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item2%2#0"
      ]
    },
    "2873": {
      "op": "uncover 6",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item2%2#0",
        "tmp%7#0"
      ]
    },
    "2875": {
      "op": "uncover 3",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_end_offset%4#0",
        "item2%2#0",
        "tmp%7#0",
        "item_start_offset%4#0"
      ]
    },
    "2877": {
      "op": "uncover 3",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%7#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "2879": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item1%3#0",
        "item2%2#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0"
      ]
    },
    "2880": {
      "op": "uncover 5",
      "stack_out": [
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0",
        "item0%2#0"
      ]
    },
    "2882": {
      "op": "uncover 5",
      "stack_out": [
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0",
        "item0%2#0",
        "item1%0#0"
      ]
    },
    "2884": {
      "op": "uncover 5",
      "stack_out": [
        "item1%2#0",
        "item2%2#0",
        "item1%3#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0"
      ]
    },
    "2886": {
      "op": "uncover 5",
      "stack_out": [
        "item2%2#0",
        "item1%3#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0"
      ]
    },
    "2888": {
      "op": "uncover 5",
      "stack_out": [
        "item1%3#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0"
      ]
    },
    "2890": {
      "op": "uncover 5",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0"
      ]
    },
    "2892": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple",
      "op": "callsub store_tuple",
      "stack_out": []
    },
    "2895": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2896": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    },
    "2899": {
      "block": "approval_program_bare_routing@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "2901": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0",
        "0"
      ]
    },
    "2902": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%76#0"
      ]
    },
    "2903": {
      "op": "match approval_program___algopy_default_create@20",
      "stack_out": []
    },
    "2907": {
      "block": "approval_program_switch_case_next@24",
      "stack_in": [],
      "op": "b approval_program_after_if_else@25"
    },
    "2910": {
      "block": "approval_program___algopy_default_create@20",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "2912": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "0"
      ]
    },
    "2913": {
      "op": "==",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "2914": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "2915": {
      "block": "approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create@22",
      "stack_in": [],
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2916": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@26"
    }
  }
}