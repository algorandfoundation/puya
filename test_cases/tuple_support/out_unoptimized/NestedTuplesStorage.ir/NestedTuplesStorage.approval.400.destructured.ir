main test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap[routing]() -> void:
    block@0: // L23
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap()
        exit 1u

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple[routing]() -> void:
    block@0: // L28
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple(reinterpret_Encoded(uint64)%0#0)
        exit 1u

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box[routing]() -> void:
    block@0: // L32
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box(reinterpret_Encoded(uint64)%0#0)
        exit 1u

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global[routing]() -> void:
    block@0: // L36
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global(reinterpret_Encoded(uint64)%0#0)
        exit 1u

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local[routing]() -> void:
    block@0: // L40
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local(reinterpret_Encoded(uint64)%0#0)
        exit 1u

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__init__() -> void:
    block@0: // L12
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x0000000000000000)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%0#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 encoded_array%0#0)
        let aggregate%as_Encoded((len+uint64[]),uint64)%0#0: Encoded((len+uint64[]),uint64) = aggregate%concat%0#0
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = aggregate%as_Encoded((len+uint64[]),uint64)%0#0
        (app_global_put "tup" encoded_for_storage%0#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%1#0 0x0000000000000000)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%3#0
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%0#0) // check self.tup exists
        let aggregate%extract%0#0: bytes = (extract3 maybe_value%0#0 2u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%0#0)
        let awst_tmp%1#0: uint64 = aggregate%item1%0#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%4#0: bytes = (concat 0x aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob awst_tmp%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%5#0 encoded_array%1#0)
        let aggregate%as_Encoded((len+uint64[]),uint64)%1#0: Encoded((len+uint64[]),uint64) = aggregate%concat%1#0
        let encoded_for_storage%1#0: Encoded((len+uint64[]),uint64) = aggregate%as_Encoded((len+uint64[]),uint64)%1#0
        (app_global_put "glob" encoded_for_storage%1#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%6#0: bytes = (concat aggregate%len_u16%2#0 0x0000000000000000)
        let aggregate%as_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = aggregate%head%6#0
        let encoded_array%2#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%2#0
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%1#0) // check self.tup exists
        let aggregate%extract%1#0: bytes = (extract3 maybe_value%1#0 2u 8u)
        let aggregate%item1%1#0: uint64 = (btoi aggregate%extract%1#0)
        let awst_tmp%3#0: uint64 = aggregate%item1%1#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%7#0: bytes = (concat 0x aggregate%offset_as_uint16%2#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob awst_tmp%3#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%8#0 encoded_array%2#0)
        let aggregate%as_Encoded((len+uint64[]),uint64)%2#0: Encoded((len+uint64[]),uint64) = aggregate%concat%2#0
        let encoded_for_storage%2#0: Encoded((len+uint64[]),uint64) = aggregate%as_Encoded((len+uint64[]),uint64)%2#0
        (app_global_put "tup" encoded_for_storage%2#0)
        return 

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap() -> void:
    block@0: // L23
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x0000000000000000)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%0#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%0#0) // check self.tup exists
        let aggregate%extract%0#0: bytes = (extract3 maybe_value%0#0 2u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%0#0)
        let awst_tmp%1#0: uint64 = aggregate%item1%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob awst_tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 encoded_array%0#0)
        let aggregate%as_Encoded((len+uint64[]),uint64)%0#0: Encoded((len+uint64[]),uint64) = aggregate%concat%0#0
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = aggregate%as_Encoded((len+uint64[]),uint64)%0#0
        (box_del "box")
        (box_put "box" encoded_for_storage%0#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%3#0: bytes = (concat aggregate%len_u16%1#0 0x0000000000000000)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%head%3#0
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%1#0) // check self.tup exists
        let aggregate%extract%1#0: bytes = (extract3 maybe_value%1#0 2u 8u)
        let aggregate%item1%1#0: uint64 = (btoi aggregate%extract%1#0)
        let awst_tmp%3#0: uint64 = aggregate%item1%1#0
        let tmp%0#0: account = (txn Sender)
        let aggregate%as_bytes%3#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%4#0: bytes = (concat 0x aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob awst_tmp%3#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%5#0 encoded_array%1#0)
        let aggregate%as_Encoded((len+uint64[]),uint64)%1#0: Encoded((len+uint64[]),uint64) = aggregate%concat%1#0
        let encoded_for_storage%1#0: Encoded((len+uint64[]),uint64) = aggregate%as_Encoded((len+uint64[]),uint64)%1#0
        (app_local_put tmp%0#0 "loc" encoded_for_storage%1#0)
        return 

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple(val: Encoded(uint64)) -> void:
    block@0: // L28
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%0#0) // check self.tup exists
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let aggregate%len%0#0: uint64 = (len maybe_value%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 maybe_value%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let aggregate%extract%0#0: bytes = (extract3 maybe_value%0#0 2u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%0#0)
        let tmp%0#0: Encoded(len+uint64[]) = aggregate%substring3%0#0
        let tmp%1#0: uint64 = aggregate%item1%0#0
        let aggregate%head%0#0: bytes = (concat 0x val#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%0#0
        let tmp%2#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat tmp%0#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%1#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 as_Encoded(len+uint64[])%0#0)
        let aggregate%as_Encoded((len+uint64[]),uint64)%0#0: Encoded((len+uint64[]),uint64) = aggregate%concat%0#0
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = aggregate%as_Encoded((len+uint64[]),uint64)%0#0
        (app_global_put "tup" encoded_for_storage%0#0)
        return 

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box(val: Encoded(uint64)) -> void:
    block@0: // L32
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "box")
        (assert aggregate%box_get%1#0) // check self.box exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 storage_value%0#0 0u)
        let aggregate%len%0#0: uint64 = (len storage_value%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 storage_value%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 2u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%0#0)
        let tmp%0#0: Encoded(len+uint64[]) = aggregate%substring3%0#0
        let tmp%1#0: uint64 = aggregate%item1%0#0
        let aggregate%head%0#0: bytes = (concat 0x val#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%0#0
        let tmp%2#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat tmp%0#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%1#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 as_Encoded(len+uint64[])%0#0)
        let aggregate%as_Encoded((len+uint64[]),uint64)%0#0: Encoded((len+uint64[]),uint64) = aggregate%concat%0#0
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = aggregate%as_Encoded((len+uint64[]),uint64)%0#0
        (box_del "box")
        (box_put "box" encoded_for_storage%0#0)
        return 

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global(val: Encoded(uint64)) -> void:
    block@0: // L36
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "glob")
        (assert maybe_exists%0#0) // check self.glob exists
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let aggregate%len%0#0: uint64 = (len maybe_value%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 maybe_value%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let aggregate%extract%0#0: bytes = (extract3 maybe_value%0#0 2u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%0#0)
        let tmp%0#0: Encoded(len+uint64[]) = aggregate%substring3%0#0
        let tmp%1#0: uint64 = aggregate%item1%0#0
        let aggregate%head%0#0: bytes = (concat 0x val#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%0#0
        let tmp%2#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat tmp%0#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%1#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 as_Encoded(len+uint64[])%0#0)
        let aggregate%as_Encoded((len+uint64[]),uint64)%0#0: Encoded((len+uint64[]),uint64) = aggregate%concat%0#0
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = aggregate%as_Encoded((len+uint64[]),uint64)%0#0
        (app_global_put "glob" encoded_for_storage%0#0)
        return 

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local(val: Encoded(uint64)) -> void:
    block@0: // L40
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#0 0u "loc")
        (assert maybe_exists%0#0) // check self.loc exists for account
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let aggregate%len%0#0: uint64 = (len maybe_value%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 maybe_value%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let aggregate%extract%0#0: bytes = (extract3 maybe_value%0#0 2u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%0#0)
        let tmp%1#0: Encoded(len+uint64[]) = aggregate%substring3%0#0
        let tmp%2#0: uint64 = aggregate%item1%0#0
        let aggregate%head%0#0: bytes = (concat 0x val#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%0#0
        let tmp%3#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat tmp%1#0 tmp%3#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%1#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%1#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 as_Encoded(len+uint64[])%0#0)
        let aggregate%as_Encoded((len+uint64[]),uint64)%0#0: Encoded((len+uint64[]),uint64) = aggregate%concat%0#0
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = aggregate%as_Encoded((len+uint64[]),uint64)%0#0
        (app_local_put tmp%0#0 "loc" encoded_for_storage%0#0)
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L11
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@9, 2u => block@14, 3u => block@18, 4u => block@19, 5u => block@20, 6u => block@21, 7u => block@22, 8u => block@23, 9u => block@24, 10u => block@25, 11u => block@26, * => block@27}
    block@2: // switch_case_0_L11
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "mutate_tuple(uint64)void" => block@3, method "mutate_box(uint64)void" => block@4, method "mutate_global(uint64)void" => block@5, method "mutate_local(uint64)void" => block@6, * => block@7}
    block@3: // mutate_tuple_route_L28
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple[routing]()
        goto block@8
    block@4: // mutate_box_route_L32
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box[routing]()
        goto block@8
    block@5: // mutate_global_route_L36
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global[routing]()
        goto block@8
    block@6: // mutate_local_route_L40
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local[routing]()
        goto block@8
    block@7: // switch_case_default_L11
        goto block@8
    block@8: // switch_case_next_L11
        fail // this contract does not implement the given ABI method for call NoOp
    block@9: // switch_case_1_L11
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@10 : block@13
    block@10: // __algopy_default_create_L1
        goto block@11
    block@11: // L1
        goto block@12
    block@12: // after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_default_create_L1
        exit 1u
    block@13: // else_body_L11
        fail // this contract does not implement the given ABI method for create NoOp
    block@14: // switch_case_2_L11
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {method "bootstrap()void" => block@15, * => block@16}
    block@15: // bootstrap_route_L23
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap[routing]()
        goto block@17
    block@16: // switch_case_default_L11
        goto block@17
    block@17: // switch_case_next_L11
        fail // this contract does not implement the given ABI method for call OptIn
    block@18: // switch_case_3_L11
        goto block@27
    block@19: // switch_case_4_L11
        goto block@27
    block@20: // switch_case_5_L11
        goto block@27
    block@21: // switch_case_6_L11
        goto block@27
    block@22: // switch_case_7_L11
        goto block@27
    block@23: // switch_case_8_L11
        goto block@27
    block@24: // switch_case_9_L11
        goto block@27
    block@25: // switch_case_10_L11
        goto block@27
    block@26: // switch_case_11_L11
        goto block@27
    block@27: // switch_case_default_L11
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@28: // after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0