main test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__init__() -> void:
    block@0: // L12
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x 0x0000000000000000)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%1#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%0#1)
        let aggregate%encoded%2#1: Encoded(len+uint64[]) = (concat aggregate%encoded%1#1 0x)
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%encoded%2#1
        let aggregate%tail%0#1: bytes = (concat 0x encoded_array%0#0)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%3#1: Encoded((len+uint64[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%4#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%3#1 aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded%5#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%4#1 aggregate%tail%0#1)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = aggregate%encoded%5#1
        (app_global_put "tup" encoded_for_storage%0#0)
        let aggregate%encoded%6#1: Encoded(uint64) = (concat 0x 0x0000000000000000)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%7#1: bytes = (concat aggregate%len_u16%1#1 aggregate%encoded%6#1)
        let aggregate%encoded%8#1: Encoded(len+uint64[]) = (concat aggregate%encoded%7#1 0x)
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%encoded%8#1
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%0#0) // check self.tup exists
        let aggregate%extract%0#1: bytes = (extract3 maybe_value%0#0 2u 8u)
        let aggregate%item1%0#1: uint64 = (btoi aggregate%extract%0#1)
        let awst_tmp%1#0: uint64 = aggregate%item1%0#1
        let aggregate%tail%1#1: bytes = (concat 0x encoded_array%1#0)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%9#1: Encoded((len+uint64[])) = (concat 0x aggregate%offset_as_uint16%1#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob awst_tmp%1#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%10#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%9#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%encoded%11#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%10#1 aggregate%tail%1#1)
        let encoded_for_storage%1#0: Encoded((len+uint64[]),uint64) = aggregate%encoded%11#1
        (app_global_put "glob" encoded_for_storage%1#0)
        let aggregate%encoded%12#1: Encoded(uint64) = (concat 0x 0x0000000000000000)
        let aggregate%as_bytes%4#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded%13#1: bytes = (concat aggregate%len_u16%2#1 aggregate%encoded%12#1)
        let aggregate%encoded%14#1: Encoded(len+uint64[]) = (concat aggregate%encoded%13#1 0x)
        let encoded_array%2#0: Encoded(len+uint64[]) = aggregate%encoded%14#1
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%1#0) // check self.tup exists
        let aggregate%extract%1#1: bytes = (extract3 maybe_value%1#0 2u 8u)
        let aggregate%item1%1#1: uint64 = (btoi aggregate%extract%1#1)
        let awst_tmp%3#0: uint64 = aggregate%item1%1#1
        let aggregate%tail%2#1: bytes = (concat 0x encoded_array%2#0)
        let aggregate%as_bytes%5#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%15#1: Encoded((len+uint64[])) = (concat 0x aggregate%offset_as_uint16%2#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob awst_tmp%3#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%16#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%15#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%encoded%17#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%16#1 aggregate%tail%2#1)
        let encoded_for_storage%2#0: Encoded((len+uint64[]),uint64) = aggregate%encoded%17#1
        (app_global_put "tup" encoded_for_storage%2#0)
        return 

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap() -> void:
    block@0: // L23
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x 0x0000000000000000)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%1#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%0#1)
        let aggregate%encoded%2#1: Encoded(len+uint64[]) = (concat aggregate%encoded%1#1 0x)
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%encoded%2#1
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%0#0) // check self.tup exists
        let aggregate%extract%0#1: bytes = (extract3 maybe_value%0#0 2u 8u)
        let aggregate%item1%0#1: uint64 = (btoi aggregate%extract%0#1)
        let awst_tmp%1#0: uint64 = aggregate%item1%0#1
        (box_del "box")
        let aggregate%tail%0#1: bytes = (concat 0x encoded_array%0#0)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%3#1: Encoded((len+uint64[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob awst_tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%4#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%3#1 aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded%5#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%4#1 aggregate%tail%0#1)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = aggregate%encoded%5#1
        (box_put "box" encoded_for_storage%0#0)
        let aggregate%encoded%6#1: Encoded(uint64) = (concat 0x 0x0000000000000000)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%7#1: bytes = (concat aggregate%len_u16%1#1 aggregate%encoded%6#1)
        let aggregate%encoded%8#1: Encoded(len+uint64[]) = (concat aggregate%encoded%7#1 0x)
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%encoded%8#1
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%1#0) // check self.tup exists
        let aggregate%extract%1#1: bytes = (extract3 maybe_value%1#0 2u 8u)
        let aggregate%item1%1#1: uint64 = (btoi aggregate%extract%1#1)
        let awst_tmp%3#0: uint64 = aggregate%item1%1#1
        let tmp%0#0: account = (txn Sender)
        let aggregate%tail%1#1: bytes = (concat 0x encoded_array%1#0)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%9#1: Encoded((len+uint64[])) = (concat 0x aggregate%offset_as_uint16%1#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob awst_tmp%3#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%10#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%9#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%encoded%11#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%10#1 aggregate%tail%1#1)
        let encoded_for_storage%1#0: Encoded((len+uint64[]),uint64) = aggregate%encoded%11#1
        (app_local_put tmp%0#0 "loc" encoded_for_storage%1#0)
        return 

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple(val: Encoded(uint64)) -> void:
    block@0: // L28
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%0#0) // check self.tup exists
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let aggregate%len%0#1: uint64 = (len maybe_value%0#0)
        let aggregate%substring3%0#1: bytes = (substring3 maybe_value%0#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%extract%0#1: bytes = (extract3 maybe_value%0#0 2u 8u)
        let aggregate%item1%0#1: uint64 = (btoi aggregate%extract%0#1)
        let tmp%0#0: Encoded(len+uint64[]) = aggregate%substring3%0#1
        let tmp%1#0: uint64 = aggregate%item1%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x val#0)
        let aggregate%encoded%1#1: Encoded(uint64[]) = (concat aggregate%encoded%0#1 0x)
        let tmp%2#0: Encoded(uint64[]) = aggregate%encoded%1#1
        let concat%0#0: Encoded(len+uint64[]) = (concat tmp%0#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let aggregate%tail%0#1: bytes = (concat 0x as_Encoded(len+uint64[])%0#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%2#1: Encoded((len+uint64[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%3#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%2#1 aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded%4#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%3#1 aggregate%tail%0#1)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = aggregate%encoded%4#1
        (app_global_put "tup" encoded_for_storage%0#0)
        return 

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box(val: Encoded(uint64)) -> void:
    block@0: // L32
        let (aggregate%box_get%0#1: bytes, aggregate%box_get%1#1: bool) = (box_get "box")
        (assert aggregate%box_get%1#1) // check self.box exists
        let storage_value%0#0: bytes = aggregate%box_get%0#1
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 storage_value%0#0 0u)
        let aggregate%len%0#1: uint64 = (len storage_value%0#0)
        let aggregate%substring3%0#1: bytes = (substring3 storage_value%0#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%extract%0#1: bytes = (extract3 storage_value%0#0 2u 8u)
        let aggregate%item1%0#1: uint64 = (btoi aggregate%extract%0#1)
        let tmp%0#0: Encoded(len+uint64[]) = aggregate%substring3%0#1
        let tmp%1#0: uint64 = aggregate%item1%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x val#0)
        let aggregate%encoded%1#1: Encoded(uint64[]) = (concat aggregate%encoded%0#1 0x)
        let tmp%2#0: Encoded(uint64[]) = aggregate%encoded%1#1
        let concat%0#0: Encoded(len+uint64[]) = (concat tmp%0#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        (box_del "box")
        let aggregate%tail%0#1: bytes = (concat 0x as_Encoded(len+uint64[])%0#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%2#1: Encoded((len+uint64[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%3#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%2#1 aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded%4#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%3#1 aggregate%tail%0#1)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = aggregate%encoded%4#1
        (box_put "box" encoded_for_storage%0#0)
        return 

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global(val: Encoded(uint64)) -> void:
    block@0: // L36
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "glob")
        (assert maybe_exists%0#0) // check self.glob exists
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let aggregate%len%0#1: uint64 = (len maybe_value%0#0)
        let aggregate%substring3%0#1: bytes = (substring3 maybe_value%0#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%extract%0#1: bytes = (extract3 maybe_value%0#0 2u 8u)
        let aggregate%item1%0#1: uint64 = (btoi aggregate%extract%0#1)
        let tmp%0#0: Encoded(len+uint64[]) = aggregate%substring3%0#1
        let tmp%1#0: uint64 = aggregate%item1%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x val#0)
        let aggregate%encoded%1#1: Encoded(uint64[]) = (concat aggregate%encoded%0#1 0x)
        let tmp%2#0: Encoded(uint64[]) = aggregate%encoded%1#1
        let concat%0#0: Encoded(len+uint64[]) = (concat tmp%0#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let aggregate%tail%0#1: bytes = (concat 0x as_Encoded(len+uint64[])%0#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%2#1: Encoded((len+uint64[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%3#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%2#1 aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded%4#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%3#1 aggregate%tail%0#1)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = aggregate%encoded%4#1
        (app_global_put "glob" encoded_for_storage%0#0)
        return 

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local(val: Encoded(uint64)) -> void:
    block@0: // L40
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#0 0u "loc")
        (assert maybe_exists%0#0) // check self.loc exists for account
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let aggregate%len%0#1: uint64 = (len maybe_value%0#0)
        let aggregate%substring3%0#1: bytes = (substring3 maybe_value%0#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%extract%0#1: bytes = (extract3 maybe_value%0#0 2u 8u)
        let aggregate%item1%0#1: uint64 = (btoi aggregate%extract%0#1)
        let tmp%1#0: Encoded(len+uint64[]) = aggregate%substring3%0#1
        let tmp%2#0: uint64 = aggregate%item1%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x val#0)
        let aggregate%encoded%1#1: Encoded(uint64[]) = (concat aggregate%encoded%0#1 0x)
        let tmp%3#0: Encoded(uint64[]) = aggregate%encoded%1#1
        let concat%0#0: Encoded(len+uint64[]) = (concat tmp%1#0 tmp%3#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%1#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let aggregate%tail%0#1: bytes = (concat 0x as_Encoded(len+uint64[])%0#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%2#1: Encoded((len+uint64[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%3#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%2#1 aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded%4#1: Encoded((len+uint64[]),uint64) = (concat aggregate%encoded%3#1 aggregate%tail%0#1)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = aggregate%encoded%4#1
        (app_local_put tmp%0#0 "loc" encoded_for_storage%0#0)
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L11
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@10
    block@2: // abi_routing_L11
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "bootstrap()void" => block@3, method "mutate_tuple(uint64)void" => block@4, method "mutate_box(uint64)void" => block@5, method "mutate_global(uint64)void" => block@6, method "mutate_local(uint64)void" => block@7, * => block@8}
    block@3: // bootstrap_route_L23
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        (assert tmp%4#0) // OnCompletion is not OptIn
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap()
        let test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0
        goto block@17
    block@4: // mutate_tuple_route_L28
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple(reinterpret_Encoded(uint64)%0#0)
        let test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0
        goto block@17
    block@5: // mutate_box_route_L32
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box(reinterpret_Encoded(uint64)%1#0)
        let test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0
        goto block@17
    block@6: // mutate_global_route_L36
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global(reinterpret_Encoded(uint64)%2#0)
        let test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0
        goto block@17
    block@7: // mutate_local_route_L40
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local(reinterpret_Encoded(uint64)%3#0)
        let test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0
        goto block@17
    block@8: // switch_case_default_L11
        goto block@9
    block@9: // switch_case_next_L11
        goto block@16
    block@10: // bare_routing_L11
        let tmp%23#0: uint64 = (txn OnCompletion)
        switch tmp%23#0 {0u => block@11, * => block@14}
    block@11: // __algopy_default_create_L1
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (== tmp%24#0 0u)
        (assert tmp%25#0) // can only call when creating
        goto block@12
    block@12: // L1
        goto block@13
    block@13: // after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_default_create_L1
        let test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0
        goto block@17
    block@14: // switch_case_default_L11
        goto block@15
    block@15: // switch_case_next_L11
        goto block@16
    block@16: // after_if_else_L11
        let test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__%0#0
        goto block@17
    block@17: // after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router___L1
        return tmp%0#0