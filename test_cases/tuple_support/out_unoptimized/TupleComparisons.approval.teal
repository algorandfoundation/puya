#pragma version 10

test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program:
    // tuple_support/tuple_comparisons.py:6
    // test_tuple_cmp_eval()
    callsub test_tuple_cmp_eval
    // tuple_support/tuple_comparisons.py:7
    // return True
    int 1
    return


// test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval() -> void:
test_tuple_cmp_eval:
    // tuple_support/tuple_comparisons.py:13-14
    // @subroutine
    // def test_tuple_cmp_eval() -> None:
    proto 0 0
    // tuple_support/tuple_comparisons.py:21
    // assert (UInt64(1), UInt64(2)) != (UInt64(3), log_and_return(UInt64(43)))
    int 1
    int 3
    !=
    int 43
    callsub log_and_return
    int 2
    swap
    !=
    ||
    assert
    // tuple_support/tuple_comparisons.py:22
    // tmp = (UInt64(1), UInt64(2)) == (UInt64(3), log_and_return(UInt64(44)))
    int 1
    int 3
    ==
    int 44
    callsub log_and_return
    int 2
    swap
    ==
    &&
    // tuple_support/tuple_comparisons.py:23
    // assert not tmp
    !
    assert
    retsub


// test_cases.tuple_support.tuple_comparisons.log_and_return(val: uint64) -> uint64:
log_and_return:
    // tuple_support/tuple_comparisons.py:26-27
    // @subroutine
    // def log_and_return(val: UInt64) -> UInt64:
    proto 1 1
    // tuple_support/tuple_comparisons.py:28
    // log(val)
    frame_dig -1
    itob
    log
    // tuple_support/tuple_comparisons.py:29
    // return val
    frame_dig -1
    retsub
