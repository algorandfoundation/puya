#pragma version 11
#pragma typetrack false

// test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program() -> uint64:
main:
    intcblock 1 3 2 0
    bytecblock "abc"
    b main_block@0

main_block@0:
    // tuple_support/tuple_comparisons.py:6
    // test_tuple_cmp_eval()
    callsub test_tuple_cmp_eval
    // tuple_support/tuple_comparisons.py:7
    // test_tuple_cmp_empty()
    callsub test_tuple_cmp_empty
    // tuple_support/tuple_comparisons.py:8
    // return True
    intc_0 // 1
    return


// test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval() -> void:
test_tuple_cmp_eval:
    b test_tuple_cmp_eval_block@0

test_tuple_cmp_eval_block@0:
    // tuple_support/tuple_comparisons.py:17
    // String("abc"),
    bytec_0 // "abc"
    // tuple_support/tuple_comparisons.py:19
    // ) != (String("abc"),)  # type: ignore[comparison-overlap]
    bytec_0 // "abc"
    // tuple_support/tuple_comparisons.py:16-19
    // assert (
    //     String("abc"),
    //     log_and_return(UInt64(42)),
    // ) != (String("abc"),)  # type: ignore[comparison-overlap]
    !=
    // tuple_support/tuple_comparisons.py:18
    // log_and_return(UInt64(42)),
    pushint 42 // 42
    callsub log_and_return
    // tuple_support/tuple_comparisons.py:16-19
    // assert (
    //     String("abc"),
    //     log_and_return(UInt64(42)),
    // ) != (String("abc"),)  # type: ignore[comparison-overlap]
    dup
    ==
    ||
    assert
    // tuple_support/tuple_comparisons.py:21
    // String("abc"),
    bytec_0 // "abc"
    // tuple_support/tuple_comparisons.py:23
    // ) == (String("abc"),)  # type: ignore[comparison-overlap]
    bytec_0 // "abc"
    // tuple_support/tuple_comparisons.py:20-23
    // tmp = (
    //     String("abc"),
    //     log_and_return(UInt64(43)),
    // ) == (String("abc"),)  # type: ignore[comparison-overlap]
    ==
    // tuple_support/tuple_comparisons.py:22
    // log_and_return(UInt64(43)),
    pushint 43 // 43
    callsub log_and_return
    // tuple_support/tuple_comparisons.py:20-23
    // tmp = (
    //     String("abc"),
    //     log_and_return(UInt64(43)),
    // ) == (String("abc"),)  # type: ignore[comparison-overlap]
    dup
    !=
    &&
    // tuple_support/tuple_comparisons.py:24
    // assert not tmp
    !
    assert
    // tuple_support/tuple_comparisons.py:26
    // assert (String("abc"),) != (
    bytec_0 // "abc"
    // tuple_support/tuple_comparisons.py:27
    // String("abc"),
    bytec_0 // "abc"
    // tuple_support/tuple_comparisons.py:26-29
    // assert (String("abc"),) != (
    //     String("abc"),
    //     log_and_return(UInt64(44)),
    // )  # type: ignore[comparison-overlap]
    !=
    // tuple_support/tuple_comparisons.py:28
    // log_and_return(UInt64(44)),
    pushint 44 // 44
    callsub log_and_return
    // tuple_support/tuple_comparisons.py:26-29
    // assert (String("abc"),) != (
    //     String("abc"),
    //     log_and_return(UInt64(44)),
    // )  # type: ignore[comparison-overlap]
    dup
    ==
    ||
    assert
    // tuple_support/tuple_comparisons.py:30
    // tmp = (String("abc"),) == (
    bytec_0 // "abc"
    // tuple_support/tuple_comparisons.py:31
    // String("abc"),
    bytec_0 // "abc"
    // tuple_support/tuple_comparisons.py:30-33
    // tmp = (String("abc"),) == (
    //     String("abc"),
    //     log_and_return(UInt64(45)),
    // )  # type: ignore[comparison-overlap]
    ==
    // tuple_support/tuple_comparisons.py:32
    // log_and_return(UInt64(45)),
    pushint 45 // 45
    callsub log_and_return
    // tuple_support/tuple_comparisons.py:30-33
    // tmp = (String("abc"),) == (
    //     String("abc"),
    //     log_and_return(UInt64(45)),
    // )  # type: ignore[comparison-overlap]
    dup
    !=
    &&
    // tuple_support/tuple_comparisons.py:34
    // assert not tmp
    !
    assert
    // tuple_support/tuple_comparisons.py:36
    // assert (UInt64(1), UInt64(2)) != (UInt64(3), log_and_return(UInt64(46)))
    intc_0 // 1
    intc_1 // 3
    !=
    pushint 46 // 46
    callsub log_and_return
    intc_2 // 2
    !=
    ||
    assert
    // tuple_support/tuple_comparisons.py:37
    // tmp = (UInt64(1), UInt64(2)) == (UInt64(3), log_and_return(UInt64(47)))
    intc_0 // 1
    intc_1 // 3
    ==
    pushint 47 // 47
    callsub log_and_return
    intc_2 // 2
    ==
    &&
    // tuple_support/tuple_comparisons.py:38
    // assert not tmp
    !
    assert
    retsub


// test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty() -> void:
test_tuple_cmp_empty:
    b test_tuple_cmp_empty_block@0

test_tuple_cmp_empty_block@0:
    // tuple_support/tuple_comparisons.py:44
    // tmp = () != ()
    intc_3 // 0
    // tuple_support/tuple_comparisons.py:45
    // assert not tmp
    !
    assert
    // tuple_support/tuple_comparisons.py:48
    // tmp = () == ("a",)  # type: ignore[comparison-overlap]
    intc_3 // 0
    // tuple_support/tuple_comparisons.py:49
    // assert not tmp
    !
    assert
    retsub


// test_cases.tuple_support.tuple_comparisons.log_and_return(val: uint64) -> uint64:
log_and_return:
    // tuple_support/tuple_comparisons.py:52-53
    // @subroutine
    // def log_and_return(val: UInt64) -> UInt64:
    proto 1 1
    b log_and_return_block@0

log_and_return_block@0:
    // tuple_support/tuple_comparisons.py:54
    // log(val)
    frame_dig -1
    itob
    log
    // tuple_support/tuple_comparisons.py:55
    // return val
    frame_dig -1
    retsub
