{
  "version": 3,
  "sources": [
    "../tuple_storage.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;;;;;;;;AAAA;AA6BK;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;;;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAvBW;AAAA;AAAA;;;AAAkB;AAAlB;AADR;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAEQ;AAFR;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAIwC;AAAA;AAAA;;;AAAkB;AAAlB;AAAtB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAlB;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AACiC;AAAA;AAAA;;;AAAkB;AAAlB;AAAtB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAX;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;;;AAIuC;AAAA;AAAA;;;AAAkB;AAAlB;AAAtB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAjB;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAC6C;AAAA;AAAA;;;AAAkB;AAAlB;AAAtB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAd;;AAAA;;AAAT;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAEH;;;;;;AAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAEH;;;;;;AAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAEH;;;;;;AAEG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAEH;;;;;;AAEY;;AAAT;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 10"
    },
    "7": {
      "op": "bytecblock 0x \"tup\" 0x0000000000000000 \"box\" \"glob\" \"loc\""
    },
    "36": {
      "op": "b main_block@0"
    },
    "39": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "41": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "44": {
      "op": "b main_call___init__@1"
    },
    "47": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__init__",
      "op": "callsub __init__"
    },
    "50": {
      "op": "b main_after_if_else@2"
    },
    "53": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "b main_block@3"
    },
    "56": {
      "block": "main_block@3",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "58": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "59": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "60": {
      "op": "bz main___algopy_default_create@15",
      "stack_out": []
    },
    "63": {
      "op": "b main_abi_routing@4"
    },
    "66": {
      "block": "main_abi_routing@4",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "69": {
      "op": "pushbytes 0xbec76d87 // method \"bootstrap()void\"",
      "defined_out": [
        "Method(bootstrap()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(bootstrap()void)"
      ]
    },
    "75": {
      "op": "uncover 1",
      "stack_out": [
        "Method(bootstrap()void)",
        "tmp%2#0"
      ]
    },
    "77": {
      "op": "match main_bootstrap_route@5",
      "stack_out": []
    },
    "81": {
      "op": "b main_switch_case_next@6"
    },
    "84": {
      "block": "main_switch_case_next@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "86": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "87": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "88": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "89": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "91": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "92": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "93": {
      "op": "bz main_create_NoOp@13",
      "stack_out": []
    },
    "96": {
      "op": "b main_call_NoOp@7"
    },
    "99": {
      "block": "main_call_NoOp@7",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "102": {
      "op": "pushbytes 0xacc253ae // method \"mutate_tuple(uint64)void\"",
      "defined_out": [
        "Method(mutate_tuple(uint64)void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(mutate_tuple(uint64)void)"
      ]
    },
    "108": {
      "op": "pushbytes 0xe844940c // method \"mutate_box(uint64)void\"",
      "defined_out": [
        "Method(mutate_box(uint64)void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)"
      ]
    },
    "114": {
      "op": "pushbytes 0x6222ef1a // method \"mutate_global(uint64)void\"",
      "defined_out": [
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)"
      ]
    },
    "120": {
      "op": "pushbytes 0x1b269b50 // method \"mutate_local(uint64)void\"",
      "defined_out": [
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)"
      ]
    },
    "126": {
      "op": "uncover 4",
      "stack_out": [
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "tmp%12#0"
      ]
    },
    "128": {
      "op": "match main_mutate_tuple_route@8 main_mutate_box_route@9 main_mutate_global_route@10 main_mutate_local_route@11",
      "stack_out": []
    },
    "138": {
      "op": "b main_switch_case_next@12"
    },
    "141": {
      "block": "main_switch_case_next@12",
      "stack_in": [],
      "op": "b main_after_if_else@14"
    },
    "144": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "b main_after_if_else@16"
    },
    "147": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "148": {
      "block": "main_mutate_local_route@11",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local[routing]",
      "op": "callsub mutate_local"
    },
    "151": {
      "op": "b main_switch_case_next@12"
    },
    "154": {
      "block": "main_mutate_global_route@10",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global[routing]",
      "op": "callsub mutate_global"
    },
    "157": {
      "op": "b main_switch_case_next@12"
    },
    "160": {
      "block": "main_mutate_box_route@9",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box[routing]",
      "op": "callsub mutate_box"
    },
    "163": {
      "op": "b main_switch_case_next@12"
    },
    "166": {
      "block": "main_mutate_tuple_route@8",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple[routing]",
      "op": "callsub mutate_tuple"
    },
    "169": {
      "op": "b main_switch_case_next@12"
    },
    "172": {
      "block": "main_create_NoOp@13",
      "stack_in": [],
      "op": "b main_after_if_else@14"
    },
    "175": {
      "block": "main_bootstrap_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "177": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "OptIn"
      ]
    },
    "178": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "179": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "181": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "182": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "183": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "184": {
      "error": "OnCompletion must be OptIn && can only call when not creating",
      "op": "assert // OnCompletion must be OptIn && can only call when not creating",
      "stack_out": []
    },
    "185": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap[routing]",
      "op": "callsub bootstrap"
    },
    "188": {
      "op": "b main_switch_case_next@6"
    },
    "191": {
      "block": "main___algopy_default_create@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "193": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "194": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "195": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "197": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "0"
      ]
    },
    "198": {
      "op": "==",
      "defined_out": [
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "199": {
      "op": "&&",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "200": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "201": {
      "op": "b main_block@18"
    },
    "204": {
      "block": "main_block@18",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_default_create@19"
    },
    "207": {
      "block": "main_after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_default_create@19",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "208": {
      "op": "return",
      "stack_out": []
    },
    "209": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap[routing]",
      "params": {},
      "block": "bootstrap",
      "stack_in": [],
      "op": "b bootstrap_block@0"
    },
    "212": {
      "block": "bootstrap_block@0",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap",
      "op": "callsub test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap"
    },
    "215": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "216": {
      "op": "return",
      "stack_out": []
    },
    "217": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple[routing]",
      "params": {},
      "block": "mutate_tuple",
      "stack_in": [],
      "op": "b mutate_tuple_block@0"
    },
    "220": {
      "block": "mutate_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "223": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "224": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "225": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "226": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "227": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "228": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple",
      "op": "callsub test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple",
      "stack_out": []
    },
    "231": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "232": {
      "op": "return",
      "stack_out": []
    },
    "233": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box[routing]",
      "params": {},
      "block": "mutate_box",
      "stack_in": [],
      "op": "b mutate_box_block@0"
    },
    "236": {
      "block": "mutate_box_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "239": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "240": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "241": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "242": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "243": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "244": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box",
      "op": "callsub test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box",
      "stack_out": []
    },
    "247": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "248": {
      "op": "return",
      "stack_out": []
    },
    "249": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global[routing]",
      "params": {},
      "block": "mutate_global",
      "stack_in": [],
      "op": "b mutate_global_block@0"
    },
    "252": {
      "block": "mutate_global_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "255": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "256": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "257": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "258": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "259": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "260": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global",
      "op": "callsub test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global",
      "stack_out": []
    },
    "263": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "264": {
      "op": "return",
      "stack_out": []
    },
    "265": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local[routing]",
      "params": {},
      "block": "mutate_local",
      "stack_in": [],
      "op": "b mutate_local_block@0"
    },
    "268": {
      "block": "mutate_local_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "271": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "272": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "273": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "274": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "275": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "276": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local",
      "op": "callsub test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local",
      "stack_out": []
    },
    "279": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "280": {
      "op": "return",
      "stack_out": []
    },
    "281": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "284": {
      "block": "__init___block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "285": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "286": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0"
      ]
    },
    "289": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0",
        "0x0000000000000000"
      ]
    },
    "290": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "291": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "10"
      ]
    },
    "292": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "293": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "296": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "297": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "299": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0"
      ]
    },
    "300": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "0"
      ]
    },
    "301": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "302": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%2#0"
      ]
    },
    "303": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ]
    },
    "305": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "306": {
      "op": "bytec_1 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"tup\""
      ]
    },
    "307": {
      "op": "uncover 1",
      "stack_out": [
        "\"tup\"",
        "encoded_for_storage%0#0"
      ]
    },
    "309": {
      "op": "app_global_put",
      "stack_out": []
    },
    "310": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "311": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%2#0"
      ]
    },
    "312": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%1#0"
      ],
      "stack_out": [
        "aggregate%len_u16%1#0"
      ]
    },
    "315": {
      "op": "bytec_2 // 0x0000000000000000",
      "stack_out": [
        "aggregate%len_u16%1#0",
        "0x0000000000000000"
      ]
    },
    "316": {
      "op": "concat",
      "defined_out": [
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0"
      ]
    },
    "317": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_array%1#0",
        "0"
      ]
    },
    "318": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_array%1#0",
        "0",
        "\"tup\""
      ]
    },
    "319": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_array%1#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "320": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%0#0"
      ]
    },
    "321": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "encoded_array%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "323": {
      "op": "intc_2 // 8",
      "defined_out": [
        "2",
        "8",
        "encoded_array%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "324": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%extract%0#0"
      ]
    },
    "325": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0"
      ]
    },
    "326": {
      "op": "intc_3 // 10",
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "10"
      ]
    },
    "327": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "awst_tmp%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "328": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%1#0",
        "awst_tmp%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "331": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%1#0",
        "0x"
      ]
    },
    "332": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "0x",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "334": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "awst_tmp%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "aggregate%head%4#0"
      ]
    },
    "335": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%head%4#0",
        "awst_tmp%1#0"
      ]
    },
    "337": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%4#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "338": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%head%5#0"
      ]
    },
    "339": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%5#0",
        "encoded_array%1#0"
      ]
    },
    "341": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%1#0"
      ],
      "stack_out": [
        "encoded_for_storage%1#0"
      ]
    },
    "342": {
      "op": "bytec 4 // \"glob\"",
      "defined_out": [
        "\"glob\"",
        "encoded_for_storage%1#0"
      ],
      "stack_out": [
        "encoded_for_storage%1#0",
        "\"glob\""
      ]
    },
    "344": {
      "op": "uncover 1",
      "stack_out": [
        "\"glob\"",
        "encoded_for_storage%1#0"
      ]
    },
    "346": {
      "op": "app_global_put",
      "stack_out": []
    },
    "347": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "348": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%4#0"
      ]
    },
    "349": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%2#0"
      ],
      "stack_out": [
        "aggregate%len_u16%2#0"
      ]
    },
    "352": {
      "op": "bytec_2 // 0x0000000000000000",
      "stack_out": [
        "aggregate%len_u16%2#0",
        "0x0000000000000000"
      ]
    },
    "353": {
      "op": "concat",
      "defined_out": [
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0"
      ]
    },
    "354": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_array%2#0",
        "0"
      ]
    },
    "355": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_array%2#0",
        "0",
        "\"tup\""
      ]
    },
    "356": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_array%2#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "357": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "encoded_array%2#0",
        "maybe_value%1#0"
      ]
    },
    "358": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "encoded_array%2#0",
        "maybe_value%1#0",
        "2"
      ]
    },
    "360": {
      "op": "intc_2 // 8",
      "stack_out": [
        "encoded_array%2#0",
        "maybe_value%1#0",
        "2",
        "8"
      ]
    },
    "361": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "aggregate%extract%1#0"
      ]
    },
    "362": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%3#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0"
      ]
    },
    "363": {
      "op": "intc_3 // 10",
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "10"
      ]
    },
    "364": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#0",
        "awst_tmp%3#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "365": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%2#0",
        "awst_tmp%3#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "368": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "aggregate%offset_as_uint16%2#0",
        "0x"
      ]
    },
    "369": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "0x",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "371": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%7#0",
        "awst_tmp%3#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "aggregate%head%7#0"
      ]
    },
    "372": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%2#0",
        "aggregate%head%7#0",
        "awst_tmp%3#0"
      ]
    },
    "374": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%2#0",
        "aggregate%head%7#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "375": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%8#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "aggregate%head%8#0"
      ]
    },
    "376": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%8#0",
        "encoded_array%2#0"
      ]
    },
    "378": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%2#0"
      ],
      "stack_out": [
        "encoded_for_storage%2#0"
      ]
    },
    "379": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_for_storage%2#0",
        "\"tup\""
      ]
    },
    "380": {
      "op": "uncover 1",
      "stack_out": [
        "\"tup\"",
        "encoded_for_storage%2#0"
      ]
    },
    "382": {
      "op": "app_global_put",
      "stack_out": []
    },
    "383": {
      "retsub": true,
      "op": "retsub"
    },
    "384": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap",
      "params": {},
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap",
      "stack_in": [],
      "op": "b test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap_block@0"
    },
    "387": {
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap_block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "388": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "389": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0"
      ]
    },
    "392": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0",
        "0x0000000000000000"
      ]
    },
    "393": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "394": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "0"
      ]
    },
    "395": {
      "op": "bytec_1 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "0",
        "\"tup\""
      ]
    },
    "396": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_array%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "397": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "encoded_array%0#0",
        "maybe_value%0#0"
      ]
    },
    "398": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "encoded_array%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "400": {
      "op": "intc_2 // 8",
      "defined_out": [
        "2",
        "8",
        "encoded_array%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "401": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "402": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0"
      ]
    },
    "403": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "10"
      ]
    },
    "404": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "405": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "408": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%0#0",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "409": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "411": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "aggregate%head%1#0"
      ]
    },
    "412": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "awst_tmp%1#0"
      ]
    },
    "414": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "415": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%2#0"
      ]
    },
    "416": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ]
    },
    "418": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "419": {
      "op": "bytec_3 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "420": {
      "op": "box_del",
      "defined_out": [
        "encoded_for_storage%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "{box_del}"
      ]
    },
    "421": {
      "op": "pop",
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "422": {
      "op": "bytec_3 // \"box\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "423": {
      "op": "uncover 1",
      "stack_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ]
    },
    "425": {
      "op": "box_put",
      "stack_out": []
    },
    "426": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "427": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%2#0"
      ]
    },
    "428": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%1#0"
      ],
      "stack_out": [
        "aggregate%len_u16%1#0"
      ]
    },
    "431": {
      "op": "bytec_2 // 0x0000000000000000",
      "stack_out": [
        "aggregate%len_u16%1#0",
        "0x0000000000000000"
      ]
    },
    "432": {
      "op": "concat",
      "defined_out": [
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0"
      ]
    },
    "433": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_array%1#0",
        "0"
      ]
    },
    "434": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_array%1#0",
        "0",
        "\"tup\""
      ]
    },
    "435": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_array%1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "436": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%1#0"
      ]
    },
    "437": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%1#0",
        "2"
      ]
    },
    "439": {
      "op": "intc_2 // 8",
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%1#0",
        "2",
        "8"
      ]
    },
    "440": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%extract%1#0"
      ]
    },
    "441": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%3#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%3#0"
      ]
    },
    "442": {
      "op": "txn Sender",
      "defined_out": [
        "awst_tmp%3#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ]
    },
    "444": {
      "op": "cover 1",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0"
      ]
    },
    "446": {
      "op": "intc_3 // 10",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "10"
      ]
    },
    "447": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "awst_tmp%3#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "448": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%1#0",
        "awst_tmp%3#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "451": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "aggregate%offset_as_uint16%1#0",
        "0x"
      ]
    },
    "452": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "0x",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "454": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "awst_tmp%3#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "aggregate%head%4#0"
      ]
    },
    "455": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "aggregate%head%4#0",
        "awst_tmp%3#0"
      ]
    },
    "457": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%4#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "458": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "aggregate%head%5#0"
      ]
    },
    "459": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%5#0",
        "encoded_array%1#0"
      ]
    },
    "461": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_for_storage%1#0"
      ]
    },
    "462": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_for_storage%1#0",
        "tmp%0#0"
      ]
    },
    "464": {
      "op": "bytec 5 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "encoded_for_storage%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%1#0",
        "tmp%0#0",
        "\"loc\""
      ]
    },
    "466": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "\"loc\"",
        "encoded_for_storage%1#0"
      ]
    },
    "468": {
      "op": "app_local_put",
      "stack_out": []
    },
    "469": {
      "retsub": true,
      "op": "retsub"
    },
    "470": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple",
      "params": {
        "val#0": "bytes"
      },
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "473": {
      "op": "b test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple_block@0"
    },
    "476": {
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "477": {
      "op": "bytec_1 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"tup\""
      ]
    },
    "478": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "479": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "480": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "481": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "482": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "483": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "485": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "486": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "487": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ]
    },
    "489": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "490": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "492": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "494": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "495": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "497": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "499": {
      "op": "intc_2 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "500": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "501": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item1%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "502": {
      "op": "cover 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "504": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "505": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "val#0 (copy)"
      ]
    },
    "507": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "508": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "510": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%2#0"
      ]
    },
    "512": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "concat%0#0"
      ]
    },
    "513": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0"
      ]
    },
    "515": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "516": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "517": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "518": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "519": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "520": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "523": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "525": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "526": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "528": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "529": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "10"
      ]
    },
    "530": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "531": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "534": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "535": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "537": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "538": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "tmp%1#0"
      ]
    },
    "540": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "541": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "542": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "544": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "545": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"tup\""
      ]
    },
    "546": {
      "op": "uncover 1",
      "stack_out": [
        "\"tup\"",
        "encoded_for_storage%0#0"
      ]
    },
    "548": {
      "op": "app_global_put",
      "stack_out": []
    },
    "549": {
      "retsub": true,
      "op": "retsub"
    },
    "550": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box",
      "params": {
        "val#0": "bytes"
      },
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "553": {
      "op": "b test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box_block@0"
    },
    "556": {
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box_block@0",
      "stack_in": [],
      "op": "bytec_3 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "557": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "558": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "559": {
      "op": "dup",
      "defined_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ],
      "stack_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ]
    },
    "560": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ],
      "stack_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)",
        "0"
      ]
    },
    "561": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "562": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%0#0"
      ]
    },
    "564": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ]
    },
    "565": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "566": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%0#0"
      ]
    },
    "568": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ]
    },
    "569": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "571": {
      "op": "uncover 3",
      "stack_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "573": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "574": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%substring3%0#0",
        "storage_value%0#0"
      ]
    },
    "576": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%substring3%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "storage_value%0#0",
        "2"
      ]
    },
    "578": {
      "op": "intc_2 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%substring3%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "storage_value%0#0",
        "2",
        "8"
      ]
    },
    "579": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "580": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item1%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "581": {
      "op": "cover 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "583": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "584": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "val#0 (copy)"
      ]
    },
    "586": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "587": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "589": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%2#0"
      ]
    },
    "591": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "concat%0#0"
      ]
    },
    "592": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0"
      ]
    },
    "594": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "595": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "596": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "597": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "598": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "599": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "602": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "604": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "605": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "607": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "608": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "10"
      ]
    },
    "609": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "610": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "613": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "614": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "616": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "617": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "tmp%1#0"
      ]
    },
    "619": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "620": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "621": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "623": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "624": {
      "op": "bytec_3 // \"box\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "625": {
      "op": "box_del",
      "defined_out": [
        "encoded_for_storage%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "{box_del}"
      ]
    },
    "626": {
      "op": "pop",
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "627": {
      "op": "bytec_3 // \"box\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "628": {
      "op": "uncover 1",
      "stack_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ]
    },
    "630": {
      "op": "box_put",
      "stack_out": []
    },
    "631": {
      "retsub": true,
      "op": "retsub"
    },
    "632": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global",
      "params": {
        "val#0": "bytes"
      },
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "635": {
      "op": "b test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global_block@0"
    },
    "638": {
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "639": {
      "op": "bytec 4 // \"glob\"",
      "defined_out": [
        "\"glob\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"glob\""
      ]
    },
    "641": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "642": {
      "error": "check self.glob exists",
      "op": "assert // check self.glob exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "643": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "644": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "645": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "646": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "648": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "649": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "650": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ]
    },
    "652": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "653": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "655": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "657": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "658": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "660": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "662": {
      "op": "intc_2 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "663": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "664": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item1%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "665": {
      "op": "cover 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "667": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "668": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "val#0 (copy)"
      ]
    },
    "670": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "671": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "673": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%2#0"
      ]
    },
    "675": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "concat%0#0"
      ]
    },
    "676": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0"
      ]
    },
    "678": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "679": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "680": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "681": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "682": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "683": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "686": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "688": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "689": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "691": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "692": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "10"
      ]
    },
    "693": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "694": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "697": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "698": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "700": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "701": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "tmp%1#0"
      ]
    },
    "703": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "704": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "705": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "707": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "708": {
      "op": "bytec 4 // \"glob\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"glob\""
      ]
    },
    "710": {
      "op": "uncover 1",
      "stack_out": [
        "\"glob\"",
        "encoded_for_storage%0#0"
      ]
    },
    "712": {
      "op": "app_global_put",
      "stack_out": []
    },
    "713": {
      "retsub": true,
      "op": "retsub"
    },
    "714": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local",
      "params": {
        "val#0": "bytes"
      },
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "717": {
      "op": "b test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local_block@0"
    },
    "720": {
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "722": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "723": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "724": {
      "op": "bytec 5 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "\"loc\""
      ]
    },
    "726": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "727": {
      "error": "check self.loc exists for account",
      "op": "assert // check self.loc exists for account",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "728": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "729": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "730": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "731": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "733": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "734": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "735": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ]
    },
    "737": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "738": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "740": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "742": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "743": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "745": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "747": {
      "op": "intc_2 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "748": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "749": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item1%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item1%0#0"
      ]
    },
    "750": {
      "op": "cover 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "752": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x"
      ]
    },
    "753": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x",
        "val#0 (copy)"
      ]
    },
    "755": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "756": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%1#0 (copy)"
      ]
    },
    "758": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%3#0"
      ]
    },
    "760": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "concat%0#0"
      ]
    },
    "761": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "tmp%1#0"
      ]
    },
    "763": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "764": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "765": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "766": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "767": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "768": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "771": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "773": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "774": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "776": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "777": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "10"
      ]
    },
    "778": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "779": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "782": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "783": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "785": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "786": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "tmp%2#0"
      ]
    },
    "788": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "789": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "790": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "792": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_for_storage%0#0"
      ]
    },
    "793": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_for_storage%0#0",
        "tmp%0#0"
      ]
    },
    "795": {
      "op": "bytec 5 // \"loc\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "tmp%0#0",
        "\"loc\""
      ]
    },
    "797": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "\"loc\"",
        "encoded_for_storage%0#0"
      ]
    },
    "799": {
      "op": "app_local_put",
      "stack_out": []
    },
    "800": {
      "retsub": true,
      "op": "retsub"
    }
  }
}