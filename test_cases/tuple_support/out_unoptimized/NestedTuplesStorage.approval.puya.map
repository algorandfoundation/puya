{
  "version": 3,
  "sources": [
    "../tuple_storage.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBgB;AAAA;AAAA;;;AAAkB;AAAlB;AADR;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEQ;AAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIwC;AAAA;AAAA;;;AAAkB;AAAlB;AAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAlB;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACiC;AAAA;AAAA;;;AAAkB;AAAlB;AAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAX;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIuC;AAAA;AAAA;;;AAAkB;AAAlB;AAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAjB;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC6C;AAAA;AAAA;;;AAAkB;AAAlB;AAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAd;;AAAA;AAAT;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAER;;;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAEQ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAER;;;AAEiB;;AAAT;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AA/BR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;AAAA;;AA6BK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA7BL;;;AA6BK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAzBL;;;AAyBK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArBL;;;AAqBK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjBL;;;AAiBK;;;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAZL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 10 2"
    },
    "7": {
      "op": "bytecblock 0x \"tup\" 0x0000000000000000 \"box\" \"glob\" \"loc\""
    },
    "36": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "38": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "41": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__init__",
      "op": "callsub __init__"
    },
    "44": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "47": {
      "op": "return",
      "stack_out": []
    },
    "48": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "49": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "50": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0"
      ]
    },
    "53": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0",
        "0x0000000000000000"
      ]
    },
    "54": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "55": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "10"
      ]
    },
    "56": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "57": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "60": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "61": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "62": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0"
      ]
    },
    "63": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "0"
      ]
    },
    "64": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "65": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%2#0"
      ]
    },
    "66": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ]
    },
    "67": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "68": {
      "op": "bytec_1 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"tup\""
      ]
    },
    "69": {
      "op": "swap",
      "stack_out": [
        "\"tup\"",
        "encoded_for_storage%0#0"
      ]
    },
    "70": {
      "op": "app_global_put",
      "stack_out": []
    },
    "71": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "72": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%2#0"
      ]
    },
    "73": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%1#0"
      ],
      "stack_out": [
        "aggregate%len_u16%1#0"
      ]
    },
    "76": {
      "op": "bytec_2 // 0x0000000000000000",
      "stack_out": [
        "aggregate%len_u16%1#0",
        "0x0000000000000000"
      ]
    },
    "77": {
      "op": "concat",
      "defined_out": [
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0"
      ]
    },
    "78": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_array%1#0",
        "0"
      ]
    },
    "79": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_array%1#0",
        "0",
        "\"tup\""
      ]
    },
    "80": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_array%1#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "81": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%0#0"
      ]
    },
    "82": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "encoded_array%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "83": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "encoded_array%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "85": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%extract%0#0"
      ]
    },
    "86": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0"
      ]
    },
    "87": {
      "op": "intc_2 // 10",
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "10"
      ]
    },
    "88": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "awst_tmp%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "89": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%1#0",
        "awst_tmp%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "92": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%1#0",
        "0x"
      ]
    },
    "93": {
      "op": "swap",
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "0x",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "94": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "awst_tmp%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "aggregate%head%4#0"
      ]
    },
    "95": {
      "op": "swap",
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%head%4#0",
        "awst_tmp%1#0"
      ]
    },
    "96": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%4#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "97": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%head%5#0"
      ]
    },
    "98": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%5#0",
        "encoded_array%1#0"
      ]
    },
    "99": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%1#0"
      ],
      "stack_out": [
        "encoded_for_storage%1#0"
      ]
    },
    "100": {
      "op": "bytec 4 // \"glob\"",
      "defined_out": [
        "\"glob\"",
        "encoded_for_storage%1#0"
      ],
      "stack_out": [
        "encoded_for_storage%1#0",
        "\"glob\""
      ]
    },
    "102": {
      "op": "swap",
      "stack_out": [
        "\"glob\"",
        "encoded_for_storage%1#0"
      ]
    },
    "103": {
      "op": "app_global_put",
      "stack_out": []
    },
    "104": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "105": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%4#0"
      ]
    },
    "106": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%2#0"
      ],
      "stack_out": [
        "aggregate%len_u16%2#0"
      ]
    },
    "109": {
      "op": "bytec_2 // 0x0000000000000000",
      "stack_out": [
        "aggregate%len_u16%2#0",
        "0x0000000000000000"
      ]
    },
    "110": {
      "op": "concat",
      "defined_out": [
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0"
      ]
    },
    "111": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_array%2#0",
        "0"
      ]
    },
    "112": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_array%2#0",
        "0",
        "\"tup\""
      ]
    },
    "113": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_array%2#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "114": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "encoded_array%2#0",
        "maybe_value%1#0"
      ]
    },
    "115": {
      "op": "intc_3 // 2",
      "stack_out": [
        "encoded_array%2#0",
        "maybe_value%1#0",
        "2"
      ]
    },
    "116": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "encoded_array%2#0",
        "maybe_value%1#0",
        "2",
        "8"
      ]
    },
    "118": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "aggregate%extract%1#0"
      ]
    },
    "119": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%3#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0"
      ]
    },
    "120": {
      "op": "intc_2 // 10",
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "10"
      ]
    },
    "121": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#0",
        "awst_tmp%3#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "122": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%2#0",
        "awst_tmp%3#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "125": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "aggregate%offset_as_uint16%2#0",
        "0x"
      ]
    },
    "126": {
      "op": "swap",
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "0x",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "127": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%7#0",
        "awst_tmp%3#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "aggregate%head%7#0"
      ]
    },
    "128": {
      "op": "swap",
      "stack_out": [
        "encoded_array%2#0",
        "aggregate%head%7#0",
        "awst_tmp%3#0"
      ]
    },
    "129": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%2#0",
        "aggregate%head%7#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "130": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%8#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "aggregate%head%8#0"
      ]
    },
    "131": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%8#0",
        "encoded_array%2#0"
      ]
    },
    "132": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%2#0"
      ],
      "stack_out": [
        "encoded_for_storage%2#0"
      ]
    },
    "133": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_for_storage%2#0",
        "\"tup\""
      ]
    },
    "134": {
      "op": "swap",
      "stack_out": [
        "\"tup\"",
        "encoded_for_storage%2#0"
      ]
    },
    "135": {
      "op": "app_global_put",
      "stack_out": []
    },
    "136": {
      "retsub": true,
      "op": "retsub"
    },
    "137": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap",
      "params": {},
      "block": "bootstrap_block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "138": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "139": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0"
      ]
    },
    "142": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0",
        "0x0000000000000000"
      ]
    },
    "143": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "144": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "0"
      ]
    },
    "145": {
      "op": "bytec_1 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "0",
        "\"tup\""
      ]
    },
    "146": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_array%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "147": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "encoded_array%0#0",
        "maybe_value%0#0"
      ]
    },
    "148": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "encoded_array%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "149": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "encoded_array%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "151": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "152": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0"
      ]
    },
    "153": {
      "op": "bytec_3 // \"box\"",
      "defined_out": [
        "\"box\"",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "\"box\""
      ]
    },
    "154": {
      "op": "box_del",
      "defined_out": [
        "awst_tmp%1#0",
        "encoded_array%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "{box_del}"
      ]
    },
    "155": {
      "op": "pop",
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0"
      ]
    },
    "156": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "10"
      ]
    },
    "157": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "158": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "161": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%0#0",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "162": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "163": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "aggregate%head%1#0"
      ]
    },
    "164": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "awst_tmp%1#0"
      ]
    },
    "165": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "166": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%2#0"
      ]
    },
    "167": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ]
    },
    "168": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "169": {
      "op": "bytec_3 // \"box\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "170": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ]
    },
    "171": {
      "op": "box_put",
      "stack_out": []
    },
    "172": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "173": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%2#0"
      ]
    },
    "174": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%1#0"
      ],
      "stack_out": [
        "aggregate%len_u16%1#0"
      ]
    },
    "177": {
      "op": "bytec_2 // 0x0000000000000000",
      "stack_out": [
        "aggregate%len_u16%1#0",
        "0x0000000000000000"
      ]
    },
    "178": {
      "op": "concat",
      "defined_out": [
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0"
      ]
    },
    "179": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_array%1#0",
        "0"
      ]
    },
    "180": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_array%1#0",
        "0",
        "\"tup\""
      ]
    },
    "181": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_array%1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "182": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%1#0"
      ]
    },
    "183": {
      "op": "intc_3 // 2",
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%1#0",
        "2"
      ]
    },
    "184": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%1#0",
        "2",
        "8"
      ]
    },
    "186": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%extract%1#0"
      ]
    },
    "187": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%3#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%3#0"
      ]
    },
    "188": {
      "op": "txn Sender",
      "defined_out": [
        "awst_tmp%3#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ]
    },
    "190": {
      "op": "swap",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0"
      ]
    },
    "191": {
      "op": "intc_2 // 10",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "10"
      ]
    },
    "192": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "awst_tmp%3#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "193": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%1#0",
        "awst_tmp%3#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "196": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "aggregate%offset_as_uint16%1#0",
        "0x"
      ]
    },
    "197": {
      "op": "swap",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "0x",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "198": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "awst_tmp%3#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "aggregate%head%4#0"
      ]
    },
    "199": {
      "op": "swap",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "aggregate%head%4#0",
        "awst_tmp%3#0"
      ]
    },
    "200": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%4#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "201": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "aggregate%head%5#0"
      ]
    },
    "202": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%5#0",
        "encoded_array%1#0"
      ]
    },
    "204": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_for_storage%1#0"
      ]
    },
    "205": {
      "op": "swap",
      "stack_out": [
        "encoded_for_storage%1#0",
        "tmp%0#0"
      ]
    },
    "206": {
      "op": "bytec 5 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "encoded_for_storage%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%1#0",
        "tmp%0#0",
        "\"loc\""
      ]
    },
    "208": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "\"loc\"",
        "encoded_for_storage%1#0"
      ]
    },
    "210": {
      "op": "app_local_put",
      "stack_out": []
    },
    "211": {
      "retsub": true,
      "op": "retsub"
    },
    "212": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple",
      "params": {
        "val#0": "bytes"
      },
      "block": "mutate_tuple",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "215": {
      "block": "mutate_tuple_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "216": {
      "op": "bytec_1 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"tup\""
      ]
    },
    "217": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "218": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "219": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "220": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "221": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "222": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "223": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "224": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "225": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ]
    },
    "226": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "227": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "229": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "231": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "232": {
      "op": "swap",
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "233": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "234": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "236": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "237": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "238": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "239": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "240": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "val#0 (copy)"
      ]
    },
    "242": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "243": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "245": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%2#0"
      ]
    },
    "246": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "concat%0#0"
      ]
    },
    "247": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0"
      ]
    },
    "248": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "249": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "250": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "251": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "252": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "253": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "256": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "257": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "258": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "260": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "261": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "10"
      ]
    },
    "262": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "263": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "266": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "267": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "269": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "tmp%1#0"
      ]
    },
    "271": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "272": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "273": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "274": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "275": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"tup\""
      ]
    },
    "276": {
      "op": "swap",
      "stack_out": [
        "\"tup\"",
        "encoded_for_storage%0#0"
      ]
    },
    "277": {
      "op": "app_global_put",
      "stack_out": []
    },
    "278": {
      "retsub": true,
      "op": "retsub"
    },
    "279": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box",
      "params": {
        "val#0": "bytes"
      },
      "block": "mutate_box",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "282": {
      "block": "mutate_box_block@0",
      "stack_in": [],
      "op": "bytec_3 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "283": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "284": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "285": {
      "op": "dup",
      "defined_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ],
      "stack_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ]
    },
    "286": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ],
      "stack_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)",
        "0"
      ]
    },
    "287": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "288": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%0#0"
      ]
    },
    "289": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ]
    },
    "290": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "291": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%0#0"
      ]
    },
    "292": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ]
    },
    "293": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "295": {
      "op": "uncover 3",
      "stack_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "297": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "298": {
      "op": "swap",
      "stack_out": [
        "aggregate%substring3%0#0",
        "storage_value%0#0"
      ]
    },
    "299": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%substring3%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "storage_value%0#0",
        "2"
      ]
    },
    "300": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%substring3%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "storage_value%0#0",
        "2",
        "8"
      ]
    },
    "302": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "303": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "304": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "305": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "306": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "val#0 (copy)"
      ]
    },
    "308": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "309": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "311": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%2#0"
      ]
    },
    "312": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "concat%0#0"
      ]
    },
    "313": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0"
      ]
    },
    "314": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "315": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "316": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "317": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "318": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "319": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "322": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "323": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "324": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "326": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "327": {
      "op": "bytec_3 // \"box\"",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "\"box\""
      ]
    },
    "328": {
      "op": "box_del",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "{box_del}"
      ]
    },
    "329": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "330": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "10"
      ]
    },
    "331": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "332": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "335": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "336": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "337": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "338": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "tmp%1#0"
      ]
    },
    "340": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "341": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "342": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "343": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "344": {
      "op": "bytec_3 // \"box\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "345": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ]
    },
    "346": {
      "op": "box_put",
      "stack_out": []
    },
    "347": {
      "retsub": true,
      "op": "retsub"
    },
    "348": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global",
      "params": {
        "val#0": "bytes"
      },
      "block": "mutate_global",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "351": {
      "block": "mutate_global_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "352": {
      "op": "bytec 4 // \"glob\"",
      "defined_out": [
        "\"glob\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"glob\""
      ]
    },
    "354": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "355": {
      "error": "check self.glob exists",
      "op": "assert // check self.glob exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "356": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "357": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "358": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "359": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "360": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "361": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "362": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ]
    },
    "363": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "364": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "366": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "368": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "369": {
      "op": "swap",
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "370": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "371": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "373": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "374": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "375": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "376": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "377": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "val#0 (copy)"
      ]
    },
    "379": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "380": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "382": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%2#0"
      ]
    },
    "383": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "concat%0#0"
      ]
    },
    "384": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0"
      ]
    },
    "385": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "386": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "387": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "388": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "389": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "390": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "393": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "394": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "395": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "397": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "398": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "10"
      ]
    },
    "399": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "400": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "403": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "404": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "405": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "406": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "tmp%1#0"
      ]
    },
    "408": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "409": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "410": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "411": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "412": {
      "op": "bytec 4 // \"glob\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"glob\""
      ]
    },
    "414": {
      "op": "swap",
      "stack_out": [
        "\"glob\"",
        "encoded_for_storage%0#0"
      ]
    },
    "415": {
      "op": "app_global_put",
      "stack_out": []
    },
    "416": {
      "retsub": true,
      "op": "retsub"
    },
    "417": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local",
      "params": {
        "val#0": "bytes"
      },
      "block": "mutate_local",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "420": {
      "block": "mutate_local_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "422": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "423": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "424": {
      "op": "bytec 5 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "\"loc\""
      ]
    },
    "426": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "427": {
      "error": "check self.loc exists for account",
      "op": "assert // check self.loc exists for account",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "428": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "429": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "430": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "431": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "432": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "433": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "434": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ]
    },
    "435": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "436": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "438": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "440": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "442": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "443": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "445": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "446": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "447": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "448": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x"
      ]
    },
    "449": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x",
        "val#0 (copy)"
      ]
    },
    "451": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "452": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%1#0 (copy)"
      ]
    },
    "454": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%3#0"
      ]
    },
    "455": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "concat%0#0"
      ]
    },
    "456": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "tmp%1#0"
      ]
    },
    "457": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "458": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "459": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "460": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "461": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "462": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "465": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "466": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "467": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "469": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "470": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "10"
      ]
    },
    "471": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "472": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "475": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "476": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "477": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "478": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "tmp%2#0"
      ]
    },
    "480": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "481": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "482": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "483": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_for_storage%0#0"
      ]
    },
    "484": {
      "op": "swap",
      "stack_out": [
        "encoded_for_storage%0#0",
        "tmp%0#0"
      ]
    },
    "485": {
      "op": "bytec 5 // \"loc\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "tmp%0#0",
        "\"loc\""
      ]
    },
    "487": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "\"loc\"",
        "encoded_for_storage%0#0"
      ]
    },
    "489": {
      "op": "app_local_put",
      "stack_out": []
    },
    "490": {
      "retsub": true,
      "op": "retsub"
    },
    "491": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "493": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "494": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "495": {
      "op": "bz approval_program_bare_routing@10",
      "stack_out": []
    },
    "498": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "501": {
      "op": "pushbytes 0xbec76d87 // method \"bootstrap()void\"",
      "defined_out": [
        "Method(bootstrap()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(bootstrap()void)"
      ]
    },
    "507": {
      "op": "pushbytes 0xacc253ae // method \"mutate_tuple(uint64)void\"",
      "defined_out": [
        "Method(bootstrap()void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(bootstrap()void)",
        "Method(mutate_tuple(uint64)void)"
      ]
    },
    "513": {
      "op": "pushbytes 0xe844940c // method \"mutate_box(uint64)void\"",
      "defined_out": [
        "Method(bootstrap()void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(bootstrap()void)",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)"
      ]
    },
    "519": {
      "op": "pushbytes 0x6222ef1a // method \"mutate_global(uint64)void\"",
      "defined_out": [
        "Method(bootstrap()void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(bootstrap()void)",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)"
      ]
    },
    "525": {
      "op": "pushbytes 0x1b269b50 // method \"mutate_local(uint64)void\"",
      "defined_out": [
        "Method(bootstrap()void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(bootstrap()void)",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)"
      ]
    },
    "531": {
      "op": "uncover 5",
      "stack_out": [
        "Method(bootstrap()void)",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "tmp%2#0"
      ]
    },
    "533": {
      "op": "match approval_program_bootstrap_route@3 approval_program_mutate_tuple_route@4 approval_program_mutate_box_route@5 approval_program_mutate_global_route@6 approval_program_mutate_local_route@7",
      "stack_out": []
    },
    "545": {
      "block": "approval_program_after_if_else@16",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "546": {
      "block": "approval_program_after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__@17",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "547": {
      "block": "approval_program_mutate_local_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "549": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "NoOp"
      ]
    },
    "550": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "551": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "552": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "554": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0"
      ]
    },
    "555": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "556": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "557": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "560": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local",
      "op": "callsub mutate_local",
      "stack_out": []
    },
    "563": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "564": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__@17"
    },
    "567": {
      "block": "approval_program_mutate_global_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "569": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "NoOp"
      ]
    },
    "570": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "571": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "572": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "574": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0"
      ]
    },
    "575": {
      "op": "!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "576": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "577": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "580": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global",
      "op": "callsub mutate_global",
      "stack_out": []
    },
    "583": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "584": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__@17"
    },
    "587": {
      "block": "approval_program_mutate_box_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "589": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "590": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "591": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "592": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "594": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "595": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "596": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "597": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "600": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box",
      "op": "callsub mutate_box",
      "stack_out": []
    },
    "603": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "604": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__@17"
    },
    "607": {
      "block": "approval_program_mutate_tuple_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "609": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "610": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "611": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "612": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "614": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "615": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "616": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "617": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "620": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple",
      "op": "callsub mutate_tuple",
      "stack_out": []
    },
    "623": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "624": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__@17"
    },
    "627": {
      "block": "approval_program_bootstrap_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "629": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "OptIn"
      ]
    },
    "630": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "631": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "632": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "634": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "635": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "636": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "637": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap",
      "op": "callsub bootstrap"
    },
    "640": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "641": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__@17"
    },
    "644": {
      "block": "approval_program_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "646": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "0"
      ]
    },
    "647": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%23#0"
      ]
    },
    "648": {
      "op": "match approval_program___algopy_default_create@11",
      "stack_out": []
    },
    "652": {
      "block": "approval_program_switch_case_next@15",
      "stack_in": [],
      "op": "b approval_program_after_if_else@16"
    },
    "655": {
      "block": "approval_program___algopy_default_create@11",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "657": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "658": {
      "op": "==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "659": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "660": {
      "block": "approval_program_after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_default_create@13",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "661": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__puya_arc4_router__@17"
    }
  }
}