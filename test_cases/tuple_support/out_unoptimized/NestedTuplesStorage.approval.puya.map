{
  "version": 3,
  "sources": [
    "../tuple_storage.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBK;;;AAAA;AAAA;;;;AAKA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAvBW;AAAA;AAAA;;;AAAkB;AAAlB;AADR;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAEQ;AAFR;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAIwC;AAAA;AAAA;;;AAAkB;AAAlB;AAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAlB;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AACiC;AAAA;AAAA;;;AAAkB;AAAlB;AAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAX;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;;;AAIuC;AAAA;AAAA;;;AAAkB;AAAlB;AAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAjB;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAC6C;AAAA;AAAA;;;AAAkB;AAAlB;AAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAd;;AAAA;;AAAT;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAER;;;;;;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAER;;;;;;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAER;;;;;;AAEQ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAER;;;;;;AAEiB;;AAAT;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;AA/BR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;;;;;;;;AAAA;AA6BK;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;;;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 10 2"
    },
    "7": {
      "op": "bytecblock 0x \"tup\" 0x0000000000000000 \"box\" \"glob\" \"loc\""
    },
    "36": {
      "op": "b main_block@0"
    },
    "39": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "41": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "44": {
      "op": "b main_call___init__@1"
    },
    "47": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__init__",
      "op": "callsub __init__"
    },
    "50": {
      "op": "b main_after_if_else@2"
    },
    "53": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "56": {
      "op": "return",
      "stack_out": []
    },
    "57": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap[routing]",
      "params": {},
      "block": "bootstrap",
      "stack_in": [],
      "op": "b bootstrap_block@0"
    },
    "60": {
      "block": "bootstrap_block@0",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap",
      "op": "callsub test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap"
    },
    "63": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "64": {
      "op": "return",
      "stack_out": []
    },
    "65": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple[routing]",
      "params": {},
      "block": "mutate_tuple",
      "stack_in": [],
      "op": "b mutate_tuple_block@0"
    },
    "68": {
      "block": "mutate_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "71": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple",
      "op": "callsub test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple",
      "stack_out": []
    },
    "74": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "75": {
      "op": "return",
      "stack_out": []
    },
    "76": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box[routing]",
      "params": {},
      "block": "mutate_box",
      "stack_in": [],
      "op": "b mutate_box_block@0"
    },
    "79": {
      "block": "mutate_box_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "82": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box",
      "op": "callsub test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box",
      "stack_out": []
    },
    "85": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "86": {
      "op": "return",
      "stack_out": []
    },
    "87": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global[routing]",
      "params": {},
      "block": "mutate_global",
      "stack_in": [],
      "op": "b mutate_global_block@0"
    },
    "90": {
      "block": "mutate_global_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "93": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global",
      "op": "callsub test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global",
      "stack_out": []
    },
    "96": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "97": {
      "op": "return",
      "stack_out": []
    },
    "98": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local[routing]",
      "params": {},
      "block": "mutate_local",
      "stack_in": [],
      "op": "b mutate_local_block@0"
    },
    "101": {
      "block": "mutate_local_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "104": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local",
      "op": "callsub test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local",
      "stack_out": []
    },
    "107": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "108": {
      "op": "return",
      "stack_out": []
    },
    "109": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "112": {
      "block": "__init___block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "113": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "114": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0"
      ]
    },
    "117": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0",
        "0x0000000000000000"
      ]
    },
    "118": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "119": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "10"
      ]
    },
    "120": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "121": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "124": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "125": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "127": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0"
      ]
    },
    "128": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "0"
      ]
    },
    "129": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "130": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%2#0"
      ]
    },
    "131": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ]
    },
    "133": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "134": {
      "op": "bytec_1 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"tup\""
      ]
    },
    "135": {
      "op": "uncover 1",
      "stack_out": [
        "\"tup\"",
        "encoded_for_storage%0#0"
      ]
    },
    "137": {
      "op": "app_global_put",
      "stack_out": []
    },
    "138": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "139": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%2#0"
      ]
    },
    "140": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%1#0"
      ],
      "stack_out": [
        "aggregate%len_u16%1#0"
      ]
    },
    "143": {
      "op": "bytec_2 // 0x0000000000000000",
      "stack_out": [
        "aggregate%len_u16%1#0",
        "0x0000000000000000"
      ]
    },
    "144": {
      "op": "concat",
      "defined_out": [
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0"
      ]
    },
    "145": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_array%1#0",
        "0"
      ]
    },
    "146": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_array%1#0",
        "0",
        "\"tup\""
      ]
    },
    "147": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_array%1#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "148": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%0#0"
      ]
    },
    "149": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "encoded_array%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "150": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "encoded_array%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "152": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%extract%0#0"
      ]
    },
    "153": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0"
      ]
    },
    "154": {
      "op": "intc_2 // 10",
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "10"
      ]
    },
    "155": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "awst_tmp%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "156": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%1#0",
        "awst_tmp%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "159": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%1#0",
        "0x"
      ]
    },
    "160": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "0x",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "162": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "awst_tmp%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%1#0",
        "aggregate%head%4#0"
      ]
    },
    "163": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%head%4#0",
        "awst_tmp%1#0"
      ]
    },
    "165": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%4#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "166": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%head%5#0"
      ]
    },
    "167": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%5#0",
        "encoded_array%1#0"
      ]
    },
    "169": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%1#0"
      ],
      "stack_out": [
        "encoded_for_storage%1#0"
      ]
    },
    "170": {
      "op": "bytec 4 // \"glob\"",
      "defined_out": [
        "\"glob\"",
        "encoded_for_storage%1#0"
      ],
      "stack_out": [
        "encoded_for_storage%1#0",
        "\"glob\""
      ]
    },
    "172": {
      "op": "uncover 1",
      "stack_out": [
        "\"glob\"",
        "encoded_for_storage%1#0"
      ]
    },
    "174": {
      "op": "app_global_put",
      "stack_out": []
    },
    "175": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "176": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%4#0"
      ]
    },
    "177": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%2#0"
      ],
      "stack_out": [
        "aggregate%len_u16%2#0"
      ]
    },
    "180": {
      "op": "bytec_2 // 0x0000000000000000",
      "stack_out": [
        "aggregate%len_u16%2#0",
        "0x0000000000000000"
      ]
    },
    "181": {
      "op": "concat",
      "defined_out": [
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0"
      ]
    },
    "182": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_array%2#0",
        "0"
      ]
    },
    "183": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_array%2#0",
        "0",
        "\"tup\""
      ]
    },
    "184": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_array%2#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "185": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "encoded_array%2#0",
        "maybe_value%1#0"
      ]
    },
    "186": {
      "op": "intc_3 // 2",
      "stack_out": [
        "encoded_array%2#0",
        "maybe_value%1#0",
        "2"
      ]
    },
    "187": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "encoded_array%2#0",
        "maybe_value%1#0",
        "2",
        "8"
      ]
    },
    "189": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "aggregate%extract%1#0"
      ]
    },
    "190": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%3#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0"
      ]
    },
    "191": {
      "op": "intc_2 // 10",
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "10"
      ]
    },
    "192": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#0",
        "awst_tmp%3#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "193": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%2#0",
        "awst_tmp%3#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "196": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "aggregate%offset_as_uint16%2#0",
        "0x"
      ]
    },
    "197": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "0x",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "199": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%7#0",
        "awst_tmp%3#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "awst_tmp%3#0",
        "aggregate%head%7#0"
      ]
    },
    "200": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%2#0",
        "aggregate%head%7#0",
        "awst_tmp%3#0"
      ]
    },
    "202": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%2#0",
        "aggregate%head%7#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "203": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%8#0",
        "encoded_array%2#0"
      ],
      "stack_out": [
        "encoded_array%2#0",
        "aggregate%head%8#0"
      ]
    },
    "204": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%8#0",
        "encoded_array%2#0"
      ]
    },
    "206": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%2#0"
      ],
      "stack_out": [
        "encoded_for_storage%2#0"
      ]
    },
    "207": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_for_storage%2#0",
        "\"tup\""
      ]
    },
    "208": {
      "op": "uncover 1",
      "stack_out": [
        "\"tup\"",
        "encoded_for_storage%2#0"
      ]
    },
    "210": {
      "op": "app_global_put",
      "stack_out": []
    },
    "211": {
      "retsub": true,
      "op": "retsub"
    },
    "212": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap",
      "params": {},
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap",
      "stack_in": [],
      "op": "b test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap_block@0"
    },
    "215": {
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap_block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "216": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "217": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0"
      ]
    },
    "220": {
      "op": "bytec_2 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "aggregate%len_u16%0#0"
      ],
      "stack_out": [
        "aggregate%len_u16%0#0",
        "0x0000000000000000"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "222": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "0"
      ]
    },
    "223": {
      "op": "bytec_1 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "0",
        "\"tup\""
      ]
    },
    "224": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_array%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "225": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "encoded_array%0#0",
        "maybe_value%0#0"
      ]
    },
    "226": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "encoded_array%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "227": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "encoded_array%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "229": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "230": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0"
      ]
    },
    "231": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "10"
      ]
    },
    "232": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "233": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "236": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%0#0",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "237": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "239": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "awst_tmp%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "awst_tmp%1#0",
        "aggregate%head%1#0"
      ]
    },
    "240": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "awst_tmp%1#0"
      ]
    },
    "242": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "243": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%2#0"
      ]
    },
    "244": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ]
    },
    "246": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "247": {
      "op": "bytec_3 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "248": {
      "op": "box_del",
      "defined_out": [
        "encoded_for_storage%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "{box_del}"
      ]
    },
    "249": {
      "op": "pop",
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "250": {
      "op": "bytec_3 // \"box\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "251": {
      "op": "uncover 1",
      "stack_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ]
    },
    "253": {
      "op": "box_put",
      "stack_out": []
    },
    "254": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "255": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%2#0"
      ]
    },
    "256": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%1#0"
      ],
      "stack_out": [
        "aggregate%len_u16%1#0"
      ]
    },
    "259": {
      "op": "bytec_2 // 0x0000000000000000",
      "stack_out": [
        "aggregate%len_u16%1#0",
        "0x0000000000000000"
      ]
    },
    "260": {
      "op": "concat",
      "defined_out": [
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0"
      ]
    },
    "261": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_array%1#0",
        "0"
      ]
    },
    "262": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_array%1#0",
        "0",
        "\"tup\""
      ]
    },
    "263": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_array%1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "264": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%1#0"
      ]
    },
    "265": {
      "op": "intc_3 // 2",
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%1#0",
        "2"
      ]
    },
    "266": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "encoded_array%1#0",
        "maybe_value%1#0",
        "2",
        "8"
      ]
    },
    "268": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "aggregate%extract%1#0"
      ]
    },
    "269": {
      "op": "btoi",
      "defined_out": [
        "awst_tmp%3#0",
        "encoded_array%1#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%3#0"
      ]
    },
    "270": {
      "op": "txn Sender",
      "defined_out": [
        "awst_tmp%3#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "awst_tmp%3#0",
        "tmp%0#0"
      ]
    },
    "272": {
      "op": "cover 1",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0"
      ]
    },
    "274": {
      "op": "intc_2 // 10",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "10"
      ]
    },
    "275": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "awst_tmp%3#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "276": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%1#0",
        "awst_tmp%3#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "279": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "aggregate%offset_as_uint16%1#0",
        "0x"
      ]
    },
    "280": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "0x",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "282": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "awst_tmp%3#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "awst_tmp%3#0",
        "aggregate%head%4#0"
      ]
    },
    "283": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "aggregate%head%4#0",
        "awst_tmp%3#0"
      ]
    },
    "285": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%4#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "286": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "encoded_array%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_array%1#0",
        "tmp%0#0",
        "aggregate%head%5#0"
      ]
    },
    "287": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%5#0",
        "encoded_array%1#0"
      ]
    },
    "289": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_for_storage%1#0"
      ]
    },
    "290": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_for_storage%1#0",
        "tmp%0#0"
      ]
    },
    "292": {
      "op": "bytec 5 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "encoded_for_storage%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%1#0",
        "tmp%0#0",
        "\"loc\""
      ]
    },
    "294": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "\"loc\"",
        "encoded_for_storage%1#0"
      ]
    },
    "296": {
      "op": "app_local_put",
      "stack_out": []
    },
    "297": {
      "retsub": true,
      "op": "retsub"
    },
    "298": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple",
      "params": {
        "val#0": "bytes"
      },
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "301": {
      "op": "b test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple_block@0"
    },
    "304": {
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "305": {
      "op": "bytec_1 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"tup\""
      ]
    },
    "306": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "307": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "308": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "309": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "310": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "311": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "313": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "314": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "315": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ]
    },
    "317": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "318": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "320": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "322": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "323": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "325": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "326": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "328": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "329": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item1%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "330": {
      "op": "cover 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "332": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "333": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "val#0 (copy)"
      ]
    },
    "335": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "336": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "338": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%2#0"
      ]
    },
    "340": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "concat%0#0"
      ]
    },
    "341": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0"
      ]
    },
    "343": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "344": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "345": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "346": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "347": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "348": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "351": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "353": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "354": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "356": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "357": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "10"
      ]
    },
    "358": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "359": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "362": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "363": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "365": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "366": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "tmp%1#0"
      ]
    },
    "368": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "369": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "370": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "372": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "373": {
      "op": "bytec_1 // \"tup\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"tup\""
      ]
    },
    "374": {
      "op": "uncover 1",
      "stack_out": [
        "\"tup\"",
        "encoded_for_storage%0#0"
      ]
    },
    "376": {
      "op": "app_global_put",
      "stack_out": []
    },
    "377": {
      "retsub": true,
      "op": "retsub"
    },
    "378": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box",
      "params": {
        "val#0": "bytes"
      },
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "381": {
      "op": "b test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box_block@0"
    },
    "384": {
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box_block@0",
      "stack_in": [],
      "op": "bytec_3 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "385": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "386": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "387": {
      "op": "dup",
      "defined_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ],
      "stack_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ]
    },
    "388": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ],
      "stack_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)",
        "0"
      ]
    },
    "389": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "390": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%0#0"
      ]
    },
    "392": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ]
    },
    "393": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "394": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%0#0"
      ]
    },
    "396": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)"
      ]
    },
    "397": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "storage_value%0#0",
        "storage_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "399": {
      "op": "uncover 3",
      "stack_out": [
        "storage_value%0#0",
        "storage_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "401": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "402": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%substring3%0#0",
        "storage_value%0#0"
      ]
    },
    "404": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%substring3%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "storage_value%0#0",
        "2"
      ]
    },
    "405": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%substring3%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "storage_value%0#0",
        "2",
        "8"
      ]
    },
    "407": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "408": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item1%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "409": {
      "op": "cover 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "411": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "412": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "val#0 (copy)"
      ]
    },
    "414": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "415": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "417": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%2#0"
      ]
    },
    "419": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "concat%0#0"
      ]
    },
    "420": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0"
      ]
    },
    "422": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "423": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "424": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "425": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "426": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "427": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "430": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "432": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "433": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "435": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "436": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "10"
      ]
    },
    "437": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "438": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "441": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "442": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "444": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "445": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "tmp%1#0"
      ]
    },
    "447": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "448": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "449": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "451": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "452": {
      "op": "bytec_3 // \"box\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "453": {
      "op": "box_del",
      "defined_out": [
        "encoded_for_storage%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_for_storage%0#0",
        "{box_del}"
      ]
    },
    "454": {
      "op": "pop",
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "455": {
      "op": "bytec_3 // \"box\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"box\""
      ]
    },
    "456": {
      "op": "uncover 1",
      "stack_out": [
        "\"box\"",
        "encoded_for_storage%0#0"
      ]
    },
    "458": {
      "op": "box_put",
      "stack_out": []
    },
    "459": {
      "retsub": true,
      "op": "retsub"
    },
    "460": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global",
      "params": {
        "val#0": "bytes"
      },
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "463": {
      "op": "b test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global_block@0"
    },
    "466": {
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "467": {
      "op": "bytec 4 // \"glob\"",
      "defined_out": [
        "\"glob\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"glob\""
      ]
    },
    "469": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "470": {
      "error": "check self.glob exists",
      "op": "assert // check self.glob exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "471": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "472": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "473": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "474": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "476": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "477": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "478": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ]
    },
    "480": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "481": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "483": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "485": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "486": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "488": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "489": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "491": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "492": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item1%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "493": {
      "op": "cover 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "495": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "496": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "val#0 (copy)"
      ]
    },
    "498": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "499": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "501": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%2#0"
      ]
    },
    "503": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "concat%0#0"
      ]
    },
    "504": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0"
      ]
    },
    "506": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "507": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "508": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "509": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "510": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "511": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "514": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "516": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "517": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "519": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "520": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "10"
      ]
    },
    "521": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "522": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "525": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "526": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "528": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "529": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "tmp%1#0"
      ]
    },
    "531": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "532": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "533": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "535": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0"
      ],
      "stack_out": [
        "encoded_for_storage%0#0"
      ]
    },
    "536": {
      "op": "bytec 4 // \"glob\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "\"glob\""
      ]
    },
    "538": {
      "op": "uncover 1",
      "stack_out": [
        "\"glob\"",
        "encoded_for_storage%0#0"
      ]
    },
    "540": {
      "op": "app_global_put",
      "stack_out": []
    },
    "541": {
      "retsub": true,
      "op": "retsub"
    },
    "542": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local",
      "params": {
        "val#0": "bytes"
      },
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "545": {
      "op": "b test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local_block@0"
    },
    "548": {
      "block": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "550": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "551": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "552": {
      "op": "bytec 5 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "\"loc\""
      ]
    },
    "554": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "555": {
      "error": "check self.loc exists for account",
      "op": "assert // check self.loc exists for account",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "556": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "557": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "558": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "559": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "561": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "562": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "aggregate%len%0#0"
      ]
    },
    "563": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ]
    },
    "565": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "566": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "568": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "570": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "571": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "573": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "574": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "2",
        "8"
      ]
    },
    "576": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "577": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item1%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item1%0#0"
      ]
    },
    "578": {
      "op": "cover 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "580": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x"
      ]
    },
    "581": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x",
        "val#0 (copy)"
      ]
    },
    "583": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "584": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%1#0 (copy)"
      ]
    },
    "586": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%3#0"
      ]
    },
    "588": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "concat%0#0"
      ]
    },
    "589": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "tmp%1#0"
      ]
    },
    "591": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "592": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "593": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "594": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "595": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "596": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "599": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "601": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "602": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "604": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "605": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "10"
      ]
    },
    "606": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "607": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "610": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "611": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "613": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "614": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "tmp%2#0"
      ]
    },
    "616": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "617": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+uint64[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "618": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "as_Encoded(len+uint64[])%0#0"
      ]
    },
    "620": {
      "op": "concat",
      "defined_out": [
        "encoded_for_storage%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_for_storage%0#0"
      ]
    },
    "621": {
      "op": "uncover 1",
      "stack_out": [
        "encoded_for_storage%0#0",
        "tmp%0#0"
      ]
    },
    "623": {
      "op": "bytec 5 // \"loc\"",
      "stack_out": [
        "encoded_for_storage%0#0",
        "tmp%0#0",
        "\"loc\""
      ]
    },
    "625": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "\"loc\"",
        "encoded_for_storage%0#0"
      ]
    },
    "627": {
      "op": "app_local_put",
      "stack_out": []
    },
    "628": {
      "retsub": true,
      "op": "retsub"
    },
    "629": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "b approval_program_block@0"
    },
    "632": {
      "block": "approval_program_block@0",
      "stack_in": [],
      "op": "b approval_program_block@1"
    },
    "635": {
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "637": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "638": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "639": {
      "op": "bz approval_program___algopy_default_create@13",
      "stack_out": []
    },
    "642": {
      "op": "b approval_program_abi_routing@2"
    },
    "645": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "648": {
      "op": "pushbytes 0xbec76d87 // method \"bootstrap()void\"",
      "defined_out": [
        "Method(bootstrap()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(bootstrap()void)"
      ]
    },
    "654": {
      "op": "uncover 1",
      "stack_out": [
        "Method(bootstrap()void)",
        "tmp%2#0"
      ]
    },
    "656": {
      "op": "match approval_program_bootstrap_route@3",
      "stack_out": []
    },
    "660": {
      "op": "b approval_program_switch_case_next@4"
    },
    "663": {
      "block": "approval_program_switch_case_next@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "665": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "666": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "667": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "668": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "670": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "671": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "672": {
      "op": "bz approval_program_create_NoOp@11",
      "stack_out": []
    },
    "675": {
      "op": "b approval_program_call_NoOp@5"
    },
    "678": {
      "block": "approval_program_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "681": {
      "op": "pushbytes 0xacc253ae // method \"mutate_tuple(uint64)void\"",
      "defined_out": [
        "Method(mutate_tuple(uint64)void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(mutate_tuple(uint64)void)"
      ]
    },
    "687": {
      "op": "pushbytes 0xe844940c // method \"mutate_box(uint64)void\"",
      "defined_out": [
        "Method(mutate_box(uint64)void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)"
      ]
    },
    "693": {
      "op": "pushbytes 0x6222ef1a // method \"mutate_global(uint64)void\"",
      "defined_out": [
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)"
      ]
    },
    "699": {
      "op": "pushbytes 0x1b269b50 // method \"mutate_local(uint64)void\"",
      "defined_out": [
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)"
      ]
    },
    "705": {
      "op": "uncover 4",
      "stack_out": [
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "tmp%12#0"
      ]
    },
    "707": {
      "op": "match approval_program_mutate_tuple_route@6 approval_program_mutate_box_route@7 approval_program_mutate_global_route@8 approval_program_mutate_local_route@9",
      "stack_out": []
    },
    "717": {
      "op": "b approval_program_switch_case_next@10"
    },
    "720": {
      "block": "approval_program_switch_case_next@10",
      "stack_in": [],
      "op": "b approval_program_after_if_else@12"
    },
    "723": {
      "block": "approval_program_after_if_else@12",
      "stack_in": [],
      "op": "b approval_program_after_if_else@16"
    },
    "726": {
      "block": "approval_program_after_if_else@16",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "727": {
      "block": "approval_program_mutate_local_route@9",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local[routing]",
      "op": "callsub mutate_local"
    },
    "730": {
      "op": "b approval_program_switch_case_next@10"
    },
    "733": {
      "block": "approval_program_mutate_global_route@8",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global[routing]",
      "op": "callsub mutate_global"
    },
    "736": {
      "op": "b approval_program_switch_case_next@10"
    },
    "739": {
      "block": "approval_program_mutate_box_route@7",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box[routing]",
      "op": "callsub mutate_box"
    },
    "742": {
      "op": "b approval_program_switch_case_next@10"
    },
    "745": {
      "block": "approval_program_mutate_tuple_route@6",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple[routing]",
      "op": "callsub mutate_tuple"
    },
    "748": {
      "op": "b approval_program_switch_case_next@10"
    },
    "751": {
      "block": "approval_program_create_NoOp@11",
      "stack_in": [],
      "op": "b approval_program_after_if_else@12"
    },
    "754": {
      "block": "approval_program_bootstrap_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "756": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "OptIn"
      ]
    },
    "757": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "758": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "760": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "761": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "762": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "763": {
      "error": "OnCompletion must be OptIn && can only call when not creating",
      "op": "assert // OnCompletion must be OptIn && can only call when not creating",
      "stack_out": []
    },
    "764": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap[routing]",
      "op": "callsub bootstrap"
    },
    "767": {
      "op": "b approval_program_switch_case_next@4"
    },
    "770": {
      "block": "approval_program___algopy_default_create@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "772": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "773": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "774": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "776": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "0"
      ]
    },
    "777": {
      "op": "==",
      "defined_out": [
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "778": {
      "op": "&&",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "779": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "780": {
      "op": "b approval_program_block@14"
    },
    "783": {
      "block": "approval_program_block@14",
      "stack_in": [],
      "op": "b approval_program_after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_default_create@15"
    },
    "786": {
      "block": "approval_program_after_inlined_test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_default_create@15",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "787": {
      "op": "return",
      "stack_out": []
    }
  }
}