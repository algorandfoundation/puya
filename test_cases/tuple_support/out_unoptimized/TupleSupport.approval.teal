#pragma version 10

test_cases.tuple_support.tuple_support.TupleSupport.approval_program:
    byte ""
    dupn 3
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // tuple_support/tuple_support.py:9
    // total = add_three_values((UInt64(101), UInt64(102), UInt64(103)))
    int 101
    int 102
    int 103
    callsub add_three_values
    // tuple_support/tuple_support.py:10
    // log(total)
    itob
    log
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1
    int 2
    // tuple_support/tuple_support.py:12
    // (did_overflow, self.state) = op.addw(a, b)
    addw
    cover 1
    // tuple_support/tuple_support.py:6
    // self.state = UInt64(0)
    byte "state"
    // tuple_support/tuple_support.py:12
    // (did_overflow, self.state) = op.addw(a, b)
    uncover 2
    app_global_put
    // tuple_support/tuple_support.py:13
    // assert not did_overflow, "overflow!"
    !
    assert // overflow!
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 2
    int 2
    // tuple_support/tuple_support.py:15
    // assert ab[-1] == ab[1]
    ==
    assert
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1
    int 2
    // tuple_support/tuple_support.py:16
    // result = op.addw(a, b)
    addw
    pop
    // tuple_support/tuple_support.py:17
    // assert not result[0], "overflow!"
    !
    assert // overflow!
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1
    int 2
    // tuple_support/tuple_support.py:20
    // if a == b:
    ==
    bz main_else_body@4
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1
    // tuple_support/tuple_support.py:21
    // tup = ab2
    bury 1
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 2
    b main_after_if_else@5

main_else_body@4:
    // tuple_support/tuple_support.py:18
    // c = d = UInt64(3)
    int 3
    // tuple_support/tuple_support.py:23
    // tup = cd
    bury 1
    // tuple_support/tuple_support.py:18
    // c = d = UInt64(3)
    int 3

main_after_if_else@5:
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1
    int 1
    // tuple_support/tuple_support.py:24
    // assert a2 == a
    ==
    assert
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 2
    int 2
    // tuple_support/tuple_support.py:25
    // assert b2 == b
    ==
    assert
    // tuple_support/tuple_support.py:18
    // c = d = UInt64(3)
    int 3
    // tuple_support/tuple_support.py:26
    // assert cd[0] == tup[0]
    dig 2
    ==
    assert
    // tuple_support/tuple_support.py:18
    // c = d = UInt64(3)
    int 3
    // tuple_support/tuple_support.py:27
    // assert cd[1] == tup[1]
    uncover 1
    ==
    assert
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1
    int 2
    // tuple_support/tuple_support.py:29
    // (m, n) = get_tuple(a, b) or get_tuple(b, a)
    callsub get_tuple
    dup
    cover 2
    bury 5
    dup
    bury 6
    dup
    uncover 1
    ==
    uncover 1
    dup
    uncover 1
    ==
    ||
    bz main_ternary_false@7
    dig 3
    bury 2
    dig 2
    b main_ternary_merge@8

main_ternary_false@7:
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 2
    int 1
    // tuple_support/tuple_support.py:29
    // (m, n) = get_tuple(a, b) or get_tuple(b, a)
    callsub get_tuple
    cover 1
    bury 3

main_ternary_merge@8:
    // tuple_support/tuple_support.py:29
    // (m, n) = get_tuple(a, b) or get_tuple(b, a)
    dig 2
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1
    // tuple_support/tuple_support.py:30
    // assert (m, n) == (a, b)
    ==
    cover 1
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 2
    // tuple_support/tuple_support.py:30
    // assert (m, n) == (a, b)
    ==
    &&
    assert
    // tuple_support/tuple_support.py:32-34
    // # assert ab2 == ab # TODO: support ths
    // # foobar = ((a, b), (c, d)) # TODO: negative test for this
    // log(bytes_combine((Bytes(b"Hello, "), Bytes(b"world!"))))
    byte 0x48656c6c6f2c20
    byte 0x776f726c6421
    callsub bytes_combine
    log
    // tuple_support/tuple_support.py:35
    // max_uint64 = UInt64(2**64 - 1)
    int 18446744073709551615
    int 18446744073709551615
    // tuple_support/tuple_support.py:36
    // hi, mid, lo = addw2(op.addw(max_uint64, max_uint64), op.addw(a, b))
    addw
    cover 1
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1
    int 2
    // tuple_support/tuple_support.py:36
    // hi, mid, lo = addw2(op.addw(max_uint64, max_uint64), op.addw(a, b))
    addw
    cover 1
    uncover 2
    uncover 3
    uncover 2
    uncover 3
    callsub addw2
    cover 2
    cover 2
    uncover 1
    cover 2
    // tuple_support/tuple_support.py:37
    // log(hi)
    itob
    log
    // tuple_support/tuple_support.py:38
    // log(mid)
    itob
    log
    // tuple_support/tuple_support.py:39
    // log(lo)
    itob
    log
    // tuple_support/tuple_support.py:40
    // log(bytes_multiply((Bytes(b"na"), UInt64(5))))
    byte 0x6e61
    int 5
    callsub bytes_multiply
    log
    // tuple_support/tuple_support.py:41
    // test_tuple_swap(zero=UInt64(0))
    int 0
    callsub test_tuple_swap
    // tuple_support/tuple_support.py:44
    // UInt64(1),
    int 1
    // tuple_support/tuple_support.py:45
    // UInt64(2),
    int 2
    // tuple_support/tuple_support.py:46
    // UInt64(3),
    int 3
    // tuple_support/tuple_support.py:47
    // UInt64(4),
    int 4
    // tuple_support/tuple_support.py:48
    // UInt64(5),
    int 5
    // tuple_support/tuple_support.py:49
    // UInt64(6),
    int 6
    // tuple_support/tuple_support.py:50
    // UInt64(7),
    int 7
    // tuple_support/tuple_support.py:51
    // UInt64(8),
    int 8
    // tuple_support/tuple_support.py:42-53
    // slicing(
    //     (
    //         UInt64(1),
    //         UInt64(2),
    //         UInt64(3),
    //         UInt64(4),
    //         UInt64(5),
    //         UInt64(6),
    //         UInt64(7),
    //         UInt64(8),
    //     )
    // )
    callsub slicing
    // tuple_support/tuple_support.py:54
    // bin_ops()
    callsub bin_ops
    // tuple_support/tuple_support.py:55
    // if non_empty_tuple():
    callsub non_empty_tuple
    cover 1
    dup
    uncover 1
    ==
    uncover 1
    dup
    uncover 1
    ==
    ||
    bz main_after_if_else@10
    // tuple_support/tuple_support.py:56
    // log("not empty")
    byte "not empty"
    log

main_after_if_else@10:
    // tuple_support/tuple_support.py:57
    // if (get_uint_with_side_effect(),):  # noqa: F634
    callsub get_uint_with_side_effect
    dup
    uncover 1
    ==
    bz main_after_if_else@12
    // tuple_support/tuple_support.py:58
    // log("not empty2")
    byte "not empty2"
    log

main_after_if_else@12:
    // tuple_support/tuple_support.py:59
    // single_tuple()
    callsub single_tuple
    // tuple_support/tuple_support.py:61
    // x = tuple[UInt64, Bytes]((UInt64(), Bytes()))
    int 0
    // tuple_support/tuple_support.py:62
    // assert x[0] == 0
    int 0
    ==
    assert
    // tuple_support/tuple_support.py:61
    // x = tuple[UInt64, Bytes]((UInt64(), Bytes()))
    byte 0x
    // tuple_support/tuple_support.py:63
    // assert x[1] == b""
    byte 0x
    ==
    assert
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1
    int 2
    // tuple_support/tuple_support.py:65
    // return a + b
    +
    return


// test_cases.tuple_support.tuple_support.add_three_values(values.0: uint64, values.1: uint64, values.2: uint64) -> uint64:
add_three_values:
    // tuple_support/tuple_support.py:138-139
    // @subroutine
    // def add_three_values(values: tuple[UInt64, UInt64, UInt64]) -> UInt64:
    proto 3 1
    // tuple_support/tuple_support.py:140
    // total = UInt64(0)
    int 0
    int 0
    // tuple_support/tuple_support.py:141
    // for value in values:
    frame_dig -3

add_three_values_for_body@1:
    // tuple_support/tuple_support.py:142
    // total += value
    frame_dig 0
    uncover 1
    +
    frame_bury 0
    // tuple_support/tuple_support.py:141
    // for value in values:
    frame_dig 1
    switch add_three_values_for_header_1@3 add_three_values_for_header_2@4
    b add_three_values_after_for@5

add_three_values_for_header_1@3:
    int 1
    frame_bury 1
    // tuple_support/tuple_support.py:141
    // for value in values:
    frame_dig -2
    b add_three_values_for_body@1

add_three_values_for_header_2@4:
    int 2
    frame_bury 1
    // tuple_support/tuple_support.py:141
    // for value in values:
    frame_dig -1
    b add_three_values_for_body@1

add_three_values_after_for@5:
    // tuple_support/tuple_support.py:144
    // return total
    frame_dig 0
    frame_bury 0
    retsub


// test_cases.tuple_support.tuple_support.get_tuple(a: uint64, b: uint64) -> uint64, uint64:
get_tuple:
    // tuple_support/tuple_support.py:71-72
    // @subroutine
    // def get_tuple(a: UInt64, b: UInt64) -> tuple[UInt64, UInt64]:
    proto 2 2
    // tuple_support/tuple_support.py:73
    // return a, b
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.tuple_support.tuple_support.bytes_combine(arg.0: bytes, arg.1: bytes) -> bytes:
bytes_combine:
    // tuple_support/tuple_support.py:122-123
    // @subroutine
    // def bytes_combine(arg: tuple[Bytes, Bytes]) -> Bytes:
    proto 2 1
    // tuple_support/tuple_support.py:124
    // a, b = arg
    frame_dig -2
    frame_dig -1
    // tuple_support/tuple_support.py:125
    // result = a + b
    concat
    // tuple_support/tuple_support.py:126
    // return result
    retsub


// test_cases.tuple_support.tuple_support.addw2(a.0: uint64, a.1: uint64, b.0: uint64, b.1: uint64) -> uint64, uint64, uint64:
addw2:
    // tuple_support/tuple_support.py:147-148
    // @subroutine
    // def addw2(a: tuple[UInt64, UInt64], b: tuple[UInt64, UInt64]) -> tuple[UInt64, UInt64, UInt64]:
    proto 4 3
    // tuple_support/tuple_support.py:149
    // a_hi, a_lo = a
    frame_dig -4
    frame_dig -3
    // tuple_support/tuple_support.py:150
    // b_hi, b_lo = b
    frame_dig -2
    cover 1
    frame_dig -1
    // tuple_support/tuple_support.py:151
    // lo_carry, c_lo = op.addw(a_lo, b_lo)
    addw
    cover 1
    cover 2
    cover 3
    // tuple_support/tuple_support.py:152
    // hi_carry1, c_mid = op.addw(a_hi, b_hi)
    uncover 2
    uncover 1
    addw
    // tuple_support/tuple_support.py:153
    // hi_carry2, c_mid = op.addw(c_mid, lo_carry)
    uncover 2
    addw
    cover 2
    // tuple_support/tuple_support.py:154
    // did_overflow, c_hi = op.addw(hi_carry1, hi_carry2)
    addw
    cover 1
    // tuple_support/tuple_support.py:155
    // assert not did_overflow, "is such a thing even possible? 👽"
    !
    assert // is such a thing even possible? 👽
    // tuple_support/tuple_support.py:156
    // return c_hi, c_mid, c_lo
    uncover 1
    uncover 2
    retsub


// test_cases.tuple_support.tuple_support.bytes_multiply(arg.0: bytes, arg.1: uint64) -> bytes:
bytes_multiply:
    // tuple_support/tuple_support.py:129-130
    // @subroutine
    // def bytes_multiply(arg: tuple[Bytes, UInt64]) -> Bytes:
    proto 2 1
    // tuple_support/tuple_support.py:131
    // b, count = arg
    frame_dig -2
    frame_dig -1
    // tuple_support/tuple_support.py:132
    // result = Bytes()
    byte 0x
    // tuple_support/tuple_support.py:133
    // for _i in urange(count):
    int 1
    assert // Step cannot be zero
    int 0

bytes_multiply_for_header@1:
    // tuple_support/tuple_support.py:133
    // for _i in urange(count):
    frame_dig 3
    frame_dig 1
    <
    bz bytes_multiply_after_for@4
    // tuple_support/tuple_support.py:134
    // result += b
    frame_dig 2
    frame_dig 0
    concat
    frame_bury 2
    // tuple_support/tuple_support.py:133
    // for _i in urange(count):
    frame_dig 3
    int 1
    +
    frame_bury 3
    b bytes_multiply_for_header@1

bytes_multiply_after_for@4:
    // tuple_support/tuple_support.py:135
    // return result
    frame_dig 2
    frame_bury 0
    retsub


// test_cases.tuple_support.tuple_support.test_tuple_swap(zero: uint64) -> void:
test_tuple_swap:
    // tuple_support/tuple_support.py:159-160
    // @subroutine
    // def test_tuple_swap(zero: UInt64) -> None:
    proto 1 0
    // tuple_support/tuple_support.py:161
    // a = zero + 1
    frame_dig -1
    int 1
    +
    // tuple_support/tuple_support.py:162
    // b = zero + 2
    frame_dig -1
    int 2
    +
    // tuple_support/tuple_support.py:164
    // assert a == 2, "a should be two"
    int 2
    ==
    assert // a should be two
    // tuple_support/tuple_support.py:165
    // assert b == 1, "b should be one"
    int 1
    ==
    assert // b should be one
    retsub


// test_cases.tuple_support.tuple_support.slicing(values.0: uint64, values.1: uint64, values.2: uint64, values.3: uint64, values.4: uint64, values.5: uint64, values.6: uint64, values.7: uint64) -> void:
slicing:
    // tuple_support/tuple_support.py:168-169
    // @subroutine
    // def slicing(values: tuple[UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64]) -> None:
    proto 8 0
    // tuple_support/tuple_support.py:170
    // one_to_three = values[0:3]
    frame_dig -8
    frame_dig -7
    frame_dig -6
    // tuple_support/tuple_support.py:171
    // assert add_three_values(one_to_three) == values[0] + values[1] + values[2]
    dig 2
    dig 2
    dig 2
    callsub add_three_values
    frame_dig -8
    frame_dig -7
    +
    frame_dig -6
    +
    ==
    assert
    // tuple_support/tuple_support.py:173
    // assert one_to_three[-2:-1][0] == one_to_three[1]
    dig 1
    dig 2
    ==
    assert
    // tuple_support/tuple_support.py:175
    // assert one_to_three == one_to_three[:]
    dig 2
    cover 1
    dig 2
    cover 3
    dup
    cover 5
    uncover 4
    uncover 2
    ==
    uncover 2
    uncover 3
    ==
    &&
    uncover 1
    uncover 2
    ==
    &&
    assert
    retsub


// test_cases.tuple_support.tuple_support.bin_ops() -> void:
bin_ops:
    // tuple_support/tuple_support.py:94-95
    // @subroutine
    // def bin_ops() -> None:
    proto 0 0
    // tuple_support/tuple_support.py:96
    // a = (UInt64(1),) * 3
    int 1
    // tuple_support/tuple_support.py:97
    // assert a[0] == 1
    int 1
    ==
    assert
    // tuple_support/tuple_support.py:96
    // a = (UInt64(1),) * 3
    int 1
    // tuple_support/tuple_support.py:98
    // assert a[1] == 1
    int 1
    ==
    assert
    // tuple_support/tuple_support.py:96
    // a = (UInt64(1),) * 3
    int 1
    // tuple_support/tuple_support.py:99
    // assert a[2] == 1
    int 1
    ==
    assert
    // tuple_support/tuple_support.py:101
    // tup = (UInt64(1), UInt64(2))
    int 1
    // tuple_support/tuple_support.py:103
    // assert b[0] == 1
    int 1
    ==
    assert
    // tuple_support/tuple_support.py:101
    // tup = (UInt64(1), UInt64(2))
    int 2
    // tuple_support/tuple_support.py:104
    // assert b[1] == 2
    int 2
    ==
    assert
    // tuple_support/tuple_support.py:101
    // tup = (UInt64(1), UInt64(2))
    int 1
    // tuple_support/tuple_support.py:105
    // assert b[2] == 1
    int 1
    ==
    assert
    // tuple_support/tuple_support.py:101
    // tup = (UInt64(1), UInt64(2))
    int 2
    // tuple_support/tuple_support.py:106
    // assert b[3] == 2
    int 2
    ==
    assert
    // tuple_support/tuple_support.py:101
    // tup = (UInt64(1), UInt64(2))
    int 1
    // tuple_support/tuple_support.py:107
    // assert b[4] == 1
    int 1
    ==
    assert
    // tuple_support/tuple_support.py:101
    // tup = (UInt64(1), UInt64(2))
    int 2
    // tuple_support/tuple_support.py:108
    // assert b[5] == 2
    int 2
    ==
    assert
    // tuple_support/tuple_support.py:110
    // c = (UInt64(1),) + (Bytes(b"2"), UInt64(3))  # noqa: RUF005
    int 1
    // tuple_support/tuple_support.py:111
    // assert c[0] == 1
    int 1
    ==
    assert
    // tuple_support/tuple_support.py:110
    // c = (UInt64(1),) + (Bytes(b"2"), UInt64(3))  # noqa: RUF005
    byte 0x32
    // tuple_support/tuple_support.py:112
    // assert c[1] == b"2"
    byte 0x32
    ==
    assert
    // tuple_support/tuple_support.py:110
    // c = (UInt64(1),) + (Bytes(b"2"), UInt64(3))  # noqa: RUF005
    int 3
    // tuple_support/tuple_support.py:113
    // assert c[2] == 3
    int 3
    ==
    assert
    // tuple_support/tuple_support.py:101
    // tup = (UInt64(1), UInt64(2))
    int 1
    // tuple_support/tuple_support.py:116
    // assert d[0] == 1
    int 1
    ==
    assert
    // tuple_support/tuple_support.py:101
    // tup = (UInt64(1), UInt64(2))
    int 2
    // tuple_support/tuple_support.py:117
    // assert d[1] == 2
    int 2
    ==
    assert
    // tuple_support/tuple_support.py:101
    // tup = (UInt64(1), UInt64(2))
    int 1
    // tuple_support/tuple_support.py:118
    // assert d[2] == 1
    int 1
    ==
    assert
    // tuple_support/tuple_support.py:101
    // tup = (UInt64(1), UInt64(2))
    int 2
    // tuple_support/tuple_support.py:119
    // assert d[3] == 2
    int 2
    ==
    assert
    retsub


// test_cases.tuple_support.tuple_support.non_empty_tuple() -> uint64, uint64:
non_empty_tuple:
    // tuple_support/tuple_support.py:88-89
    // @subroutine
    // def non_empty_tuple() -> tuple[UInt64, UInt64]:
    proto 0 2
    // tuple_support/tuple_support.py:90
    // log("non_empty_tuple called")
    byte "non_empty_tuple called"
    log
    // tuple_support/tuple_support.py:91
    // return UInt64(4), UInt64(2)
    int 4
    int 2
    retsub


// test_cases.tuple_support.tuple_support.get_uint_with_side_effect() -> uint64:
get_uint_with_side_effect:
    // tuple_support/tuple_support.py:82-83
    // @subroutine
    // def get_uint_with_side_effect() -> UInt64:
    proto 0 1
    // tuple_support/tuple_support.py:84
    // log("get_uint_with_side_effect called")
    byte "get_uint_with_side_effect called"
    log
    // tuple_support/tuple_support.py:85
    // return UInt64(4)
    int 4
    retsub


// test_cases.tuple_support.tuple_support.single_tuple() -> void:
single_tuple:
    // tuple_support/tuple_support.py:76-77
    // @subroutine
    // def single_tuple() -> None:
    proto 0 0
    // tuple_support/tuple_support.py:78
    // tup = (UInt64(1),)
    int 1
    // tuple_support/tuple_support.py:79
    // assert tup[0] == 1
    int 1
    ==
    assert
    retsub


// test_cases.tuple_support.tuple_support.TupleSupport.__init__() -> void:
__init__:
    // tuple_support/tuple_support.py:5
    // def __init__(self) -> None:
    proto 0 0
    // tuple_support/tuple_support.py:6
    // self.state = UInt64(0)
    byte "state"
    int 0
    app_global_put
    retsub
