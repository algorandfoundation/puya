debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, debug_level=0, optimization_level=2, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, paths=['tuple_support'], output_awst=False, output_awst_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@3
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@2, i#2 <- block@5) in block@5
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@5) in block@5
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@5) in block@5
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@6
debug: Terminated block@6
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.tuple_support.tuple_support.get_tuple
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_support.single_tuple
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_support.get_uint_with_side_effect
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_support.non_empty_tuple
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_support.bin_ops
debug: Sealing block@0
tuple_support/tuple_support.py:96:10 debug: encountered already materialized expression (1u), reusing result: 1u
tuple_support/tuple_support.py:96:10 debug: encountered already materialized expression (1u), reusing result: 1u
tuple_support/tuple_support.py:102:9 debug: encountered already materialized expression (tup), reusing result: (tup.0#0, tup.1#0)
tuple_support/tuple_support.py:102:9 debug: encountered already materialized expression (tup[0]), reusing result: tup.0#0
tuple_support/tuple_support.py:102:9 debug: encountered already materialized expression (tup[1]), reusing result: tup.1#0
tuple_support/tuple_support.py:102:9 debug: encountered already materialized expression (tup[0]), reusing result: tup.0#0
tuple_support/tuple_support.py:102:9 debug: encountered already materialized expression (tup[1]), reusing result: tup.1#0
tuple_support/tuple_support.py:115:9 debug: encountered already materialized expression (tup), reusing result: (tup.0#0, tup.1#0)
tuple_support/tuple_support.py:115:15 debug: encountered already materialized expression (tup), reusing result: (tup.0#0, tup.1#0)
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_support.bytes_combine
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_support.bytes_multiply
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for '_i' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let _i#1: uint64 = undefined while trying to resolve '_i' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let result#1: bytes = undefined while trying to resolve 'result' in block@1
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let b#1: bytes = undefined while trying to resolve 'b' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added _i#0 to Phi node: let _i#1: uint64 = φ(_i#0 <- block@0) in block@0
debug: Added _i#2 to Phi node: let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@3) in block@3
debug: Added result#0 to Phi node: let result#1: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#2 to Phi node: let result#1: bytes = φ(result#0 <- block@0, result#2 <- block@3) in block@3
debug: Added b#0 to Phi node: let b#1: bytes = φ(b#0 <- block@0) in block@0
debug: Added b#1 to Phi node: let b#1: bytes = φ(b#0 <- block@0, b#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let b#1: bytes = φ(b#0 <- block@0, b#1 <- block@3) (b#1) with b#0
debug: Deleting Phi assignment: let b#1: bytes = φ(b#0 <- block@0, b#1 <- block@3)
debug: Replaced trivial Phi node: let b#1: bytes = φ(b#0 <- block@0, b#1 <- block@3) (b#1) with b#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.tuple_support.tuple_support.add_three_values
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'loop_counter%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let loop_counter%0#1: uint64 = undefined while trying to resolve 'loop_counter%0' in block@1
debug: Looking for 'total' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let total#1: uint64 = undefined while trying to resolve 'total' in block@1
debug: Looking for 'value' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value#1: uint64 = undefined while trying to resolve 'value' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added loop_counter%0#0 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0) in block@0
debug: Added loop_counter%0#2 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3) in block@3
debug: Added loop_counter%0#3 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4) in block@4
debug: Added total#0 to Phi node: let total#1: uint64 = φ(total#0 <- block@0) in block@0
debug: Added total#2 to Phi node: let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3) in block@3
debug: Added total#2 to Phi node: let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3, total#2 <- block@4) in block@4
debug: Added value#0 to Phi node: let value#1: uint64 = φ(value#0 <- block@0) in block@0
debug: Added value#2 to Phi node: let value#1: uint64 = φ(value#0 <- block@0, value#2 <- block@3) in block@3
debug: Added value#3 to Phi node: let value#1: uint64 = φ(value#0 <- block@0, value#2 <- block@3, value#3 <- block@4) in block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function test_cases.tuple_support.tuple_support.addw2
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_support.test_tuple_swap
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_support.slicing
debug: Sealing block@0
tuple_support/tuple_support.py:175:12 debug: encountered already materialized expression (one_to_three), reusing result: (one_to_three.0#0, one_to_three.1#0, one_to_three.2#0)
tuple_support/tuple_support.py:175:12 debug: encountered already materialized expression (one_to_three), reusing result: (one_to_three.0#0, one_to_three.1#0, one_to_three.2#0)
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_support.test_empty
debug: Sealing block@0
tuple_support/tuple_support.py:184:5 warning: assertion is always true, ignoring
tuple_support/tuple_support.py:185:5 warning: assertion is always true, ignoring
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty
debug: Sealing block@0
tuple_support/tuple_comparisons.py:43:5 warning: assertion is always true, ignoring
tuple_support/tuple_comparisons.py:47:5 warning: assertion is always true, ignoring
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_comparisons.log_and_return
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.test_rearrange
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.test_swap
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.test_intrinsics
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.test_nested_slicing
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.test_nested_singles
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let s.0.0#2: uint64 = undefined while trying to resolve 's.0.0' in block@2
debug: Added s.0.0#0 to Phi node: let s.0.0#2: uint64 = φ(s.0.0#0 <- block@0) in block@0
debug: Added s.0.0#1 to Phi node: let s.0.0#2: uint64 = φ(s.0.0#0 <- block@0, s.0.0#1 <- block@1) in block@1
debug: Created Phi assignment: let s.1.0#2: uint64 = undefined while trying to resolve 's.1.0' in block@2
debug: Added s.1.0#0 to Phi node: let s.1.0#2: uint64 = φ(s.1.0#0 <- block@0) in block@0
debug: Added s.1.0#1 to Phi node: let s.1.0#2: uint64 = φ(s.1.0#0 <- block@0, s.1.0#1 <- block@1) in block@1
debug: Created Phi assignment: let s.2.0#2: uint64 = undefined while trying to resolve 's.2.0' in block@2
debug: Added s.2.0#0 to Phi node: let s.2.0#2: uint64 = φ(s.2.0#0 <- block@0) in block@0
debug: Added s.2.0#1 to Phi node: let s.2.0#2: uint64 = φ(s.2.0#0 <- block@0, s.2.0#1 <- block@1) in block@1
debug: Created Phi assignment: let reassign#1: bool = undefined while trying to resolve 'reassign' in block@2
debug: Added reassign#0 to Phi node: let reassign#1: bool = φ(reassign#0 <- block@0) in block@0
debug: Added reassign#0 to Phi node: let reassign#1: bool = φ(reassign#0 <- block@0, reassign#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let reassign#1: bool = φ(reassign#0 <- block@0, reassign#0 <- block@1) (reassign#1) with reassign#0
debug: Deleting Phi assignment: let reassign#1: bool = φ(reassign#0 <- block@0, reassign#0 <- block@1)
debug: Replaced trivial Phi node: let reassign#1: bool = φ(reassign#0 <- block@0, reassign#0 <- block@1) (reassign#1) with reassign#0 in current definition for 1 blocks
debug: Created Phi assignment: let t.0#1: uint64 = undefined while trying to resolve 't.0' in block@2
debug: Added t.0#0 to Phi node: let t.0#1: uint64 = φ(t.0#0 <- block@0) in block@0
debug: Added t.0#0 to Phi node: let t.0#1: uint64 = φ(t.0#0 <- block@0, t.0#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let t.0#1: uint64 = φ(t.0#0 <- block@0, t.0#0 <- block@1) (t.0#1) with t.0#0
debug: Deleting Phi assignment: let t.0#1: uint64 = φ(t.0#0 <- block@0, t.0#0 <- block@1)
debug: Replaced trivial Phi node: let t.0#1: uint64 = φ(t.0#0 <- block@0, t.0#0 <- block@1) (t.0#1) with t.0#0 in current definition for 1 blocks
debug: Created Phi assignment: let one#1: uint64 = undefined while trying to resolve 'one' in block@2
debug: Added one#0 to Phi node: let one#1: uint64 = φ(one#0 <- block@0) in block@0
debug: Added one#0 to Phi node: let one#1: uint64 = φ(one#0 <- block@0, one#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let one#1: uint64 = φ(one#0 <- block@0, one#0 <- block@1) (one#1) with one#0
debug: Deleting Phi assignment: let one#1: uint64 = φ(one#0 <- block@0, one#0 <- block@1)
debug: Replaced trivial Phi node: let one#1: uint64 = φ(one#0 <- block@0, one#0 <- block@1) (one#1) with one#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Building IR for function test_cases.tuple_support.nested_tuples.test_nested_mutation
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.test_nested_iteration
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'loop_counter%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let loop_counter%0#1: uint64 = undefined while trying to resolve 'loop_counter%0' in block@1
debug: Looking for 't.0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let t.0#1: uint64 = undefined while trying to resolve 't.0' in block@1
debug: Looking for 't.1' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let t.1#1: uint64 = undefined while trying to resolve 't.1' in block@1
debug: Looking for 'total' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let total#1: uint64 = undefined while trying to resolve 'total' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@1
debug: Added loop_counter%0#0 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0) in block@0
debug: Added loop_counter%0#2 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3) in block@3
debug: Added loop_counter%0#3 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4) in block@4
debug: Added loop_counter%0#4 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4, loop_counter%0#4 <- block@5) in block@5
debug: Added t.0#0 to Phi node: let t.0#1: uint64 = φ(t.0#0 <- block@0) in block@0
debug: Added t.0#2 to Phi node: let t.0#1: uint64 = φ(t.0#0 <- block@0, t.0#2 <- block@3) in block@3
debug: Added t.0#3 to Phi node: let t.0#1: uint64 = φ(t.0#0 <- block@0, t.0#2 <- block@3, t.0#3 <- block@4) in block@4
debug: Added t.0#4 to Phi node: let t.0#1: uint64 = φ(t.0#0 <- block@0, t.0#2 <- block@3, t.0#3 <- block@4, t.0#4 <- block@5) in block@5
debug: Added t.1#0 to Phi node: let t.1#1: uint64 = φ(t.1#0 <- block@0) in block@0
debug: Added t.1#2 to Phi node: let t.1#1: uint64 = φ(t.1#0 <- block@0, t.1#2 <- block@3) in block@3
debug: Added t.1#3 to Phi node: let t.1#1: uint64 = φ(t.1#0 <- block@0, t.1#2 <- block@3, t.1#3 <- block@4) in block@4
debug: Added t.1#4 to Phi node: let t.1#1: uint64 = φ(t.1#0 <- block@0, t.1#2 <- block@3, t.1#3 <- block@4, t.1#4 <- block@5) in block@5
debug: Added total#0 to Phi node: let total#1: uint64 = φ(total#0 <- block@0) in block@0
debug: Added total#2 to Phi node: let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3) in block@3
debug: Added total#2 to Phi node: let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3, total#2 <- block@4) in block@4
debug: Added total#2 to Phi node: let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3, total#2 <- block@4, total#2 <- block@5) in block@5
debug: Sealing block@6
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@1
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0) in block@0
debug: Added x#1 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#1 <- block@3) in block@3
debug: Added x#1 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#1 <- block@3, x#1 <- block@4) in block@4
debug: Added x#1 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#1 <- block@3, x#1 <- block@4, x#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#1 <- block@3, x#1 <- block@4, x#1 <- block@5) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: uint64 = φ(x#0 <- block@0, x#1 <- block@3, x#1 <- block@4, x#1 <- block@5)
debug: Replaced trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#1 <- block@3, x#1 <- block@4, x#1 <- block@5) (x#1) with x#0 in current definition for 5 blocks
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@1
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@0) in block@0
debug: Added y#1 to Phi node: let y#1: uint64 = φ(y#0 <- block@0, y#1 <- block@3) in block@3
debug: Added y#1 to Phi node: let y#1: uint64 = φ(y#0 <- block@0, y#1 <- block@3, y#1 <- block@4) in block@4
debug: Added y#1 to Phi node: let y#1: uint64 = φ(y#0 <- block@0, y#1 <- block@3, y#1 <- block@4, y#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let y#1: uint64 = φ(y#0 <- block@0, y#1 <- block@3, y#1 <- block@4, y#1 <- block@5) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: uint64 = φ(y#0 <- block@0, y#1 <- block@3, y#1 <- block@4, y#1 <- block@5)
debug: Replaced trivial Phi node: let y#1: uint64 = φ(y#0 <- block@0, y#1 <- block@3, y#1 <- block@4, y#1 <- block@5) (y#1) with y#0 in current definition for 5 blocks
debug: Terminated block@6
debug: Looking for 'loop_counter%1' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let loop_counter%1#1: uint64 = undefined while trying to resolve 'loop_counter%1' in block@7
debug: Looking for 'total' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let total#3: uint64 = undefined while trying to resolve 'total' in block@7
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@7
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@7
debug: Added loop_counter%1#0 to Phi node: let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@6) in block@6
debug: Added loop_counter%1#2 to Phi node: let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@6, loop_counter%1#2 <- block@9) in block@9
debug: Added loop_counter%1#3 to Phi node: let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@6, loop_counter%1#2 <- block@9, loop_counter%1#3 <- block@10) in block@10
debug: Added loop_counter%1#4 to Phi node: let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@6, loop_counter%1#2 <- block@9, loop_counter%1#3 <- block@10, loop_counter%1#4 <- block@11) in block@11
debug: Added total#2 to Phi node: let total#3: uint64 = φ(total#2 <- block@6) in block@6
debug: Added total#4 to Phi node: let total#3: uint64 = φ(total#2 <- block@6, total#4 <- block@9) in block@9
debug: Added total#4 to Phi node: let total#3: uint64 = φ(total#2 <- block@6, total#4 <- block@9, total#4 <- block@10) in block@10
debug: Added total#4 to Phi node: let total#3: uint64 = φ(total#2 <- block@6, total#4 <- block@9, total#4 <- block@10, total#4 <- block@11) in block@11
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#1 <- block@6) in block@6
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#1 <- block@6, a#3 <- block@9) in block@9
debug: Added a#4 to Phi node: let a#2: uint64 = φ(a#1 <- block@6, a#3 <- block@9, a#4 <- block@10) in block@10
debug: Added a#5 to Phi node: let a#2: uint64 = φ(a#1 <- block@6, a#3 <- block@9, a#4 <- block@10, a#5 <- block@11) in block@11
debug: Added b#1 to Phi node: let b#2: uint64 = φ(b#1 <- block@6) in block@6
debug: Added b#3 to Phi node: let b#2: uint64 = φ(b#1 <- block@6, b#3 <- block@9) in block@9
debug: Added b#4 to Phi node: let b#2: uint64 = φ(b#1 <- block@6, b#3 <- block@9, b#4 <- block@10) in block@10
debug: Added b#5 to Phi node: let b#2: uint64 = φ(b#1 <- block@6, b#3 <- block@9, b#4 <- block@10, b#5 <- block@11) in block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Building IR for function test_cases.tuple_support.tuple_support.TupleSupport.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.tuple_support.tuple_support.TupleSupport.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_support.TupleSupport.approval_program
debug: Sealing block@0
tuple_support/tuple_support.py:18:17 debug: encountered already materialized expression (3u), reusing result: 3u
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Created Phi assignment: let a2#1: uint64 = undefined while trying to resolve 'a2' in block@3
debug: Added a2#0 to Phi node: let a2#1: uint64 = φ(a2#0 <- block@1) in block@1
debug: Added a2#0 to Phi node: let a2#1: uint64 = φ(a2#0 <- block@1, a2#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let a2#1: uint64 = φ(a2#0 <- block@1, a2#0 <- block@2) (a2#1) with a2#0
debug: Deleting Phi assignment: let a2#1: uint64 = φ(a2#0 <- block@1, a2#0 <- block@2)
debug: Replaced trivial Phi node: let a2#1: uint64 = φ(a2#0 <- block@1, a2#0 <- block@2) (a2#1) with a2#0 in current definition for 1 blocks
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@3
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@1) in block@1
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@1, a#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#0 <- block@1, a#0 <- block@2) (a#1) with a#0
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#0 <- block@1, a#0 <- block@2)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#0 <- block@1, a#0 <- block@2) (a#1) with a#0 in current definition for 1 blocks
debug: Created Phi assignment: let b2#1: uint64 = undefined while trying to resolve 'b2' in block@3
debug: Added b2#0 to Phi node: let b2#1: uint64 = φ(b2#0 <- block@1) in block@1
debug: Added b2#0 to Phi node: let b2#1: uint64 = φ(b2#0 <- block@1, b2#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let b2#1: uint64 = φ(b2#0 <- block@1, b2#0 <- block@2) (b2#1) with b2#0
debug: Deleting Phi assignment: let b2#1: uint64 = φ(b2#0 <- block@1, b2#0 <- block@2)
debug: Replaced trivial Phi node: let b2#1: uint64 = φ(b2#0 <- block@1, b2#0 <- block@2) (b2#1) with b2#0 in current definition for 1 blocks
debug: Created Phi assignment: let b#1: uint64 = undefined while trying to resolve 'b' in block@3
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@1) in block@1
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@1, b#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let b#1: uint64 = φ(b#0 <- block@1, b#0 <- block@2) (b#1) with b#0
debug: Deleting Phi assignment: let b#1: uint64 = φ(b#0 <- block@1, b#0 <- block@2)
debug: Replaced trivial Phi node: let b#1: uint64 = φ(b#0 <- block@1, b#0 <- block@2) (b#1) with b#0 in current definition for 1 blocks
debug: Created Phi assignment: let cd.0#1: uint64 = undefined while trying to resolve 'cd.0' in block@3
debug: Added cd.0#0 to Phi node: let cd.0#1: uint64 = φ(cd.0#0 <- block@1) in block@1
debug: Added cd.0#0 to Phi node: let cd.0#1: uint64 = φ(cd.0#0 <- block@1, cd.0#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let cd.0#1: uint64 = φ(cd.0#0 <- block@1, cd.0#0 <- block@2) (cd.0#1) with cd.0#0
debug: Deleting Phi assignment: let cd.0#1: uint64 = φ(cd.0#0 <- block@1, cd.0#0 <- block@2)
debug: Replaced trivial Phi node: let cd.0#1: uint64 = φ(cd.0#0 <- block@1, cd.0#0 <- block@2) (cd.0#1) with cd.0#0 in current definition for 1 blocks
debug: Created Phi assignment: let cd.1#1: uint64 = undefined while trying to resolve 'cd.1' in block@3
debug: Added cd.1#0 to Phi node: let cd.1#1: uint64 = φ(cd.1#0 <- block@1) in block@1
debug: Added cd.1#0 to Phi node: let cd.1#1: uint64 = φ(cd.1#0 <- block@1, cd.1#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let cd.1#1: uint64 = φ(cd.1#0 <- block@1, cd.1#0 <- block@2) (cd.1#1) with cd.1#0
debug: Deleting Phi assignment: let cd.1#1: uint64 = φ(cd.1#0 <- block@1, cd.1#0 <- block@2)
debug: Replaced trivial Phi node: let cd.1#1: uint64 = φ(cd.1#0 <- block@1, cd.1#0 <- block@2) (cd.1#1) with cd.1#0 in current definition for 1 blocks
debug: Created Phi assignment: let tup.0#2: uint64 = undefined while trying to resolve 'tup.0' in block@3
debug: Added tup.0#0 to Phi node: let tup.0#2: uint64 = φ(tup.0#0 <- block@1) in block@1
debug: Added tup.0#1 to Phi node: let tup.0#2: uint64 = φ(tup.0#0 <- block@1, tup.0#1 <- block@2) in block@2
debug: Created Phi assignment: let tup.1#2: uint64 = undefined while trying to resolve 'tup.1' in block@3
debug: Added tup.1#0 to Phi node: let tup.1#2: uint64 = φ(tup.1#0 <- block@1) in block@1
debug: Added tup.1#1 to Phi node: let tup.1#2: uint64 = φ(tup.1#0 <- block@1, tup.1#1 <- block@2) in block@2
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let ternary_result%0.0#2: uint64 = undefined while trying to resolve 'ternary_result%0.0' in block@6
debug: Added ternary_result%0.0#0 to Phi node: let ternary_result%0.0#2: uint64 = φ(ternary_result%0.0#0 <- block@4) in block@4
debug: Added ternary_result%0.0#1 to Phi node: let ternary_result%0.0#2: uint64 = φ(ternary_result%0.0#0 <- block@4, ternary_result%0.0#1 <- block@5) in block@5
debug: Created Phi assignment: let ternary_result%0.1#2: uint64 = undefined while trying to resolve 'ternary_result%0.1' in block@6
debug: Added ternary_result%0.1#0 to Phi node: let ternary_result%0.1#2: uint64 = φ(ternary_result%0.1#0 <- block@4) in block@4
debug: Added ternary_result%0.1#1 to Phi node: let ternary_result%0.1#2: uint64 = φ(ternary_result%0.1#0 <- block@4, ternary_result%0.1#1 <- block@5) in block@5
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@6
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#0 <- block@4) in block@4
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#0 <- block@4, a#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let a#2: uint64 = φ(a#0 <- block@4, a#0 <- block@5) (a#2) with a#0
debug: Deleting Phi assignment: let a#2: uint64 = φ(a#0 <- block@4, a#0 <- block@5)
debug: Replaced trivial Phi node: let a#2: uint64 = φ(a#0 <- block@4, a#0 <- block@5) (a#2) with a#0 in current definition for 1 blocks
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@6
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@4) in block@4
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@4, b#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let b#2: uint64 = φ(b#0 <- block@4, b#0 <- block@5) (b#2) with b#0
debug: Deleting Phi assignment: let b#2: uint64 = φ(b#0 <- block@4, b#0 <- block@5)
debug: Replaced trivial Phi node: let b#2: uint64 = φ(b#0 <- block@4, b#0 <- block@5) (b#2) with b#0 in current definition for 1 blocks
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@10
debug: Created Phi assignment: let a#4: uint64 = undefined while trying to resolve 'a' in block@8
debug: Added a#0 to Phi node: let a#4: uint64 = φ(a#0 <- block@6) in block@6
debug: Added a#0 to Phi node: let a#4: uint64 = φ(a#0 <- block@6, a#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let a#4: uint64 = φ(a#0 <- block@6, a#0 <- block@7) (a#4) with a#0
debug: Deleting Phi assignment: let a#4: uint64 = φ(a#0 <- block@6, a#0 <- block@7)
debug: Replaced trivial Phi node: let a#4: uint64 = φ(a#0 <- block@6, a#0 <- block@7) (a#4) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#3: uint64 = φ(a#0 <- block@8) in block@8
debug: Added a#0 to Phi node: let a#3: uint64 = φ(a#0 <- block@8, a#0 <- block@9) in block@9
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#0 <- block@8, a#0 <- block@9) (a#3) with a#0
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#0 <- block@8, a#0 <- block@9)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#0 <- block@8, a#0 <- block@9) (a#3) with a#0 in current definition for 1 blocks
debug: Created Phi assignment: let b#3: uint64 = undefined while trying to resolve 'b' in block@10
debug: Created Phi assignment: let b#4: uint64 = undefined while trying to resolve 'b' in block@8
debug: Added b#0 to Phi node: let b#4: uint64 = φ(b#0 <- block@6) in block@6
debug: Added b#0 to Phi node: let b#4: uint64 = φ(b#0 <- block@6, b#0 <- block@7) in block@7
debug: Replacing trivial Phi node: let b#4: uint64 = φ(b#0 <- block@6, b#0 <- block@7) (b#4) with b#0
debug: Deleting Phi assignment: let b#4: uint64 = φ(b#0 <- block@6, b#0 <- block@7)
debug: Replaced trivial Phi node: let b#4: uint64 = φ(b#0 <- block@6, b#0 <- block@7) (b#4) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#3: uint64 = φ(b#0 <- block@8) in block@8
debug: Added b#0 to Phi node: let b#3: uint64 = φ(b#0 <- block@8, b#0 <- block@9) in block@9
debug: Replacing trivial Phi node: let b#3: uint64 = φ(b#0 <- block@8, b#0 <- block@9) (b#3) with b#0
debug: Deleting Phi assignment: let b#3: uint64 = φ(b#0 <- block@8, b#0 <- block@9)
debug: Replaced trivial Phi node: let b#3: uint64 = φ(b#0 <- block@8, b#0 <- block@9) (b#3) with b#0 in current definition for 1 blocks
debug: Terminated block@10
debug: Building IR for function test_cases.tuple_support.tuple_support.TupleSupport.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.log_and_return
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_rearrange
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_swap
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_intrinsics
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_singles
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_iteration
debug: removing unused subroutine test_cases.tuple_support.tuple_support.TupleSupport.__puya_arc4_router__
debug: removing unused subroutine test_cases.tuple_support.tuple_support.TupleSupport.clear_state_program
debug: Building IR for function test_cases.tuple_support.tuple_support.TupleSupport.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.tuple_support.tuple_support.get_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.single_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.get_uint_with_side_effect
debug: removing unused subroutine test_cases.tuple_support.tuple_support.non_empty_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bin_ops
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bytes_combine
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bytes_multiply
debug: removing unused subroutine test_cases.tuple_support.tuple_support.add_three_values
debug: removing unused subroutine test_cases.tuple_support.tuple_support.addw2
debug: removing unused subroutine test_cases.tuple_support.tuple_support.test_tuple_swap
debug: removing unused subroutine test_cases.tuple_support.tuple_support.slicing
debug: removing unused subroutine test_cases.tuple_support.tuple_support.test_empty
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.log_and_return
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_rearrange
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_swap
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_intrinsics
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_singles
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_iteration
debug: removing unused subroutine test_cases.tuple_support.tuple_support.TupleSupport.__puya_arc4_router__
debug: removing unused subroutine test_cases.tuple_support.tuple_support.TupleSupport.__init__
debug: removing unused subroutine test_cases.tuple_support.tuple_support.TupleSupport.approval_program
debug: removing unused subroutine test_cases.tuple_support.tuple_support.TupleSupport.clear_state_program
debug: Building IR for function test_cases.tuple_support.tuple_comparisons.TupleComparisons.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_comparisons.TupleComparisons.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.tuple_support.tuple_support.get_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.single_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.get_uint_with_side_effect
debug: removing unused subroutine test_cases.tuple_support.tuple_support.non_empty_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bin_ops
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bytes_combine
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bytes_multiply
debug: removing unused subroutine test_cases.tuple_support.tuple_support.add_three_values
debug: removing unused subroutine test_cases.tuple_support.tuple_support.addw2
debug: removing unused subroutine test_cases.tuple_support.tuple_support.test_tuple_swap
debug: removing unused subroutine test_cases.tuple_support.tuple_support.slicing
debug: removing unused subroutine test_cases.tuple_support.tuple_support.test_empty
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_rearrange
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_swap
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_intrinsics
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_singles
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_iteration
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.__puya_arc4_router__
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.clear_state_program
debug: Building IR for function test_cases.tuple_support.tuple_comparisons.TupleComparisons.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.tuple_support.tuple_support.get_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.single_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.get_uint_with_side_effect
debug: removing unused subroutine test_cases.tuple_support.tuple_support.non_empty_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bin_ops
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bytes_combine
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bytes_multiply
debug: removing unused subroutine test_cases.tuple_support.tuple_support.add_three_values
debug: removing unused subroutine test_cases.tuple_support.tuple_support.addw2
debug: removing unused subroutine test_cases.tuple_support.tuple_support.test_tuple_swap
debug: removing unused subroutine test_cases.tuple_support.tuple_support.slicing
debug: removing unused subroutine test_cases.tuple_support.tuple_support.test_empty
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.log_and_return
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_rearrange
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_swap
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_intrinsics
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_singles
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_iteration
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.__puya_arc4_router__
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.clear_state_program
debug: Building IR for function test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Building IR for function test_cases.tuple_support.nested_tuples.NestedTuples.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
debug: Sealing block@0
tuple_support/nested_tuples.py:44:24 debug: encountered already materialized expression (y), reusing result: (y.0#0, y.1.0#0, y.1.1#0)
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.NestedTuples.build_nested
debug: Sealing block@0
tuple_support/nested_tuples.py:70:9 debug: encountered already materialized expression ('build_nested_call_count'), reusing result: "build_nested_call_count"
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Created Phi assignment: let ternary_result%0.0.0#2: bytes = undefined while trying to resolve 'ternary_result%0.0.0' in block@3
debug: Added ternary_result%0.0.0#0 to Phi node: let ternary_result%0.0.0#2: bytes = φ(ternary_result%0.0.0#0 <- block@1) in block@1
debug: Added ternary_result%0.0.0#1 to Phi node: let ternary_result%0.0.0#2: bytes = φ(ternary_result%0.0.0#0 <- block@1, ternary_result%0.0.0#1 <- block@2) in block@2
debug: Created Phi assignment: let ternary_result%0.0.1#2: uint64 = undefined while trying to resolve 'ternary_result%0.0.1' in block@3
debug: Added ternary_result%0.0.1#0 to Phi node: let ternary_result%0.0.1#2: uint64 = φ(ternary_result%0.0.1#0 <- block@1) in block@1
debug: Added ternary_result%0.0.1#1 to Phi node: let ternary_result%0.0.1#2: uint64 = φ(ternary_result%0.0.1#0 <- block@1, ternary_result%0.0.1#1 <- block@2) in block@2
debug: Created Phi assignment: let ternary_result%0.1#2: bytes = undefined while trying to resolve 'ternary_result%0.1' in block@3
debug: Added ternary_result%0.1#0 to Phi node: let ternary_result%0.1#2: bytes = φ(ternary_result%0.1#0 <- block@1) in block@1
debug: Added ternary_result%0.1#1 to Phi node: let ternary_result%0.1#2: bytes = φ(ternary_result%0.1#0 <- block@1, ternary_result%0.1#1 <- block@2) in block@2
debug: Terminated block@3
debug: Building IR for function test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy.arc4.ARC4Contract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy.arc4.ARC4Contract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.tuple_support.tuple_support.get_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.single_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.get_uint_with_side_effect
debug: removing unused subroutine test_cases.tuple_support.tuple_support.non_empty_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bin_ops
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bytes_combine
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bytes_multiply
debug: removing unused subroutine test_cases.tuple_support.tuple_support.add_three_values
debug: removing unused subroutine test_cases.tuple_support.tuple_support.addw2
debug: removing unused subroutine test_cases.tuple_support.tuple_support.test_tuple_swap
debug: removing unused subroutine test_cases.tuple_support.tuple_support.slicing
debug: removing unused subroutine test_cases.tuple_support.tuple_support.test_empty
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.log_and_return
debug: removing unused subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: Building IR for function algopy.arc4.ARC4Contract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.tuple_support.tuple_support.get_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.single_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.get_uint_with_side_effect
debug: removing unused subroutine test_cases.tuple_support.tuple_support.non_empty_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bin_ops
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bytes_combine
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bytes_multiply
debug: removing unused subroutine test_cases.tuple_support.tuple_support.add_three_values
debug: removing unused subroutine test_cases.tuple_support.tuple_support.addw2
debug: removing unused subroutine test_cases.tuple_support.tuple_support.test_tuple_swap
debug: removing unused subroutine test_cases.tuple_support.tuple_support.slicing
debug: removing unused subroutine test_cases.tuple_support.tuple_support.test_empty
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.log_and_return
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_rearrange
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_swap
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_intrinsics
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_singles
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_iteration
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__init__
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.build_nested
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create
debug: removing unused subroutine algopy.arc4.ARC4Contract.approval_program
debug: removing unused subroutine algopy.arc4.ARC4Contract.clear_state_program
info: optimizing approval program of test_cases.tuple_support.tuple_support.TupleSupport at level 2
debug: Begin optimization pass 1/100
debug: marking trivial method test_cases.tuple_support.tuple_support.get_tuple as inlineable
debug: marking single-use function test_cases.tuple_support.tuple_support.single_tuple for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.get_uint_with_side_effect for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.non_empty_tuple for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.bin_ops for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.bytes_combine for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.bytes_multiply for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.addw2 for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.test_tuple_swap for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.slicing for inlining
debug: marking trivial method test_cases.tuple_support.tuple_support.test_empty as inlineable
debug: marking single-use function test_cases.tuple_support.tuple_support.TupleSupport.__init__ for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.TupleSupport.approval_program for inlining
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: inlining call to test_cases.tuple_support.tuple_support.TupleSupport.approval_program in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
debug: inlining call to test_cases.tuple_support.tuple_support.TupleSupport.__init__ in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%0#0, did_overflow#0
debug: Found equivalence set: awst_tmp%0#0, ternary_result%0.0#0
debug: Found equivalence set: awst_tmp%1#0, ternary_result%0.1#0
debug: Found equivalence set: ternary_result%0.0#2, m#0
debug: Found equivalence set: ternary_result%0.1#2, n#0
debug: Found equivalence set: tuple_assignment%2#0, hi#0
debug: Found equivalence set: tuple_assignment%3#0, mid#0
debug: Found equivalence set: tuple_assignment%4#0, lo#0
debug: Found equivalence set: tmp%30#0, tmp%1#0
debug: Copy propagation made 9 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify 1 addw 2
debug: Simplified (== did_overflow#0 0u) to (! did_overflow#0)
debug: Simplified (== 2u 2u) to 1u
debug: Don't know how to simplify 1 addw 2
debug: Simplified (== result.0#0 0u) to (! result.0#0)
debug: Simplified (== 1u 2u) to 0u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== awst_tmp%0#0 awst_tmp%0#0) to 1u
debug: Simplified (== awst_tmp%1#0 awst_tmp%1#0) to 1u
debug: Simplified (|| 1u 1u) to 1u
debug: Don't know how to simplify 18446744073709551615 addw 18446744073709551615
debug: Don't know how to simplify 1 addw 2
debug: Simplified (== awst_tmp%2#0 awst_tmp%2#0) to 1u
debug: Simplified (== awst_tmp%3#0 awst_tmp%3#0) to 1u
debug: Simplified (|| 1u 1u) to 1u
debug: Simplified (== awst_tmp%4#0 awst_tmp%4#0) to 1u
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (== 0x 0x) to 1u
debug: Simplified (+ 1u 2u) to 3u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable ab.0#0
debug: Removing unused variable ab.1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable d#0
debug: Removing unused variable c#0
debug: Removing unused variable a2#0
debug: Removing unused variable b2#0
debug: Removing unused variable cd.0#0
debug: Removing unused variable cd.1#0
debug: Removing unused variable ab2.0#0
debug: Removing unused variable ab2.1#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%9#0
debug: Removing unused variable tmp%10#0
debug: Removing unused variable tmp%11#0
debug: Removing unused variable max_uint64#0
debug: Not removing unused assignment since source is not marked as pure: let (awst_tmp%2#0: uint64, awst_tmp%3#0: uint64) = test_cases.tuple_support.tuple_support.non_empty_tuple()
debug: Removing unused variable tmp%24#0
debug: Removing unused variable tmp%25#0
debug: Removing unused variable tmp%26#0
debug: Not removing unused assignment since source is not marked as pure: let awst_tmp%4#0: uint64 = test_cases.tuple_support.tuple_support.get_uint_with_side_effect()
debug: Removing unused variable tmp%27#0
debug: Removing unused variable x.0#0
debug: Removing unused variable x.1#0
debug: Removing unused variable tmp%28#0
debug: Removing unused variable tmp%29#0
debug: Removing unused variable tmp%30#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@3 from goto 0u ? block@4 : block@5 to goto block@5
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@6 from goto 1u ? block@7 : block@8 to goto block@7
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@9 from goto 1u ? block@10 : block@11 to goto block@10
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@11 from goto 1u ? block@12 : block@13 to goto block@12
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@15 with block@1 in block@16
debug: Merged linear block@15 into block@1
debug: Replaced predecessor block@16 with block@1 in block@2
debug: Merged linear block@16 into block@1
debug: Replaced predecessor block@3 with block@2 in block@5
debug: Merged linear block@3 into block@2
debug: Replaced predecessor block@5 with block@2 in block@6
debug: Merged linear block@5 into block@2
debug: Replaced predecessor block@7 with block@6 in block@9
debug: Merged linear block@7 into block@6
debug: Replaced predecessor block@10 with block@9 in block@11
debug: Merged linear block@10 into block@9
debug: Replaced predecessor block@11 with block@9 in block@12
debug: Merged linear block@11 into block@9
debug: Replaced predecessor block@12 with block@9 in block@13
debug: Merged linear block@12 into block@9
debug: Replaced predecessor block@13 with block@9 in block@14
debug: Merged linear block@13 into block@9
debug: Merged linear block@14 into block@9
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@4, block@8
debug: Removed unreachable predecessors from block@6
debug: Removed unreachable predecessors from block@9
debug: Removing unreachable phi arguments: tup.0#0 <- block@4
debug: Replacing trivial Phi node: let tup.0#2: uint64 = φ(tup.0#1 <- block@2) (tup.0#2) with tup.0#1
debug: Deleting Phi assignment: let tup.0#2: uint64 = φ(tup.0#1 <- block@2)
debug: Removing unreachable phi arguments: tup.1#0 <- block@4
debug: Replacing trivial Phi node: let tup.1#2: uint64 = φ(tup.1#1 <- block@2) (tup.1#2) with tup.1#1
debug: Deleting Phi assignment: let tup.1#2: uint64 = φ(tup.1#1 <- block@2)
debug: Removing unreachable phi arguments: ternary_result%0.0#1 <- block@8
debug: Replacing trivial Phi node: let m#0: uint64 = φ(awst_tmp%0#0 <- block@6) (m#0) with awst_tmp%0#0
debug: Deleting Phi assignment: let m#0: uint64 = φ(awst_tmp%0#0 <- block@6)
debug: Removing unreachable phi arguments: ternary_result%0.1#1 <- block@8
debug: Replacing trivial Phi node: let n#0: uint64 = φ(awst_tmp%1#0 <- block@6) (n#0) with awst_tmp%1#0
debug: Deleting Phi assignment: let n#0: uint64 = φ(awst_tmp%1#0 <- block@6)
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let (result.0#0: uint64, result.1#0: uint64) = (addw 1u 2u) with copy of existing registers (Register(source_location=tuple_support/tuple_support.py:12:9-21, ir_type=uint64, name='did_overflow', version=0), Register(source_location=tuple_support/tuple_support.py:12:37-50, ir_type=uint64, name='tuple_assignment%1', version=0))
debug: Replacing redundant declaration let (tmp%18#0: uint64, tmp%19#0: uint64) = (addw 1u 2u) with copy of existing registers (Register(source_location=tuple_support/tuple_support.py:12:9-21, ir_type=uint64, name='did_overflow', version=0), Register(source_location=tuple_support/tuple_support.py:12:37-50, ir_type=uint64, name='tuple_assignment%1', version=0))
debug: Found equivalence set: did_overflow#0, result.0#0, tmp%18#0
debug: Found equivalence set: tuple_assignment%1#0, result.1#0, tmp%19#0
debug: Copy propagation made 5 modifications
debug: Replacing redundant declaration let tmp%3#0: bool = (! did_overflow#0) with copy of existing registers (Register(source_location=tuple_support/tuple_support.py:13:15-31, ir_type=bool, name='tmp%1', version=1),)
debug: Found equivalence set: tmp%1#1, tmp%3#0
debug: Copy propagation made 1 modifications
debug: Removing redundant assert of tmp%1#1
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.get_tuple
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.single_tuple
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 1u 1u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tup.0#0
debug: Removing unused variable tmp%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.get_uint_with_side_effect
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.non_empty_tuple
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.bin_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 0x32 0x32) to 1u
debug: Simplified (== 3u 3u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable a.0#0
debug: Removing unused variable a.1#0
debug: Removing unused variable a.2#0
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tup.0#0
debug: Removing unused variable tup.1#0
debug: Removing unused variable b.0#0
debug: Removing unused variable b.1#0
debug: Removing unused variable b.2#0
debug: Removing unused variable b.3#0
debug: Removing unused variable b.4#0
debug: Removing unused variable b.5#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable c.0#0
debug: Removing unused variable c.1#0
debug: Removing unused variable c.2#0
debug: Removing unused variable tmp%9#0
debug: Removing unused variable tmp%10#0
debug: Removing unused variable tmp%11#0
debug: Removing unused variable d.0#0
debug: Removing unused variable d.1#0
debug: Removing unused variable d.2#0
debug: Removing unused variable d.3#0
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%13#0
debug: Removing unused variable tmp%14#0
debug: Removing unused variable tmp%15#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.bytes_combine
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: arg.0#0, a#0
debug: Found equivalence set: arg.1#0, b#0
debug: Copy propagation made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.bytes_multiply
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: arg.0#0, b#0
debug: Found equivalence set: arg.1#0, count#0
debug: Copy propagation made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3 with block@2 in block@1
debug: Merged linear block@3 into block@2
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.add_three_values
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: values.0#0, value#0
debug: Found equivalence set: values.1#0, value#2
debug: Found equivalence set: values.2#0, value#3
debug: Copy propagation made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2 with block@1 in block@3
debug: Replaced predecessor block@2 with block@1 in block@4
debug: Replaced predecessor block@2 with block@1 in block@5
debug: Merged linear block@2 into block@1
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.addw2
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: a.0#0, a_hi#0
debug: Found equivalence set: a.1#0, a_lo#0
debug: Found equivalence set: b.0#0, b_hi#0
debug: Found equivalence set: b.1#0, b_lo#0
debug: Found equivalence set: tuple_assignment%0#0, lo_carry#0
debug: Found equivalence set: tuple_assignment%1#0, c_lo#0
debug: Found equivalence set: tuple_assignment%2#0, hi_carry1#0
debug: Found equivalence set: tuple_assignment%3#0, c_mid#0
debug: Found equivalence set: tuple_assignment%4#0, hi_carry2#0
debug: Found equivalence set: tuple_assignment%5#0, c_mid#1
debug: Found equivalence set: tuple_assignment%6#0, did_overflow#0
debug: Found equivalence set: tuple_assignment%7#0, c_hi#0
debug: Copy propagation made 12 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== did_overflow#0 0u) to (! did_overflow#0)
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.test_tuple_swap
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: b#0, a#1
debug: Found equivalence set: a#0, b#1
debug: Copy propagation made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.slicing
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: values.0#0, one_to_three.0#0
debug: Found equivalence set: values.1#0, one_to_three.1#0
debug: Found equivalence set: values.2#0, one_to_three.2#0
debug: Copy propagation made 11 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== values.1#0 values.1#0) to 1u
debug: Simplified (== values.0#0 values.0#0) to 1u
debug: Simplified (== values.1#0 values.1#0) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== values.2#0 values.2#0) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%9#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.test_empty
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.TupleSupport.__init__
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.TupleSupport.approval_program
debug: Optimizer: Perform Subroutine Inlining
tuple_support/tuple_support.py:59:9 debug: inlining call to test_cases.tuple_support.tuple_support.single_tuple in test_cases.tuple_support.tuple_support.TupleSupport.approval_program
tuple_support/tuple_support.py:64:9 debug: inlining call to test_cases.tuple_support.tuple_support.test_empty in test_cases.tuple_support.tuple_support.TupleSupport.approval_program
tuple_support/tuple_support.py:57:13 debug: inlining call to test_cases.tuple_support.tuple_support.get_uint_with_side_effect in test_cases.tuple_support.tuple_support.TupleSupport.approval_program
tuple_support/tuple_support.py:34:13 debug: inlining call to test_cases.tuple_support.tuple_support.bytes_combine in test_cases.tuple_support.tuple_support.TupleSupport.approval_program
tuple_support/tuple_support.py:36:23 debug: inlining call to test_cases.tuple_support.tuple_support.addw2 in test_cases.tuple_support.tuple_support.TupleSupport.approval_program
tuple_support/tuple_support.py:40:13 debug: inlining call to test_cases.tuple_support.tuple_support.bytes_multiply in test_cases.tuple_support.tuple_support.TupleSupport.approval_program
tuple_support/tuple_support.py:41:9 debug: inlining call to test_cases.tuple_support.tuple_support.test_tuple_swap in test_cases.tuple_support.tuple_support.TupleSupport.approval_program
tuple_support/tuple_support.py:42:9 debug: inlining call to test_cases.tuple_support.tuple_support.slicing in test_cases.tuple_support.tuple_support.TupleSupport.approval_program
tuple_support/tuple_support.py:54:9 debug: inlining call to test_cases.tuple_support.tuple_support.bin_ops in test_cases.tuple_support.tuple_support.TupleSupport.approval_program
tuple_support/tuple_support.py:55:12 debug: inlining call to test_cases.tuple_support.tuple_support.non_empty_tuple in test_cases.tuple_support.tuple_support.TupleSupport.approval_program
tuple_support/tuple_support.py:29:37 debug: inlining call to test_cases.tuple_support.tuple_support.get_tuple in test_cases.tuple_support.tuple_support.TupleSupport.approval_program
tuple_support/tuple_support.py:29:18 debug: inlining call to test_cases.tuple_support.tuple_support.get_tuple in test_cases.tuple_support.tuple_support.TupleSupport.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%0#0, did_overflow#0
debug: Found equivalence set: ternary_result%0.0#2, m#0
debug: Found equivalence set: ternary_result%0.1#2, n#0
debug: Found equivalence set: result#0, tmp%15#0
debug: Found equivalence set: tmp%16#0, a.0#0
debug: Found equivalence set: tmp%17#0, a.1#0
debug: Found equivalence set: tmp%18#0, b.0#0
debug: Found equivalence set: tmp%19#0, b.1#0
debug: Found equivalence set: c_hi#0, tuple_assignment%2#0, hi#0
debug: Found equivalence set: c_mid#1, tuple_assignment%3#0, mid#0
debug: Found equivalence set: c_lo#0, tuple_assignment%4#0, lo#0
debug: Found equivalence set: result#2, tmp%23#0
debug: Copy propagation made 12 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify 1 addw 2
debug: Simplified (== did_overflow#0 0u) to (! did_overflow#0)
debug: Simplified (== 2u 2u) to 1u
debug: Don't know how to simplify 1 addw 2
debug: Simplified (== result.0#0 0u) to (! result.0#0)
debug: Simplified (== 1u 2u) to 0u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (|| 1u 1u) to 1u
debug: Simplified (concat 0x48656c6c6f2c20 0x776f726c6421) to 0x48656c6c6f2c20776f726c6421
debug: Don't know how to simplify 18446744073709551615 addw 18446744073709551615
debug: Don't know how to simplify 1 addw 2
debug: Simplified (+ 0u 1u) to 1u
debug: Simplified (+ 0u 2u) to 2u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (+ 1u 2u) to 3u
debug: Simplified (+ 3u 3u) to 6u
debug: Simplified (== 4u 4u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (|| 1u 1u) to 1u
debug: Simplified (== 4u 4u) to 1u
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (== 0x 0x) to 1u
debug: Simplified (+ 1u 2u) to 3u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable ab.0#0
debug: Removing unused variable ab.1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable d#0
debug: Removing unused variable c#0
debug: Removing unused variable a2#0
debug: Removing unused variable b2#0
debug: Removing unused variable cd.0#0
debug: Removing unused variable cd.1#0
debug: Removing unused variable ab2.0#0
debug: Removing unused variable ab2.1#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable a#3
debug: Removing unused variable b#3
debug: Removing unused variable awst_tmp%0#0
debug: Removing unused variable awst_tmp%1#0
debug: Removing unused variable tmp%9#0
debug: Removing unused variable tmp%10#0
debug: Removing unused variable tmp%11#0
debug: Removing unused variable a#2
debug: Removing unused variable b#2
debug: Removing unused variable arg.0#0
debug: Removing unused variable arg.1#0
debug: Removing unused variable result#0
debug: Removing unused variable max_uint64#0
debug: Removing unused variable arg.0#1
debug: Removing unused variable arg.1#1
debug: Removing unused variable zero#0
debug: Removing unused variable a#1
debug: Removing unused variable b#1
debug: Removing unused variable tmp%0#2
debug: Removing unused variable tmp%1#1
debug: Removing unused variable values.0#0
debug: Removing unused variable values.1#0
debug: Removing unused variable values.2#0
debug: Removing unused variable values.3#0
debug: Removing unused variable values.4#0
debug: Removing unused variable values.5#0
debug: Removing unused variable values.6#0
debug: Removing unused variable values.7#0
debug: Removing unused variable tmp%1#2
debug: Removing unused variable tmp%2#1
debug: Removing unused variable awst_tmp%2#0
debug: Removing unused variable awst_tmp%3#0
debug: Removing unused variable tmp%24#0
debug: Removing unused variable tmp%25#0
debug: Removing unused variable tmp%26#0
debug: Removing unused variable awst_tmp%4#0
debug: Removing unused variable tmp%27#0
debug: Removing unused variable x.0#0
debug: Removing unused variable x.1#0
debug: Removing unused variable tmp%28#0
debug: Removing unused variable tmp%29#0
debug: Removing unused variable tmp%30#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0 from goto 0u ? block@1 : block@2 to goto block@2
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@37 from goto 1u ? block@4 : block@5 to goto block@4
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@33 from goto 1u ? block@7 : block@8 to goto block@7
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@16 from goto 1u ? block@9 : block@10 to goto block@9
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2 with block@0 in block@3
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@36 with block@3 in block@37
debug: Merged linear block@36 into block@3
debug: Replaced predecessor block@37 with block@3 in block@4
debug: Merged linear block@37 into block@3
debug: Replaced predecessor block@4 with block@3 in block@6
debug: Merged linear block@4 into block@3
debug: Replaced predecessor block@34 with block@5 in block@35
debug: Merged linear block@34 into block@5
debug: Replaced predecessor block@35 with block@5 in block@6
debug: Merged linear block@35 into block@5
debug: Replaced predecessor block@17 with block@6 in block@18
debug: Merged linear block@17 into block@6
debug: Replaced predecessor block@18 with block@6 in block@19
debug: Merged linear block@18 into block@6
debug: Replaced predecessor block@19 with block@6 in block@20
debug: Merged linear block@19 into block@6
debug: Replaced predecessor block@20 with block@6 in block@21
debug: Merged linear block@20 into block@6
debug: Replaced predecessor block@21 with block@6 in block@22
debug: Merged linear block@21 into block@6
debug: Replaced predecessor block@25 with block@24 in block@26
debug: Merged linear block@25 into block@24
debug: Replaced predecessor block@26 with block@24 in block@27
debug: Merged linear block@26 into block@24
debug: Replaced predecessor block@27 with block@24 in block@28
debug: Merged linear block@27 into block@24
debug: Replaced predecessor block@28 with block@24 in block@29
debug: Merged linear block@28 into block@24
debug: Replaced predecessor block@29 with block@24 in block@30
debug: Merged linear block@29 into block@24
debug: Replaced predecessor block@30 with block@24 in block@31
debug: Merged linear block@30 into block@24
debug: Replaced predecessor block@31 with block@24 in block@32
debug: Merged linear block@31 into block@24
debug: Replaced predecessor block@32 with block@24 in block@33
debug: Merged linear block@32 into block@24
debug: Replaced predecessor block@33 with block@24 in block@7
debug: Merged linear block@33 into block@24
debug: Replaced predecessor block@7 with block@24 in block@8
debug: Merged linear block@7 into block@24
debug: Replaced predecessor block@8 with block@24 in block@15
debug: Merged linear block@8 into block@24
debug: Replaced predecessor block@15 with block@24 in block@16
debug: Merged linear block@15 into block@24
debug: Replaced predecessor block@16 with block@24 in block@9
debug: Merged linear block@16 into block@24
debug: Replaced predecessor block@9 with block@24 in block@10
debug: Merged linear block@9 into block@24
debug: Replaced predecessor block@10 with block@24 in block@11
debug: Merged linear block@10 into block@24
debug: Replaced predecessor block@11 with block@24 in block@12
debug: Merged linear block@11 into block@24
debug: Replaced predecessor block@12 with block@24 in block@13
debug: Merged linear block@12 into block@24
debug: Replaced predecessor block@13 with block@24 in block@14
debug: Merged linear block@13 into block@24
debug: Merged linear block@14 into block@24
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@1, block@5
debug: Removed unreachable predecessors from block@3
debug: Removed unreachable predecessors from block@6
debug: Removing unreachable phi arguments: tup.0#0 <- block@1
debug: Replacing trivial Phi node: let tup.0#2: uint64 = φ(tup.0#1 <- block@0) (tup.0#2) with tup.0#1
debug: Deleting Phi assignment: let tup.0#2: uint64 = φ(tup.0#1 <- block@0)
debug: Removing unreachable phi arguments: tup.1#0 <- block@1
debug: Replacing trivial Phi node: let tup.1#2: uint64 = φ(tup.1#1 <- block@0) (tup.1#2) with tup.1#1
debug: Deleting Phi assignment: let tup.1#2: uint64 = φ(tup.1#1 <- block@0)
debug: Removing unreachable phi arguments: ternary_result%0.0#1 <- block@5
debug: Replacing trivial Phi node: let m#0: uint64 = φ(ternary_result%0.0#0 <- block@3) (m#0) with ternary_result%0.0#0
debug: Deleting Phi assignment: let m#0: uint64 = φ(ternary_result%0.0#0 <- block@3)
debug: Removing unreachable phi arguments: ternary_result%0.1#1 <- block@5
debug: Replacing trivial Phi node: let n#0: uint64 = φ(ternary_result%0.1#0 <- block@3) (n#0) with ternary_result%0.1#0
debug: Deleting Phi assignment: let n#0: uint64 = φ(ternary_result%0.1#0 <- block@3)
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let (result.0#0: uint64, result.1#0: uint64) = (addw 1u 2u) with copy of existing registers (Register(source_location=tuple_support/tuple_support.py:12:9-21, ir_type=uint64, name='did_overflow', version=0), Register(source_location=tuple_support/tuple_support.py:12:37-50, ir_type=uint64, name='tuple_assignment%1', version=0))
debug: Replacing redundant declaration let (b.0#0: uint64, b.1#0: uint64) = (addw 1u 2u) with copy of existing registers (Register(source_location=tuple_support/tuple_support.py:12:9-21, ir_type=uint64, name='did_overflow', version=0), Register(source_location=tuple_support/tuple_support.py:12:37-50, ir_type=uint64, name='tuple_assignment%1', version=0))
debug: Found equivalence set: did_overflow#0, result.0#0, b.0#0
debug: Found equivalence set: tuple_assignment%1#0, result.1#0, b.1#0
debug: Copy propagation made 5 modifications
debug: Replacing redundant declaration let tmp%3#0: bool = (! did_overflow#0) with copy of existing registers (Register(source_location=tuple_support/tuple_support.py:13:15-31, ir_type=bool, name='tmp%1', version=0),)
debug: Found equivalence set: tmp%1#0, tmp%3#0
debug: Copy propagation made 1 modifications
debug: Removing redundant assert of tmp%1#0
debug: removing unused subroutine test_cases.tuple_support.tuple_support.TupleSupport.__init__
debug: removing unused subroutine test_cases.tuple_support.tuple_support.TupleSupport.approval_program
debug: Begin optimization pass 2/100
debug: marking trivial method test_cases.tuple_support.tuple_support.get_tuple as inlineable
debug: marking trivial method test_cases.tuple_support.tuple_support.single_tuple as inlineable
debug: marking single-use function test_cases.tuple_support.tuple_support.get_uint_with_side_effect for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.non_empty_tuple for inlining
debug: marking trivial method test_cases.tuple_support.tuple_support.bin_ops as inlineable
debug: marking single-use function test_cases.tuple_support.tuple_support.bytes_combine for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.bytes_multiply for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.addw2 for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.test_tuple_swap for inlining
debug: marking single-use function test_cases.tuple_support.tuple_support.slicing for inlining
debug: marking trivial method test_cases.tuple_support.tuple_support.test_empty as inlineable
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
tuple_support/tuple_support.py:34:13 debug: inlining call to test_cases.tuple_support.tuple_support.bytes_combine in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
tuple_support/tuple_support.py:36:23 debug: inlining call to test_cases.tuple_support.tuple_support.addw2 in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
tuple_support/tuple_support.py:40:13 debug: inlining call to test_cases.tuple_support.tuple_support.bytes_multiply in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
tuple_support/tuple_support.py:41:9 debug: inlining call to test_cases.tuple_support.tuple_support.test_tuple_swap in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
tuple_support/tuple_support.py:42:9 debug: inlining call to test_cases.tuple_support.tuple_support.slicing in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
tuple_support/tuple_support.py:54:9 debug: inlining call to test_cases.tuple_support.tuple_support.bin_ops in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
tuple_support/tuple_support.py:55:12 debug: inlining call to test_cases.tuple_support.tuple_support.non_empty_tuple in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
tuple_support/tuple_support.py:57:13 debug: inlining call to test_cases.tuple_support.tuple_support.get_uint_with_side_effect in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
tuple_support/tuple_support.py:59:9 debug: inlining call to test_cases.tuple_support.tuple_support.single_tuple in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
tuple_support/tuple_support.py:64:9 debug: inlining call to test_cases.tuple_support.tuple_support.test_empty in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
tuple_support/tuple_support.py:29:18 debug: inlining call to test_cases.tuple_support.tuple_support.get_tuple in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: result#0, tmp%15#0
debug: Found equivalence set: tmp%16#0, a.0#0
debug: Found equivalence set: tmp%17#0, a.1#0
debug: Found equivalence set: did_overflow#0, b.0#0
debug: Found equivalence set: result.1#0, b.1#0
debug: Found equivalence set: c_hi#0, hi#0
debug: Found equivalence set: c_mid#1, mid#0
debug: Found equivalence set: c_lo#0, lo#0
debug: Found equivalence set: result#2, tmp%23#0
debug: Copy propagation made 9 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify 1 addw 2
debug: Simplified (== 3u 3u) to 1u
debug: Simplified (== 3u 3u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (concat 0x48656c6c6f2c20 0x776f726c6421) to 0x48656c6c6f2c20776f726c6421
debug: Don't know how to simplify 18446744073709551615 addw 18446744073709551615
debug: Simplified (+ 0u 1u) to 1u
debug: Simplified (+ 0u 2u) to 2u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (+ 1u 2u) to 3u
debug: Simplified (+ 3u 3u) to 6u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tup.0#1
debug: Removing unused variable tup.1#1
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable a#1
debug: Removing unused variable b#1
debug: Removing unused variable awst_tmp%0#0
debug: Removing unused variable awst_tmp%1#0
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%13#0
debug: Removing unused variable tmp%14#0
debug: Removing unused variable arg.0#0
debug: Removing unused variable arg.1#0
debug: Removing unused variable result#0
debug: Removing unused variable arg.0#1
debug: Removing unused variable arg.1#1
debug: Removing unused variable zero#0
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable tmp%0#3
debug: Removing unused variable tmp%1#2
debug: Removing unused variable values.0#0
debug: Removing unused variable values.1#0
debug: Removing unused variable values.2#0
debug: Removing unused variable values.3#0
debug: Removing unused variable values.4#0
debug: Removing unused variable values.5#0
debug: Removing unused variable values.6#0
debug: Removing unused variable values.7#0
debug: Removing unused variable tmp%1#3
debug: Removing unused variable tmp%2#0
debug: Removing unused variable awst_tmp%2#0
debug: Removing unused variable awst_tmp%3#0
debug: Removing unused variable awst_tmp%4#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@6 with block@2 in block@33
debug: Merged linear block@6 into block@2
debug: Replaced predecessor block@33 with block@2 in block@34
debug: Merged linear block@33 into block@2
debug: Replaced predecessor block@34 with block@2 in block@9
debug: Merged linear block@34 into block@2
debug: Replaced predecessor block@9 with block@2 in block@10
debug: Merged linear block@9 into block@2
debug: Replaced predecessor block@10 with block@2 in block@11
debug: Merged linear block@10 into block@2
debug: Replaced predecessor block@11 with block@2 in block@12
debug: Merged linear block@11 into block@2
debug: Replaced predecessor block@12 with block@2 in block@13
debug: Merged linear block@12 into block@2
debug: Replaced predecessor block@13 with block@2 in block@14
debug: Merged linear block@13 into block@2
debug: Replaced predecessor block@14 with block@2 in block@15
debug: Merged linear block@14 into block@2
debug: Replaced predecessor block@18 with block@17 in block@19
debug: Merged linear block@18 into block@17
debug: Replaced predecessor block@19 with block@17 in block@20
debug: Merged linear block@19 into block@17
debug: Replaced predecessor block@20 with block@17 in block@21
debug: Merged linear block@20 into block@17
debug: Replaced predecessor block@21 with block@17 in block@22
debug: Merged linear block@21 into block@17
debug: Replaced predecessor block@22 with block@17 in block@23
debug: Merged linear block@22 into block@17
debug: Replaced predecessor block@23 with block@17 in block@24
debug: Merged linear block@23 into block@17
debug: Replaced predecessor block@24 with block@17 in block@25
debug: Merged linear block@24 into block@17
debug: Replaced predecessor block@25 with block@17 in block@26
debug: Merged linear block@25 into block@17
debug: Replaced predecessor block@26 with block@17 in block@27
debug: Merged linear block@26 into block@17
debug: Replaced predecessor block@27 with block@17 in block@28
debug: Merged linear block@27 into block@17
debug: Replaced predecessor block@28 with block@17 in block@29
debug: Merged linear block@28 into block@17
debug: Replaced predecessor block@29 with block@17 in block@30
debug: Merged linear block@29 into block@17
debug: Replaced predecessor block@30 with block@17 in block@31
debug: Merged linear block@30 into block@17
debug: Replaced predecessor block@31 with block@17 in block@32
debug: Merged linear block@31 into block@17
debug: Merged linear block@32 into block@17
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.get_tuple
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.single_tuple
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.get_uint_with_side_effect
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.non_empty_tuple
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.bin_ops
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.bytes_combine
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.bytes_multiply
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.add_three_values
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.addw2
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.test_tuple_swap
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.slicing
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.test_empty
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.tuple_support.tuple_support.get_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.single_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.get_uint_with_side_effect
debug: removing unused subroutine test_cases.tuple_support.tuple_support.non_empty_tuple
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bin_ops
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bytes_combine
debug: removing unused subroutine test_cases.tuple_support.tuple_support.bytes_multiply
debug: removing unused subroutine test_cases.tuple_support.tuple_support.addw2
debug: removing unused subroutine test_cases.tuple_support.tuple_support.test_tuple_swap
debug: removing unused subroutine test_cases.tuple_support.tuple_support.slicing
debug: removing unused subroutine test_cases.tuple_support.tuple_support.test_empty
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify 1 addw 2
debug: Don't know how to simplify 18446744073709551615 addw 18446744073709551615
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.add_three_values
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 3, ending loop
debug: Performing SSA IR destructuring for test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init using strategy RootOperandGrouping
debug: Coalescing tmp%0#0 with [tmp%0#2]
debug: Coalescing did_overflow#0 with [did_overflow#1]
debug: Coalescing c_mid#0 with [c_mid#1]
debug: Coalescing result#1 with [result#6, result#2, result#3]
debug: Coalescing _i#0 with [_i#5, _i#1, _i#2]
debug: Coalescing resulted in 22 replacement/s
debug: Sequentializing parallel copies in test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
debug: loc: {_i#0=_i#0, result#1=result#1}
debug: pred: {_i#0=_i#0, result#1=result#1}
debug: ready: 
debug: to_do: _i#0, result#1
debug: * to_do result#1
debug: * to_do _i#0
debug: loc: {_i#0=_i#0, result#1=result#1}
debug: pred: {_i#0=_i#0, result#1=result#1}
debug: ready: 
debug: to_do: _i#0, result#1
debug: * to_do result#1
debug: * to_do _i#0
debug: loc: {_i#0=_i#0, result#1=result#1}
debug: pred: {_i#0=_i#0, result#1=result#1}
debug: ready: 
debug: to_do: _i#0, result#1
debug: * to_do result#1
debug: * to_do _i#0
debug: Performing post-SSA optimizations at level 2
debug: Performing SSA IR destructuring for test_cases.tuple_support.tuple_support.add_three_values
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.tuple_support.tuple_support.add_three_values using strategy RootOperandGrouping
debug: Coalescing total#0 with [total#6, total#1, total#2]
debug: Coalescing loop_counter%0#0 with [loop_counter%0#7, loop_counter%0#1, loop_counter%0#2, loop_counter%0#3]
debug: Coalescing value#1 with [value#2]
debug: Coalescing resulted in 24 replacement/s
debug: Sequentializing parallel copies in test_cases.tuple_support.tuple_support.add_three_values
debug: loc: {loop_counter%0#0=loop_counter%0#0, total#0=total#0, value#1=None, values.0#0=values.0#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, total#0=total#0, value#1=values.0#0}
debug: ready: value#1
debug: to_do: loop_counter%0#0, total#0, value#1
debug: * avail value#1
debug: * avail values.0#0
debug: * to_do value#1
debug: * to_do total#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, total#0=total#0, value#1=value#1}
debug: pred: {loop_counter%0#0=loop_counter%0#0, total#0=total#0, value#1=value#1}
debug: ready: 
debug: to_do: loop_counter%0#0, total#0, value#1
debug: * to_do value#1
debug: * to_do total#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, total#0=total#0, value#1=None, values.1#0=values.1#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, total#0=total#0, value#1=values.1#0}
debug: ready: value#1
debug: to_do: loop_counter%0#0, total#0, value#1
debug: * avail value#1
debug: * avail values.1#0
debug: * to_do value#1
debug: * to_do total#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, total#0=total#0, value#1=None, values.2#0=values.2#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, total#0=total#0, value#1=values.2#0}
debug: ready: value#1
debug: to_do: loop_counter%0#0, total#0, value#1
debug: * avail value#1
debug: * avail values.2#0
debug: * to_do value#1
debug: * to_do total#0
debug: * to_do loop_counter%0#0
debug: Performing post-SSA optimizations at level 2
debug: Output IR to tuple_support/out_O2/TupleSupport.ir/TupleSupport.approval.0.destructured.ir
info: optimizing clear program of test_cases.tuple_support.tuple_support.TupleSupport at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.tuple_support.tuple_support.TupleSupport.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 1, ending loop
debug: Performing SSA IR destructuring for test_cases.tuple_support.tuple_support.TupleSupport.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.tuple_support.tuple_support.TupleSupport.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.tuple_support.tuple_support.TupleSupport.clear_state_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to tuple_support/out_O2/TupleSupport.ir/TupleSupport.clear.0.destructured.ir
debug: Inserted main.ops[1]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[3]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_after_if_else@2.ops[4]: 'l-store-copy total#0 0'
debug: Replaced main_after_if_else@2.ops[6]: 'v-load total#0' with 'l-load total#0'
debug: Inserted main_after_if_else@2.ops[8]: 'l-store-copy tmp%0#1 0'
debug: Replaced main_after_if_else@2.ops[10]: 'v-load tmp%0#1' with 'l-load tmp%0#1'
debug: Inserted main_after_if_else@2.ops[22]: 'l-store-copy tmp%1#1 0'
debug: Replaced main_after_if_else@2.ops[24]: 'v-load tmp%1#1' with 'l-load tmp%1#1'
debug: Inserted main_after_if_else@2.ops[52]: 'l-store-copy did_overflow#0 0'
debug: Replaced main_after_if_else@2.ops[54]: 'v-load did_overflow#0' with 'l-load did_overflow#0'
debug: Inserted main_after_if_else@2.ops[56]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_after_if_else@2.ops[58]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_after_if_else@2.ops[62]: 'l-store-copy tmp%20#0 0'
debug: Replaced main_after_if_else@2.ops[64]: 'v-load tmp%20#0' with 'l-load tmp%20#0'
debug: Inserted main_after_if_else@2.ops[68]: 'l-store-copy tmp%21#0 0'
debug: Replaced main_after_if_else@2.ops[70]: 'v-load tmp%21#0' with 'l-load tmp%21#0'
debug: Inserted main_after_if_else@2.ops[74]: 'l-store-copy tmp%22#0 0'
debug: Replaced main_after_if_else@2.ops[76]: 'v-load tmp%22#0' with 'l-load tmp%22#0'
debug: Inserted main_after_if_else@2.ops[31]: 'l-store-copy a.1#0 1'
debug: Replaced main_after_if_else@2.ops[34]: 'v-load a.1#0' with 'l-load a.1#0'
debug: Inserted main_after_if_else@2.ops[42]: 'l-store-copy c_mid#0 1'
debug: Replaced main_after_if_else@2.ops[45]: 'v-load c_mid#0' with 'l-load c_mid#0'
debug: Inserted main_after_if_else@2.ops[49]: 'l-store-copy hi_carry2#0 0'
debug: Replaced main_after_if_else@2.ops[52]: 'v-load hi_carry2#0' with 'l-load hi_carry2#0'
debug: Inserted main_after_if_else@2.ops[15]: 'l-store-copy result.1#0 1'
debug: Replaced main_after_if_else@2.ops[19]: 'v-load result.1#0' with 'l-load result.1#0'
debug: Inserted main_after_if_else@2.ops[17]: 'l-store-copy did_overflow#0 1'
debug: Replaced main_after_if_else@2.ops[22]: 'v-load did_overflow#0' with 'l-load did_overflow#0'
debug: Inserted main_after_if_else@2.ops[35]: 'l-store-copy a.0#0 1'
debug: Replaced main_after_if_else@2.ops[42]: 'v-load a.0#0' with 'l-load a.0#0'
debug: Inserted main_after_if_else@2.ops[47]: 'l-store-copy hi_carry1#0 1'
debug: Replaced main_after_if_else@2.ops[55]: 'v-load hi_carry1#0' with 'l-load hi_carry1#0'
debug: Inserted main_after_if_else@2.ops[41]: 'l-store-copy lo_carry#0 1'
debug: Replaced main_after_if_else@2.ops[51]: 'v-load lo_carry#0' with 'l-load lo_carry#0'
debug: Inserted main_after_if_else@2.ops[59]: 'l-store-copy c_hi#0 1'
debug: Replaced main_after_if_else@2.ops[69]: 'v-load c_hi#0' with 'l-load c_hi#0'
debug: Inserted main_after_if_else@2.ops[21]: 'l-store-copy result.1#0 2'
debug: Replaced main_after_if_else@2.ops[39]: 'v-load result.1#0' with 'l-load result.1#0'
debug: Inserted main_after_if_else@2.ops[54]: 'l-store-copy c_mid#0 2'
debug: Replaced main_after_if_else@2.ops[77]: 'v-load c_mid#0' with 'l-load c_mid#0'
debug: Inserted main_after_if_else@2.ops[24]: 'l-store-copy did_overflow#0 1'
debug: Replaced main_after_if_else@2.ops[46]: 'v-load did_overflow#0' with 'l-load did_overflow#0'
debug: Inserted main_after_if_else@2.ops[42]: 'l-store-copy c_lo#0 3'
debug: Replaced main_after_if_else@2.ops[85]: 'v-load c_lo#0' with 'l-load c_lo#0'
debug: Inserted main_for_header@15.ops[3]: 'l-store-copy continue_looping%0#0 0'
debug: Replaced main_for_header@15.ops[5]: 'v-load continue_looping%0#0' with 'l-load continue_looping%0#0'
debug: Inserted main_after_for@17.ops[6]: 'l-store-copy tmp%0#4 0'
debug: Replaced main_after_for@17.ops[8]: 'v-load tmp%0#4' with 'l-load tmp%0#4'
debug: Inserted main_after_for@17.ops[11]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_after_for@17.ops[13]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Found 3 edge set/s for test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init
debug: Found 2 edge set/s for test_cases.tuple_support.tuple_support.add_three_values
debug: Allocated 2 variable/s to x-stack: loop_counter%0#0, value#1
debug: shared x-stack for add_three_values -> add_three_values_for_body@1: value#1, loop_counter%0#0
debug: shared x-stack for add_three_values_for_header_1@3 -> add_three_values_for_body@1: value#1, loop_counter%0#0
debug: shared x-stack for add_three_values_for_header_2@4 -> add_three_values_for_body@1: value#1, loop_counter%0#0
debug: test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init f-stack entry: ['result#1', '_i#0']
debug: test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init f-stack on first store: []
debug: test_cases.tuple_support.tuple_support.add_three_values f-stack entry: []
debug: test_cases.tuple_support.tuple_support.add_three_values f-stack on first store: ['total#0']
debug: optimizing TEAL subroutine test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init() -> uint64:
debug: inlining single reference block main_call___init__@1 into main
debug: inlining single reference block main_for_body@16 into main_for_header@15
debug: removing explicit jump to fall-through block main_after_if_else@2
debug: removing explicit jump to fall-through block main_for_header@15
tuple_support/tuple_support.py:138 debug: optimizing TEAL subroutine test_cases.tuple_support.tuple_support.add_three_values(values.0: uint64, values.1: uint64, values.2: uint64) -> uint64:
debug: inlining single reference block add_three_values_after_for@5 into add_three_values_for_body@1
debug: removing explicit jump to fall-through block add_three_values_for_body@1
tuple_support/tuple_support.py:67 debug: optimizing TEAL subroutine test_cases.tuple_support.tuple_support.TupleSupport.clear_state_program() -> uint64:
info: optimizing approval program of test_cases.tuple_support.tuple_comparisons.TupleComparisons at level 2
debug: Begin optimization pass 1/100
debug: marking single-use function test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval for inlining
debug: marking single-use function test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty for inlining
debug: Optimizing subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
debug: Optimizer: Perform Subroutine Inlining
tuple_support/tuple_comparisons.py:6:9 debug: inlining call to test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval in test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
tuple_support/tuple_comparisons.py:7:9 debug: inlining call to test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty in test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (!= "abc" "abc") to 0u
debug: Simplified (== awst_tmp%0#0 awst_tmp%0#0) to 1u
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (== "abc" "abc") to 1u
debug: Simplified (!= awst_tmp%1#0 awst_tmp%1#0) to 0u
debug: Simplified (&& 1u 0u) to 0u
debug: Simplified (! 0u) to 1u
debug: Simplified (!= "abc" "abc") to 0u
debug: Simplified (== awst_tmp%2#0 awst_tmp%2#0) to 1u
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (== "abc" "abc") to 1u
debug: Simplified (!= awst_tmp%3#0 awst_tmp%3#0) to 0u
debug: Simplified (&& 1u 0u) to 0u
debug: Simplified (! 0u) to 1u
debug: Simplified (!= 1u 3u) to 1u
debug: Simplified (== 1u 3u) to 0u
debug: Simplified (&& 0u tmp%18#0) to 0u
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Not removing unused assignment since source is not marked as pure: let awst_tmp%0#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(42u)
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Not removing unused assignment since source is not marked as pure: let awst_tmp%1#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(43u)
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Not removing unused assignment since source is not marked as pure: let awst_tmp%2#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(44u)
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%9#0
debug: Not removing unused assignment since source is not marked as pure: let awst_tmp%3#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(45u)
debug: Removing unused variable tmp%10#0
debug: Removing unused variable tmp#1
debug: Removing unused variable tmp%11#0
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%16#0
debug: Removing unused variable tmp%18#0
debug: Removing unused variable tmp#2
debug: Removing unused variable tmp%19#0
debug: Removing unused variable tmp#3
debug: Removing unused variable tmp%0#1
debug: Removing unused variable tmp#4
debug: Removing unused variable tmp%1#1
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@2 with block@0 in block@3
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@3 with block@0 in block@4
debug: Merged linear block@3 into block@0
debug: Merged linear block@4 into block@0
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (!= "abc" "abc") to 0u
debug: Simplified (== awst_tmp%0#0 awst_tmp%0#0) to 1u
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (== "abc" "abc") to 1u
debug: Simplified (!= awst_tmp%1#0 awst_tmp%1#0) to 0u
debug: Simplified (&& 1u 0u) to 0u
debug: Simplified (! 0u) to 1u
debug: Simplified (!= "abc" "abc") to 0u
debug: Simplified (== awst_tmp%2#0 awst_tmp%2#0) to 1u
debug: Simplified (|| 0u 1u) to 1u
debug: Simplified (== "abc" "abc") to 1u
debug: Simplified (!= awst_tmp%3#0 awst_tmp%3#0) to 0u
debug: Simplified (&& 1u 0u) to 0u
debug: Simplified (! 0u) to 1u
debug: Simplified (!= 1u 3u) to 1u
debug: Simplified (== 1u 3u) to 0u
debug: Simplified (&& 0u tmp%18#0) to 0u
debug: Simplified (! 0u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Not removing unused assignment since source is not marked as pure: let awst_tmp%0#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(42u)
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Not removing unused assignment since source is not marked as pure: let awst_tmp%1#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(43u)
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Not removing unused assignment since source is not marked as pure: let awst_tmp%2#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(44u)
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%9#0
debug: Not removing unused assignment since source is not marked as pure: let awst_tmp%3#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(45u)
debug: Removing unused variable tmp%10#0
debug: Removing unused variable tmp#1
debug: Removing unused variable tmp%11#0
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%16#0
debug: Removing unused variable tmp%18#0
debug: Removing unused variable tmp#2
debug: Removing unused variable tmp%19#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp#0
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp#1
debug: Removing unused variable tmp%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_comparisons.log_and_return
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty
debug: Begin optimization pass 2/100
debug: marking simple function test_cases.tuple_support.tuple_comparisons.log_and_return for inlining (complexity=2 <= threshold=3)
debug: Optimizing subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
debug: Optimizer: Perform Subroutine Inlining
tuple_support/tuple_comparisons.py:18:9 debug: inlining call to test_cases.tuple_support.tuple_comparisons.log_and_return in test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
tuple_support/tuple_comparisons.py:22:9 debug: inlining call to test_cases.tuple_support.tuple_comparisons.log_and_return in test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
tuple_support/tuple_comparisons.py:28:9 debug: inlining call to test_cases.tuple_support.tuple_comparisons.log_and_return in test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
tuple_support/tuple_comparisons.py:32:9 debug: inlining call to test_cases.tuple_support.tuple_comparisons.log_and_return in test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
tuple_support/tuple_comparisons.py:36:50 debug: inlining call to test_cases.tuple_support.tuple_comparisons.log_and_return in test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
tuple_support/tuple_comparisons.py:37:49 debug: inlining call to test_cases.tuple_support.tuple_comparisons.log_and_return in test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (!= 2u 46u) to 1u
debug: Simplified (|| 1u 1u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable val#0
debug: Removing unused variable awst_tmp%0#0
debug: Removing unused variable val#1
debug: Removing unused variable awst_tmp%1#0
debug: Removing unused variable val#2
debug: Removing unused variable awst_tmp%2#0
debug: Removing unused variable val#3
debug: Removing unused variable awst_tmp%3#0
debug: Removing unused variable val#4
debug: Removing unused variable tmp%13#0
debug: Removing unused variable tmp%14#0
debug: Removing unused variable tmp%15#0
debug: Removing unused variable val#5
debug: Removing unused variable tmp%17#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@2 with block@0 in block@3
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@3 with block@0 in block@4
debug: Merged linear block@3 into block@0
debug: Replaced predecessor block@4 with block@0 in block@5
debug: Merged linear block@4 into block@0
debug: Replaced predecessor block@5 with block@0 in block@6
debug: Merged linear block@5 into block@0
debug: Replaced predecessor block@6 with block@0 in block@7
debug: Merged linear block@6 into block@0
debug: Replaced predecessor block@7 with block@0 in block@8
debug: Merged linear block@7 into block@0
debug: Replaced predecessor block@8 with block@0 in block@9
debug: Merged linear block@8 into block@0
debug: Replaced predecessor block@9 with block@0 in block@10
debug: Merged linear block@9 into block@0
debug: Replaced predecessor block@10 with block@0 in block@11
debug: Merged linear block@10 into block@0
debug: Replaced predecessor block@11 with block@0 in block@12
debug: Merged linear block@11 into block@0
debug: Merged linear block@12 into block@0
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.tuple_comparisons.log_and_return
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.tuple_support.tuple_comparisons.log_and_return
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 3, ending loop
debug: Performing SSA IR destructuring for test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program using strategy RootOperandGrouping
debug: Coalescing tmp%0#0 with [tmp%0#1, tmp%0#2, tmp%0#3, tmp%0#4, tmp%0#5]
debug: Coalescing resulted in 10 replacement/s
debug: Sequentializing parallel copies in test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to tuple_support/out_O2/TupleComparisons.ir/TupleComparisons.approval.0.destructured.ir
info: optimizing clear program of test_cases.tuple_support.tuple_comparisons.TupleComparisons at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 1, ending loop
debug: Performing SSA IR destructuring for test_cases.tuple_support.tuple_comparisons.TupleComparisons.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.tuple_support.tuple_comparisons.TupleComparisons.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.tuple_support.tuple_comparisons.TupleComparisons.clear_state_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to tuple_support/out_O2/TupleComparisons.ir/TupleComparisons.clear.0.destructured.ir
debug: Inserted main.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[4]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main.ops[8]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[10]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main.ops[14]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[16]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main.ops[20]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[22]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main.ops[26]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[28]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main.ops[32]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[34]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
tuple_support/tuple_comparisons.py:5 debug: optimizing TEAL subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program() -> uint64:
tuple_support/tuple_comparisons.py:10 debug: optimizing TEAL subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.clear_state_program() -> uint64:
info: optimizing approval program of test_cases.tuple_support.nested_tuples.NestedTuples at level 2
debug: Begin optimization pass 1/100
debug: marking single-use function test_cases.tuple_support.nested_tuples.test_rearrange for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.test_swap for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.test_intrinsics for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.test_nested_slicing for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.test_nested_mutation for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.test_nested_iteration for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.NestedTuples.__init__ for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.NestedTuples.run_tests for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested for inlining
debug: marking single-use function algopy.arc4.ARC4Contract.approval_program for inlining
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: inlining call to algopy.arc4.ARC4Contract.approval_program in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: inlining call to test_cases.tuple_support.nested_tuples.NestedTuples.__init__ in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%0#1, tmp%1#0
debug: Copy propagation made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@5 with block@1 in block@6
debug: Merged linear block@5 into block@1
debug: Replaced predecessor block@6 with block@1 in block@2
debug: Merged linear block@6 into block@1
debug: Replaced predecessor block@3 with block@2 in block@4
debug: Merged linear block@3 into block@2
debug: Merged linear block@4 into block@2
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_rearrange
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: args.0#0, a#0
debug: Found equivalence set: args.1#0, b#0
debug: Found equivalence set: args.2.0#0, c#0
debug: Found equivalence set: args.2.1.0#0, d#0
debug: Found equivalence set: args.2.1.1#0, e#0
debug: Copy propagation made 5 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_swap
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: args.0#0, a#0
debug: Found equivalence set: args.1#0, b#0
debug: Copy propagation made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_intrinsics
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%0#0, nt.1.0#0, x#0
debug: Found equivalence set: tmp%1#0, nt.1.1#0, y#0
debug: Copy propagation made 4 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 42u 42u) to 1u
debug: Simplified (== nt.1.0#0 0u) to (! nt.1.0#0)
debug: Simplified (== nt.1.0#0 0u) to (! nt.1.0#0)
debug: Simplified (== nt.1.0#0 0u) to (! nt.1.0#0)
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable nt.0#0
debug: Removing unused variable nt.2#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%8#0: bool = (! nt.1.0#0) with copy of existing registers (Register(source_location=tuple_support/nested_tuples.py:101:11-36, ir_type=bool, name='tmp%4', version=0),)
debug: Replacing redundant declaration let tmp%9#0: uint64 = (+ num1#0 num2#0) with copy of existing registers (Register(source_location=tuple_support/nested_tuples.py:101:24-35, ir_type=uint64, name='tmp%5', version=0),)
debug: Replacing redundant declaration let tmp%11#0: bool = (! nt.1.0#0) with copy of existing registers (Register(source_location=tuple_support/nested_tuples.py:101:11-36, ir_type=bool, name='tmp%4', version=0),)
debug: Replacing redundant declaration let tmp%12#0: uint64 = (+ num1#0 num2#0) with copy of existing registers (Register(source_location=tuple_support/nested_tuples.py:101:24-35, ir_type=uint64, name='tmp%5', version=0),)
debug: Found equivalence set: tmp%4#0, tmp%8#0, tmp%11#0
debug: Found equivalence set: tmp%5#0, tmp%9#0, tmp%12#0
debug: Copy propagation made 4 modifications
debug: Replacing redundant declaration let tmp%10#0: bool = (== nt.1.1#0 tmp%5#0) with copy of existing registers (Register(source_location=tuple_support/nested_tuples.py:101:11-36, ir_type=bool, name='tmp%6', version=0),)
debug: Removing redundant assert of tmp%4#0
debug: Replacing redundant declaration let tmp%13#0: bool = (== nt.1.1#0 tmp%5#0) with copy of existing registers (Register(source_location=tuple_support/nested_tuples.py:101:11-36, ir_type=bool, name='tmp%6', version=0),)
debug: Found equivalence set: tmp%6#0, tmp%10#0, tmp%13#0
debug: Copy propagation made 2 modifications
debug: Removing redundant assert of tmp%6#0
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 4u 4u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 5u 5u) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== "a" "a") to 1u
debug: Simplified (== "b" "b") to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable nt.0#0
debug: Removing unused variable nt.1#0
debug: Removing unused variable nt.2.0#0
debug: Removing unused variable nt.2.1.0#0
debug: Removing unused variable nt.2.1.1#0
debug: Removing unused variable nt.2.2#0
debug: Removing unused variable nt.3#0
debug: Removing unused variable nt.4#0
debug: Removing unused variable a#0
debug: Removing unused variable b.0#0
debug: Removing unused variable b.1.0#0
debug: Removing unused variable b.1.1#0
debug: Removing unused variable b.2#0
debug: Removing unused variable c#0
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_nested_singles
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: one#0, s.1.0#0, t.0#0
debug: Found equivalence set: s.2.0#2, tmp#0, s2.0#0
debug: Found equivalence set: s.0.0#2, s0.0#0
debug: Found equivalence set: s.1.0#2, s1#0
debug: Copy propagation made 6 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (== one#0 one#0) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (select 0u 3u reassign#0) to (* reassign#0 3u)
debug: Simplified (== one#0 one#0) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%10#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%11#0: uint64 = (select 2u 5u reassign#0) with copy of existing registers (Register(source_location=tuple_support/nested_tuples.py:153:19-39, ir_type=uint64, name='tmp%8', version=0),)
debug: Found equivalence set: tmp%8#0, tmp%11#0
debug: Copy propagation made 1 modifications
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: array_data%0#0, x.0.0#0
debug: Found equivalence set: concat_result%0#0, x.0.0#1
debug: Copy propagation made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x 0x0000000000000000) to 0x0000000000000000
debug: Simplified (concat 0x0001 0x0000000000000000) to 0x00010000000000000000
debug: Simplified ((extract 2 0) 0x00010000000000000000) to 0x0000000000000000
debug: Simplified (concat 0x 0x0000000000000001) to 0x0000000000000001
debug: Simplified (concat 0x0000000000000000 0x0000000000000001) to 0x00000000000000000000000000000001
debug: Simplified (len 0x00000000000000000000000000000001) to 16u
debug: Simplified (/ 16u 8u) to 2u
debug: Simplified ((extract 6 2) as_bytes%0#0) to 0x0002
debug: Simplified (concat 0x0002 0x00000000000000000000000000000001) to 0x000200000000000000000000000000000001
debug: Simplified (extract_uint16 0x000200000000000000000000000000000001 0u) to 2u
debug: Simplified (== 2u 2u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable result%0#0
debug: Removing unused variable x.0.0#0
debug: Removing unused variable expr_value_trimmed%0#0
debug: Removing unused variable data%0#0
debug: Removing unused variable concatenated%0#0
debug: Removing unused variable byte_len%0#0
debug: Removing unused variable len_%0#0
debug: Removing unused variable as_bytes%0#0
debug: Removing unused variable len_16_bit%0#0
debug: Removing unused variable x.0.0#1
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_nested_iteration
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: t.0#1, a#0
debug: Found equivalence set: t.1#1, b#0
debug: Copy propagation made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable x#0
debug: Removing unused variable y#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2 with block@1 in block@3
debug: Replaced predecessor block@2 with block@1 in block@4
debug: Replaced predecessor block@2 with block@1 in block@5
debug: Replaced predecessor block@2 with block@1 in block@6
debug: Merged linear block@2 into block@1
debug: Replaced predecessor block@8 with block@7 in block@9
debug: Replaced predecessor block@8 with block@7 in block@10
debug: Replaced predecessor block@8 with block@7 in block@11
debug: Replaced predecessor block@8 with block@7 in block@12
debug: Merged linear block@8 into block@7
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
debug: Optimizer: Perform Subroutine Inlining
debug: inlining call to test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
tuple_support/nested_tuples.py:63:6 debug: inlining call to test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
tuple_support/nested_tuples.py:58:6 debug: inlining call to test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
tuple_support/nested_tuples.py:51:6 debug: inlining call to test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
tuple_support/nested_tuples.py:22:6 debug: inlining call to test_cases.tuple_support.nested_tuples.NestedTuples.run_tests in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%0#0, a#2
debug: Found equivalence set: tuple_assignment%1#0, b#3
debug: Found equivalence set: tuple_assignment%2#0, c#2
debug: Found equivalence set: tuple_assignment%3#0, d#0
debug: Found equivalence set: tuple_assignment%4#0, e#0
debug: Found equivalence set: item0%0%0#0, args.0#0, s#0, elements_to_encode%1#0
debug: Found equivalence set: item0%1%0#0, args.1.0#0, b#2, elements_to_encode%0#0
debug: Found equivalence set: item0%2%0#0, args.1.1.0#0, u#0, elements_to_encode%2#0
debug: Found equivalence set: item0%3%0#0, args.a#0, a#1, elements_to_encode%3#0
debug: Found equivalence set: item1%2%0#0, args.b#0, b#1, elements_to_encode%4#0
debug: Found equivalence set: item2%0%0#0, args.c#0, c#1, elements_to_encode%5#0
debug: Found equivalence set: item0%4%0#0, args.foo#0, foo#0, elements_to_encode%6#0
debug: Found equivalence set: item1%3#0, args.foo_arc#0, foo_arc#0, elements_to_encode%7#0
debug: Found equivalence set: item0%5%0#0, args.child.a#0, a#0, elements_to_encode%8#0
debug: Found equivalence set: item1%4%0#0, args.child.b#0, b#0, elements_to_encode%9#0
debug: Found equivalence set: item2%2%0#0, args.child.c#0, c#0, elements_to_encode%10#0
debug: Copy propagation made 33 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%3#0 NoOp) to (! tmp%3#0)
debug: Simplified (== "There" "There") to 1u
debug: Simplified (== b#3 0u) to (! b#3)
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== "Hi" "Hi") to 1u
debug: Simplified (== "There" "There") to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (setbit 0x00 0u 1u) to 0x80
debug: Simplified (concat 0x151f7c75 0x80) to 0x151f7c7580
debug: Simplified (== tmp%8#0 NoOp) to (! tmp%8#0)
debug: Simplified ((extract 6 2) as_bytes%2#0) to 0x000a
debug: Simplified (concat 0x 0x000a) to 0x000a
debug: Simplified ((extract 6 2) as_bytes%3#0) to 0x0004
debug: Simplified (concat 0x 0x0004) to 0x0004
debug: Simplified (== tmp%14#0 NoOp) to (! tmp%14#0)
debug: Simplified (concat 0x val_as_bytes%1#0) to val_as_bytes%1#0
debug: Simplified ((extract 6 2) as_bytes%7#0) to 0x000c
debug: Simplified (== tmp%20#0 NoOp) to (! tmp%20#0)
debug: Simplified (concat 0x val_as_bytes%3#0) to val_as_bytes%3#0
debug: Simplified ((extract 6 2) as_bytes%11#0) to 0x000c
debug: Simplified (concat 0x val_as_bytes%2#0) to val_as_bytes%2#0
debug: Simplified ((extract 6 2) as_bytes%13#0) to 0x0012
debug: Simplified (== tmp%27#0 0u) to (! tmp%27#0)
debug: Simplified (extract3 item1%0#0 2u 8u) // on error: Index access is out of bounds to ((extract 2 8) item1%0#0) // on error: Index access is out of bounds
debug: Simplified (extract3 item1%1#0 0u 8u) // on error: Index access is out of bounds to ((extract 0 8) item1%1#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%18#0 0u 8u) // on error: Index access is out of bounds to ((extract 0 8) tmp%18#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%24#0 0u 8u) // on error: Index access is out of bounds to ((extract 0 8) tmp%24#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%24#0 8u 8u) // on error: Index access is out of bounds to ((extract 8 8) tmp%24#0) // on error: Index access is out of bounds
debug: Simplified (extract3 item2%1#0 0u 8u) // on error: Index access is out of bounds to ((extract 0 8) item2%1#0) // on error: Index access is out of bounds
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable x.0#0
debug: Removing unused variable x.1#0
debug: Removing unused variable y.0#0
debug: Removing unused variable y.1.0#0
debug: Removing unused variable y.1.1#0
debug: Removing unused variable z.0#0
debug: Removing unused variable z.1#0
debug: Removing unused variable z.2.0#0
debug: Removing unused variable z.2.1.0#0
debug: Removing unused variable z.2.1.1#0
debug: Removing unused variable z2.0#0
debug: Removing unused variable z2.1.0#0
debug: Removing unused variable z2.1.1#0
debug: Removing unused variable z2_1.0#0
debug: Removing unused variable z2_1.1#0
debug: Removing unused variable _x#0
debug: Removing unused variable z2_1_1#0
debug: Removing unused variable tmp%3#1
debug: Removing unused variable tmp%11#1
debug: Removing unused variable tmp%12#1
debug: Removing unused variable tmp%13#1
debug: Removing unused variable tmp%14#1
debug: Removing unused variable tmp%15#1
debug: Removing unused variable to_encode%0#0
debug: Removing unused variable encoded_bool%0#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%11#0
debug: Removing unused variable current_tail_offset%0#0
debug: Removing unused variable encoded_tuple_buffer%0#0
debug: Removing unused variable as_bytes%2#0
debug: Removing unused variable offset_as_uint16%0#0
debug: Removing unused variable encoded_tuple_buffer%1#0
debug: Removing unused variable current_tail_offset%1#0
debug: Removing unused variable current_tail_offset%2#0
debug: Removing unused variable encoded_tuple_buffer%4#0
debug: Removing unused variable as_bytes%3#0
debug: Removing unused variable offset_as_uint16%1#0
debug: Removing unused variable encoded_tuple_buffer%5#0
debug: Removing unused variable current_tail_offset%4#0
debug: Removing unused variable tmp%17#0
debug: Removing unused variable current_tail_offset%5#0
debug: Removing unused variable encoded_tuple_buffer%9#0
debug: Removing unused variable encoded_tuple_buffer%10#0
debug: Removing unused variable as_bytes%7#0
debug: Removing unused variable offset_as_uint16%3#0
debug: Removing unused variable current_tail_offset%7#0
debug: Removing unused variable tmp%23#0
debug: Removing unused variable current_tail_offset%8#0
debug: Removing unused variable encoded_tuple_buffer%15#0
debug: Removing unused variable encoded_tuple_buffer%16#0
debug: Removing unused variable as_bytes%11#0
debug: Removing unused variable offset_as_uint16%5#0
debug: Removing unused variable current_tail_offset%10#0
debug: Removing unused variable current_tail_offset%11#0
debug: Removing unused variable encoded_tuple_buffer%21#0
debug: Removing unused variable encoded_tuple_buffer%22#0
debug: Removing unused variable as_bytes%13#0
debug: Removing unused variable offset_as_uint16%7#0
debug: Removing unused variable current_tail_offset%12#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying a switch with constants into goto nth
debug: simplified terminator of block@8 from switch tmp%26#0 {0u => block@9, * => block@10} to goto_nth [block@9][tmp%26#0] else goto block@10
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@8 from goto_nth [block@9][tmp%26#0] else goto block@10 to goto tmp%26#0 ? block@10 : block@9
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@21 with block@2 in block@22
debug: Merged linear block@21 into block@2
debug: Merged linear block@22 into block@2
debug: Replaced predecessor block@19 with block@3 in block@20
debug: Merged linear block@19 into block@3
debug: Merged linear block@20 into block@3
debug: Replaced predecessor block@17 with block@4 in block@18
debug: Merged linear block@17 into block@4
debug: Merged linear block@18 into block@4
debug: Replaced predecessor block@15 with block@5 in block@16
debug: Merged linear block@15 into block@5
debug: Merged linear block@16 into block@5
debug: Replaced predecessor block@7 with block@6 in block@12
debug: Merged linear block@7 into block@6
debug: Replaced predecessor block@13 with block@9 in block@14
debug: Merged linear block@13 into block@9
debug: Merged linear block@14 into block@9
debug: Replaced predecessor block@11 with block@10 in block@12
debug: Merged linear block@11 into block@10
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@6
debug: Removed empty block: block@10
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let item_start_offset%1#0: uint64 = (extract_uint16 tmp%12#0 2u) with copy of existing registers (Register(source_location=tuple_support/nested_tuples.py:18, ir_type=uint64, name='item_end_offset%0', version=0),)
debug: Replacing redundant declaration let item_start_offset%4#0: uint64 = (extract_uint16 tmp%18#0 10u) with copy of existing registers (Register(source_location=tuple_support/nested_tuples.py:18, ir_type=uint64, name='item_end_offset%3', version=0),)
debug: Replacing redundant declaration let item_start_offset%7#0: uint64 = (extract_uint16 item2%1#0 10u) with copy of existing registers (Register(source_location=tuple_support/nested_tuples.py:18, ir_type=uint64, name='item_end_offset%6', version=0),)
debug: Found equivalence set: item_end_offset%0#0, item_start_offset%1#0
debug: Found equivalence set: item_end_offset%3#0, item_start_offset%4#0
debug: Found equivalence set: item_end_offset%6#0, item_start_offset%7#0
debug: Copy propagation made 3 modifications
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__init__
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
debug: Optimizer: Perform Subroutine Inlining
tuple_support/nested_tuples.py:25:16 debug: inlining call to test_cases.tuple_support.nested_tuples.test_swap in test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
tuple_support/nested_tuples.py:33:32 debug: inlining call to test_cases.tuple_support.nested_tuples.test_rearrange in test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
tuple_support/nested_tuples.py:38:9 debug: inlining call to test_cases.tuple_support.nested_tuples.test_intrinsics in test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
tuple_support/nested_tuples.py:39:9 debug: inlining call to test_cases.tuple_support.nested_tuples.test_nested_slicing in test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
tuple_support/nested_tuples.py:40:9 debug: constant function call to test_cases.tuple_support.nested_tuples.test_nested_singles in test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
tuple_support/nested_tuples.py:41:9 debug: constant function call to test_cases.tuple_support.nested_tuples.test_nested_singles in test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
tuple_support/nested_tuples.py:42:9 debug: inlining call to test_cases.tuple_support.nested_tuples.test_nested_mutation in test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
tuple_support/nested_tuples.py:46:9 debug: inlining call to test_cases.tuple_support.nested_tuples.test_nested_iteration in test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
tuple_support/nested_tuples.py:48:9 debug: inlining call to test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested in test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: awst_tmp%0#1, ternary_result%0.0.0#0
debug: Found equivalence set: awst_tmp%1#1, ternary_result%0.0.1#0
debug: Found equivalence set: awst_tmp%2#0, ternary_result%0.1#0
debug: Found equivalence set: ternary_result%0.0.0#2, result.0.0#0
debug: Found equivalence set: ternary_result%0.0.1#2, result.0.1#0
debug: Found equivalence set: ternary_result%0.1#2, result.1#0
debug: Copy propagation made 6 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== "There" "There") to 1u
debug: Simplified (== "Hi" "Hi") to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== "There" "There") to 1u
debug: Simplified (== "Hi" "Hi") to 1u
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== "There" "There") to 1u
debug: Don't know how to simplify 1 addw 2
debug: Simplified (+ 1u 2u) to 3u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (* 1u 3u) to 3u
debug: Simplified (select 2u 5u 1u) to 5u
debug: Simplified (select 1u 4u 1u) to 4u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (== s.0.0#5 0u) to (! s.0.0#5)
debug: Simplified (select 2u 5u 0u) to 2u
debug: Simplified (select 1u 4u 0u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== "Hi" "Hi") to 1u
debug: Simplified (== "There" "There") to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== awst_tmp%0#1 awst_tmp%0#1) to 1u
debug: Simplified (== awst_tmp%1#1 awst_tmp%1#1) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== awst_tmp%2#0 awst_tmp%2#0) to 1u
debug: Simplified (|| 1u 1u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable result.0.1#0
debug: Removing unused variable result.1#0
debug: Removing unused variable x.0#0
debug: Removing unused variable x.1#0
debug: Removing unused variable args.0#0
debug: Removing unused variable args.1#0
debug: Removing unused variable awst_tmp%0#0
debug: Removing unused variable awst_tmp%1#0
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable y.0#0
debug: Removing unused variable y.1.0#0
debug: Removing unused variable y.1.1#0
debug: Removing unused variable z.0#0
debug: Removing unused variable z.1#0
debug: Removing unused variable z.2.0#0
debug: Removing unused variable z.2.1.0#0
debug: Removing unused variable z.2.1.1#0
debug: Removing unused variable z2.0#0
debug: Removing unused variable z2.1.0#0
debug: Removing unused variable z2.1.1#0
debug: Removing unused variable z2_1.0#0
debug: Removing unused variable z2_1.1#0
debug: Removing unused variable _x#0
debug: Removing unused variable z2_1_1#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable _a#0
debug: Removing unused variable args.0#1
debug: Removing unused variable args.1#1
debug: Removing unused variable args.2.0#0
debug: Removing unused variable args.2.1.0#0
debug: Removing unused variable args.2.1.1#0
debug: Removing unused variable _b#0
debug: Removing unused variable tuple_assignment%0#0
debug: Removing unused variable tuple_assignment%1#0
debug: Removing unused variable tuple_assignment%2#0
debug: Removing unused variable tuple_assignment%3#0
debug: Removing unused variable tuple_assignment%4#0
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable c#0
debug: Removing unused variable d#0
debug: Removing unused variable e#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%9#0
debug: Removing unused variable tmp%10#0
debug: Removing unused variable num1#0
debug: Removing unused variable num2#0
debug: Removing unused variable tmp%5#1
debug: Removing unused variable reassign#0
debug: Removing unused variable tmp%2#1
debug: Removing unused variable tmp%6#2
debug: Removing unused variable tmp%8#1
debug: Removing unused variable tmp%13#1
debug: Removing unused variable reassign#1
debug: Removing unused variable tmp%2#2
debug: Removing unused variable tmp%6#3
debug: Removing unused variable tmp%8#2
debug: Removing unused variable tmp%13#2
debug: Removing unused variable tmp%11#0
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%13#0
debug: Removing unused variable tmp%14#0
debug: Removing unused variable tmp%15#0
debug: Removing unused variable tmp%0#2
debug: Removing unused variable tmp%1#2
debug: Removing unused variable tmp%2#4
debug: Removing unused variable tmp%3#2
debug: Removing unused variable tmp%4#2
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@9 from goto 1u ? block@10 : block@11 to goto block@10
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@13 from goto 0u ? block@14 : block@15 to goto block@15
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@31 from goto 1u ? block@32 : block@33 to goto block@32
debug: Replacing trivial Phi node: let s.0.0#2: uint64 = φ(s.0.0#1 <- block@10) (s.0.0#2) with s.0.0#1
debug: Deleting Phi assignment: let s.0.0#2: uint64 = φ(s.0.0#1 <- block@10)
debug: Replacing trivial Phi node: let s.1.0#2: uint64 = φ(s.1.0#1 <- block@10) (s.1.0#2) with s.1.0#1
debug: Deleting Phi assignment: let s.1.0#2: uint64 = φ(s.1.0#1 <- block@10)
debug: Replacing trivial Phi node: let s.2.0#2: uint64 = φ(s.2.0#1 <- block@10) (s.2.0#2) with s.2.0#1
debug: Deleting Phi assignment: let s.2.0#2: uint64 = φ(s.2.0#1 <- block@10)
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@2 with block@0 in block@3
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@3 with block@0 in block@4
debug: Merged linear block@3 into block@0
debug: Replaced predecessor block@4 with block@0 in block@5
debug: Merged linear block@4 into block@0
debug: Replaced predecessor block@5 with block@0 in block@6
debug: Merged linear block@5 into block@0
debug: Replaced predecessor block@6 with block@0 in block@7
debug: Merged linear block@6 into block@0
debug: Replaced predecessor block@7 with block@0 in block@8
debug: Merged linear block@7 into block@0
debug: Replaced predecessor block@8 with block@0 in block@9
debug: Merged linear block@8 into block@0
debug: Replaced predecessor block@9 with block@0 in block@10
debug: Merged linear block@9 into block@0
debug: Replaced predecessor block@10 with block@0 in block@11
debug: Merged linear block@10 into block@0
debug: Replaced predecessor block@11 with block@0 in block@12
debug: Merged linear block@11 into block@0
debug: Replaced predecessor block@12 with block@0 in block@13
debug: Merged linear block@12 into block@0
debug: Replaced predecessor block@13 with block@0 in block@15
debug: Merged linear block@13 into block@0
debug: Replaced predecessor block@16 with block@15 in block@17
debug: Merged linear block@16 into block@15
debug: Replaced predecessor block@17 with block@15 in block@18
debug: Merged linear block@17 into block@15
debug: Replaced predecessor block@18 with block@15 in block@19
debug: Merged linear block@18 into block@15
debug: Replaced predecessor block@19 with block@15 in block@20
debug: Merged linear block@19 into block@15
debug: Replaced predecessor block@30 with block@29 in block@31
debug: Merged linear block@30 into block@29
debug: Replaced predecessor block@31 with block@29 in block@32
debug: Merged linear block@31 into block@29
debug: Replaced predecessor block@32 with block@29 in block@34
debug: Merged linear block@32 into block@29
debug: Merged linear block@35 into block@34
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@14, block@33
debug: Removed unreachable predecessors from block@15
debug: Removed unreachable predecessors from block@34
debug: Removing unreachable phi arguments: s.0.0#4 <- block@14
debug: Replacing trivial Phi node: let s.0.0#5: uint64 = φ(s.0.0#3 <- block@0) (s.0.0#5) with s.0.0#3
debug: Deleting Phi assignment: let s.0.0#5: uint64 = φ(s.0.0#3 <- block@0)
debug: Removing unreachable phi arguments: s.1.0#4 <- block@14
debug: Replacing trivial Phi node: let s.1.0#5: uint64 = φ(one#1 <- block@0) (s.1.0#5) with one#1
debug: Deleting Phi assignment: let s.1.0#5: uint64 = φ(one#1 <- block@0)
debug: Removing unreachable phi arguments: s.2.0#4 <- block@14
debug: Replacing trivial Phi node: let s.2.0#5: uint64 = φ(s.2.0#3 <- block@0) (s.2.0#5) with s.2.0#3
debug: Deleting Phi assignment: let s.2.0#5: uint64 = φ(s.2.0#3 <- block@0)
debug: Removing unreachable phi arguments: ternary_result%0.0.0#1 <- block@33
debug: Replacing trivial Phi node: let result.0.0#0: bytes = φ(awst_tmp%0#1 <- block@29) (result.0.0#0) with awst_tmp%0#1
debug: Deleting Phi assignment: let result.0.0#0: bytes = φ(awst_tmp%0#1 <- block@29)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: args.0#0, s#0
debug: Found equivalence set: args.1.0#0, b#0
debug: Found equivalence set: args.1.1.0#0, u#0
debug: Copy propagation made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: args.a#0, a#0
debug: Found equivalence set: args.b#0, b#0
debug: Found equivalence set: args.c#0, c#0
debug: Copy propagation made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: args.foo#0, foo#0
debug: Found equivalence set: args.foo_arc#0, foo_arc#0
debug: Found equivalence set: args.child.a#0, a#0
debug: Found equivalence set: args.child.b#0, b#0
debug: Found equivalence set: args.child.c#0, c#0
debug: Copy propagation made 5 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.build_nested
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: awst_tmp%0#0, ternary_result%0.0.0#0
debug: Found equivalence set: awst_tmp%1#0, ternary_result%0.0.1#0
debug: Found equivalence set: awst_tmp%2#0, ternary_result%0.1#0
debug: Found equivalence set: ternary_result%0.0.0#2, result.0.0#0
debug: Found equivalence set: ternary_result%0.0.1#2, result.0.1#0
debug: Found equivalence set: ternary_result%0.1#2, result.1#0
debug: Copy propagation made 6 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== awst_tmp%0#0 awst_tmp%0#0) to 1u
debug: Simplified (== awst_tmp%1#0 awst_tmp%1#0) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== awst_tmp%2#0 awst_tmp%2#0) to 1u
debug: Simplified (|| 1u 1u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable result.0.1#0
debug: Removing unused variable result.1#0
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%4#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0 from goto 1u ? block@1 : block@2 to goto block@1
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@3
debug: Merged linear block@1 into block@0
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@2
debug: Removed unreachable predecessors from block@3
debug: Removing unreachable phi arguments: ternary_result%0.0.0#1 <- block@2
debug: Replacing trivial Phi node: let result.0.0#0: bytes = φ(awst_tmp%0#0 <- block@0) (result.0.0#0) with awst_tmp%0#0
debug: Deleting Phi assignment: let result.0.0#0: bytes = φ(awst_tmp%0#0 <- block@0)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: inlining call to test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__ in algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable data_length%0#0
debug: Removing unused variable data_length%2#0
debug: Removing unused variable data_length%4#0
debug: Removing unused variable data_length%6#0
debug: Removing unused variable data_length%7#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@7
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__init__
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.run_tests
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create
debug: removing unused subroutine algopy.arc4.ARC4Contract.approval_program
debug: Begin optimization pass 2/100
debug: marking trivial method test_cases.tuple_support.nested_tuples.test_rearrange as inlineable
debug: marking trivial method test_cases.tuple_support.nested_tuples.test_swap as inlineable
debug: marking single-use function test_cases.tuple_support.nested_tuples.test_intrinsics for inlining
debug: marking trivial method test_cases.tuple_support.nested_tuples.test_nested_slicing as inlineable
debug: marking trivial method test_cases.tuple_support.nested_tuples.test_nested_mutation as inlineable
debug: marking single-use function test_cases.tuple_support.nested_tuples.test_nested_iteration for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.NestedTuples.build_nested for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested for inlining
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: inlining call to test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__ in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable data_length%0#0
debug: Removing unused variable data_length%2#0
debug: Removing unused variable data_length%4#0
debug: Removing unused variable data_length%6#0
debug: Removing unused variable data_length%7#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3 with block@2 in block@9
debug: Replaced predecessor block@3 with block@2 in block@4
debug: Merged linear block@3 into block@2
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_rearrange
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_swap
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_intrinsics
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_nested_singles
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_nested_iteration
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
debug: Optimizer: Perform Subroutine Inlining
tuple_support/nested_tuples.py:25:16 debug: inlining call to test_cases.tuple_support.nested_tuples.test_swap in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
tuple_support/nested_tuples.py:33:32 debug: inlining call to test_cases.tuple_support.nested_tuples.test_rearrange in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
tuple_support/nested_tuples.py:38:9 debug: inlining call to test_cases.tuple_support.nested_tuples.test_intrinsics in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
tuple_support/nested_tuples.py:39:9 debug: inlining call to test_cases.tuple_support.nested_tuples.test_nested_slicing in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
tuple_support/nested_tuples.py:40:9 debug: constant function call to test_cases.tuple_support.nested_tuples.test_nested_singles in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
tuple_support/nested_tuples.py:41:9 debug: constant function call to test_cases.tuple_support.nested_tuples.test_nested_singles in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
tuple_support/nested_tuples.py:42:9 debug: inlining call to test_cases.tuple_support.nested_tuples.test_nested_mutation in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
tuple_support/nested_tuples.py:46:9 debug: inlining call to test_cases.tuple_support.nested_tuples.test_nested_iteration in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
tuple_support/nested_tuples.py:48:9 debug: inlining call to test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested in test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== "There" "There") to 1u
debug: Simplified (== "Hi" "Hi") to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== "Hi" "Hi") to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== "There" "There") to 1u
debug: Don't know how to simplify 1 addw 2
debug: Simplified (+ 1u 2u) to 3u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (* 1u 3u) to 3u
debug: Simplified (select 2u 5u 1u) to 5u
debug: Simplified (select 1u 4u 1u) to 4u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (== s.0.0#5 0u) to (! s.0.0#5)
debug: Simplified (select 2u 5u 0u) to 2u
debug: Simplified (select 1u 4u 0u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable args.0#1
debug: Removing unused variable args.1#0
debug: Removing unused variable awst_tmp%0#0
debug: Removing unused variable awst_tmp%1#0
debug: Removing unused variable tmp%0#1
debug: Removing unused variable tmp%1#1
debug: Removing unused variable tmp%2#1
debug: Removing unused variable _a#0
debug: Removing unused variable args.0#2
debug: Removing unused variable args.1#1
debug: Removing unused variable args.2.0#0
debug: Removing unused variable args.2.1.0#0
debug: Removing unused variable args.2.1.1#0
debug: Removing unused variable _b#0
debug: Removing unused variable a#2
debug: Removing unused variable b#3
debug: Removing unused variable c#2
debug: Removing unused variable d#0
debug: Removing unused variable e#0
debug: Removing unused variable tmp%4#1
debug: Removing unused variable tmp%5#1
debug: Removing unused variable tmp%6#1
debug: Removing unused variable tmp%7#1
debug: Removing unused variable tmp%8#1
debug: Removing unused variable tmp%9#1
debug: Removing unused variable tmp%10#1
debug: Removing unused variable num1#0
debug: Removing unused variable num2#0
debug: Removing unused variable tmp%5#2
debug: Removing unused variable reassign#0
debug: Removing unused variable tmp%2#2
debug: Removing unused variable tmp%6#3
debug: Removing unused variable tmp%8#2
debug: Removing unused variable tmp%13#1
debug: Removing unused variable reassign#1
debug: Removing unused variable tmp%2#3
debug: Removing unused variable tmp%6#4
debug: Removing unused variable tmp%8#3
debug: Removing unused variable tmp%13#2
debug: Removing unused variable data_length%0#0
debug: Removing unused variable data_length%2#0
debug: Removing unused variable data_length%4#0
debug: Removing unused variable data_length%6#0
debug: Removing unused variable data_length%7#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@21 from goto 1u ? block@22 : block@23 to goto block@22
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@25 from goto 0u ? block@26 : block@27 to goto block@27
debug: Replacing trivial Phi node: let s.0.0#2: uint64 = φ(s.0.0#1 <- block@22) (s.0.0#2) with s.0.0#1
debug: Deleting Phi assignment: let s.0.0#2: uint64 = φ(s.0.0#1 <- block@22)
debug: Replacing trivial Phi node: let s.1.0#2: uint64 = φ(s.1.0#1 <- block@22) (s.1.0#2) with s.1.0#1
debug: Deleting Phi assignment: let s.1.0#2: uint64 = φ(s.1.0#1 <- block@22)
debug: Replacing trivial Phi node: let s.2.0#2: uint64 = φ(s.2.0#1 <- block@22) (s.2.0#2) with s.2.0#1
debug: Deleting Phi assignment: let s.2.0#2: uint64 = φ(s.2.0#1 <- block@22)
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@13 with block@2 in block@14
debug: Merged linear block@13 into block@2
debug: Replaced predecessor block@14 with block@2 in block@15
debug: Merged linear block@14 into block@2
debug: Replaced predecessor block@15 with block@2 in block@16
debug: Merged linear block@15 into block@2
debug: Replaced predecessor block@16 with block@2 in block@17
debug: Merged linear block@16 into block@2
debug: Replaced predecessor block@17 with block@2 in block@18
debug: Merged linear block@17 into block@2
debug: Replaced predecessor block@18 with block@2 in block@19
debug: Merged linear block@18 into block@2
debug: Replaced predecessor block@19 with block@2 in block@20
debug: Merged linear block@19 into block@2
debug: Replaced predecessor block@20 with block@2 in block@21
debug: Merged linear block@20 into block@2
debug: Replaced predecessor block@21 with block@2 in block@22
debug: Merged linear block@21 into block@2
debug: Replaced predecessor block@22 with block@2 in block@23
debug: Merged linear block@22 into block@2
debug: Replaced predecessor block@23 with block@2 in block@24
debug: Merged linear block@23 into block@2
debug: Replaced predecessor block@24 with block@2 in block@25
debug: Merged linear block@24 into block@2
debug: Replaced predecessor block@25 with block@2 in block@27
debug: Merged linear block@25 into block@2
debug: Replaced predecessor block@28 with block@27 in block@29
debug: Merged linear block@28 into block@27
debug: Replaced predecessor block@29 with block@27 in block@30
debug: Merged linear block@29 into block@27
debug: Replaced predecessor block@30 with block@27 in block@31
debug: Merged linear block@30 into block@27
debug: Replaced predecessor block@31 with block@27 in block@32
debug: Merged linear block@31 into block@27
debug: Replaced predecessor block@42 with block@41 in block@43
debug: Merged linear block@42 into block@41
debug: Replaced predecessor block@43 with block@41 in block@44
debug: Merged linear block@43 into block@41
debug: Replaced predecessor block@44 with block@41 in block@45
debug: Merged linear block@44 into block@41
debug: Merged linear block@45 into block@41
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@26
debug: Removed unreachable predecessors from block@27
debug: Removing unreachable phi arguments: s.0.0#4 <- block@26
debug: Replacing trivial Phi node: let s.0.0#5: uint64 = φ(s.0.0#3 <- block@2) (s.0.0#5) with s.0.0#3
debug: Deleting Phi assignment: let s.0.0#5: uint64 = φ(s.0.0#3 <- block@2)
debug: Removing unreachable phi arguments: s.1.0#4 <- block@26
debug: Replacing trivial Phi node: let s.1.0#5: uint64 = φ(one#1 <- block@2) (s.1.0#5) with one#1
debug: Deleting Phi assignment: let s.1.0#5: uint64 = φ(one#1 <- block@2)
debug: Removing unreachable phi arguments: s.2.0#4 <- block@26
debug: Replacing trivial Phi node: let s.2.0#5: uint64 = φ(s.2.0#3 <- block@2) (s.2.0#5) with s.2.0#3
debug: Deleting Phi assignment: let s.2.0#5: uint64 = φ(s.2.0#3 <- block@2)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.build_nested
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested
debug: Optimizer: Perform Subroutine Inlining
tuple_support/nested_tuples.py:76:18 debug: inlining call to test_cases.tuple_support.nested_tuples.NestedTuples.build_nested in test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== "hi" "hi") to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable awst_tmp%0#0
debug: Removing unused variable awst_tmp%1#0
debug: Removing unused variable awst_tmp%2#0
debug: Removing unused variable tmp%5#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@4 with block@0 in block@5
debug: Merged linear block@4 into block@0
debug: Replaced predecessor block@5 with block@0 in block@3
debug: Merged linear block@5 into block@0
debug: Merged linear block@3 into block@0
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.build_nested
debug: Begin optimization pass 3/100
debug: marking trivial method test_cases.tuple_support.nested_tuples.test_rearrange as inlineable
debug: marking trivial method test_cases.tuple_support.nested_tuples.test_swap as inlineable
debug: marking single-use function test_cases.tuple_support.nested_tuples.test_intrinsics for inlining
debug: marking trivial method test_cases.tuple_support.nested_tuples.test_nested_slicing as inlineable
debug: marking trivial method test_cases.tuple_support.nested_tuples.test_nested_mutation as inlineable
debug: marking single-use function test_cases.tuple_support.nested_tuples.test_nested_iteration for inlining
debug: marking single-use function test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested for inlining
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
tuple_support/nested_tuples.py:25:16 debug: inlining call to test_cases.tuple_support.nested_tuples.test_swap in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
tuple_support/nested_tuples.py:33:32 debug: inlining call to test_cases.tuple_support.nested_tuples.test_rearrange in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
tuple_support/nested_tuples.py:38:9 debug: inlining call to test_cases.tuple_support.nested_tuples.test_intrinsics in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
tuple_support/nested_tuples.py:39:9 debug: inlining call to test_cases.tuple_support.nested_tuples.test_nested_slicing in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
tuple_support/nested_tuples.py:40:9 debug: constant function call to test_cases.tuple_support.nested_tuples.test_nested_singles in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
tuple_support/nested_tuples.py:41:9 debug: constant function call to test_cases.tuple_support.nested_tuples.test_nested_singles in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
tuple_support/nested_tuples.py:42:9 debug: inlining call to test_cases.tuple_support.nested_tuples.test_nested_mutation in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
tuple_support/nested_tuples.py:46:9 debug: inlining call to test_cases.tuple_support.nested_tuples.test_nested_iteration in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
tuple_support/nested_tuples.py:48:9 debug: inlining call to test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== "There" "There") to 1u
debug: Simplified (== "Hi" "Hi") to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== "Hi" "Hi") to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== "There" "There") to 1u
debug: Don't know how to simplify 1 addw 2
debug: Simplified (+ 1u 2u) to 3u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (* 1u 3u) to 3u
debug: Simplified (select 2u 5u 1u) to 5u
debug: Simplified (select 1u 4u 1u) to 4u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (== s.0.0#5 0u) to (! s.0.0#5)
debug: Simplified (select 2u 5u 0u) to 2u
debug: Simplified (select 1u 4u 0u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable args.0#1
debug: Removing unused variable args.1#0
debug: Removing unused variable awst_tmp%0#0
debug: Removing unused variable awst_tmp%1#0
debug: Removing unused variable tmp%0#3
debug: Removing unused variable tmp%1#1
debug: Removing unused variable tmp%2#1
debug: Removing unused variable _a#0
debug: Removing unused variable args.0#2
debug: Removing unused variable args.1#1
debug: Removing unused variable args.2.0#0
debug: Removing unused variable args.2.1.0#0
debug: Removing unused variable args.2.1.1#0
debug: Removing unused variable _b#0
debug: Removing unused variable a#2
debug: Removing unused variable b#3
debug: Removing unused variable c#2
debug: Removing unused variable d#0
debug: Removing unused variable e#0
debug: Removing unused variable tmp%4#1
debug: Removing unused variable tmp%5#1
debug: Removing unused variable tmp%6#1
debug: Removing unused variable tmp%7#1
debug: Removing unused variable tmp%8#1
debug: Removing unused variable tmp%9#1
debug: Removing unused variable tmp%10#1
debug: Removing unused variable num1#0
debug: Removing unused variable num2#0
debug: Removing unused variable tmp%5#2
debug: Removing unused variable reassign#0
debug: Removing unused variable tmp%2#2
debug: Removing unused variable tmp%6#3
debug: Removing unused variable tmp%8#2
debug: Removing unused variable tmp%13#1
debug: Removing unused variable reassign#1
debug: Removing unused variable tmp%2#3
debug: Removing unused variable tmp%6#4
debug: Removing unused variable tmp%8#3
debug: Removing unused variable tmp%13#2
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@21 from goto 1u ? block@22 : block@23 to goto block@22
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@25 from goto 0u ? block@26 : block@27 to goto block@27
debug: Replacing trivial Phi node: let s.0.0#2: uint64 = φ(s.0.0#1 <- block@22) (s.0.0#2) with s.0.0#1
debug: Deleting Phi assignment: let s.0.0#2: uint64 = φ(s.0.0#1 <- block@22)
debug: Replacing trivial Phi node: let s.1.0#2: uint64 = φ(s.1.0#1 <- block@22) (s.1.0#2) with s.1.0#1
debug: Deleting Phi assignment: let s.1.0#2: uint64 = φ(s.1.0#1 <- block@22)
debug: Replacing trivial Phi node: let s.2.0#2: uint64 = φ(s.2.0#1 <- block@22) (s.2.0#2) with s.2.0#1
debug: Deleting Phi assignment: let s.2.0#2: uint64 = φ(s.2.0#1 <- block@22)
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@13 with block@5 in block@14
debug: Merged linear block@13 into block@5
debug: Replaced predecessor block@14 with block@5 in block@15
debug: Merged linear block@14 into block@5
debug: Replaced predecessor block@15 with block@5 in block@16
debug: Merged linear block@15 into block@5
debug: Replaced predecessor block@16 with block@5 in block@17
debug: Merged linear block@16 into block@5
debug: Replaced predecessor block@17 with block@5 in block@18
debug: Merged linear block@17 into block@5
debug: Replaced predecessor block@18 with block@5 in block@19
debug: Merged linear block@18 into block@5
debug: Replaced predecessor block@19 with block@5 in block@20
debug: Merged linear block@19 into block@5
debug: Replaced predecessor block@20 with block@5 in block@21
debug: Merged linear block@20 into block@5
debug: Replaced predecessor block@21 with block@5 in block@22
debug: Merged linear block@21 into block@5
debug: Replaced predecessor block@22 with block@5 in block@23
debug: Merged linear block@22 into block@5
debug: Replaced predecessor block@23 with block@5 in block@24
debug: Merged linear block@23 into block@5
debug: Replaced predecessor block@24 with block@5 in block@25
debug: Merged linear block@24 into block@5
debug: Replaced predecessor block@25 with block@5 in block@27
debug: Merged linear block@25 into block@5
debug: Replaced predecessor block@28 with block@27 in block@29
debug: Merged linear block@28 into block@27
debug: Replaced predecessor block@29 with block@27 in block@30
debug: Merged linear block@29 into block@27
debug: Replaced predecessor block@30 with block@27 in block@31
debug: Merged linear block@30 into block@27
debug: Replaced predecessor block@31 with block@27 in block@32
debug: Merged linear block@31 into block@27
debug: Replaced predecessor block@42 with block@41 in block@43
debug: Merged linear block@42 into block@41
debug: Replaced predecessor block@43 with block@41 in block@44
debug: Merged linear block@43 into block@41
debug: Replaced predecessor block@44 with block@41 in block@12
debug: Merged linear block@44 into block@41
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@26
debug: Removed unreachable predecessors from block@27
debug: Removing unreachable phi arguments: s.0.0#4 <- block@26
debug: Replacing trivial Phi node: let s.0.0#5: uint64 = φ(s.0.0#3 <- block@5) (s.0.0#5) with s.0.0#3
debug: Deleting Phi assignment: let s.0.0#5: uint64 = φ(s.0.0#3 <- block@5)
debug: Removing unreachable phi arguments: s.1.0#4 <- block@26
debug: Replacing trivial Phi node: let s.1.0#5: uint64 = φ(one#1 <- block@5) (s.1.0#5) with one#1
debug: Deleting Phi assignment: let s.1.0#5: uint64 = φ(one#1 <- block@5)
debug: Removing unreachable phi arguments: s.2.0#4 <- block@26
debug: Replacing trivial Phi node: let s.2.0#5: uint64 = φ(s.2.0#3 <- block@5) (s.2.0#5) with s.2.0#3
debug: Deleting Phi assignment: let s.2.0#5: uint64 = φ(s.2.0#3 <- block@5)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_rearrange
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_swap
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_intrinsics
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_nested_singles
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.test_nested_iteration
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_rearrange
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_swap
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_intrinsics
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_singles
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.test_nested_iteration
debug: removing unused subroutine test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify 1 addw 2
debug: Simplified (== 3u 3u) to 1u
debug: Simplified (== 5u 5u) to 1u
debug: Simplified (+ 4u 1u) to 5u
debug: Simplified (== 5u 5u) to 1u
debug: Simplified (== 4u 4u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (+ 1u 1u) to 2u
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable one#0
debug: Removing unused variable s.0.0#0
debug: Removing unused variable s.2.0#0
debug: Removing unused variable s.0.0#1
debug: Removing unused variable s.1.0#1
debug: Removing unused variable s.2.0#1
debug: Removing unused variable tmp%7#3
debug: Removing unused variable tmp%9#2
debug: Removing unused variable s1#1
debug: Removing unused variable tmp%12#1
debug: Removing unused variable tmp%14#1
debug: Removing unused variable one#1
debug: Removing unused variable s.0.0#3
debug: Removing unused variable s.2.0#3
debug: Removing unused variable tmp%7#4
debug: Removing unused variable tmp%9#3
debug: Removing unused variable s1#3
debug: Removing unused variable tmp%12#2
debug: Removing unused variable tmp%14#2
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@27 with block@5 in block@32
debug: Merged linear block@27 into block@5
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Don't know how to simplify 1 addw 2
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 5, ending loop
debug: Performing SSA IR destructuring for test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init using strategy RootOperandGrouping
debug: Coalescing tmp%0#0 with [tmp%0#5, tmp%0#1]
debug: Coalescing tmp%0#2 with [tmp%0#4]
debug: Coalescing tmp%4#0 with [tmp%4#2]
debug: Coalescing tmp%6#2 with [tmp%6#5]
debug: Coalescing total#0 with [total#9, total#1, total#2, total#14, total#3, total#4]
debug: Coalescing loop_counter%0#0 with [loop_counter%0#9, loop_counter%0#1, loop_counter%0#2, loop_counter%0#3, loop_counter%0#4]
debug: Coalescing t.0#0 with [t.0#9, t.0#1, t.0#2, t.0#3, t.0#4]
debug: Coalescing t.1#0 with [t.1#9, t.1#1, t.1#2, t.1#3, t.1#4]
debug: Coalescing loop_counter%1#0 with [loop_counter%1#9, loop_counter%1#1, loop_counter%1#2, loop_counter%1#3, loop_counter%1#4]
debug: Coalescing a#4 with [a#13, a#5, a#6, a#7, a#8]
debug: Coalescing b#5 with [b#14, b#6, b#7, b#8, b#9]
debug: Coalescing maybe_value%0#0 with [maybe_value%0#1]
debug: Coalescing maybe_exists%0#0 with [maybe_exists%0#1]
debug: Coalescing test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0 with [test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#1, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#2, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#3, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#4, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#5]
debug: Coalescing resulted in 132 replacement/s
debug: Sequentializing parallel copies in test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: loc: {loop_counter%0#0=loop_counter%0#0, t.0#0=t.0#0, t.1#0=t.1#0, total#0=total#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, t.0#0=t.0#0, t.1#0=t.1#0, total#0=total#0}
debug: ready: 
debug: to_do: loop_counter%0#0, t.0#0, t.1#0, total#0
debug: * to_do total#0
debug: * to_do t.1#0
debug: * to_do t.0#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, t.0#0=t.0#0, t.1#0=t.1#0, total#0=total#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, t.0#0=t.0#0, t.1#0=t.1#0, total#0=total#0}
debug: ready: 
debug: to_do: loop_counter%0#0, t.0#0, t.1#0, total#0
debug: * to_do total#0
debug: * to_do t.1#0
debug: * to_do t.0#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, t.0#0=t.0#0, t.1#0=t.1#0, total#0=total#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, t.0#0=t.0#0, t.1#0=t.1#0, total#0=total#0}
debug: ready: 
debug: to_do: loop_counter%0#0, t.0#0, t.1#0, total#0
debug: * to_do total#0
debug: * to_do t.1#0
debug: * to_do t.0#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, t.0#0=t.0#0, t.1#0=t.1#0, total#0=total#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, t.0#0=t.0#0, t.1#0=t.1#0, total#0=total#0}
debug: ready: 
debug: to_do: loop_counter%0#0, t.0#0, t.1#0, total#0
debug: * to_do total#0
debug: * to_do t.1#0
debug: * to_do t.0#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, t.0#0=t.0#0, t.1#0=t.1#0, total#0=total#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, t.0#0=t.0#0, t.1#0=t.1#0, total#0=total#0}
debug: ready: 
debug: to_do: loop_counter%0#0, t.0#0, t.1#0, total#0
debug: * to_do total#0
debug: * to_do t.1#0
debug: * to_do t.0#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, total#0=total#0, a#4=a#4, b#5=b#5}
debug: pred: {loop_counter%1#0=loop_counter%1#0, total#0=total#0, a#4=a#4, b#5=b#5}
debug: ready: 
debug: to_do: loop_counter%1#0, total#0, a#4, b#5
debug: * to_do b#5
debug: * to_do a#4
debug: * to_do total#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, total#0=total#0, a#4=a#4, b#5=b#5}
debug: pred: {loop_counter%1#0=loop_counter%1#0, total#0=total#0, a#4=a#4, b#5=b#5}
debug: ready: 
debug: to_do: loop_counter%1#0, total#0, a#4, b#5
debug: * to_do b#5
debug: * to_do a#4
debug: * to_do total#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, total#0=total#0, a#4=a#4, b#5=b#5}
debug: pred: {loop_counter%1#0=loop_counter%1#0, total#0=total#0, a#4=a#4, b#5=b#5}
debug: ready: 
debug: to_do: loop_counter%1#0, total#0, a#4, b#5
debug: * to_do b#5
debug: * to_do a#4
debug: * to_do total#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, total#0=total#0, a#4=a#4, b#5=b#5}
debug: pred: {loop_counter%1#0=loop_counter%1#0, total#0=total#0, a#4=a#4, b#5=b#5}
debug: ready: 
debug: to_do: loop_counter%1#0, total#0, a#4, b#5
debug: * to_do b#5
debug: * to_do a#4
debug: * to_do total#0
debug: * to_do loop_counter%1#0
debug: loc: {loop_counter%1#0=loop_counter%1#0, total#0=total#0, a#4=a#4, b#5=b#5}
debug: pred: {loop_counter%1#0=loop_counter%1#0, total#0=total#0, a#4=a#4, b#5=b#5}
debug: ready: 
debug: to_do: loop_counter%1#0, total#0, a#4, b#5
debug: * to_do b#5
debug: * to_do a#4
debug: * to_do total#0
debug: * to_do loop_counter%1#0
debug: Performing post-SSA optimizations at level 2
debug: Output IR to tuple_support/out_O2/NestedTuples.ir/NestedTuples.approval.0.destructured.ir
info: optimizing clear program of test_cases.tuple_support.nested_tuples.NestedTuples at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 1, ending loop
debug: Performing SSA IR destructuring for algopy.arc4.ARC4Contract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in algopy.arc4.ARC4Contract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in algopy.arc4.ARC4Contract.clear_state_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to tuple_support/out_O2/NestedTuples.ir/NestedTuples.clear.0.destructured.ir
debug: Inserted main.ops[1]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[3]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_after_if_else@2.ops[1]: 'l-store-copy tmp%0#2 0'
debug: Replaced main_after_if_else@2.ops[3]: 'v-load tmp%0#2' with 'l-load tmp%0#2'
debug: Inserted main_abi_routing@4.ops[1]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_abi_routing@4.ops[7]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_run_tests_route@5.ops[1]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_run_tests_route@5.ops[3]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_run_tests_route@5.ops[5]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_run_tests_route@5.ops[7]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_run_tests_route@5.ops[10]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_run_tests_route@5.ops[12]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_run_tests_route@5.ops[18]: 'l-store-copy nt.1.0#0 0'
debug: Replaced main_run_tests_route@5.ops[20]: 'v-load nt.1.0#0' with 'l-load nt.1.0#0'
debug: Inserted main_run_tests_route@5.ops[30]: 'l-store-copy tmp%7#2 0'
debug: Replaced main_run_tests_route@5.ops[32]: 'v-load tmp%7#2' with 'l-load tmp%7#2'
debug: Inserted main_run_tests_route@5.ops[26]: 'l-store-copy tmp%6#2 0'
debug: Replaced main_run_tests_route@5.ops[29]: 'v-load tmp%6#2' with 'l-load tmp%6#2'
debug: Inserted main_run_tests_route@5.ops[17]: 'l-store-copy nt.1.1#0 1'
debug: Replaced main_run_tests_route@5.ops[24]: 'v-load nt.1.1#0' with 'l-load nt.1.1#0'
debug: Inserted main_run_tests_route@5.ops[23]: 'l-store-copy tmp%4#0 1'
debug: Replaced main_run_tests_route@5.ops[30]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_run_tests_route@5.ops[31]: 'l-store-copy tmp%4#0 1'
debug: Replaced main_run_tests_route@5.ops[38]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_run_tests_route@5.ops[33]: 'l-store-copy tmp%6#2 2'
debug: Replaced main_run_tests_route@5.ops[41]: 'v-load tmp%6#2' with 'l-load tmp%6#2'
debug: Inserted main_for_body@32.ops[3]: 'l-store-copy tmp%0#2 0'
debug: Replaced main_for_body@32.ops[6]: 'v-load tmp%0#2' with 'l-load tmp%0#2'
debug: Inserted main_for_body@37.ops[3]: 'l-store-copy tmp%1#2 0'
debug: Replaced main_for_body@37.ops[6]: 'v-load tmp%1#2' with 'l-load tmp%1#2'
debug: Inserted main_after_for@41.ops[3]: 'l-store-copy tmp%2#4 0'
debug: Replaced main_after_for@41.ops[5]: 'v-load tmp%2#4' with 'l-load tmp%2#4'
debug: Inserted main_after_for@41.ops[8]: 'l-store-copy tmp%3#1 0'
debug: Replaced main_after_for@41.ops[10]: 'v-load tmp%3#1' with 'l-load tmp%3#1'
debug: Inserted main_after_for@41.ops[39]: 'l-store-copy tmp%6#2 0'
debug: Replaced main_after_for@41.ops[41]: 'v-load tmp%6#2' with 'l-load tmp%6#2'
debug: Inserted main_after_for@41.ops[46]: 'l-store-copy test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0 0'
debug: Replaced main_after_for@41.ops[48]: 'v-load test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0' with 'l-load test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0'
debug: Inserted main_after_for@41.ops[18]: 'l-store-copy maybe_exists%0#0 1'
debug: Replaced main_after_for@41.ops[21]: 'v-load maybe_exists%0#0' with 'l-load maybe_exists%0#0'
debug: Inserted main_after_for@41.ops[26]: 'l-store-copy new_state_value%0#0 0'
debug: Replaced main_after_for@41.ops[29]: 'v-load new_state_value%0#0' with 'l-load new_state_value%0#0'
debug: Inserted main_after_for@41.ops[34]: 'l-store-copy maybe_exists%0#0 1'
debug: Replaced main_after_for@41.ops[37]: 'v-load maybe_exists%0#0' with 'l-load maybe_exists%0#0'
debug: Inserted main_after_for@41.ops[20]: 'l-store-copy maybe_value%0#0 1'
debug: Replaced main_after_for@41.ops[24]: 'v-load maybe_value%0#0' with 'l-load maybe_value%0#0'
debug: Inserted main_after_for@41.ops[37]: 'l-store-copy maybe_value%0#0 1'
debug: Replaced main_after_for@41.ops[41]: 'v-load maybe_value%0#0' with 'l-load maybe_value%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[1]: 'l-store-copy tmp%8#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[3]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main_nested_tuple_params_route@6.ops[5]: 'l-store-copy tmp%9#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[7]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main_nested_tuple_params_route@6.ops[10]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[12]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_nested_tuple_params_route@6.ops[15]: 'l-store-copy tmp%12#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[17]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main_nested_tuple_params_route@6.ops[29]: 'l-store-copy item0%0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[31]: 'v-load item0%0#0' with 'l-load item0%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[41]: 'l-store-copy item1%0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[43]: 'v-load item1%0#0' with 'l-load item1%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[54]: 'l-store-copy item0%1#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[56]: 'v-load item0%1#0' with 'l-load item0%1#0'
debug: Inserted main_nested_tuple_params_route@6.ops[61]: 'l-store-copy item1%1#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[63]: 'v-load item1%1#0' with 'l-load item1%1#0'
debug: Inserted main_nested_tuple_params_route@6.ops[65]: 'l-store-copy item0%2#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[67]: 'v-load item0%2#0' with 'l-load item0%2#0'
debug: Inserted main_nested_tuple_params_route@6.ops[72]: 'l-store-copy length%0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[74]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[76]: 'l-store-copy as_bytes%0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[78]: 'v-load as_bytes%0#0' with 'l-load as_bytes%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[80]: 'l-store-copy length_uint16%0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[82]: 'v-load length_uint16%0#0' with 'l-load length_uint16%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[88]: 'l-store-copy length%1#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[90]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted main_nested_tuple_params_route@6.ops[92]: 'l-store-copy as_bytes%1#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[94]: 'v-load as_bytes%1#0' with 'l-load as_bytes%1#0'
debug: Inserted main_nested_tuple_params_route@6.ops[96]: 'l-store-copy length_uint16%1#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[98]: 'v-load length_uint16%1#0' with 'l-load length_uint16%1#0'
debug: Inserted main_nested_tuple_params_route@6.ops[108]: 'l-store-copy encoded_tuple_buffer%2#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[110]: 'v-load encoded_tuple_buffer%2#0' with 'l-load encoded_tuple_buffer%2#0'
debug: Inserted main_nested_tuple_params_route@6.ops[120]: 'l-store-copy current_tail_offset%3#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[122]: 'v-load current_tail_offset%3#0' with 'l-load current_tail_offset%3#0'
debug: Inserted main_nested_tuple_params_route@6.ops[124]: 'l-store-copy as_bytes%4#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[126]: 'v-load as_bytes%4#0' with 'l-load as_bytes%4#0'
debug: Inserted main_nested_tuple_params_route@6.ops[132]: 'l-store-copy encoded_tuple_buffer%6#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[134]: 'v-load encoded_tuple_buffer%6#0' with 'l-load encoded_tuple_buffer%6#0'
debug: Inserted main_nested_tuple_params_route@6.ops[137]: 'l-store-copy encoded_tuple_buffer%7#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[139]: 'v-load encoded_tuple_buffer%7#0' with 'l-load encoded_tuple_buffer%7#0'
debug: Inserted main_nested_tuple_params_route@6.ops[146]: 'l-store-copy tmp%13#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[148]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted main_nested_tuple_params_route@6.ops[151]: 'l-store-copy test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[153]: 'v-load test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0' with 'l-load test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[104]: 'l-store-copy val_as_bytes%0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[107]: 'v-load val_as_bytes%0#0' with 'l-load val_as_bytes%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[117]: 'l-store-copy data_length%1#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[120]: 'v-load data_length%1#0' with 'l-load data_length%1#0'
debug: Inserted main_nested_tuple_params_route@6.ops[130]: 'l-store-copy offset_as_uint16%2#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[133]: 'v-load offset_as_uint16%2#0' with 'l-load offset_as_uint16%2#0'
debug: Inserted main_nested_tuple_params_route@6.ops[145]: 'l-store-copy encoded_tuple_buffer%8#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[148]: 'v-load encoded_tuple_buffer%8#0' with 'l-load encoded_tuple_buffer%8#0'
debug: Inserted main_nested_tuple_params_route@6.ops[24]: 'l-store-copy item_end_offset%0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[28]: 'v-load item_end_offset%0#0' with 'l-load item_end_offset%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[36]: 'l-store-copy tmp%12#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[39]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main_nested_tuple_params_route@6.ops[38]: 'l-store-copy item_end_offset%1#0 1'
debug: Replaced main_nested_tuple_params_route@6.ops[42]: 'v-load item_end_offset%1#0' with 'l-load item_end_offset%1#0'
debug: Inserted main_nested_tuple_params_route@6.ops[51]: 'l-store-copy item1%0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[54]: 'v-load item1%0#0' with 'l-load item1%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[53]: 'l-store-copy item_end_offset%2#0 1'
debug: Replaced main_nested_tuple_params_route@6.ops[57]: 'v-load item_end_offset%2#0' with 'l-load item_end_offset%2#0'
debug: Inserted main_nested_tuple_params_route@6.ops[18]: 'l-store-copy tmp%12#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[22]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main_nested_tuple_params_route@6.ops[23]: 'l-store-copy tmp%12#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[28]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main_nested_tuple_params_route@6.ops[49]: 'l-store-copy item1%0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[53]: 'v-load item1%0#0' with 'l-load item1%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[52]: 'l-store-copy item_start_offset%2#0 1'
debug: Replaced main_nested_tuple_params_route@6.ops[60]: 'v-load item_start_offset%2#0' with 'l-load item_start_offset%2#0'
debug: Inserted main_nested_tuple_params_route@6.ops[21]: 'l-store-copy item_start_offset%0#0 1'
debug: Replaced main_nested_tuple_params_route@6.ops[30]: 'v-load item_start_offset%0#0' with 'l-load item_start_offset%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[30]: 'l-store-copy tmp%12#0 2'
debug: Replaced main_nested_tuple_params_route@6.ops[39]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main_nested_tuple_params_route@6.ops[62]: 'l-store-copy item1%0#0 2'
debug: Replaced main_nested_tuple_params_route@6.ops[71]: 'v-load item1%0#0' with 'l-load item1%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[113]: 'l-store-copy encoded_value%1#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[125]: 'v-load encoded_value%1#0' with 'l-load encoded_value%1#0'
debug: Inserted main_nested_tuple_params_route@6.ops[33]: 'l-store-copy item_end_offset%0#0 3'
debug: Replaced main_nested_tuple_params_route@6.ops[46]: 'v-load item_end_offset%0#0' with 'l-load item_end_offset%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[71]: 'l-store-copy args.1.0#0 1'
debug: Replaced main_nested_tuple_params_route@6.ops[84]: 'v-load args.1.0#0' with 'l-load args.1.0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[85]: 'l-store-copy args.1.0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[98]: 'v-load args.1.0#0' with 'l-load args.1.0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[102]: 'l-store-copy args.0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[115]: 'v-load args.0#0' with 'l-load args.0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[133]: 'l-store-copy encoded_value%0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[156]: 'v-load encoded_value%0#0' with 'l-load encoded_value%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[131]: 'l-store-copy encoded_tuple_buffer%3#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[162]: 'v-load encoded_tuple_buffer%3#0' with 'l-load encoded_tuple_buffer%3#0'
debug: Inserted main_nested_tuple_params_route@6.ops[100]: 'l-store-copy encoded_value%0#0 0'
debug: Replaced main_nested_tuple_params_route@6.ops[134]: 'v-load encoded_value%0#0' with 'l-load encoded_value%0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[83]: 'l-store-copy args.1.1.0#0 1'
debug: Replaced main_nested_tuple_params_route@6.ops[121]: 'v-load args.1.1.0#0' with 'l-load args.1.1.0#0'
debug: Inserted main_nested_tuple_params_route@6.ops[39]: 'l-store-copy args.0#0 2'
debug: Replaced main_nested_tuple_params_route@6.ops[104]: 'v-load args.0#0' with 'l-load args.0#0'
debug: Inserted main_named_tuple_route@7.ops[1]: 'l-store-copy tmp%14#0 0'
debug: Replaced main_named_tuple_route@7.ops[3]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted main_named_tuple_route@7.ops[5]: 'l-store-copy tmp%15#0 0'
debug: Replaced main_named_tuple_route@7.ops[7]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted main_named_tuple_route@7.ops[10]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_named_tuple_route@7.ops[12]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_named_tuple_route@7.ops[15]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_named_tuple_route@7.ops[17]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_named_tuple_route@7.ops[19]: 'l-store-copy item0%3#0 0'
debug: Replaced main_named_tuple_route@7.ops[21]: 'v-load item0%3#0' with 'l-load item0%3#0'
debug: Inserted main_named_tuple_route@7.ops[36]: 'l-store-copy item1%2#0 0'
debug: Replaced main_named_tuple_route@7.ops[38]: 'v-load item1%2#0' with 'l-load item1%2#0'
debug: Inserted main_named_tuple_route@7.ops[48]: 'l-store-copy item2%0#0 0'
debug: Replaced main_named_tuple_route@7.ops[50]: 'v-load item2%0#0' with 'l-load item2%0#0'
debug: Inserted main_named_tuple_route@7.ops[58]: 'l-store-copy length%2#0 0'
debug: Replaced main_named_tuple_route@7.ops[60]: 'v-load length%2#0' with 'l-load length%2#0'
debug: Inserted main_named_tuple_route@7.ops[62]: 'l-store-copy as_bytes%5#0 0'
debug: Replaced main_named_tuple_route@7.ops[64]: 'v-load as_bytes%5#0' with 'l-load as_bytes%5#0'
debug: Inserted main_named_tuple_route@7.ops[66]: 'l-store-copy length_uint16%2#0 0'
debug: Replaced main_named_tuple_route@7.ops[68]: 'v-load length_uint16%2#0' with 'l-load length_uint16%2#0'
debug: Inserted main_named_tuple_route@7.ops[74]: 'l-store-copy length%3#0 0'
debug: Replaced main_named_tuple_route@7.ops[76]: 'v-load length%3#0' with 'l-load length%3#0'
debug: Inserted main_named_tuple_route@7.ops[78]: 'l-store-copy as_bytes%6#0 0'
debug: Replaced main_named_tuple_route@7.ops[80]: 'v-load as_bytes%6#0' with 'l-load as_bytes%6#0'
debug: Inserted main_named_tuple_route@7.ops[82]: 'l-store-copy length_uint16%3#0 0'
debug: Replaced main_named_tuple_route@7.ops[84]: 'v-load length_uint16%3#0' with 'l-load length_uint16%3#0'
debug: Inserted main_named_tuple_route@7.ops[98]: 'l-store-copy current_tail_offset%6#0 0'
debug: Replaced main_named_tuple_route@7.ops[100]: 'v-load current_tail_offset%6#0' with 'l-load current_tail_offset%6#0'
debug: Inserted main_named_tuple_route@7.ops[102]: 'l-store-copy as_bytes%8#0 0'
debug: Replaced main_named_tuple_route@7.ops[104]: 'v-load as_bytes%8#0' with 'l-load as_bytes%8#0'
debug: Inserted main_named_tuple_route@7.ops[110]: 'l-store-copy encoded_tuple_buffer%12#0 0'
debug: Replaced main_named_tuple_route@7.ops[112]: 'v-load encoded_tuple_buffer%12#0' with 'l-load encoded_tuple_buffer%12#0'
debug: Inserted main_named_tuple_route@7.ops[115]: 'l-store-copy encoded_tuple_buffer%13#0 0'
debug: Replaced main_named_tuple_route@7.ops[117]: 'v-load encoded_tuple_buffer%13#0' with 'l-load encoded_tuple_buffer%13#0'
debug: Inserted main_named_tuple_route@7.ops[124]: 'l-store-copy tmp%19#0 0'
debug: Replaced main_named_tuple_route@7.ops[126]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main_named_tuple_route@7.ops[129]: 'l-store-copy test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0 0'
debug: Replaced main_named_tuple_route@7.ops[131]: 'v-load test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0' with 'l-load test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0'
debug: Inserted main_named_tuple_route@7.ops[94]: 'l-store-copy data_length%3#0 0'
debug: Replaced main_named_tuple_route@7.ops[97]: 'v-load data_length%3#0' with 'l-load data_length%3#0'
debug: Inserted main_named_tuple_route@7.ops[107]: 'l-store-copy offset_as_uint16%4#0 0'
debug: Replaced main_named_tuple_route@7.ops[110]: 'v-load offset_as_uint16%4#0' with 'l-load offset_as_uint16%4#0'
debug: Inserted main_named_tuple_route@7.ops[122]: 'l-store-copy encoded_tuple_buffer%14#0 0'
debug: Replaced main_named_tuple_route@7.ops[125]: 'v-load encoded_tuple_buffer%14#0' with 'l-load encoded_tuple_buffer%14#0'
debug: Inserted main_named_tuple_route@7.ops[31]: 'l-store-copy item_end_offset%3#0 0'
debug: Replaced main_named_tuple_route@7.ops[35]: 'v-load item_end_offset%3#0' with 'l-load item_end_offset%3#0'
debug: Inserted main_named_tuple_route@7.ops[43]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_named_tuple_route@7.ops[46]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_named_tuple_route@7.ops[45]: 'l-store-copy item_end_offset%4#0 1'
debug: Replaced main_named_tuple_route@7.ops[49]: 'v-load item_end_offset%4#0' with 'l-load item_end_offset%4#0'
debug: Inserted main_named_tuple_route@7.ops[25]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_named_tuple_route@7.ops[29]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_named_tuple_route@7.ops[30]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_named_tuple_route@7.ops[35]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_named_tuple_route@7.ops[18]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_named_tuple_route@7.ops[25]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_named_tuple_route@7.ops[29]: 'l-store-copy item_start_offset%3#0 1'
debug: Replaced main_named_tuple_route@7.ops[38]: 'v-load item_start_offset%3#0' with 'l-load item_start_offset%3#0'
debug: Inserted main_named_tuple_route@7.ops[38]: 'l-store-copy tmp%18#0 2'
debug: Replaced main_named_tuple_route@7.ops[47]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_named_tuple_route@7.ops[41]: 'l-store-copy item_end_offset%3#0 3'
debug: Replaced main_named_tuple_route@7.ops[54]: 'v-load item_end_offset%3#0' with 'l-load item_end_offset%3#0'
debug: Inserted main_named_tuple_route@7.ops[66]: 'l-store-copy args.b#0 0'
debug: Replaced main_named_tuple_route@7.ops[79]: 'v-load args.b#0' with 'l-load args.b#0'
debug: Inserted main_named_tuple_route@7.ops[83]: 'l-store-copy args.c#0 0'
debug: Replaced main_named_tuple_route@7.ops[96]: 'v-load args.c#0' with 'l-load args.c#0'
debug: Inserted main_named_tuple_route@7.ops[102]: 'l-store-copy encoded_tuple_buffer%11#0 0'
debug: Replaced main_named_tuple_route@7.ops[121]: 'v-load encoded_tuple_buffer%11#0' with 'l-load encoded_tuple_buffer%11#0'
debug: Inserted main_named_tuple_route@7.ops[47]: 'l-store-copy args.b#0 2'
debug: Replaced main_named_tuple_route@7.ops[66]: 'v-load args.b#0' with 'l-load args.b#0'
debug: Inserted main_named_tuple_route@7.ops[62]: 'l-store-copy args.c#0 1'
debug: Replaced main_named_tuple_route@7.ops[84]: 'v-load args.c#0' with 'l-load args.c#0'
debug: Inserted main_named_tuple_route@7.ops[83]: 'l-store-copy encoded_value%2#0 1'
debug: Replaced main_named_tuple_route@7.ops[107]: 'v-load encoded_value%2#0' with 'l-load encoded_value%2#0'
debug: Inserted main_named_tuple_route@7.ops[108]: 'l-store-copy encoded_value%2#0 1'
debug: Replaced main_named_tuple_route@7.ops[131]: 'v-load encoded_value%2#0' with 'l-load encoded_value%2#0'
debug: Inserted main_named_tuple_route@7.ops[66]: 'l-store-copy val_as_bytes%1#0 2'
debug: Replaced main_named_tuple_route@7.ops[103]: 'v-load val_as_bytes%1#0' with 'l-load val_as_bytes%1#0'
debug: Inserted main_named_tuple_route@7.ops[102]: 'l-store-copy encoded_value%3#0 2'
debug: Replaced main_named_tuple_route@7.ops[138]: 'v-load encoded_value%3#0' with 'l-load encoded_value%3#0'
debug: Inserted main_named_tuple_route@7.ops[24]: 'l-store-copy args.a#0 1'
debug: Replaced main_named_tuple_route@7.ops[65]: 'v-load args.a#0' with 'l-load args.a#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[1]: 'l-store-copy tmp%20#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[3]: 'v-load tmp%20#0' with 'l-load tmp%20#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[5]: 'l-store-copy tmp%21#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[7]: 'v-load tmp%21#0' with 'l-load tmp%21#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[10]: 'l-store-copy tmp%22#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[12]: 'v-load tmp%22#0' with 'l-load tmp%22#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[15]: 'l-store-copy tmp%24#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[17]: 'v-load tmp%24#0' with 'l-load tmp%24#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[19]: 'l-store-copy item0%4#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[21]: 'v-load item0%4#0' with 'l-load item0%4#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[38]: 'l-store-copy item2%1#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[40]: 'v-load item2%1#0' with 'l-load item2%1#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[42]: 'l-store-copy item0%5#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[44]: 'v-load item0%5#0' with 'l-load item0%5#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[59]: 'l-store-copy item1%4#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[61]: 'v-load item1%4#0' with 'l-load item1%4#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[71]: 'l-store-copy item2%2#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[73]: 'v-load item2%2#0' with 'l-load item2%2#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[84]: 'l-store-copy length%4#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[86]: 'v-load length%4#0' with 'l-load length%4#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[88]: 'l-store-copy as_bytes%9#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[90]: 'v-load as_bytes%9#0' with 'l-load as_bytes%9#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[92]: 'l-store-copy length_uint16%4#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[94]: 'v-load length_uint16%4#0' with 'l-load length_uint16%4#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[100]: 'l-store-copy length%5#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[102]: 'v-load length%5#0' with 'l-load length%5#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[104]: 'l-store-copy as_bytes%10#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[106]: 'v-load as_bytes%10#0' with 'l-load as_bytes%10#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[108]: 'l-store-copy length_uint16%5#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[110]: 'v-load length_uint16%5#0' with 'l-load length_uint16%5#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[124]: 'l-store-copy current_tail_offset%9#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[126]: 'v-load current_tail_offset%9#0' with 'l-load current_tail_offset%9#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[128]: 'l-store-copy as_bytes%12#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[130]: 'v-load as_bytes%12#0' with 'l-load as_bytes%12#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[136]: 'l-store-copy encoded_tuple_buffer%18#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[138]: 'v-load encoded_tuple_buffer%18#0' with 'l-load encoded_tuple_buffer%18#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[141]: 'l-store-copy encoded_tuple_buffer%19#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[143]: 'v-load encoded_tuple_buffer%19#0' with 'l-load encoded_tuple_buffer%19#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[150]: 'l-store-copy encoded_tuple_buffer%23#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[152]: 'v-load encoded_tuple_buffer%23#0' with 'l-load encoded_tuple_buffer%23#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[155]: 'l-store-copy encoded_tuple_buffer%24#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[157]: 'v-load encoded_tuple_buffer%24#0' with 'l-load encoded_tuple_buffer%24#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[164]: 'l-store-copy tmp%25#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[166]: 'v-load tmp%25#0' with 'l-load tmp%25#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[169]: 'l-store-copy test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[171]: 'v-load test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0' with 'l-load test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[120]: 'l-store-copy data_length%5#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[123]: 'v-load data_length%5#0' with 'l-load data_length%5#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[133]: 'l-store-copy offset_as_uint16%6#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[136]: 'v-load offset_as_uint16%6#0' with 'l-load offset_as_uint16%6#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[162]: 'l-store-copy encoded_tuple_buffer%25#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[165]: 'v-load encoded_tuple_buffer%25#0' with 'l-load encoded_tuple_buffer%25#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[25]: 'l-store-copy tmp%24#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[28]: 'v-load tmp%24#0' with 'l-load tmp%24#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[33]: 'l-store-copy tmp%24#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[36]: 'v-load tmp%24#0' with 'l-load tmp%24#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[35]: 'l-store-copy item_end_offset%5#0 1'
debug: Replaced main_nested_named_tuple_params_route@8.ops[39]: 'v-load item_end_offset%5#0' with 'l-load item_end_offset%5#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[57]: 'l-store-copy item_end_offset%6#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[61]: 'v-load item_end_offset%6#0' with 'l-load item_end_offset%6#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[69]: 'l-store-copy item2%1#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[72]: 'v-load item2%1#0' with 'l-load item2%1#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[71]: 'l-store-copy item_end_offset%7#0 1'
debug: Replaced main_nested_named_tuple_params_route@8.ops[75]: 'v-load item_end_offset%7#0' with 'l-load item_end_offset%7#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[29]: 'l-store-copy tmp%24#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[33]: 'v-load tmp%24#0' with 'l-load tmp%24#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[52]: 'l-store-copy item2%1#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[56]: 'v-load item2%1#0' with 'l-load item2%1#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[57]: 'l-store-copy item2%1#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[62]: 'v-load item2%1#0' with 'l-load item2%1#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[32]: 'l-store-copy item_start_offset%5#0 1'
debug: Replaced main_nested_named_tuple_params_route@8.ops[40]: 'v-load item_start_offset%5#0' with 'l-load item_start_offset%5#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[18]: 'l-store-copy tmp%24#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[25]: 'v-load tmp%24#0' with 'l-load tmp%24#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[47]: 'l-store-copy item2%1#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[54]: 'v-load item2%1#0' with 'l-load item2%1#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[58]: 'l-store-copy item_start_offset%6#0 1'
debug: Replaced main_nested_named_tuple_params_route@8.ops[67]: 'v-load item_start_offset%6#0' with 'l-load item_start_offset%6#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[67]: 'l-store-copy item2%1#0 2'
debug: Replaced main_nested_named_tuple_params_route@8.ops[76]: 'v-load item2%1#0' with 'l-load item2%1#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[70]: 'l-store-copy item_end_offset%6#0 3'
debug: Replaced main_nested_named_tuple_params_route@8.ops[83]: 'v-load item_end_offset%6#0' with 'l-load item_end_offset%6#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[98]: 'l-store-copy args.child.b#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[111]: 'v-load args.child.b#0' with 'l-load args.child.b#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[115]: 'l-store-copy args.child.c#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[128]: 'v-load args.child.c#0' with 'l-load args.child.c#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[165]: 'l-store-copy encoded_tuple_buffer%20#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[178]: 'v-load encoded_tuple_buffer%20#0' with 'l-load encoded_tuple_buffer%20#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[134]: 'l-store-copy encoded_tuple_buffer%17#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[153]: 'v-load encoded_tuple_buffer%17#0' with 'l-load encoded_tuple_buffer%17#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[76]: 'l-store-copy args.child.b#0 2'
debug: Replaced main_nested_named_tuple_params_route@8.ops[98]: 'v-load args.child.b#0' with 'l-load args.child.b#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[114]: 'l-store-copy encoded_value%4#0 0'
debug: Replaced main_nested_named_tuple_params_route@8.ops[138]: 'v-load encoded_value%4#0' with 'l-load encoded_value%4#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[139]: 'l-store-copy encoded_value%4#0 1'
debug: Replaced main_nested_named_tuple_params_route@8.ops[162]: 'v-load encoded_value%4#0' with 'l-load encoded_value%4#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[91]: 'l-store-copy args.child.c#0 1'
debug: Replaced main_nested_named_tuple_params_route@8.ops[117]: 'v-load args.child.c#0' with 'l-load args.child.c#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[98]: 'l-store-copy val_as_bytes%3#0 2'
debug: Replaced main_nested_named_tuple_params_route@8.ops[135]: 'v-load val_as_bytes%3#0' with 'l-load val_as_bytes%3#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[134]: 'l-store-copy encoded_value%5#0 2'
debug: Replaced main_nested_named_tuple_params_route@8.ops[170]: 'v-load encoded_value%5#0' with 'l-load encoded_value%5#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[53]: 'l-store-copy args.child.a#0 1'
debug: Replaced main_nested_named_tuple_params_route@8.ops[97]: 'v-load args.child.a#0' with 'l-load args.child.a#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[24]: 'l-store-copy args.foo#0 1'
debug: Replaced main_nested_named_tuple_params_route@8.ops[95]: 'v-load args.foo#0' with 'l-load args.foo#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[97]: 'l-store-copy val_as_bytes%2#0 3'
debug: Replaced main_nested_named_tuple_params_route@8.ops[177]: 'v-load val_as_bytes%2#0' with 'l-load val_as_bytes%2#0'
debug: Inserted main_nested_named_tuple_params_route@8.ops[29]: 'l-store-copy args.foo_arc#0 2'
debug: Replaced main_nested_named_tuple_params_route@8.ops[179]: 'v-load args.foo_arc#0' with 'l-load args.foo_arc#0'
debug: Inserted main_bare_routing@9.ops[1]: 'l-store-copy tmp%26#0 0'
debug: Replaced main_bare_routing@9.ops[3]: 'v-load tmp%26#0' with 'l-load tmp%26#0'
debug: Inserted main___algopy_default_create@10.ops[1]: 'l-store-copy tmp%27#0 0'
debug: Replaced main___algopy_default_create@10.ops[3]: 'v-load tmp%27#0' with 'l-load tmp%27#0'
debug: Inserted main___algopy_default_create@10.ops[5]: 'l-store-copy tmp%28#0 0'
debug: Replaced main___algopy_default_create@10.ops[7]: 'v-load tmp%28#0' with 'l-load tmp%28#0'
debug: Inserted main___algopy_default_create@10.ops[10]: 'l-store-copy test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0 0'
debug: Replaced main___algopy_default_create@10.ops[12]: 'v-load test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0' with 'l-load test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0'
debug: Inserted main_after_if_else@11.ops[1]: 'l-store-copy test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0 0'
debug: Replaced main_after_if_else@11.ops[3]: 'v-load test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0' with 'l-load test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0'
debug: Found 8 edge set/s for test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init
debug: Allocated 5 variable/s to x-stack: b#5, loop_counter%0#0, loop_counter%1#0, t.1#0, tmp%0#0
debug: shared x-stack for main_run_tests_route@5 -> main_for_body@32: t.1#0, loop_counter%0#0
debug: shared x-stack for main_for_header_1@33 -> main_for_body@32: t.1#0, loop_counter%0#0
debug: shared x-stack for main_for_header_2@34 -> main_for_body@32: t.1#0, loop_counter%0#0
debug: shared x-stack for main_for_header_3@35 -> main_for_body@32: t.1#0, loop_counter%0#0
debug: shared x-stack for main_after_for@36 -> main_for_body@37: b#5, loop_counter%1#0
debug: shared x-stack for main_for_header_1@38 -> main_for_body@37: b#5, loop_counter%1#0
debug: shared x-stack for main_for_header_2@39 -> main_for_body@37: b#5, loop_counter%1#0
debug: shared x-stack for main_for_header_3@40 -> main_for_body@37: b#5, loop_counter%1#0
debug: shared x-stack for main_nested_tuple_params_route@6 -> main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@12: tmp%0#0
debug: shared x-stack for main_named_tuple_route@7 -> main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@12: tmp%0#0
debug: shared x-stack for main_nested_named_tuple_params_route@8 -> main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@12: tmp%0#0
debug: shared x-stack for main___algopy_default_create@10 -> main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@12: tmp%0#0
debug: shared x-stack for main_after_if_else@11 -> main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@12: tmp%0#0
debug: shared x-stack for main_after_for@41 -> main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@12: tmp%0#0
debug: test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init f-stack entry: ['a#4', 't.0#0', 'total#0']
debug: test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init f-stack on first store: []
debug: optimizing TEAL subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init() -> uint64:
debug: Replaced 'Uncover(source_location=tuple_support/nested_tuples.py:18, comment=None, error_message=None, stack_manipulations=(), n=3, op_code='uncover', consumes=4, produces=4); Uncover(source_location=tuple_support/nested_tuples.py:18, comment=None, error_message=None, stack_manipulations=(StackPop(depth=3), StackExtend(local_ids=('tmp%12#0',)), StackDefine(local_ids=('tmp%12#0',)), StackPop(depth=3), StackExtend(local_ids=('item_end_offset%0#0',)), StackDefine(local_ids=('item_end_offset%0#0',))), n=3, op_code='uncover', consumes=4, produces=4); Uncover(source_location=tuple_support/nested_tuples.py:18, comment=None, error_message=None, stack_manipulations=(StackPop(depth=2), StackExtend(local_ids=('item_end_offset%1#0',)), StackDefine(local_ids=('item_end_offset%1#0',))), n=2, op_code='uncover', consumes=3, produces=3)' with 'Cover(source_location=None, comment=None, error_message=None, stack_manipulations=(), n=1, op_code='cover', consumes=2, produces=2); Cover(source_location=None, comment=None, error_message=None, stack_manipulations=(), n=3, op_code='cover', consumes=4, produces=4)', reducing by 1 ops by search
debug: replacing `b main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@12` with `return`
debug: replacing `b main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@12` with `return`
debug: replacing `b main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@12` with `return`
debug: replacing `b main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@12` with `return`
debug: replacing `b main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@12` with `return`
debug: inlining single reference block main_call___init__@1 into main
debug: inlining single reference block main_abi_routing@4 into main_after_if_else@2
debug: inlining single reference block main_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@12 into main_after_if_else@11
debug: inlining single reference block main_after_for@36 into main_for_body@32
debug: inlining single reference block main_after_for@41 into main_for_body@37
debug: inlining single reference block main___algopy_default_create@10 into main_bare_routing@9
debug: removing explicit jump to fall-through block main_after_if_else@2
debug: removing explicit jump to fall-through block main_after_if_else@11
debug: removing explicit jump to fall-through block main_for_body@32
debug: removing explicit jump to fall-through block main_for_body@37
debug: optimizing TEAL subroutine algopy.arc4.ARC4Contract.clear_state_program() -> uint64:
info: Writing tuple_support/out_O2/TupleSupport.approval.teal
info: Writing tuple_support/out_O2/TupleSupport.clear.teal
info: Writing tuple_support/out_O2/TupleSupport.approval.bin
info: Writing tuple_support/out_O2/TupleSupport.clear.bin
info: Writing tuple_support/out_O2/TupleSupport.approval.puya.map
info: Writing tuple_support/out_O2/TupleSupport.clear.puya.map
info: Writing tuple_support/out_O2/TupleComparisons.approval.teal
info: Writing tuple_support/out_O2/TupleComparisons.clear.teal
info: Writing tuple_support/out_O2/TupleComparisons.approval.bin
info: Writing tuple_support/out_O2/TupleComparisons.clear.bin
info: Writing tuple_support/out_O2/TupleComparisons.approval.puya.map
info: Writing tuple_support/out_O2/TupleComparisons.clear.puya.map
info: Writing tuple_support/out_O2/NestedTuples.approval.teal
info: Writing tuple_support/out_O2/NestedTuples.clear.teal
info: Writing tuple_support/out_O2/NestedTuples.approval.bin
info: Writing tuple_support/out_O2/NestedTuples.clear.bin
info: Writing tuple_support/out_O2/NestedTuples.approval.puya.map
info: Writing tuple_support/out_O2/NestedTuples.clear.puya.map