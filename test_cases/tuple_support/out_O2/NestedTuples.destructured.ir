contract test_cases.tuple_support.nested_tuples.NestedTuples:
    program approval:
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.approval_program() -> bool:
            block@0: // L4
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@6
            block@1: // abi_routing_L4
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "run_tests()bool" => block@2, method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))" => block@3, * => fail // reject transaction}
            block@2: // run_tests_route_L5
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.run_tests()
                let encoded_bool%0#0: bytes = (setbit 0x00 0u tmp%5#0)
                let tmp%6#0: bytes = (concat 0x151f7c75 encoded_bool%0#0)
                (log tmp%6#0)
                return 1u
            block@3: // nested_tuple_params_route_L33
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (! tmp%7#0)
                (assert tmp%8#0) // OnCompletion is NoOp
                let tmp%9#0: bool = (txn ApplicationID)
                (assert tmp%9#0) // is not creating
                let tmp%10#0: bytes = (txna ApplicationArgs 1)
                let item_start_offset%0#0: uint64 = (extract_uint16 tmp%10#0 0u)
                let item_end_offset%0#0: uint64 = (extract_uint16 tmp%10#0 2u)
                let item0%0#0: bytes = (substring3 tmp%10#0 item_start_offset%0#0 item_end_offset%0#0)
                let item_end_offset%1#0: uint64 = (len tmp%10#0)
                let item1%0#0: bytes = (substring3 tmp%10#0 item_end_offset%0#0 item_end_offset%1#0)
                let tmp%11#0: bytes = ((extract 2 0) item0%0#0)
                let item_start_offset%2#0: uint64 = (extract_uint16 item1%0#0 0u)
                let item_end_offset%2#0: uint64 = (len item1%0#0)
                let item0%1#0: bytes = (substring3 item1%0#0 item_start_offset%2#0 item_end_offset%2#0)
                let item1%1#0: bytes = ((extract 2 8) item1%0#0) // on error: Index access is out of bounds
                let tmp%12#0: bytes = ((extract 2 0) item0%1#0)
                let item0%2#0: bytes = ((extract 0 8) item1%1#0) // on error: Index access is out of bounds
                let tmp%13#0: uint64 = (btoi item0%2#0)
                let (awst_tmp%5#0: bytes, awst_tmp%6#0: bytes, awst_tmp%7#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(tmp%11#0, tmp%12#0, tmp%13#0)
                let length%0#0: uint64 = (len awst_tmp%5#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 awst_tmp%5#0)
                let length%1#0: uint64 = (len awst_tmp%6#0)
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 awst_tmp%6#0)
                let val_as_bytes%0#0: bytes = (itob awst_tmp%7#0)
                let encoded_tuple_buffer%2#0: bytes = (concat 0x000a val_as_bytes%0#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%1#0)
                let data_length%1#0: uint64 = (len encoded_value%0#0)
                let current_tail_offset%3#0: uint64 = (+ 4u data_length%1#0)
                let as_bytes%4#0: bytes = (itob current_tail_offset%3#0)
                let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
                let encoded_tuple_buffer%6#0: bytes = (concat 0x0004 offset_as_uint16%2#0)
                let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%0#0)
                let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 encoded_tuple_buffer%3#0)
                let tmp%14#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%8#0)
                (log tmp%14#0)
                return 1u
            block@6: // bare_routing_L4
                let tmp%15#0: uint64 = (txn OnCompletion)
                let not%tmp%15#0: bool = (! tmp%15#0)
                (assert not%tmp%15#0) // reject transaction
                let tmp%16#0: bool = (txn ApplicationID)
                let tmp%17#0: bool = (! tmp%16#0)
                (assert tmp%17#0) // is creating
                return 1u
        
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.run_tests() -> bool:
            block@0: // L5
                let (awst_tmp%0#0: bytes, awst_tmp%1#0: bytes) = test_cases.tuple_support.nested_tuples.test_swap("Hi", "There")
                let tmp%0#0: bool = (== awst_tmp%0#0 "There")
                let tmp%1#0: bool = (== awst_tmp%1#0 "Hi")
                let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
                (assert tmp%2#0)
                let (a#0: bytes, b#0: uint64, c#0: uint64, d#0: uint64, e#0: bytes) = test_cases.tuple_support.nested_tuples.test_rearrange("Hi", 0u, 2u, 1u, "Hi", "There", "There")
                let tmp%4#0: bool = (== a#0 "Hi")
                let tmp%5#0: bool = (! b#0)
                let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
                (assert tmp%6#0)
                let tmp%7#0: bool = (== c#0 2u)
                let tmp%8#0: bool = (== d#0 1u)
                let tmp%9#0: bool = (&& tmp%7#0 tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: bool = (== e#0 "There")
                (assert tmp%10#0)
                test_cases.tuple_support.nested_tuples.test_intrinsics(1u, 2u)
                test_cases.tuple_support.nested_tuples.test_nested_slicing()
                test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 1u)
                test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 0u)
                test_cases.tuple_support.nested_tuples.test_nested_mutation()
                test_cases.tuple_support.nested_tuples.test_nested_iteration()
                return 1u
        
        subroutine test_cases.tuple_support.nested_tuples.test_swap(args.0: bytes, args.1: bytes) -> <bytes, bytes>:
            block@0: // L50
                return args.1#0 args.0#0
        
        subroutine test_cases.tuple_support.nested_tuples.test_rearrange(_a: bytes, args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: bytes, args.2.1.1: bytes, _b: bytes) -> <bytes, uint64, uint64, uint64, bytes>:
            block@0: // L41
                return args.2.1.0#0 args.0#0 args.1#0 args.2.0#0 args.2.1.1#0
        
        subroutine test_cases.tuple_support.nested_tuples.test_intrinsics(num1: uint64, num2: uint64) -> void:
            block@0: // L56
                let (nt.1.0#0: uint64, nt.1.1#0: uint64) = (addw num1#0 num2#0)
                let tmp%4#0: bool = (! nt.1.0#0)
                let tmp%5#0: uint64 = (+ num1#0 num2#0)
                let tmp%6#0: bool = (== nt.1.1#0 tmp%5#0)
                let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
                (assert tmp%7#0)
                (assert tmp%4#0)
                (assert tmp%6#0)
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing() -> void:
            block@0: // L69
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: bool) -> void:
            block@0: // L91
                let s.0.0#0: uint64 = 0u
                let s.2.0#0: uint64 = 2u
                let tmp%2#0: bool = (== one#0 1u)
                (assert tmp%2#0)
                let s.1.0#1: uint64 = one#0
                goto reassign#0 ? block@1 : block@2
            block@1: // if_body_L105
                let s.0.0#0: uint64 = 3u
                let s.1.0#1: uint64 = 4u
                let s.2.0#0: uint64 = 5u
                goto block@2
            block@2: // after_if_else_L105
                goto reassign#0 ? block@3 : block@4
            block@3: // ternary_true_L111
                let ternary_result%0#0: uint64 = 3u
                goto block@5
            block@4: // ternary_false_L111
                let ternary_result%0#0: uint64 = 0u
                goto block@5
            block@5: // ternary_merge_L111
                let tmp%6#0: bool = (== s.0.0#0 ternary_result%0#0)
                (assert tmp%6#0)
                goto reassign#0 ? block@6 : block@7
            block@6: // ternary_true_L113
                let ternary_result%1#0: uint64 = 5u
                goto block@8
            block@7: // ternary_false_L113
                let ternary_result%1#0: uint64 = 2u
                goto block@8
            block@8: // ternary_merge_L113
                let tmp%7#0: bool = (== s.2.0#0 ternary_result%1#0)
                (assert tmp%7#0)
                let s1#1: uint64 = (+ s.1.0#1 one#0)
                goto reassign#0 ? block@9 : block@10
            block@9: // ternary_true_L118
                let ternary_result%2#0: uint64 = 5u
                goto block@11
            block@10: // ternary_false_L118
                let ternary_result%2#0: uint64 = 2u
                goto block@11
            block@11: // ternary_merge_L118
                let tmp%9#0: bool = (== s1#1 ternary_result%2#0)
                (assert tmp%9#0)
                goto reassign#0 ? block@12 : block@13
            block@12: // ternary_true_L119
                let ternary_result%3#0: uint64 = 4u
                goto block@14
            block@13: // ternary_false_L119
                let ternary_result%3#0: uint64 = 1u
                goto block@14
            block@14: // ternary_merge_L119
                let tmp%10#0: bool = (== s.1.0#1 ternary_result%3#0)
                (assert tmp%10#0)
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation() -> void:
            block@0: // L122
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.test_nested_iteration() -> void:
            block@0: // L135
                let total#0: uint64 = 0u
                let loop_counter%0#0: uint64 = 0u
                let a#0: uint64 = 1u
                let b#0: uint64 = 2u
                goto block@1
            block@1: // for_body_L140
                let tmp%0#0: uint64 = (+ a#0 b#0)
                let total#0: uint64 = (+ total#0 tmp%0#0)
                goto_nth [block@3, block@4, block@5][loop_counter%0#0] else goto block@6
            block@3: // for_header_1_L140
                let loop_counter%0#0: uint64 = 1u
                let a#0: uint64 = 2u
                let b#0: uint64 = 1u
                goto block@1
            block@4: // for_header_2_L140
                let loop_counter%0#0: uint64 = 2u
                let a#0: uint64 = 1u
                let b#0: uint64 = 1u
                goto block@1
            block@5: // for_header_3_L140
                let loop_counter%0#0: uint64 = 3u
                let a#0: uint64 = 2u
                let b#0: uint64 = 2u
                goto block@1
            block@6: // after_for_L140
                let tmp%1#0: uint64 = (/ total#0 4u)
                let tmp%2#0: bool = (== tmp%1#0 3u)
                (assert tmp%2#0)
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(args.0: bytes, args.1.0: bytes, args.1.1.0: uint64) -> <bytes, bytes, uint64>:
            block@0: // L33
                return args.1.0#0 args.0#0 args.1.1.0#0
    
    program clear-state:
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.clear_state_program() -> bool:
            block@0: // L4
                return 1u