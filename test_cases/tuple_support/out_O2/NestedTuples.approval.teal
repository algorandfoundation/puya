#pragma version 10
#pragma typetrack false

// test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 2 8
    bytecblock "" 0x151f7c75 "build_nested_call_count" 0x000c "twm" 0x0004 0x0012 "box" "pwl"
    intc_0 // 0
    dupn 6
    bytec_0 // ""
    dupn 9
    txn ApplicationID
    bnz main_after_if_else@2
    bytec_2 // "build_nested_call_count"
    intc_0 // 0
    app_global_put
    bytec 4 // "twm"
    pushbytes 0x0004000600000000000000000000000c000e00000000
    app_global_put

main_after_if_else@2:
    txn NumAppArgs
    bz main_bare_routing@31
    pushbytess 0x383e1e8b 0x68cbedd7 0x2263fcf1 0xbfc37339 0xc660beaa 0xf8cc2b50 0x3d486db0 0x9e5a3ba7 0xcea0521b 0x373f5b24 0xec593096 // method "store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void", method "load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])", method "store_tuple_in_box((uint64,uint64))void", method "is_tuple_in_box((uint64,uint64))bool", method "load_tuple_from_box((uint64,uint64))(uint64,uint64)", method "mutate_local_tuple()(uint64[],(uint64,byte[],string))", method "mutate_tuple_in_storage_currently_supported_method()void", method "run_tests()bool", method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))", method "named_tuple((uint64,byte[],string))(uint64,byte[],string)", method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))"
    txna ApplicationArgs 0
    match main_store_tuple_route@5 main_load_tuple_route@6 main_store_tuple_in_box_route@10 main_is_tuple_in_box_route@11 main_load_tuple_from_box_route@12 main_mutate_local_tuple_route@16 main_mutate_tuple_in_storage_currently_supported_method_route@20 main_run_tests_route@27 main_nested_tuple_params_route@28 main_named_tuple_route@29 main_nested_named_tuple_params_route@30

main_after_if_else@33:
    intc_0 // 0
    return

main_nested_named_tuple_params_route@30:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    pushint 10 // 10
    extract_uint16
    dig 3
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 3
    len
    uncover 4
    uncover 3
    uncover 2
    substring3
    extract 2 0
    uncover 4
    itob
    uncover 3
    itob
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    uncover 2
    bytec_3 // 0x000c
    concat
    dig 2
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    uncover 2
    concat
    bytec 6 // 0x0012
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_named_tuple_route@29:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    pushint 10 // 10
    extract_uint16
    dig 3
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 3
    len
    uncover 4
    uncover 3
    uncover 2
    substring3
    extract 2 0
    uncover 2
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    uncover 2
    bytec_3 // 0x000c
    concat
    dig 2
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_nested_tuple_params_route@28:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    extract 2 0
    swap
    extract 2 8 // on error: Index access is out of bounds
    intc_0 // 0
    extract_uint64
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    uncover 2
    itob
    pushbytes 0x000a
    swap
    concat
    swap
    concat
    dig 1
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    bytec 5 // 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_run_tests_route@27:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    intc_2 // 2
    addw
    swap
    !
    swap
    pushint 3 // 3
    ==
    dup2
    &&
    assert
    swap
    assert
    assert
    intc_0 // 0
    bury 1
    intc_0 // 0
    intc_1 // 1
    bury 7
    intc_2 // 2
    swap

main_for_body@54:
    dig 7
    uncover 2
    +
    dig 2
    +
    bury 2
    switch main_for_header_1@55 main_for_header_2@56 main_for_header_3@57
    intc_0 // 0
    intc_1 // 1
    bury 11
    intc_2 // 2
    swap

main_for_body@59:
    dig 11
    uncover 2
    +
    dig 2
    +
    bury 2
    switch main_for_header_1@60 main_for_header_2@61 main_for_header_3@62
    dup
    intc_3 // 8
    /
    pushint 3 // 3
    ==
    assert
    bytec_2 // "build_nested_call_count"
    intc_0 // 0
    app_global_put
    intc_0 // 0
    bytec_2 // "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    intc_1 // 1
    +
    bytec_2 // "build_nested_call_count"
    swap
    app_global_put
    intc_0 // 0
    bytec_2 // "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    intc_1 // 1
    ==
    assert
    pushbytes 0x151f7c7580
    log
    intc_1 // 1
    return

main_for_header_3@62:
    pushint 3 // 3
    intc_2 // 2
    bury 11
    intc_2 // 2
    swap
    b main_for_body@59

main_for_header_2@61:
    intc_2 // 2
    intc_1 // 1
    bury 11
    intc_1 // 1
    swap
    b main_for_body@59

main_for_header_1@60:
    intc_1 // 1
    intc_2 // 2
    bury 11
    intc_1 // 1
    swap
    b main_for_body@59

main_for_header_3@57:
    pushint 3 // 3
    intc_2 // 2
    bury 7
    intc_2 // 2
    swap
    b main_for_body@54

main_for_header_2@56:
    intc_2 // 2
    intc_1 // 1
    bury 7
    intc_1 // 1
    swap
    b main_for_body@54

main_for_header_1@55:
    intc_1 // 1
    intc_2 // 2
    bury 7
    intc_1 // 1
    swap
    b main_for_body@54

main_mutate_tuple_in_storage_currently_supported_method_route@20:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 0
    bytec 4 // "twm"
    app_global_get_ex
    dup
    cover 2
    bury 10
    bury 17
    bz main_ternary_false@22
    dig 15
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_2 // 2
    extract_uint16
    substring3
    bury 17

main_ternary_merge@23:
    dig 7
    assert // check self.twm exists
    dig 16
    extract 2 0
    pushbytes 0x0000000000000001
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    bury 17
    intc_0 // 0
    bytec 4 // "twm"
    app_global_get_ex
    dup
    cover 2
    bury 9
    bury 16
    bz main_ternary_false@25
    dig 14
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    len
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    pushint 10 // 10
    extract_uint16
    dig 3
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 3
    len
    uncover 4
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 2
    bury 13
    bury 3

main_ternary_merge@26:
    dig 7
    assert // check self.twm exists
    dig 2
    itob
    dig 12
    dup
    len
    itob
    extract 6 2
    swap
    concat
    uncover 2
    dup
    len
    itob
    extract 6 2
    swap
    concat
    uncover 2
    bytec_3 // 0x000c
    concat
    dig 2
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    dig 17
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    bytec 5 // 0x0004
    swap
    concat
    swap
    concat
    swap
    concat
    bytec 4 // "twm"
    swap
    app_global_put
    intc_1 // 1
    return

main_ternary_false@25:
    bytec_0 // ""
    bury 2
    intc_0 // 0
    bury 11
    intc_0 // 0
    b main_ternary_merge@26

main_ternary_false@22:
    intc_0 // 0
    bury 17
    b main_ternary_merge@23

main_mutate_local_tuple_route@16:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 0
    bury 9

main_for_header@17:
    dig 8
    pushint 3 // 3
    <
    bz main_after_for@19
    dig 8
    dup
    intc_3 // 8
    *
    pushbytes 0x000000000000000000000000000000010000000000000002
    swap
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    dig 1
    itob
    b==
    assert
    intc_1 // 1
    +
    bury 9
    b main_for_header@17

main_after_for@19:
    pushbytes 0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000
    log
    intc_1 // 1
    return

main_load_tuple_from_box_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64
    swap
    itob
    swap
    itob
    concat
    bytec 7 // "box"
    swap
    concat
    box_get
    dup
    cover 2
    bury 10
    bury 17
    bz main_ternary_false@14
    dig 15
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64
    swap
    bury 6

main_ternary_merge@15:
    dig 8
    assert // check self.box entry exists
    dig 5
    itob
    swap
    itob
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_ternary_false@14:
    bytec_0 // ""
    bury 5
    bytec_0 // ""
    b main_ternary_merge@15

main_is_tuple_in_box_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64
    swap
    itob
    swap
    itob
    concat
    bytec 7 // "box"
    swap
    concat
    box_len
    bury 1
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_store_tuple_in_box_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64
    dup
    intc_1 // 1
    +
    uncover 2
    itob
    uncover 2
    itob
    dig 1
    swap
    concat
    bytec 7 // "box"
    swap
    concat
    uncover 2
    itob
    uncover 2
    swap
    concat
    box_put
    intc_1 // 1
    return

main_load_tuple_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 0
    bytec 8 // "pwl"
    app_global_get_ex
    dup
    cover 2
    bury 10
    bury 17
    bz main_ternary_false@8
    dig 15
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    pushint 10 // 10
    extract_uint16
    dig 3
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 3
    len
    uncover 4
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 6
    len
    uncover 7
    uncover 7
    uncover 2
    substring3
    bury 19
    bury 16
    bury 16
    bury 6
    swap
    bury 4

main_ternary_merge@9:
    dig 8
    assert // check self.pwl exists
    dig 3
    itob
    dig 5
    itob
    dig 15
    dup
    len
    itob
    extract 6 2
    swap
    concat
    dig 15
    dup
    len
    itob
    extract 6 2
    swap
    concat
    uncover 2
    bytec_3 // 0x000c
    concat
    dig 2
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    uncover 2
    concat
    bytec 6 // 0x0012
    concat
    swap
    concat
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    bytec 5 // 0x0004
    swap
    concat
    swap
    concat
    dig 14
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_ternary_false@8:
    bytec_0 // ""
    bury 3
    intc_0 // 0
    bytec_0 // ""
    bury 5
    intc_0 // 0
    bury 14
    intc_0 // 0
    bury 13
    intc_0 // 0
    bury 15
    b main_ternary_merge@9

main_store_tuple_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    pushint 10 // 10
    extract_uint16
    dig 3
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 3
    len
    uncover 4
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 6
    len
    uncover 7
    uncover 7
    uncover 2
    substring3
    uncover 5
    itob
    uncover 4
    itob
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    uncover 2
    bytec_3 // 0x000c
    concat
    dig 2
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    uncover 3
    concat
    bytec 6 // 0x0012
    concat
    swap
    concat
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    bytec 5 // 0x0004
    swap
    concat
    swap
    concat
    swap
    concat
    bytec 8 // "pwl"
    swap
    app_global_put
    intc_1 // 1
    return

main_bare_routing@31:
    txn OnCompletion
    bnz main_after_if_else@33
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return
