#pragma version 10

test_cases.tuple_support.nested_tuples.NestedTuples.approval_program:
    intcblock 1 2 0 3
    bytecblock "build_nested_call_count" "Hi" 0x151f7c75 "There" 0x000c "hi"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.__init__() -> void:
__init__:
    proto 0 0
    bytec_0 // "build_nested_call_count"
    intc_2 // 0
    app_global_put
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@8
    pushbytess 0x9e5a3ba7 0xcea0521b 0x373f5b24 0xec593096 // method "run_tests()bool", method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))", method "named_tuple((uint64,byte[],string))(uint64,byte[],string)", method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))"
    txna ApplicationArgs 0
    match __puya_arc4_router___run_tests_route@2 __puya_arc4_router___nested_tuple_params_route@3 __puya_arc4_router___named_tuple_route@4 __puya_arc4_router___nested_named_tuple_params_route@5
    intc_2 // 0
    retsub

__puya_arc4_router___run_tests_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub run_tests
    pushbytes 0x00
    intc_2 // 0
    uncover 2
    setbit
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___nested_tuple_params_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint16
    dig 1
    intc_1 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    dup
    intc_2 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    extract 2 0
    swap
    extract 2 8 // on error: Index access is out of bounds
    extract 0 8 // on error: Index access is out of bounds
    btoi
    callsub nested_tuple_params
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    uncover 2
    itob
    pushbytes 0x000a
    swap
    concat
    swap
    concat
    dig 1
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    pushbytes 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___named_tuple_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    dig 1
    pushint 8 // 8
    extract_uint16
    dig 2
    pushint 10 // 10
    extract_uint16
    dig 3
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 3
    len
    uncover 4
    uncover 3
    uncover 2
    substring3
    extract 2 0
    callsub named_tuple
    uncover 2
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    uncover 2
    bytec 4 // 0x000c
    concat
    dig 2
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___nested_named_tuple_params_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    dig 1
    pushint 8 // 8
    extract_uint16
    dig 2
    pushint 10 // 10
    extract_uint16
    dig 3
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 3
    len
    uncover 4
    uncover 3
    uncover 2
    substring3
    extract 2 0
    callsub nested_named_tuple_params
    uncover 4
    itob
    uncover 3
    itob
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    uncover 2
    bytec 4 // 0x000c
    concat
    dig 2
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    uncover 2
    concat
    pushbytes 0x0012
    concat
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___bare_routing@8:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@12
    txn ApplicationID
    !
    assert // is creating
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@12:
    intc_2 // 0
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.run_tests() -> uint64:
run_tests:
    proto 0 1
    bytec_1 // "Hi"
    bytec_3 // "There"
    callsub test_swap
    swap
    bytec_3 // "There"
    ==
    swap
    bytec_1 // "Hi"
    ==
    &&
    assert
    bytec_1 // "Hi"
    intc_2 // 0
    intc_1 // 2
    intc_0 // 1
    bytec_1 // "Hi"
    bytec_3 // "There"
    dup
    callsub test_rearrange
    uncover 4
    bytec_1 // "Hi"
    ==
    uncover 4
    !
    &&
    assert
    uncover 2
    intc_1 // 2
    ==
    uncover 2
    intc_0 // 1
    ==
    &&
    assert
    bytec_3 // "There"
    ==
    assert
    intc_0 // 1
    intc_1 // 2
    callsub test_intrinsics
    intc_0 // 1
    dup
    callsub test_nested_singles
    intc_0 // 1
    intc_2 // 0
    callsub test_nested_singles
    callsub test_nested_iteration
    callsub test_single_evaluation_nested
    intc_0 // 1
    retsub


// test_cases.tuple_support.nested_tuples.test_swap(args.0: bytes, args.1: bytes) -> bytes, bytes:
test_swap:
    proto 2 2
    frame_dig -1
    frame_dig -2
    retsub


// test_cases.tuple_support.nested_tuples.test_rearrange(_a: bytes, args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: bytes, args.2.1.1: bytes, _b: bytes) -> bytes, uint64, uint64, uint64, bytes:
test_rearrange:
    proto 7 5
    frame_dig -3
    frame_dig -6
    frame_dig -5
    frame_dig -4
    frame_dig -2
    retsub


// test_cases.tuple_support.nested_tuples.test_intrinsics(num1: uint64, num2: uint64) -> void:
test_intrinsics:
    proto 2 0
    frame_dig -2
    frame_dig -1
    addw
    swap
    !
    frame_dig -2
    frame_dig -1
    +
    uncover 2
    ==
    dup2
    &&
    assert
    swap
    assert
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: uint64) -> void:
test_nested_singles:
    proto 2 0
    intc_2 // 0
    intc_1 // 2
    frame_dig -2
    intc_0 // 1
    ==
    assert
    frame_dig -2
    frame_dig -1
    bz test_nested_singles_after_if_else@2
    intc_3 // 3
    frame_bury 0
    pushint 4 // 4
    frame_bury 2
    pushint 5 // 5
    frame_bury 1

test_nested_singles_after_if_else@2:
    frame_dig -1
    intc_3 // 3
    *
    frame_dig 0
    ==
    assert
    intc_1 // 2
    pushint 5 // 5
    frame_dig -1
    select
    frame_dig 1
    dig 1
    ==
    assert
    frame_dig 2
    dup
    cover 2
    frame_dig -2
    +
    ==
    assert
    intc_0 // 1
    pushint 4 // 4
    frame_dig -1
    select
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_iteration() -> void:
test_nested_iteration:
    proto 0 0
    pushbytes ""
    intc_2 // 0
    intc_0 // 1
    intc_1 // 2
    intc_2 // 0

test_nested_iteration_for_body@1:
    frame_dig 2
    uncover 2
    +
    frame_dig 1
    +
    frame_bury 1
    switch test_nested_iteration_for_header_1@3 test_nested_iteration_for_header_2@4 test_nested_iteration_for_header_3@5
    b test_nested_iteration_after_for@6

test_nested_iteration_for_header_1@3:
    intc_0 // 1
    intc_1 // 2
    frame_bury 2
    intc_0 // 1
    swap
    b test_nested_iteration_for_body@1

test_nested_iteration_for_header_2@4:
    intc_1 // 2
    intc_0 // 1
    frame_bury 2
    intc_0 // 1
    swap
    b test_nested_iteration_for_body@1

test_nested_iteration_for_header_3@5:
    intc_3 // 3
    intc_1 // 2
    frame_bury 2
    intc_1 // 2
    swap
    b test_nested_iteration_for_body@1

test_nested_iteration_after_for@6:
    intc_2 // 0
    intc_0 // 1
    frame_bury 0
    intc_1 // 2
    swap

test_nested_iteration_for_body@7:
    frame_dig 0
    uncover 2
    +
    frame_dig 1
    +
    frame_bury 1
    switch test_nested_iteration_for_header_1@9 test_nested_iteration_for_header_2@10 test_nested_iteration_for_header_3@11
    b test_nested_iteration_after_for@12

test_nested_iteration_for_header_1@9:
    intc_0 // 1
    intc_1 // 2
    frame_bury 0
    intc_0 // 1
    swap
    b test_nested_iteration_for_body@7

test_nested_iteration_for_header_2@10:
    intc_1 // 2
    intc_0 // 1
    frame_bury 0
    intc_0 // 1
    swap
    b test_nested_iteration_for_body@7

test_nested_iteration_for_header_3@11:
    intc_3 // 3
    intc_1 // 2
    frame_bury 0
    intc_1 // 2
    swap
    b test_nested_iteration_for_body@7

test_nested_iteration_after_for@12:
    frame_dig 1
    pushint 8 // 8
    /
    intc_3 // 3
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested() -> void:
test_single_evaluation_nested:
    proto 0 0
    bytec_0 // "build_nested_call_count"
    intc_2 // 0
    app_global_put
    callsub build_nested
    popn 2
    bytec 5 // "hi"
    ==
    assert
    intc_2 // 0
    bytec_0 // "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    intc_0 // 1
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.build_nested() -> bytes, uint64, bytes:
build_nested:
    proto 0 3
    intc_2 // 0
    bytec_0 // "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    intc_0 // 1
    +
    bytec_0 // "build_nested_call_count"
    swap
    app_global_put
    bytec 5 // "hi"
    intc_0 // 1
    pushbytes 0x686d6d6d
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(args.0: bytes, args.1.0: bytes, args.1.1.0: uint64) -> bytes, bytes, uint64:
nested_tuple_params:
    proto 3 3
    frame_dig -2
    frame_dig -3
    frame_dig -1
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple(args.a: uint64, args.b: bytes, args.c: bytes) -> uint64, bytes, bytes:
named_tuple:
    proto 3 3
    frame_dig -3
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params(args.foo: uint64, args.foo_arc: bytes, args.child.a: uint64, args.child.b: bytes, args.child.c: bytes) -> uint64, bytes, uint64, bytes, bytes:
nested_named_tuple_params:
    proto 5 5
    frame_dig -5
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    retsub
