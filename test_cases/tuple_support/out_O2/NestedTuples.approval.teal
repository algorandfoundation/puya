#pragma version 10
#pragma typetrack false

// test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 2 8
    bytecblock "build_nested_call_count" 0x151f7c75 0x000c
    pushbytes ""
    dupn 3
    txn ApplicationID
    bnz main_after_if_else@2
    bytec_0 // "build_nested_call_count"
    intc_1 // 0
    app_global_put

main_after_if_else@2:
    txn NumAppArgs
    bz main_bare_routing@13
    pushbytess 0x443479ec 0x9e5a3ba7 0xcea0521b 0x373f5b24 0xec593096 // method "mutate_tuple()(uint64[],(uint64,byte[],string))", method "run_tests()bool", method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))", method "named_tuple((uint64,byte[],string))(uint64,byte[],string)", method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))"
    txna ApplicationArgs 0
    match main_mutate_tuple_route@5 main_run_tests_route@9 main_nested_tuple_params_route@10 main_named_tuple_route@11 main_nested_named_tuple_params_route@12

main_after_if_else@15:
    intc_1 // 0
    return

main_nested_named_tuple_params_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    pushint 10 // 10
    extract_uint16
    dig 3
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 3
    len
    uncover 4
    uncover 3
    uncover 2
    substring3
    extract 2 0
    uncover 4
    itob
    uncover 3
    itob
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    uncover 2
    bytec_2 // 0x000c
    concat
    dig 2
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    uncover 2
    concat
    pushbytes 0x0012
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_named_tuple_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    pushint 10 // 10
    extract_uint16
    dig 3
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 3
    len
    uncover 4
    uncover 3
    uncover 2
    substring3
    extract 2 0
    uncover 2
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    uncover 2
    bytec_2 // 0x000c
    concat
    dig 2
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_nested_tuple_params_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16
    dig 1
    intc_2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    swap
    cover 3
    substring3
    dup
    intc_1 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    extract 2 0
    swap
    extract 2 8 // on error: Index access is out of bounds
    intc_1 // 0
    extract_uint64
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    uncover 2
    itob
    pushbytes 0x000a
    swap
    concat
    swap
    concat
    dig 1
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    pushbytes 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_run_tests_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    intc_2 // 2
    addw
    swap
    !
    swap
    pushint 3 // 3
    ==
    dup2
    &&
    assert
    swap
    assert
    assert
    intc_1 // 0
    bury 1
    intc_1 // 0
    intc_0 // 1
    bury 3
    intc_2 // 2
    swap

main_for_body@36:
    dig 3
    uncover 2
    +
    dig 2
    +
    bury 2
    switch main_for_header_1@37 main_for_header_2@38 main_for_header_3@39
    intc_1 // 0
    intc_0 // 1
    bury 5
    intc_2 // 2
    swap

main_for_body@41:
    dig 5
    uncover 2
    +
    dig 2
    +
    bury 2
    switch main_for_header_1@42 main_for_header_2@43 main_for_header_3@44
    dup
    intc_3 // 8
    /
    pushint 3 // 3
    ==
    assert
    bytec_0 // "build_nested_call_count"
    intc_1 // 0
    app_global_put
    intc_1 // 0
    bytec_0 // "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    intc_0 // 1
    +
    bytec_0 // "build_nested_call_count"
    swap
    app_global_put
    intc_1 // 0
    bytec_0 // "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    intc_0 // 1
    ==
    assert
    pushbytes 0x151f7c7580
    log
    intc_0 // 1
    return

main_for_header_3@44:
    pushint 3 // 3
    intc_2 // 2
    bury 5
    intc_2 // 2
    swap
    b main_for_body@41

main_for_header_2@43:
    intc_2 // 2
    intc_0 // 1
    bury 5
    intc_0 // 1
    swap
    b main_for_body@41

main_for_header_1@42:
    intc_0 // 1
    intc_2 // 2
    bury 5
    intc_0 // 1
    swap
    b main_for_body@41

main_for_header_3@39:
    pushint 3 // 3
    intc_2 // 2
    bury 3
    intc_2 // 2
    swap
    b main_for_body@36

main_for_header_2@38:
    intc_2 // 2
    intc_0 // 1
    bury 3
    intc_0 // 1
    swap
    b main_for_body@36

main_for_header_1@37:
    intc_0 // 1
    intc_2 // 2
    bury 3
    intc_0 // 1
    swap
    b main_for_body@36

main_mutate_tuple_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 0
    bury 3

main_for_header@6:
    dig 2
    pushint 3 // 3
    <
    bz main_after_for@8
    dig 2
    dup
    intc_3 // 8
    *
    pushbytes 0x000000000000000000000000000000010000000000000002
    swap
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    dig 1
    itob
    b==
    assert
    intc_0 // 1
    +
    bury 3
    b main_for_header@6

main_after_for@8:
    pushbytes 0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000
    log
    intc_0 // 1
    return

main_bare_routing@13:
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
