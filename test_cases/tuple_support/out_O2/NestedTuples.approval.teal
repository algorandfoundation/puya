#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 2 8
    bytecblock 0x151f7c75 "box" "twm" "" "build_nested_call_count" 0x0004 "pwl"
    intc_0 // 0
    dupn 2
    bytec_3 // ""
    dupn 13
    txn ApplicationID
    bnz main_after_if_else@2
    bytec 4 // "build_nested_call_count"
    intc_0 // 0
    app_global_put
    bytec_2 // "twm"
    pushbytes 0x0004000600000000000000000000000c000e00000000
    app_global_put

main_after_if_else@2:
    txn NumAppArgs
    bz main___algopy_default_create@23
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x383e1e8b 0x68cbedd7 0x2263fcf1 0xbfc37339 0xc660beaa 0xb6c215ff 0x907c9042 0xd51c7174 0xf8cc2b50 0x3d486db0 0x9e5a3ba7 0xcea0521b 0x373f5b24 0xec593096 // method "store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void", method "load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])", method "store_tuple_in_box((uint64,uint64))void", method "is_tuple_in_box((uint64,uint64))bool", method "load_tuple_from_box((uint64,uint64))(uint64,uint64)", method "maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)", method "load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)", method "load_tuple_from_local_state_or_default(string)(uint64,uint64)", method "mutate_local_tuple()(uint64[],(uint64,byte[],string))", method "mutate_tuple_in_storage_currently_supported_method()void", method "run_tests()bool", method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))", method "named_tuple((uint64,byte[],string))(uint64,byte[],string)", method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))"
    txna ApplicationArgs 0
    match main_store_tuple_route@6 main_load_tuple_route@7 main_store_tuple_in_box_route@8 main_is_tuple_in_box_route@9 main_load_tuple_from_box_route@10 main_maybe_load_tuple_from_box_route@11 main_load_tuple_from_box_or_default_route@12 main_load_tuple_from_local_state_or_default_route@13 main_mutate_local_tuple_route@14 main_mutate_tuple_in_storage_currently_supported_method_route@15 main_run_tests_route@16 main_nested_tuple_params_route@17 main_named_tuple_route@18 main_nested_named_tuple_params_route@19
    err

main_nested_named_tuple_params_route@19:
    txna ApplicationArgs 1
    dup
    pushint 16 // 16
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 18 // 18
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))
    dig 1
    len
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_3 // 8
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 12 // 12
    ==
    assert // invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))
    dig 1
    pushint 10 // 10
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 14 // 14
    +
    dup2
    ==
    assert // invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))
    dig 2
    len
    swap
    cover 3
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    +
    pushint 18 // 18
    +
    ==
    assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.Parent
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_named_tuple_route@18:
    txna ApplicationArgs 1
    dup
    intc_3 // 8
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 12 // 12
    ==
    assert // invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))
    dig 1
    pushint 10 // 10
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 14 // 14
    +
    dup2
    ==
    assert // invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))
    dig 2
    len
    dig 3
    uncover 3
    dig 2
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    uncover 2
    +
    ==
    assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.Child
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_nested_tuple_params_route@17:
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 4 // 4
    ==
    assert // invalid tail pointer at index 0 of ((len+utf8[]),((len+uint8[]),(uint64)))
    dig 1
    intc_2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 6 // 6
    +
    dig 2
    dig 1
    ==
    assert // invalid tail pointer at index 1 of ((len+utf8[]),((len+uint8[]),(uint64)))
    dig 3
    len
    uncover 4
    uncover 4
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 10 // 10
    ==
    assert // invalid tail pointer at index 0 of ((len+uint8[]),(uint64))
    dig 1
    len
    dig 2
    cover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 12 // 12
    +
    uncover 4
    +
    uncover 3
    ==
    assert // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.tuple<arc4.uint64>>>
    uncover 2
    extract 2 0
    swap
    extract 2 0
    uncover 2
    extract 2 8
    extract 0 8
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dup
    len
    pushint 4 // 4
    +
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    pushbytes 0x000a
    uncover 4
    concat
    swap
    concat
    swap
    itob
    extract 6 2
    bytec 5 // 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_run_tests_route@16:
    intc_1 // 1
    intc_2 // 2
    addw
    swap
    !
    swap
    pushint 3 // 3
    ==
    dup2
    &&
    assert
    swap
    assert
    assert
    intc_0 // 0
    bury 1
    intc_0 // 0
    intc_1 // 1
    bury 7
    intc_2 // 2
    swap

main_for_body@87:
    dig 7
    uncover 2
    +
    dig 2
    +
    bury 2
    switch main_for_header_1@88 main_for_header_2@89 main_for_header_3@90
    intc_0 // 0
    intc_1 // 1
    bury 15
    intc_2 // 2
    swap

main_for_body@92:
    dig 15
    uncover 2
    +
    dig 2
    +
    bury 2
    switch main_for_header_1@93 main_for_header_2@94 main_for_header_3@95
    dup
    intc_3 // 8
    /
    pushint 3 // 3
    ==
    assert
    bytec 4 // "build_nested_call_count"
    intc_1 // 1
    app_global_put
    pushbytes 0x151f7c7580
    log
    intc_1 // 1
    return

main_for_header_3@95:
    pushint 3 // 3
    intc_2 // 2
    bury 15
    intc_2 // 2
    swap
    b main_for_body@92

main_for_header_2@94:
    intc_2 // 2
    intc_1 // 1
    bury 15
    intc_1 // 1
    swap
    b main_for_body@92

main_for_header_1@93:
    intc_1 // 1
    intc_2 // 2
    bury 15
    intc_1 // 1
    swap
    b main_for_body@92

main_for_header_3@90:
    pushint 3 // 3
    intc_2 // 2
    bury 7
    intc_2 // 2
    swap
    b main_for_body@87

main_for_header_2@89:
    intc_2 // 2
    intc_1 // 1
    bury 7
    intc_1 // 1
    swap
    b main_for_body@87

main_for_header_1@88:
    intc_1 // 1
    intc_2 // 2
    bury 7
    intc_1 // 1
    swap
    b main_for_body@87

main_mutate_tuple_in_storage_currently_supported_method_route@15:
    intc_0 // 0
    bytec_2 // "twm"
    app_global_get_ex
    assert // check self.twm exists
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    intc_2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    pushbytes 0x0000000000000001
    concat // on error: max array length exceeded
    swap
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    dig 2
    len
    swap
    cover 3
    substring3
    dup
    extract 0 8
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    pushint 10 // 10
    extract_uint16
    dig 3
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 3
    len
    uncover 4
    uncover 3
    uncover 2
    substring3
    extract 2 0
    dig 3
    len
    pushint 4 // 4
    +
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    uncover 3
    pushbytes 0x000c
    concat
    dig 1
    len
    pushint 12 // 12
    +
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    swap
    itob
    extract 6 2
    uncover 2
    swap
    concat
    uncover 2
    concat
    swap
    concat
    swap
    itob
    extract 6 2
    bytec 5 // 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_2 // "twm"
    swap
    app_global_put
    intc_1 // 1
    return

main_mutate_local_tuple_route@14:
    intc_0 // 0
    bury 9

main_for_header@37:
    dig 8
    pushint 3 // 3
    <
    bz main_after_for@39
    dig 8
    dup
    intc_3 // 8
    *
    pushbytes 0x000000000000000000000000000000010000000000000002
    swap
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    dig 1
    itob
    b==
    assert
    intc_1 // 1
    +
    bury 9
    b main_for_header@37

main_after_for@39:
    pushbytes 0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000
    log
    intc_1 // 1
    return

main_load_tuple_from_local_state_or_default_route@13:
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    callsub echo
    callsub get_sender_inefficiently
    pushint 4 // 4
    intc_2 // 2
    callsub simple_tup
    bury 5
    bury 5
    intc_0 // 0
    uncover 2
    app_local_get_ex
    swap
    bury 17
    bz main_ternary_false@43
    dig 15
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64

main_ternary_merge@44:
    swap
    itob
    swap
    itob
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_ternary_false@43:
    dig 2
    dig 2
    b main_ternary_merge@44

main_load_tuple_from_box_or_default_route@12:
    txna ApplicationArgs 1
    dup
    len
    pushint 16 // 16
    ==
    assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup
    bytec_1 // "box"
    swap
    concat
    pushint 4 // 4
    intc_2 // 2
    callsub simple_tup
    bury 6
    bury 6
    box_get
    swap
    bury 17
    bz main_ternary_false@48
    dig 15
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64

main_ternary_merge@49:
    swap
    itob
    swap
    itob
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_ternary_false@48:
    dig 4
    dig 4
    b main_ternary_merge@49

main_maybe_load_tuple_from_box_route@11:
    txna ApplicationArgs 1
    dup
    len
    pushint 16 // 16
    ==
    assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup
    bytec_1 // "box"
    swap
    concat
    box_get
    dup
    cover 2
    bury 12
    bury 17
    bz main_ternary_false@53
    dig 15
    dup
    intc_0 // 0
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64

main_ternary_merge@54:
    swap
    itob
    swap
    itob
    concat
    pushbytes 0x00
    intc_0 // 0
    dig 12
    setbit
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_ternary_false@53:
    bytec_3 // ""
    dup
    b main_ternary_merge@54

main_load_tuple_from_box_route@10:
    txna ApplicationArgs 1
    dup
    len
    pushint 16 // 16
    ==
    assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup
    bytec_1 // "box"
    swap
    concat
    box_get
    assert // check self.box entry exists
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_is_tuple_in_box_route@9:
    txna ApplicationArgs 1
    dup
    len
    pushint 16 // 16
    ==
    assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup
    bytec_1 // "box"
    swap
    concat
    box_len
    bury 1
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_store_tuple_in_box_route@8:
    txna ApplicationArgs 1
    dup
    len
    pushint 16 // 16
    ==
    assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup
    dup
    extract 0 8
    dig 1
    intc_3 // 8
    extract_uint64
    intc_1 // 1
    +
    bytec_1 // "box"
    uncover 3
    concat
    swap
    itob
    uncover 2
    swap
    concat
    box_put
    intc_1 // 1
    return

main_load_tuple_route@7:
    intc_0 // 0
    bytec 6 // "pwl"
    app_global_get_ex
    assert // check self.pwl exists
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_store_tuple_route@6:
    txna ApplicationArgs 1
    dup
    bury 16
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 4 // 4
    ==
    assert // invalid tail pointer at index 0 of ((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))
    dig 1
    intc_2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    pushint 16 // 16
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 18 // 18
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))
    dig 1
    len
    substring3
    dup
    intc_3 // 8
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 12 // 12
    ==
    assert // invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))
    dig 1
    pushint 10 // 10
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 14 // 14
    +
    dup2
    ==
    assert // invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))
    dig 2
    len
    swap
    cover 3
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    +
    pushint 22 // 22
    +
    dup
    bury 16
    dig 1
    ==
    assert // invalid tail pointer at index 1 of ((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))
    dig 1
    len
    dup
    cover 2
    bury 14
    swap
    substring3
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    dup
    bury 14
    intc_2 // 2
    *
    bury 8
    extract 2 0
    bury 17
    intc_0 // 0
    bury 8

main_for_header@65:
    dig 7
    dig 12
    <
    bz main_after_for@67
    dig 7
    dup
    intc_2 // 2
    *
    dig 18
    dup
    cover 3
    swap
    extract_uint16 // on error: invalid array encoding
    dup
    dig 10
    dup
    cover 5
    ==
    assert // invalid tail pointer for (len+(uint64,(len+uint8[]),(len+utf8[]))[])
    swap
    intc_1 // 1
    +
    dig 15
    dig 1
    - // on error: index access is out of bounds
    dig 3
    len
    dig 2
    intc_2 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    swap
    cover 3
    substring3
    dup
    intc_3 // 8
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 12 // 12
    ==
    assert // invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))
    dig 1
    pushint 10 // 10
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 14 // 14
    +
    dup2
    ==
    assert // invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))
    dig 2
    len
    swap
    cover 3
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    +
    uncover 2
    +
    bury 8
    bury 8
    b main_for_header@65

main_after_for@67:
    dig 6
    intc_2 // 2
    +
    dig 13
    +
    dig 11
    ==
    assert // invalid number of bytes for test_cases.tuple_support.nested_tuples.ParentWithList
    bytec 6 // "pwl"
    dig 15
    app_global_put
    intc_1 // 1
    return

main___algopy_default_create@23:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_1 // 1
    return


// test_cases.tuple_support.nested_tuples.get_sender_inefficiently() -> bytes:
get_sender_inefficiently:
    pushbytes "Order is important"
    log
    txn Sender
    retsub


// test_cases.tuple_support.nested_tuples.simple_tup(a: uint64, b: uint64) -> uint64, uint64:
simple_tup:
    proto 2 2
    pushbytes "I'm just a simple tup"
    log
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.tuple_support.nested_tuples.echo(s: bytes) -> bytes:
echo:
    proto 1 1
    pushbytes "Is there an echo in here?"
    log
    frame_dig -1
    retsub
