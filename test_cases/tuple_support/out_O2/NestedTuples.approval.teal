#pragma version 10

test_cases.tuple_support.nested_tuples.NestedTuples.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    txn NumAppArgs
    bz main_bare_routing@8
    method "run_tests()bool"
    method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))"
    txna ApplicationArgs 0
    match main_run_tests_route@4 main_nested_tuple_params_route@5
    err // reject transaction

main_run_tests_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub run_tests
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_nested_tuple_params_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    dup
    int 0
    extract_uint16
    swap
    dup
    int 2
    extract_uint16
    dig 1
    uncover 3
    dig 2
    substring3
    cover 2
    dig 1
    len
    substring3
    swap
    extract 2 0
    swap
    dup
    int 0
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    swap
    extract 2 8 // on error: Index access is out of bounds
    swap
    extract 2 0
    swap
    extract 0 8 // on error: Index access is out of bounds
    btoi
    callsub nested_tuple_params
    cover 2
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    uncover 2
    itob
    byte 0x000a
    swap
    concat
    swap
    concat
    dig 1
    len
    int 4
    +
    itob
    extract 6 2
    byte 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@8:
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.run_tests() -> uint64:
run_tests:
    proto 0 1
    byte "Hi"
    byte "There"
    callsub test_swap
    swap
    byte "There"
    ==
    swap
    byte "Hi"
    ==
    &&
    assert
    byte "Hi"
    int 0
    int 2
    int 1
    byte "Hi"
    byte "There"
    dup
    callsub test_rearrange
    cover 4
    cover 3
    cover 2
    swap
    byte "Hi"
    ==
    swap
    !
    &&
    assert
    int 2
    ==
    swap
    int 1
    ==
    &&
    assert
    byte "There"
    ==
    assert
    int 1
    int 2
    callsub test_intrinsics
    callsub test_nested_slicing
    int 1
    dup
    callsub test_nested_singles
    int 1
    int 0
    callsub test_nested_singles
    callsub test_nested_mutation
    callsub test_nested_iteration
    callsub test_single_evaluation_nested
    int 1
    retsub


// test_cases.tuple_support.nested_tuples.test_swap(args.0: bytes, args.1: bytes) -> bytes, bytes:
test_swap:
    proto 2 2
    frame_dig -1
    frame_dig -2
    retsub


// test_cases.tuple_support.nested_tuples.test_rearrange(_a: bytes, args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: bytes, args.2.1.1: bytes, _b: bytes) -> bytes, uint64, uint64, uint64, bytes:
test_rearrange:
    proto 7 5
    frame_dig -3
    frame_dig -6
    frame_dig -5
    frame_dig -4
    frame_dig -2
    retsub


// test_cases.tuple_support.nested_tuples.test_intrinsics(num1: uint64, num2: uint64) -> void:
test_intrinsics:
    proto 2 0
    frame_dig -2
    frame_dig -1
    addw
    swap
    !
    swap
    frame_dig -2
    frame_dig -1
    +
    ==
    dup2
    &&
    assert
    swap
    assert
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_slicing() -> void:
test_nested_slicing:
    proto 0 0
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: uint64) -> void:
test_nested_singles:
    proto 2 0
    int 0
    int 2
    frame_dig -2
    int 1
    ==
    assert
    frame_dig -2
    frame_dig -1
    bz test_nested_singles_after_if_else@2
    int 3
    frame_bury 0
    int 4
    frame_bury 2
    int 5
    frame_bury 1

test_nested_singles_after_if_else@2:
    frame_dig -1
    int 3
    *
    frame_dig 0
    ==
    assert
    int 2
    int 5
    frame_dig -1
    select
    frame_dig 1
    dig 1
    ==
    assert
    frame_dig 2
    dup
    cover 2
    frame_dig -2
    +
    ==
    assert
    int 1
    int 4
    frame_dig -1
    select
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_mutation() -> void:
test_nested_mutation:
    proto 0 0
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_iteration() -> void:
test_nested_iteration:
    proto 0 0
    byte ""
    int 0
    int 1
    int 2
    int 0

test_nested_iteration_for_body@1:
    frame_dig 2
    uncover 2
    +
    frame_dig 1
    +
    frame_bury 1
    switch test_nested_iteration_for_header_1@3 test_nested_iteration_for_header_2@4 test_nested_iteration_for_header_3@5
    b test_nested_iteration_after_for@6

test_nested_iteration_for_header_1@3:
    int 1
    int 2
    frame_bury 2
    int 1
    swap
    b test_nested_iteration_for_body@1

test_nested_iteration_for_header_2@4:
    int 2
    int 1
    frame_bury 2
    int 1
    swap
    b test_nested_iteration_for_body@1

test_nested_iteration_for_header_3@5:
    int 3
    int 2
    frame_bury 2
    int 2
    swap
    b test_nested_iteration_for_body@1

test_nested_iteration_after_for@6:
    int 0
    int 1
    frame_bury 0
    int 2
    swap

test_nested_iteration_for_body@7:
    frame_dig 0
    uncover 2
    +
    frame_dig 1
    +
    frame_bury 1
    switch test_nested_iteration_for_header_1@9 test_nested_iteration_for_header_2@10 test_nested_iteration_for_header_3@11
    b test_nested_iteration_after_for@12

test_nested_iteration_for_header_1@9:
    int 1
    int 2
    frame_bury 0
    int 1
    swap
    b test_nested_iteration_for_body@7

test_nested_iteration_for_header_2@10:
    int 2
    int 1
    frame_bury 0
    int 1
    swap
    b test_nested_iteration_for_body@7

test_nested_iteration_for_header_3@11:
    int 3
    int 2
    frame_bury 0
    int 2
    swap
    b test_nested_iteration_for_body@7

test_nested_iteration_after_for@12:
    frame_dig 1
    int 8
    /
    int 3
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested() -> void:
test_single_evaluation_nested:
    proto 0 0
    byte "build_nested_call_count"
    int 0
    app_global_put
    callsub build_nested
    popn 2
    byte "hi"
    ==
    assert
    int 0
    byte "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    int 1
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.build_nested() -> bytes, uint64, bytes:
build_nested:
    proto 0 3
    int 0
    byte "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    int 1
    +
    byte "build_nested_call_count"
    swap
    app_global_put
    byte "hi"
    int 1
    byte 0x686d6d6d
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(args.0: bytes, args.1.0: bytes, args.1.1.0: uint64) -> bytes, bytes, uint64:
nested_tuple_params:
    proto 3 3
    frame_dig -2
    frame_dig -3
    frame_dig -1
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.__init__() -> void:
__init__:
    proto 0 0
    byte "build_nested_call_count"
    int 0
    app_global_put
    retsub
