{
  "version": 3,
  "sources": [
    "../tuple_storage.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeQ;AAAA;;AAAA;AAIA;AAAA;;AAAA;AACW;AAAA;AAAA;AAAA;AAAA;;;AAAX;AAAA;AAAA;AAJQ;;AAIR;AAAA;AAAA;AAAA;AAVR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AA6BK;;AAAA;AAAA;AAAA;;AAAA;AA7BL;;;AA+BiB;;AAAT;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAzBL;;;AA2BQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AArBL;;;AAuBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAjBL;;;AAmBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFH;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEoB;AAAA;AAAA;AAAA;AAAA;;;AAAjB;AAAA;AAAA;AAAuC;;AAAvC;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACS;;AAAT;;AAAA;;AAAA;AAHH;;AAZL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"tup\" 0x000a \"box\" \"glob\" \"loc\" 0x000a000000000000000000010000000000000000 0x00010000000000000000"
    },
    "59": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "64": {
      "op": "bytec_0 // \"tup\"",
      "defined_out": [
        "\"tup\""
      ],
      "stack_out": [
        "\"tup\""
      ]
    },
    "65": {
      "op": "bytec 5 // 0x000a000000000000000000010000000000000000",
      "defined_out": [
        "\"tup\"",
        "0x000a000000000000000000010000000000000000"
      ],
      "stack_out": [
        "\"tup\"",
        "0x000a000000000000000000010000000000000000"
      ]
    },
    "67": {
      "op": "app_global_put",
      "stack_out": []
    },
    "68": {
      "op": "bytec_3 // \"glob\"",
      "defined_out": [
        "\"glob\""
      ],
      "stack_out": [
        "\"glob\""
      ]
    },
    "69": {
      "op": "bytec 5 // 0x000a000000000000000000010000000000000000",
      "stack_out": [
        "\"glob\"",
        "0x000a000000000000000000010000000000000000"
      ]
    },
    "71": {
      "op": "app_global_put",
      "stack_out": []
    },
    "72": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "73": {
      "op": "bytec_0 // \"tup\"",
      "stack_out": [
        "0",
        "\"tup\""
      ]
    },
    "74": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "75": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "76": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0"
      ]
    },
    "79": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "0x000a"
      ]
    },
    "80": {
      "op": "swap",
      "stack_out": [
        "0x000a",
        "aggregate%extract%1#0"
      ]
    },
    "81": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%6#0"
      ]
    },
    "82": {
      "op": "bytec 6 // 0x00010000000000000000",
      "defined_out": [
        "0x00010000000000000000",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%6#0",
        "0x00010000000000000000"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0"
      ]
    },
    "85": {
      "op": "bytec_0 // \"tup\"",
      "stack_out": [
        "aggregate%concat%2#0",
        "\"tup\""
      ]
    },
    "86": {
      "op": "swap",
      "stack_out": [
        "\"tup\"",
        "aggregate%concat%2#0"
      ]
    },
    "87": {
      "op": "app_global_put",
      "stack_out": []
    },
    "88": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "90": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "93": {
      "op": "pushbytess 0xbec76d87 0xacc253ae 0xe844940c 0x6222ef1a 0x1b269b50 // method \"bootstrap()void\", method \"mutate_tuple(uint64)void\", method \"mutate_box(uint64)void\", method \"mutate_global(uint64)void\", method \"mutate_local(uint64)void\"",
      "defined_out": [
        "Method(bootstrap()void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "Method(mutate_tuple(uint64)void)"
      ],
      "stack_out": [
        "Method(bootstrap()void)",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)"
      ]
    },
    "120": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(bootstrap()void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(bootstrap()void)",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "tmp%2#0"
      ]
    },
    "123": {
      "op": "match main_bootstrap_route@5 main_mutate_tuple_route@6 main_mutate_box_route@7 main_mutate_global_route@8 main_mutate_local_route@9",
      "stack_out": []
    },
    "135": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "136": {
      "op": "return",
      "stack_out": []
    },
    "137": {
      "block": "main_mutate_local_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "139": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "140": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "141": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "143": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "144": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#0"
      ]
    },
    "147": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#3",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#3"
      ]
    },
    "149": {
      "op": "dup",
      "defined_out": [
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "150": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "0"
      ]
    },
    "151": {
      "op": "bytec 4 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "0",
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "0",
        "\"loc\""
      ]
    },
    "153": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#1",
        "maybe_value%0#1",
        "tmp%0#3",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "154": {
      "error": "check self.loc exists for account",
      "op": "assert // check self.loc exists for account",
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "maybe_value%0#1"
      ]
    },
    "155": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)",
        "tmp%0#3",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)"
      ]
    },
    "156": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)",
        "0"
      ]
    },
    "157": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "maybe_value%0#1",
        "tmp%0#3",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "maybe_value%0#1",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "158": {
      "op": "dig 1",
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "maybe_value%0#1",
        "aggregate%extract_uint16%7#0",
        "maybe_value%0#1 (copy)"
      ]
    },
    "160": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%len%7#0",
        "maybe_value%0#1",
        "tmp%0#3",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "maybe_value%0#1",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%7#0"
      ]
    },
    "161": {
      "op": "dig 2",
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "maybe_value%0#1",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%7#0",
        "maybe_value%0#1 (copy)"
      ]
    },
    "163": {
      "op": "cover 2",
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%7#0"
      ]
    },
    "165": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%7#0",
        "maybe_value%0#1",
        "tmp%0#3",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "maybe_value%0#1",
        "aggregate%substring3%7#0"
      ]
    },
    "166": {
      "op": "swap",
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "aggregate%substring3%7#0",
        "maybe_value%0#1"
      ]
    },
    "167": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%7#0",
        "aggregate%substring3%7#0",
        "tmp%0#3",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "aggregate%substring3%7#0",
        "aggregate%extract%7#0"
      ]
    },
    "170": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%7#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%7#0 (copy)",
        "tmp%0#3",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#3",
        "aggregate%substring3%7#0",
        "aggregate%extract%7#0",
        "aggregate%substring3%7#0 (copy)"
      ]
    },
    "172": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#3",
        "aggregate%substring3%7#0",
        "aggregate%extract%7#0",
        "aggregate%substring3%7#0 (copy)",
        "val#0"
      ]
    },
    "174": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract%7#0",
        "aggregate%substring3%7#0",
        "concat%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%substring3%7#0",
        "aggregate%extract%7#0",
        "concat%0#0"
      ]
    },
    "175": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "aggregate%extract%7#0",
        "concat%0#0",
        "aggregate%substring3%7#0"
      ]
    },
    "177": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3",
        "aggregate%extract%7#0",
        "concat%0#0",
        "aggregate%substring3%7#0",
        "0"
      ]
    },
    "178": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%7#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%extract%7#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "179": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%7#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%extract%7#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "180": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract%7#0",
        "concat%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%extract%7#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "181": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%7#0",
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%extract%7#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "182": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%7#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%extract%7#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "185": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%extract%7#0",
        "replace%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%extract%7#0",
        "replace%0#0"
      ]
    },
    "187": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%7#0",
        "replace%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%extract%7#0",
        "replace%0#0",
        "0x000a"
      ]
    },
    "188": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "replace%0#0",
        "0x000a",
        "aggregate%extract%7#0"
      ]
    },
    "190": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%23#0",
        "replace%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "replace%0#0",
        "aggregate%head%23#0"
      ]
    },
    "191": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "aggregate%head%23#0",
        "replace%0#0"
      ]
    },
    "192": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%8#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "aggregate%concat%8#0"
      ]
    },
    "193": {
      "op": "bytec 4 // \"loc\""
    },
    "195": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "\"loc\"",
        "aggregate%concat%8#0"
      ]
    },
    "196": {
      "op": "app_local_put",
      "stack_out": []
    },
    "197": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "return",
      "stack_out": []
    },
    "199": {
      "block": "main_mutate_global_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "201": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "202": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "203": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "205": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "206": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#0"
      ]
    },
    "209": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "0"
      ]
    },
    "210": {
      "op": "bytec_3 // \"glob\"",
      "defined_out": [
        "\"glob\"",
        "0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "0",
        "\"glob\""
      ]
    },
    "211": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#1",
        "maybe_value%0#1",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "212": {
      "error": "check self.glob exists",
      "op": "assert // check self.glob exists",
      "stack_out": [
        "val#0",
        "maybe_value%0#1"
      ]
    },
    "213": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)"
      ]
    },
    "214": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)",
        "0"
      ]
    },
    "215": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "maybe_value%0#1",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "216": {
      "op": "dig 1",
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "aggregate%extract_uint16%6#0",
        "maybe_value%0#1 (copy)"
      ]
    },
    "218": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%len%6#0",
        "maybe_value%0#1",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%6#0"
      ]
    },
    "219": {
      "op": "dig 2",
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%6#0",
        "maybe_value%0#1 (copy)"
      ]
    },
    "221": {
      "op": "cover 2",
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%6#0"
      ]
    },
    "223": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%6#0",
        "maybe_value%0#1",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "aggregate%substring3%6#0"
      ]
    },
    "224": {
      "op": "swap",
      "stack_out": [
        "val#0",
        "aggregate%substring3%6#0",
        "maybe_value%0#1"
      ]
    },
    "225": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%6#0",
        "aggregate%substring3%6#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%substring3%6#0",
        "aggregate%extract%6#0"
      ]
    },
    "228": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%6#0",
        "aggregate%substring3%6#0",
        "aggregate%substring3%6#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%substring3%6#0",
        "aggregate%extract%6#0",
        "aggregate%substring3%6#0 (copy)"
      ]
    },
    "230": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%substring3%6#0",
        "aggregate%extract%6#0",
        "aggregate%substring3%6#0 (copy)",
        "val#0"
      ]
    },
    "232": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract%6#0",
        "aggregate%substring3%6#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%6#0",
        "aggregate%extract%6#0",
        "concat%0#0"
      ]
    },
    "233": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%6#0",
        "concat%0#0",
        "aggregate%substring3%6#0"
      ]
    },
    "235": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%6#0",
        "concat%0#0",
        "aggregate%substring3%6#0",
        "0"
      ]
    },
    "236": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%6#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%6#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "237": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%6#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%6#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "238": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract%6#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%6#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "239": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%6#0",
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%6#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "240": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%6#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%6#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "243": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%extract%6#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%6#0",
        "replace%0#0"
      ]
    },
    "245": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%6#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%6#0",
        "replace%0#0",
        "0x000a"
      ]
    },
    "246": {
      "op": "uncover 2",
      "stack_out": [
        "replace%0#0",
        "0x000a",
        "aggregate%extract%6#0"
      ]
    },
    "248": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%20#0",
        "replace%0#0"
      ],
      "stack_out": [
        "replace%0#0",
        "aggregate%head%20#0"
      ]
    },
    "249": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%20#0",
        "replace%0#0"
      ]
    },
    "250": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%7#0"
      ],
      "stack_out": [
        "aggregate%concat%7#0"
      ]
    },
    "251": {
      "op": "bytec_3 // \"glob\"",
      "stack_out": [
        "aggregate%concat%7#0",
        "\"glob\""
      ]
    },
    "252": {
      "op": "swap",
      "stack_out": [
        "\"glob\"",
        "aggregate%concat%7#0"
      ]
    },
    "253": {
      "op": "app_global_put",
      "stack_out": []
    },
    "254": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "255": {
      "op": "return",
      "stack_out": []
    },
    "256": {
      "block": "main_mutate_box_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "258": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "259": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "260": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "262": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "263": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#0"
      ]
    },
    "266": {
      "op": "bytec_2 // \"box\"",
      "defined_out": [
        "\"box\"",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "\"box\""
      ]
    },
    "267": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "268": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0"
      ]
    },
    "269": {
      "op": "dup",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "270": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "0"
      ]
    },
    "271": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%5#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "272": {
      "op": "dig 1",
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "274": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%5#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%5#0"
      ]
    },
    "275": {
      "op": "dig 2",
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%5#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "277": {
      "op": "cover 2",
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%5#0"
      ]
    },
    "279": {
      "op": "substring3",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%substring3%5#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%substring3%5#0"
      ]
    },
    "280": {
      "op": "swap",
      "stack_out": [
        "val#0",
        "aggregate%substring3%5#0",
        "aggregate%box_get%0#0"
      ]
    },
    "281": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%substring3%5#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%5#0"
      ]
    },
    "284": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "286": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%substring3%5#0",
        "aggregate%extract%5#0",
        "aggregate%substring3%5#0 (copy)",
        "val#0"
      ]
    },
    "288": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%substring3%5#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%5#0",
        "aggregate%extract%5#0",
        "concat%0#0"
      ]
    },
    "289": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%5#0",
        "concat%0#0",
        "aggregate%substring3%5#0"
      ]
    },
    "291": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%5#0",
        "concat%0#0",
        "aggregate%substring3%5#0",
        "0"
      ]
    },
    "292": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%5#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%5#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "293": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%5#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%5#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "294": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract%5#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%5#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "295": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%5#0",
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%5#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "296": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%5#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%5#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "299": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%extract%5#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%5#0",
        "replace%0#0"
      ]
    },
    "301": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%5#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%5#0",
        "replace%0#0",
        "0x000a"
      ]
    },
    "302": {
      "op": "uncover 2",
      "stack_out": [
        "replace%0#0",
        "0x000a",
        "aggregate%extract%5#0"
      ]
    },
    "304": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%17#0",
        "replace%0#0"
      ],
      "stack_out": [
        "replace%0#0",
        "aggregate%head%17#0"
      ]
    },
    "305": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%17#0",
        "replace%0#0"
      ]
    },
    "306": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%6#0"
      ],
      "stack_out": [
        "aggregate%concat%6#0"
      ]
    },
    "307": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "aggregate%concat%6#0",
        "\"box\""
      ]
    },
    "308": {
      "op": "box_del",
      "defined_out": [
        "aggregate%concat%6#0",
        "{box_del}"
      ],
      "stack_out": [
        "aggregate%concat%6#0",
        "{box_del}"
      ]
    },
    "309": {
      "op": "pop",
      "stack_out": [
        "aggregate%concat%6#0"
      ]
    },
    "310": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "aggregate%concat%6#0",
        "\"box\""
      ]
    },
    "311": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "aggregate%concat%6#0"
      ]
    },
    "312": {
      "op": "box_put",
      "stack_out": []
    },
    "313": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "314": {
      "op": "return",
      "stack_out": []
    },
    "315": {
      "block": "main_mutate_tuple_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "317": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "318": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "319": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "321": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "322": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#0"
      ]
    },
    "325": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "0"
      ]
    },
    "326": {
      "op": "bytec_0 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "0",
        "\"tup\""
      ]
    },
    "327": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#1",
        "maybe_value%0#1",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "328": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "val#0",
        "maybe_value%0#1"
      ]
    },
    "329": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)"
      ]
    },
    "330": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)",
        "0"
      ]
    },
    "331": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "maybe_value%0#1",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "332": {
      "op": "dig 1",
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "aggregate%extract_uint16%4#0",
        "maybe_value%0#1 (copy)"
      ]
    },
    "334": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%len%4#0",
        "maybe_value%0#1",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%4#0"
      ]
    },
    "335": {
      "op": "dig 2",
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%4#0",
        "maybe_value%0#1 (copy)"
      ]
    },
    "337": {
      "op": "cover 2",
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%4#0"
      ]
    },
    "339": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%4#0",
        "maybe_value%0#1",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#1",
        "aggregate%substring3%4#0"
      ]
    },
    "340": {
      "op": "swap",
      "stack_out": [
        "val#0",
        "aggregate%substring3%4#0",
        "maybe_value%0#1"
      ]
    },
    "341": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%4#0",
        "aggregate%substring3%4#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%substring3%4#0",
        "aggregate%extract%4#0"
      ]
    },
    "344": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%4#0",
        "aggregate%substring3%4#0",
        "aggregate%substring3%4#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%substring3%4#0",
        "aggregate%extract%4#0",
        "aggregate%substring3%4#0 (copy)"
      ]
    },
    "346": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%substring3%4#0",
        "aggregate%extract%4#0",
        "aggregate%substring3%4#0 (copy)",
        "val#0"
      ]
    },
    "348": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract%4#0",
        "aggregate%substring3%4#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%4#0",
        "aggregate%extract%4#0",
        "concat%0#0"
      ]
    },
    "349": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%4#0",
        "concat%0#0",
        "aggregate%substring3%4#0"
      ]
    },
    "351": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%4#0",
        "concat%0#0",
        "aggregate%substring3%4#0",
        "0"
      ]
    },
    "352": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%4#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%4#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "353": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%4#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%4#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "354": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract%4#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%4#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "355": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%4#0",
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%4#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "356": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%4#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%4#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "359": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%extract%4#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%4#0",
        "replace%0#0"
      ]
    },
    "361": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%4#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%4#0",
        "replace%0#0",
        "0x000a"
      ]
    },
    "362": {
      "op": "uncover 2",
      "stack_out": [
        "replace%0#0",
        "0x000a",
        "aggregate%extract%4#0"
      ]
    },
    "364": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%14#0",
        "replace%0#0"
      ],
      "stack_out": [
        "replace%0#0",
        "aggregate%head%14#0"
      ]
    },
    "365": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%14#0",
        "replace%0#0"
      ]
    },
    "366": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%5#0"
      ],
      "stack_out": [
        "aggregate%concat%5#0"
      ]
    },
    "367": {
      "op": "bytec_0 // \"tup\"",
      "stack_out": [
        "aggregate%concat%5#0",
        "\"tup\""
      ]
    },
    "368": {
      "op": "swap",
      "stack_out": [
        "\"tup\"",
        "aggregate%concat%5#0"
      ]
    },
    "369": {
      "op": "app_global_put",
      "stack_out": []
    },
    "370": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "371": {
      "op": "return",
      "stack_out": []
    },
    "372": {
      "block": "main_bootstrap_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "374": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "OptIn"
      ]
    },
    "375": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "376": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "377": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "379": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "380": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "381": {
      "op": "bytec_0 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"tup\""
      ]
    },
    "382": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#1",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "383": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "384": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%2#0"
      ],
      "stack_out": [
        "aggregate%extract%2#0"
      ]
    },
    "387": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%2#0"
      ],
      "stack_out": [
        "aggregate%extract%2#0",
        "0x000a"
      ]
    },
    "388": {
      "op": "swap",
      "stack_out": [
        "0x000a",
        "aggregate%extract%2#0"
      ]
    },
    "389": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0"
      ]
    },
    "390": {
      "op": "bytec 6 // 0x00010000000000000000",
      "defined_out": [
        "0x00010000000000000000",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "0x00010000000000000000"
      ]
    },
    "392": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%3#0"
      ],
      "stack_out": [
        "aggregate%concat%3#0"
      ]
    },
    "393": {
      "op": "bytec_2 // \"box\"",
      "defined_out": [
        "\"box\"",
        "aggregate%concat%3#0"
      ],
      "stack_out": [
        "aggregate%concat%3#0",
        "\"box\""
      ]
    },
    "394": {
      "op": "box_del",
      "defined_out": [
        "aggregate%concat%3#0",
        "{box_del}"
      ],
      "stack_out": [
        "aggregate%concat%3#0",
        "{box_del}"
      ]
    },
    "395": {
      "op": "pop",
      "stack_out": [
        "aggregate%concat%3#0"
      ]
    },
    "396": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "aggregate%concat%3#0",
        "\"box\""
      ]
    },
    "397": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "aggregate%concat%3#0",
        "aggregate%concat%3#0 (copy)"
      ],
      "stack_out": [
        "aggregate%concat%3#0",
        "\"box\"",
        "aggregate%concat%3#0 (copy)"
      ]
    },
    "399": {
      "op": "box_put",
      "stack_out": [
        "aggregate%concat%3#0"
      ]
    },
    "400": {
      "op": "txn Sender",
      "defined_out": [
        "aggregate%concat%3#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "aggregate%concat%3#0",
        "tmp%0#3"
      ]
    },
    "402": {
      "op": "bytec 4 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "aggregate%concat%3#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "aggregate%concat%3#0",
        "tmp%0#3",
        "\"loc\""
      ]
    },
    "404": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "\"loc\"",
        "aggregate%concat%3#0"
      ]
    },
    "406": {
      "op": "app_local_put",
      "stack_out": []
    },
    "407": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "408": {
      "op": "return",
      "stack_out": []
    },
    "409": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "411": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "414": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "416": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "417": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "418": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "419": {
      "op": "return",
      "stack_out": []
    }
  }
}