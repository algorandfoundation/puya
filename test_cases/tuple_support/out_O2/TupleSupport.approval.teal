#pragma version 10

test_cases.tuple_support.tuple_support.TupleSupport.approval_program:
    intcblock 1 2 0 4
    bytecblock "state"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    pushints 101 102 103 // 101, 102, 103
    callsub add_three_values
    itob
    log
    intc_0 // 1
    intc_1 // 2
    addw
    bytec_0 // "state"
    dig 1
    app_global_put
    dig 1
    !
    assert // overflow!
    intc_0 // 1
    intc_1 // 2
    callsub get_tuple
    swap
    intc_0 // 1
    ==
    swap
    intc_1 // 2
    ==
    &&
    assert
    pushbytess 0x48656c6c6f2c20 0x776f726c6421 // 0x48656c6c6f2c20, 0x776f726c6421
    callsub bytes_combine
    log
    pushint 18446744073709551615 // 18446744073709551615
    dup
    addw
    uncover 3
    uncover 3
    callsub addw2
    uncover 2
    itob
    log
    swap
    itob
    log
    itob
    log
    pushbytes 0x6e61
    pushint 5 // 5
    callsub bytes_multiply
    log
    intc_2 // 0
    callsub test_tuple_swap
    intc_0 // 1
    intc_1 // 2
    pushint 3 // 3
    intc_3 // 4
    pushints 5 6 7 8 // 5, 6, 7, 8
    callsub slicing
    callsub non_empty_tuple
    popn 2
    pushbytes "not empty"
    log
    callsub get_uint_with_side_effect
    pop
    pushbytes "not empty2"
    log
    pushint 3 // 3
    return


// test_cases.tuple_support.tuple_support.add_three_values(values.0: uint64, values.1: uint64, values.2: uint64) -> uint64:
add_three_values:
    proto 3 1
    intc_2 // 0
    frame_dig -3
    intc_2 // 0

add_three_values_for_body@1:
    frame_dig 0
    uncover 2
    +
    dup
    frame_bury 0
    swap
    switch add_three_values_for_header_1@3 add_three_values_for_header_2@4
    swap
    retsub

add_three_values_for_header_1@3:
    frame_dig -2
    intc_0 // 1
    b add_three_values_for_body@1

add_three_values_for_header_2@4:
    frame_dig -1
    intc_1 // 2
    b add_three_values_for_body@1


// test_cases.tuple_support.tuple_support.get_tuple(a: uint64, b: uint64) -> uint64, uint64:
get_tuple:
    proto 2 2
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.tuple_support.tuple_support.bytes_combine(arg.0: bytes, arg.1: bytes) -> bytes:
bytes_combine:
    proto 2 1
    frame_dig -2
    frame_dig -1
    concat
    retsub


// test_cases.tuple_support.tuple_support.addw2(a.0: uint64, a.1: uint64, b.0: uint64, b.1: uint64) -> uint64, uint64, uint64:
addw2:
    proto 4 3
    frame_dig -3
    frame_dig -1
    addw
    frame_dig -4
    frame_dig -2
    addw
    uncover 3
    addw
    cover 2
    addw
    swap
    !
    assert // is such a thing even possible? ðŸ‘½
    swap
    uncover 2
    retsub


// test_cases.tuple_support.tuple_support.bytes_multiply(arg.0: bytes, arg.1: uint64) -> bytes:
bytes_multiply:
    proto 2 1
    pushbytes 0x
    intc_2 // 0

bytes_multiply_for_header@1:
    frame_dig 1
    frame_dig -1
    <
    bz bytes_multiply_after_for@4
    frame_dig 0
    frame_dig -2
    concat
    frame_bury 0
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    b bytes_multiply_for_header@1

bytes_multiply_after_for@4:
    retsub


// test_cases.tuple_support.tuple_support.test_tuple_swap(zero: uint64) -> void:
test_tuple_swap:
    proto 1 0
    frame_dig -1
    intc_0 // 1
    +
    frame_dig -1
    intc_1 // 2
    +
    intc_1 // 2
    ==
    assert // a should be two
    intc_0 // 1
    ==
    assert // b should be one
    retsub


// test_cases.tuple_support.tuple_support.slicing(values.0: uint64, values.1: uint64, values.2: uint64, values.3: uint64, values.4: uint64, values.5: uint64, values.6: uint64, values.7: uint64) -> void:
slicing:
    proto 8 0
    frame_dig -8
    frame_dig -7
    frame_dig -6
    callsub add_three_values
    frame_dig -8
    frame_dig -7
    +
    frame_dig -6
    +
    ==
    assert
    retsub


// test_cases.tuple_support.tuple_support.non_empty_tuple() -> uint64, uint64:
non_empty_tuple:
    proto 0 2
    pushbytes "non_empty_tuple called"
    log
    intc_3 // 4
    intc_1 // 2
    retsub


// test_cases.tuple_support.tuple_support.get_uint_with_side_effect() -> uint64:
get_uint_with_side_effect:
    proto 0 1
    pushbytes "get_uint_with_side_effect called"
    log
    intc_3 // 4
    retsub


// test_cases.tuple_support.tuple_support.TupleSupport.__init__() -> void:
__init__:
    proto 0 0
    bytec_0 // "state"
    intc_2 // 0
    app_global_put
    retsub
