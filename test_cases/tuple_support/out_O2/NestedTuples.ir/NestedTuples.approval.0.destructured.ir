main test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "build_nested_call_count" 0u)
        (app_global_put "twm" 0x0004000600000000000000000000000c000e00000000)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@31
    block@4: // abi_routing_L48
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void" => block@5, method "load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])" => block@6, method "store_tuple_in_box((uint64,uint64))void" => block@7, method "is_tuple_in_box((uint64,uint64))bool" => block@8, method "load_tuple_from_box((uint64,uint64))(uint64,uint64)" => block@9, method "maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)" => block@10, method "load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)" => block@14, method "load_tuple_from_local_state_or_default(string)(uint64,uint64)" => block@18, method "mutate_local_tuple()(uint64[],(uint64,byte[],string))" => block@22, method "mutate_tuple_in_storage_currently_supported_method()void" => block@26, method "run_tests()bool" => block@27, method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))" => block@28, method "named_tuple((uint64,byte[],string))(uint64,byte[],string)" => block@29, method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))" => block@30, * => block@33}
    block@5: // store_tuple_route_L61
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[]))%0#0: Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[])) = (txna ApplicationArgs 1)
        let item_start_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[]))%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[]))%0#0 2u)
        let encoded_item0%0#0: bytes = (substring3 reinterpret_Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[]))%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let pwl.parent.foo#0: uint64 = (extract_uint64 encoded_item0%0#0 0u)
        let pwl.parent.foo_arc#0: Encoded(uint64) = ((extract 8 8) encoded_item0%0#0) // on error: Index access is out of bounds
        let item_start_offset%1#0: uint64 = (extract_uint16 encoded_item0%0#0 16u)
        let item_end_offset%1#0: uint64 = (len encoded_item0%0#0)
        let encoded_item2%0#0: bytes = (substring3 encoded_item0%0#0 item_start_offset%1#0 item_end_offset%1#0)
        let pwl.parent.child.a#0: uint64 = (extract_uint64 encoded_item2%0#0 0u)
        let item_start_offset%2#0: uint64 = (extract_uint16 encoded_item2%0#0 8u)
        let item_end_offset%2#0: uint64 = (extract_uint16 encoded_item2%0#0 10u)
        let encoded_item1%0#0: bytes = (substring3 encoded_item2%0#0 item_start_offset%2#0 item_end_offset%2#0)
        let pwl.parent.child.b#0: bytes = ((extract 2 0) encoded_item1%0#0)
        let item_end_offset%3#0: uint64 = (len encoded_item2%0#0)
        let encoded_item2%1#0: bytes = (substring3 encoded_item2%0#0 item_end_offset%2#0 item_end_offset%3#0)
        let pwl.parent.child.c#0: string = ((extract 2 0) encoded_item2%1#0)
        let item_end_offset%4#0: uint64 = (len reinterpret_Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[]))%0#0)
        let pwl.children#0: Encoded(len+(uint64,len+uint8[],len+utf8[])[]) = (substring3 reinterpret_Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[]))%0#0 item_end_offset%0#0 item_end_offset%4#0)
        let val_as_bytes%0#0: bytes[8] = (itob pwl.parent.foo#0)
        let encoded%1#1: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 pwl.parent.foo_arc#0)
        let val_as_bytes%1#0: bytes[8] = (itob pwl.parent.child.a#0)
        let length%0#1: uint64 = (len pwl.parent.child.b#0)
        let as_bytes%0#1: bytes[8] = (itob length%0#1)
        let length_uint16%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let encoded_value%0#1: bytes = (concat length_uint16%0#1 pwl.parent.child.b#0)
        let data_length%0#1: uint64 = (len encoded_value%0#1)
        let current_tail_offset%0#1: uint64 = (+ 12u data_length%0#1)
        let encoded%3#0: Encoded((uint64,len+uint8[])) = (concat val_as_bytes%1#0 0x000c)
        let length%1#1: uint64 = (len pwl.parent.child.c#0)
        let as_bytes%2#0: bytes[8] = (itob length%1#1)
        let length_uint16%1#1: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#1: bytes = (concat length_uint16%1#1 pwl.parent.child.c#0)
        let tail%1#1: bytes = (concat encoded_value%0#1 encoded_value%1#1)
        let as_bytes%3#1: bytes[8] = (itob current_tail_offset%0#1)
        let offset_as_uint16%1#1: bytes = ((extract 6 2) as_bytes%3#1)
        let encoded%4#1: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%3#0 offset_as_uint16%1#1)
        let encoded%5#1: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%4#1 tail%1#1)
        let encoded%6#1: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (concat encoded%1#1 0x0012)
        let encoded%7#1: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (concat encoded%6#1 encoded%5#1)
        let data_length%3#0: uint64 = (len encoded%7#1)
        let current_tail_offset%3#0: uint64 = (+ 4u data_length%3#0)
        let tail%4#0: bytes = (concat encoded%7#1 pwl.children#0)
        let as_bytes%6#1: bytes[8] = (itob current_tail_offset%3#0)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%6#1)
        let encoded%9#0: Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[])) = (concat 0x0004 offset_as_uint16%4#0)
        let encoded%10#0: Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[])) = (concat encoded%9#0 tail%4#0)
        (app_global_put "pwl" encoded%10#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@6: // load_tuple_route_L65
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pwl")
        (assert maybe_exists%0#0) // check self.pwl exists
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let encoded_item0%0#0: bytes = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item0%0#2: uint64 = (extract_uint64 encoded_item0%0#0 0u)
        let item1%0#6: bytes = ((extract 8 8) encoded_item0%0#0) // on error: Index access is out of bounds
        let item_start_offset%1#0: uint64 = (extract_uint16 encoded_item0%0#0 16u)
        let item_end_offset%1#0: uint64 = (len encoded_item0%0#0)
        let encoded_item2%0#0: bytes = (substring3 encoded_item0%0#0 item_start_offset%1#0 item_end_offset%1#0)
        let item0%1#2: uint64 = (extract_uint64 encoded_item2%0#0 0u)
        let item_start_offset%2#0: uint64 = (extract_uint16 encoded_item2%0#0 8u)
        let item_end_offset%2#0: uint64 = (extract_uint16 encoded_item2%0#0 10u)
        let encoded_item1%0#0: bytes = (substring3 encoded_item2%0#0 item_start_offset%2#0 item_end_offset%2#0)
        let item1%1#1: bytes = ((extract 2 0) encoded_item1%0#0)
        let item_end_offset%3#0: uint64 = (len encoded_item2%0#0)
        let encoded_item2%1#0: bytes = (substring3 encoded_item2%0#0 item_end_offset%2#0 item_end_offset%3#0)
        let item2%0#2: bytes = ((extract 2 0) encoded_item2%1#0)
        let item_end_offset%4#0: uint64 = (len maybe_value%0#0)
        let item1%2#1: bytes = (substring3 maybe_value%0#0 item_end_offset%0#0 item_end_offset%4#0)
        let val_as_bytes%0#0: bytes[8] = (itob item0%0#2)
        let encoded%1#1: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 item1%0#6)
        let val_as_bytes%1#0: bytes[8] = (itob item0%1#2)
        let length%0#1: uint64 = (len item1%1#1)
        let as_bytes%0#1: bytes[8] = (itob length%0#1)
        let length_uint16%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let encoded_value%0#1: bytes = (concat length_uint16%0#1 item1%1#1)
        let data_length%0#1: uint64 = (len encoded_value%0#1)
        let current_tail_offset%0#1: uint64 = (+ 12u data_length%0#1)
        let encoded%3#0: Encoded((uint64,len+uint8[])) = (concat val_as_bytes%1#0 0x000c)
        let length%1#1: uint64 = (len item2%0#2)
        let as_bytes%2#0: bytes[8] = (itob length%1#1)
        let length_uint16%1#1: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#1: bytes = (concat length_uint16%1#1 item2%0#2)
        let tail%1#1: bytes = (concat encoded_value%0#1 encoded_value%1#1)
        let as_bytes%3#1: bytes[8] = (itob current_tail_offset%0#1)
        let offset_as_uint16%1#1: bytes = ((extract 6 2) as_bytes%3#1)
        let encoded%4#1: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%3#0 offset_as_uint16%1#1)
        let encoded%5#1: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%4#1 tail%1#1)
        let encoded%6#1: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (concat encoded%1#1 0x0012)
        let encoded%7#1: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (concat encoded%6#1 encoded%5#1)
        let data_length%3#0: uint64 = (len encoded%7#1)
        let current_tail_offset%3#0: uint64 = (+ 4u data_length%3#0)
        let tail%4#0: bytes = (concat encoded%7#1 item1%2#1)
        let as_bytes%6#1: bytes[8] = (itob current_tail_offset%3#0)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%6#1)
        let encoded%9#0: Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[])) = (concat 0x0004 offset_as_uint16%4#0)
        let encoded%10#0: Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[])) = (concat encoded%9#0 tail%4#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 encoded%10#0)
        (log tmp%17#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@7: // store_tuple_in_box_route_L69
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%0#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let key.a#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%0#0 0u)
        let key.b#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%0#0 8u)
        let tmp%0#2: uint64 = (+ key.b#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded%1#1: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded%1#1)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%0#2)
        let encoded%4#1: Encoded((uint64,len+uint8[],len+utf8[])) = (concat val_as_bytes%0#0 val_as_bytes%3#0)
        (box_put box_prefixed_key%0#0 encoded%4#1)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@8: // is_tuple_in_box_route_L73
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%1#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let key.a#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%1#0 0u)
        let key.b#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%1#0 8u)
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded%1#1: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded%1#1)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u maybe_exists%0#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 encoded_bool%0#0)
        (log tmp%27#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@9: // load_tuple_from_box_route_L77
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%2#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let key.a#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%2#0 0u)
        let key.b#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%2#0 8u)
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded%1#1: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded%1#1)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.box entry exists
        let item0%0#2: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let item1%0#2: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let val_as_bytes%2#0: bytes[8] = (itob item0%0#2)
        let val_as_bytes%3#0: bytes[8] = (itob item1%0#2)
        let encoded%12#0: Encoded((uint64,uint64)) = (concat val_as_bytes%2#0 val_as_bytes%3#0)
        let tmp%34#0: bytes = (concat 0x151f7c75 encoded%12#0)
        (log tmp%34#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@10: // maybe_load_tuple_from_box_route_L81
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (! tmp%35#0)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        (assert tmp%37#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%3#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let key.a#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%3#0 0u)
        let key.b#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%3#0 8u)
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded%1#1: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded%1#1)
        let (maybe_value%0#0: bytes, exists#0: bool) = (box_get box_prefixed_key%0#0)
        goto exists#0 ? block@11 : block@12
    block@11: // ternary_true_L83
        let item0%0#2: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let item1%0#2: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let maybe_value.b#0: uint64 = item1%0#2
        let maybe_value.a#0: uint64 = item0%0#2
        goto block@13
    block@12: // ternary_false_L83
        let ternary_result%0.a#2: uint64 = undefined
        let ternary_result%0.b#2: uint64 = undefined
        let maybe_value.b#0: uint64 = ternary_result%0.b#2
        let maybe_value.a#0: uint64 = ternary_result%0.a#2
        goto block@13
    block@13: // ternary_merge_L83
        let val_as_bytes%4#0: bytes[8] = (itob maybe_value.a#0)
        let val_as_bytes%5#0: bytes[8] = (itob maybe_value.b#0)
        let encoded%15#0: Encoded((uint64,uint64)) = (concat val_as_bytes%4#0 val_as_bytes%5#0)
        let encoded_bit%0#0: bytes = (setbit 0x00 0u exists#0)
        let encoded%18#0: Encoded(((uint64,uint64),bool1)) = (concat encoded%15#0 encoded_bit%0#0)
        let tmp%42#0: bytes = (concat 0x151f7c75 encoded%18#0)
        (log tmp%42#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@14: // load_tuple_from_box_or_default_route_L86
        let tmp%43#0: uint64 = (txn OnCompletion)
        let tmp%44#0: bool = (! tmp%43#0)
        (assert tmp%44#0) // OnCompletion is not NoOp
        let tmp%45#0: uint64 = (txn ApplicationID)
        (assert tmp%45#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%4#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let key.a#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%4#0 0u)
        let key.b#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%4#0 8u)
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded%1#1: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded%1#1)
        let (tmp%0#2: uint64, tmp%1#4: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        goto maybe_exists%0#0 ? block@15 : block@16
    block@15: // ternary_true_L88
        let item0%0#2: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let item1%0#2: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let ternary_result%0.b#2: uint64 = item1%0#2
        let ternary_result%0.a#2: uint64 = item0%0#2
        goto block@17
    block@16: // ternary_false_L88
        let ternary_result%0.b#2: uint64 = tmp%1#4
        let ternary_result%0.a#2: uint64 = tmp%0#2
        goto block@17
    block@17: // ternary_merge_L88
        let val_as_bytes%6#0: bytes[8] = (itob ternary_result%0.a#2)
        let val_as_bytes%7#0: bytes[8] = (itob ternary_result%0.b#2)
        let encoded%21#0: Encoded((uint64,uint64)) = (concat val_as_bytes%6#0 val_as_bytes%7#0)
        let tmp%49#0: bytes = (concat 0x151f7c75 encoded%21#0)
        (log tmp%49#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@18: // load_tuple_from_local_state_or_default_route_L90
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (! tmp%50#0)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        (assert tmp%52#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let local#0: bytes = test_cases.tuple_support.nested_tuples.echo(key#0)
        let tmp%1#3: bytes[32] = test_cases.tuple_support.nested_tuples.get_sender_inefficiently()
        let (tmp%2#2: uint64, tmp%3#0: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex tmp%1#3 0u local#0)
        goto maybe_exists%0#0 ? block@19 : block@20
    block@19: // ternary_true_L93
        let item0%0#2: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let item1%0#2: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let ternary_result%0.b#2: uint64 = item1%0#2
        let ternary_result%0.a#2: uint64 = item0%0#2
        goto block@21
    block@20: // ternary_false_L93
        let ternary_result%0.b#2: uint64 = tmp%3#0
        let ternary_result%0.a#2: uint64 = tmp%2#2
        goto block@21
    block@21: // ternary_merge_L93
        let val_as_bytes%8#0: bytes[8] = (itob ternary_result%0.a#2)
        let val_as_bytes%9#0: bytes[8] = (itob ternary_result%0.b#2)
        let encoded%24#0: Encoded((uint64,uint64)) = (concat val_as_bytes%8#0 val_as_bytes%9#0)
        let tmp%57#0: bytes = (concat 0x151f7c75 encoded%24#0)
        (log tmp%57#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@22: // mutate_local_tuple_route_L95
        let tmp%58#0: uint64 = (txn OnCompletion)
        let tmp%59#0: bool = (! tmp%58#0)
        (assert tmp%59#0) // OnCompletion is not NoOp
        let tmp%60#0: uint64 = (txn ApplicationID)
        (assert tmp%60#0) // can only call when not creating
        let i#0: uint64 = 0u
        goto block@23
    block@23: // for_header_L107
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@24 : block@25
    block@24: // for_body_L108
        let bytes_offset%0#0: uint64 = (* i#0 8u)
        let encoded_element%0#0: bytes = (extract3 0x000000000000000000000000000000010000000000000002 bytes_offset%0#0 8u) // on error: index access is out of bounds
        let tmp%0#4: biguint = (itob i#0)
        let tmp%1#2: bool = (b== encoded_element%0#0 tmp%0#4)
        (assert tmp%1#2)
        let i#0: uint64 = (+ i#0 1u)
        goto block@23
    block@25: // after_for_L107
        (log 0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@26: // mutate_tuple_in_storage_currently_supported_method_route_L114
        let tmp%67#0: uint64 = (txn OnCompletion)
        let tmp%68#0: bool = (! tmp%67#0)
        (assert tmp%68#0) // OnCompletion is not NoOp
        let tmp%69#0: uint64 = (txn ApplicationID)
        (assert tmp%69#0) // can only call when not creating
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "twm")
        (assert maybe_exists%0#0) // check self.twm exists
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let arr2#0: Encoded(len+uint64[]) = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat arr2#0 0x0000000000000001) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#1: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#1)
        let arr2#0: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let item_end_offset%5#0: uint64 = (len maybe_value%0#0)
        let encoded_item1%2#1: bytes = (substring3 maybe_value%0#0 item_end_offset%0#0 item_end_offset%5#0)
        let item0%3#1: uint64 = (extract_uint64 encoded_item1%2#1 0u)
        let item_start_offset%6#1: uint64 = (extract_uint16 encoded_item1%2#1 8u)
        let item_end_offset%6#0: uint64 = (extract_uint16 encoded_item1%2#1 10u)
        let encoded_item1%3#1: bytes = (substring3 encoded_item1%2#1 item_start_offset%6#1 item_end_offset%6#0)
        let item1%1#1: bytes = ((extract 2 0) encoded_item1%3#1)
        let item_end_offset%7#0: uint64 = (len encoded_item1%2#1)
        let encoded_item2%1#0: bytes = (substring3 encoded_item1%2#1 item_end_offset%6#0 item_end_offset%7#0)
        let item2%1#1: bytes = ((extract 2 0) encoded_item2%1#0)
        let data_length%0#1: uint64 = (len arr2#0)
        let current_tail_offset%0#1: uint64 = (+ 4u data_length%0#1)
        let val_as_bytes%0#0: bytes[8] = (itob item0%3#1)
        let length%0#1: uint64 = (len item1%1#1)
        let as_bytes%2#0: bytes[8] = (itob length%0#1)
        let length_uint16%0#1: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%0#1: bytes = (concat length_uint16%0#1 item1%1#1)
        let data_length%1#2: uint64 = (len encoded_value%0#1)
        let current_tail_offset%1#2: uint64 = (+ 12u data_length%1#2)
        let encoded%4#1: Encoded((uint64,len+uint8[],len+utf8[])) = (concat val_as_bytes%0#0 0x000c)
        let length%1#1: uint64 = (len item2%1#1)
        let as_bytes%4#1: bytes[8] = (itob length%1#1)
        let length_uint16%1#1: bytes = ((extract 6 2) as_bytes%4#1)
        let encoded_value%1#1: bytes = (concat length_uint16%1#1 item2%1#1)
        let tail%2#2: bytes = (concat encoded_value%0#1 encoded_value%1#1)
        let as_bytes%5#2: bytes[8] = (itob current_tail_offset%1#2)
        let offset_as_uint16%2#2: bytes = ((extract 6 2) as_bytes%5#2)
        let encoded%5#1: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%4#1 offset_as_uint16%2#2)
        let encoded%6#1: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (concat encoded%5#1 tail%2#2)
        let tail%3#2: bytes = (concat arr2#0 encoded%6#1)
        let as_bytes%6#1: bytes[8] = (itob current_tail_offset%0#1)
        let offset_as_uint16%3#2: bytes = ((extract 6 2) as_bytes%6#1)
        let encoded%7#1: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (concat 0x0004 offset_as_uint16%3#2)
        let encoded%8#2: Encoded((len+uint64[],(uint64,len+uint8[],len+utf8[]))) = (concat encoded%7#1 tail%3#2)
        (app_global_put "twm" encoded%8#2)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@27: // run_tests_route_L120
        let tmp%71#0: uint64 = (txn OnCompletion)
        let tmp%72#0: bool = (! tmp%71#0)
        (assert tmp%72#0) // OnCompletion is not NoOp
        let tmp%73#0: uint64 = (txn ApplicationID)
        (assert tmp%73#0) // can only call when not creating
        let (nt.1.0#0: uint64, nt.1.1#0: uint64) = (addw 1u 2u)
        let tmp%4#0: bool = (! nt.1.0#0)
        let tmp%6#0: bool = (== nt.1.1#0 3u)
        let tmp%7#1: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#1)
        (assert tmp%4#0)
        (assert tmp%6#0)
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let t.0#0: uint64 = 1u
        let t.1#0: uint64 = 2u
        goto block@54
    block@54: // for_body_L298
        let tmp%0#2: uint64 = (+ t.0#0 t.1#0)
        let total#0: uint64 = (+ total#0 tmp%0#2)
        goto_nth [block@55, block@56, block@57][loop_counter%0#0] else goto block@58
    block@55: // for_header_1_L297
        let loop_counter%0#0: uint64 = 1u
        let t.0#0: uint64 = 2u
        let t.1#0: uint64 = 1u
        goto block@54
    block@56: // for_header_2_L297
        let loop_counter%0#0: uint64 = 2u
        let t.0#0: uint64 = 1u
        let t.1#0: uint64 = 1u
        goto block@54
    block@57: // for_header_3_L297
        let loop_counter%0#0: uint64 = 3u
        let t.0#0: uint64 = 2u
        let t.1#0: uint64 = 2u
        goto block@54
    block@58: // after_for_L297
        let loop_counter%1#0: uint64 = 0u
        let a#4: uint64 = 1u
        let b#5: uint64 = 2u
        goto block@59
    block@59: // for_body_L302
        let tmp%2#2: uint64 = (+ a#4 b#5)
        let total#0: uint64 = (+ total#0 tmp%2#2)
        goto_nth [block@60, block@61, block@62][loop_counter%1#0] else goto block@63
    block@60: // for_header_1_L301
        let loop_counter%1#0: uint64 = 1u
        let a#4: uint64 = 2u
        let b#5: uint64 = 1u
        goto block@59
    block@61: // for_header_2_L301
        let loop_counter%1#0: uint64 = 2u
        let a#4: uint64 = 1u
        let b#5: uint64 = 1u
        goto block@59
    block@62: // for_header_3_L301
        let loop_counter%1#0: uint64 = 3u
        let a#4: uint64 = 2u
        let b#5: uint64 = 2u
        goto block@59
    block@63: // after_for_L301
        let tmp%4#2: uint64 = (/ total#0 8u)
        let tmp%5#2: bool = (== tmp%4#2 3u)
        (assert tmp%5#2)
        (app_global_put "build_nested_call_count" 1u)
        (log 0x151f7c7580)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@28: // nested_tuple_params_route_L149
        let tmp%77#0: uint64 = (txn OnCompletion)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0) // OnCompletion is not NoOp
        let tmp%79#0: uint64 = (txn ApplicationID)
        (assert tmp%79#0) // can only call when not creating
        let reinterpret_Encoded((len+utf8[],(len+uint8[],(uint64))))%0#0: Encoded((len+utf8[],(len+uint8[],(uint64)))) = (txna ApplicationArgs 1)
        let item_start_offset%5#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[],(len+uint8[],(uint64))))%0#0 0u)
        let item_end_offset%5#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[],(len+uint8[],(uint64))))%0#0 2u)
        let encoded_item0%8#0: bytes = (substring3 reinterpret_Encoded((len+utf8[],(len+uint8[],(uint64))))%0#0 item_start_offset%5#0 item_end_offset%5#0)
        let args.0#0: string = ((extract 2 0) encoded_item0%8#0)
        let item_end_offset%6#0: uint64 = (len reinterpret_Encoded((len+utf8[],(len+uint8[],(uint64))))%0#0)
        let encoded_item1%6#0: bytes = (substring3 reinterpret_Encoded((len+utf8[],(len+uint8[],(uint64))))%0#0 item_end_offset%5#0 item_end_offset%6#0)
        let item_start_offset%7#0: uint64 = (extract_uint16 encoded_item1%6#0 0u)
        let item_end_offset%7#0: uint64 = (len encoded_item1%6#0)
        let encoded_item0%9#0: bytes = (substring3 encoded_item1%6#0 item_start_offset%7#0 item_end_offset%7#0)
        let args.1.0#0: bytes = ((extract 2 0) encoded_item0%9#0)
        let encoded_item1%7#0: bytes = ((extract 2 8) encoded_item1%6#0) // on error: Index access is out of bounds
        let args.1.1.0#0: uint64 = (extract_uint64 encoded_item1%7#0 0u)
        let length%4#0: uint64 = (len args.1.0#0)
        let as_bytes%13#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%13#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 args.1.0#0)
        let data_length%9#0: uint64 = (len encoded_value%4#0)
        let current_tail_offset%9#0: uint64 = (+ 4u data_length%9#0)
        let length%5#0: uint64 = (len args.0#0)
        let as_bytes%15#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%15#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 args.0#0)
        let val_as_bytes%11#0: bytes[8] = (itob args.1.1.0#0)
        let encoded%35#0: Encoded((len+utf8[],uint64)) = (concat 0x000a val_as_bytes%11#0)
        let encoded%36#0: Encoded((len+utf8[],uint64)) = (concat encoded%35#0 encoded_value%5#0)
        let tail%11#0: bytes = (concat encoded_value%4#0 encoded%36#0)
        let as_bytes%17#0: bytes[8] = (itob current_tail_offset%9#0)
        let offset_as_uint16%11#0: bytes = ((extract 6 2) as_bytes%17#0)
        let encoded%37#0: Encoded((len+uint8[],(len+utf8[],uint64))) = (concat 0x0004 offset_as_uint16%11#0)
        let encoded%38#0: Encoded((len+uint8[],(len+utf8[],uint64))) = (concat encoded%37#0 tail%11#0)
        let tmp%84#0: bytes = (concat 0x151f7c75 encoded%38#0)
        (log tmp%84#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@29: // named_tuple_route_L156
        let tmp%85#0: uint64 = (txn OnCompletion)
        let tmp%86#0: bool = (! tmp%85#0)
        (assert tmp%86#0) // OnCompletion is not NoOp
        let tmp%87#0: uint64 = (txn ApplicationID)
        (assert tmp%87#0) // can only call when not creating
        let reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0: Encoded((uint64,len+uint8[],len+utf8[])) = (txna ApplicationArgs 1)
        let args.a#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0 0u)
        let item_start_offset%8#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0 8u)
        let item_end_offset%8#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0 10u)
        let encoded_item1%8#0: bytes = (substring3 reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0 item_start_offset%8#0 item_end_offset%8#0)
        let args.b#0: bytes = ((extract 2 0) encoded_item1%8#0)
        let item_end_offset%9#0: uint64 = (len reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0)
        let encoded_item2%2#0: bytes = (substring3 reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0 item_end_offset%8#0 item_end_offset%9#0)
        let args.c#0: string = ((extract 2 0) encoded_item2%2#0)
        let val_as_bytes%12#0: bytes[8] = (itob args.a#0)
        let length%6#0: uint64 = (len args.b#0)
        let as_bytes%18#0: bytes[8] = (itob length%6#0)
        let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%18#0)
        let encoded_value%6#0: bytes = (concat length_uint16%6#0 args.b#0)
        let data_length%12#0: uint64 = (len encoded_value%6#0)
        let current_tail_offset%12#0: uint64 = (+ 12u data_length%12#0)
        let encoded%40#0: Encoded((uint64,len+uint8[])) = (concat val_as_bytes%12#0 0x000c)
        let length%7#0: uint64 = (len args.c#0)
        let as_bytes%20#0: bytes[8] = (itob length%7#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%20#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 args.c#0)
        let tail%13#0: bytes = (concat encoded_value%6#0 encoded_value%7#0)
        let as_bytes%21#0: bytes[8] = (itob current_tail_offset%12#0)
        let offset_as_uint16%13#0: bytes = ((extract 6 2) as_bytes%21#0)
        let encoded%41#0: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%40#0 offset_as_uint16%13#0)
        let encoded%42#0: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%41#0 tail%13#0)
        let tmp%92#0: bytes = (concat 0x151f7c75 encoded%42#0)
        (log tmp%92#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@30: // nested_named_tuple_params_route_L161
        let tmp%93#0: uint64 = (txn OnCompletion)
        let tmp%94#0: bool = (! tmp%93#0)
        (assert tmp%94#0) // OnCompletion is not NoOp
        let tmp%95#0: uint64 = (txn ApplicationID)
        (assert tmp%95#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[])))%0#0: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (txna ApplicationArgs 1)
        let args.foo#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[])))%0#0 0u)
        let args.foo_arc#0: Encoded(uint64) = ((extract 8 8) reinterpret_Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[])))%0#0) // on error: Index access is out of bounds
        let item_start_offset%10#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[])))%0#0 16u)
        let item_end_offset%10#0: uint64 = (len reinterpret_Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[])))%0#0)
        let encoded_item2%3#0: bytes = (substring3 reinterpret_Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[])))%0#0 item_start_offset%10#0 item_end_offset%10#0)
        let args.child.a#0: uint64 = (extract_uint64 encoded_item2%3#0 0u)
        let item_start_offset%11#0: uint64 = (extract_uint16 encoded_item2%3#0 8u)
        let item_end_offset%11#0: uint64 = (extract_uint16 encoded_item2%3#0 10u)
        let encoded_item1%9#0: bytes = (substring3 encoded_item2%3#0 item_start_offset%11#0 item_end_offset%11#0)
        let args.child.b#0: bytes = ((extract 2 0) encoded_item1%9#0)
        let item_end_offset%12#0: uint64 = (len encoded_item2%3#0)
        let encoded_item2%4#0: bytes = (substring3 encoded_item2%3#0 item_end_offset%11#0 item_end_offset%12#0)
        let args.child.c#0: string = ((extract 2 0) encoded_item2%4#0)
        let val_as_bytes%13#0: bytes[8] = (itob args.foo#0)
        let encoded%44#0: Encoded((uint64,uint64)) = (concat val_as_bytes%13#0 args.foo_arc#0)
        let val_as_bytes%14#0: bytes[8] = (itob args.child.a#0)
        let length%8#0: uint64 = (len args.child.b#0)
        let as_bytes%22#0: bytes[8] = (itob length%8#0)
        let length_uint16%8#0: bytes = ((extract 6 2) as_bytes%22#0)
        let encoded_value%8#0: bytes = (concat length_uint16%8#0 args.child.b#0)
        let data_length%14#0: uint64 = (len encoded_value%8#0)
        let current_tail_offset%14#0: uint64 = (+ 12u data_length%14#0)
        let encoded%46#0: Encoded((uint64,len+uint8[])) = (concat val_as_bytes%14#0 0x000c)
        let length%9#0: uint64 = (len args.child.c#0)
        let as_bytes%24#0: bytes[8] = (itob length%9#0)
        let length_uint16%9#0: bytes = ((extract 6 2) as_bytes%24#0)
        let encoded_value%9#0: bytes = (concat length_uint16%9#0 args.child.c#0)
        let tail%15#0: bytes = (concat encoded_value%8#0 encoded_value%9#0)
        let as_bytes%25#0: bytes[8] = (itob current_tail_offset%14#0)
        let offset_as_uint16%15#0: bytes = ((extract 6 2) as_bytes%25#0)
        let encoded%47#0: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%46#0 offset_as_uint16%15#0)
        let encoded%48#0: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%47#0 tail%15#0)
        let encoded%49#0: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (concat encoded%44#0 0x0012)
        let encoded%50#0: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (concat encoded%49#0 encoded%48#0)
        let tmp%102#0: bytes = (concat 0x151f7c75 encoded%50#0)
        (log tmp%102#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@31: // bare_routing_L48
        let tmp%103#0: uint64 = (txn OnCompletion)
        goto tmp%103#0 ? block@33 : block@32
    block@32: // __algopy_default_create_L1
        let tmp%104#0: uint64 = (txn ApplicationID)
        let tmp%105#0: bool = (! tmp%104#0)
        (assert tmp%105#0) // can only call when creating
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@33: // after_if_else_L48
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@34: // after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.tuple_support.nested_tuples.get_sender_inefficiently() -> bytes[32]:
    block@0: // L179
        (log "Order is important")
        let tmp%0#0: bytes[32] = (txn Sender)
        return tmp%0#0

subroutine test_cases.tuple_support.nested_tuples.simple_tup(a: uint64, b: uint64) -> <uint64, uint64>:
    block@0: // L185
        (log "I'm just a simple tup")
        return a#0 b#0

subroutine test_cases.tuple_support.nested_tuples.echo(s: string) -> string:
    block@0: // L191
        (log "Is there an echo in here?")
        return s#0