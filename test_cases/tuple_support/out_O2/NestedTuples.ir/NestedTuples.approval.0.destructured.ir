main test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "build_nested_call_count" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@9
    block@4: // abi_routing_L18
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "run_tests()bool" => block@5, method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))" => block@6, method "named_tuple((uint64,byte[],string))(uint64,byte[],string)" => block@7, method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))" => block@8, * => block@11}
    block@5: // run_tests_route_L22
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let (nt.1.0#0: uint64, nt.1.1#0: uint64) = (addw 1u 2u)
        let tmp%4#0: bool = (! nt.1.0#0)
        let tmp%6#2: bool = (== nt.1.1#0 3u)
        let tmp%7#2: bool = (&& tmp%4#0 tmp%6#2)
        (assert tmp%7#2)
        (assert tmp%4#0)
        (assert tmp%6#2)
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let t.0#0: uint64 = 1u
        let t.1#0: uint64 = 2u
        goto block@32
    block@32: // for_body_L182
        let tmp%0#2: uint64 = (+ t.0#0 t.1#0)
        let total#0: uint64 = (+ total#0 tmp%0#2)
        goto_nth [block@33, block@34, block@35][loop_counter%0#0] else goto block@36
    block@33: // for_header_1_L181
        let loop_counter%0#0: uint64 = 1u
        let t.0#0: uint64 = 2u
        let t.1#0: uint64 = 1u
        goto block@32
    block@34: // for_header_2_L181
        let loop_counter%0#0: uint64 = 2u
        let t.0#0: uint64 = 1u
        let t.1#0: uint64 = 1u
        goto block@32
    block@35: // for_header_3_L181
        let loop_counter%0#0: uint64 = 3u
        let t.0#0: uint64 = 2u
        let t.1#0: uint64 = 2u
        goto block@32
    block@36: // after_for_L181
        let loop_counter%1#0: uint64 = 0u
        let a#4: uint64 = 1u
        let b#5: uint64 = 2u
        goto block@37
    block@37: // for_body_L186
        let tmp%1#2: uint64 = (+ a#4 b#5)
        let total#0: uint64 = (+ total#0 tmp%1#2)
        goto_nth [block@38, block@39, block@40][loop_counter%1#0] else goto block@41
    block@38: // for_header_1_L185
        let loop_counter%1#0: uint64 = 1u
        let a#4: uint64 = 2u
        let b#5: uint64 = 1u
        goto block@37
    block@39: // for_header_2_L185
        let loop_counter%1#0: uint64 = 2u
        let a#4: uint64 = 1u
        let b#5: uint64 = 1u
        goto block@37
    block@40: // for_header_3_L185
        let loop_counter%1#0: uint64 = 3u
        let a#4: uint64 = 2u
        let b#5: uint64 = 2u
        goto block@37
    block@41: // after_for_L185
        let tmp%2#4: uint64 = (/ total#0 8u)
        let tmp%3#1: bool = (== tmp%2#4 3u)
        (assert tmp%3#1)
        (app_global_put "build_nested_call_count" 0u)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "build_nested_call_count")
        (assert maybe_exists%0#0) // check self.build_nested_call_count exists
        let new_state_value%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "build_nested_call_count" new_state_value%0#0)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "build_nested_call_count")
        (assert maybe_exists%0#0) // check self.build_nested_call_count exists
        let tmp%6#2: bool = (== maybe_value%0#0 1u)
        (assert tmp%6#2)
        (log 0x151f7c7580)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@12
    block@6: // nested_tuple_params_route_L51
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let tmp%12#0: bytes = (txna ApplicationArgs 1)
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%12#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%12#0 2u)
        let item0%0#0: bytes = (substring3 tmp%12#0 item_start_offset%0#0 item_end_offset%0#0)
        let args.0#0: bytes = ((extract 2 0) item0%0#0)
        let item_end_offset%1#0: uint64 = (len tmp%12#0)
        let item1%0#0: bytes = (substring3 tmp%12#0 item_end_offset%0#0 item_end_offset%1#0)
        let item_start_offset%2#0: uint64 = (extract_uint16 item1%0#0 0u)
        let item_end_offset%2#0: uint64 = (len item1%0#0)
        let item0%1#0: bytes = (substring3 item1%0#0 item_start_offset%2#0 item_end_offset%2#0)
        let args.1.0#0: bytes = ((extract 2 0) item0%1#0)
        let args.1.1.0#0: uint64 = (extract_uint64 item1%0#0 2u)
        let length%0#0: uint64 = (len args.1.0#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 args.1.0#0)
        let length%1#0: uint64 = (len args.0#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 args.0#0)
        let val_as_bytes%0#0: bytes[8] = (itob args.1.1.0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat 0x000a val_as_bytes%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%1#0)
        let data_length%1#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%3#0: uint64 = (+ 4u data_length%1#0)
        let as_bytes%4#0: bytes[8] = (itob current_tail_offset%3#0)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_tuple_buffer%6#0: bytes = (concat 0x0004 offset_as_uint16%2#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%0#0)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 encoded_tuple_buffer%3#0)
        let tmp%13#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%8#0)
        (log tmp%13#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@12
    block@7: // named_tuple_route_L58
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        (assert tmp%16#0) // can only call when not creating
        let tmp%18#0: bytes = (txna ApplicationArgs 1)
        let args.a#0: uint64 = (extract_uint64 tmp%18#0 0u)
        let item_start_offset%3#0: uint64 = (extract_uint16 tmp%18#0 8u)
        let item_end_offset%3#0: uint64 = (extract_uint16 tmp%18#0 10u)
        let item1%2#0: bytes = (substring3 tmp%18#0 item_start_offset%3#0 item_end_offset%3#0)
        let args.b#0: bytes = ((extract 2 0) item1%2#0)
        let item_end_offset%4#0: uint64 = (len tmp%18#0)
        let item2%0#0: bytes = (substring3 tmp%18#0 item_end_offset%3#0 item_end_offset%4#0)
        let args.c#0: bytes = ((extract 2 0) item2%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob args.a#0)
        let length%2#0: uint64 = (len args.b#0)
        let as_bytes%5#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 args.b#0)
        let length%3#0: uint64 = (len args.c#0)
        let as_bytes%6#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 args.c#0)
        let encoded_tuple_buffer%11#0: bytes = (concat val_as_bytes%1#0 0x000c)
        let data_length%3#0: uint64 = (len encoded_value%2#0)
        let current_tail_offset%6#0: uint64 = (+ 12u data_length%3#0)
        let as_bytes%8#0: bytes[8] = (itob current_tail_offset%6#0)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 offset_as_uint16%4#0)
        let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 encoded_value%2#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 encoded_value%3#0)
        let tmp%19#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%14#0)
        (log tmp%19#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@12
    block@8: // nested_named_tuple_params_route_L63
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        let tmp%24#0: bytes = (txna ApplicationArgs 1)
        let args.foo#0: uint64 = (extract_uint64 tmp%24#0 0u)
        let args.foo_arc#0: bytes[8] = ((extract 8 8) tmp%24#0) // on error: Index access is out of bounds
        let item_start_offset%5#0: uint64 = (extract_uint16 tmp%24#0 16u)
        let item_end_offset%5#0: uint64 = (len tmp%24#0)
        let item2%1#0: bytes = (substring3 tmp%24#0 item_start_offset%5#0 item_end_offset%5#0)
        let args.child.a#0: uint64 = (extract_uint64 item2%1#0 0u)
        let item_start_offset%6#0: uint64 = (extract_uint16 item2%1#0 8u)
        let item_end_offset%6#0: uint64 = (extract_uint16 item2%1#0 10u)
        let item1%4#0: bytes = (substring3 item2%1#0 item_start_offset%6#0 item_end_offset%6#0)
        let args.child.b#0: bytes = ((extract 2 0) item1%4#0)
        let item_end_offset%7#0: uint64 = (len item2%1#0)
        let item2%2#0: bytes = (substring3 item2%1#0 item_end_offset%6#0 item_end_offset%7#0)
        let args.child.c#0: bytes = ((extract 2 0) item2%2#0)
        let val_as_bytes%2#0: bytes[8] = (itob args.foo#0)
        let val_as_bytes%3#0: bytes[8] = (itob args.child.a#0)
        let length%4#0: uint64 = (len args.child.b#0)
        let as_bytes%9#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 args.child.b#0)
        let length%5#0: uint64 = (len args.child.c#0)
        let as_bytes%10#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 args.child.c#0)
        let encoded_tuple_buffer%17#0: bytes = (concat val_as_bytes%3#0 0x000c)
        let data_length%5#0: uint64 = (len encoded_value%4#0)
        let current_tail_offset%9#0: uint64 = (+ 12u data_length%5#0)
        let as_bytes%12#0: bytes[8] = (itob current_tail_offset%9#0)
        let offset_as_uint16%6#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded_tuple_buffer%18#0: bytes = (concat encoded_tuple_buffer%17#0 offset_as_uint16%6#0)
        let encoded_tuple_buffer%19#0: bytes = (concat encoded_tuple_buffer%18#0 encoded_value%4#0)
        let encoded_tuple_buffer%20#0: bytes = (concat encoded_tuple_buffer%19#0 encoded_value%5#0)
        let encoded_tuple_buffer%23#0: bytes = (concat val_as_bytes%2#0 args.foo_arc#0)
        let encoded_tuple_buffer%24#0: bytes = (concat encoded_tuple_buffer%23#0 0x0012)
        let encoded_tuple_buffer%25#0: bytes = (concat encoded_tuple_buffer%24#0 encoded_tuple_buffer%20#0)
        let tmp%25#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%25#0)
        (log tmp%25#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@12
    block@9: // bare_routing_L18
        let tmp%26#0: uint64 = (txn OnCompletion)
        goto tmp%26#0 ? block@11 : block@10
    block@10: // __algopy_default_create_L1
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // can only call when creating
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@12
    block@11: // after_if_else_L18
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@12
    block@12: // after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router___L1
        return tmp%0#0