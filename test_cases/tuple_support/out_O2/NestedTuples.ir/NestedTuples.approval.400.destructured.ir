main test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "build_nested_call_count" 0u)
        (app_global_put "twm" 0x0004000600000000000000000000000c000e00000000)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@31
    block@4: // abi_routing_L48
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void" => block@5, method "load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])" => block@6, method "store_tuple_in_box((uint64,uint64))void" => block@7, method "is_tuple_in_box((uint64,uint64))bool" => block@8, method "load_tuple_from_box((uint64,uint64))(uint64,uint64)" => block@9, method "maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)" => block@10, method "load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)" => block@14, method "load_tuple_from_local_state_or_default(string)(uint64,uint64)" => block@18, method "mutate_local_tuple()(uint64[],(uint64,byte[],string))" => block@22, method "mutate_tuple_in_storage_currently_supported_method()void" => block@26, method "run_tests()bool" => block@27, method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))" => block@28, method "named_tuple((uint64,byte[],string))(uint64,byte[],string)" => block@29, method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))" => block@30, * => block@33}
    block@5: // store_tuple_route_L61
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0: Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[])) = (txna ApplicationArgs 1)
        (app_global_put "pwl" reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@6: // load_tuple_route_L65
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pwl")
        (assert maybe_exists%0#0) // check self.pwl exists
        let tmp%24#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%24#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@7: // store_tuple_in_box_route_L69
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = ((extract 0 8) reinterpret_Encoded(uint64,uint64)%0#0)
        let key.b#4: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 8u)
        let tmp%0#2: uint64 = (+ key.b#4 1u)
        let box_prefixed_key%0#0: bytes = (concat "box" reinterpret_Encoded(uint64,uint64)%0#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%0#2)
        let aggregate%head%6#0: bytes = (concat aggregate%extract%0#0 aggregate%val_as_bytes%2#0)
        (box_put box_prefixed_key%0#0 aggregate%head%6#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@8: // is_tuple_in_box_route_L73
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let box_prefixed_key%0#0: bytes = (concat "box" reinterpret_Encoded(uint64,uint64)%1#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u maybe_exists%0#0)
        let tmp%39#0: bytes = (concat 0x151f7c75 aggregate%encoded_bool%0#0)
        (log tmp%39#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@9: // load_tuple_from_box_route_L77
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let box_prefixed_key%0#0: bytes = (concat "box" reinterpret_Encoded(uint64,uint64)%2#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.box entry exists
        let tmp%49#0: bytes = (concat 0x151f7c75 aggregate%box_get%0#0)
        (log tmp%49#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@10: // maybe_load_tuple_from_box_route_L81
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (! tmp%50#0)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        (assert tmp%52#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%3#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let box_prefixed_key%0#0: bytes = (concat "box" reinterpret_Encoded(uint64,uint64)%3#0)
        let (maybe_value%0#0: bytes, exists#0: bool) = (box_get box_prefixed_key%0#0)
        goto exists#0 ? block@11 : block@12
    block@11: // ternary_true_L83
        let aggregate%item0%1#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let aggregate%item1%1#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let maybe_value.b#0: uint64 = aggregate%item1%1#0
        let maybe_value.a#0: uint64 = aggregate%item0%1#0
        goto block@13
    block@12: // ternary_false_L83
        let ternary_result%0.a#2: uint64 = undefined
        let ternary_result%0.b#2: uint64 = undefined
        let maybe_value.b#0: uint64 = ternary_result%0.b#2
        let maybe_value.a#0: uint64 = ternary_result%0.a#2
        goto block@13
    block@13: // ternary_merge_L83
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob maybe_value.a#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob maybe_value.b#0)
        let aggregate%head%8#0: bytes = (concat aggregate%val_as_bytes%3#0 aggregate%val_as_bytes%4#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u exists#0)
        let aggregate%head%10#0: bytes = (concat aggregate%head%8#0 aggregate%encoded_bool%1#0)
        let tmp%60#0: bytes = (concat 0x151f7c75 aggregate%head%10#0)
        (log tmp%60#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@14: // load_tuple_from_box_or_default_route_L86
        let tmp%61#0: uint64 = (txn OnCompletion)
        let tmp%62#0: bool = (! tmp%61#0)
        (assert tmp%62#0) // OnCompletion is not NoOp
        let tmp%63#0: uint64 = (txn ApplicationID)
        (assert tmp%63#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%4#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let box_prefixed_key%0#0: bytes = (concat "box" reinterpret_Encoded(uint64,uint64)%4#0)
        let (tmp%0#2: uint64, tmp%1#5: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        goto maybe_exists%0#0 ? block@15 : block@16
    block@15: // ternary_true_L88
        let aggregate%item0%2#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let aggregate%item1%2#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let ternary_result%0.b#2: uint64 = aggregate%item1%2#0
        let ternary_result%0.a#2: uint64 = aggregate%item0%2#0
        goto block@17
    block@16: // ternary_false_L88
        let ternary_result%0.b#2: uint64 = tmp%1#5
        let ternary_result%0.a#2: uint64 = tmp%0#2
        goto block@17
    block@17: // ternary_merge_L88
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob ternary_result%0.a#2)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob ternary_result%0.b#2)
        let aggregate%head%12#0: bytes = (concat aggregate%val_as_bytes%5#0 aggregate%val_as_bytes%6#0)
        let tmp%70#0: bytes = (concat 0x151f7c75 aggregate%head%12#0)
        (log tmp%70#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@18: // load_tuple_from_local_state_or_default_route_L90
        let tmp%71#0: uint64 = (txn OnCompletion)
        let tmp%72#0: bool = (! tmp%71#0)
        (assert tmp%72#0) // OnCompletion is not NoOp
        let tmp%73#0: uint64 = (txn ApplicationID)
        (assert tmp%73#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let local#0: bytes = test_cases.tuple_support.nested_tuples.echo(key#0)
        let tmp%1#4: account = test_cases.tuple_support.nested_tuples.get_sender_inefficiently()
        let (tmp%2#4: uint64, tmp%3#0: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex tmp%1#4 0u local#0)
        goto maybe_exists%0#0 ? block@19 : block@20
    block@19: // ternary_true_L93
        let aggregate%item0%3#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let aggregate%item1%3#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let ternary_result%0.b#2: uint64 = aggregate%item1%3#0
        let ternary_result%0.a#2: uint64 = aggregate%item0%3#0
        goto block@21
    block@20: // ternary_false_L93
        let ternary_result%0.b#2: uint64 = tmp%3#0
        let ternary_result%0.a#2: uint64 = tmp%2#4
        goto block@21
    block@21: // ternary_merge_L93
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob ternary_result%0.a#2)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob ternary_result%0.b#2)
        let aggregate%head%14#0: bytes = (concat aggregate%val_as_bytes%7#0 aggregate%val_as_bytes%8#0)
        let tmp%79#0: bytes = (concat 0x151f7c75 aggregate%head%14#0)
        (log tmp%79#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@22: // mutate_local_tuple_route_L95
        let tmp%80#0: uint64 = (txn OnCompletion)
        let tmp%81#0: bool = (! tmp%80#0)
        (assert tmp%81#0) // OnCompletion is not NoOp
        let tmp%82#0: uint64 = (txn ApplicationID)
        (assert tmp%82#0) // can only call when not creating
        let i#0: uint64 = 0u
        goto block@23
    block@23: // for_header_L107
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@24 : block@25
    block@24: // for_body_L108
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 0x000000000000000000000000000000010000000000000002 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let tmp%2#3: biguint = (itob i#0)
        let tmp%3#3: bool = (b== aggregate%encoded_element%0#0 tmp%2#3)
        (assert tmp%3#3)
        let i#0: uint64 = (+ i#0 1u)
        goto block@23
    block@25: // after_for_L107
        (log 0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@26: // mutate_tuple_in_storage_currently_supported_method_route_L114
        let tmp%90#0: uint64 = (txn OnCompletion)
        let tmp%91#0: bool = (! tmp%90#0)
        (assert tmp%91#0) // OnCompletion is not NoOp
        let tmp%92#0: uint64 = (txn ApplicationID)
        (assert tmp%92#0) // can only call when not creating
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "twm")
        (assert maybe_exists%0#0) // check self.twm exists
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let arr2#0: Encoded(len+uint64[]) = (substring3 maybe_value%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat arr2#0 0x0000000000000001) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr2#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr2#0: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let aggregate%len%2#0: uint64 = (len maybe_value%0#0)
        let aggregate%substring3%5#0: bytes = (substring3 maybe_value%0#0 aggregate%extract_uint16%1#0 aggregate%len%2#0)
        let aggregate%extract%9#0: bytes = ((extract 0 8) aggregate%substring3%5#0)
        let aggregate%extract_uint16%9#0: uint64 = (extract_uint16 aggregate%substring3%5#0 8u)
        let aggregate%extract_uint16%10#0: uint64 = (extract_uint16 aggregate%substring3%5#0 10u)
        let aggregate%substring3%6#0: bytes = (substring3 aggregate%substring3%5#0 aggregate%extract_uint16%9#0 aggregate%extract_uint16%10#0)
        let aggregate%item1%5#0: bytes = ((extract 2 0) aggregate%substring3%6#0)
        let aggregate%len%3#0: uint64 = (len aggregate%substring3%5#0)
        let aggregate%substring3%7#0: bytes = (substring3 aggregate%substring3%5#0 aggregate%extract_uint16%10#0 aggregate%len%3#0)
        let aggregate%item2%1#0: bytes = ((extract 2 0) aggregate%substring3%7#0)
        let aggregate%data_length%8#0: uint64 = (len arr2#0)
        let aggregate%current_tail_offset%8#0: uint64 = (+ 4u aggregate%data_length%8#0)
        let aggregate%length%4#0: uint64 = (len aggregate%item1%5#0)
        let aggregate%as_bytes%15#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%15#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 aggregate%item1%5#0)
        let aggregate%head%26#0: bytes = (concat aggregate%extract%9#0 0x000c)
        let aggregate%data_length%9#0: uint64 = (len aggregate%encoded_value%4#0)
        let aggregate%current_tail_offset%9#0: uint64 = (+ 12u aggregate%data_length%9#0)
        let aggregate%length%5#0: uint64 = (len aggregate%item2%1#0)
        let aggregate%as_bytes%17#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%17#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 aggregate%item2%1#0)
        let aggregate%as_bytes%18#0: bytes[8] = (itob aggregate%current_tail_offset%9#0)
        let aggregate%offset_as_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%18#0)
        let aggregate%head%27#0: bytes = (concat aggregate%head%26#0 aggregate%offset_as_uint16%10#0)
        let aggregate%concat%8#0: bytes = (concat aggregate%head%27#0 aggregate%encoded_value%4#0)
        let aggregate%concat%9#0: bytes = (concat aggregate%concat%8#0 aggregate%encoded_value%5#0)
        let aggregate%as_bytes%19#0: bytes[8] = (itob aggregate%current_tail_offset%8#0)
        let aggregate%offset_as_uint16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%19#0)
        let aggregate%head%28#0: bytes = (concat 0x0004 aggregate%offset_as_uint16%11#0)
        let aggregate%concat%10#0: bytes = (concat aggregate%head%28#0 arr2#0)
        let aggregate%concat%11#0: bytes = (concat aggregate%concat%10#0 aggregate%concat%9#0)
        (app_global_put "twm" aggregate%concat%11#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@27: // run_tests_route_L120
        let tmp%94#0: uint64 = (txn OnCompletion)
        let tmp%95#0: bool = (! tmp%94#0)
        (assert tmp%95#0) // OnCompletion is not NoOp
        let tmp%96#0: uint64 = (txn ApplicationID)
        (assert tmp%96#0) // can only call when not creating
        let (nt.1.0#0: uint64, nt.1.1#0: uint64) = (addw 1u 2u)
        let tmp%4#0: bool = (! nt.1.0#0)
        let tmp%6#0: bool = (== nt.1.1#0 3u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0)
        (assert tmp%4#0)
        (assert tmp%6#0)
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let t.0#0: uint64 = 1u
        let t.1#0: uint64 = 2u
        goto block@54
    block@54: // for_body_L298
        let tmp%0#2: uint64 = (+ t.0#0 t.1#0)
        let total#0: uint64 = (+ total#0 tmp%0#2)
        goto_nth [block@55, block@56, block@57][loop_counter%0#0] else goto block@58
    block@55: // for_header_1_L297
        let loop_counter%0#0: uint64 = 1u
        let t.0#0: uint64 = 2u
        let t.1#0: uint64 = 1u
        goto block@54
    block@56: // for_header_2_L297
        let loop_counter%0#0: uint64 = 2u
        let t.0#0: uint64 = 1u
        let t.1#0: uint64 = 1u
        goto block@54
    block@57: // for_header_3_L297
        let loop_counter%0#0: uint64 = 3u
        let t.0#0: uint64 = 2u
        let t.1#0: uint64 = 2u
        goto block@54
    block@58: // after_for_L297
        let loop_counter%1#0: uint64 = 0u
        let a#4: uint64 = 1u
        let b#5: uint64 = 2u
        goto block@59
    block@59: // for_body_L302
        let tmp%2#4: uint64 = (+ a#4 b#5)
        let total#0: uint64 = (+ total#0 tmp%2#4)
        goto_nth [block@60, block@61, block@62][loop_counter%1#0] else goto block@63
    block@60: // for_header_1_L301
        let loop_counter%1#0: uint64 = 1u
        let a#4: uint64 = 2u
        let b#5: uint64 = 1u
        goto block@59
    block@61: // for_header_2_L301
        let loop_counter%1#0: uint64 = 2u
        let a#4: uint64 = 1u
        let b#5: uint64 = 1u
        goto block@59
    block@62: // for_header_3_L301
        let loop_counter%1#0: uint64 = 3u
        let a#4: uint64 = 2u
        let b#5: uint64 = 2u
        goto block@59
    block@63: // after_for_L301
        let tmp%4#4: uint64 = (/ total#0 8u)
        let tmp%5#2: bool = (== tmp%4#4 3u)
        (assert tmp%5#2)
        (app_global_put "build_nested_call_count" 1u)
        (log 0x151f7c7580)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@28: // nested_tuple_params_route_L149
        let tmp%101#0: uint64 = (txn OnCompletion)
        let tmp%102#0: bool = (! tmp%101#0)
        (assert tmp%102#0) // OnCompletion is not NoOp
        let tmp%103#0: uint64 = (txn ApplicationID)
        (assert tmp%103#0) // can only call when not creating
        let reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0: Encoded((len+utf8[]),((len+uint8[]),(uint64))) = (txna ApplicationArgs 1)
        let aggregate%extract_uint16%12#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 0u)
        let aggregate%extract_uint16%13#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 2u)
        let aggregate%substring3%8#0: bytes = (substring3 reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 aggregate%extract_uint16%12#0 aggregate%extract_uint16%13#0)
        let args.0#0: string = ((extract 2 0) aggregate%substring3%8#0)
        let aggregate%len%4#0: uint64 = (len reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0)
        let aggregate%substring3%9#0: bytes = (substring3 reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 aggregate%extract_uint16%13#0 aggregate%len%4#0)
        let aggregate%extract_uint16%15#0: uint64 = (extract_uint16 aggregate%substring3%9#0 0u)
        let aggregate%len%5#0: uint64 = (len aggregate%substring3%9#0)
        let aggregate%substring3%10#0: bytes = (substring3 aggregate%substring3%9#0 aggregate%extract_uint16%15#0 aggregate%len%5#0)
        let args.1.0#0: bytes = ((extract 2 0) aggregate%substring3%10#0)
        let aggregate%extract%10#0: bytes = ((extract 2 8) aggregate%substring3%9#0)
        let aggregate%extract%11#0: bytes = ((extract 0 8) aggregate%extract%10#0)
        let aggregate%length%6#0: uint64 = (len args.1.0#0)
        let aggregate%as_bytes%21#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%21#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 args.1.0#0)
        let aggregate%data_length%12#0: uint64 = (len aggregate%encoded_value%6#0)
        let aggregate%current_tail_offset%12#0: uint64 = (+ 4u aggregate%data_length%12#0)
        let aggregate%length%7#0: uint64 = (len args.0#0)
        let aggregate%as_bytes%23#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%23#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 args.0#0)
        let aggregate%head%33#0: bytes = (concat 0x000a aggregate%extract%11#0)
        let aggregate%concat%12#0: bytes = (concat aggregate%head%33#0 aggregate%encoded_value%7#0)
        let aggregate%as_bytes%25#0: bytes[8] = (itob aggregate%current_tail_offset%12#0)
        let aggregate%offset_as_uint16%14#0: bytes = ((extract 6 2) aggregate%as_bytes%25#0)
        let aggregate%head%34#0: bytes = (concat 0x0004 aggregate%offset_as_uint16%14#0)
        let aggregate%concat%13#0: bytes = (concat aggregate%head%34#0 aggregate%encoded_value%6#0)
        let aggregate%concat%14#0: bytes = (concat aggregate%concat%13#0 aggregate%concat%12#0)
        let tmp%112#0: bytes = (concat 0x151f7c75 aggregate%concat%14#0)
        (log tmp%112#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@29: // named_tuple_route_L156
        let tmp%113#0: uint64 = (txn OnCompletion)
        let tmp%114#0: bool = (! tmp%113#0)
        (assert tmp%114#0) // OnCompletion is not NoOp
        let tmp%115#0: uint64 = (txn ApplicationID)
        (assert tmp%115#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0: Encoded(uint64,(len+uint8[]),(len+utf8[])) = (txna ApplicationArgs 1)
        let tmp%124#0: bytes = (concat 0x151f7c75 reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0)
        (log tmp%124#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@30: // nested_named_tuple_params_route_L161
        let tmp%125#0: uint64 = (txn OnCompletion)
        let tmp%126#0: bool = (! tmp%125#0)
        (assert tmp%126#0) // OnCompletion is not NoOp
        let tmp%127#0: uint64 = (txn ApplicationID)
        (assert tmp%127#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0: Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))) = (txna ApplicationArgs 1)
        let tmp%140#0: bytes = (concat 0x151f7c75 reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0)
        (log tmp%140#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@31: // bare_routing_L48
        let tmp%141#0: uint64 = (txn OnCompletion)
        goto tmp%141#0 ? block@33 : block@32
    block@32: // __algopy_default_create_L1
        let tmp%142#0: uint64 = (txn ApplicationID)
        let tmp%143#0: bool = (! tmp%142#0)
        (assert tmp%143#0) // can only call when creating
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@33: // after_if_else_L48
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0
        goto block@34
    block@34: // after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.tuple_support.nested_tuples.get_sender_inefficiently() -> account:
    block@0: // L179
        (log "Order is important")
        let tmp%0#0: account = (txn Sender)
        return tmp%0#0

subroutine test_cases.tuple_support.nested_tuples.simple_tup(a: uint64, b: uint64) -> <uint64, uint64>:
    block@0: // L185
        (log "I'm just a simple tup")
        return a#0 b#0

subroutine test_cases.tuple_support.nested_tuples.echo(s: string) -> string:
    block@0: // L191
        (log "Is there an echo in here?")
        return s#0