main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "build_nested_call_count" 0u)
        (app_global_put "twm" 0x0004000600000000000000000000000c000e00000000)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@4 : block@23
    block@4: // abi_routing_L48
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void" => block@6, method "load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])" => block@7, method "store_tuple_in_box((uint64,uint64))void" => block@8, method "is_tuple_in_box((uint64,uint64))bool" => block@9, method "load_tuple_from_box((uint64,uint64))(uint64,uint64)" => block@10, method "maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)" => block@11, method "load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)" => block@12, method "load_tuple_from_local_state_or_default(string)(uint64,uint64)" => block@13, method "mutate_local_tuple()(uint64[],(uint64,byte[],string))" => block@14, method "mutate_tuple_in_storage_currently_supported_method()void" => block@15, method "run_tests()bool" => block@16, method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))" => block@17, method "named_tuple((uint64,byte[],string))(uint64,byte[],string)" => block@18, method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))" => block@19, * => block@22}
    block@6: // store_tuple_route_L61
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#2 0u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 4u)
        (assert eq%0#0) // invalid tail pointer at index 0 of ((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 tmp%0#2 2u)
        let aggregate%substring3%0#0: bytes = (substring3 tmp%0#2 extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let extract_uint16%1#0: uint64 = (extract_uint16 aggregate%substring3%0#0 16u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 18u)
        (assert eq%1#0) // invalid tail pointer at index 2 of (uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))
        let aggregate%len%0#0: uint64 = (len aggregate%substring3%0#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%substring3%0#0 extract_uint16%1#0 aggregate%len%0#0)
        let extract_uint16%2#1: uint64 = (extract_uint16 aggregate%substring3%2#0 8u) // on error: invalid tuple encoding
        let eq%2#0: bool = (== extract_uint16%2#1 12u)
        (assert eq%2#0) // invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))
        let aggregate%extract_uint16%9#0: uint64 = (extract_uint16 aggregate%substring3%2#0 10u)
        let aggregate%substring3%5#0: bytes = (substring3 aggregate%substring3%2#0 extract_uint16%2#1 aggregate%extract_uint16%9#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 aggregate%substring3%5#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%0#0 14u)
        let eq%3#0: bool = (== aggregate%extract_uint16%9#0 add%1#0)
        (assert eq%3#0) // invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))
        let aggregate%len%3#0: uint64 = (len aggregate%substring3%2#0)
        let aggregate%substring3%8#0: bytes = (substring3 aggregate%substring3%2#0 aggregate%extract_uint16%9#0 aggregate%len%3#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 aggregate%substring3%8#0 0u) // on error: invalid array length header
        let add%2#0: uint64 = (+ aggregate%array_length%1#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let add%5#0: uint64 = (+ add%3#0 22u)
        let eq%4#0: bool = (== aggregate%extract_uint16%1#0 add%5#0)
        (assert eq%4#0) // invalid tail pointer at index 1 of ((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))
        let aggregate%len%4#0: uint64 = (len tmp%0#2)
        let aggregate%substring3%9#0: bytes = (substring3 tmp%0#2 aggregate%extract_uint16%1#0 aggregate%len%4#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 aggregate%substring3%9#0 0u) // on error: invalid array length header
        let num_bytes%0#0: uint64 = (* aggregate%array_length%2#0 2u)
        let array_data%0#0: bytes = ((extract 2 0) aggregate%substring3%9#0)
        let index%0#0: uint64 = 0u
        goto block@65
    block@65: // for_header_L61
        let continue_looping%0#0: bool = (< index%0#0 aggregate%array_length%2#0)
        goto continue_looping%0#0 ? block@66 : block@67
    block@66: // for_body_L61
        let head_offset_bytes%0#0: uint64 = (* index%0#0 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#0)
        (assert offset_is_correct%0#0) // invalid tail pointer for (len+(uint64,(len+uint8[]),(len+utf8[]))[])
        let aggregate%next_index%0#0: uint64 = (+ index%0#0 1u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%2#0 aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len array_data%0#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%11#0: bytes = (substring3 array_data%0#0 item_offset%0#0 aggregate%end_offset%0#0)
        let extract_uint16%5#0: uint64 = (extract_uint16 aggregate%substring3%11#0 8u) // on error: invalid tuple encoding
        let eq%5#0: bool = (== extract_uint16%5#0 12u)
        (assert eq%5#0) // invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))
        let aggregate%extract_uint16%18#0: uint64 = (extract_uint16 aggregate%substring3%11#0 10u)
        let aggregate%substring3%14#0: bytes = (substring3 aggregate%substring3%11#0 extract_uint16%5#0 aggregate%extract_uint16%18#0)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 aggregate%substring3%14#0 0u) // on error: invalid array length header
        let add%7#0: uint64 = (+ aggregate%array_length%5#0 14u)
        let eq%6#0: bool = (== aggregate%extract_uint16%18#0 add%7#0)
        (assert eq%6#0) // invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))
        let aggregate%len%8#0: uint64 = (len aggregate%substring3%11#0)
        let aggregate%substring3%17#0: bytes = (substring3 aggregate%substring3%11#0 aggregate%extract_uint16%18#0 aggregate%len%8#0)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 aggregate%substring3%17#0 0u) // on error: invalid array length header
        let add%8#0: uint64 = (+ aggregate%array_length%7#0 2u)
        let add%9#0: uint64 = (+ add%7#0 add%8#0)
        let num_bytes%0#0: uint64 = (+ num_bytes%0#0 add%9#0)
        let index%0#0: uint64 = aggregate%next_index%0#0
        goto block@65
    block@67: // after_for_L61
        let num_bytes%1#0: uint64 = (+ num_bytes%0#0 2u)
        let add%10#0: uint64 = (+ add%5#0 num_bytes%1#0)
        let eq%7#0: bool = (== aggregate%len%4#0 add%10#0)
        (assert eq%7#0) // invalid number of bytes for test_cases.tuple_support.nested_tuples.ParentWithList
        (app_global_put "pwl" tmp%0#2)
        exit 1u
    block@7: // load_tuple_route_L65
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pwl")
        (assert maybe_exists%0#0) // check self.pwl exists
        let tmp%7#1: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%7#1)
        exit 1u
    block@8: // store_tuple_in_box_route_L69
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#3: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#3 16u)
        (assert eq%0#0) // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup
        let aggregate%extract%0#0: bytes = ((extract 0 8) tmp%0#2)
        let key.b#4: uint64 = (extract_uint64 tmp%0#2 8u)
        let tmp%0#1: uint64 = (+ key.b#4 1u)
        let box_prefixed_key%0#0: bytes = (concat "box" tmp%0#2)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%0#1)
        let aggregate%head%6#0: bytes = (concat aggregate%extract%0#0 aggregate%val_as_bytes%2#0)
        (box_put box_prefixed_key%0#0 aggregate%head%6#0)
        exit 1u
    block@9: // is_tuple_in_box_route_L73
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#3: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#3 16u)
        (assert eq%0#0) // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup
        let box_prefixed_key%0#0: bytes = (concat "box" tmp%0#2)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u maybe_exists%0#0)
        let tmp%5#2: bytes = (concat 0x151f7c75 aggregate%encoded_bool%0#0)
        (log tmp%5#2)
        exit 1u
    block@10: // load_tuple_from_box_route_L77
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#3: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#3 16u)
        (assert eq%0#0) // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup
        let box_prefixed_key%0#0: bytes = (concat "box" tmp%0#2)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.box entry exists
        let tmp%6#0: bytes = (concat 0x151f7c75 aggregate%box_get%0#0)
        (log tmp%6#0)
        exit 1u
    block@11: // maybe_load_tuple_from_box_route_L81
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#3: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#3 16u)
        (assert eq%0#0) // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup
        let box_prefixed_key%0#0: bytes = (concat "box" tmp%0#2)
        let (maybe_value%0#0: bytes, exists#0: bool) = (box_get box_prefixed_key%0#0)
        goto exists#0 ? block@52 : block@53
    block@52: // ternary_true_L83
        let aggregate%item0%1#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let aggregate%item1%1#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let maybe_value.b#0: uint64 = aggregate%item1%1#0
        let maybe_value.a#0: uint64 = aggregate%item0%1#0
        goto block@54
    block@53: // ternary_false_L83
        let ternary_result%0.a#2: uint64 = undefined
        let ternary_result%0.b#2: uint64 = undefined
        let maybe_value.b#0: uint64 = ternary_result%0.b#2
        let maybe_value.a#0: uint64 = ternary_result%0.a#2
        goto block@54
    block@54: // ternary_merge_L83
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob maybe_value.a#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob maybe_value.b#0)
        let aggregate%head%8#0: bytes = (concat aggregate%val_as_bytes%3#0 aggregate%val_as_bytes%4#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u exists#0)
        let aggregate%head%10#0: bytes = (concat aggregate%head%8#0 aggregate%encoded_bool%1#0)
        let tmp%7#1: bytes = (concat 0x151f7c75 aggregate%head%10#0)
        (log tmp%7#1)
        exit 1u
    block@12: // load_tuple_from_box_or_default_route_L86
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let len%0#3: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#3 16u)
        (assert eq%0#0) // invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup
        let box_prefixed_key%0#0: bytes = (concat "box" tmp%0#2)
        let (tmp%0#1: uint64, tmp%1#13: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        goto maybe_exists%0#0 ? block@47 : block@48
    block@47: // ternary_true_L88
        let aggregate%item0%2#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let aggregate%item1%2#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let ternary_result%0.b#2: uint64 = aggregate%item1%2#0
        let ternary_result%0.a#2: uint64 = aggregate%item0%2#0
        goto block@49
    block@48: // ternary_false_L88
        let ternary_result%0.b#2: uint64 = tmp%1#13
        let ternary_result%0.a#2: uint64 = tmp%0#1
        goto block@49
    block@49: // ternary_merge_L88
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob ternary_result%0.a#2)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob ternary_result%0.b#2)
        let aggregate%head%12#0: bytes = (concat aggregate%val_as_bytes%5#0 aggregate%val_as_bytes%6#0)
        let tmp%6#0: bytes = (concat 0x151f7c75 aggregate%head%12#0)
        (log tmp%6#0)
        exit 1u
    block@13: // load_tuple_from_local_state_or_default_route_L90
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%8#0: uint64 = (extract_uint16 tmp%0#2 0u) // on error: invalid array length header
        let add%0#3: uint64 = (+ aggregate%array_length%8#0 2u)
        let len%0#3: uint64 = (len tmp%0#2)
        let eq%0#0: bool = (== len%0#3 add%0#3)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let key#0: string = ((extract 2 0) tmp%0#2)
        let local#0: bytes = test_cases.tuple_support.nested_tuples.echo(key#0)
        let tmp%1#11: account = test_cases.tuple_support.nested_tuples.get_sender_inefficiently()
        let (tmp%2#0: uint64, tmp%3#8: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex tmp%1#11 0u local#0)
        goto maybe_exists%0#0 ? block@42 : block@43
    block@42: // ternary_true_L93
        let aggregate%item0%3#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let aggregate%item1%3#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let ternary_result%0.b#2: uint64 = aggregate%item1%3#0
        let ternary_result%0.a#2: uint64 = aggregate%item0%3#0
        goto block@44
    block@43: // ternary_false_L93
        let ternary_result%0.b#2: uint64 = tmp%3#8
        let ternary_result%0.a#2: uint64 = tmp%2#0
        goto block@44
    block@44: // ternary_merge_L93
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob ternary_result%0.a#2)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob ternary_result%0.b#2)
        let aggregate%head%14#0: bytes = (concat aggregate%val_as_bytes%7#0 aggregate%val_as_bytes%8#0)
        let tmp%5#2: bytes = (concat 0x151f7c75 aggregate%head%14#0)
        (log tmp%5#2)
        exit 1u
    block@14: // mutate_local_tuple_route_L95
        let value_internal%0#0: uint64 = 0u
        let i#0: uint64 = value_internal%0#0
        goto block@37
    block@37: // for_header_L107
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@38 : block@39
    block@38: // for_body_L108
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 0x000000000000000000000000000000010000000000000002 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let tmp%2#8: biguint = (itob i#0)
        let tmp%3#0: bool = (b== aggregate%encoded_element%0#0 tmp%2#8)
        (assert tmp%3#0)
        let value_internal%0#0: uint64 = (+ i#0 1u)
        let i#0: uint64 = value_internal%0#0
        goto block@37
    block@39: // after_for_L107
        (log 0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000)
        exit 1u
    block@15: // mutate_tuple_in_storage_currently_supported_method_route_L114
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "twm")
        (assert maybe_exists%0#0) // check self.twm exists
        let aggregate%extract_uint16%21#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let aggregate%extract_uint16%22#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let arr2#0: Encoded(len+uint64[]) = (substring3 maybe_value%0#0 aggregate%extract_uint16%21#0 aggregate%extract_uint16%22#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat arr2#0 0x0000000000000001) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr2#0 0u)
        let add%0#3: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#3)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr2#0: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let aggregate%len%11#0: uint64 = (len maybe_value%0#0)
        let aggregate%substring3%23#0: bytes = (substring3 maybe_value%0#0 aggregate%extract_uint16%22#0 aggregate%len%11#0)
        let aggregate%extract%9#0: bytes = ((extract 0 8) aggregate%substring3%23#0)
        let aggregate%extract_uint16%30#0: uint64 = (extract_uint16 aggregate%substring3%23#0 8u)
        let aggregate%extract_uint16%31#0: uint64 = (extract_uint16 aggregate%substring3%23#0 10u)
        let aggregate%substring3%24#0: bytes = (substring3 aggregate%substring3%23#0 aggregate%extract_uint16%30#0 aggregate%extract_uint16%31#0)
        let aggregate%item1%5#0: bytes = ((extract 2 0) aggregate%substring3%24#0)
        let aggregate%len%12#0: uint64 = (len aggregate%substring3%23#0)
        let aggregate%substring3%25#0: bytes = (substring3 aggregate%substring3%23#0 aggregate%extract_uint16%31#0 aggregate%len%12#0)
        let aggregate%item2%1#0: bytes = ((extract 2 0) aggregate%substring3%25#0)
        let aggregate%data_length%8#0: uint64 = (len arr2#0)
        let aggregate%current_tail_offset%8#0: uint64 = (+ 4u aggregate%data_length%8#0)
        let aggregate%length%4#0: uint64 = (len aggregate%item1%5#0)
        let aggregate%as_bytes%15#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%15#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 aggregate%item1%5#0)
        let aggregate%head%26#0: bytes = (concat aggregate%extract%9#0 0x000c)
        let aggregate%data_length%9#0: uint64 = (len aggregate%encoded_value%4#0)
        let aggregate%current_tail_offset%9#0: uint64 = (+ 12u aggregate%data_length%9#0)
        let aggregate%length%5#0: uint64 = (len aggregate%item2%1#0)
        let aggregate%as_bytes%17#0: bytes[8] = (itob aggregate%length%5#0)
        let aggregate%length_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%17#0)
        let aggregate%encoded_value%5#0: bytes = (concat aggregate%length_uint16%5#0 aggregate%item2%1#0)
        let aggregate%as_bytes%18#0: bytes[8] = (itob aggregate%current_tail_offset%9#0)
        let aggregate%offset_as_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%18#0)
        let aggregate%head%27#0: bytes = (concat aggregate%head%26#0 aggregate%offset_as_uint16%10#0)
        let aggregate%concat%8#0: bytes = (concat aggregate%head%27#0 aggregate%encoded_value%4#0)
        let aggregate%concat%9#0: bytes = (concat aggregate%concat%8#0 aggregate%encoded_value%5#0)
        let aggregate%as_bytes%19#0: bytes[8] = (itob aggregate%current_tail_offset%8#0)
        let aggregate%offset_as_uint16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%19#0)
        let aggregate%head%28#0: bytes = (concat 0x0004 aggregate%offset_as_uint16%11#0)
        let aggregate%concat%10#0: bytes = (concat aggregate%head%28#0 arr2#0)
        let aggregate%concat%11#0: bytes = (concat aggregate%concat%10#0 aggregate%concat%9#0)
        (app_global_put "twm" aggregate%concat%11#0)
        exit 1u
    block@16: // run_tests_route_L120
        let (nt.1.0#0: uint64, nt.1.1#0: uint64) = (addw 1u 2u)
        let tmp%4#8: bool = (! nt.1.0#0)
        let tmp%6#6: bool = (== nt.1.1#0 3u)
        let tmp%7#4: bool = (&& tmp%4#8 tmp%6#6)
        (assert tmp%7#4)
        (assert tmp%4#8)
        (assert tmp%6#6)
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let t.0#0: uint64 = 1u
        let t.1#0: uint64 = 2u
        goto block@87
    block@87: // for_body_L298
        let tmp%0#1: uint64 = (+ t.0#0 t.1#0)
        let total#0: uint64 = (+ total#0 tmp%0#1)
        goto_nth [block@88, block@89, block@90][loop_counter%0#0] else goto block@91
    block@88: // for_header_1_L297
        let loop_counter%0#0: uint64 = 1u
        let t.0#0: uint64 = 2u
        let t.1#0: uint64 = 1u
        goto block@87
    block@89: // for_header_2_L297
        let loop_counter%0#0: uint64 = 2u
        let t.0#0: uint64 = 1u
        let t.1#0: uint64 = 1u
        goto block@87
    block@90: // for_header_3_L297
        let loop_counter%0#0: uint64 = 3u
        let t.0#0: uint64 = 2u
        let t.1#0: uint64 = 2u
        goto block@87
    block@91: // after_for_L297
        let loop_counter%1#0: uint64 = 0u
        let a#2: uint64 = 1u
        let b#2: uint64 = 2u
        goto block@92
    block@92: // for_body_L302
        let tmp%2#0: uint64 = (+ a#2 b#2)
        let total#0: uint64 = (+ total#0 tmp%2#0)
        goto_nth [block@93, block@94, block@95][loop_counter%1#0] else goto block@96
    block@93: // for_header_1_L301
        let loop_counter%1#0: uint64 = 1u
        let a#2: uint64 = 2u
        let b#2: uint64 = 1u
        goto block@92
    block@94: // for_header_2_L301
        let loop_counter%1#0: uint64 = 2u
        let a#2: uint64 = 1u
        let b#2: uint64 = 1u
        goto block@92
    block@95: // for_header_3_L301
        let loop_counter%1#0: uint64 = 3u
        let a#2: uint64 = 2u
        let b#2: uint64 = 2u
        goto block@92
    block@96: // after_for_L301
        let tmp%4#0: uint64 = (/ total#0 8u)
        let tmp%5#10: bool = (== tmp%4#0 3u)
        (assert tmp%5#10)
        (app_global_put "build_nested_call_count" 1u)
        (log 0x151f7c7580)
        exit 1u
    block@17: // nested_tuple_params_route_L149
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#2 0u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 4u)
        (assert eq%0#0) // invalid tail pointer at index 0 of ((len+utf8[]),((len+uint8[]),(uint64)))
        let aggregate%extract_uint16%34#0: uint64 = (extract_uint16 tmp%0#2 2u)
        let aggregate%substring3%26#0: bytes = (substring3 tmp%0#2 extract_uint16%0#0 aggregate%extract_uint16%34#0)
        let aggregate%array_length%10#0: uint64 = (extract_uint16 aggregate%substring3%26#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%10#0 6u)
        let eq%1#0: bool = (== aggregate%extract_uint16%34#0 add%1#0)
        (assert eq%1#0) // invalid tail pointer at index 1 of ((len+utf8[]),((len+uint8[]),(uint64)))
        let aggregate%len%13#0: uint64 = (len tmp%0#2)
        let aggregate%substring3%27#0: bytes = (substring3 tmp%0#2 aggregate%extract_uint16%34#0 aggregate%len%13#0)
        let extract_uint16%2#1: uint64 = (extract_uint16 aggregate%substring3%27#0 0u) // on error: invalid tuple encoding
        let eq%2#0: bool = (== extract_uint16%2#1 10u)
        (assert eq%2#0) // invalid tail pointer at index 0 of ((len+uint8[]),(uint64))
        let aggregate%len%15#0: uint64 = (len aggregate%substring3%27#0)
        let aggregate%substring3%29#0: bytes = (substring3 aggregate%substring3%27#0 extract_uint16%2#1 aggregate%len%15#0)
        let aggregate%array_length%11#0: uint64 = (extract_uint16 aggregate%substring3%29#0 0u) // on error: invalid array length header
        let add%3#0: uint64 = (+ aggregate%array_length%11#0 12u)
        let add%4#0: uint64 = (+ add%1#0 add%3#0)
        let eq%3#0: bool = (== aggregate%len%13#0 add%4#0)
        (assert eq%3#0) // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.tuple<arc4.uint64>>>
        let args.0#0: string = ((extract 2 0) aggregate%substring3%26#0)
        let args.1.0#0: bytes = ((extract 2 0) aggregate%substring3%29#0)
        let aggregate%extract%10#0: bytes = ((extract 2 8) aggregate%substring3%27#0)
        let aggregate%extract%11#0: bytes = ((extract 0 8) aggregate%extract%10#0)
        let aggregate%length%6#0: uint64 = (len args.1.0#0)
        let aggregate%as_bytes%21#0: bytes[8] = (itob aggregate%length%6#0)
        let aggregate%length_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%21#0)
        let aggregate%encoded_value%6#0: bytes = (concat aggregate%length_uint16%6#0 args.1.0#0)
        let aggregate%data_length%12#0: uint64 = (len aggregate%encoded_value%6#0)
        let aggregate%current_tail_offset%12#0: uint64 = (+ 4u aggregate%data_length%12#0)
        let aggregate%length%7#0: uint64 = (len args.0#0)
        let aggregate%as_bytes%23#0: bytes[8] = (itob aggregate%length%7#0)
        let aggregate%length_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%23#0)
        let aggregate%encoded_value%7#0: bytes = (concat aggregate%length_uint16%7#0 args.0#0)
        let aggregate%head%33#0: bytes = (concat 0x000a aggregate%extract%11#0)
        let aggregate%concat%12#0: bytes = (concat aggregate%head%33#0 aggregate%encoded_value%7#0)
        let aggregate%as_bytes%25#0: bytes[8] = (itob aggregate%current_tail_offset%12#0)
        let aggregate%offset_as_uint16%14#0: bytes = ((extract 6 2) aggregate%as_bytes%25#0)
        let aggregate%head%34#0: bytes = (concat 0x0004 aggregate%offset_as_uint16%14#0)
        let aggregate%concat%13#0: bytes = (concat aggregate%head%34#0 aggregate%encoded_value%6#0)
        let aggregate%concat%14#0: bytes = (concat aggregate%concat%13#0 aggregate%concat%12#0)
        let tmp%11#1: bytes = (concat 0x151f7c75 aggregate%concat%14#0)
        (log tmp%11#1)
        exit 1u
    block@18: // named_tuple_route_L156
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#2 8u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 12u)
        (assert eq%0#0) // invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))
        let aggregate%extract_uint16%43#0: uint64 = (extract_uint16 tmp%0#2 10u)
        let aggregate%substring3%33#0: bytes = (substring3 tmp%0#2 extract_uint16%0#0 aggregate%extract_uint16%43#0)
        let aggregate%array_length%12#0: uint64 = (extract_uint16 aggregate%substring3%33#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%12#0 14u)
        let eq%1#0: bool = (== aggregate%extract_uint16%43#0 add%1#0)
        (assert eq%1#0) // invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))
        let aggregate%len%18#0: uint64 = (len tmp%0#2)
        let aggregate%substring3%34#0: bytes = (substring3 tmp%0#2 aggregate%extract_uint16%43#0 aggregate%len%18#0)
        let aggregate%array_length%13#0: uint64 = (extract_uint16 aggregate%substring3%34#0 0u) // on error: invalid array length header
        let add%2#0: uint64 = (+ aggregate%array_length%13#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let eq%2#0: bool = (== aggregate%len%18#0 add%3#0)
        (assert eq%2#0) // invalid number of bytes for test_cases.tuple_support.nested_tuples.Child
        let tmp%10#1: bytes = (concat 0x151f7c75 tmp%0#2)
        (log tmp%10#1)
        exit 1u
    block@19: // nested_named_tuple_params_route_L161
        let tmp%0#2: bytes = (txna ApplicationArgs 1)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#2 16u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 18u)
        (assert eq%0#0) // invalid tail pointer at index 2 of (uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))
        let aggregate%len%19#0: uint64 = (len tmp%0#2)
        let aggregate%substring3%35#0: bytes = (substring3 tmp%0#2 extract_uint16%0#0 aggregate%len%19#0)
        let extract_uint16%1#0: uint64 = (extract_uint16 aggregate%substring3%35#0 8u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 12u)
        (assert eq%1#0) // invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))
        let aggregate%extract_uint16%48#0: uint64 = (extract_uint16 aggregate%substring3%35#0 10u)
        let aggregate%substring3%37#0: bytes = (substring3 aggregate%substring3%35#0 extract_uint16%1#0 aggregate%extract_uint16%48#0)
        let aggregate%array_length%14#0: uint64 = (extract_uint16 aggregate%substring3%37#0 0u) // on error: invalid array length header
        let add%1#0: uint64 = (+ aggregate%array_length%14#0 14u)
        let eq%2#0: bool = (== aggregate%extract_uint16%48#0 add%1#0)
        (assert eq%2#0) // invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))
        let aggregate%len%22#0: uint64 = (len aggregate%substring3%35#0)
        let aggregate%substring3%39#0: bytes = (substring3 aggregate%substring3%35#0 aggregate%extract_uint16%48#0 aggregate%len%22#0)
        let aggregate%array_length%15#0: uint64 = (extract_uint16 aggregate%substring3%39#0 0u) // on error: invalid array length header
        let add%2#0: uint64 = (+ aggregate%array_length%15#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let add%4#0: uint64 = (+ 18u add%3#0)
        let eq%3#0: bool = (== aggregate%len%19#0 add%4#0)
        (assert eq%3#0) // invalid number of bytes for test_cases.tuple_support.nested_tuples.Parent
        let tmp%15#0: bytes = (concat 0x151f7c75 tmp%0#2)
        (log tmp%15#0)
        exit 1u
    block@22: // after_if_else_L48
        fail
    block@23: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.get_sender_inefficiently() -> account:
    block@0: // L179
        (log "Order is important")
        let tmp%0#0: account = (txn Sender)
        return tmp%0#0

subroutine test_cases.tuple_support.nested_tuples.simple_tup(a: uint64, b: uint64) -> <uint64, uint64>:
    block@0: // L185
        (log "I'm just a simple tup")
        return a#0 b#0

subroutine test_cases.tuple_support.nested_tuples.echo(s: string) -> string:
    block@0: // L191
        (log "Is there an echo in here?")
        return s#0