contract test_cases.tuple_support.tuple_comparisons.TupleComparisons:
    program approval:
        subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program() -> bool:
            block@0: // L5
                test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval()
                test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty()
                return 1u
        
        subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval() -> void:
            block@0: // L14
                let tmp%0#0: bool = (!= "abc" "abc")
                let awst_tmp%0#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(42u)
                let tmp%1#0: bool = (== awst_tmp%0#0 awst_tmp%0#0)
                let tmp%2#0: bool = (|| tmp%0#0 tmp%1#0)
                (assert tmp%2#0)
                let tmp%3#0: bool = (== "abc" "abc")
                let awst_tmp%1#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(43u)
                let tmp%4#0: bool = (!= awst_tmp%1#0 awst_tmp%1#0)
                let tmp#0: bool = (&& tmp%3#0 tmp%4#0)
                let tmp%5#0: bool = (! tmp#0)
                (assert tmp%5#0)
                let tmp%6#0: bool = (!= "abc" "abc")
                let awst_tmp%2#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(44u)
                let tmp%7#0: bool = (== awst_tmp%2#0 awst_tmp%2#0)
                let tmp%8#0: bool = (|| tmp%6#0 tmp%7#0)
                (assert tmp%8#0)
                let tmp%9#0: bool = (== "abc" "abc")
                let awst_tmp%3#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(45u)
                let tmp%10#0: bool = (!= awst_tmp%3#0 awst_tmp%3#0)
                let tmp#1: bool = (&& tmp%9#0 tmp%10#0)
                let tmp%11#0: bool = (! tmp#1)
                (assert tmp%11#0)
                let tmp%12#0: bool = (!= 1u 3u)
                let tmp%13#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(46u)
                let tmp%14#0: bool = (!= 2u tmp%13#0)
                let tmp%15#0: bool = (|| tmp%12#0 tmp%14#0)
                (assert tmp%15#0)
                let tmp%16#0: bool = (== 1u 3u)
                let tmp%17#0: uint64 = test_cases.tuple_support.tuple_comparisons.log_and_return(47u)
                let tmp%18#0: bool = (== 2u tmp%17#0)
                let tmp#2: bool = (&& tmp%16#0 tmp%18#0)
                let tmp%19#0: bool = (! tmp#2)
                (assert tmp%19#0)
                return 
        
        subroutine test_cases.tuple_support.tuple_comparisons.log_and_return(val: uint64) -> uint64:
            block@0: // L52
                let tmp%0#0: bytes = (itob val#0)
                (log tmp%0#0)
                return val#0
        
        subroutine test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_empty() -> void:
            block@0: // L41
                let tmp#0: bool = 0u
                let tmp%0#0: bool = (! tmp#0)
                (assert tmp%0#0)
                let tmp#1: bool = 0u
                let tmp%1#0: bool = (! tmp#1)
                (assert tmp%1#0)
                return 
    
    program clear-state:
        subroutine test_cases.tuple_support.tuple_comparisons.TupleComparisons.clear_state_program() -> bool:
            block@0: // L10
                return 1u