{
    "name": "NestedTuples",
    "structs": {
        "Child": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "string"
            }
        ],
        "Parent": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "foo_arc",
                "type": "uint64"
            },
            {
                "name": "child",
                "type": "Child"
            }
        ]
    },
    "methods": [
        {
            "name": "run_tests",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_tuple_params",
            "args": [
                {
                    "type": "(string,(byte[],(uint64)))",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(byte[],(string,uint64))"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "named_tuple",
            "args": [
                {
                    "type": "(uint64,byte[],string)",
                    "struct": "Child",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(uint64,byte[],string)",
                "struct": "Child"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_named_tuple_params",
            "args": [
                {
                    "type": "(uint64,uint64,(uint64,byte[],string))",
                    "struct": "Parent",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,(uint64,byte[],string))",
                "struct": "Parent"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "build_nested_call_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YnVpbGRfbmVzdGVkX2NhbGxfY291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        192,
                        195,
                        271,
                        372,
                        378,
                        395
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        120,
                        143,
                        263,
                        364
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        507
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        123,
                        146,
                        266,
                        367
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        835,
                        846
                    ],
                    "errorMessage": "check self.build_nested_call_count exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnR1cGxlX3N1cHBvcnQubmVzdGVkX3R1cGxlcy5OZXN0ZWRUdXBsZXMuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQIAAyYGF2J1aWxkX25lc3RlZF9jYWxsX2NvdW50AkhpBBUffHUFVGhlcmUCAAwCaGkxGEAAA4gABIgACEOKAAAoJGeJigABMRtBAaOCBASeWjunBM6gUhsENz9bJATsWTCWNhoAjgQAAgAZAJEA9iSJMRkURDEYRIgBgYABACRPAlQqTFCwIokxGRREMRhENhoBSSRZSwEjWUsCTwJLAlJXAgBLAhVPA08DTwJSSSRZSwEVSwJOAlJXAgBMVwIIVwAIF4gClEsCFRZXBgJPA1BLAhUWVwYCTwNQTwIWgAIACkxQTFBLARWBBAgWVwYCgAIABExQTwJQTFAqTFCwIokxGRREMRhENhoBSVcACBdLAYEIWUsCgQpZSwNPAksCUlcCAEsDFU8ETwNPAlJXAgCIAjFPAhZLAhUWVwYCTwNQSwIVFlcGAk8DUE8CJwRQSwIVgQwIFlcGAlBPAlBMUCpMULAiiTEZFEQxGEQ2GgFJVwAIF0sBVwgISwKBEFlLAxVPBE4CUklXAAgXSwGBCFlLAoEKWUsDTwJLAlJXAgBLAxVPBE8DTwJSVwIAiAG/TwQWTwMWSwMVFlcGAk8EUEsDFRZXBgJPBFBPAicEUEsCFYEMCBZXBgJQTwJQTFBMTwJQgAIAElBMUCpMULAiiTEZQAAGMRgURCKJJImKAAEpK4gAP0wrEkwpEhBEKSQjIikrSYgANU8EKRJPBBQQRE8CIxJPAiISEEQrEkQiI4gAKCJJiAA8IiSIADeIAHeIAOwiiYoCAov/i/6JigcFi/2L+ov7i/yL/omKAgCL/ov/HkwUi/6L/whPAhJKEERMRESJigIAJCOL/iISRIv+i/9BAAsljACBBIwCgQWMAYv/JQuLABJEI4EFi/9NiwFLARJEiwJJTgKL/ggSRCKBBIv/TRJEiYoAAIAAJCIjJIsCTwIIiwEIjAGNAwADAAwAFUIAGyIjjAIiTEL/4iMijAIiTEL/2SUjjAIjTEL/0CQijAAjTIsATwIIiwEIjAGNAwADAAwAFUIAGyIjjAAiTEL/4iMijAAiTEL/2SUjjAAjTEL/0IsBgQgKJRJEiYoAACgkZ4gADkYCJwUSRCQoZUQiEkSJigADJChlRCIIKExnJwUigARobW1tiYoDA4v+i/2L/4mKAwOL/Yv+i/+JigUFi/uL/Iv9i/6L/4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}