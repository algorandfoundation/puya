{
    "name": "NestedTuples",
    "structs": {
        "Child": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "string"
            }
        ],
        "Parent": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "foo_arc",
                "type": "uint64"
            },
            {
                "name": "child",
                "type": "Child"
            }
        ],
        "ParentWithList": [
            {
                "name": "parent",
                "type": "Parent"
            },
            {
                "name": "children",
                "type": "(uint64,byte[],string)[]"
            }
        ],
        "SimpleTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "TupleWithMutable": [
            {
                "name": "arr",
                "type": "uint64[]"
            },
            {
                "name": "child",
                "type": "Child"
            }
        ]
    },
    "methods": [
        {
            "name": "store_tuple",
            "args": [
                {
                    "type": "((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])",
                    "struct": "ParentWithList",
                    "name": "pwl"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple",
            "args": [],
            "returns": {
                "type": "((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])",
                "struct": "ParentWithList"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "store_tuple_in_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_tuple_in_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple_from_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "SimpleTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_load_tuple_from_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "((uint64,uint64),bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple_from_box_or_default",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "SimpleTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple_from_local_state_or_default",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "SimpleTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutate_local_tuple",
            "args": [],
            "returns": {
                "type": "(uint64[],(uint64,byte[],string))",
                "struct": "TupleWithMutable"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutate_tuple_in_storage_currently_supported_method",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "run_tests",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_tuple_params",
            "args": [
                {
                    "type": "(string,(byte[],(uint64)))",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(byte[],(string,uint64))"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "named_tuple",
            "args": [
                {
                    "type": "(uint64,byte[],string)",
                    "struct": "Child",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(uint64,byte[],string)",
                "struct": "Child"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_named_tuple_params",
            "args": [
                {
                    "type": "(uint64,uint64,(uint64,byte[],string))",
                    "struct": "Parent",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,(uint64,byte[],string))",
                "struct": "Parent"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "build_nested_call_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YnVpbGRfbmVzdGVkX2NhbGxfY291bnQ="
                },
                "twm": {
                    "keyType": "AVMString",
                    "valueType": "TupleWithMutable",
                    "key": "dHdt"
                },
                "pwl": {
                    "keyType": "AVMString",
                    "valueType": "ParentWithList",
                    "key": "cHds"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box": {
                    "keyType": "SimpleTup",
                    "valueType": "SimpleTup",
                    "prefix": "Ym94"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        212,
                        344,
                        443,
                        556,
                        578,
                        590,
                        674,
                        701,
                        731,
                        770,
                        800,
                        831,
                        852,
                        947
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1047
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        215,
                        347,
                        446,
                        559,
                        581,
                        593,
                        677,
                        704,
                        734,
                        773,
                        803,
                        834,
                        855,
                        950
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1442
                    ],
                    "errorMessage": "check self.box entry exists"
                },
                {
                    "pc": [
                        1300
                    ],
                    "errorMessage": "check self.pwl exists"
                },
                {
                    "pc": [
                        1683
                    ],
                    "errorMessage": "check self.twm exists"
                },
                {
                    "pc": [
                        1631
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1708
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyB0ZXN0X2Nhc2VzLnR1cGxlX3N1cHBvcnQubmVzdGVkX3R1cGxlcy5OZXN0ZWRUdXBsZXMuX19hbGdvcHlfZW50cnlwb2ludF93aXRoX2luaXQoKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDIgOAogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1IDB4MDAwYyAweDAwMDQgImJveCIgInR3bSIgMHgwMDEyIDB4MDAgImJ1aWxkX25lc3RlZF9jYWxsX2NvdW50IiAicHdsIgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjUwCiAgICAvLyBzZWxmLmJ1aWxkX25lc3RlZF9jYWxsX2NvdW50ID0gVUludDY0KDApCiAgICBieXRlYyA3IC8vICJidWlsZF9uZXN0ZWRfY2FsbF9jb3VudCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjUyCiAgICAvLyBzZWxmLnR3bSA9IFR1cGxlV2l0aE11dGFibGUoCiAgICBieXRlYyA0IC8vICJ0d20iCiAgICBwdXNoYnl0ZXMgMHgwMDA0MDAwNjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYzAwMGUwMDAwMDAwMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjUyLTU5CiAgICAvLyBzZWxmLnR3bSA9IFR1cGxlV2l0aE11dGFibGUoCiAgICAvLyAgICAgYXJyPWFyYzQuRHluYW1pY0FycmF5W2FyYzQuVUludDY0XSgpLAogICAgLy8gICAgIGNoaWxkPUNoaWxkKAogICAgLy8gICAgICAgICBhPVVJbnQ2NCgpLAogICAgLy8gICAgICAgICBiPUJ5dGVzKCksCiAgICAvLyAgICAgICAgIGM9U3RyaW5nKCksCiAgICAvLyAgICAgKSwKICAgIC8vICkKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo0OAogICAgLy8gY2xhc3MgTmVzdGVkVHVwbGVzKEFSQzRDb250cmFjdCk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTkKICAgIHB1c2hieXRlc3MgMHgzODNlMWU4YiAweDY4Y2JlZGQ3IDB4MjI2M2ZjZjEgMHhiZmMzNzMzOSAweGM2NjBiZWFhIDB4YjZjMjE1ZmYgMHg5MDdjOTA0MiAweGQ1MWM3MTc0IDB4ZjhjYzJiNTAgMHgzZDQ4NmRiMCAweDllNWEzYmE3IDB4Y2VhMDUyMWIgMHgzNzNmNWIyNCAweGVjNTkzMDk2IC8vIG1ldGhvZCAic3RvcmVfdHVwbGUoKCh1aW50NjQsdWludDY0LCh1aW50NjQsYnl0ZVtdLHN0cmluZykpLCh1aW50NjQsYnl0ZVtdLHN0cmluZylbXSkpdm9pZCIsIG1ldGhvZCAibG9hZF90dXBsZSgpKCh1aW50NjQsdWludDY0LCh1aW50NjQsYnl0ZVtdLHN0cmluZykpLCh1aW50NjQsYnl0ZVtdLHN0cmluZylbXSkiLCBtZXRob2QgInN0b3JlX3R1cGxlX2luX2JveCgodWludDY0LHVpbnQ2NCkpdm9pZCIsIG1ldGhvZCAiaXNfdHVwbGVfaW5fYm94KCh1aW50NjQsdWludDY0KSlib29sIiwgbWV0aG9kICJsb2FkX3R1cGxlX2Zyb21fYm94KCh1aW50NjQsdWludDY0KSkodWludDY0LHVpbnQ2NCkiLCBtZXRob2QgIm1heWJlX2xvYWRfdHVwbGVfZnJvbV9ib3goKHVpbnQ2NCx1aW50NjQpKSgodWludDY0LHVpbnQ2NCksYm9vbCkiLCBtZXRob2QgImxvYWRfdHVwbGVfZnJvbV9ib3hfb3JfZGVmYXVsdCgodWludDY0LHVpbnQ2NCkpKHVpbnQ2NCx1aW50NjQpIiwgbWV0aG9kICJsb2FkX3R1cGxlX2Zyb21fbG9jYWxfc3RhdGVfb3JfZGVmYXVsdChzdHJpbmcpKHVpbnQ2NCx1aW50NjQpIiwgbWV0aG9kICJtdXRhdGVfbG9jYWxfdHVwbGUoKSh1aW50NjRbXSwodWludDY0LGJ5dGVbXSxzdHJpbmcpKSIsIG1ldGhvZCAibXV0YXRlX3R1cGxlX2luX3N0b3JhZ2VfY3VycmVudGx5X3N1cHBvcnRlZF9tZXRob2QoKXZvaWQiLCBtZXRob2QgInJ1bl90ZXN0cygpYm9vbCIsIG1ldGhvZCAibmVzdGVkX3R1cGxlX3BhcmFtcygoc3RyaW5nLChieXRlW10sKHVpbnQ2NCkpKSkoYnl0ZVtdLChzdHJpbmcsdWludDY0KSkiLCBtZXRob2QgIm5hbWVkX3R1cGxlKCh1aW50NjQsYnl0ZVtdLHN0cmluZykpKHVpbnQ2NCxieXRlW10sc3RyaW5nKSIsIG1ldGhvZCAibmVzdGVkX25hbWVkX3R1cGxlX3BhcmFtcygodWludDY0LHVpbnQ2NCwodWludDY0LGJ5dGVbXSxzdHJpbmcpKSkodWludDY0LHVpbnQ2NCwodWludDY0LGJ5dGVbXSxzdHJpbmcpKSIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fc3RvcmVfdHVwbGVfcm91dGVANSBtYWluX2xvYWRfdHVwbGVfcm91dGVANiBtYWluX3N0b3JlX3R1cGxlX2luX2JveF9yb3V0ZUA3IG1haW5faXNfdHVwbGVfaW5fYm94X3JvdXRlQDggbWFpbl9sb2FkX3R1cGxlX2Zyb21fYm94X3JvdXRlQDkgbWFpbl9tYXliZV9sb2FkX3R1cGxlX2Zyb21fYm94X3JvdXRlQDEwIG1haW5fbG9hZF90dXBsZV9mcm9tX2JveF9vcl9kZWZhdWx0X3JvdXRlQDExIG1haW5fbG9hZF90dXBsZV9mcm9tX2xvY2FsX3N0YXRlX29yX2RlZmF1bHRfcm91dGVAMTIgbWFpbl9tdXRhdGVfbG9jYWxfdHVwbGVfcm91dGVAMTMgbWFpbl9tdXRhdGVfdHVwbGVfaW5fc3RvcmFnZV9jdXJyZW50bHlfc3VwcG9ydGVkX21ldGhvZF9yb3V0ZUAxNCBtYWluX3J1bl90ZXN0c19yb3V0ZUAxNSBtYWluX25lc3RlZF90dXBsZV9wYXJhbXNfcm91dGVAMTYgbWFpbl9uYW1lZF90dXBsZV9yb3V0ZUAxNyBtYWluX25lc3RlZF9uYW1lZF90dXBsZV9wYXJhbXNfcm91dGVAMTgKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyMToKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo0OAogICAgLy8gY2xhc3MgTmVzdGVkVHVwbGVzKEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX25lc3RlZF9uYW1lZF90dXBsZV9wYXJhbXNfcm91dGVAMTg6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTYxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NDgKICAgIC8vIGNsYXNzIE5lc3RlZFR1cGxlcyhBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGRpZyAxCiAgICBleHRyYWN0IDggOAogICAgZGlnIDIKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMwogICAgbGVuCiAgICB1bmNvdmVyIDQKICAgIGNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBkaWcgMQogICAgaW50Y18zIC8vIDgKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMgogICAgcHVzaGludCAxMCAvLyAxMAogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAzCiAgICB1bmNvdmVyIDIKICAgIGRpZyAyCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgMAogICAgZGlnIDMKICAgIGxlbgogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNjEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB1bmNvdmVyIDQKICAgIGl0b2IKICAgIHVuY292ZXIgNAogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGl0b2IKICAgIGRpZyAzCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgMTIgLy8gMTIKICAgICsKICAgIHVuY292ZXIgMgogICAgYnl0ZWNfMSAvLyAweDAwMGMKICAgIGNvbmNhdAogICAgZGlnIDQKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgNQogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgYnl0ZWMgNSAvLyAweDAwMTIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX25hbWVkX3R1cGxlX3JvdXRlQDE3OgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE1NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjQ4CiAgICAvLyBjbGFzcyBOZXN0ZWRUdXBsZXMoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBkaWcgMQogICAgaW50Y18zIC8vIDgKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMgogICAgcHVzaGludCAxMCAvLyAxMAogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAzCiAgICB1bmNvdmVyIDIKICAgIGRpZyAyCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgMAogICAgZGlnIDMKICAgIGxlbgogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGRpZyAyCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgMTIgLy8gMTIKICAgICsKICAgIHVuY292ZXIgMgogICAgYnl0ZWNfMSAvLyAweDAwMGMKICAgIGNvbmNhdAogICAgZGlnIDMKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgNAogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9uZXN0ZWRfdHVwbGVfcGFyYW1zX3JvdXRlQDE2OgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE0OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjQ4CiAgICAvLyBjbGFzcyBOZXN0ZWRUdXBsZXMoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMQogICAgaW50Y18yIC8vIDIKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBkaWcgMgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIGRpZyAyCiAgICBsZW4KICAgIHVuY292ZXIgMwogICAgdW5jb3ZlciAzCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMQogICAgbGVuCiAgICBkaWcgMgogICAgY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIHN3YXAKICAgIGV4dHJhY3QgMiA4CiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNDkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBkaWcgMQogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDQgLy8gNAogICAgKwogICAgZGlnIDMKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgNAogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGl0b2IKICAgIHB1c2hieXRlcyAweDAwMGEKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGJ5dGVjXzIgLy8gMHgwMDA0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9ydW5fdGVzdHNfcm91dGVAMTU6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTIwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHJ1bl90ZXN0cwogICAgYnl0ZWMgNiAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fbXV0YXRlX3R1cGxlX2luX3N0b3JhZ2VfY3VycmVudGx5X3N1cHBvcnRlZF9tZXRob2Rfcm91dGVAMTQ6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTE0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIG11dGF0ZV90dXBsZV9pbl9zdG9yYWdlX2N1cnJlbnRseV9zdXBwb3J0ZWRfbWV0aG9kCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX211dGF0ZV9sb2NhbF90dXBsZV9yb3V0ZUAxMzoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo5NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBtdXRhdGVfbG9jYWxfdHVwbGUKICAgIGRpZyAzCiAgICBsZW4KICAgIHB1c2hpbnQgNCAvLyA0CiAgICArCiAgICB1bmNvdmVyIDMKICAgIGl0b2IKICAgIGRpZyAzCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgMTIgLy8gMTIKICAgICsKICAgIHVuY292ZXIgMgogICAgYnl0ZWNfMSAvLyAweDAwMGMKICAgIGNvbmNhdAogICAgZGlnIDQKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgNQogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBieXRlY18yIC8vIDB4MDAwNAogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fbG9hZF90dXBsZV9mcm9tX2xvY2FsX3N0YXRlX29yX2RlZmF1bHRfcm91dGVAMTI6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6OTAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo0OAogICAgLy8gY2xhc3MgTmVzdGVkVHVwbGVzKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjkwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBsb2FkX3R1cGxlX2Zyb21fbG9jYWxfc3RhdGVfb3JfZGVmYXVsdAogICAgc3dhcAogICAgaXRvYgogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2xvYWRfdHVwbGVfZnJvbV9ib3hfb3JfZGVmYXVsdF9yb3V0ZUAxMToKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo4NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjQ4CiAgICAvLyBjbGFzcyBOZXN0ZWRUdXBsZXMoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBzd2FwCiAgICBpbnRjXzMgLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo4NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgbG9hZF90dXBsZV9mcm9tX2JveF9vcl9kZWZhdWx0CiAgICBzd2FwCiAgICBpdG9iCiAgICBzd2FwCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fbWF5YmVfbG9hZF90dXBsZV9mcm9tX2JveF9yb3V0ZUAxMDoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo4MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjQ4CiAgICAvLyBjbGFzcyBOZXN0ZWRUdXBsZXMoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBzd2FwCiAgICBpbnRjXzMgLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo4MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgbWF5YmVfbG9hZF90dXBsZV9mcm9tX2JveAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgYnl0ZWMgNiAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAzCiAgICBzZXRiaXQKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9sb2FkX3R1cGxlX2Zyb21fYm94X3JvdXRlQDk6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NzcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo0OAogICAgLy8gY2xhc3MgTmVzdGVkVHVwbGVzKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgc3dhcAogICAgaW50Y18zIC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NzcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGxvYWRfdHVwbGVfZnJvbV9ib3gKICAgIHN3YXAKICAgIGl0b2IKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9pc190dXBsZV9pbl9ib3hfcm91dGVAODoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo3MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjQ4CiAgICAvLyBjbGFzcyBOZXN0ZWRUdXBsZXMoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBzd2FwCiAgICBpbnRjXzMgLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo3MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgaXNfdHVwbGVfaW5fYm94CiAgICBieXRlYyA2IC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9zdG9yZV90dXBsZV9pbl9ib3hfcm91dGVANzoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo2OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjQ4CiAgICAvLyBjbGFzcyBOZXN0ZWRUdXBsZXMoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBzd2FwCiAgICBpbnRjXzMgLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo2OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgc3RvcmVfdHVwbGVfaW5fYm94CiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2xvYWRfdHVwbGVfcm91dGVANjoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo2NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBsb2FkX3R1cGxlCiAgICB1bmNvdmVyIDUKICAgIGl0b2IKICAgIHVuY292ZXIgNQogICAgY29uY2F0CiAgICB1bmNvdmVyIDQKICAgIGl0b2IKICAgIGRpZyA0CiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDUKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgMTIgLy8gMTIKICAgICsKICAgIHVuY292ZXIgMgogICAgYnl0ZWNfMSAvLyAweDAwMGMKICAgIGNvbmNhdAogICAgZGlnIDUKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgNgogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgYnl0ZWMgNSAvLyAweDAwMTIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgcHVzaGludCA0IC8vIDQKICAgICsKICAgIHN3YXAKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZWNfMiAvLyAweDAwMDQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3N0b3JlX3R1cGxlX3JvdXRlQDU6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NjEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo0OAogICAgLy8gY2xhc3MgTmVzdGVkVHVwbGVzKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDEKICAgIGludGNfMiAvLyAyCiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDIKICAgIHVuY292ZXIgMgogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBkaWcgMQogICAgZXh0cmFjdCA4IDgKICAgIGRpZyAyCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDMKICAgIGxlbgogICAgdW5jb3ZlciA0CiAgICBjb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDEKICAgIGludGNfMyAvLyA4CiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDIKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMwogICAgdW5jb3ZlciAyCiAgICBkaWcgMgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIGRpZyAzCiAgICBsZW4KICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciAzCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGV4dHJhY3QgMiAwCiAgICBkaWcgNgogICAgbGVuCiAgICB1bmNvdmVyIDcKICAgIHVuY292ZXIgNwogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NjEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHN0b3JlX3R1cGxlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxOToKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo0OAogICAgLy8gY2xhc3MgTmVzdGVkVHVwbGVzKEFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIxCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLmdldF9zZW5kZXJfaW5lZmZpY2llbnRseSgpIC0+IGJ5dGVzOgpnZXRfc2VuZGVyX2luZWZmaWNpZW50bHk6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTgxCiAgICAvLyBsb2coIk9yZGVyIGlzIGltcG9ydGFudCIpCiAgICBwdXNoYnl0ZXMgIk9yZGVyIGlzIGltcG9ydGFudCIKICAgIGxvZwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE4MgogICAgLy8gcmV0dXJuIFR4bi5zZW5kZXIKICAgIHR4biBTZW5kZXIKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLnNpbXBsZV90dXAoYTogdWludDY0LCBiOiB1aW50NjQpIC0+IHVpbnQ2NCwgdWludDY0OgpzaW1wbGVfdHVwOgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE4NS0xODYKICAgIC8vIEBzdWJyb3V0aW5lKGlubGluZT1GYWxzZSkKICAgIC8vIGRlZiBzaW1wbGVfdHVwKGE6IFVJbnQ2NCwgYjogVUludDY0KSAtPiBTaW1wbGVUdXA6CiAgICBwcm90byAyIDIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxODcKICAgIC8vIGxvZygiSSdtIGp1c3QgYSBzaW1wbGUgdHVwIikKICAgIHB1c2hieXRlcyAiSSdtIGp1c3QgYSBzaW1wbGUgdHVwIgogICAgbG9nCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTg4CiAgICAvLyByZXR1cm4gU2ltcGxlVHVwKGEsIGIpCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50dXBsZV9zdXBwb3J0Lm5lc3RlZF90dXBsZXMuZWNobyhzOiBieXRlcykgLT4gYnl0ZXM6CmVjaG86CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTkxLTE5MgogICAgLy8gQHN1YnJvdXRpbmUoaW5saW5lPUZhbHNlKQogICAgLy8gZGVmIGVjaG8oczogU3RyaW5nKSAtPiBTdHJpbmc6CiAgICBwcm90byAxIDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxOTMKICAgIC8vIGxvZygiSXMgdGhlcmUgYW4gZWNobyBpbiBoZXJlPyIpCiAgICBwdXNoYnl0ZXMgIklzIHRoZXJlIGFuIGVjaG8gaW4gaGVyZT8iCiAgICBsb2cKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxOTQKICAgIC8vIHJldHVybiBzCiAgICBmcmFtZV9kaWcgLTEKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLnRlc3RfbmVzdGVkX3NpbmdsZXMob25lOiB1aW50NjQsIHJlYXNzaWduOiB1aW50NjQpIC0+IHZvaWQ6CnRlc3RfbmVzdGVkX3NpbmdsZXM6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MjQ3LTI0OAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiB0ZXN0X25lc3RlZF9zaW5nbGVzKG9uZTogVUludDY0LCAqLCByZWFzc2lnbjogYm9vbCkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI1MAogICAgLy8gKFVJbnQ2NCgwKSwpLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyNTIKICAgIC8vIChVSW50NjQoMiksKSwKICAgIGludGNfMiAvLyAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MjU2CiAgICAvLyBhc3NlcnQgc1sxXVswXSA9PSAxCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgYXNzZXJ0CiAgICBmcmFtZV9kaWcgLTIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyNjEKICAgIC8vIGlmIHJlYXNzaWduOgogICAgZnJhbWVfZGlnIC0xCiAgICBieiB0ZXN0X25lc3RlZF9zaW5nbGVzX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI2MwogICAgLy8gKFVJbnQ2NCgzKSwpLAogICAgcHVzaGludCAzIC8vIDMKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyNjItMjY2CiAgICAvLyBzID0gKAogICAgLy8gICAgIChVSW50NjQoMyksKSwKICAgIC8vICAgICAoVUludDY0KDQpLCksCiAgICAvLyAgICAgKFVJbnQ2NCg1KSwpLAogICAgLy8gKQogICAgZnJhbWVfYnVyeSAwCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MjY0CiAgICAvLyAoVUludDY0KDQpLCksCiAgICBwdXNoaW50IDQgLy8gNAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI2Mi0yNjYKICAgIC8vIHMgPSAoCiAgICAvLyAgICAgKFVJbnQ2NCgzKSwpLAogICAgLy8gICAgIChVSW50NjQoNCksKSwKICAgIC8vICAgICAoVUludDY0KDUpLCksCiAgICAvLyApCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyNjUKICAgIC8vIChVSW50NjQoNSksKSwKICAgIHB1c2hpbnQgNSAvLyA1CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MjYyLTI2NgogICAgLy8gcyA9ICgKICAgIC8vICAgICAoVUludDY0KDMpLCksCiAgICAvLyAgICAgKFVJbnQ2NCg0KSwpLAogICAgLy8gICAgIChVSW50NjQoNSksKSwKICAgIC8vICkKICAgIGZyYW1lX2J1cnkgMQoKdGVzdF9uZXN0ZWRfc2luZ2xlc19hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MjY3CiAgICAvLyBhc3NlcnQgc1swXVswXSA9PSAoMyBpZiByZWFzc2lnbiBlbHNlIDApCiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgMyAvLyAzCiAgICAqCiAgICBmcmFtZV9kaWcgMAogICAgPT0KICAgIGFzc2VydAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI2OQogICAgLy8gYXNzZXJ0IHRtcCA9PSAoNSBpZiByZWFzc2lnbiBlbHNlIDIpCiAgICBpbnRjXzIgLy8gMgogICAgcHVzaGludCA1IC8vIDUKICAgIGZyYW1lX2RpZyAtMQogICAgc2VsZWN0CiAgICBmcmFtZV9kaWcgMQogICAgZGlnIDEKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyNzMKICAgIC8vIHMxICs9IG9uZQogICAgZnJhbWVfZGlnIDIKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfZGlnIC0yCiAgICArCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6Mjc0CiAgICAvLyBhc3NlcnQgczEgPT0gKDUgaWYgcmVhc3NpZ24gZWxzZSAyKQogICAgPT0KICAgIGFzc2VydAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI3NQogICAgLy8gYXNzZXJ0IHNbMV1bMF0gPT0gKDQgaWYgcmVhc3NpZ24gZWxzZSAxKQogICAgaW50Y18xIC8vIDEKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBmcmFtZV9kaWcgLTEKICAgIHNlbGVjdAogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50dXBsZV9zdXBwb3J0Lm5lc3RlZF90dXBsZXMuTmVzdGVkVHVwbGVzLnN0b3JlX3R1cGxlKHB3bC5wYXJlbnQuZm9vOiB1aW50NjQsIHB3bC5wYXJlbnQuZm9vX2FyYzogYnl0ZXMsIHB3bC5wYXJlbnQuY2hpbGQuYTogdWludDY0LCBwd2wucGFyZW50LmNoaWxkLmI6IGJ5dGVzLCBwd2wucGFyZW50LmNoaWxkLmM6IGJ5dGVzLCBwd2wuY2hpbGRyZW46IGJ5dGVzKSAtPiB2b2lkOgpzdG9yZV90dXBsZToKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo2MS02MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBzdG9yZV90dXBsZShzZWxmLCBwd2w6IFBhcmVudFdpdGhMaXN0KSAtPiBOb25lOgogICAgcHJvdG8gNiAwCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NjMKICAgIC8vIHNlbGYucHdsID0gcHdsCiAgICBmcmFtZV9kaWcgLTYKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAtNQogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTQKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAtMwogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC0zCiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICArCiAgICB1bmNvdmVyIDIKICAgIGJ5dGVjXzEgLy8gMHgwMDBjCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHVuY292ZXIgMwogICAgc3dhcAogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBieXRlYyA1IC8vIDB4MDAxMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDQgLy8gNAogICAgKwogICAgc3dhcAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBieXRlY18yIC8vIDB4MDAwNAogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjIDggLy8gInB3bCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnR1cGxlX3N1cHBvcnQubmVzdGVkX3R1cGxlcy5OZXN0ZWRUdXBsZXMubG9hZF90dXBsZSgpIC0+IHVpbnQ2NCwgYnl0ZXMsIHVpbnQ2NCwgYnl0ZXMsIGJ5dGVzLCBieXRlczoKbG9hZF90dXBsZToKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo2NwogICAgLy8gcmV0dXJuIHNlbGYucHdsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgOCAvLyAicHdsIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnB3bCBleGlzdHMKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMQogICAgaW50Y18yIC8vIDIKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBkaWcgMgogICAgc3Vic3RyaW5nMwogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGRpZyAxCiAgICBleHRyYWN0IDggOAogICAgZGlnIDIKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMwogICAgbGVuCiAgICB1bmNvdmVyIDQKICAgIGNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBkaWcgMQogICAgaW50Y18zIC8vIDgKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMgogICAgcHVzaGludCAxMCAvLyAxMAogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAzCiAgICB1bmNvdmVyIDIKICAgIGRpZyAyCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgMAogICAgZGlnIDMKICAgIGxlbgogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIGRpZyA2CiAgICBsZW4KICAgIHVuY292ZXIgNwogICAgdW5jb3ZlciA3CiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLk5lc3RlZFR1cGxlcy5zdG9yZV90dXBsZV9pbl9ib3goa2V5LmE6IHVpbnQ2NCwga2V5LmI6IHVpbnQ2NCkgLT4gdm9pZDoKc3RvcmVfdHVwbGVfaW5fYm94OgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjY5LTcwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIHN0b3JlX3R1cGxlX2luX2JveChzZWxmLCBrZXk6IFNpbXBsZVR1cCkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjcxCiAgICAvLyBzZWxmLmJveFtrZXldID0ga2V5Ll9yZXBsYWNlKGI9a2V5LmIgKyAxKQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfZGlnIC0yCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGRpZyAxCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzMgLy8gImJveCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50dXBsZV9zdXBwb3J0Lm5lc3RlZF90dXBsZXMuTmVzdGVkVHVwbGVzLmlzX3R1cGxlX2luX2JveChrZXkuYTogdWludDY0LCBrZXkuYjogdWludDY0KSAtPiB1aW50NjQ6CmlzX3R1cGxlX2luX2JveDoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo3My03NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBpc190dXBsZV9pbl9ib3goc2VsZiwga2V5OiBTaW1wbGVUdXApIC0+IGJvb2w6CiAgICBwcm90byAyIDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo3NQogICAgLy8gcmV0dXJuIGtleSBpbiBzZWxmLmJveAogICAgZnJhbWVfZGlnIC0yCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGNvbmNhdAogICAgYnl0ZWNfMyAvLyAiYm94IgogICAgc3dhcAogICAgY29uY2F0CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLk5lc3RlZFR1cGxlcy5sb2FkX3R1cGxlX2Zyb21fYm94KGtleS5hOiB1aW50NjQsIGtleS5iOiB1aW50NjQpIC0+IHVpbnQ2NCwgdWludDY0Ogpsb2FkX3R1cGxlX2Zyb21fYm94OgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5Ojc3LTc4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIGxvYWRfdHVwbGVfZnJvbV9ib3goc2VsZiwga2V5OiBTaW1wbGVUdXApIC0+IFNpbXBsZVR1cDoKICAgIHByb3RvIDIgMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5Ojc5CiAgICAvLyByZXR1cm4gc2VsZi5ib3hba2V5XQogICAgZnJhbWVfZGlnIC0yCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGNvbmNhdAogICAgYnl0ZWNfMyAvLyAiYm94IgogICAgc3dhcAogICAgY29uY2F0CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3ggZW50cnkgZXhpc3RzCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgc3dhcAogICAgaW50Y18zIC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnR1cGxlX3N1cHBvcnQubmVzdGVkX3R1cGxlcy5OZXN0ZWRUdXBsZXMubWF5YmVfbG9hZF90dXBsZV9mcm9tX2JveChrZXkuYTogdWludDY0LCBrZXkuYjogdWludDY0KSAtPiB1aW50NjQsIHVpbnQ2NCwgdWludDY0OgptYXliZV9sb2FkX3R1cGxlX2Zyb21fYm94OgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjgxLTgyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIG1heWJlX2xvYWRfdHVwbGVfZnJvbV9ib3goc2VsZiwga2V5OiBTaW1wbGVUdXApIC0+IHR1cGxlW1NpbXBsZVR1cCwgYm9vbF06CiAgICBwcm90byAyIDMKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo4MwogICAgLy8gbWF5YmVfdmFsdWUsIGV4aXN0cyA9IHNlbGYuYm94Lm1heWJlKGtleSkKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGJ5dGVjXzMgLy8gImJveCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGJ6IG1heWJlX2xvYWRfdHVwbGVfZnJvbV9ib3hfdGVybmFyeV9mYWxzZUAyCiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIHN3YXAKICAgIGludGNfMyAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAoKbWF5YmVfbG9hZF90dXBsZV9mcm9tX2JveF90ZXJuYXJ5X21lcmdlQDM6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6ODQKICAgIC8vIHJldHVybiBtYXliZV92YWx1ZSwgZXhpc3RzCiAgICBmcmFtZV9kaWcgMAogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDQKICAgIHJldHN1YgoKbWF5YmVfbG9hZF90dXBsZV9mcm9tX2JveF90ZXJuYXJ5X2ZhbHNlQDI6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6ODMKICAgIC8vIG1heWJlX3ZhbHVlLCBleGlzdHMgPSBzZWxmLmJveC5tYXliZShrZXkpCiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cAogICAgYiBtYXliZV9sb2FkX3R1cGxlX2Zyb21fYm94X3Rlcm5hcnlfbWVyZ2VAMwoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLk5lc3RlZFR1cGxlcy5sb2FkX3R1cGxlX2Zyb21fYm94X29yX2RlZmF1bHQoa2V5LmE6IHVpbnQ2NCwga2V5LmI6IHVpbnQ2NCkgLT4gdWludDY0LCB1aW50NjQ6CmxvYWRfdHVwbGVfZnJvbV9ib3hfb3JfZGVmYXVsdDoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo4Ni04NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBsb2FkX3R1cGxlX2Zyb21fYm94X29yX2RlZmF1bHQoc2VsZiwga2V5OiBTaW1wbGVUdXApIC0+IFNpbXBsZVR1cDoKICAgIHByb3RvIDIgMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5Ojg4CiAgICAvLyByZXR1cm4gc2VsZi5ib3guZ2V0KGtleSwgZGVmYXVsdD1zaW1wbGVfdHVwKFVJbnQ2NCg0KSwgVUludDY0KDIpKSkKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGJ5dGVjXzMgLy8gImJveCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGludCA0IC8vIDQKICAgIGludGNfMiAvLyAyCiAgICBjYWxsc3ViIHNpbXBsZV90dXAKICAgIGNvdmVyIDIKICAgIHN3YXAKICAgIGJveF9nZXQKICAgIGJ6IGxvYWRfdHVwbGVfZnJvbV9ib3hfb3JfZGVmYXVsdF90ZXJuYXJ5X2ZhbHNlQDIKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgc3dhcAogICAgaW50Y18zIC8vIDgKICAgIGV4dHJhY3RfdWludDY0Cgpsb2FkX3R1cGxlX2Zyb21fYm94X29yX2RlZmF1bHRfdGVybmFyeV9tZXJnZUAzOgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5Ojg4CiAgICAvLyByZXR1cm4gc2VsZi5ib3guZ2V0KGtleSwgZGVmYXVsdD1zaW1wbGVfdHVwKFVJbnQ2NCg0KSwgVUludDY0KDIpKSkKICAgIGZyYW1lX2J1cnkgMQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCmxvYWRfdHVwbGVfZnJvbV9ib3hfb3JfZGVmYXVsdF90ZXJuYXJ5X2ZhbHNlQDI6CiAgICBmcmFtZV9kaWcgMQogICAgZnJhbWVfZGlnIDAKICAgIGIgbG9hZF90dXBsZV9mcm9tX2JveF9vcl9kZWZhdWx0X3Rlcm5hcnlfbWVyZ2VAMwoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLk5lc3RlZFR1cGxlcy5sb2FkX3R1cGxlX2Zyb21fbG9jYWxfc3RhdGVfb3JfZGVmYXVsdChrZXk6IGJ5dGVzKSAtPiB1aW50NjQsIHVpbnQ2NDoKbG9hZF90dXBsZV9mcm9tX2xvY2FsX3N0YXRlX29yX2RlZmF1bHQ6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6OTAtOTEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgbG9hZF90dXBsZV9mcm9tX2xvY2FsX3N0YXRlX29yX2RlZmF1bHQoc2VsZiwga2V5OiBTdHJpbmcpIC0+IFNpbXBsZVR1cDoKICAgIHByb3RvIDEgMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjkyCiAgICAvLyBsb2NhbCA9IExvY2FsU3RhdGUoU2ltcGxlVHVwLCBrZXk9ZWNobyhrZXkpKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIGVjaG8KICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo5MwogICAgLy8gcmV0dXJuIGxvY2FsLmdldChnZXRfc2VuZGVyX2luZWZmaWNpZW50bHkoKSwgZGVmYXVsdD1zaW1wbGVfdHVwKFVJbnQ2NCg0KSwgVUludDY0KDIpKSkKICAgIGNhbGxzdWIgZ2V0X3NlbmRlcl9pbmVmZmljaWVudGx5CiAgICBwdXNoaW50IDQgLy8gNAogICAgaW50Y18yIC8vIDIKICAgIGNhbGxzdWIgc2ltcGxlX3R1cAogICAgY292ZXIgMwogICAgY292ZXIgMgogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgYXBwX2xvY2FsX2dldF9leAogICAgYnogbG9hZF90dXBsZV9mcm9tX2xvY2FsX3N0YXRlX29yX2RlZmF1bHRfdGVybmFyeV9mYWxzZUAyCiAgICBmcmFtZV9kaWcgMgogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIHN3YXAKICAgIGludGNfMyAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAoKbG9hZF90dXBsZV9mcm9tX2xvY2FsX3N0YXRlX29yX2RlZmF1bHRfdGVybmFyeV9tZXJnZUAzOgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjkzCiAgICAvLyByZXR1cm4gbG9jYWwuZ2V0KGdldF9zZW5kZXJfaW5lZmZpY2llbnRseSgpLCBkZWZhdWx0PXNpbXBsZV90dXAoVUludDY0KDQpLCBVSW50NjQoMikpKQogICAgZnJhbWVfYnVyeSAxCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKbG9hZF90dXBsZV9mcm9tX2xvY2FsX3N0YXRlX29yX2RlZmF1bHRfdGVybmFyeV9mYWxzZUAyOgogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAwCiAgICBiIGxvYWRfdHVwbGVfZnJvbV9sb2NhbF9zdGF0ZV9vcl9kZWZhdWx0X3Rlcm5hcnlfbWVyZ2VAMwoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLk5lc3RlZFR1cGxlcy5tdXRhdGVfbG9jYWxfdHVwbGUoKSAtPiBieXRlcywgdWludDY0LCBieXRlcywgYnl0ZXM6Cm11dGF0ZV9sb2NhbF90dXBsZToKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo5NS05NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBtdXRhdGVfbG9jYWxfdHVwbGUoc2VsZikgLT4gVHVwbGVXaXRoTXV0YWJsZToKICAgIHByb3RvIDAgNAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjEwNwogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDMpOgogICAgaW50Y18wIC8vIDAKCm11dGF0ZV9sb2NhbF90dXBsZV9mb3JfaGVhZGVyQDE6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTA3CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMyk6CiAgICBmcmFtZV9kaWcgMAogICAgcHVzaGludCAzIC8vIDMKICAgIDwKICAgIGJ6IG11dGF0ZV9sb2NhbF90dXBsZV9hZnRlcl9mb3JANAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjEwOAogICAgLy8gYXNzZXJ0IHR3bS5hcnJbaV0gPT0gaQogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgaW50Y18zIC8vIDgKICAgICoKICAgIHB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMgogICAgc3dhcAogICAgaW50Y18zIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZGlnIDEKICAgIGl0b2IKICAgIGI9PQogICAgYXNzZXJ0CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTA3CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoMyk6CiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAwCiAgICBiIG11dGF0ZV9sb2NhbF90dXBsZV9mb3JfaGVhZGVyQDEKCm11dGF0ZV9sb2NhbF90dXBsZV9hZnRlcl9mb3JANDoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxMDYKICAgIC8vIHR3bS5hcnIuYXBwZW5kKGFyYzQuVUludDY0KDIpKQogICAgcHVzaGJ5dGVzIDB4MDAwMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjEwMAogICAgLy8gYT1VSW50NjQoKSwKICAgIGludGNfMCAvLyAwCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTAxCiAgICAvLyBiPUJ5dGVzKCksCiAgICBwdXNoYnl0ZXMgMHgKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxMDIKICAgIC8vIGM9U3RyaW5nKCksCiAgICBkdXAKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxMDktMTEyCiAgICAvLyAjIFRPRE86IHN1cHBvcnQgdGhpcz8KICAgIC8vICMgICAgICAgc2VlIGJlbG93IG1ldGhvZCBmb3Igd29yayBhcm91bmQKICAgIC8vICMgICAgICAgc2VsZi50d20uYXJyLmFwcGVuZChhcmM0LlVJbnQ2NCgxKSkKICAgIC8vIHJldHVybiB0d20KICAgIHVuY292ZXIgNAogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50dXBsZV9zdXBwb3J0Lm5lc3RlZF90dXBsZXMuTmVzdGVkVHVwbGVzLm11dGF0ZV90dXBsZV9pbl9zdG9yYWdlX2N1cnJlbnRseV9zdXBwb3J0ZWRfbWV0aG9kKCkgLT4gdm9pZDoKbXV0YXRlX3R1cGxlX2luX3N0b3JhZ2VfY3VycmVudGx5X3N1cHBvcnRlZF9tZXRob2Q6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTE2CiAgICAvLyBhcnIyID0gc2VsZi50d20uYXJyLmNvcHkoKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDQgLy8gInR3bSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50d20gZXhpc3RzCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDEKICAgIGludGNfMiAvLyAyCiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDIKICAgIHVuY292ZXIgMgogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxMTcKICAgIC8vIGFycjIuYXBwZW5kKGFyYzQuVUludDY0KDEpKQogICAgcHVzaGJ5dGVzIDB4MDAwMDAwMDAwMDAwMDAwMQogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIGludGNfMyAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjExOAogICAgLy8gc2VsZi50d20gPSBzZWxmLnR3bS5fcmVwbGFjZShhcnI9YXJyMi5jb3B5KCkpCiAgICBkaWcgMgogICAgbGVuCiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMwogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDEKICAgIGludGNfMyAvLyA4CiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDIKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMwogICAgdW5jb3ZlciAyCiAgICBkaWcgMgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIGRpZyAzCiAgICBsZW4KICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciAzCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGV4dHJhY3QgMiAwCiAgICBkaWcgMwogICAgbGVuCiAgICBwdXNoaW50IDQgLy8gNAogICAgKwogICAgdW5jb3ZlciAzCiAgICBpdG9iCiAgICBkaWcgMwogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciA0CiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICArCiAgICB1bmNvdmVyIDIKICAgIGJ5dGVjXzEgLy8gMHgwMDBjCiAgICBjb25jYXQKICAgIGRpZyA0CiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDUKICAgIGNvbmNhdAogICAgdW5jb3ZlciAzCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZWNfMiAvLyAweDAwMDQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlYyA0IC8vICJ0d20iCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50dXBsZV9zdXBwb3J0Lm5lc3RlZF90dXBsZXMuTmVzdGVkVHVwbGVzLnJ1bl90ZXN0cygpIC0+IHVpbnQ2NDoKcnVuX3Rlc3RzOgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjEyMC0xMjEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgcnVuX3Rlc3RzKHNlbGYpIC0+IGJvb2w6CiAgICBwcm90byAwIDEKICAgIHB1c2hieXRlcyAiIgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjEzNgogICAgLy8gdGVzdF9pbnRyaW5zaWNzKFVJbnQ2NCgxKSwgVUludDY0KDIpKQogICAgaW50Y18xIC8vIDEKICAgIGludGNfMiAvLyAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MjE0CiAgICAvLyBudCA9IChVSW50NjQoMSksIG9wLmFkZHcobnVtMSwgbnVtMiksIFVJbnQ2NCg0MikpCiAgICBhZGR3CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MjE3CiAgICAvLyBhc3NlcnQgbnRbMV0gPT0gKDAsIG51bTEgKyBudW0yKSAgIyB0eXBlOiBpZ25vcmVbY29tcGFyaXNvbi1vdmVybGFwXQogICAgc3dhcAogICAgIQogICAgc3dhcAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICBkdXAyCiAgICAmJgogICAgYXNzZXJ0CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MjE4CiAgICAvLyBhc3NlcnQgbnRbMV1bOjFdID09ICgwLCkgICMgdHlwZTogaWdub3JlW2NvbXBhcmlzb24tb3ZlcmxhcF0KICAgIHN3YXAKICAgIGFzc2VydAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjIxOQogICAgLy8gYXNzZXJ0IG50WzFdWzE6XSA9PSAobnVtMSArIG51bTIsKQogICAgYXNzZXJ0CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTM4CiAgICAvLyB0ZXN0X25lc3RlZF9zaW5nbGVzKFVJbnQ2NCgxKSwgcmVhc3NpZ249VHJ1ZSkKICAgIGludGNfMSAvLyAxCiAgICBkdXAKICAgIGNhbGxzdWIgdGVzdF9uZXN0ZWRfc2luZ2xlcwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjEzOQogICAgLy8gdGVzdF9uZXN0ZWRfc2luZ2xlcyhVSW50NjQoMSksIHJlYXNzaWduPUZhbHNlKQogICAgaW50Y18xIC8vIDEKICAgIGludGNfMCAvLyAwCiAgICBjYWxsc3ViIHRlc3RfbmVzdGVkX3NpbmdsZXMKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyOTUKICAgIC8vIHRvdGFsID0gVUludDY0KDApCiAgICBpbnRjXzAgLy8gMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI5MwogICAgLy8geCA9IFVJbnQ2NCgxKQogICAgaW50Y18xIC8vIDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyOTQKICAgIC8vIHkgPSBVSW50NjQoMikKICAgIGludGNfMiAvLyAyCiAgICBpbnRjXzAgLy8gMAoKcnVuX3Rlc3RzX2Zvcl9ib2R5QDEyOgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI5OQogICAgLy8gdG90YWwgKz0gYSArIGIKICAgIGZyYW1lX2RpZyAyCiAgICB1bmNvdmVyIDIKICAgICsKICAgIGZyYW1lX2RpZyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyOTcKICAgIC8vIGZvciB0IGluICgoeCwgeSksICh5LCB4KSwgKHgsIHgpLCAoeSwgeSkpOgogICAgc3dpdGNoIHJ1bl90ZXN0c19mb3JfaGVhZGVyXzFAMTMgcnVuX3Rlc3RzX2Zvcl9oZWFkZXJfMkAxNCBydW5fdGVzdHNfZm9yX2hlYWRlcl8zQDE1CiAgICBpbnRjXzAgLy8gMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI5MwogICAgLy8geCA9IFVJbnQ2NCgxKQogICAgaW50Y18xIC8vIDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTozMDEKICAgIC8vIGZvciBhLCBiIGluICgoeCwgeSksICh5LCB4KSwgKHgsIHgpLCAoeSwgeSkpOgogICAgZnJhbWVfYnVyeSAwCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6Mjk0CiAgICAvLyB5ID0gVUludDY0KDIpCiAgICBpbnRjXzIgLy8gMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjMwMQogICAgLy8gZm9yIGEsIGIgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBzd2FwCgpydW5fdGVzdHNfZm9yX2JvZHlAMTc6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MzAyCiAgICAvLyB0b3RhbCArPSBhICsgYgogICAgZnJhbWVfZGlnIDAKICAgIHVuY292ZXIgMgogICAgKwogICAgZnJhbWVfZGlnIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjMwMQogICAgLy8gZm9yIGEsIGIgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBzd2l0Y2ggcnVuX3Rlc3RzX2Zvcl9oZWFkZXJfMUAxOCBydW5fdGVzdHNfZm9yX2hlYWRlcl8yQDE5IHJ1bl90ZXN0c19mb3JfaGVhZGVyXzNAMjAKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTozMDQKICAgIC8vIGFzc2VydCB0b3RhbCAvLyA4ID09IDMKICAgIGZyYW1lX2RpZyAxCiAgICBpbnRjXzMgLy8gOAogICAgLwogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNjgKICAgIC8vIHNlbGYuYnVpbGRfbmVzdGVkX2NhbGxfY291bnQgKz0gMQogICAgYnl0ZWMgNyAvLyAiYnVpbGRfbmVzdGVkX2NhbGxfY291bnQiCiAgICBpbnRjXzEgLy8gMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNDcKICAgIC8vIHJldHVybiBUcnVlCiAgICBpbnRjXzEgLy8gMQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCnJ1bl90ZXN0c19mb3JfaGVhZGVyXzNAMjA6CiAgICBwdXNoaW50IDMgLy8gMwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI5NAogICAgLy8geSA9IFVJbnQ2NCgyKQogICAgaW50Y18yIC8vIDIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTozMDEKICAgIC8vIGZvciBhLCBiIGluICgoeCwgeSksICh5LCB4KSwgKHgsIHgpLCAoeSwgeSkpOgogICAgZnJhbWVfYnVyeSAwCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6Mjk0CiAgICAvLyB5ID0gVUludDY0KDIpCiAgICBpbnRjXzIgLy8gMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjMwMQogICAgLy8gZm9yIGEsIGIgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBzd2FwCiAgICBiIHJ1bl90ZXN0c19mb3JfYm9keUAxNwoKcnVuX3Rlc3RzX2Zvcl9oZWFkZXJfMkAxOToKICAgIGludGNfMiAvLyAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MjkzCiAgICAvLyB4ID0gVUludDY0KDEpCiAgICBpbnRjXzEgLy8gMQogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjMwMQogICAgLy8gZm9yIGEsIGIgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyOTMKICAgIC8vIHggPSBVSW50NjQoMSkKICAgIGludGNfMSAvLyAxCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MzAxCiAgICAvLyBmb3IgYSwgYiBpbiAoKHgsIHkpLCAoeSwgeCksICh4LCB4KSwgKHksIHkpKToKICAgIHN3YXAKICAgIGIgcnVuX3Rlc3RzX2Zvcl9ib2R5QDE3CgpydW5fdGVzdHNfZm9yX2hlYWRlcl8xQDE4OgogICAgaW50Y18xIC8vIDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyOTQKICAgIC8vIHkgPSBVSW50NjQoMikKICAgIGludGNfMiAvLyAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MzAxCiAgICAvLyBmb3IgYSwgYiBpbiAoKHgsIHkpLCAoeSwgeCksICh4LCB4KSwgKHksIHkpKToKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI5MwogICAgLy8geCA9IFVJbnQ2NCgxKQogICAgaW50Y18xIC8vIDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTozMDEKICAgIC8vIGZvciBhLCBiIGluICgoeCwgeSksICh5LCB4KSwgKHgsIHgpLCAoeSwgeSkpOgogICAgc3dhcAogICAgYiBydW5fdGVzdHNfZm9yX2JvZHlAMTcKCnJ1bl90ZXN0c19mb3JfaGVhZGVyXzNAMTU6CiAgICBwdXNoaW50IDMgLy8gMwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI5NAogICAgLy8geSA9IFVJbnQ2NCgyKQogICAgaW50Y18yIC8vIDIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyOTcKICAgIC8vIGZvciB0IGluICgoeCwgeSksICh5LCB4KSwgKHgsIHgpLCAoeSwgeSkpOgogICAgZnJhbWVfYnVyeSAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6Mjk0CiAgICAvLyB5ID0gVUludDY0KDIpCiAgICBpbnRjXzIgLy8gMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI5NwogICAgLy8gZm9yIHQgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBzd2FwCiAgICBiIHJ1bl90ZXN0c19mb3JfYm9keUAxMgoKcnVuX3Rlc3RzX2Zvcl9oZWFkZXJfMkAxNDoKICAgIGludGNfMiAvLyAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MjkzCiAgICAvLyB4ID0gVUludDY0KDEpCiAgICBpbnRjXzEgLy8gMQogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI5NwogICAgLy8gZm9yIHQgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyOTMKICAgIC8vIHggPSBVSW50NjQoMSkKICAgIGludGNfMSAvLyAxCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6Mjk3CiAgICAvLyBmb3IgdCBpbiAoKHgsIHkpLCAoeSwgeCksICh4LCB4KSwgKHksIHkpKToKICAgIHN3YXAKICAgIGIgcnVuX3Rlc3RzX2Zvcl9ib2R5QDEyCgpydW5fdGVzdHNfZm9yX2hlYWRlcl8xQDEzOgogICAgaW50Y18xIC8vIDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyOTQKICAgIC8vIHkgPSBVSW50NjQoMikKICAgIGludGNfMiAvLyAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6Mjk3CiAgICAvLyBmb3IgdCBpbiAoKHgsIHkpLCAoeSwgeCksICh4LCB4KSwgKHksIHkpKToKICAgIGZyYW1lX2J1cnkgMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI5MwogICAgLy8geCA9IFVJbnQ2NCgxKQogICAgaW50Y18xIC8vIDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyOTcKICAgIC8vIGZvciB0IGluICgoeCwgeSksICh5LCB4KSwgKHgsIHgpLCAoeSwgeSkpOgogICAgc3dhcAogICAgYiBydW5fdGVzdHNfZm9yX2JvZHlAMTIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}