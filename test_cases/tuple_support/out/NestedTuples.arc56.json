{
    "name": "NestedTuples",
    "structs": {
        "Child": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "string"
            }
        ],
        "Parent": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "foo_arc",
                "type": "uint64"
            },
            {
                "name": "child",
                "type": "Child"
            }
        ],
        "ParentWithList": [
            {
                "name": "parent",
                "type": "Parent"
            },
            {
                "name": "children",
                "type": "(uint64,byte[],string)[]"
            }
        ],
        "SimpleTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "TupleWithMutable": [
            {
                "name": "arr",
                "type": "uint64[]"
            },
            {
                "name": "child",
                "type": "Child"
            }
        ]
    },
    "methods": [
        {
            "name": "store_tuple",
            "args": [
                {
                    "type": "((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])",
                    "struct": "ParentWithList",
                    "name": "pwl"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple",
            "args": [],
            "returns": {
                "type": "((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])",
                "struct": "ParentWithList"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "store_tuple_in_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_tuple_in_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple_from_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "SimpleTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_load_tuple_from_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "((uint64,uint64),bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple_from_box_or_default",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "SimpleTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple_from_local_state_or_default",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "SimpleTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutate_local_tuple",
            "args": [],
            "returns": {
                "type": "(uint64[],(uint64,byte[],string))",
                "struct": "TupleWithMutable"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutate_tuple_in_storage_currently_supported_method",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "run_tests",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_tuple_params",
            "args": [
                {
                    "type": "(string,(byte[],(uint64)))",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(byte[],(string,uint64))"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "named_tuple",
            "args": [
                {
                    "type": "(uint64,byte[],string)",
                    "struct": "Child",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(uint64,byte[],string)",
                "struct": "Child"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_named_tuple_params",
            "args": [
                {
                    "type": "(uint64,uint64,(uint64,byte[],string))",
                    "struct": "Parent",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,(uint64,byte[],string))",
                "struct": "Parent"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "build_nested_call_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YnVpbGRfbmVzdGVkX2NhbGxfY291bnQ="
                },
                "twm": {
                    "keyType": "AVMString",
                    "valueType": "TupleWithMutable",
                    "key": "dHdt"
                },
                "pwl": {
                    "keyType": "AVMString",
                    "valueType": "ParentWithList",
                    "key": "cHds"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box": {
                    "keyType": "SimpleTup",
                    "valueType": "SimpleTup",
                    "prefix": "Ym94"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        224,
                        482,
                        950,
                        1307,
                        1701
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        212,
                        339,
                        433,
                        546,
                        568,
                        580,
                        658,
                        685,
                        715,
                        754,
                        784,
                        815,
                        836,
                        924
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1024
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        215,
                        342,
                        436,
                        549,
                        571,
                        583,
                        661,
                        688,
                        718,
                        757,
                        787,
                        818,
                        839,
                        927
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1509
                    ],
                    "errorMessage": "check self.box entry exists"
                },
                {
                    "pc": [
                        2049,
                        2058
                    ],
                    "errorMessage": "check self.build_nested_call_count exists"
                },
                {
                    "pc": [
                        1381
                    ],
                    "errorMessage": "check self.pwl exists"
                },
                {
                    "pc": [
                        1781,
                        1876
                    ],
                    "errorMessage": "check self.twm exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}