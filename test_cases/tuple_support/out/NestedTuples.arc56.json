{
    "name": "NestedTuples",
    "structs": {
        "Child": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "string"
            }
        ],
        "Parent": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "foo_arc",
                "type": "uint64"
            },
            {
                "name": "child",
                "type": "Child"
            }
        ],
        "ParentWithList": [
            {
                "name": "parent",
                "type": "Parent"
            },
            {
                "name": "children",
                "type": "(uint64,byte[],string)[]"
            }
        ],
        "SimpleTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "TupleWithMutable": [
            {
                "name": "arr",
                "type": "uint64[]"
            },
            {
                "name": "child",
                "type": "Child"
            }
        ]
    },
    "methods": [
        {
            "name": "store_tuple",
            "args": [
                {
                    "type": "((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])",
                    "struct": "ParentWithList",
                    "name": "pwl"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple",
            "args": [],
            "returns": {
                "type": "((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])",
                "struct": "ParentWithList"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "store_tuple_in_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_tuple_in_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple_from_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "SimpleTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_load_tuple_from_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "((uint64,uint64),bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple_from_box_or_default",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "SimpleTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple_from_local_state_or_default",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "SimpleTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutate_local_tuple",
            "args": [],
            "returns": {
                "type": "(uint64[],(uint64,byte[],string))",
                "struct": "TupleWithMutable"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutate_tuple_in_storage_currently_supported_method",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "run_tests",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_tuple_params",
            "args": [
                {
                    "type": "(string,(byte[],(uint64)))",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(byte[],(string,uint64))"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "named_tuple",
            "args": [
                {
                    "type": "(uint64,byte[],string)",
                    "struct": "Child",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(uint64,byte[],string)",
                "struct": "Child"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_named_tuple_params",
            "args": [
                {
                    "type": "(uint64,uint64,(uint64,byte[],string))",
                    "struct": "Parent",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,(uint64,byte[],string))",
                "struct": "Parent"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "build_nested_call_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YnVpbGRfbmVzdGVkX2NhbGxfY291bnQ="
                },
                "twm": {
                    "keyType": "AVMString",
                    "valueType": "TupleWithMutable",
                    "key": "dHdt"
                },
                "pwl": {
                    "keyType": "AVMString",
                    "valueType": "ParentWithList",
                    "key": "cHds"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box": {
                    "keyType": "SimpleTup",
                    "valueType": "SimpleTup",
                    "prefix": "Ym94"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        95
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        212
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        694
                    ],
                    "errorMessage": "check self.box entry exists"
                },
                {
                    "pc": [
                        614
                    ],
                    "errorMessage": "check self.pwl exists"
                },
                {
                    "pc": [
                        978
                    ],
                    "errorMessage": "check self.twm exists"
                },
                {
                    "pc": [
                        517,
                        907
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        501
                    ],
                    "errorMessage": "invalid array encoding"
                },
                {
                    "pc": [
                        429,
                        447,
                        473,
                        560,
                        578,
                        808,
                        1308,
                        1346,
                        1452,
                        1470,
                        1527,
                        1545
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        815
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        1356
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.tuple<arc4.uint64>>>"
                },
                {
                    "pc": [
                        1477
                    ],
                    "errorMessage": "invalid number of bytes for test_cases.tuple_support.nested_tuples.Child"
                },
                {
                    "pc": [
                        1553
                    ],
                    "errorMessage": "invalid number of bytes for test_cases.tuple_support.nested_tuples.Parent"
                },
                {
                    "pc": [
                        602
                    ],
                    "errorMessage": "invalid number of bytes for test_cases.tuple_support.nested_tuples.ParentWithList"
                },
                {
                    "pc": [
                        629,
                        661,
                        689,
                        709,
                        761
                    ],
                    "errorMessage": "invalid number of bytes for test_cases.tuple_support.nested_tuples.SimpleTup"
                },
                {
                    "pc": [
                        1335
                    ],
                    "errorMessage": "invalid tail pointer at index 0 of ((len+uint8[]),(uint64))"
                },
                {
                    "pc": [
                        1294
                    ],
                    "errorMessage": "invalid tail pointer at index 0 of ((len+utf8[]),((len+uint8[]),(uint64)))"
                },
                {
                    "pc": [
                        383
                    ],
                    "errorMessage": "invalid tail pointer at index 0 of ((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))"
                },
                {
                    "pc": [
                        1317
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of ((len+utf8[]),((len+uint8[]),(uint64)))"
                },
                {
                    "pc": [
                        460
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of ((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))"
                },
                {
                    "pc": [
                        415,
                        546,
                        1438,
                        1513
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of (uint64,(len+uint8[]),(len+utf8[]))"
                },
                {
                    "pc": [
                        435,
                        566,
                        1458,
                        1533
                    ],
                    "errorMessage": "invalid tail pointer at index 2 of (uint64,(len+uint8[]),(len+utf8[]))"
                },
                {
                    "pc": [
                        403,
                        1495
                    ],
                    "errorMessage": "invalid tail pointer at index 2 of (uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))"
                },
                {
                    "pc": [
                        509
                    ],
                    "errorMessage": "invalid tail pointer for (len+(uint64,(len+uint8[]),(len+utf8[]))[])"
                },
                {
                    "pc": [
                        378,
                        398,
                        410,
                        541,
                        1289,
                        1330,
                        1433,
                        1490,
                        1508
                    ],
                    "errorMessage": "invalid tuple encoding"
                },
                {
                    "pc": [
                        1004
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}