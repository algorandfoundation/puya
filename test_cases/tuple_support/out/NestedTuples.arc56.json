{
    "name": "NestedTuples",
    "structs": {
        "Child": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "string"
            }
        ],
        "Parent": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "foo_arc",
                "type": "uint64"
            },
            {
                "name": "child",
                "type": "Child"
            }
        ],
        "TupleWithMutable": [
            {
                "name": "arr",
                "type": "uint64[]"
            },
            {
                "name": "child",
                "type": "Child"
            }
        ]
    },
    "methods": [
        {
            "name": "mutate_tuple",
            "args": [],
            "returns": {
                "type": "(uint64[],(uint64,byte[],string))",
                "struct": "TupleWithMutable"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "run_tests",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_tuple_params",
            "args": [
                {
                    "type": "(string,(byte[],(uint64)))",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(byte[],(string,uint64))"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "named_tuple",
            "args": [
                {
                    "type": "(uint64,byte[],string)",
                    "struct": "Child",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(uint64,byte[],string)",
                "struct": "Child"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_named_tuple_params",
            "args": [
                {
                    "type": "(uint64,uint64,(uint64,byte[],string))",
                    "struct": "Parent",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,(uint64,byte[],string))",
                "struct": "Parent"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "build_nested_call_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YnVpbGRfbmVzdGVkX2NhbGxfY291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        116,
                        378,
                        662
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        104,
                        234,
                        329,
                        441,
                        464
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        546
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        107,
                        237,
                        332,
                        444,
                        467
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        799,
                        808
                    ],
                    "errorMessage": "check self.build_nested_call_count exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQACAyYEF2J1aWxkX25lc3RlZF9jYWxsX2NvdW50BBUffHUCAAwCAAQxGEAAAygjZzEbQQHhggUERDR57ASeWjunBM6gUhsENz9bJATsWTCWNhoAjgUBagFTAOMAhAACI0MxGRREMRhENhoBSSNbSwFXCAhLAoEQWUsDFU8ETgJSSSNbSwGBCFlLAoEKWUsDTwJLAlJXAgBLAxVPBE8DTwJSVwIATwQWTwMWSwMVFlcGAk8EUEsDFRZXBgJPBFBPAipQSwIVgQwIFlcGAlBPAlBMUExPAlCAAgASUExQKUxQsCJDMRkURDEYRDYaAUkjW0sBgQhZSwKBCllLA08CSwJSVwIASwMVTwRPA08CUlcCAE8CFksCFRZXBgJPA1BLAhUWVwYCTwNQTwIqUEsCFYEMCBZXBgJQTwJQTFApTFCwIkMxGRREMRhENhoBSSNZSwEkWUsCTwJLAlJXAgBLAhVPA08DTwJSSSNZSwEVSwJOAlJXAgBMVwIII1tLARUWVwYCTwJQSwIVFlcGAk8DUE8CFoACAApMUExQSwEVgQQIFlcGAitMUE8CUExQKUxQsCJDMRkURDEYRIgBBoABACNPAlQpTFCwIkMxGRREMRhEiACRTwIWSwIVFlcGAk8DUEsCFRZXBgJPA1BPAipQSwIVgQwIFlcGAlBPAlBMUEsBFYEECBZXBgIrTFBPAlBMUClMULAiQzEZQP5EMRgURCJDigIAIySL/iISRIv+i/9BAAsljACBBIwCgQWMAYv/JQuLABJEJIEFi/9NiwFLARJEiwJJTgKL/ggSRCKBBIv/TRJEiYoABCOLACUMQQAwiwBJgQgLgBgAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAJMgQhYSwEWqEQiCIwAQv/JgBoAAwAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAiOAAElPBImKAAGAACIkHkwUTCUSShBETEREIkmI/0ciI4j/QiMiJCOLAk8CCIsBCIwBjQMAZABbAFIjIowAJEyLAE8CCIsBCIwBjQMAMQAoAB+LAYEICiUSRCgjZyMoZUQiCChMZyMoZUQiEkQijACJJSSMACRMQv/GJCKMACJMQv+9IiSMACJMQv+0JSSMAiRMQv+TJCKMAiJMQv+KIiSMAiJMQv+B",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}