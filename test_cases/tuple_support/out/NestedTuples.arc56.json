{
    "name": "NestedTuples",
    "structs": {
        "Child": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "byte[]"
            },
            {
                "name": "c",
                "type": "string"
            }
        ],
        "Parent": [
            {
                "name": "foo",
                "type": "uint64"
            },
            {
                "name": "foo_arc",
                "type": "uint64"
            },
            {
                "name": "child",
                "type": "Child"
            }
        ],
        "ParentWithList": [
            {
                "name": "parent",
                "type": "Parent"
            },
            {
                "name": "children",
                "type": "(uint64,byte[],string)[]"
            }
        ],
        "SimpleTup": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ],
        "TupleWithMutable": [
            {
                "name": "arr",
                "type": "uint64[]"
            },
            {
                "name": "child",
                "type": "Child"
            }
        ]
    },
    "methods": [
        {
            "name": "store_tuple",
            "args": [
                {
                    "type": "((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])",
                    "struct": "ParentWithList",
                    "name": "pwl"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple",
            "args": [],
            "returns": {
                "type": "((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])",
                "struct": "ParentWithList"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "store_tuple_in_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_tuple_in_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple_from_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "SimpleTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_load_tuple_from_box",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "((uint64,uint64),bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple_from_box_or_default",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "struct": "SimpleTup",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "SimpleTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_tuple_from_local_state_or_default",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "SimpleTup"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutate_local_tuple",
            "args": [],
            "returns": {
                "type": "(uint64[],(uint64,byte[],string))",
                "struct": "TupleWithMutable"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mutate_tuple_in_storage_currently_supported_method",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "run_tests",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_tuple_params",
            "args": [
                {
                    "type": "(string,(byte[],(uint64)))",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(byte[],(string,uint64))"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "named_tuple",
            "args": [
                {
                    "type": "(uint64,byte[],string)",
                    "struct": "Child",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(uint64,byte[],string)",
                "struct": "Child"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_named_tuple_params",
            "args": [
                {
                    "type": "(uint64,uint64,(uint64,byte[],string))",
                    "struct": "Parent",
                    "name": "args"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,(uint64,byte[],string))",
                "struct": "Parent"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "build_nested_call_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YnVpbGRfbmVzdGVkX2NhbGxfY291bnQ="
                },
                "twm": {
                    "keyType": "AVMString",
                    "valueType": "TupleWithMutable",
                    "key": "dHdt"
                },
                "pwl": {
                    "keyType": "AVMString",
                    "valueType": "ParentWithList",
                    "key": "cHds"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box": {
                    "keyType": "SimpleTup",
                    "valueType": "SimpleTup",
                    "prefix": "Ym94"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        95
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        212
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        444
                    ],
                    "errorMessage": "check self.box entry exists"
                },
                {
                    "pc": [
                        384
                    ],
                    "errorMessage": "check self.pwl exists"
                },
                {
                    "pc": [
                        704
                    ],
                    "errorMessage": "check self.twm exists"
                },
                {
                    "pc": [
                        633
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        730
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQACCCYGBBUffHUDYm94A3R3bRdidWlsZF9uZXN0ZWRfY2FsbF9jb3VudANwd2wCAAQxGEAAHSsjZyqAFgAEAAYAAAAAAAAAAAAAAAwADgAAAABnMRtBAHExGRREMRhEgg4EOD4eiwRoy+3XBCJj/PEEv8NzOQTGYL6qBLbCFf8EkHyQQgTVHHF0BPjMK1AEPUhtsASeWjunBM6gUhsENz9bJATsWTCWNhoAjg4AqACwALsA1QDqAPcBJAFPAYUB8QKQAyYDjwOXADEZFDEYFBBDgBJPcmRlciBpcyBpbXBvcnRhbnSwMQCJigICgBVJJ20ganVzdCBhIHNpbXBsZSB0dXCwi/6L/4mKAQGAGUlzIHRoZXJlIGFuIGVjaG8gaW4gaGVyZT+wi/+JigIAIySL/iISRIv+i/9BAAyBA4wAgQSMAoEFjAGL/4EDC4sAEkQkgQWL/02LAUsBEkSLAklOAov+CBJEIoEEi/9NEkSJJwQ2GgFnIkMjJwRlRChMULAiQzYaAUlXAAhLASVbIggpTwNQTBZPAkxQvyJDKTYaAVC9RQGAAQAjTwJUKExQsCJDKTYaAVC+RChMULAiQyk2GgFQvklPAkxBABpHAiNbTCVbTBZMFlCAAQAjSwRUUChMULAiQ4AASUL/5yk2GgFQgQQkiP7yTgJMvkEAEkcCI1tMJVtMFkwWUChMULAiQ0sBSwNC/+42GgFXAgCI/umI/q6BBCSI/sBOA04CI08CY0EAEkcCI1tMJVtMFkwWUChMULAiQ0sBSwNC/+4jSYEDDEEALUcCJQuAGAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAkwlWEsBFqhEIghFAUL/zIAyFR98dQAEAB4AAwAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAAAAAwADgAAAACwIkMjKmVESSNZSwEkWUsCTwJLAlJJgAgAAAAAAAAAAVBMI1kiCBZXBgJcAEsCFU8DTwNPAlJJVwAISwElWUsCgQpZSwNPAksCUlcCAEsDFU8ETwNPAlJXAgBLAxWBBAhLAhUWVwYCTwNQTwOAAgAMUEsBFYEMCEsEFRZXBgJPBVBMFlcGAk8CTFBPAlBMUEwWVwYCJwVMUE8CUExQKkxnIkOAACIkHkwUTIEDEkoQRExERCJJiP29IiOI/bgjIiQjSwJPAghLAwhFA40DAFwAUwBJIyJFBCRMSwRPAghLAwhFA40DACgAHwAVSwElCoEDEkQrImeABRUffHWAsCJDgQMkRQQkTEL/zyQiRQQiTEL/xiIkRQQiTEL/vYEDJEUCJExC/5skIkUCIkxC/5IiJEUCIkxC/4k2GgFJI1lLASRZSwJPAksCUlcCAEsCFU8DTwNPAlJJI1lLARVLAk4CUlcCAExXAghXAAhLARUWVwYCTwJQSRWBBAhLAxUWVwYCTwRQgAIACk8EUExQTBZXBgInBUxQTwJQTFAoTFCwIkMoNhoBULAiQyg2GgFQsCJD",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}