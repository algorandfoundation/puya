{
  "version": 3,
  "sources": [
    "../nested_tuples.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDQ;;AAA+B;AAA/B;AAEA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAJR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAiHK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAjHL;;;AAiHK;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA5GL;;;AA4GK;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AArGL;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAqGK;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA7BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA1CL;;;AAAA;;;AA0CK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtCL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAjCL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCK;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA7BL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAzBL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBK;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AArBL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAbL;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAaK;;;AAAA;;AAbL;;AAAA;;;;;;;;;AAqIQ;;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;AAAP;AAGJ;;;AAEQ;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;;AAAA;;AAAA;AAGJ;;;AAEQ;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;;AAAA;AAqDJ;;;AAGS;AAEA;AAIE;;AAAW;AAAX;AAAP;;;AAKJ;;AAAA;;;AAEa;;AADL;;AAEK;;AAFL;;AAGK;;AAHL;;AAKe;;AAAA;;AAAA;AAAZ;;AAAA;AAAP;AAEe;AAAA;;AAAA;;AAAA;AAAR;;AAAA;;AAAA;AAAP;AAIA;;AAAA;AAAA;;AAAA;;AAAA;AACO;AAAP;AACmB;AAAA;;AAAA;;AAAA;AAAZ;AAAP;;AAtNJ;;;AAEQ;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAIO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAP;AAER;;;AAEuC;;AAAQ;AAAR;AAAtB;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAT;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAER;;;AAEe;;AAAA;AAAA;;AAAA;AAAA;AAAO;AAAP;AAAA;AAAA;AAAA;;AAAP;AAER;;;AAEwB;;AAAA;AAAA;;AAAA;AAAA;AAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAE6C;;AAAA;AAAA;;AAAA;AAAA;AAAf;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACtB;;AAAA;;AAAA;;AAAA;AADsB;;AAAA;;;;AAG9B;;;AAE4B;;AAAA;AAAA;;AAAA;AAAA;AAAb;AAAA;AAAA;AAAqC;;AAAW;AAAtB;;;AAAA;;AAAA;AAA1B;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;;AAAA;;AAAA;;;;;;;;AAER;;;AAE0C;;AAAA;;;AACjB;;;AAA+C;;AAAW;AAAtB;;;AAAA;;AAAA;;AAA9C;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;;AAAA;;AAAA;;;;;;;;AAER;;;AAYiB;AAAA;;AAAO;;AAAP;AAAjB;;;AACmB;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AADK;AAAA;AAAA;;;;;AADT;;;;;;;;;;;;;;;;;;;;;;;;;;;;AANU;AACA;;AACA;AAUV;;AAAA;AAIO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AACP;AAAY;;;;;;;;;;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AACW;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAX;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAER;;;;;AAgBwB;AAAW;AA8Ed;AAGV;AAAA;AAAA;AAAa;;AAAb;AAAA;AAAA;AAAP;AACA;AAAA;AACA;AAjFwB;AAAoB;AAAxC;;;AACoB;AAAoB;AAAxC;;;AA4JI;AAFJ;AACA;;AAKS;;AAAA;;AAAA;AAAT;;AAAA;AAAA;;AAFR;;;;;;;;;AAJQ;AAQA;;AAPA;AAOA;AACS;;AAAA;;AAAA;AAAT;;AAAA;AAAA;;AADR;;;;;;;;AAGW;;AAAS;AAAT;AAAc;;AAAd;AAAP;AAxII;;AAAgC;AAAhC;AArBO;AAAP;;AAAA;;;AAmJA;AAOA;;AAPA;AAOA;;;;;AARA;AAQA;;AARA;AAQA;;;;;AAPA;AAOA;;AARA;AAQA;;;;;;AAPA;AAGA;;AAHA;AAGA;;;;;AAJA;AAIA;;AAJA;AAIA;;;;;AAHA;AAGA;;AAJA;AAIA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x0004 \"box\" 0x000c \"twm\" 0x00 \"build_nested_call_count\" 0x0012 \"pwl\""
    },
    "61": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "63": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "66": {
      "op": "bytec 6 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\""
      ],
      "stack_out": [
        "\"build_nested_call_count\""
      ]
    },
    "68": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "\"build_nested_call_count\"",
        "0"
      ]
    },
    "69": {
      "op": "app_global_put",
      "stack_out": []
    },
    "70": {
      "op": "bytec 4 // \"twm\"",
      "defined_out": [
        "\"twm\""
      ],
      "stack_out": [
        "\"twm\""
      ]
    },
    "72": {
      "op": "pushbytes 0x0004000600000000000000000000000c000e00000000",
      "defined_out": [
        "\"twm\"",
        "0x0004000600000000000000000000000c000e00000000"
      ],
      "stack_out": [
        "\"twm\"",
        "0x0004000600000000000000000000000c000e00000000"
      ]
    },
    "96": {
      "op": "app_global_put",
      "stack_out": []
    },
    "97": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "99": {
      "op": "bz main_bare_routing@19",
      "stack_out": []
    },
    "102": {
      "op": "pushbytess 0x383e1e8b 0x68cbedd7 0x2263fcf1 0xbfc37339 0xc660beaa 0xb6c215ff 0x907c9042 0xd51c7174 0xf8cc2b50 0x3d486db0 0x9e5a3ba7 0xcea0521b 0x373f5b24 0xec593096 // method \"store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void\", method \"load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])\", method \"store_tuple_in_box((uint64,uint64))void\", method \"is_tuple_in_box((uint64,uint64))bool\", method \"load_tuple_from_box((uint64,uint64))(uint64,uint64)\", method \"maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)\", method \"load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)\", method \"load_tuple_from_local_state_or_default(string)(uint64,uint64)\", method \"mutate_local_tuple()(uint64[],(uint64,byte[],string))\", method \"mutate_tuple_in_storage_currently_supported_method()void\", method \"run_tests()bool\", method \"nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))\", method \"named_tuple((uint64,byte[],string))(uint64,byte[],string)\", method \"nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)"
      ],
      "stack_out": [
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))"
      ]
    },
    "174": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "tmp%2#0"
      ]
    },
    "177": {
      "op": "match main_store_tuple_route@5 main_load_tuple_route@6 main_store_tuple_in_box_route@7 main_is_tuple_in_box_route@8 main_load_tuple_from_box_route@9 main_maybe_load_tuple_from_box_route@10 main_load_tuple_from_box_or_default_route@11 main_load_tuple_from_local_state_or_default_route@12 main_mutate_local_tuple_route@13 main_mutate_tuple_in_storage_currently_supported_method_route@14 main_run_tests_route@15 main_nested_tuple_params_route@16 main_named_tuple_route@17 main_nested_named_tuple_params_route@18",
      "stack_out": []
    },
    "207": {
      "block": "main_after_if_else@21",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "208": {
      "op": "return",
      "stack_out": []
    },
    "209": {
      "block": "main_nested_named_tuple_params_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "211": {
      "op": "!",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "212": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "213": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "215": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "216": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "0x151f7c75"
      ]
    },
    "217": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "0x151f7c75",
        "reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "221": {
      "op": "log",
      "stack_out": []
    },
    "222": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "223": {
      "op": "return",
      "stack_out": []
    },
    "224": {
      "block": "main_named_tuple_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "226": {
      "op": "!",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "227": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "228": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "230": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "231": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "0x151f7c75"
      ]
    },
    "232": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "0x151f7c75",
        "reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "235": {
      "op": "concat",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "236": {
      "op": "log",
      "stack_out": []
    },
    "237": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "238": {
      "op": "return",
      "stack_out": []
    },
    "239": {
      "block": "main_nested_tuple_params_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "241": {
      "op": "!",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "242": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "243": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "245": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "246": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ]
    },
    "249": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "250": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "0"
      ]
    },
    "251": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "252": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%7#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "254": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%7#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%7#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "2"
      ]
    },
    "255": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "256": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "258": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%8#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "260": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%extract_uint16%8#0 (copy)",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%8#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0 (copy)"
      ]
    },
    "262": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%substring3%5#0"
      ]
    },
    "263": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "args.0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%8#0",
        "args.0#0"
      ]
    },
    "266": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%8#0",
        "args.0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "268": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%len%3#0",
        "args.0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%8#0",
        "args.0#0",
        "aggregate%len%3#0"
      ]
    },
    "269": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%extract_uint16%8#0",
        "args.0#0",
        "aggregate%len%3#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ]
    },
    "271": {
      "op": "uncover 3",
      "stack_out": [
        "args.0#0",
        "aggregate%len%3#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "273": {
      "op": "uncover 2",
      "stack_out": [
        "args.0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%3#0"
      ]
    },
    "275": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%6#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%6#0"
      ]
    },
    "276": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%6#0",
        "aggregate%substring3%6#0 (copy)",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%6#0",
        "aggregate%substring3%6#0 (copy)"
      ]
    },
    "277": {
      "op": "intc_0 // 0",
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%6#0",
        "aggregate%substring3%6#0 (copy)",
        "0"
      ]
    },
    "278": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%6#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%6#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "279": {
      "op": "dig 1",
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%6#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%6#0 (copy)"
      ]
    },
    "281": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%len%4#0",
        "aggregate%substring3%6#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%6#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%len%4#0"
      ]
    },
    "282": {
      "op": "dig 2",
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%6#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%len%4#0",
        "aggregate%substring3%6#0 (copy)"
      ]
    },
    "284": {
      "op": "cover 2",
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%6#0",
        "aggregate%substring3%6#0 (copy)",
        "aggregate%extract_uint16%10#0",
        "aggregate%len%4#0"
      ]
    },
    "286": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%6#0",
        "aggregate%substring3%7#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%6#0",
        "aggregate%substring3%7#0"
      ]
    },
    "287": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%substring3%6#0",
        "args.0#0",
        "args.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%6#0",
        "args.1.0#0"
      ]
    },
    "290": {
      "op": "swap",
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "aggregate%substring3%6#0"
      ]
    },
    "291": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%13#0",
        "args.0#0",
        "args.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "aggregate%extract%13#0"
      ]
    },
    "294": {
      "op": "intc_0 // 0",
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "aggregate%extract%13#0",
        "0"
      ]
    },
    "295": {
      "op": "extract_uint64",
      "defined_out": [
        "args.0#0",
        "args.1.0#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "args.1.1.0#0"
      ]
    },
    "296": {
      "op": "dig 1",
      "defined_out": [
        "args.0#0",
        "args.1.0#0",
        "args.1.0#0 (copy)",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "args.1.1.0#0",
        "args.1.0#0 (copy)"
      ]
    },
    "298": {
      "op": "len",
      "defined_out": [
        "aggregate%length%6#0",
        "args.0#0",
        "args.1.0#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "args.1.1.0#0",
        "aggregate%length%6#0"
      ]
    },
    "299": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%20#0",
        "args.0#0",
        "args.1.0#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "args.1.1.0#0",
        "aggregate%as_bytes%20#0"
      ]
    },
    "300": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%6#0",
        "args.0#0",
        "args.1.0#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "args.1.1.0#0",
        "aggregate%length_uint16%6#0"
      ]
    },
    "303": {
      "op": "uncover 2",
      "stack_out": [
        "args.0#0",
        "args.1.1.0#0",
        "aggregate%length_uint16%6#0",
        "args.1.0#0"
      ]
    },
    "305": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%6#0",
        "args.0#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.1.0#0",
        "aggregate%encoded_value%6#0"
      ]
    },
    "306": {
      "op": "dup",
      "defined_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%encoded_value%6#0 (copy)",
        "args.0#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.1.0#0",
        "aggregate%encoded_value%6#0",
        "aggregate%encoded_value%6#0 (copy)"
      ]
    },
    "307": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%13#0",
        "aggregate%encoded_value%6#0",
        "args.0#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.1.0#0",
        "aggregate%encoded_value%6#0",
        "aggregate%data_length%13#0"
      ]
    },
    "308": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%data_length%13#0",
        "aggregate%encoded_value%6#0",
        "args.0#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.1.0#0",
        "aggregate%encoded_value%6#0",
        "aggregate%data_length%13#0",
        "4"
      ]
    },
    "310": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%6#0",
        "args.0#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.1.0#0",
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0"
      ]
    },
    "311": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%6#0",
        "args.0#0",
        "args.0#0 (copy)",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.1.0#0",
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "args.0#0 (copy)"
      ]
    },
    "313": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%6#0",
        "aggregate%length%7#0",
        "args.0#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.1.0#0",
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%length%7#0"
      ]
    },
    "314": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%22#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%6#0",
        "args.0#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.1.0#0",
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%as_bytes%22#0"
      ]
    },
    "315": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%6#0",
        "aggregate%length_uint16%7#0",
        "args.0#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.1.0#0",
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%length_uint16%7#0"
      ]
    },
    "318": {
      "op": "uncover 4",
      "stack_out": [
        "args.1.1.0#0",
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%length_uint16%7#0",
        "args.0#0"
      ]
    },
    "320": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%6#0",
        "aggregate%encoded_value%7#0",
        "args.1.1.0#0"
      ],
      "stack_out": [
        "args.1.1.0#0",
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%7#0"
      ]
    },
    "321": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%7#0",
        "args.1.1.0#0"
      ]
    },
    "323": {
      "op": "itob",
      "defined_out": [
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%6#0",
        "aggregate%encoded_value%7#0",
        "aggregate%val_as_bytes%12#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%7#0",
        "aggregate%val_as_bytes%12#0"
      ]
    },
    "324": {
      "op": "pushbytes 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%6#0",
        "aggregate%encoded_value%7#0",
        "aggregate%val_as_bytes%12#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%7#0",
        "aggregate%val_as_bytes%12#0",
        "0x000a"
      ]
    },
    "328": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%7#0",
        "0x000a",
        "aggregate%val_as_bytes%12#0"
      ]
    },
    "329": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%6#0",
        "aggregate%encoded_value%7#0",
        "aggregate%head%30#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%7#0",
        "aggregate%head%30#0"
      ]
    },
    "330": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%head%30#0",
        "aggregate%encoded_value%7#0"
      ]
    },
    "331": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%13#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%encoded_value%6#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%current_tail_offset%13#0",
        "aggregate%concat%13#0"
      ]
    },
    "332": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%concat%13#0",
        "aggregate%current_tail_offset%13#0"
      ]
    },
    "333": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%24#0",
        "aggregate%concat%13#0",
        "aggregate%encoded_value%6#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%concat%13#0",
        "aggregate%as_bytes%24#0"
      ]
    },
    "334": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%concat%13#0",
        "aggregate%encoded_value%6#0",
        "aggregate%offset_as_uint16%15#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%concat%13#0",
        "aggregate%offset_as_uint16%15#0"
      ]
    },
    "337": {
      "op": "bytec_1 // 0x0004",
      "defined_out": [
        "0x0004",
        "aggregate%concat%13#0",
        "aggregate%encoded_value%6#0",
        "aggregate%offset_as_uint16%15#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%concat%13#0",
        "aggregate%offset_as_uint16%15#0",
        "0x0004"
      ]
    },
    "338": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%concat%13#0",
        "0x0004",
        "aggregate%offset_as_uint16%15#0"
      ]
    },
    "339": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%13#0",
        "aggregate%encoded_value%6#0",
        "aggregate%head%31#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%6#0",
        "aggregate%concat%13#0",
        "aggregate%head%31#0"
      ]
    },
    "340": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%concat%13#0",
        "aggregate%head%31#0",
        "aggregate%encoded_value%6#0"
      ]
    },
    "342": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%13#0",
        "aggregate%concat%14#0"
      ],
      "stack_out": [
        "aggregate%concat%13#0",
        "aggregate%concat%14#0"
      ]
    },
    "343": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%14#0",
        "aggregate%concat%13#0"
      ]
    },
    "344": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%15#0"
      ],
      "stack_out": [
        "aggregate%concat%15#0"
      ]
    },
    "345": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%15#0"
      ],
      "stack_out": [
        "aggregate%concat%15#0",
        "0x151f7c75"
      ]
    },
    "346": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%15#0"
      ]
    },
    "347": {
      "op": "concat",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "348": {
      "op": "log",
      "stack_out": []
    },
    "349": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "350": {
      "op": "return",
      "stack_out": []
    },
    "351": {
      "block": "main_run_tests_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "353": {
      "op": "!",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "354": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "355": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "357": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "358": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests",
      "op": "callsub run_tests",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "361": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "0x00"
      ]
    },
    "363": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "0x00",
        "0"
      ]
    },
    "364": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%98#0"
      ]
    },
    "366": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%2#0"
      ]
    },
    "367": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "368": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%2#0"
      ]
    },
    "369": {
      "op": "concat",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "370": {
      "op": "log",
      "stack_out": []
    },
    "371": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "372": {
      "op": "return",
      "stack_out": []
    },
    "373": {
      "block": "main_mutate_tuple_in_storage_currently_supported_method_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "375": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "376": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "377": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "379": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "380": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method",
      "op": "callsub mutate_tuple_in_storage_currently_supported_method"
    },
    "383": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "384": {
      "op": "return",
      "stack_out": []
    },
    "385": {
      "block": "main_mutate_local_tuple_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "387": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "388": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "389": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "391": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "392": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple",
      "op": "callsub mutate_local_tuple",
      "defined_out": [
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0"
      ]
    },
    "395": {
      "op": "dig 3",
      "defined_out": [
        "tmp%84#0",
        "tmp%84#0 (copy)",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%84#0 (copy)"
      ]
    },
    "397": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%9#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "aggregate%data_length%9#0"
      ]
    },
    "398": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%data_length%9#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "aggregate%data_length%9#0",
        "4"
      ]
    },
    "400": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%9#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0"
      ]
    },
    "401": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%84#0",
        "tmp%86#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "tmp%85#0"
      ]
    },
    "403": {
      "op": "itob",
      "defined_out": [
        "aggregate%current_tail_offset%9#0",
        "aggregate%val_as_bytes%11#0",
        "tmp%84#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%86#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%val_as_bytes%11#0"
      ]
    },
    "404": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%9#0",
        "aggregate%val_as_bytes%11#0",
        "tmp%84#0",
        "tmp%86#0",
        "tmp%86#0 (copy)",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%86#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%val_as_bytes%11#0",
        "tmp%86#0 (copy)"
      ]
    },
    "406": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%9#0",
        "aggregate%length%4#0",
        "aggregate%val_as_bytes%11#0",
        "tmp%84#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%86#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%val_as_bytes%11#0",
        "aggregate%length%4#0"
      ]
    },
    "407": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%15#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%val_as_bytes%11#0",
        "tmp%84#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%86#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%val_as_bytes%11#0",
        "aggregate%as_bytes%15#0"
      ]
    },
    "408": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%9#0",
        "aggregate%length_uint16%4#0",
        "aggregate%val_as_bytes%11#0",
        "tmp%84#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%86#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%val_as_bytes%11#0",
        "aggregate%length_uint16%4#0"
      ]
    },
    "411": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%val_as_bytes%11#0",
        "aggregate%length_uint16%4#0",
        "tmp%86#0"
      ]
    },
    "413": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%val_as_bytes%11#0",
        "tmp%84#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%val_as_bytes%11#0",
        "aggregate%encoded_value%4#0"
      ]
    },
    "414": {
      "op": "swap",
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%val_as_bytes%11#0"
      ]
    },
    "415": {
      "op": "bytec_3 // 0x000c",
      "defined_out": [
        "0x000c",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%val_as_bytes%11#0",
        "tmp%84#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%val_as_bytes%11#0",
        "0x000c"
      ]
    },
    "416": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "tmp%84#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0"
      ]
    },
    "417": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%encoded_value%4#0 (copy)",
        "aggregate%head%25#0",
        "tmp%84#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%encoded_value%4#0 (copy)"
      ]
    },
    "419": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%9#0",
        "aggregate%data_length%10#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "tmp%84#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%data_length%10#0"
      ]
    },
    "420": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%current_tail_offset%9#0",
        "aggregate%data_length%10#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "tmp%84#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%data_length%10#0",
        "12"
      ]
    },
    "422": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%10#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "tmp%84#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%current_tail_offset%10#0"
      ]
    },
    "423": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%current_tail_offset%10#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "tmp%84#0",
        "tmp%87#0",
        "tmp%87#0 (copy)"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%current_tail_offset%10#0",
        "tmp%87#0 (copy)"
      ]
    },
    "425": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%10#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%length%5#0",
        "tmp%84#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%current_tail_offset%10#0",
        "aggregate%length%5#0"
      ]
    },
    "426": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%17#0",
        "aggregate%current_tail_offset%10#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "tmp%84#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%current_tail_offset%10#0",
        "aggregate%as_bytes%17#0"
      ]
    },
    "427": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%10#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%length_uint16%5#0",
        "tmp%84#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "tmp%87#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%current_tail_offset%10#0",
        "aggregate%length_uint16%5#0"
      ]
    },
    "430": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%84#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%current_tail_offset%10#0",
        "aggregate%length_uint16%5#0",
        "tmp%87#0"
      ]
    },
    "432": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%10#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%encoded_value%5#0",
        "aggregate%head%25#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%current_tail_offset%10#0",
        "aggregate%encoded_value%5#0"
      ]
    },
    "433": {
      "op": "swap",
      "stack_out": [
        "tmp%84#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%encoded_value%5#0",
        "aggregate%current_tail_offset%10#0"
      ]
    },
    "434": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%18#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%encoded_value%5#0",
        "aggregate%head%25#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%encoded_value%5#0",
        "aggregate%as_bytes%18#0"
      ]
    },
    "435": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%encoded_value%5#0",
        "aggregate%head%25#0",
        "aggregate%offset_as_uint16%11#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%head%25#0",
        "aggregate%encoded_value%5#0",
        "aggregate%offset_as_uint16%11#0"
      ]
    },
    "438": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%84#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%encoded_value%5#0",
        "aggregate%offset_as_uint16%11#0",
        "aggregate%head%25#0"
      ]
    },
    "440": {
      "op": "swap",
      "stack_out": [
        "tmp%84#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%encoded_value%5#0",
        "aggregate%head%25#0",
        "aggregate%offset_as_uint16%11#0"
      ]
    },
    "441": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%encoded_value%5#0",
        "aggregate%head%26#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%4#0",
        "aggregate%encoded_value%5#0",
        "aggregate%head%26#0"
      ]
    },
    "442": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%84#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%5#0",
        "aggregate%head%26#0",
        "aggregate%encoded_value%4#0"
      ]
    },
    "444": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%9#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%5#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%encoded_value%5#0",
        "aggregate%concat%9#0"
      ]
    },
    "445": {
      "op": "swap",
      "stack_out": [
        "tmp%84#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%concat%9#0",
        "aggregate%encoded_value%5#0"
      ]
    },
    "446": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%10#0",
        "aggregate%current_tail_offset%9#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "aggregate%current_tail_offset%9#0",
        "aggregate%concat%10#0"
      ]
    },
    "447": {
      "op": "swap",
      "stack_out": [
        "tmp%84#0",
        "aggregate%concat%10#0",
        "aggregate%current_tail_offset%9#0"
      ]
    },
    "448": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%19#0",
        "aggregate%concat%10#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "aggregate%concat%10#0",
        "aggregate%as_bytes%19#0"
      ]
    },
    "449": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%concat%10#0",
        "aggregate%offset_as_uint16%12#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "aggregate%concat%10#0",
        "aggregate%offset_as_uint16%12#0"
      ]
    },
    "452": {
      "op": "bytec_1 // 0x0004",
      "defined_out": [
        "0x0004",
        "aggregate%concat%10#0",
        "aggregate%offset_as_uint16%12#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "aggregate%concat%10#0",
        "aggregate%offset_as_uint16%12#0",
        "0x0004"
      ]
    },
    "453": {
      "op": "swap",
      "stack_out": [
        "tmp%84#0",
        "aggregate%concat%10#0",
        "0x0004",
        "aggregate%offset_as_uint16%12#0"
      ]
    },
    "454": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%10#0",
        "aggregate%head%27#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "aggregate%concat%10#0",
        "aggregate%head%27#0"
      ]
    },
    "455": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%concat%10#0",
        "aggregate%head%27#0",
        "tmp%84#0"
      ]
    },
    "457": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%10#0",
        "aggregate%concat%11#0"
      ],
      "stack_out": [
        "aggregate%concat%10#0",
        "aggregate%concat%11#0"
      ]
    },
    "458": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%11#0",
        "aggregate%concat%10#0"
      ]
    },
    "459": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%12#0"
      ],
      "stack_out": [
        "aggregate%concat%12#0"
      ]
    },
    "460": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%12#0"
      ],
      "stack_out": [
        "aggregate%concat%12#0",
        "0x151f7c75"
      ]
    },
    "461": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%12#0"
      ]
    },
    "462": {
      "op": "concat",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "463": {
      "op": "log",
      "stack_out": []
    },
    "464": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "465": {
      "op": "return",
      "stack_out": []
    },
    "466": {
      "block": "main_load_tuple_from_local_state_or_default_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "468": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "469": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "470": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "472": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "473": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "476": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "479": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default",
      "op": "callsub load_tuple_from_local_state_or_default",
      "defined_out": [
        "tmp%76#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%76#0",
        "tmp%77#0"
      ]
    },
    "482": {
      "op": "swap",
      "stack_out": [
        "tmp%77#0",
        "tmp%76#0"
      ]
    },
    "483": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%9#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "aggregate%val_as_bytes%9#0"
      ]
    },
    "484": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%9#0",
        "tmp%77#0"
      ]
    },
    "485": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%10#0",
        "aggregate%val_as_bytes%9#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%9#0",
        "aggregate%val_as_bytes%10#0"
      ]
    },
    "486": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%22#0"
      ],
      "stack_out": [
        "aggregate%head%22#0"
      ]
    },
    "487": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%22#0"
      ],
      "stack_out": [
        "aggregate%head%22#0",
        "0x151f7c75"
      ]
    },
    "488": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%22#0"
      ]
    },
    "489": {
      "op": "concat",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "490": {
      "op": "log",
      "stack_out": []
    },
    "491": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "492": {
      "op": "return",
      "stack_out": []
    },
    "493": {
      "block": "main_load_tuple_from_box_or_default_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "495": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "496": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "497": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "499": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "500": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%4#0"
      ]
    },
    "503": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%4#0",
        "reinterpret_Encoded(uint64,uint64)%4#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%4#0",
        "reinterpret_Encoded(uint64,uint64)%4#0 (copy)"
      ]
    },
    "504": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint64)%4#0",
        "reinterpret_Encoded(uint64,uint64)%4#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%4#0",
        "reinterpret_Encoded(uint64,uint64)%4#0 (copy)",
        "0"
      ]
    },
    "505": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%6#0",
        "reinterpret_Encoded(uint64,uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%4#0",
        "aggregate%item0%6#0"
      ]
    },
    "506": {
      "op": "swap",
      "stack_out": [
        "aggregate%item0%6#0",
        "reinterpret_Encoded(uint64,uint64)%4#0"
      ]
    },
    "507": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%6#0",
        "reinterpret_Encoded(uint64,uint64)%4#0"
      ],
      "stack_out": [
        "aggregate%item0%6#0",
        "reinterpret_Encoded(uint64,uint64)%4#0",
        "8"
      ]
    },
    "508": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%6#0",
        "aggregate%item1%5#0"
      ],
      "stack_out": [
        "aggregate%item0%6#0",
        "aggregate%item1%5#0"
      ]
    },
    "509": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default",
      "op": "callsub load_tuple_from_box_or_default",
      "defined_out": [
        "tmp%67#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%68#0"
      ]
    },
    "512": {
      "op": "swap",
      "stack_out": [
        "tmp%68#0",
        "tmp%67#0"
      ]
    },
    "513": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%7#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "aggregate%val_as_bytes%7#0"
      ]
    },
    "514": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%7#0",
        "tmp%68#0"
      ]
    },
    "515": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%7#0",
        "aggregate%val_as_bytes%8#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%7#0",
        "aggregate%val_as_bytes%8#0"
      ]
    },
    "516": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%20#0"
      ],
      "stack_out": [
        "aggregate%head%20#0"
      ]
    },
    "517": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%20#0"
      ],
      "stack_out": [
        "aggregate%head%20#0",
        "0x151f7c75"
      ]
    },
    "518": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%20#0"
      ]
    },
    "519": {
      "op": "concat",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "520": {
      "op": "log",
      "stack_out": []
    },
    "521": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "522": {
      "op": "return",
      "stack_out": []
    },
    "523": {
      "block": "main_maybe_load_tuple_from_box_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "525": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "526": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "527": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "529": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "530": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%3#0"
      ]
    },
    "533": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%3#0",
        "reinterpret_Encoded(uint64,uint64)%3#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%3#0",
        "reinterpret_Encoded(uint64,uint64)%3#0 (copy)"
      ]
    },
    "534": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint64)%3#0",
        "reinterpret_Encoded(uint64,uint64)%3#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%3#0",
        "reinterpret_Encoded(uint64,uint64)%3#0 (copy)",
        "0"
      ]
    },
    "535": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%5#0",
        "reinterpret_Encoded(uint64,uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%3#0",
        "aggregate%item0%5#0"
      ]
    },
    "536": {
      "op": "swap",
      "stack_out": [
        "aggregate%item0%5#0",
        "reinterpret_Encoded(uint64,uint64)%3#0"
      ]
    },
    "537": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%5#0",
        "reinterpret_Encoded(uint64,uint64)%3#0"
      ],
      "stack_out": [
        "aggregate%item0%5#0",
        "reinterpret_Encoded(uint64,uint64)%3#0",
        "8"
      ]
    },
    "538": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%5#0",
        "aggregate%item1%4#0"
      ],
      "stack_out": [
        "aggregate%item0%5#0",
        "aggregate%item1%4#0"
      ]
    },
    "539": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box",
      "op": "callsub maybe_load_tuple_from_box",
      "defined_out": [
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0"
      ]
    },
    "542": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "tmp%56#0"
      ]
    },
    "544": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "545": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%58#0",
        "aggregate%val_as_bytes%5#0",
        "tmp%57#0"
      ]
    },
    "547": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "aggregate%val_as_bytes%6#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0",
        "aggregate%val_as_bytes%5#0",
        "aggregate%val_as_bytes%6#0"
      ]
    },
    "548": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%16#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0",
        "aggregate%head%16#0"
      ]
    },
    "549": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "aggregate%head%16#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0",
        "aggregate%head%16#0",
        "0x00"
      ]
    },
    "551": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%58#0",
        "aggregate%head%16#0",
        "0x00",
        "0"
      ]
    },
    "552": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%head%16#0",
        "0x00",
        "0",
        "tmp%58#0"
      ]
    },
    "554": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%1#0",
        "aggregate%head%16#0"
      ],
      "stack_out": [
        "aggregate%head%16#0",
        "aggregate%encoded_bool%1#0"
      ]
    },
    "555": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%18#0"
      ],
      "stack_out": [
        "aggregate%head%18#0"
      ]
    },
    "556": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%18#0"
      ],
      "stack_out": [
        "aggregate%head%18#0",
        "0x151f7c75"
      ]
    },
    "557": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%18#0"
      ]
    },
    "558": {
      "op": "concat",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "559": {
      "op": "log",
      "stack_out": []
    },
    "560": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "561": {
      "op": "return",
      "stack_out": []
    },
    "562": {
      "block": "main_load_tuple_from_box_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "564": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "565": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "566": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "568": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "569": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%2#0"
      ]
    },
    "572": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%2#0",
        "reinterpret_Encoded(uint64,uint64)%2#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%2#0",
        "reinterpret_Encoded(uint64,uint64)%2#0 (copy)"
      ]
    },
    "573": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint64)%2#0",
        "reinterpret_Encoded(uint64,uint64)%2#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%2#0",
        "reinterpret_Encoded(uint64,uint64)%2#0 (copy)",
        "0"
      ]
    },
    "574": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%4#0",
        "reinterpret_Encoded(uint64,uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%2#0",
        "aggregate%item0%4#0"
      ]
    },
    "575": {
      "op": "swap",
      "stack_out": [
        "aggregate%item0%4#0",
        "reinterpret_Encoded(uint64,uint64)%2#0"
      ]
    },
    "576": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%4#0",
        "reinterpret_Encoded(uint64,uint64)%2#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "reinterpret_Encoded(uint64,uint64)%2#0",
        "8"
      ]
    },
    "577": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%4#0",
        "aggregate%item1%3#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%item1%3#0"
      ]
    },
    "578": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box",
      "op": "callsub load_tuple_from_box",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "581": {
      "op": "swap",
      "stack_out": [
        "tmp%47#0",
        "tmp%46#0"
      ]
    },
    "582": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%3#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "583": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%3#0",
        "tmp%47#0"
      ]
    },
    "584": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%3#0",
        "aggregate%val_as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%3#0",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "585": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%14#0"
      ],
      "stack_out": [
        "aggregate%head%14#0"
      ]
    },
    "586": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%14#0"
      ],
      "stack_out": [
        "aggregate%head%14#0",
        "0x151f7c75"
      ]
    },
    "587": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%14#0"
      ]
    },
    "588": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "589": {
      "op": "log",
      "stack_out": []
    },
    "590": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "591": {
      "op": "return",
      "stack_out": []
    },
    "592": {
      "block": "main_is_tuple_in_box_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "594": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "595": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "596": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "598": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "599": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%1#0"
      ]
    },
    "602": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%1#0",
        "reinterpret_Encoded(uint64,uint64)%1#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%1#0",
        "reinterpret_Encoded(uint64,uint64)%1#0 (copy)"
      ]
    },
    "603": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint64)%1#0",
        "reinterpret_Encoded(uint64,uint64)%1#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%1#0",
        "reinterpret_Encoded(uint64,uint64)%1#0 (copy)",
        "0"
      ]
    },
    "604": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%3#0",
        "reinterpret_Encoded(uint64,uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%1#0",
        "aggregate%item0%3#0"
      ]
    },
    "605": {
      "op": "swap",
      "stack_out": [
        "aggregate%item0%3#0",
        "reinterpret_Encoded(uint64,uint64)%1#0"
      ]
    },
    "606": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%3#0",
        "reinterpret_Encoded(uint64,uint64)%1#0"
      ],
      "stack_out": [
        "aggregate%item0%3#0",
        "reinterpret_Encoded(uint64,uint64)%1#0",
        "8"
      ]
    },
    "607": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%3#0",
        "aggregate%item1%2#0"
      ],
      "stack_out": [
        "aggregate%item0%3#0",
        "aggregate%item1%2#0"
      ]
    },
    "608": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box",
      "op": "callsub is_tuple_in_box",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "611": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "0x00"
      ]
    },
    "613": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%37#0",
        "0x00",
        "0"
      ]
    },
    "614": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%37#0"
      ]
    },
    "616": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "617": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "618": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "619": {
      "op": "concat",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "620": {
      "op": "log",
      "stack_out": []
    },
    "621": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "622": {
      "op": "return",
      "stack_out": []
    },
    "623": {
      "block": "main_store_tuple_in_box_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "625": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "626": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "627": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "629": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "630": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "633": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "634": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)",
        "0"
      ]
    },
    "635": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%2#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%2#0"
      ]
    },
    "636": {
      "op": "swap",
      "stack_out": [
        "aggregate%item0%2#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "637": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%2#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "8"
      ]
    },
    "638": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%2#0",
        "aggregate%item1%1#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%item1%1#0"
      ]
    },
    "639": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box",
      "op": "callsub store_tuple_in_box",
      "stack_out": []
    },
    "642": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "643": {
      "op": "return",
      "stack_out": []
    },
    "644": {
      "block": "main_load_tuple_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "646": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "647": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "648": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "650": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "651": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple",
      "op": "callsub load_tuple",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "654": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%17#0"
      ]
    },
    "656": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "657": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%18#0"
      ]
    },
    "659": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%6#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0"
      ]
    },
    "660": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "tmp%19#0"
      ]
    },
    "662": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "663": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%20#0 (copy)"
      ]
    },
    "665": {
      "op": "len",
      "defined_out": [
        "aggregate%head%6#0",
        "aggregate%length%2#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%length%2#0"
      ]
    },
    "666": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%7#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%as_bytes%7#0"
      ]
    },
    "667": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%6#0",
        "aggregate%length_uint16%2#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "670": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%length_uint16%2#0",
        "tmp%20#0"
      ]
    },
    "672": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%2#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%encoded_value%2#0"
      ]
    },
    "673": {
      "op": "swap",
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "674": {
      "op": "bytec_3 // 0x000c",
      "defined_out": [
        "0x000c",
        "aggregate%encoded_value%2#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%val_as_bytes%2#0",
        "0x000c"
      ]
    },
    "675": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%2#0",
        "aggregate%head%6#0",
        "aggregate%head%8#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0"
      ]
    },
    "676": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%encoded_value%2#0",
        "aggregate%encoded_value%2#0 (copy)",
        "aggregate%head%6#0",
        "aggregate%head%8#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%encoded_value%2#0 (copy)"
      ]
    },
    "678": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%4#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%6#0",
        "aggregate%head%8#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%data_length%4#0"
      ]
    },
    "679": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%data_length%4#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%6#0",
        "aggregate%head%8#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%data_length%4#0",
        "12"
      ]
    },
    "681": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%6#0",
        "aggregate%head%8#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%current_tail_offset%4#0"
      ]
    },
    "682": {
      "op": "dig 5",
      "defined_out": [
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%6#0",
        "aggregate%head%8#0",
        "tmp%21#0",
        "tmp%21#0 (copy)",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%current_tail_offset%4#0",
        "tmp%21#0 (copy)"
      ]
    },
    "684": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%6#0",
        "aggregate%head%8#0",
        "aggregate%length%3#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%length%3#0"
      ]
    },
    "685": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%9#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%6#0",
        "aggregate%head%8#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%as_bytes%9#0"
      ]
    },
    "686": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%6#0",
        "aggregate%head%8#0",
        "aggregate%length_uint16%3#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%length_uint16%3#0"
      ]
    },
    "689": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%length_uint16%3#0",
        "tmp%21#0"
      ]
    },
    "691": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%2#0",
        "aggregate%encoded_value%3#0",
        "aggregate%head%6#0",
        "aggregate%head%8#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%encoded_value%3#0"
      ]
    },
    "692": {
      "op": "swap",
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%encoded_value%3#0",
        "aggregate%current_tail_offset%4#0"
      ]
    },
    "693": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%10#0",
        "aggregate%encoded_value%2#0",
        "aggregate%encoded_value%3#0",
        "aggregate%head%6#0",
        "aggregate%head%8#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%encoded_value%3#0",
        "aggregate%as_bytes%10#0"
      ]
    },
    "694": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%2#0",
        "aggregate%encoded_value%3#0",
        "aggregate%head%6#0",
        "aggregate%head%8#0",
        "aggregate%offset_as_uint16%5#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%head%8#0",
        "aggregate%encoded_value%3#0",
        "aggregate%offset_as_uint16%5#0"
      ]
    },
    "697": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%encoded_value%3#0",
        "aggregate%offset_as_uint16%5#0",
        "aggregate%head%8#0"
      ]
    },
    "699": {
      "op": "swap",
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%encoded_value%3#0",
        "aggregate%head%8#0",
        "aggregate%offset_as_uint16%5#0"
      ]
    },
    "700": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%2#0",
        "aggregate%encoded_value%3#0",
        "aggregate%head%6#0",
        "aggregate%head%9#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%2#0",
        "aggregate%encoded_value%3#0",
        "aggregate%head%9#0"
      ]
    },
    "701": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%3#0",
        "aggregate%head%9#0",
        "aggregate%encoded_value%2#0"
      ]
    },
    "703": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%4#0",
        "aggregate%encoded_value%3#0",
        "aggregate%head%6#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%encoded_value%3#0",
        "aggregate%concat%4#0"
      ]
    },
    "704": {
      "op": "swap",
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%concat%4#0",
        "aggregate%encoded_value%3#0"
      ]
    },
    "705": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%head%6#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%6#0",
        "aggregate%concat%5#0"
      ]
    },
    "706": {
      "op": "swap",
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%5#0",
        "aggregate%head%6#0"
      ]
    },
    "707": {
      "op": "bytec 7 // 0x0012",
      "defined_out": [
        "0x0012",
        "aggregate%concat%5#0",
        "aggregate%head%6#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%5#0",
        "aggregate%head%6#0",
        "0x0012"
      ]
    },
    "709": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%5#0",
        "aggregate%head%10#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%5#0",
        "aggregate%head%10#0"
      ]
    },
    "710": {
      "op": "swap",
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%10#0",
        "aggregate%concat%5#0"
      ]
    },
    "711": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%6#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%6#0"
      ]
    },
    "712": {
      "op": "dup",
      "defined_out": [
        "aggregate%concat%6#0",
        "aggregate%concat%6#0 (copy)",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%6#0",
        "aggregate%concat%6#0 (copy)"
      ]
    },
    "713": {
      "op": "len",
      "defined_out": [
        "aggregate%concat%6#0",
        "aggregate%data_length%7#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%6#0",
        "aggregate%data_length%7#0"
      ]
    },
    "714": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%concat%6#0",
        "aggregate%data_length%7#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%6#0",
        "aggregate%data_length%7#0",
        "4"
      ]
    },
    "716": {
      "op": "+",
      "defined_out": [
        "aggregate%concat%6#0",
        "aggregate%current_tail_offset%7#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%6#0",
        "aggregate%current_tail_offset%7#0"
      ]
    },
    "717": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%13#0",
        "aggregate%concat%6#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%6#0",
        "aggregate%as_bytes%13#0"
      ]
    },
    "718": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%concat%6#0",
        "aggregate%offset_as_uint16%8#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%6#0",
        "aggregate%offset_as_uint16%8#0"
      ]
    },
    "721": {
      "op": "bytec_1 // 0x0004",
      "defined_out": [
        "0x0004",
        "aggregate%concat%6#0",
        "aggregate%offset_as_uint16%8#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%6#0",
        "aggregate%offset_as_uint16%8#0",
        "0x0004"
      ]
    },
    "722": {
      "op": "swap",
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%6#0",
        "0x0004",
        "aggregate%offset_as_uint16%8#0"
      ]
    },
    "723": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%6#0",
        "aggregate%head%12#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%6#0",
        "aggregate%head%12#0"
      ]
    },
    "724": {
      "op": "swap",
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%12#0",
        "aggregate%concat%6#0"
      ]
    },
    "725": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%7#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%concat%7#0"
      ]
    },
    "726": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%7#0",
        "tmp%22#0"
      ]
    },
    "727": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%8#0"
      ],
      "stack_out": [
        "aggregate%concat%8#0"
      ]
    },
    "728": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%8#0"
      ],
      "stack_out": [
        "aggregate%concat%8#0",
        "0x151f7c75"
      ]
    },
    "729": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%8#0"
      ]
    },
    "730": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "731": {
      "op": "log",
      "stack_out": []
    },
    "732": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "733": {
      "op": "return",
      "stack_out": []
    },
    "734": {
      "block": "main_store_tuple_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "736": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "737": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "738": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "740": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "741": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ]
    },
    "744": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ]
    },
    "745": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)",
        "0"
      ]
    },
    "746": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "747": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ]
    },
    "749": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)",
        "2"
      ]
    },
    "750": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "751": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ]
    },
    "753": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "755": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "757": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "758": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "759": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "0"
      ]
    },
    "760": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "761": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "763": {
      "op": "extract 8 8",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "766": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "768": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%0#0 (copy)",
        "16"
      ]
    },
    "770": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "771": {
      "op": "dig 3",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "773": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%item0%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "774": {
      "op": "uncover 4",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "776": {
      "op": "cover 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "778": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%1#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0"
      ]
    },
    "779": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "780": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "0"
      ]
    },
    "781": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0"
      ]
    },
    "782": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "784": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0 (copy)",
        "8"
      ]
    },
    "785": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "786": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "788": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0 (copy)",
        "10"
      ]
    },
    "790": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "791": {
      "op": "dig 3",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "793": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%1#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "795": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%extract_uint16%4#0 (copy)",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%1#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0 (copy)"
      ]
    },
    "797": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%2#0"
      ]
    },
    "798": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item1%0#0"
      ]
    },
    "801": {
      "op": "dig 3",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "803": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%len%1#0",
        "aggregate%substring3%1#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item1%0#0",
        "aggregate%len%1#0"
      ]
    },
    "804": {
      "op": "uncover 4",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item1%0#0",
        "aggregate%len%1#0",
        "aggregate%substring3%1#0"
      ]
    },
    "806": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%len%1#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "808": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%1#0"
      ]
    },
    "810": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0"
      ]
    },
    "811": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0"
      ]
    },
    "814": {
      "op": "dig 6",
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 (copy)"
      ]
    },
    "816": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%2#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%2#0"
      ]
    },
    "817": {
      "op": "uncover 7",
      "stack_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%2#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ]
    },
    "819": {
      "op": "uncover 7",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%2#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "821": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%2#0"
      ]
    },
    "823": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%4#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%4#0"
      ]
    },
    "824": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple",
      "op": "callsub store_tuple",
      "stack_out": []
    },
    "827": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "828": {
      "op": "return",
      "stack_out": []
    },
    "829": {
      "block": "main_bare_routing@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "831": {
      "op": "bnz main_after_if_else@21",
      "stack_out": []
    },
    "834": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "836": {
      "op": "!",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "837": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "838": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "839": {
      "op": "return",
      "stack_out": []
    },
    "840": {
      "subroutine": "test_cases.tuple_support.nested_tuples.get_sender_inefficiently",
      "params": {},
      "block": "get_sender_inefficiently",
      "stack_in": [],
      "op": "pushbytes \"Order is important\"",
      "defined_out": [
        "\"Order is important\""
      ],
      "stack_out": [
        "\"Order is important\""
      ]
    },
    "860": {
      "op": "log",
      "stack_out": []
    },
    "861": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "863": {
      "retsub": true,
      "op": "retsub"
    },
    "864": {
      "subroutine": "test_cases.tuple_support.nested_tuples.simple_tup",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "simple_tup",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "867": {
      "op": "pushbytes \"I'm just a simple tup\"",
      "defined_out": [
        "\"I'm just a simple tup\""
      ],
      "stack_out": [
        "\"I'm just a simple tup\""
      ]
    },
    "890": {
      "op": "log",
      "stack_out": []
    },
    "891": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "893": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "895": {
      "retsub": true,
      "op": "retsub"
    },
    "896": {
      "subroutine": "test_cases.tuple_support.nested_tuples.echo",
      "params": {
        "s#0": "bytes"
      },
      "block": "echo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "899": {
      "op": "pushbytes \"Is there an echo in here?\"",
      "defined_out": [
        "\"Is there an echo in here?\""
      ],
      "stack_out": [
        "\"Is there an echo in here?\""
      ]
    },
    "926": {
      "op": "log",
      "stack_out": []
    },
    "927": {
      "op": "frame_dig -1",
      "defined_out": [
        "s#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)"
      ]
    },
    "929": {
      "retsub": true,
      "op": "retsub"
    },
    "930": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "params": {
        "one#0": "uint64",
        "reassign#0": "uint64"
      },
      "block": "test_nested_singles",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "933": {
      "op": "intc_0 // 0"
    },
    "934": {
      "op": "intc_2 // 2"
    },
    "935": {
      "op": "frame_dig -2"
    },
    "937": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "one#0 (copy)",
        "s.0.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "one#0 (copy)",
        "1"
      ]
    },
    "938": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "tmp%2#0"
      ]
    },
    "939": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0"
      ]
    },
    "940": {
      "op": "frame_dig -2"
    },
    "942": {
      "op": "frame_dig -1",
      "defined_out": [
        "reassign#0 (copy)",
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "reassign#0 (copy)"
      ]
    },
    "944": {
      "op": "bz test_nested_singles_after_if_else@2",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1"
      ]
    },
    "947": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.0.0#0"
      ]
    },
    "949": {
      "op": "frame_bury 0",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1"
      ]
    },
    "951": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.1.0#1"
      ]
    },
    "953": {
      "op": "frame_bury 2",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1"
      ]
    },
    "955": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.2.0#0"
      ]
    },
    "957": {
      "op": "frame_bury 1",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1"
      ]
    },
    "959": {
      "block": "test_nested_singles_after_if_else@2",
      "stack_in": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "reassign#0 (copy)"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "reassign#0 (copy)"
      ]
    },
    "961": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "reassign#0 (copy)"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "reassign#0 (copy)",
        "3"
      ]
    },
    "963": {
      "op": "*",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%0#0"
      ]
    },
    "964": {
      "op": "frame_dig 0",
      "defined_out": [
        "s.0.0#0",
        "select%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%0#0",
        "s.0.0#0"
      ]
    },
    "966": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "tmp%6#0"
      ]
    },
    "967": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1"
      ]
    },
    "968": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "2"
      ]
    },
    "969": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "2",
        "5",
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "2",
        "5"
      ]
    },
    "971": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "2",
        "5",
        "reassign#0 (copy)"
      ]
    },
    "973": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "select%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0"
      ]
    },
    "974": {
      "op": "frame_dig 1",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "select%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0",
        "s.2.0#0"
      ]
    },
    "976": {
      "op": "dig 1",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "select%1#0",
        "select%1#0 (copy)"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0",
        "s.2.0#0",
        "select%1#0 (copy)"
      ]
    },
    "978": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "select%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0",
        "tmp%7#0"
      ]
    },
    "979": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0"
      ]
    },
    "980": {
      "op": "frame_dig 2",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0",
        "select%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0",
        "s.1.0#1"
      ]
    },
    "982": {
      "op": "dup",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.1.0#1 (copy)",
        "s.2.0#0",
        "select%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0",
        "s.1.0#1 (copy)",
        "s.1.0#1 (copy)"
      ]
    },
    "983": {
      "op": "cover 2",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.1.0#1",
        "select%1#0",
        "s.1.0#1 (copy)"
      ]
    },
    "985": {
      "op": "frame_dig -2",
      "defined_out": [
        "one#0 (copy)",
        "s.0.0#0",
        "s.1.0#1",
        "s.1.0#1 (copy)",
        "s.2.0#0",
        "select%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.1.0#1",
        "select%1#0",
        "s.1.0#1 (copy)",
        "one#0 (copy)"
      ]
    },
    "987": {
      "op": "+",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0",
        "s1#1",
        "select%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.1.0#1",
        "select%1#0",
        "s1#1"
      ]
    },
    "988": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.1.0#1",
        "tmp%10#0"
      ]
    },
    "989": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.1.0#1"
      ]
    },
    "990": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.1.0#1",
        "1"
      ]
    },
    "991": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "1",
        "4",
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.1.0#1",
        "1",
        "4"
      ]
    },
    "993": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.1.0#1",
        "1",
        "4",
        "reassign#0 (copy)"
      ]
    },
    "995": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0",
        "select%3#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.1.0#1",
        "select%3#0"
      ]
    },
    "996": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "tmp%11#0"
      ]
    },
    "997": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1"
      ]
    },
    "998": {
      "retsub": true,
      "op": "retsub"
    },
    "999": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple",
      "params": {
        "pwl.parent.foo#0": "uint64",
        "pwl.parent.foo_arc#0": "bytes",
        "pwl.parent.child.a#0": "uint64",
        "pwl.parent.child.b#0": "bytes",
        "pwl.parent.child.c#0": "bytes",
        "pwl.children#0": "bytes"
      },
      "block": "store_tuple",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "1002": {
      "op": "frame_dig -6",
      "defined_out": [
        "pwl.parent.foo#0 (copy)"
      ],
      "stack_out": [
        "pwl.parent.foo#0 (copy)"
      ]
    },
    "1004": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1005": {
      "op": "frame_dig -5",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "pwl.parent.foo_arc#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "pwl.parent.foo_arc#0 (copy)"
      ]
    },
    "1007": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1008": {
      "op": "frame_dig -4",
      "defined_out": [
        "aggregate%head%1#0",
        "pwl.parent.child.a#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "pwl.parent.child.a#0 (copy)"
      ]
    },
    "1010": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1011": {
      "op": "frame_dig -3",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0",
        "pwl.parent.child.b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0",
        "pwl.parent.child.b#0 (copy)"
      ]
    },
    "1013": {
      "op": "len",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%length%0#0"
      ]
    },
    "1014": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1015": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1018": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%length_uint16%0#0",
        "pwl.parent.child.b#0 (copy)"
      ]
    },
    "1020": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "1021": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1022": {
      "op": "bytec_3 // 0x000c",
      "defined_out": [
        "0x000c",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%1#0",
        "0x000c"
      ]
    },
    "1023": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0"
      ]
    },
    "1024": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%0#0 (copy)"
      ]
    },
    "1026": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%data_length%0#0"
      ]
    },
    "1027": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%data_length%0#0",
        "12"
      ]
    },
    "1029": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1030": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "pwl.parent.child.c#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%0#0",
        "pwl.parent.child.c#0 (copy)"
      ]
    },
    "1032": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "1033": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "1034": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "1037": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "pwl.parent.child.c#0 (copy)"
      ]
    },
    "1039": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "1040": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1041": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "1042": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "1045": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%3#0"
      ]
    },
    "1047": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "1048": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%4#0"
      ]
    },
    "1049": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%4#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "1051": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%1#0",
        "aggregate%concat%0#0"
      ]
    },
    "1052": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%concat%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "1053": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%concat%1#0"
      ]
    },
    "1054": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%head%1#0"
      ]
    },
    "1055": {
      "op": "bytec 7 // 0x0012",
      "defined_out": [
        "0x0012",
        "aggregate%concat%1#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%head%1#0",
        "0x0012"
      ]
    },
    "1057": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%head%5#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%head%5#0"
      ]
    },
    "1058": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%5#0",
        "aggregate%concat%1#0"
      ]
    },
    "1059": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0"
      ]
    },
    "1060": {
      "op": "dup",
      "defined_out": [
        "aggregate%concat%2#0",
        "aggregate%concat%2#0 (copy)"
      ],
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%concat%2#0 (copy)"
      ]
    },
    "1061": {
      "op": "len",
      "defined_out": [
        "aggregate%concat%2#0",
        "aggregate%data_length%3#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%data_length%3#0"
      ]
    },
    "1062": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%concat%2#0",
        "aggregate%data_length%3#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%data_length%3#0",
        "4"
      ]
    },
    "1064": {
      "op": "+",
      "defined_out": [
        "aggregate%concat%2#0",
        "aggregate%current_tail_offset%3#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%current_tail_offset%3#0"
      ]
    },
    "1065": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#0",
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "1066": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%concat%2#0",
        "aggregate%offset_as_uint16%4#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "1069": {
      "op": "bytec_1 // 0x0004",
      "defined_out": [
        "0x0004",
        "aggregate%concat%2#0",
        "aggregate%offset_as_uint16%4#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%offset_as_uint16%4#0",
        "0x0004"
      ]
    },
    "1070": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%2#0",
        "0x0004",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "1071": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#0",
        "aggregate%head%7#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%head%7#0"
      ]
    },
    "1072": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%7#0",
        "aggregate%concat%2#0"
      ]
    },
    "1073": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%3#0"
      ],
      "stack_out": [
        "aggregate%concat%3#0"
      ]
    },
    "1074": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%concat%3#0",
        "pwl.children#0 (copy)"
      ],
      "stack_out": [
        "aggregate%concat%3#0",
        "pwl.children#0 (copy)"
      ]
    },
    "1076": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%4#0"
      ],
      "stack_out": [
        "aggregate%concat%4#0"
      ]
    },
    "1077": {
      "op": "bytec 8 // \"pwl\"",
      "defined_out": [
        "\"pwl\"",
        "aggregate%concat%4#0"
      ],
      "stack_out": [
        "aggregate%concat%4#0",
        "\"pwl\""
      ]
    },
    "1079": {
      "op": "swap",
      "stack_out": [
        "\"pwl\"",
        "aggregate%concat%4#0"
      ]
    },
    "1080": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1081": {
      "retsub": true,
      "op": "retsub"
    },
    "1082": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple",
      "params": {},
      "block": "load_tuple",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1083": {
      "op": "bytec 8 // \"pwl\"",
      "defined_out": [
        "\"pwl\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pwl\""
      ]
    },
    "1085": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1086": {
      "error": "check self.pwl exists",
      "op": "assert // check self.pwl exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1087": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1088": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "1089": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1090": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1092": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "1093": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1094": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1096": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1098": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "1100": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "1101": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "1102": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "0"
      ]
    },
    "1103": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "1104": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "1106": {
      "op": "extract 8 8",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1109": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "1111": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%0#0 (copy)",
        "16"
      ]
    },
    "1113": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "1114": {
      "op": "dig 3",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "1116": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%item0%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "1117": {
      "op": "uncover 4",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "1119": {
      "op": "cover 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "1121": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0"
      ]
    },
    "1122": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "1123": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "0"
      ]
    },
    "1124": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0"
      ]
    },
    "1125": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "1127": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0 (copy)",
        "8"
      ]
    },
    "1128": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "1129": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "1131": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0 (copy)",
        "10"
      ]
    },
    "1133": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "1134": {
      "op": "dig 3",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "1136": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%1#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "1138": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%extract_uint16%4#0 (copy)",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%1#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0 (copy)"
      ]
    },
    "1140": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%2#0"
      ]
    },
    "1141": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item1%0#0"
      ]
    },
    "1144": {
      "op": "dig 3",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "1146": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%len%1#0",
        "aggregate%substring3%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item1%0#0",
        "aggregate%len%1#0"
      ]
    },
    "1147": {
      "op": "uncover 4",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%item1%0#0",
        "aggregate%len%1#0",
        "aggregate%substring3%1#0"
      ]
    },
    "1149": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%len%1#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "1151": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%1#0"
      ]
    },
    "1153": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%3#0"
      ]
    },
    "1154": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0"
      ]
    },
    "1157": {
      "op": "dig 6",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1159": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%2#0"
      ]
    },
    "1160": {
      "op": "uncover 7",
      "stack_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%2#0",
        "maybe_value%0#0"
      ]
    },
    "1162": {
      "op": "uncover 7",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%2#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1164": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%2#0"
      ]
    },
    "1166": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%4#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%4#0"
      ]
    },
    "1167": {
      "retsub": true,
      "op": "retsub"
    },
    "1168": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "store_tuple_in_box",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1171": {
      "op": "frame_dig -1",
      "defined_out": [
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "key.b#0 (copy)"
      ]
    },
    "1173": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "key.b#0 (copy)",
        "1"
      ]
    },
    "1174": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1175": {
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "key.a#0 (copy)"
      ]
    },
    "1177": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1178": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "1180": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1181": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)",
        "aggregate%val_as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "1183": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1184": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%1#0"
      ]
    },
    "1185": {
      "op": "bytec_2 // \"box\"",
      "defined_out": [
        "\"box\"",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%head%1#0",
        "\"box\""
      ]
    },
    "1186": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0",
        "\"box\"",
        "aggregate%head%1#0"
      ]
    },
    "1187": {
      "op": "concat",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1188": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "1190": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%3#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "1191": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1193": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "1194": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%head%3#0"
      ]
    },
    "1195": {
      "op": "box_put",
      "stack_out": []
    },
    "1196": {
      "retsub": true,
      "op": "retsub"
    },
    "1197": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "is_tuple_in_box",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1200": {
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "key.a#0 (copy)"
      ]
    },
    "1202": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1203": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "1205": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1206": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1207": {
      "op": "bytec_2 // \"box\"",
      "defined_out": [
        "\"box\"",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "\"box\""
      ]
    },
    "1208": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "aggregate%head%1#0"
      ]
    },
    "1209": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1210": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1211": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1213": {
      "retsub": true,
      "op": "retsub"
    },
    "1214": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "load_tuple_from_box",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "1217": {
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "key.a#0 (copy)"
      ]
    },
    "1219": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1220": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "1222": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1223": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1224": {
      "op": "bytec_2 // \"box\"",
      "defined_out": [
        "\"box\"",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "\"box\""
      ]
    },
    "1225": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "aggregate%head%1#0"
      ]
    },
    "1226": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1227": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1228": {
      "error": "check self.box entry exists",
      "op": "assert // check self.box entry exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "1229": {
      "op": "dup",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "1230": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "0"
      ]
    },
    "1231": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "1232": {
      "op": "swap",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "1233": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%box_get%0#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%box_get%0#0",
        "8"
      ]
    },
    "1234": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "1235": {
      "retsub": true,
      "op": "retsub"
    },
    "1236": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "maybe_load_tuple_from_box",
      "stack_in": [],
      "op": "proto 2 3"
    },
    "1239": {
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "key.a#0 (copy)"
      ]
    },
    "1241": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1242": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "1244": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1245": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1246": {
      "op": "bytec_2 // \"box\"",
      "defined_out": [
        "\"box\"",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "\"box\""
      ]
    },
    "1247": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "aggregate%head%1#0"
      ]
    },
    "1248": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1249": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "1250": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "1251": {
      "op": "uncover 2",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "1253": {
      "op": "swap",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "1254": {
      "op": "bz maybe_load_tuple_from_box_ternary_false@2",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "1257": {
      "op": "frame_dig 1",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "1259": {
      "op": "dup",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1260": {
      "op": "intc_0 // 0",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "1261": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%0#0",
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "1262": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ]
    },
    "1263": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%0#0",
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "1264": {
      "op": "extract_uint64",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ]
    },
    "1265": {
      "block": "maybe_load_tuple_from_box_ternary_merge@3",
      "stack_in": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "exists#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0",
        "exists#0"
      ]
    },
    "1267": {
      "op": "uncover 4"
    },
    "1269": {
      "op": "uncover 4"
    },
    "1271": {
      "retsub": true,
      "op": "retsub"
    },
    "1272": {
      "block": "maybe_load_tuple_from_box_ternary_false@2",
      "stack_in": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "op": "pushbytes \"\""
    },
    "1274": {
      "op": "dup",
      "defined_out": [
        "maybe_value.a#0",
        "maybe_value.b#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ]
    },
    "1275": {
      "op": "b maybe_load_tuple_from_box_ternary_merge@3"
    },
    "1278": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "load_tuple_from_box_or_default",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "1281": {
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "key.a#0 (copy)"
      ]
    },
    "1283": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1284": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "1286": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1287": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1288": {
      "op": "bytec_2 // \"box\"",
      "defined_out": [
        "\"box\"",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "\"box\""
      ]
    },
    "1289": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "aggregate%head%1#0"
      ]
    },
    "1290": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1291": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "4"
      ]
    },
    "1293": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "4",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "4",
        "2"
      ]
    },
    "1294": {
      "callsub": "test_cases.tuple_support.nested_tuples.simple_tup",
      "op": "callsub simple_tup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1297": {
      "op": "cover 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "1299": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1300": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1301": {
      "op": "bz load_tuple_from_box_or_default_ternary_false@2",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1304": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "1306": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1307": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "1308": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "1309": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ]
    },
    "1310": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "1311": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ]
    },
    "1312": {
      "block": "load_tuple_from_box_or_default_ternary_merge@3",
      "stack_in": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ],
      "op": "frame_bury 1",
      "defined_out": [
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ]
    },
    "1314": {
      "op": "frame_bury 0"
    },
    "1316": {
      "retsub": true,
      "op": "retsub"
    },
    "1317": {
      "block": "load_tuple_from_box_or_default_ternary_false@2",
      "stack_in": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "ternary_result%0.a#2"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "ternary_result%0.a#2"
      ]
    },
    "1319": {
      "op": "frame_dig 0",
      "defined_out": [
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ]
    },
    "1321": {
      "op": "b load_tuple_from_box_or_default_ternary_merge@3"
    },
    "1324": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default",
      "params": {
        "key#0": "bytes"
      },
      "block": "load_tuple_from_local_state_or_default",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "1327": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1329": {
      "callsub": "test_cases.tuple_support.nested_tuples.echo",
      "op": "callsub echo",
      "defined_out": [
        "local#0"
      ],
      "stack_out": [
        "local#0"
      ]
    },
    "1332": {
      "callsub": "test_cases.tuple_support.nested_tuples.get_sender_inefficiently",
      "op": "callsub get_sender_inefficiently",
      "defined_out": [
        "local#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "local#0",
        "tmp%1#0"
      ]
    },
    "1335": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "local#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "local#0",
        "tmp%1#0",
        "4"
      ]
    },
    "1337": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "4",
        "local#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "local#0",
        "tmp%1#0",
        "4",
        "2"
      ]
    },
    "1338": {
      "callsub": "test_cases.tuple_support.nested_tuples.simple_tup",
      "op": "callsub simple_tup",
      "defined_out": [
        "local#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "local#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1341": {
      "op": "cover 3",
      "defined_out": [
        "local#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "local#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1343": {
      "op": "cover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "local#0",
        "tmp%1#0"
      ]
    },
    "1345": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "local#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1346": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "0",
        "local#0"
      ]
    },
    "1348": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1349": {
      "op": "bz load_tuple_from_local_state_or_default_ternary_false@2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "1352": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "1354": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1355": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "1356": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "1357": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ]
    },
    "1358": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "1359": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ]
    },
    "1360": {
      "block": "load_tuple_from_local_state_or_default_ternary_merge@3",
      "stack_in": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ],
      "op": "frame_bury 1",
      "defined_out": [
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ]
    },
    "1362": {
      "op": "frame_bury 0"
    },
    "1364": {
      "retsub": true,
      "op": "retsub"
    },
    "1365": {
      "block": "load_tuple_from_local_state_or_default_ternary_false@2",
      "stack_in": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "ternary_result%0.a#2"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "ternary_result%0.a#2"
      ]
    },
    "1367": {
      "op": "frame_dig 0",
      "defined_out": [
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ]
    },
    "1369": {
      "op": "b load_tuple_from_local_state_or_default_ternary_merge@3"
    },
    "1372": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple",
      "params": {},
      "block": "mutate_local_tuple",
      "stack_in": [],
      "op": "proto 0 4"
    },
    "1375": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "1376": {
      "block": "mutate_local_tuple_for_header@1",
      "stack_in": [
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "1378": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "3"
      ]
    },
    "1380": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1381": {
      "op": "bz mutate_local_tuple_after_for@4",
      "stack_out": [
        "i#0"
      ]
    },
    "1384": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "1386": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "1387": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "i#0 (copy)",
        "8"
      ]
    },
    "1388": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1389": {
      "op": "pushbytes 0x000000000000000000000000000000010000000000000002",
      "defined_out": [
        "0x000000000000000000000000000000010000000000000002",
        "aggregate%bytes_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%bytes_offset%0#0",
        "0x000000000000000000000000000000010000000000000002"
      ]
    },
    "1415": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "i#0",
        "0x000000000000000000000000000000010000000000000002",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1416": {
      "op": "intc_3 // 8",
      "stack_out": [
        "i#0",
        "i#0",
        "0x000000000000000000000000000000010000000000000002",
        "aggregate%bytes_offset%0#0",
        "8"
      ]
    },
    "1417": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "1418": {
      "op": "dig 1",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0",
        "i#0 (copy)"
      ]
    },
    "1420": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0",
        "tmp%2#0"
      ]
    },
    "1421": {
      "op": "b==",
      "defined_out": [
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "1422": {
      "op": "assert",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "1423": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1424": {
      "op": "+",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "1425": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "1427": {
      "op": "b mutate_local_tuple_for_header@1"
    },
    "1430": {
      "block": "mutate_local_tuple_after_for@4",
      "stack_in": [
        "i#0"
      ],
      "op": "pushbytes 0x0003000000000000000000000000000000010000000000000002",
      "defined_out": [
        "0x0003000000000000000000000000000000010000000000000002"
      ],
      "stack_out": [
        "i#0",
        "0x0003000000000000000000000000000000010000000000000002"
      ]
    },
    "1458": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x0003000000000000000000000000000000010000000000000002"
      ],
      "stack_out": [
        "i#0",
        "0x0003000000000000000000000000000000010000000000000002",
        "0"
      ]
    },
    "1459": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0",
        "0x",
        "0x0003000000000000000000000000000000010000000000000002"
      ],
      "stack_out": [
        "i#0",
        "0x0003000000000000000000000000000000010000000000000002",
        "0",
        "0x"
      ]
    },
    "1461": {
      "op": "dup",
      "defined_out": [
        "\"\"",
        "0",
        "0x",
        "0x0003000000000000000000000000000000010000000000000002"
      ],
      "stack_out": [
        "i#0",
        "0x0003000000000000000000000000000000010000000000000002",
        "0",
        "0x",
        "\"\""
      ]
    },
    "1462": {
      "op": "uncover 4"
    },
    "1464": {
      "retsub": true,
      "op": "retsub"
    },
    "1465": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method",
      "params": {},
      "block": "mutate_tuple_in_storage_currently_supported_method",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1466": {
      "op": "bytec 4 // \"twm\"",
      "defined_out": [
        "\"twm\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"twm\""
      ]
    },
    "1468": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1469": {
      "error": "check self.twm exists",
      "op": "assert // check self.twm exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1470": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1471": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "1472": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1473": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1475": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "1476": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1477": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1479": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1481": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "1483": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0"
      ]
    },
    "1484": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "arr2#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "arr2#0 (copy)"
      ]
    },
    "1485": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "arr2#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "arr2#0 (copy)",
        "0x0000000000000001"
      ]
    },
    "1495": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "concat%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "concat%0#0"
      ]
    },
    "1496": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "arr2#0"
      ]
    },
    "1497": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "arr2#0",
        "0"
      ]
    },
    "1498": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1499": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "1500": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "1501": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "as_bytes%0#0",
        "concat%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "1502": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "1505": {
      "op": "replace2 0",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0"
      ]
    },
    "1507": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1509": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%2#0",
        "arr2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "aggregate%len%2#0"
      ]
    },
    "1510": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "aggregate%len%2#0",
        "maybe_value%0#0"
      ]
    },
    "1512": {
      "op": "uncover 3",
      "stack_out": [
        "arr2#0",
        "aggregate%len%2#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1514": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%2#0"
      ]
    },
    "1516": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0"
      ]
    },
    "1517": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "1518": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "0"
      ]
    },
    "1519": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0"
      ]
    },
    "1520": {
      "op": "dig 1",
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "1522": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0 (copy)",
        "8"
      ]
    },
    "1523": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%9#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "1524": {
      "op": "dig 2",
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "1526": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%extract_uint16%9#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0 (copy)",
        "10"
      ]
    },
    "1528": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "1529": {
      "op": "dig 3",
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "1531": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "1533": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%10#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0 (copy)"
      ]
    },
    "1535": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%6#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%6#0"
      ]
    },
    "1536": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%item1%1#0"
      ]
    },
    "1539": {
      "op": "dig 3",
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "1541": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%item1%1#0",
        "aggregate%len%3#0"
      ]
    },
    "1542": {
      "op": "uncover 4",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%item1%1#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0"
      ]
    },
    "1544": {
      "op": "uncover 3",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "1546": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%len%3#0"
      ]
    },
    "1548": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%7#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%7#0"
      ]
    },
    "1549": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0"
      ]
    },
    "1552": {
      "op": "dig 3",
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "arr2#0 (copy)"
      ]
    },
    "1554": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%data_length%0#0"
      ]
    },
    "1555": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%data_length%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%data_length%0#0",
        "4"
      ]
    },
    "1557": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1558": {
      "op": "uncover 3",
      "stack_out": [
        "arr2#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%item0%1#0"
      ]
    },
    "1560": {
      "op": "itob",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%val_as_bytes%0#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1561": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%item1%1#0",
        "aggregate%item1%1#0 (copy)",
        "aggregate%item2%1#0",
        "aggregate%val_as_bytes%0#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%item1%1#0 (copy)"
      ]
    },
    "1563": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%length%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%length%0#0"
      ]
    },
    "1564": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%val_as_bytes%0#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "1565": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%length_uint16%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1568": {
      "op": "uncover 4",
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%length_uint16%0#0",
        "aggregate%item1%1#0"
      ]
    },
    "1570": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%item2%1#0",
        "aggregate%val_as_bytes%0#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "1571": {
      "op": "swap",
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1572": {
      "op": "bytec_3 // 0x000c",
      "defined_out": [
        "0x000c",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%item2%1#0",
        "aggregate%val_as_bytes%0#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%0#0",
        "0x000c"
      ]
    },
    "1573": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0"
      ]
    },
    "1574": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%0#0 (copy)"
      ]
    },
    "1576": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%data_length%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%data_length%1#0"
      ]
    },
    "1577": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%current_tail_offset%0#0",
        "aggregate%data_length%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%data_length%1#0",
        "12"
      ]
    },
    "1579": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "1580": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "aggregate%item2%1#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%item2%1#0 (copy)"
      ]
    },
    "1582": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "aggregate%length%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length%1#0"
      ]
    },
    "1583": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "1584": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "aggregate%length_uint16%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "1587": {
      "op": "uncover 5",
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%1#0",
        "aggregate%item2%1#0"
      ]
    },
    "1589": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "1590": {
      "op": "swap",
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%1#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "1591": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%1#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "1592": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%2#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "1595": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%3#0"
      ]
    },
    "1597": {
      "op": "swap",
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "1598": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%4#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%4#0"
      ]
    },
    "1599": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%4#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "1601": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%concat%0#0"
      ]
    },
    "1602": {
      "op": "swap",
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%concat%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "1603": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%0#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%concat%1#0"
      ]
    },
    "1604": {
      "op": "swap",
      "stack_out": [
        "arr2#0",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1605": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#0",
        "aggregate%concat%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%concat%1#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "1606": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%offset_as_uint16%3#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%concat%1#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "1609": {
      "op": "bytec_1 // 0x0004",
      "defined_out": [
        "0x0004",
        "aggregate%concat%1#0",
        "aggregate%offset_as_uint16%3#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%concat%1#0",
        "aggregate%offset_as_uint16%3#0",
        "0x0004"
      ]
    },
    "1610": {
      "op": "swap",
      "stack_out": [
        "arr2#0",
        "aggregate%concat%1#0",
        "0x0004",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "1611": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%head%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%concat%1#0",
        "aggregate%head%5#0"
      ]
    },
    "1612": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%head%5#0",
        "arr2#0"
      ]
    },
    "1614": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0"
      ]
    },
    "1615": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%concat%1#0"
      ]
    },
    "1616": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%3#0"
      ],
      "stack_out": [
        "aggregate%concat%3#0"
      ]
    },
    "1617": {
      "op": "bytec 4 // \"twm\"",
      "stack_out": [
        "aggregate%concat%3#0",
        "\"twm\""
      ]
    },
    "1619": {
      "op": "swap",
      "stack_out": [
        "\"twm\"",
        "aggregate%concat%3#0"
      ]
    },
    "1620": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1621": {
      "retsub": true,
      "op": "retsub"
    },
    "1622": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests",
      "params": {},
      "block": "run_tests",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1625": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "a#2"
      ]
    },
    "1627": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "a#2",
        "1"
      ]
    },
    "1628": {
      "op": "intc_2 // 2",
      "defined_out": [
        "1",
        "2"
      ],
      "stack_out": [
        "a#2",
        "1",
        "2"
      ]
    },
    "1629": {
      "op": "addw",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "a#2",
        "nt.1.0#0",
        "nt.1.1#0"
      ]
    },
    "1630": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "1631": {
      "op": "!",
      "defined_out": [
        "nt.1.1#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#2",
        "nt.1.1#0",
        "tmp%4#1"
      ]
    },
    "1632": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "tmp%4#1",
        "nt.1.1#0"
      ]
    },
    "1633": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "nt.1.1#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#2",
        "tmp%4#1",
        "nt.1.1#0",
        "3"
      ]
    },
    "1635": {
      "op": "==",
      "defined_out": [
        "tmp%4#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "a#2",
        "tmp%4#1",
        "tmp%6#1"
      ]
    },
    "1636": {
      "op": "dup2",
      "defined_out": [
        "tmp%4#1",
        "tmp%4#1 (copy)",
        "tmp%6#1",
        "tmp%6#1 (copy)"
      ],
      "stack_out": [
        "a#2",
        "tmp%4#1",
        "tmp%6#1",
        "tmp%4#1 (copy)",
        "tmp%6#1 (copy)"
      ]
    },
    "1637": {
      "op": "&&",
      "defined_out": [
        "tmp%4#1",
        "tmp%6#1",
        "tmp%7#1"
      ],
      "stack_out": [
        "a#2",
        "tmp%4#1",
        "tmp%6#1",
        "tmp%7#1"
      ]
    },
    "1638": {
      "op": "assert",
      "stack_out": [
        "a#2",
        "tmp%4#1",
        "tmp%6#1"
      ]
    },
    "1639": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "tmp%6#1",
        "tmp%4#1"
      ]
    },
    "1640": {
      "op": "assert",
      "stack_out": [
        "a#2",
        "tmp%6#1"
      ]
    },
    "1641": {
      "op": "assert",
      "stack_out": [
        "a#2"
      ]
    },
    "1642": {
      "op": "intc_1 // 1",
      "stack_out": [
        "a#2",
        "1"
      ]
    },
    "1643": {
      "op": "dup",
      "stack_out": [
        "a#2",
        "1",
        "1"
      ]
    },
    "1644": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "op": "callsub test_nested_singles",
      "stack_out": [
        "a#2"
      ]
    },
    "1647": {
      "op": "intc_1 // 1",
      "stack_out": [
        "a#2",
        "1"
      ]
    },
    "1648": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "1"
      ],
      "stack_out": [
        "a#2",
        "1",
        "0"
      ]
    },
    "1649": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "op": "callsub test_nested_singles",
      "stack_out": [
        "a#2"
      ]
    },
    "1652": {
      "op": "intc_0 // 0"
    },
    "1653": {
      "op": "intc_1 // 1"
    },
    "1654": {
      "op": "intc_2 // 2"
    },
    "1655": {
      "op": "intc_0 // 0",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0"
      ]
    },
    "1656": {
      "block": "run_tests_for_body@12",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "1658": {
      "op": "uncover 2",
      "defined_out": [
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "1660": {
      "op": "+",
      "defined_out": [
        "t.0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "tmp%0#3"
      ]
    },
    "1661": {
      "op": "frame_dig 1",
      "defined_out": [
        "t.0#0",
        "tmp%0#3",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "tmp%0#3",
        "total#0"
      ]
    },
    "1663": {
      "op": "+",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "total#0"
      ]
    },
    "1664": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "1666": {
      "op": "switch run_tests_for_header_1@13 run_tests_for_header_2@14 run_tests_for_header_3@15",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0"
      ]
    },
    "1674": {
      "op": "intc_0 // 0"
    },
    "1675": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#2",
        "loop_counter%1#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "a#2"
      ]
    },
    "1676": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#2",
        "loop_counter%1#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "1678": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "b#2"
      ]
    },
    "1679": {
      "op": "swap",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "b#2",
        "loop_counter%1#0"
      ]
    },
    "1680": {
      "block": "run_tests_for_body@17",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0",
        "b#2",
        "loop_counter%1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#2"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "b#2",
        "loop_counter%1#0",
        "a#2"
      ]
    },
    "1682": {
      "op": "uncover 2",
      "defined_out": [
        "a#2",
        "b#2"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "a#2",
        "b#2"
      ]
    },
    "1684": {
      "op": "+",
      "defined_out": [
        "a#2",
        "tmp%2#4"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "tmp%2#4"
      ]
    },
    "1685": {
      "op": "frame_dig 1",
      "defined_out": [
        "a#2",
        "tmp%2#4",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "tmp%2#4",
        "total#0"
      ]
    },
    "1687": {
      "op": "+",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "total#0"
      ]
    },
    "1688": {
      "op": "frame_bury 1",
      "defined_out": [
        "a#2",
        "loop_counter%1#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "1690": {
      "op": "switch run_tests_for_header_1@18 run_tests_for_header_2@19 run_tests_for_header_3@20",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0"
      ]
    },
    "1698": {
      "op": "frame_dig 1",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "total#0"
      ]
    },
    "1700": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "a#2",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "total#0",
        "8"
      ]
    },
    "1701": {
      "op": "/",
      "defined_out": [
        "a#2",
        "tmp%4#3",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "tmp%4#3"
      ]
    },
    "1702": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "a#2",
        "tmp%4#3",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "tmp%4#3",
        "3"
      ]
    },
    "1704": {
      "op": "==",
      "defined_out": [
        "a#2",
        "tmp%5#3",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "tmp%5#3"
      ]
    },
    "1705": {
      "op": "assert",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0"
      ]
    },
    "1706": {
      "op": "bytec 6 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\"",
        "a#2",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "\"build_nested_call_count\""
      ]
    },
    "1708": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"build_nested_call_count\"",
        "1",
        "a#2",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "\"build_nested_call_count\"",
        "1"
      ]
    },
    "1709": {
      "op": "app_global_put",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0"
      ]
    },
    "1710": {
      "op": "intc_1 // 1",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "1"
      ]
    },
    "1711": {
      "op": "frame_bury 0"
    },
    "1713": {
      "retsub": true,
      "op": "retsub"
    },
    "1714": {
      "block": "run_tests_for_header_3@20",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3"
    },
    "1716": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "a#2"
      ]
    },
    "1717": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "1719": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "b#2"
      ]
    },
    "1720": {
      "op": "swap",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "b#2",
        "loop_counter%1#0"
      ]
    },
    "1721": {
      "op": "b run_tests_for_body@17"
    },
    "1724": {
      "block": "run_tests_for_header_2@19",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0"
      ],
      "op": "intc_2 // 2"
    },
    "1725": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "a#2"
      ]
    },
    "1726": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "1728": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "b#2"
      ]
    },
    "1729": {
      "op": "swap",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "b#2",
        "loop_counter%1#0"
      ]
    },
    "1730": {
      "op": "b run_tests_for_body@17"
    },
    "1733": {
      "block": "run_tests_for_header_1@18",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0"
      ],
      "op": "intc_1 // 1"
    },
    "1734": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "a#2"
      ]
    },
    "1735": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "1737": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "b#2"
      ]
    },
    "1738": {
      "op": "swap",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "b#2",
        "loop_counter%1#0"
      ]
    },
    "1739": {
      "op": "b run_tests_for_body@17"
    },
    "1742": {
      "block": "run_tests_for_header_3@15",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3"
    },
    "1744": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "1745": {
      "op": "frame_bury 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "1747": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.1#0"
      ]
    },
    "1748": {
      "op": "swap",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0"
      ]
    },
    "1749": {
      "op": "b run_tests_for_body@12"
    },
    "1752": {
      "block": "run_tests_for_header_2@14",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0"
      ],
      "op": "intc_2 // 2"
    },
    "1753": {
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "1754": {
      "op": "frame_bury 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "1756": {
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.1#0"
      ]
    },
    "1757": {
      "op": "swap",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0"
      ]
    },
    "1758": {
      "op": "b run_tests_for_body@12"
    },
    "1761": {
      "block": "run_tests_for_header_1@13",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0"
      ],
      "op": "intc_1 // 1"
    },
    "1762": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "1763": {
      "op": "frame_bury 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "1765": {
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.1#0"
      ]
    },
    "1766": {
      "op": "swap",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0"
      ]
    },
    "1767": {
      "op": "b run_tests_for_body@12"
    }
  }
}