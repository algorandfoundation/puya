{
  "version": 3,
  "sources": [
    "../nested_tuples.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDQ;AAA+B;AAA/B;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAJR;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAqIQ;;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;AAAP;AAGJ;;;AAEQ;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;;AAAA;;AAAA;AAGJ;;;AAEQ;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;;AAAA;AAqDJ;;;AAGS;AAEA;AAIE;;AAAW;AAAX;AAAP;AAKJ;;AAAA;;;;;AAMuB;;AAAA;;AAAA;AAAZ;;AAAA;AAAP;AAEe;AAAA;;AAAA;;AAAA;AAAR;;AAAA;;AAAA;AAAP;AAIA;;AAAA;;AAAA;AACO;AAAP;AACmB;AAAA;;AAAA;;AAAA;AAAZ;AAAP;;AAZS;;AADL;;AAEK;;;;AAFL;;;;;AAvMA;;AAFH;;;AAEG;AAFH;AAAA;AAMU;AAAA;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAE0C;AAAR;AAA/B;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAFH;AAAA;AAMiB;AAFjB;;;AAEU;AAAA;AAAA;;AAFV;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMU;AAFV;;;AAEU;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAMyB;AAFzB;;;AAEyB;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEyB;;AAAA;;;;AAKf;AAFV;;;AAEU;AAAqC;;AAAW;AAAtB;;;AAAA;;AAAA;AAA1B;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAIA;;;AAAA;;;AAEqC;;;AACjB;;;AAA+C;;AAAW;AAAtB;;;AAAA;;AAAA;;AAA9C;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAiBY;AAAA;AAAO;;AAAP;AAAjB;;;AACmB;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AADK;AAAA;AAAA;;;;;AAZZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAqBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AACP;AAAY;;;;;;;;;;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AACW;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAX;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJH;AAAA;;;AAsBmB;AAAW;AA8Ed;AAGV;AAAA;AAAA;AAAa;;AAAb;AAAA;AAAA;AAAP;AACA;AAAA;AACA;AAjFwB;AAAoB;AAAxC;;;AACoB;AAAoB;AAAxC;;;AA4JI;AAFJ;AACA;;AAKS;;AAAA;;AAAA;AAAT;;AAAA;AAAA;;AAFR;;;;;;;;;AAJQ;AAQA;;AAPA;AAOA;AACS;;AAAA;;AAAA;AAAT;;AAAA;AAAA;;AADR;;;;;;;;AAGW;;AAAS;AAAT;AAAc;;AAAd;AAAP;AAxII;AAAgC;AAAhC;AAhDH;;;;;;;AAAA;AAAA;AAAA;;;AA8KG;AAOA;;AAPA;AAOA;;;;;AARA;AAQA;;AARA;AAQA;;;;;AAPA;AAOA;;AARA;AAQA;;;;;;AAPA;AAGA;;AAHA;AAGA;;;;;AAJA;AAIA;;AAJA;AAIA;;;;;AAHA;AAGA;;AAJA;AAIA;;;;AApJH;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;;;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 8"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"box\" \"twm\" \"build_nested_call_count\" \"pwl\" 0x0004"
    },
    "53": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "55": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "58": {
      "op": "bytec_3 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\""
      ],
      "stack_out": [
        "\"build_nested_call_count\""
      ]
    },
    "59": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "\"build_nested_call_count\"",
        "0"
      ]
    },
    "60": {
      "op": "app_global_put",
      "stack_out": []
    },
    "61": {
      "op": "bytec_2 // \"twm\"",
      "defined_out": [
        "\"twm\""
      ],
      "stack_out": [
        "\"twm\""
      ]
    },
    "62": {
      "op": "pushbytes 0x0004000600000000000000000000000c000e00000000",
      "defined_out": [
        "\"twm\"",
        "0x0004000600000000000000000000000c000e00000000"
      ],
      "stack_out": [
        "\"twm\"",
        "0x0004000600000000000000000000000c000e00000000"
      ]
    },
    "86": {
      "op": "app_global_put",
      "stack_out": []
    },
    "87": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "89": {
      "op": "bz main___algopy_default_create@23",
      "stack_out": []
    },
    "92": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "94": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "95": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "96": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "98": {
      "op": "assert",
      "stack_out": []
    },
    "99": {
      "op": "pushbytess 0x383e1e8b 0x68cbedd7 0x2263fcf1 0xbfc37339 0xc660beaa 0xb6c215ff 0x907c9042 0xd51c7174 0xf8cc2b50 0x3d486db0 0x9e5a3ba7 0xcea0521b 0x373f5b24 0xec593096 // method \"store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void\", method \"load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])\", method \"store_tuple_in_box((uint64,uint64))void\", method \"is_tuple_in_box((uint64,uint64))bool\", method \"load_tuple_from_box((uint64,uint64))(uint64,uint64)\", method \"maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)\", method \"load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)\", method \"load_tuple_from_local_state_or_default(string)(uint64,uint64)\", method \"mutate_local_tuple()(uint64[],(uint64,byte[],string))\", method \"mutate_tuple_in_storage_currently_supported_method()void\", method \"run_tests()bool\", method \"nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))\", method \"named_tuple((uint64,byte[],string))(uint64,byte[],string)\", method \"nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)"
      ],
      "stack_out": [
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))"
      ]
    },
    "171": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))",
        "Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))",
        "Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))",
        "Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))",
        "Method(mutate_tuple_in_storage_currently_supported_method()void)",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "tmp%6#0"
      ]
    },
    "174": {
      "op": "match store_tuple load_tuple store_tuple_in_box is_tuple_in_box load_tuple_from_box maybe_load_tuple_from_box load_tuple_from_box_or_default load_tuple_from_local_state_or_default mutate_local_tuple mutate_tuple_in_storage_currently_supported_method run_tests nested_tuple_params named_tuple nested_named_tuple_params",
      "stack_out": []
    },
    "204": {
      "op": "err"
    },
    "205": {
      "block": "main___algopy_default_create@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "207": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "208": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "210": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "211": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "212": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "213": {
      "subroutine": "test_cases.tuple_support.nested_tuples.get_sender_inefficiently",
      "params": {},
      "block": "get_sender_inefficiently",
      "stack_in": [],
      "op": "pushbytes \"Order is important\"",
      "defined_out": [
        "\"Order is important\""
      ],
      "stack_out": [
        "\"Order is important\""
      ]
    },
    "233": {
      "op": "log",
      "stack_out": []
    },
    "234": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "236": {
      "retsub": true,
      "op": "retsub"
    },
    "237": {
      "subroutine": "test_cases.tuple_support.nested_tuples.simple_tup",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "simple_tup",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "240": {
      "op": "pushbytes \"I'm just a simple tup\"",
      "defined_out": [
        "\"I'm just a simple tup\""
      ],
      "stack_out": [
        "\"I'm just a simple tup\""
      ]
    },
    "263": {
      "op": "log",
      "stack_out": []
    },
    "264": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "266": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "268": {
      "retsub": true,
      "op": "retsub"
    },
    "269": {
      "subroutine": "test_cases.tuple_support.nested_tuples.echo",
      "params": {
        "s#0": "bytes"
      },
      "block": "echo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "272": {
      "op": "pushbytes \"Is there an echo in here?\"",
      "defined_out": [
        "\"Is there an echo in here?\""
      ],
      "stack_out": [
        "\"Is there an echo in here?\""
      ]
    },
    "299": {
      "op": "log",
      "stack_out": []
    },
    "300": {
      "op": "frame_dig -1",
      "defined_out": [
        "s#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)"
      ]
    },
    "302": {
      "retsub": true,
      "op": "retsub"
    },
    "303": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "params": {
        "one#0": "uint64",
        "reassign#0": "uint64"
      },
      "block": "test_nested_singles",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "306": {
      "op": "intc_1 // 0"
    },
    "307": {
      "op": "intc_2 // 2"
    },
    "308": {
      "op": "frame_dig -2"
    },
    "310": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "one#0 (copy)",
        "s.0.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "one#0 (copy)",
        "1"
      ]
    },
    "311": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "tmp%2#0"
      ]
    },
    "312": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0"
      ]
    },
    "313": {
      "op": "frame_dig -1",
      "defined_out": [
        "reassign#0 (copy)",
        "s.0.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "reassign#0 (copy)"
      ]
    },
    "315": {
      "op": "bnz test_nested_singles_if_body@1",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0"
      ]
    },
    "318": {
      "op": "frame_dig -2",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1"
      ]
    },
    "320": {
      "block": "test_nested_singles_after_if_else@2",
      "stack_in": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "reassign#0 (copy)"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "reassign#0 (copy)"
      ]
    },
    "322": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "reassign#0 (copy)"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "reassign#0 (copy)",
        "3"
      ]
    },
    "324": {
      "op": "*",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%0#0"
      ]
    },
    "325": {
      "op": "frame_dig 0",
      "defined_out": [
        "s.0.0#0",
        "select%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%0#0",
        "s.0.0#0"
      ]
    },
    "327": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "tmp%6#0"
      ]
    },
    "328": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1"
      ]
    },
    "329": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "2"
      ]
    },
    "330": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "2",
        "5",
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "2",
        "5"
      ]
    },
    "332": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "2",
        "5",
        "reassign#0 (copy)"
      ]
    },
    "334": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "select%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0"
      ]
    },
    "335": {
      "op": "frame_dig 1",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "select%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0",
        "s.2.0#0"
      ]
    },
    "337": {
      "op": "dig 1",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "select%1#0",
        "select%1#0 (copy)"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0",
        "s.2.0#0",
        "select%1#0 (copy)"
      ]
    },
    "339": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "select%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0",
        "tmp%7#0"
      ]
    },
    "340": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0"
      ]
    },
    "341": {
      "op": "dig 1",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.1.0#1 (copy)",
        "s.2.0#0",
        "select%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0",
        "s.1.0#1 (copy)"
      ]
    },
    "343": {
      "op": "frame_dig -2",
      "defined_out": [
        "one#0 (copy)",
        "s.0.0#0",
        "s.1.0#1",
        "s.1.0#1 (copy)",
        "s.2.0#0",
        "select%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0",
        "s.1.0#1 (copy)",
        "one#0 (copy)"
      ]
    },
    "345": {
      "op": "+",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0",
        "s1#1",
        "select%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%1#0",
        "s1#1"
      ]
    },
    "346": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "tmp%10#0"
      ]
    },
    "347": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1"
      ]
    },
    "348": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "1"
      ]
    },
    "349": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "1",
        "4",
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "1",
        "4"
      ]
    },
    "351": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "1",
        "4",
        "reassign#0 (copy)"
      ]
    },
    "353": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0",
        "select%3#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "select%3#0"
      ]
    },
    "354": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.2.0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "tmp%11#0"
      ]
    },
    "355": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0"
      ]
    },
    "356": {
      "retsub": true,
      "op": "retsub"
    },
    "357": {
      "block": "test_nested_singles_if_body@1",
      "stack_in": [
        "s.0.0#0",
        "s.2.0#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.0.0#0"
      ]
    },
    "359": {
      "op": "frame_bury 0",
      "defined_out": [
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0"
      ]
    },
    "361": {
      "op": "pushints 4 5 // 4, 5",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1",
        "s.2.0#0"
      ]
    },
    "365": {
      "op": "frame_bury 1",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#1",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.2.0#0",
        "s.1.0#1"
      ]
    },
    "367": {
      "op": "b test_nested_singles_after_if_else@2"
    },
    "370": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple[routing]",
      "params": {},
      "block": "store_tuple",
      "stack_in": [],
      "op": "bytec 4 // \"pwl\"",
      "defined_out": [
        "\"pwl\""
      ],
      "stack_out": [
        "\"pwl\""
      ]
    },
    "372": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"pwl\"",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ],
      "stack_out": [
        "\"pwl\"",
        "reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0"
      ]
    },
    "375": {
      "op": "app_global_put",
      "stack_out": []
    },
    "376": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "377": {
      "op": "return",
      "stack_out": []
    },
    "378": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple[routing]",
      "params": {},
      "block": "load_tuple",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "379": {
      "op": "bytec 4 // \"pwl\"",
      "defined_out": [
        "\"pwl\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pwl\""
      ]
    },
    "381": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "382": {
      "error": "check self.pwl exists",
      "op": "assert // check self.pwl exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "383": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x151f7c75"
      ]
    },
    "384": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%0#0"
      ]
    },
    "385": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "386": {
      "op": "log",
      "stack_out": []
    },
    "387": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "388": {
      "op": "return",
      "stack_out": []
    },
    "389": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box[routing]",
      "params": {},
      "block": "store_tuple_in_box",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "392": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "393": {
      "op": "extract 0 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "396": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "398": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%extract%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)",
        "8"
      ]
    },
    "399": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%0#0",
        "key.b#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0",
        "key.b#0"
      ]
    },
    "400": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%0#0",
        "key.b#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0",
        "key.b#0",
        "1"
      ]
    },
    "401": {
      "op": "+",
      "defined_out": [
        "aggregate%extract%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0",
        "tmp%0#1"
      ]
    },
    "402": {
      "op": "bytec_1 // \"box\"",
      "defined_out": [
        "\"box\"",
        "aggregate%extract%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0",
        "tmp%0#1",
        "\"box\""
      ]
    },
    "403": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%extract%0#0",
        "tmp%0#1",
        "\"box\"",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "405": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "tmp%0#1",
        "box_prefixed_key%0#0"
      ]
    },
    "406": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0",
        "tmp%0#1"
      ]
    },
    "407": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%val_as_bytes%1#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "408": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%extract%0#0"
      ]
    },
    "410": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%extract%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "411": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%head%1#0"
      ]
    },
    "412": {
      "op": "box_put",
      "stack_out": []
    },
    "413": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "414": {
      "op": "return",
      "stack_out": []
    },
    "415": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box[routing]",
      "params": {},
      "block": "is_tuple_in_box",
      "stack_in": [],
      "op": "bytec_1 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "416": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"box\"",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "\"box\"",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "419": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "420": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "421": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "423": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "426": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "427": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "429": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "430": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "431": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "432": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "433": {
      "op": "log",
      "stack_out": []
    },
    "434": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "435": {
      "op": "return",
      "stack_out": []
    },
    "436": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box[routing]",
      "params": {},
      "block": "load_tuple_from_box",
      "stack_in": [],
      "op": "bytec_1 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "437": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"box\"",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "\"box\"",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "440": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "441": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "442": {
      "error": "check self.box entry exists",
      "op": "assert // check self.box entry exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "443": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "0x151f7c75"
      ]
    },
    "444": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ]
    },
    "445": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "446": {
      "op": "log",
      "stack_out": []
    },
    "447": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "448": {
      "op": "return",
      "stack_out": []
    },
    "449": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box[routing]",
      "params": {},
      "block": "maybe_load_tuple_from_box",
      "stack_in": [],
      "op": "bytec_1 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "450": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"box\"",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "\"box\"",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "453": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "454": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "455": {
      "op": "dup",
      "stack_out": [
        "maybe_value%0#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "456": {
      "op": "uncover 2",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "458": {
      "op": "swap",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "459": {
      "op": "bz maybe_load_tuple_from_box_ternary_false@3",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "462": {
      "op": "dupn 2",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "464": {
      "op": "intc_1 // 0",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "465": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%0#0",
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "466": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ]
    },
    "467": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%0#0",
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "468": {
      "op": "extract_uint64",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ]
    },
    "469": {
      "block": "maybe_load_tuple_from_box_ternary_merge@4",
      "stack_in": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ],
      "op": "swap",
      "defined_out": [
        "maybe_value.a#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value.b#0",
        "maybe_value.a#0"
      ]
    },
    "470": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value.b#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "471": {
      "op": "swap",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "maybe_value.b#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value.b#0"
      ]
    },
    "472": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "473": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "474": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%head%1#0",
        "0x00"
      ]
    },
    "477": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%head%1#0",
        "0x00",
        "0"
      ]
    },
    "478": {
      "op": "dig 4",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%head%1#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%head%1#0",
        "0x00",
        "0",
        "exists#0"
      ]
    },
    "480": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%head%1#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "481": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%head%3#0"
      ]
    },
    "482": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%3#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "aggregate%head%3#0",
        "0x151f7c75"
      ]
    },
    "483": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "0x151f7c75",
        "aggregate%head%3#0"
      ]
    },
    "484": {
      "op": "concat",
      "defined_out": [
        "exists#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ]
    },
    "485": {
      "op": "log",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "486": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "487": {
      "op": "return",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "488": {
      "block": "maybe_load_tuple_from_box_ternary_false@3",
      "stack_in": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "op": "pushbytes \"\""
    },
    "490": {
      "op": "dup",
      "defined_out": [
        "maybe_value.a#0",
        "maybe_value.b#0"
      ],
      "stack_out": [
        "exists#0",
        "maybe_value%0#0",
        "maybe_value.a#0",
        "maybe_value.b#0"
      ]
    },
    "491": {
      "op": "b maybe_load_tuple_from_box_ternary_merge@4"
    },
    "494": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default[routing]",
      "params": {},
      "block": "load_tuple_from_box_or_default",
      "stack_in": [],
      "op": "bytec_1 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "495": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"box\"",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "\"box\"",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "498": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "499": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "4"
      ]
    },
    "501": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "4",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "4",
        "2"
      ]
    },
    "502": {
      "callsub": "test_cases.tuple_support.nested_tuples.simple_tup",
      "op": "callsub simple_tup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "505": {
      "op": "cover 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "box_prefixed_key%0#0",
        "tmp%0#1"
      ]
    },
    "507": {
      "op": "swap",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "box_prefixed_key%0#0"
      ]
    },
    "508": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "509": {
      "op": "bz load_tuple_from_box_or_default_ternary_false@3",
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "512": {
      "op": "dupn 2",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "514": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "515": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "516": {
      "op": "swap",
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ]
    },
    "517": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "518": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ]
    },
    "519": {
      "block": "load_tuple_from_box_or_default_ternary_merge@4",
      "stack_in": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0.a#2"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "ternary_result%0.b#2",
        "ternary_result%0.a#2"
      ]
    },
    "520": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "ternary_result%0.b#2",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "521": {
      "op": "swap",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "ternary_result%0.b#2"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "aggregate%val_as_bytes%0#0",
        "ternary_result%0.b#2"
      ]
    },
    "522": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "523": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "524": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "aggregate%head%1#0",
        "0x151f7c75"
      ]
    },
    "525": {
      "op": "swap",
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "0x151f7c75",
        "aggregate%head%1#0"
      ]
    },
    "526": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "tmp%5#0"
      ]
    },
    "527": {
      "op": "log",
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "528": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "1"
      ]
    },
    "529": {
      "op": "return",
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "530": {
      "block": "load_tuple_from_box_or_default_ternary_false@3",
      "stack_in": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "ternary_result%0.a#2"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "ternary_result%0.a#2"
      ]
    },
    "532": {
      "op": "dig 3",
      "defined_out": [
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%0#1",
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ]
    },
    "534": {
      "op": "b load_tuple_from_box_or_default_ternary_merge@4"
    },
    "537": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default[routing]",
      "params": {},
      "block": "load_tuple_from_local_state_or_default",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "540": {
      "op": "extract 2 0",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "543": {
      "callsub": "test_cases.tuple_support.nested_tuples.echo",
      "op": "callsub echo",
      "defined_out": [
        "local#0"
      ],
      "stack_out": [
        "local#0"
      ]
    },
    "546": {
      "callsub": "test_cases.tuple_support.nested_tuples.get_sender_inefficiently",
      "op": "callsub get_sender_inefficiently",
      "defined_out": [
        "local#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "local#0",
        "tmp%1#1"
      ]
    },
    "549": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "local#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "local#0",
        "tmp%1#1",
        "4"
      ]
    },
    "551": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "4",
        "local#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "local#0",
        "tmp%1#1",
        "4",
        "2"
      ]
    },
    "552": {
      "callsub": "test_cases.tuple_support.nested_tuples.simple_tup",
      "op": "callsub simple_tup",
      "defined_out": [
        "local#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "local#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ]
    },
    "555": {
      "op": "cover 3",
      "defined_out": [
        "local#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "local#0",
        "tmp%1#1",
        "tmp%2#1"
      ]
    },
    "557": {
      "op": "cover 2",
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "local#0",
        "tmp%1#1"
      ]
    },
    "559": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "local#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "local#0",
        "tmp%1#1",
        "0"
      ]
    },
    "560": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "tmp%1#1",
        "0",
        "local#0"
      ]
    },
    "562": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "563": {
      "op": "bz load_tuple_from_local_state_or_default_ternary_false@3",
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0"
      ]
    },
    "566": {
      "op": "dupn 2",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "568": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "569": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "570": {
      "op": "swap",
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0"
      ]
    },
    "571": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "aggregate%item0%0#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "572": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2",
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ]
    },
    "573": {
      "block": "load_tuple_from_local_state_or_default_ternary_merge@4",
      "stack_in": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0.a#2"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "ternary_result%0.b#2",
        "ternary_result%0.a#2"
      ]
    },
    "574": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "ternary_result%0.b#2",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "575": {
      "op": "swap",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "ternary_result%0.b#2"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "aggregate%val_as_bytes%0#0",
        "ternary_result%0.b#2"
      ]
    },
    "576": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "577": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "578": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "aggregate%head%1#0",
        "0x151f7c75"
      ]
    },
    "579": {
      "op": "swap",
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "0x151f7c75",
        "aggregate%head%1#0"
      ]
    },
    "580": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "tmp%4#0"
      ]
    },
    "581": {
      "op": "log",
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0"
      ]
    },
    "582": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "1"
      ]
    },
    "583": {
      "op": "return",
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0"
      ]
    },
    "584": {
      "block": "load_tuple_from_local_state_or_default_ternary_false@3",
      "stack_in": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "ternary_result%0.a#2"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "ternary_result%0.a#2"
      ]
    },
    "586": {
      "op": "dig 3",
      "defined_out": [
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ],
      "stack_out": [
        "tmp%3#1",
        "tmp%2#1",
        "maybe_value%0#0",
        "ternary_result%0.a#2",
        "ternary_result%0.b#2"
      ]
    },
    "588": {
      "op": "b load_tuple_from_local_state_or_default_ternary_merge@4"
    },
    "591": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple[routing]",
      "params": {},
      "block": "mutate_local_tuple",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "592": {
      "block": "mutate_local_tuple_for_header@2",
      "stack_in": [
        "i#0"
      ],
      "op": "dup",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "593": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "3"
      ]
    },
    "595": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "596": {
      "op": "bz mutate_local_tuple_after_for@5",
      "stack_out": [
        "i#0"
      ]
    },
    "599": {
      "op": "dupn 2",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "601": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "i#0 (copy)",
        "8"
      ]
    },
    "602": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "603": {
      "op": "pushbytes 0x000000000000000000000000000000010000000000000002",
      "defined_out": [
        "0x000000000000000000000000000000010000000000000002",
        "aggregate%bytes_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%bytes_offset%0#0",
        "0x000000000000000000000000000000010000000000000002"
      ]
    },
    "629": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "i#0",
        "0x000000000000000000000000000000010000000000000002",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "630": {
      "op": "intc_3 // 8",
      "stack_out": [
        "i#0",
        "i#0",
        "0x000000000000000000000000000000010000000000000002",
        "aggregate%bytes_offset%0#0",
        "8"
      ]
    },
    "631": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "632": {
      "op": "dig 1",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0",
        "i#0 (copy)"
      ]
    },
    "634": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%encoded_element%0#0",
        "tmp%2#1"
      ]
    },
    "635": {
      "op": "b==",
      "defined_out": [
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "tmp%3#1"
      ]
    },
    "636": {
      "op": "assert",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "637": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "1"
      ]
    },
    "638": {
      "op": "+",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "639": {
      "op": "bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "641": {
      "op": "b mutate_local_tuple_for_header@2"
    },
    "644": {
      "block": "mutate_local_tuple_after_for@5",
      "stack_in": [
        "i#0"
      ],
      "op": "pushbytes 0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000",
      "defined_out": [
        "0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000"
      ],
      "stack_out": [
        "i#0",
        "0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000"
      ]
    },
    "696": {
      "op": "log",
      "stack_out": [
        "i#0"
      ]
    },
    "697": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "i#0",
        "1"
      ]
    },
    "698": {
      "op": "return",
      "stack_out": [
        "i#0"
      ]
    },
    "699": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method[routing]",
      "params": {},
      "block": "mutate_tuple_in_storage_currently_supported_method",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "700": {
      "op": "bytec_2 // \"twm\"",
      "defined_out": [
        "\"twm\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"twm\""
      ]
    },
    "701": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "702": {
      "error": "check self.twm exists",
      "op": "assert // check self.twm exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "703": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "704": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "705": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "706": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "708": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "709": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "710": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "712": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "714": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "716": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0"
      ]
    },
    "717": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "arr2#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "arr2#0 (copy)"
      ]
    },
    "718": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "arr2#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "arr2#0 (copy)",
        "0x0000000000000001"
      ]
    },
    "728": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "concat%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "concat%0#0"
      ]
    },
    "729": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "arr2#0"
      ]
    },
    "730": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "arr2#0",
        "0"
      ]
    },
    "731": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "732": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "733": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "734": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "as_bytes%0#0",
        "concat%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "735": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "738": {
      "op": "replace2 0",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0"
      ]
    },
    "740": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "742": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%2#0",
        "arr2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "aggregate%len%2#0"
      ]
    },
    "743": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%extract_uint16%1#0",
        "arr2#0",
        "aggregate%len%2#0",
        "maybe_value%0#0"
      ]
    },
    "745": {
      "op": "uncover 3",
      "stack_out": [
        "arr2#0",
        "aggregate%len%2#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "747": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%2#0"
      ]
    },
    "749": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0"
      ]
    },
    "750": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "751": {
      "op": "extract 0 8",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0"
      ]
    },
    "754": {
      "op": "dig 1",
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "756": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%extract%1#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%5#0 (copy)",
        "8"
      ]
    },
    "757": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "758": {
      "op": "dig 2",
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "760": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0 (copy)",
        "10"
      ]
    },
    "762": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "763": {
      "op": "dig 3",
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "765": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "767": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%10#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0 (copy)"
      ]
    },
    "769": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%6#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%6#0"
      ]
    },
    "770": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%item1%1#0"
      ]
    },
    "773": {
      "op": "dig 3",
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "775": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%item1%1#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%substring3%5#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%item1%1#0",
        "aggregate%len%3#0"
      ]
    },
    "776": {
      "op": "uncover 4",
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%item1%1#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0"
      ]
    },
    "778": {
      "op": "uncover 3",
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "780": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%len%3#0"
      ]
    },
    "782": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%7#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%substring3%7#0"
      ]
    },
    "783": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0"
      ]
    },
    "786": {
      "op": "dig 3",
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "arr2#0 (copy)"
      ]
    },
    "788": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%data_length%0#0"
      ]
    },
    "789": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%data_length%0#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%data_length%0#0",
        "4"
      ]
    },
    "791": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "792": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item1%1#0 (copy)",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%item1%1#0 (copy)"
      ]
    },
    "794": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%length%0#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%0#0"
      ]
    },
    "795": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "796": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%length_uint16%0#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "799": {
      "op": "uncover 3",
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%0#0",
        "aggregate%item1%1#0"
      ]
    },
    "801": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%extract%1#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "802": {
      "op": "uncover 3",
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "804": {
      "op": "pushbytes 0x000c",
      "defined_out": [
        "0x000c",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%extract%1#0",
        "0x000c"
      ]
    },
    "808": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0"
      ]
    },
    "809": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%0#0 (copy)"
      ]
    },
    "811": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%data_length%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%data_length%1#0"
      ]
    },
    "812": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%current_tail_offset%0#0",
        "aggregate%data_length%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%data_length%1#0",
        "12"
      ]
    },
    "814": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "815": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "aggregate%item2%1#0 (copy)",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%item2%1#0 (copy)"
      ]
    },
    "817": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "aggregate%length%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length%1#0"
      ]
    },
    "818": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "819": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%item2%1#0",
        "aggregate%length_uint16%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%item2%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "822": {
      "op": "uncover 5",
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%length_uint16%1#0",
        "aggregate%item2%1#0"
      ]
    },
    "824": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%current_tail_offset%1#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "825": {
      "op": "swap",
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%1#0",
        "aggregate%current_tail_offset%1#0"
      ]
    },
    "826": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%1#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "827": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%2#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "830": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%3#0"
      ]
    },
    "832": {
      "op": "swap",
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "833": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%4#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%4#0"
      ]
    },
    "834": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%4#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "836": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%concat%0#0"
      ]
    },
    "837": {
      "op": "swap",
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%concat%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "838": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%0#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%concat%1#0"
      ]
    },
    "839": {
      "op": "swap",
      "stack_out": [
        "arr2#0",
        "aggregate%concat%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "840": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#0",
        "aggregate%concat%1#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%concat%1#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "841": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%offset_as_uint16%3#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%concat%1#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "844": {
      "op": "bytec 5 // 0x0004",
      "defined_out": [
        "0x0004",
        "aggregate%concat%1#0",
        "aggregate%offset_as_uint16%3#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%concat%1#0",
        "aggregate%offset_as_uint16%3#0",
        "0x0004"
      ]
    },
    "846": {
      "op": "swap",
      "stack_out": [
        "arr2#0",
        "aggregate%concat%1#0",
        "0x0004",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "847": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%head%5#0",
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "aggregate%concat%1#0",
        "aggregate%head%5#0"
      ]
    },
    "848": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%head%5#0",
        "arr2#0"
      ]
    },
    "850": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%2#0"
      ]
    },
    "851": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%2#0",
        "aggregate%concat%1#0"
      ]
    },
    "852": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%3#0"
      ],
      "stack_out": [
        "aggregate%concat%3#0"
      ]
    },
    "853": {
      "op": "bytec_2 // \"twm\"",
      "stack_out": [
        "aggregate%concat%3#0",
        "\"twm\""
      ]
    },
    "854": {
      "op": "swap",
      "stack_out": [
        "\"twm\"",
        "aggregate%concat%3#0"
      ]
    },
    "855": {
      "op": "app_global_put",
      "stack_out": []
    },
    "856": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "857": {
      "op": "return",
      "stack_out": []
    },
    "858": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests[routing]",
      "params": {},
      "block": "run_tests",
      "stack_in": [],
      "op": "pushbytes \"\"",
      "stack_out": [
        "a#2"
      ]
    },
    "860": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "a#2",
        "1"
      ]
    },
    "861": {
      "op": "intc_2 // 2",
      "defined_out": [
        "1",
        "2"
      ],
      "stack_out": [
        "a#2",
        "1",
        "2"
      ]
    },
    "862": {
      "op": "addw",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "a#2",
        "nt.1.0#0",
        "nt.1.1#0"
      ]
    },
    "863": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "864": {
      "op": "!",
      "defined_out": [
        "nt.1.1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#2",
        "nt.1.1#0",
        "tmp%4#0"
      ]
    },
    "865": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "tmp%4#0",
        "nt.1.1#0"
      ]
    },
    "866": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "nt.1.1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#2",
        "tmp%4#0",
        "nt.1.1#0",
        "3"
      ]
    },
    "868": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#2",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "869": {
      "op": "dup2",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "a#2",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%4#0 (copy)",
        "tmp%6#0 (copy)"
      ]
    },
    "870": {
      "op": "&&",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a#2",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "871": {
      "op": "assert",
      "stack_out": [
        "a#2",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "872": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "tmp%6#0",
        "tmp%4#0"
      ]
    },
    "873": {
      "op": "assert",
      "stack_out": [
        "a#2",
        "tmp%6#0"
      ]
    },
    "874": {
      "op": "assert",
      "stack_out": [
        "a#2"
      ]
    },
    "875": {
      "op": "intc_0 // 1",
      "stack_out": [
        "a#2",
        "1"
      ]
    },
    "876": {
      "op": "dup",
      "stack_out": [
        "a#2",
        "1",
        "1"
      ]
    },
    "877": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "op": "callsub test_nested_singles",
      "stack_out": [
        "a#2"
      ]
    },
    "880": {
      "op": "intc_0 // 1",
      "stack_out": [
        "a#2",
        "1"
      ]
    },
    "881": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "1"
      ],
      "stack_out": [
        "a#2",
        "1",
        "0"
      ]
    },
    "882": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "op": "callsub test_nested_singles",
      "stack_out": [
        "a#2"
      ]
    },
    "885": {
      "op": "intc_1 // 0"
    },
    "886": {
      "op": "intc_0 // 1"
    },
    "887": {
      "op": "intc_2 // 2"
    },
    "888": {
      "op": "intc_1 // 0",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0"
      ]
    },
    "889": {
      "block": "run_tests_for_body@12",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "891": {
      "op": "uncover 2",
      "defined_out": [
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "893": {
      "op": "+",
      "defined_out": [
        "t.0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "tmp%0#3"
      ]
    },
    "894": {
      "op": "dig 3",
      "defined_out": [
        "t.0#0",
        "tmp%0#3",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "tmp%0#3",
        "total#0"
      ]
    },
    "896": {
      "op": "+",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "total#0"
      ]
    },
    "897": {
      "op": "bury 3",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "899": {
      "op": "switch run_tests_for_header_1@13 run_tests_for_header_2@14 run_tests_for_header_3@15",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0"
      ]
    },
    "907": {
      "op": "intc_1 // 0"
    },
    "908": {
      "op": "intc_0 // 1",
      "defined_out": [
        "a#2",
        "loop_counter%1#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "a#2"
      ]
    },
    "909": {
      "op": "bury 4",
      "defined_out": [
        "a#2",
        "loop_counter%1#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "911": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "b#2"
      ]
    },
    "912": {
      "op": "swap",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "b#2",
        "loop_counter%1#0"
      ]
    },
    "913": {
      "block": "run_tests_for_body@17",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0",
        "b#2",
        "loop_counter%1#0"
      ],
      "op": "dig 4",
      "defined_out": [
        "a#2"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "b#2",
        "loop_counter%1#0",
        "a#2"
      ]
    },
    "915": {
      "op": "uncover 2",
      "defined_out": [
        "a#2",
        "b#2"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "a#2",
        "b#2"
      ]
    },
    "917": {
      "op": "+",
      "defined_out": [
        "a#2",
        "tmp%2#3"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "tmp%2#3"
      ]
    },
    "918": {
      "op": "dig 3",
      "defined_out": [
        "a#2",
        "tmp%2#3",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "tmp%2#3",
        "total#0"
      ]
    },
    "920": {
      "op": "+",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "total#0"
      ]
    },
    "921": {
      "op": "bury 3",
      "defined_out": [
        "a#2",
        "loop_counter%1#0",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "923": {
      "op": "switch run_tests_for_header_1@18 run_tests_for_header_2@19 run_tests_for_header_3@20",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0"
      ]
    },
    "931": {
      "op": "dig 1",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "total#0"
      ]
    },
    "933": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "a#2",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "total#0",
        "8"
      ]
    },
    "934": {
      "op": "/",
      "defined_out": [
        "a#2",
        "tmp%4#1",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "tmp%4#1"
      ]
    },
    "935": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "a#2",
        "tmp%4#1",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "tmp%4#1",
        "3"
      ]
    },
    "937": {
      "op": "==",
      "defined_out": [
        "a#2",
        "tmp%5#1",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "tmp%5#1"
      ]
    },
    "938": {
      "op": "assert",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0"
      ]
    },
    "939": {
      "op": "bytec_3 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\"",
        "a#2",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "\"build_nested_call_count\""
      ]
    },
    "940": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"build_nested_call_count\"",
        "1",
        "a#2",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "\"build_nested_call_count\"",
        "1"
      ]
    },
    "941": {
      "op": "app_global_put",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0"
      ]
    },
    "942": {
      "op": "pushbytes 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580",
        "a#2",
        "total#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "0x151f7c7580"
      ]
    },
    "949": {
      "op": "log",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0"
      ]
    },
    "950": {
      "op": "intc_0 // 1",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "1"
      ]
    },
    "951": {
      "op": "return",
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0"
      ]
    },
    "952": {
      "block": "run_tests_for_header_3@20",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3"
    },
    "954": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "a#2"
      ]
    },
    "955": {
      "op": "bury 4",
      "defined_out": [
        "a#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "957": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "b#2"
      ]
    },
    "958": {
      "op": "swap",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "b#2",
        "loop_counter%1#0"
      ]
    },
    "959": {
      "op": "b run_tests_for_body@17"
    },
    "962": {
      "block": "run_tests_for_header_2@19",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0"
      ],
      "op": "intc_2 // 2"
    },
    "963": {
      "op": "intc_0 // 1",
      "defined_out": [
        "a#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "a#2"
      ]
    },
    "964": {
      "op": "bury 4",
      "defined_out": [
        "a#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "966": {
      "op": "intc_0 // 1",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "b#2"
      ]
    },
    "967": {
      "op": "swap",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "b#2",
        "loop_counter%1#0"
      ]
    },
    "968": {
      "op": "b run_tests_for_body@17"
    },
    "971": {
      "block": "run_tests_for_header_1@18",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0"
      ],
      "op": "intc_0 // 1"
    },
    "972": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "a#2"
      ]
    },
    "973": {
      "op": "bury 4",
      "defined_out": [
        "a#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "975": {
      "op": "intc_0 // 1",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%1#0",
        "b#2"
      ]
    },
    "976": {
      "op": "swap",
      "defined_out": [
        "a#2",
        "b#2",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "b#2",
        "loop_counter%1#0"
      ]
    },
    "977": {
      "op": "b run_tests_for_body@17"
    },
    "980": {
      "block": "run_tests_for_header_3@15",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3"
    },
    "982": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "983": {
      "op": "bury 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "985": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.1#0"
      ]
    },
    "986": {
      "op": "swap",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0"
      ]
    },
    "987": {
      "op": "b run_tests_for_body@12"
    },
    "990": {
      "block": "run_tests_for_header_2@14",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0"
      ],
      "op": "intc_2 // 2"
    },
    "991": {
      "op": "intc_0 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "992": {
      "op": "bury 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "994": {
      "op": "intc_0 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.1#0"
      ]
    },
    "995": {
      "op": "swap",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0"
      ]
    },
    "996": {
      "op": "b run_tests_for_body@12"
    },
    "999": {
      "block": "run_tests_for_header_1@13",
      "stack_in": [
        "a#2",
        "total#0",
        "t.0#0"
      ],
      "op": "intc_0 // 1"
    },
    "1000": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "1001": {
      "op": "bury 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "1003": {
      "op": "intc_0 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "loop_counter%0#0",
        "t.1#0"
      ]
    },
    "1004": {
      "op": "swap",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#2",
        "total#0",
        "t.0#0",
        "t.1#0",
        "loop_counter%0#0"
      ]
    },
    "1005": {
      "op": "b run_tests_for_body@12"
    },
    "1008": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params[routing]",
      "params": {},
      "block": "nested_tuple_params",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ]
    },
    "1011": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "1012": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "0"
      ]
    },
    "1013": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1014": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "1016": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "2"
      ]
    },
    "1017": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1018": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "1020": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1022": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "1024": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "1025": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "args.0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%1#0",
        "args.0#0"
      ]
    },
    "1028": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%1#0",
        "args.0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)"
      ]
    },
    "1030": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "args.0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%1#0",
        "args.0#0",
        "aggregate%len%0#0"
      ]
    },
    "1031": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%extract_uint16%1#0",
        "args.0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0"
      ]
    },
    "1033": {
      "op": "uncover 3",
      "stack_out": [
        "args.0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1035": {
      "op": "uncover 2",
      "stack_out": [
        "args.0#0",
        "reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0"
      ]
    },
    "1037": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%1#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%1#0"
      ]
    },
    "1038": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "1039": {
      "op": "intc_1 // 0",
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "0"
      ]
    },
    "1040": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "1041": {
      "op": "dig 1",
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "1043": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%len%1#0",
        "aggregate%substring3%1#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%1#0"
      ]
    },
    "1044": {
      "op": "dig 2",
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%1#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "1046": {
      "op": "cover 2",
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%len%1#0"
      ]
    },
    "1048": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%1#0",
        "aggregate%substring3%2#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%2#0"
      ]
    },
    "1049": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%substring3%1#0",
        "args.0#0",
        "args.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%substring3%1#0",
        "args.1.0#0"
      ]
    },
    "1052": {
      "op": "swap",
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "aggregate%substring3%1#0"
      ]
    },
    "1053": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "args.0#0",
        "args.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1056": {
      "op": "extract 0 8",
      "defined_out": [
        "aggregate%extract%1#0",
        "args.0#0",
        "args.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1059": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%1#0",
        "args.0#0",
        "args.1.0#0",
        "args.1.0#0 (copy)"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "aggregate%extract%1#0",
        "args.1.0#0 (copy)"
      ]
    },
    "1061": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%length%0#0",
        "args.0#0",
        "args.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "aggregate%extract%1#0",
        "aggregate%length%0#0"
      ]
    },
    "1062": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%extract%1#0",
        "args.0#0",
        "args.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "aggregate%extract%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1063": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%length_uint16%0#0",
        "args.0#0",
        "args.1.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1.0#0",
        "aggregate%extract%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1066": {
      "op": "uncover 2",
      "stack_out": [
        "args.0#0",
        "aggregate%extract%1#0",
        "aggregate%length_uint16%0#0",
        "args.1.0#0"
      ]
    },
    "1068": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%extract%1#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "1069": {
      "op": "dup",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)",
        "aggregate%extract%1#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)"
      ]
    },
    "1070": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%extract%1#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "1071": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%extract%1#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%data_length%0#0",
        "4"
      ]
    },
    "1073": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%extract%1#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1074": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%extract%1#0",
        "args.0#0",
        "args.0#0 (copy)"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "args.0#0 (copy)"
      ]
    },
    "1076": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%length%1#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "1077": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%extract%1#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "1078": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%extract%1#0",
        "aggregate%length_uint16%1#0",
        "args.0#0"
      ],
      "stack_out": [
        "args.0#0",
        "aggregate%extract%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "1081": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "args.0#0"
      ]
    },
    "1083": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "1084": {
      "op": "pushbytes 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "0x000a"
      ]
    },
    "1088": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "0x000a",
        "aggregate%extract%1#0"
      ]
    },
    "1090": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0"
      ]
    },
    "1091": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "1092": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "1093": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%concat%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1094": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0",
        "aggregate%concat%0#0",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%concat%0#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "1095": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%offset_as_uint16%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%concat%0#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "1098": {
      "op": "bytec 5 // 0x0004",
      "defined_out": [
        "0x0004",
        "aggregate%concat%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%offset_as_uint16%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%concat%0#0",
        "aggregate%offset_as_uint16%2#0",
        "0x0004"
      ]
    },
    "1100": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%concat%0#0",
        "0x0004",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "1101": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%concat%0#0",
        "aggregate%head%3#0"
      ]
    },
    "1102": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "1104": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%concat%1#0"
      ]
    },
    "1105": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%1#0",
        "aggregate%concat%0#0"
      ]
    },
    "1106": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0"
      ]
    },
    "1107": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0",
        "0x151f7c75"
      ]
    },
    "1108": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%2#0"
      ]
    },
    "1109": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1110": {
      "op": "log",
      "stack_out": []
    },
    "1111": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1112": {
      "op": "return",
      "stack_out": []
    },
    "1113": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple[routing]",
      "params": {},
      "block": "named_tuple",
      "stack_in": [],
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "0x151f7c75"
      ]
    },
    "1114": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "0x151f7c75",
        "reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0"
      ]
    },
    "1117": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1118": {
      "op": "log",
      "stack_out": []
    },
    "1119": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1120": {
      "op": "return",
      "stack_out": []
    },
    "1121": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params[routing]",
      "params": {},
      "block": "nested_named_tuple_params",
      "stack_in": [],
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "0x151f7c75"
      ]
    },
    "1122": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "0x151f7c75",
        "reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0"
      ]
    },
    "1125": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1126": {
      "op": "log",
      "stack_out": []
    },
    "1127": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1128": {
      "op": "return",
      "stack_out": []
    }
  }
}