#pragma version 10

test_cases.tuple_support.tuple_support.TupleSupport.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // tuple_support/tuple_support.py:9
    // total = add_three_values((UInt64(101), UInt64(102), UInt64(103)))
    int 101
    int 102
    int 103
    callsub add_three_values
    // tuple_support/tuple_support.py:10
    // log(total)
    itob
    log
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1
    int 2
    // tuple_support/tuple_support.py:12
    // (did_overflow, self.state) = op.addw(a, b)
    addw
    // tuple_support/tuple_support.py:6
    // self.state = UInt64(0)
    byte "state"
    // tuple_support/tuple_support.py:12
    // (did_overflow, self.state) = op.addw(a, b)
    dig 1
    app_global_put
    // tuple_support/tuple_support.py:13
    // assert not did_overflow, "overflow!"
    dig 1
    !
    assert // overflow!
    // tuple_support/tuple_support.py:29-31
    // # assert ab2 == ab # TODO: support ths
    // # foobar = ((a, b), (c, d)) # TODO: negative test for this
    // log(bytes_combine((Bytes(b"Hello, "), Bytes(b"world!"))))
    byte 0x48656c6c6f2c20
    byte 0x776f726c6421
    callsub bytes_combine
    log
    // tuple_support/tuple_support.py:32
    // max_uint64 = UInt64(2**64 - 1)
    int 18446744073709551615
    dup
    // tuple_support/tuple_support.py:33
    // hi, mid, lo = addw2(op.addw(max_uint64, max_uint64), op.addw(a, b))
    addw
    uncover 3
    uncover 3
    callsub addw2
    cover 2
    swap
    // tuple_support/tuple_support.py:34
    // log(hi)
    itob
    log
    // tuple_support/tuple_support.py:35
    // log(mid)
    itob
    log
    // tuple_support/tuple_support.py:36
    // log(lo)
    itob
    log
    // tuple_support/tuple_support.py:37
    // log(bytes_multiply((Bytes(b"na"), UInt64(5))))
    byte 0x6e61
    int 5
    callsub bytes_multiply
    log
    // tuple_support/tuple_support.py:38
    // test_tuple_swap(zero=UInt64(0))
    int 0
    callsub test_tuple_swap
    // tuple_support/tuple_support.py:41
    // UInt64(1),
    int 1
    // tuple_support/tuple_support.py:42
    // UInt64(2),
    int 2
    // tuple_support/tuple_support.py:43
    // UInt64(3),
    int 3
    // tuple_support/tuple_support.py:44
    // UInt64(4),
    int 4
    // tuple_support/tuple_support.py:45
    // UInt64(5),
    int 5
    // tuple_support/tuple_support.py:46
    // UInt64(6),
    int 6
    // tuple_support/tuple_support.py:47
    // UInt64(7),
    int 7
    // tuple_support/tuple_support.py:48
    // UInt64(8),
    int 8
    // tuple_support/tuple_support.py:39-50
    // slicing(
    //     (
    //         UInt64(1),
    //         UInt64(2),
    //         UInt64(3),
    //         UInt64(4),
    //         UInt64(5),
    //         UInt64(6),
    //         UInt64(7),
    //         UInt64(8),
    //     )
    // )
    callsub slicing
    // tuple_support/tuple_support.py:51
    // bin_ops()
    callsub bin_ops
    // tuple_support/tuple_support.py:52
    // if non_empty_tuple():
    callsub non_empty_tuple
    popn 2
    // tuple_support/tuple_support.py:53
    // log("not empty")
    byte "not empty"
    log
    // tuple_support/tuple_support.py:54
    // if (get_uint_with_side_effect(),):  # noqa: F634
    callsub get_uint_with_side_effect
    pop
    // tuple_support/tuple_support.py:55
    // log("not empty2")
    byte "not empty2"
    log
    // tuple_support/tuple_support.py:56
    // single_tuple()
    callsub single_tuple
    // tuple_support/tuple_support.py:62
    // return a + b
    int 3
    return


// test_cases.tuple_support.tuple_support.add_three_values(values.0: uint64, values.1: uint64, values.2: uint64) -> uint64:
add_three_values:
    // tuple_support/tuple_support.py:130-131
    // @subroutine
    // def add_three_values(values: tuple[UInt64, UInt64, UInt64]) -> UInt64:
    proto 3 1
    // tuple_support/tuple_support.py:132
    // total = UInt64(0)
    int 0
    frame_dig -3
    int 0

add_three_values_for_body@1:
    // tuple_support/tuple_support.py:134
    // total += value
    frame_dig 0
    uncover 2
    +
    dup
    frame_bury 0
    // tuple_support/tuple_support.py:133
    // for value in values:
    swap
    switch add_three_values_for_header_1@3 add_three_values_for_header_2@4
    // tuple_support/tuple_support.py:136
    // return total
    swap
    retsub

add_three_values_for_header_1@3:
    frame_dig -2
    int 1
    b add_three_values_for_body@1

add_three_values_for_header_2@4:
    frame_dig -1
    int 2
    b add_three_values_for_body@1


// test_cases.tuple_support.tuple_support.bytes_combine(arg.0: bytes, arg.1: bytes) -> bytes:
bytes_combine:
    // tuple_support/tuple_support.py:114-115
    // @subroutine
    // def bytes_combine(arg: tuple[Bytes, Bytes]) -> Bytes:
    proto 2 1
    // tuple_support/tuple_support.py:117
    // result = a + b
    frame_dig -2
    frame_dig -1
    concat
    // tuple_support/tuple_support.py:118
    // return result
    retsub


// test_cases.tuple_support.tuple_support.addw2(a.0: uint64, a.1: uint64, b.0: uint64, b.1: uint64) -> uint64, uint64, uint64:
addw2:
    // tuple_support/tuple_support.py:139-140
    // @subroutine
    // def addw2(a: tuple[UInt64, UInt64], b: tuple[UInt64, UInt64]) -> tuple[UInt64, UInt64, UInt64]:
    proto 4 3
    // tuple_support/tuple_support.py:143
    // lo_carry, c_lo = op.addw(a_lo, b_lo)
    frame_dig -3
    frame_dig -1
    addw
    swap
    // tuple_support/tuple_support.py:144
    // hi_carry1, c_mid = op.addw(a_hi, b_hi)
    frame_dig -4
    frame_dig -2
    addw
    // tuple_support/tuple_support.py:145
    // hi_carry2, c_mid = op.addw(c_mid, lo_carry)
    uncover 2
    addw
    cover 2
    // tuple_support/tuple_support.py:146
    // did_overflow, c_hi = op.addw(hi_carry1, hi_carry2)
    addw
    swap
    // tuple_support/tuple_support.py:147
    // assert not did_overflow, "is such a thing even possible? ðŸ‘½"
    !
    assert // is such a thing even possible? ðŸ‘½
    // tuple_support/tuple_support.py:148
    // return c_hi, c_mid, c_lo
    swap
    uncover 2
    retsub


// test_cases.tuple_support.tuple_support.bytes_multiply(arg.0: bytes, arg.1: uint64) -> bytes:
bytes_multiply:
    // tuple_support/tuple_support.py:121-122
    // @subroutine
    // def bytes_multiply(arg: tuple[Bytes, UInt64]) -> Bytes:
    proto 2 1
    // tuple_support/tuple_support.py:124
    // result = Bytes()
    byte 0x
    // tuple_support/tuple_support.py:125
    // for _i in urange(count):
    int 0

bytes_multiply_for_header@1:
    // tuple_support/tuple_support.py:125
    // for _i in urange(count):
    frame_dig 1
    frame_dig -1
    <
    bz bytes_multiply_after_for@5
    // tuple_support/tuple_support.py:126
    // result += b
    frame_dig 0
    frame_dig -2
    concat
    frame_bury 0
    // tuple_support/tuple_support.py:125
    // for _i in urange(count):
    frame_dig 1
    int 1
    +
    frame_bury 1
    b bytes_multiply_for_header@1

bytes_multiply_after_for@5:
    // tuple_support/tuple_support.py:127
    // return result
    retsub


// test_cases.tuple_support.tuple_support.test_tuple_swap(zero: uint64) -> void:
test_tuple_swap:
    // tuple_support/tuple_support.py:151-152
    // @subroutine
    // def test_tuple_swap(zero: UInt64) -> None:
    proto 1 0
    // tuple_support/tuple_support.py:153
    // a = zero + 1
    frame_dig -1
    int 1
    +
    // tuple_support/tuple_support.py:154
    // b = zero + 2
    frame_dig -1
    int 2
    +
    // tuple_support/tuple_support.py:156
    // assert a == 2, "a should be two"
    int 2
    ==
    assert // a should be two
    // tuple_support/tuple_support.py:157
    // assert b == 1, "b should be one"
    int 1
    ==
    assert // b should be one
    retsub


// test_cases.tuple_support.tuple_support.slicing(values.0: uint64, values.1: uint64, values.2: uint64, values.3: uint64, values.4: uint64, values.5: uint64, values.6: uint64, values.7: uint64) -> void:
slicing:
    // tuple_support/tuple_support.py:160-161
    // @subroutine
    // def slicing(values: tuple[UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64]) -> None:
    proto 8 0
    // tuple_support/tuple_support.py:163
    // assert add_three_values(one_to_three) == values[0] + values[1] + values[2]
    frame_dig -8
    frame_dig -7
    frame_dig -6
    callsub add_three_values
    frame_dig -8
    frame_dig -7
    +
    frame_dig -6
    +
    ==
    assert
    retsub


// test_cases.tuple_support.tuple_support.bin_ops() -> void:
bin_ops:
    // tuple_support/tuple_support.py:86-87
    // @subroutine
    // def bin_ops() -> None:
    proto 0 0
    retsub


// test_cases.tuple_support.tuple_support.non_empty_tuple() -> uint64, uint64:
non_empty_tuple:
    // tuple_support/tuple_support.py:80-81
    // @subroutine
    // def non_empty_tuple() -> tuple[UInt64, UInt64]:
    proto 0 2
    // tuple_support/tuple_support.py:82
    // log("non_empty_tuple called")
    byte "non_empty_tuple called"
    log
    // tuple_support/tuple_support.py:83
    // return UInt64(4), UInt64(2)
    int 4
    int 2
    retsub


// test_cases.tuple_support.tuple_support.get_uint_with_side_effect() -> uint64:
get_uint_with_side_effect:
    // tuple_support/tuple_support.py:74-75
    // @subroutine
    // def get_uint_with_side_effect() -> UInt64:
    proto 0 1
    // tuple_support/tuple_support.py:76
    // log("get_uint_with_side_effect called")
    byte "get_uint_with_side_effect called"
    log
    // tuple_support/tuple_support.py:77
    // return UInt64(4)
    int 4
    retsub


// test_cases.tuple_support.tuple_support.single_tuple() -> void:
single_tuple:
    // tuple_support/tuple_support.py:68-69
    // @subroutine
    // def single_tuple() -> None:
    proto 0 0
    retsub


// test_cases.tuple_support.tuple_support.TupleSupport.__init__() -> void:
__init__:
    // tuple_support/tuple_support.py:5
    // def __init__(self) -> None:
    proto 0 0
    // tuple_support/tuple_support.py:6
    // self.state = UInt64(0)
    byte "state"
    int 0
    app_global_put
    retsub
