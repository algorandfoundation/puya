#pragma version 10
#pragma typetrack false

// test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 2 3
    bytecblock 0x "state"
    intc_0 // 0
    bytec_0 // ""
    txn ApplicationID
    bnz main_after_if_else@2
    // tuple_support/tuple_support.py:6
    // self.state = UInt64(0)
    bytec_1 // "state"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // tuple_support/tuple_support.py:9
    // total = add_three_values((UInt64(101), UInt64(102), UInt64(103)))
    pushints 101 102 103 // 101, 102, 103
    callsub add_three_values
    // tuple_support/tuple_support.py:10
    // log(total)
    itob
    log
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    intc_1 // 1
    intc_2 // 2
    // tuple_support/tuple_support.py:12
    // (did_overflow, self.state) = op.addw(a, b)
    addw
    bytec_1 // "state"
    dig 1
    app_global_put
    // tuple_support/tuple_support.py:13
    // assert not did_overflow, "overflow!"
    dig 1
    !
    assert // overflow!
    // tuple_support/tuple_support.py:125
    // result = a + b
    pushbytes 0x48656c6c6f2c20776f726c6421
    // tuple_support/tuple_support.py:32-34
    // # assert ab2 == ab # TODO: support ths
    // # foobar = ((a, b), (c, d)) # TODO: negative test for this
    // log(bytes_combine((Bytes(b"Hello, "), Bytes(b"world!"))))
    log
    // tuple_support/tuple_support.py:35
    // max_uint64 = UInt64(2**64 - 1)
    pushint 18446744073709551615 // 18446744073709551615
    dup
    // tuple_support/tuple_support.py:36
    // hi, mid, lo = addw2(op.addw(max_uint64, max_uint64), op.addw(a, b))
    addw
    // tuple_support/tuple_support.py:151
    // lo_carry, c_lo = op.addw(a_lo, b_lo)
    uncover 2
    addw
    // tuple_support/tuple_support.py:152
    // hi_carry1, c_mid = op.addw(a_hi, b_hi)
    uncover 2
    uncover 3
    addw
    // tuple_support/tuple_support.py:153
    // hi_carry2, c_mid = op.addw(c_mid, lo_carry)
    uncover 3
    addw
    // tuple_support/tuple_support.py:154
    // did_overflow, c_hi = op.addw(hi_carry1, hi_carry2)
    cover 2
    addw
    // tuple_support/tuple_support.py:155
    // assert not did_overflow, "is such a thing even possible? ðŸ‘½"
    swap
    !
    assert // is such a thing even possible? ðŸ‘½
    // tuple_support/tuple_support.py:37
    // log(hi)
    itob
    log
    // tuple_support/tuple_support.py:38
    // log(mid)
    itob
    log
    // tuple_support/tuple_support.py:39
    // log(lo)
    itob
    log
    // tuple_support/tuple_support.py:132
    // result = Bytes()
    bytec_0 // 0x
    bury 2
    // tuple_support/tuple_support.py:133
    // for _i in urange(count):
    intc_0 // 0
    bury 1

main_for_header@15:
    // tuple_support/tuple_support.py:133
    // for _i in urange(count):
    dup
    // tuple_support/tuple_support.py:40
    // log(bytes_multiply((Bytes(b"na"), UInt64(5))))
    pushint 5 // 5
    // tuple_support/tuple_support.py:133
    // for _i in urange(count):
    <
    bz main_after_for@17
    // tuple_support/tuple_support.py:134
    // result += b
    dig 1
    // tuple_support/tuple_support.py:40
    // log(bytes_multiply((Bytes(b"na"), UInt64(5))))
    pushbytes 0x6e61
    // tuple_support/tuple_support.py:134
    // result += b
    concat
    bury 2
    // tuple_support/tuple_support.py:133
    // for _i in urange(count):
    dup
    intc_1 // 1
    +
    bury 1
    b main_for_header@15

main_after_for@17:
    // tuple_support/tuple_support.py:40
    // log(bytes_multiply((Bytes(b"na"), UInt64(5))))
    dig 1
    log
    // tuple_support/tuple_support.py:44
    // UInt64(1),
    intc_1 // 1
    // tuple_support/tuple_support.py:45
    // UInt64(2),
    intc_2 // 2
    // tuple_support/tuple_support.py:46
    // UInt64(3),
    intc_3 // 3
    // tuple_support/tuple_support.py:171
    // assert add_three_values(one_to_three) == values[0] + values[1] + values[2]
    callsub add_three_values
    pushint 6 // 6
    ==
    assert
    // tuple_support/tuple_support.py:90
    // log("non_empty_tuple called")
    pushbytes "non_empty_tuple called"
    log
    // tuple_support/tuple_support.py:56
    // log("not empty")
    pushbytes "not empty"
    log
    // tuple_support/tuple_support.py:84
    // log("get_uint_with_side_effect called")
    pushbytes "get_uint_with_side_effect called"
    log
    // tuple_support/tuple_support.py:58
    // log("not empty2")
    pushbytes "not empty2"
    log
    // tuple_support/tuple_support.py:65
    // return a + b
    intc_3 // 3
    return


// test_cases.tuple_support.tuple_support.add_three_values(values.0: uint64, values.1: uint64, values.2: uint64) -> uint64:
add_three_values:
    // tuple_support/tuple_support.py:138-139
    // @subroutine
    // def add_three_values(values: tuple[UInt64, UInt64, UInt64]) -> UInt64:
    proto 3 1
    // tuple_support/tuple_support.py:140
    // total = UInt64(0)
    intc_0 // 0
    frame_dig -3
    intc_0 // 0

add_three_values_for_body@1:
    // tuple_support/tuple_support.py:142
    // total += value
    frame_dig 0
    uncover 2
    +
    frame_bury 0
    // tuple_support/tuple_support.py:141
    // for value in values:
    switch add_three_values_for_header_1@3 add_three_values_for_header_2@4
    // tuple_support/tuple_support.py:144
    // return total
    frame_dig 0
    swap
    retsub

add_three_values_for_header_2@4:
    frame_dig -1
    intc_2 // 2
    b add_three_values_for_body@1

add_three_values_for_header_1@3:
    frame_dig -2
    intc_1 // 1
    b add_three_values_for_body@1
