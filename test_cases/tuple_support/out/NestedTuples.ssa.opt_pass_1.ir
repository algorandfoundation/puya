contract test_cases.tuple_support.nested_tuples.NestedTuples:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L5
                test_cases.tuple_support.nested_tuples.NestedTuples.__init__()
                goto block@2
            block@2: // entrypoint_L5
                let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__() -> bool:
            block@0: // L4
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@6
            block@1: // abi_routing_L4
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "run_tests()bool" => block@2, method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))" => block@3, * => return 0u}
            block@2: // run_tests_route_L8
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                let to_encode%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.run_tests()
                let encoded_bool%0#0: bytes = (setbit 0x00 0u to_encode%0#0)
                let tmp%7#0: bytes = (concat 0x151f7c75 encoded_bool%0#0)
                (log tmp%7#0)
                return 1u
            block@3: // nested_tuple_params_route_L37
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: uint64 = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                let tmp%12#0: bytes = (txna ApplicationArgs 1)
                let item_start_offset%0#0: uint64 = (extract_uint16 tmp%12#0 0u)
                let item_end_offset%0#0: uint64 = (extract_uint16 tmp%12#0 2u)
                let item0%0#0: bytes = (substring3 tmp%12#0 item_start_offset%0#0 item_end_offset%0#0)
                let item0%0%0#0: bytes = ((extract 2 0) item0%0#0)
                let item_end_offset%1#0: uint64 = (len tmp%12#0)
                let item1%0#0: bytes = (substring3 tmp%12#0 item_end_offset%0#0 item_end_offset%1#0)
                let item_start_offset%2#0: uint64 = (extract_uint16 item1%0#0 0u)
                let item_end_offset%2#0: uint64 = (len item1%0#0)
                let item0%1#0: bytes = (substring3 item1%0#0 item_start_offset%2#0 item_end_offset%2#0)
                let item0%1%0#0: bytes = ((extract 2 0) item0%1#0)
                let item1%1#0: bytes = ((extract 2 8) item1%0#0) // on error: Index access is out of bounds
                let item0%2#0: bytes = ((extract 0 8) item1%1#0) // on error: Index access is out of bounds
                let item0%2%0#0: uint64 = (btoi item0%2#0)
                let (elements_to_encode%0#0: bytes, elements_to_encode%1#0: bytes, elements_to_encode%2#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(item0%0%0#0, item0%1%0#0, item0%2%0#0)
                let length%0#0: uint64 = (len elements_to_encode%0#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 elements_to_encode%0#0)
                let length%1#0: uint64 = (len elements_to_encode%1#0)
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 elements_to_encode%1#0)
                let val_as_bytes%0#0: bytes = (itob elements_to_encode%2#0)
                let offset_as_uint16%0#0: bytes = 0x000a
                let data_length%0#0: uint64 = (len encoded_value%1#0)
                let encoded_tuple_buffer%2#0: bytes = (concat offset_as_uint16%0#0 val_as_bytes%0#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%1#0)
                let offset_as_uint16%1#0: bytes = 0x0004
                let data_length%1#0: uint64 = (len encoded_value%0#0)
                let current_tail_offset%3#0: uint64 = (+ 4u data_length%1#0)
                let as_bytes%4#0: bytes = (itob current_tail_offset%3#0)
                let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
                let encoded_tuple_buffer%6#0: bytes = (concat offset_as_uint16%1#0 offset_as_uint16%2#0)
                let data_length%2#0: uint64 = (len encoded_tuple_buffer%3#0)
                let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%0#0)
                let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 encoded_tuple_buffer%3#0)
                let tmp%13#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%8#0)
                (log tmp%13#0)
                return 1u
            block@6: // bare_routing_L4
                let tmp%14#0: uint64 = (txn OnCompletion)
                goto tmp%14#0 ? block@10 : block@7
            block@7: // __algopy_default_create_L4
                let tmp%15#0: uint64 = (txn ApplicationID)
                let tmp%16#0: bool = (! tmp%15#0)
                (assert tmp%16#0) // is creating
                return 1u
            block@10: // after_if_else_L4
                return 0u
        
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.run_tests() -> bool:
            block@0: // L8
                let (awst_tmp%0#0: bytes, awst_tmp%1#0: bytes) = test_cases.tuple_support.nested_tuples.test_swap("Hi", "There")
                let tmp%0#0: bool = (== awst_tmp%0#0 "There")
                let tmp%1#0: bool = (== awst_tmp%1#0 "Hi")
                let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
                (assert tmp%2#0)
                let tmp%3#0: bool = 1u
                (assert tmp%3#0)
                let (a#0: bytes, b#0: uint64, c#0: uint64, d#0: uint64, e#0: bytes) = test_cases.tuple_support.nested_tuples.test_rearrange("Hi", 0u, 2u, 1u, "Hi", "There", "There")
                let tmp%4#0: bool = (== a#0 "Hi")
                let tmp%5#0: bool = (! b#0)
                let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
                (assert tmp%6#0)
                let tmp%7#0: bool = (== c#0 2u)
                let tmp%8#0: bool = (== d#0 1u)
                let tmp%9#0: bool = (&& tmp%7#0 tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: bool = (== e#0 "There")
                (assert tmp%10#0)
                test_cases.tuple_support.nested_tuples.test_intrinsics(1u, 2u)
                test_cases.tuple_support.nested_tuples.test_nested_slicing()
                test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 1u)
                test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 0u)
                test_cases.tuple_support.nested_tuples.test_nested_mutation()
                let tmp%11#0: bool = 1u
                let tmp%12#0: bool = 1u
                let tmp%13#0: bool = 1u
                let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
                let tmp%15#0: bool = (&& tmp%11#0 tmp%14#0)
                (assert tmp%15#0)
                test_cases.tuple_support.nested_tuples.test_nested_iteration()
                test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested()
                return 1u
        
        subroutine test_cases.tuple_support.nested_tuples.test_swap(args.0: bytes, args.1: bytes) -> <bytes, bytes>:
            block@0: // L66
                return args.1#0 args.0#0
        
        subroutine test_cases.tuple_support.nested_tuples.test_rearrange(_a: bytes, args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: bytes, args.2.1.1: bytes, _b: bytes) -> <bytes, uint64, uint64, uint64, bytes>:
            block@0: // L57
                return args.2.1.0#0 args.0#0 args.1#0 args.2.0#0 args.2.1.1#0
        
        subroutine test_cases.tuple_support.nested_tuples.test_intrinsics(num1: uint64, num2: uint64) -> void:
            block@0: // L72
                let (nt.1.0#0: uint64, nt.1.1#0: uint64) = (addw num1#0 num2#0)
                let tmp%2#0: bool = 1u
                (assert tmp%2#0)
                let tmp%3#0: bool = 1u
                (assert tmp%3#0)
                let tmp%4#0: bool = (! nt.1.0#0)
                let tmp%5#0: uint64 = (+ num1#0 num2#0)
                let tmp%6#0: bool = (== nt.1.1#0 tmp%5#0)
                let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
                (assert tmp%7#0)
                (assert tmp%4#0)
                (assert tmp%6#0)
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing() -> void:
            block@0: // L85
                let tmp%0#0: bool = 1u
                (assert tmp%0#0)
                let tmp%1#0: bool = 1u
                let tmp%2#0: bool = 1u
                let tmp%3#0: bool = (&& tmp%1#0 tmp%2#0)
                (assert tmp%3#0)
                let tmp%4#0: bool = 1u
                let tmp%5#0: bool = 1u
                let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
                (assert tmp%6#0)
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: bool) -> void:
            block@0: // L107
                let s.0.0#0: uint64 = 0u
                let s.2.0#0: uint64 = 2u
                let tmp%0#0: bool = 1u
                (assert tmp%0#0)
                let tmp%1#0: bool = 1u
                (assert tmp%1#0)
                let tmp%2#0: bool = (== one#0 1u)
                (assert tmp%2#0)
                let tmp%3#0: bool = 1u
                (assert tmp%3#0)
                let tmp%4#0: bool = 1u
                (assert tmp%4#0)
                let tmp%5#0: bool = 1u
                (assert tmp%5#0)
                goto reassign#0 ? block@1 : block@2
            block@1: // if_body_L122
                let s.0.0#1: uint64 = 3u
                let s.1.0#1: uint64 = 4u
                let s.2.0#1: uint64 = 5u
                goto block@2
            block@2: // after_if_else_L121
                let s.0.0#2: uint64 = φ(s.0.0#0 <- block@0, s.0.0#1 <- block@1)
                let s.1.0#2: uint64 = φ(one#0 <- block@0, s.1.0#1 <- block@1)
                let s.2.0#2: uint64 = φ(s.2.0#0 <- block@0, s.2.0#1 <- block@1)
                let tmp%6#0: uint64 = (* reassign#0 3u)
                let tmp%7#0: bool = (== s.0.0#2 tmp%6#0)
                (assert tmp%7#0)
                let tmp%8#0: uint64 = (select 2u 5u reassign#0)
                let tmp%9#0: bool = (== s.2.0#2 tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: bool = 1u
                (assert tmp%10#0)
                let s1#1: uint64 = (+ s.1.0#2 one#0)
                let tmp%12#0: bool = (== s1#1 tmp%8#0)
                (assert tmp%12#0)
                let tmp%13#0: uint64 = (select 1u 4u reassign#0)
                let tmp%14#0: bool = (== s.1.0#2 tmp%13#0)
                (assert tmp%14#0)
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation() -> void:
            block@0: // L138
                let result%0#0: bytes = 0x0000000000000000
                let x.0.0#0: bytes = (concat 0x0001 result%0#0)
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) x.0.0#0)
                let data%0#0: bytes = 0x0000000000000001
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 data%0#0)
                let byte_len%0#0: uint64 = (len concatenated%0#0)
                let len_%0#0: uint64 = (/ byte_len%0#0 8u)
                let as_bytes%0#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let x.0.0#1: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let tmp%0#0: uint64 = (extract_uint16 x.0.0#1 0u)
                let tmp%1#0: bool = (== tmp%0#0 2u)
                (assert tmp%1#0)
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.test_nested_iteration() -> void:
            block@0: // L151
                let total#0: uint64 = 0u
                let loop_counter%0#0: uint64 = 0u
                let t.0#0: uint64 = 1u
                let t.1#0: uint64 = 2u
                goto block@1
            block@1: // for_body_L158
                let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4, loop_counter%0#4 <- block@5)
                let t.0#1: uint64 = φ(t.0#0 <- block@0, t.0#2 <- block@3, t.0#3 <- block@4, t.0#4 <- block@5)
                let t.1#1: uint64 = φ(t.1#0 <- block@0, t.1#2 <- block@3, t.1#3 <- block@4, t.1#4 <- block@5)
                let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3, total#2 <- block@4, total#2 <- block@5)
                let tmp%0#0: uint64 = (+ t.0#1 t.1#1)
                let total#2: uint64 = (+ total#1 tmp%0#0)
                goto_nth [block@3, block@4, block@5][loop_counter%0#1] else goto block@6
            block@3: // for_header_1_L157
                let loop_counter%0#2: uint64 = 1u
                let t.0#2: uint64 = 2u
                let t.1#2: uint64 = 1u
                goto block@1
            block@4: // for_header_2_L157
                let loop_counter%0#3: uint64 = 2u
                let t.0#3: uint64 = 1u
                let t.1#3: uint64 = 1u
                goto block@1
            block@5: // for_header_3_L157
                let loop_counter%0#4: uint64 = 3u
                let t.0#4: uint64 = 2u
                let t.1#4: uint64 = 2u
                goto block@1
            block@6: // after_for_L157
                let loop_counter%1#0: uint64 = 0u
                let a#1: uint64 = 1u
                let b#1: uint64 = 2u
                goto block@7
            block@7: // for_body_L162
                let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@6, loop_counter%1#2 <- block@9, loop_counter%1#3 <- block@10, loop_counter%1#4 <- block@11)
                let total#3: uint64 = φ(total#2 <- block@6, total#4 <- block@9, total#4 <- block@10, total#4 <- block@11)
                let a#2: uint64 = φ(a#1 <- block@6, a#3 <- block@9, a#4 <- block@10, a#5 <- block@11)
                let b#2: uint64 = φ(b#1 <- block@6, b#3 <- block@9, b#4 <- block@10, b#5 <- block@11)
                let tmp%1#0: uint64 = (+ a#2 b#2)
                let total#4: uint64 = (+ total#3 tmp%1#0)
                goto_nth [block@9, block@10, block@11][loop_counter%1#1] else goto block@12
            block@9: // for_header_1_L161
                let loop_counter%1#2: uint64 = 1u
                let a#3: uint64 = 2u
                let b#3: uint64 = 1u
                goto block@7
            block@10: // for_header_2_L161
                let loop_counter%1#3: uint64 = 2u
                let a#4: uint64 = 1u
                let b#4: uint64 = 1u
                goto block@7
            block@11: // for_header_3_L161
                let loop_counter%1#4: uint64 = 3u
                let a#5: uint64 = 2u
                let b#5: uint64 = 2u
                goto block@7
            block@12: // after_for_L161
                let tmp%2#0: uint64 = (/ total#4 8u)
                let tmp%3#0: bool = (== tmp%2#0 3u)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested() -> void:
            block@0: // L49
                (app_global_put "build_nested_call_count" 0u)
                let (awst_tmp%0#0: bytes, awst_tmp%1#0: uint64, awst_tmp%2#0: bytes) = test_cases.tuple_support.nested_tuples.NestedTuples.build_nested()
                let tmp%0#0: bool = 1u
                let tmp%1#0: bool = 1u
                let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
                let tmp%3#0: bool = 1u
                let tmp%4#0: bool = (|| tmp%2#0 tmp%3#0)
                goto tmp%4#0 ? block@1 : block@2
            block@1: // ternary_true_L52
                goto block@3
            block@2: // ternary_false_L52
                let (ternary_result%0.0.0#1: bytes, ternary_result%0.0.1#1: uint64, ternary_result%0.1#1: bytes) = test_cases.tuple_support.nested_tuples.NestedTuples.build_nested()
                goto block@3
            block@3: // ternary_merge_L52
                let result.0.0#0: bytes = φ(awst_tmp%0#0 <- block@1, ternary_result%0.0.0#1 <- block@2)
                let tmp%5#0: bool = (== result.0.0#0 "hi")
                (assert tmp%5#0)
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "build_nested_call_count")
                (assert maybe_exists%0#0) // check self.build_nested_call_count exists
                let tmp%6#0: bool = (== maybe_value%0#0 1u)
                (assert tmp%6#0)
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.build_nested() -> <bytes, uint64, bytes>:
            block@0: // L44
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "build_nested_call_count")
                (assert maybe_exists%0#0) // check self.build_nested_call_count exists
                let new_state_value%0#0: uint64 = (+ maybe_value%0#0 1u)
                (app_global_put "build_nested_call_count" new_state_value%0#0)
                return "hi" 1u 0x686d6d6d
        
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(args.0: bytes, args.1.0: bytes, args.1.1.0: uint64) -> <bytes, bytes, uint64>:
            block@0: // L37
                return args.1.0#0 args.0#0 args.1.1.0#0
        
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__init__() -> void:
            block@0: // L5
                (app_global_put "build_nested_call_count" 0u)
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u