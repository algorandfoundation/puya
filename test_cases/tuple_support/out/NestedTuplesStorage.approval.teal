#pragma version 10
#pragma typetrack false

// test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    bytecblock "tup" 0x000a "box" "glob" "loc" 0x000a000000000000000000010000000000000000 0x00010000000000000000
    txn ApplicationID
    bnz main_after_if_else@2
    // tuple_support/tuple_storage.py:16
    // self.tup = TupleWithMutable(
    bytec_0 // "tup"
    bytec 5 // 0x000a000000000000000000010000000000000000
    // tuple_support/tuple_storage.py:16-19
    // self.tup = TupleWithMutable(
    //     arr=arc4.DynamicArray(arc4.UInt64(0)),
    //     bar=UInt64(),
    // )
    app_global_put
    // tuple_support/tuple_storage.py:20
    // self.glob.value = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))
    bytec_3 // "glob"
    bytec 5 // 0x000a000000000000000000010000000000000000
    app_global_put
    // tuple_support/tuple_storage.py:21
    // self.tup = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))
    intc_0 // 0
    bytec_0 // "tup"
    app_global_get_ex
    assert // check self.tup exists
    extract 2 8
    bytec_1 // 0x000a
    swap
    concat
    // tuple_support/tuple_storage.py:17
    // arr=arc4.DynamicArray(arc4.UInt64(0)),
    bytec 6 // 0x00010000000000000000
    // tuple_support/tuple_storage.py:21
    // self.tup = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))
    concat
    bytec_0 // "tup"
    swap
    app_global_put

main_after_if_else@2:
    // tuple_support/tuple_storage.py:11
    // class NestedTuplesStorage(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0xbec76d87 0xacc253ae 0xe844940c 0x6222ef1a 0x1b269b50 // method "bootstrap()void", method "mutate_tuple(uint64)void", method "mutate_box(uint64)void", method "mutate_global(uint64)void", method "mutate_local(uint64)void"
    txna ApplicationArgs 0
    match main_bootstrap_route@5 main_mutate_tuple_route@6 main_mutate_box_route@7 main_mutate_global_route@8 main_mutate_local_route@9

main_after_if_else@12:
    // tuple_support/tuple_storage.py:11
    // class NestedTuplesStorage(arc4.ARC4Contract):
    intc_0 // 0
    return

main_mutate_local_route@9:
    // tuple_support/tuple_storage.py:40
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tuple_support/tuple_storage.py:11
    // class NestedTuplesStorage(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // tuple_support/tuple_storage.py:40
    // @arc4.abimethod()
    callsub mutate_local
    intc_1 // 1
    return

main_mutate_global_route@8:
    // tuple_support/tuple_storage.py:36
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tuple_support/tuple_storage.py:11
    // class NestedTuplesStorage(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // tuple_support/tuple_storage.py:36
    // @arc4.abimethod()
    callsub mutate_global
    intc_1 // 1
    return

main_mutate_box_route@7:
    // tuple_support/tuple_storage.py:32
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tuple_support/tuple_storage.py:11
    // class NestedTuplesStorage(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // tuple_support/tuple_storage.py:32
    // @arc4.abimethod()
    callsub mutate_box
    intc_1 // 1
    return

main_mutate_tuple_route@6:
    // tuple_support/tuple_storage.py:28
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tuple_support/tuple_storage.py:11
    // class NestedTuplesStorage(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // tuple_support/tuple_storage.py:28
    // @arc4.abimethod()
    callsub mutate_tuple
    intc_1 // 1
    return

main_bootstrap_route@5:
    // tuple_support/tuple_storage.py:23
    // @arc4.abimethod(allow_actions=["OptIn"])
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    callsub bootstrap
    intc_1 // 1
    return

main_bare_routing@10:
    // tuple_support/tuple_storage.py:11
    // class NestedTuplesStorage(arc4.ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap() -> void:
bootstrap:
    // tuple_support/tuple_storage.py:25
    // self.box.value = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))
    intc_0 // 0
    bytec_0 // "tup"
    app_global_get_ex
    assert // check self.tup exists
    extract 2 8
    bytec_1 // 0x000a
    swap
    concat
    bytec 6 // 0x00010000000000000000
    concat
    bytec_2 // "box"
    box_del
    pop
    bytec_2 // "box"
    dig 1
    box_put
    // tuple_support/tuple_storage.py:26
    // self.loc[Txn.sender] = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))
    txn Sender
    bytec 4 // "loc"
    uncover 2
    app_local_put
    retsub


// test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple(val: bytes) -> void:
mutate_tuple:
    // tuple_support/tuple_storage.py:28-29
    // @arc4.abimethod()
    // def mutate_tuple(self, val: arc4.UInt64) -> None:
    proto 1 0
    // tuple_support/tuple_storage.py:30
    // self.tup.arr.append(val)
    intc_0 // 0
    bytec_0 // "tup"
    app_global_get_ex
    assert // check self.tup exists
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    swap
    extract 2 8
    swap
    frame_dig -1
    concat // on error: max array length exceeded
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    bytec_1 // 0x000a
    uncover 2
    concat
    swap
    concat
    bytec_0 // "tup"
    swap
    app_global_put
    retsub


// test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box(val: bytes) -> void:
mutate_box:
    // tuple_support/tuple_storage.py:32-33
    // @arc4.abimethod()
    // def mutate_box(self, val: arc4.UInt64) -> None:
    proto 1 0
    // tuple_support/tuple_storage.py:34
    // self.box.value.arr.append(val)
    bytec_2 // "box"
    box_get
    assert // check self.box exists
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    swap
    extract 2 8
    swap
    frame_dig -1
    concat // on error: max array length exceeded
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    bytec_1 // 0x000a
    uncover 2
    concat
    swap
    concat
    bytec_2 // "box"
    box_del
    pop
    bytec_2 // "box"
    swap
    box_put
    retsub


// test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global(val: bytes) -> void:
mutate_global:
    // tuple_support/tuple_storage.py:36-37
    // @arc4.abimethod()
    // def mutate_global(self, val: arc4.UInt64) -> None:
    proto 1 0
    // tuple_support/tuple_storage.py:38
    // self.glob.value.arr.append(val)
    intc_0 // 0
    bytec_3 // "glob"
    app_global_get_ex
    assert // check self.glob exists
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    swap
    extract 2 8
    swap
    frame_dig -1
    concat // on error: max array length exceeded
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    bytec_1 // 0x000a
    uncover 2
    concat
    swap
    concat
    bytec_3 // "glob"
    swap
    app_global_put
    retsub


// test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local(val: bytes) -> void:
mutate_local:
    // tuple_support/tuple_storage.py:40-41
    // @arc4.abimethod()
    // def mutate_local(self, val: arc4.UInt64) -> None:
    proto 1 0
    // tuple_support/tuple_storage.py:42
    // self.loc[Txn.sender].arr.append(val)
    txn Sender
    dup
    intc_0 // 0
    bytec 4 // "loc"
    app_local_get_ex
    assert // check self.loc exists for account
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    swap
    extract 2 8
    swap
    frame_dig -1
    concat // on error: max array length exceeded
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    bytec_1 // 0x000a
    uncover 2
    concat
    swap
    concat
    bytec 4 // "loc"
    swap
    app_local_put
    retsub
