#pragma version 10
#pragma typetrack false

// test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    bytecblock "tup" 0x000a "box" "glob" "loc" 0x000a000000000000000000010000000000000000 0x00010000000000000000
    txn ApplicationID
    bnz main_after_if_else@2
    // tuple_support/tuple_storage.py:16
    // self.tup = TupleWithMutable(
    bytec_0 // "tup"
    bytec 5 // 0x000a000000000000000000010000000000000000
    // tuple_support/tuple_storage.py:16-19
    // self.tup = TupleWithMutable(
    //     arr=arc4.DynamicArray(arc4.UInt64(0)),
    //     bar=UInt64(),
    // )
    app_global_put
    // tuple_support/tuple_storage.py:20
    // self.glob.value = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))
    bytec_3 // "glob"
    bytec 5 // 0x000a000000000000000000010000000000000000
    app_global_put
    // tuple_support/tuple_storage.py:21
    // self.tup = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))
    intc_0 // 0
    bytec_0 // "tup"
    app_global_get_ex
    assert // check self.tup exists
    extract 2 8
    bytec_1 // 0x000a
    swap
    concat
    // tuple_support/tuple_storage.py:17
    // arr=arc4.DynamicArray(arc4.UInt64(0)),
    bytec 6 // 0x00010000000000000000
    // tuple_support/tuple_storage.py:21
    // self.tup = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))
    concat
    bytec_0 // "tup"
    swap
    app_global_put

main_after_if_else@2:
    // tuple_support/tuple_storage.py:11
    // class NestedTuplesStorage(arc4.ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@13
    pushbytes 0xbec76d87 // method "bootstrap()void"
    txna ApplicationArgs 0
    match main_bootstrap_route@5

main_switch_case_next@6:
    // tuple_support/tuple_storage.py:11
    // class NestedTuplesStorage(arc4.ARC4Contract):
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xacc253ae 0xe844940c 0x6222ef1a 0x1b269b50 // method "mutate_tuple(uint64)void", method "mutate_box(uint64)void", method "mutate_global(uint64)void", method "mutate_local(uint64)void"
    txna ApplicationArgs 0
    match mutate_tuple mutate_box mutate_global mutate_local
    err

main_bootstrap_route@5:
    // tuple_support/tuple_storage.py:23
    // @arc4.abimethod(allow_actions=["OptIn"])
    txn OnCompletion
    intc_1 // OptIn
    ==
    txn ApplicationID
    &&
    assert // OnCompletion must be OptIn && can only call when not creating
    b bootstrap

main___algopy_default_create@13:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap[routing]() -> void:
bootstrap:
    // tuple_support/tuple_storage.py:25
    // self.box.value = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))
    intc_0 // 0
    bytec_0 // "tup"
    app_global_get_ex
    assert // check self.tup exists
    extract 2 8
    bytec_1 // 0x000a
    swap
    concat
    bytec 6 // 0x00010000000000000000
    concat
    bytec_2 // "box"
    box_del
    pop
    bytec_2 // "box"
    dig 1
    box_put
    // tuple_support/tuple_storage.py:26
    // self.loc[Txn.sender] = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))
    txn Sender
    bytec 4 // "loc"
    uncover 2
    app_local_put
    // tuple_support/tuple_storage.py:23
    // @arc4.abimethod(allow_actions=["OptIn"])
    intc_1 // 1
    return


// test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple[routing]() -> void:
mutate_tuple:
    // tuple_support/tuple_storage.py:28
    // @arc4.abimethod()
    txna ApplicationArgs 1
    // tuple_support/tuple_storage.py:30
    // self.tup.arr.append(val)
    intc_0 // 0
    bytec_0 // "tup"
    app_global_get_ex
    assert // check self.tup exists
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    swap
    extract 2 8
    dig 1
    uncover 3
    concat // on error: max array length exceeded
    uncover 2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    bytec_1 // 0x000a
    uncover 2
    concat
    swap
    concat
    bytec_0 // "tup"
    swap
    app_global_put
    // tuple_support/tuple_storage.py:28
    // @arc4.abimethod()
    intc_1 // 1
    return


// test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box[routing]() -> void:
mutate_box:
    // tuple_support/tuple_storage.py:32
    // @arc4.abimethod()
    txna ApplicationArgs 1
    // tuple_support/tuple_storage.py:34
    // self.box.value.arr.append(val)
    bytec_2 // "box"
    box_get
    assert // check self.box exists
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    swap
    extract 2 8
    dig 1
    uncover 3
    concat // on error: max array length exceeded
    uncover 2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    bytec_1 // 0x000a
    uncover 2
    concat
    swap
    concat
    bytec_2 // "box"
    box_del
    pop
    bytec_2 // "box"
    swap
    box_put
    // tuple_support/tuple_storage.py:32
    // @arc4.abimethod()
    intc_1 // 1
    return


// test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global[routing]() -> void:
mutate_global:
    // tuple_support/tuple_storage.py:36
    // @arc4.abimethod()
    txna ApplicationArgs 1
    // tuple_support/tuple_storage.py:38
    // self.glob.value.arr.append(val)
    intc_0 // 0
    bytec_3 // "glob"
    app_global_get_ex
    assert // check self.glob exists
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    swap
    extract 2 8
    dig 1
    uncover 3
    concat // on error: max array length exceeded
    uncover 2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    bytec_1 // 0x000a
    uncover 2
    concat
    swap
    concat
    bytec_3 // "glob"
    swap
    app_global_put
    // tuple_support/tuple_storage.py:36
    // @arc4.abimethod()
    intc_1 // 1
    return


// test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local[routing]() -> void:
mutate_local:
    // tuple_support/tuple_storage.py:40
    // @arc4.abimethod()
    txna ApplicationArgs 1
    // tuple_support/tuple_storage.py:42
    // self.loc[Txn.sender].arr.append(val)
    txn Sender
    dup
    intc_0 // 0
    bytec 4 // "loc"
    app_local_get_ex
    assert // check self.loc exists for account
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    swap
    extract 2 8
    dig 1
    uncover 4
    concat // on error: max array length exceeded
    uncover 2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    replace2 0
    bytec_1 // 0x000a
    uncover 2
    concat
    swap
    concat
    bytec 4 // "loc"
    swap
    app_local_put
    // tuple_support/tuple_storage.py:40
    // @arc4.abimethod()
    intc_1 // 1
    return
