// Op                                                                                             Stack (out)
// test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    main_block@0:
        txn ApplicationID                                                                         tmp%0#0
        l-load tmp%0#0 0                                                                          tmp%0#0
        bz main_call___init__@1 ; b main_after_if_else@2

    main_call___init__@1:
        // tuple_support/nested_tuples.py:50
        // self.build_nested_call_count = UInt64(0)
        byte "build_nested_call_count"                                                            "build_nested_call_count"
        int 0                                                                                     "build_nested_call_count",0
        app_global_put
        // tuple_support/nested_tuples.py:52
        // self.twm = TupleWithMutable(
        byte "twm"                                                                                "twm"
        byte 0x0004000600000000000000000000000c000e00000000                                       "twm",0x0004000600000000000000000000000c000e00000000
        // tuple_support/nested_tuples.py:52-59
        // self.twm = TupleWithMutable(
        //     arr=arc4.DynamicArray[arc4.UInt64](),
        //     child=Child(
        //         a=UInt64(),
        //         b=Bytes(),
        //         c=String(),
        //     ),
        // )
        app_global_put
        b main_after_if_else@2

    main_after_if_else@2:
        // tuple_support/nested_tuples.py:48
        // class NestedTuples(ARC4Contract):
        txn NumAppArgs                                                                            tmp%0#2
        l-load tmp%0#2 0                                                                          tmp%0#2
        bz main___algopy_default_create@21 ; b main_abi_routing@4

    main_abi_routing@4:
        // tuple_support/nested_tuples.py:48
        // class NestedTuples(ARC4Contract):
        txn OnCompletion                                                                          tmp%2#0
        l-load tmp%2#0 0                                                                          tmp%2#0
        !                                                                                         tmp%3#0
        l-load tmp%3#0 0                                                                          tmp%3#0
        assert // OnCompletion must be NoOp
        txn ApplicationID                                                                         tmp%4#0
        l-load tmp%4#0 0                                                                          tmp%4#0
        assert
        txna ApplicationArgs 0                                                                    tmp%6#0
        method store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)
        method load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]) tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))
        method store_tuple_in_box((uint64,uint64))void                                            tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void)
        method is_tuple_in_box((uint64,uint64))bool                                               tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void),Method(is_tuple_in_box((uint64,uint64))bool)
        method load_tuple_from_box((uint64,uint64))(uint64,uint64)                                tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void),Method(is_tuple_in_box((uint64,uint64))bool),Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))
        method maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)                   tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void),Method(is_tuple_in_box((uint64,uint64))bool),Method(load_tuple_from_box((uint64,uint64))(uint64,uint64)),Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool))
        method load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)                     tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void),Method(is_tuple_in_box((uint64,uint64))bool),Method(load_tuple_from_box((uint64,uint64))(uint64,uint64)),Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)),Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64))
        method load_tuple_from_local_state_or_default(string)(uint64,uint64)                      tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void),Method(is_tuple_in_box((uint64,uint64))bool),Method(load_tuple_from_box((uint64,uint64))(uint64,uint64)),Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)),Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)),Method(load_tuple_from_local_state_or_default(string)(uint64,uint64))
        method mutate_local_tuple()(uint64[],(uint64,byte[],string))                              tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void),Method(is_tuple_in_box((uint64,uint64))bool),Method(load_tuple_from_box((uint64,uint64))(uint64,uint64)),Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)),Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)),Method(load_tuple_from_local_state_or_default(string)(uint64,uint64)),Method(mutate_local_tuple()(uint64[],(uint64,byte[],string)))
        method mutate_tuple_in_storage_currently_supported_method()void                           tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void),Method(is_tuple_in_box((uint64,uint64))bool),Method(load_tuple_from_box((uint64,uint64))(uint64,uint64)),Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)),Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)),Method(load_tuple_from_local_state_or_default(string)(uint64,uint64)),Method(mutate_local_tuple()(uint64[],(uint64,byte[],string))),Method(mutate_tuple_in_storage_currently_supported_method()void)
        method run_tests()bool                                                                    tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void),Method(is_tuple_in_box((uint64,uint64))bool),Method(load_tuple_from_box((uint64,uint64))(uint64,uint64)),Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)),Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)),Method(load_tuple_from_local_state_or_default(string)(uint64,uint64)),Method(mutate_local_tuple()(uint64[],(uint64,byte[],string))),Method(mutate_tuple_in_storage_currently_supported_method()void),Method(run_tests()bool)
        method nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))            tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void),Method(is_tuple_in_box((uint64,uint64))bool),Method(load_tuple_from_box((uint64,uint64))(uint64,uint64)),Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)),Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)),Method(load_tuple_from_local_state_or_default(string)(uint64,uint64)),Method(mutate_local_tuple()(uint64[],(uint64,byte[],string))),Method(mutate_tuple_in_storage_currently_supported_method()void),Method(run_tests()bool),Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))
        method named_tuple((uint64,byte[],string))(uint64,byte[],string)                          tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void),Method(is_tuple_in_box((uint64,uint64))bool),Method(load_tuple_from_box((uint64,uint64))(uint64,uint64)),Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)),Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)),Method(load_tuple_from_local_state_or_default(string)(uint64,uint64)),Method(mutate_local_tuple()(uint64[],(uint64,byte[],string))),Method(mutate_tuple_in_storage_currently_supported_method()void),Method(run_tests()bool),Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))),Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))
        method nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)) tmp%6#0,Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void),Method(is_tuple_in_box((uint64,uint64))bool),Method(load_tuple_from_box((uint64,uint64))(uint64,uint64)),Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)),Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)),Method(load_tuple_from_local_state_or_default(string)(uint64,uint64)),Method(mutate_local_tuple()(uint64[],(uint64,byte[],string))),Method(mutate_tuple_in_storage_currently_supported_method()void),Method(run_tests()bool),Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))),Method(named_tuple((uint64,byte[],string))(uint64,byte[],string)),Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))
        l-load tmp%6#0 14                                                                         Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void),Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])),Method(store_tuple_in_box((uint64,uint64))void),Method(is_tuple_in_box((uint64,uint64))bool),Method(load_tuple_from_box((uint64,uint64))(uint64,uint64)),Method(maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)),Method(load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)),Method(load_tuple_from_local_state_or_default(string)(uint64,uint64)),Method(mutate_local_tuple()(uint64[],(uint64,byte[],string))),Method(mutate_tuple_in_storage_currently_supported_method()void),Method(run_tests()bool),Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))),Method(named_tuple((uint64,byte[],string))(uint64,byte[],string)),Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))),tmp%6#0
        match main_store_tuple_route@6 main_load_tuple_route@7 main_store_tuple_in_box_route@8 main_is_tuple_in_box_route@9 main_load_tuple_from_box_route@10 main_maybe_load_tuple_from_box_route@11 main_load_tuple_from_box_or_default_route@12 main_load_tuple_from_local_state_or_default_route@13 main_mutate_local_tuple_route@14 main_mutate_tuple_in_storage_currently_supported_method_route@15 main_run_tests_route@16 main_nested_tuple_params_route@17 main_named_tuple_route@18 main_nested_named_tuple_params_route@19 ; b main_after_if_else@20 

    main_store_tuple_route@6:
        // tuple_support/nested_tuples.py:61
        // @arc4.abimethod()
        callsub store_tuple
        b main_after_if_else@20

    main_load_tuple_route@7:
        // tuple_support/nested_tuples.py:65
        // @arc4.abimethod()
        callsub load_tuple
        b main_after_if_else@20

    main_store_tuple_in_box_route@8:
        // tuple_support/nested_tuples.py:69
        // @arc4.abimethod()
        callsub store_tuple_in_box
        b main_after_if_else@20

    main_is_tuple_in_box_route@9:
        // tuple_support/nested_tuples.py:73
        // @arc4.abimethod()
        callsub is_tuple_in_box
        b main_after_if_else@20

    main_load_tuple_from_box_route@10:
        // tuple_support/nested_tuples.py:77
        // @arc4.abimethod()
        callsub load_tuple_from_box
        b main_after_if_else@20

    main_maybe_load_tuple_from_box_route@11:
        // tuple_support/nested_tuples.py:81
        // @arc4.abimethod()
        callsub maybe_load_tuple_from_box
        b main_after_if_else@20

    main_load_tuple_from_box_or_default_route@12:
        // tuple_support/nested_tuples.py:86
        // @arc4.abimethod()
        callsub load_tuple_from_box_or_default
        b main_after_if_else@20

    main_load_tuple_from_local_state_or_default_route@13:
        // tuple_support/nested_tuples.py:90
        // @arc4.abimethod()
        callsub load_tuple_from_local_state_or_default
        b main_after_if_else@20

    main_mutate_local_tuple_route@14:
        // tuple_support/nested_tuples.py:95
        // @arc4.abimethod()
        callsub mutate_local_tuple
        b main_after_if_else@20

    main_mutate_tuple_in_storage_currently_supported_method_route@15:
        // tuple_support/nested_tuples.py:114
        // @arc4.abimethod()
        callsub mutate_tuple_in_storage_currently_supported_method
        b main_after_if_else@20

    main_run_tests_route@16:
        // tuple_support/nested_tuples.py:120
        // @arc4.abimethod()
        callsub run_tests
        b main_after_if_else@20

    main_nested_tuple_params_route@17:
        // tuple_support/nested_tuples.py:149
        // @arc4.abimethod()
        callsub nested_tuple_params
        b main_after_if_else@20

    main_named_tuple_route@18:
        // tuple_support/nested_tuples.py:156
        // @arc4.abimethod()
        callsub named_tuple
        b main_after_if_else@20

    main_nested_named_tuple_params_route@19:
        // tuple_support/nested_tuples.py:161
        // @arc4.abimethod()
        callsub nested_named_tuple_params
        b main_after_if_else@20

    main_after_if_else@20:
        // tuple_support/nested_tuples.py:48
        // class NestedTuples(ARC4Contract):
        err

    main___algopy_default_create@21:
        txn OnCompletion                                                                          tmp%7#0
        l-load tmp%7#0 0                                                                          tmp%7#0
        !                                                                                         tmp%8#0
        txn ApplicationID                                                                         tmp%8#0,tmp%9#0
        l-load tmp%9#0 0                                                                          tmp%8#0,tmp%9#0
        !                                                                                         tmp%8#0,tmp%10#0
        l-load tmp%8#0 1                                                                          tmp%10#0,tmp%8#0
        l-load tmp%10#0 1                                                                         tmp%8#0,tmp%10#0
        &&                                                                                        tmp%11#0
        l-load tmp%11#0 0                                                                         tmp%11#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.get_sender_inefficiently() -> bytes:
subroutine get_sender_inefficiently:
    get_sender_inefficiently_block@0:
        // tuple_support/nested_tuples.py:181
        // log("Order is important")
        byte "Order is important"                                                                 "Order is important"
        log
        // tuple_support/nested_tuples.py:182
        // return Txn.sender
        txn Sender                                                                                tmp%0#0
        l-load tmp%0#0 0                                                                          tmp%0#0
        retsub                                                                                    tmp%0#0


// test_cases.tuple_support.nested_tuples.simple_tup(a: uint64, b: uint64) -> uint64, uint64:
subroutine simple_tup:
    simple_tup_block@0:                                                                           (𝕡) a#0,b#0 |
        // tuple_support/nested_tuples.py:187
        // log("I'm just a simple tup")
        byte "I'm just a simple tup"                                                              (𝕡) a#0,b#0 | "I'm just a simple tup"
        log                                                                                       (𝕡) a#0,b#0 |
        // tuple_support/nested_tuples.py:188
        // return SimpleTup(a, b)
        p-load a#0                                                                                (𝕡) a#0,b#0 | a#0 (copy)
        p-load b#0                                                                                (𝕡) a#0,b#0 | a#0 (copy),b#0 (copy)
        retsub                                                                                    a#0 (copy),b#0 (copy)


// test_cases.tuple_support.nested_tuples.echo(s: bytes) -> bytes:
subroutine echo:
    echo_block@0:                                                                                 (𝕡) s#0 |
        // tuple_support/nested_tuples.py:193
        // log("Is there an echo in here?")
        byte "Is there an echo in here?"                                                          (𝕡) s#0 | "Is there an echo in here?"
        log                                                                                       (𝕡) s#0 |
        // tuple_support/nested_tuples.py:194
        // return s
        p-load s#0                                                                                (𝕡) s#0 | s#0 (copy)
        retsub                                                                                    s#0 (copy)


// test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: uint64) -> void:
subroutine test_nested_singles:
    test_nested_singles_block@0:                                                                  (𝕡) one#0,reassign#0 |
        // tuple_support/nested_tuples.py:250
        // (UInt64(0),),
        int 0                                                                                     (𝕡) one#0,reassign#0 | 0
        // tuple_support/nested_tuples.py:249-253
        // s = (
        //     (UInt64(0),),
        //     (one,),
        //     (UInt64(2),),
        // )
        v-store s.0.0#0                                                                           (𝕡) one#0,reassign#0 |
        // tuple_support/nested_tuples.py:252
        // (UInt64(2),),
        int 2                                                                                     (𝕡) one#0,reassign#0 | 2
        // tuple_support/nested_tuples.py:249-253
        // s = (
        //     (UInt64(0),),
        //     (one,),
        //     (UInt64(2),),
        // )
        v-store s.2.0#0                                                                           (𝕡) one#0,reassign#0 |
        // tuple_support/nested_tuples.py:256
        // assert s[1][0] == 1
        p-load one#0                                                                              (𝕡) one#0,reassign#0 | one#0 (copy)
        int 1                                                                                     (𝕡) one#0,reassign#0 | one#0 (copy),1
        ==                                                                                        (𝕡) one#0,reassign#0 | tmp%2#0
        l-load tmp%2#0 0                                                                          (𝕡) one#0,reassign#0 | tmp%2#0
        assert                                                                                    (𝕡) one#0,reassign#0 |
        // tuple_support/nested_tuples.py:261
        // if reassign:
        p-load reassign#0                                                                         (𝕡) one#0,reassign#0 | reassign#0 (copy)
        bz test_nested_singles_block@3 ; b test_nested_singles_if_body@1                          (𝕡) one#0,reassign#0 |

    test_nested_singles_block@3:                                                                  (𝕡) one#0,reassign#0 |
        p-load one#0                                                                              (𝕡) one#0,reassign#0 | one#0 (copy)
        v-store s.1.0#1                                                                           (𝕡) one#0,reassign#0 |
        // tuple_support/nested_tuples.py:261
        // if reassign:
        b test_nested_singles_after_if_else@2                                                     (𝕡) one#0,reassign#0 |

    test_nested_singles_if_body@1:                                                                (𝕡) one#0,reassign#0 |
        // tuple_support/nested_tuples.py:263
        // (UInt64(3),),
        int 3                                                                                     (𝕡) one#0,reassign#0 | 3
        // tuple_support/nested_tuples.py:262-266
        // s = (
        //     (UInt64(3),),
        //     (UInt64(4),),
        //     (UInt64(5),),
        // )
        v-store s.0.0#0                                                                           (𝕡) one#0,reassign#0 |
        // tuple_support/nested_tuples.py:264
        // (UInt64(4),),
        int 4                                                                                     (𝕡) one#0,reassign#0 | 4
        // tuple_support/nested_tuples.py:262-266
        // s = (
        //     (UInt64(3),),
        //     (UInt64(4),),
        //     (UInt64(5),),
        // )
        v-store s.1.0#1                                                                           (𝕡) one#0,reassign#0 |
        // tuple_support/nested_tuples.py:265
        // (UInt64(5),),
        int 5                                                                                     (𝕡) one#0,reassign#0 | 5
        // tuple_support/nested_tuples.py:262-266
        // s = (
        //     (UInt64(3),),
        //     (UInt64(4),),
        //     (UInt64(5),),
        // )
        v-store s.2.0#0                                                                           (𝕡) one#0,reassign#0 |
        b test_nested_singles_after_if_else@2                                                     (𝕡) one#0,reassign#0 |

    test_nested_singles_after_if_else@2:                                                          (𝕡) one#0,reassign#0 |
        // tuple_support/nested_tuples.py:267
        // assert s[0][0] == (3 if reassign else 0)
        p-load reassign#0                                                                         (𝕡) one#0,reassign#0 | reassign#0 (copy)
        int 3                                                                                     (𝕡) one#0,reassign#0 | reassign#0 (copy),3
        *                                                                                         (𝕡) one#0,reassign#0 | select%0#0
        v-load s.0.0#0                                                                            (𝕡) one#0,reassign#0 | select%0#0,s.0.0#0
        l-load select%0#0 1                                                                       (𝕡) one#0,reassign#0 | s.0.0#0,select%0#0
        ==                                                                                        (𝕡) one#0,reassign#0 | tmp%6#0
        l-load tmp%6#0 0                                                                          (𝕡) one#0,reassign#0 | tmp%6#0
        assert                                                                                    (𝕡) one#0,reassign#0 |
        // tuple_support/nested_tuples.py:269
        // assert tmp == (5 if reassign else 2)
        int 2                                                                                     (𝕡) one#0,reassign#0 | 2
        int 5                                                                                     (𝕡) one#0,reassign#0 | 2,5
        p-load reassign#0                                                                         (𝕡) one#0,reassign#0 | 2,5,reassign#0 (copy)
        select                                                                                    (𝕡) one#0,reassign#0 | select%1#0
        v-load s.2.0#0                                                                            (𝕡) one#0,reassign#0 | select%1#0,s.2.0#0
        l-load-copy select%1#0 1                                                                  (𝕡) one#0,reassign#0 | select%1#0,s.2.0#0,select%1#0 (copy)
        ==                                                                                        (𝕡) one#0,reassign#0 | select%1#0,tmp%7#0
        l-load tmp%7#0 0                                                                          (𝕡) one#0,reassign#0 | select%1#0,tmp%7#0
        assert                                                                                    (𝕡) one#0,reassign#0 | select%1#0
        // tuple_support/nested_tuples.py:273
        // s1 += one
        v-load s.1.0#1                                                                            (𝕡) one#0,reassign#0 | select%1#0,s.1.0#1
        l-store-copy s.1.0#1 1                                                                    (𝕡) one#0,reassign#0 | s.1.0#1,select%1#0,s.1.0#1 (copy)
        p-load one#0                                                                              (𝕡) one#0,reassign#0 | s.1.0#1,select%1#0,s.1.0#1 (copy),one#0 (copy)
        +                                                                                         (𝕡) one#0,reassign#0 | s.1.0#1,select%1#0,s1#1
        // tuple_support/nested_tuples.py:274
        // assert s1 == (5 if reassign else 2)
        l-load s1#1 0                                                                             (𝕡) one#0,reassign#0 | s.1.0#1,select%1#0,s1#1
        l-load select%1#0 1                                                                       (𝕡) one#0,reassign#0 | s.1.0#1,s1#1,select%1#0
        ==                                                                                        (𝕡) one#0,reassign#0 | s.1.0#1,tmp%10#0
        l-load tmp%10#0 0                                                                         (𝕡) one#0,reassign#0 | s.1.0#1,tmp%10#0
        assert                                                                                    (𝕡) one#0,reassign#0 | s.1.0#1
        // tuple_support/nested_tuples.py:275
        // assert s[1][0] == (4 if reassign else 1)
        int 1                                                                                     (𝕡) one#0,reassign#0 | s.1.0#1,1
        int 4                                                                                     (𝕡) one#0,reassign#0 | s.1.0#1,1,4
        p-load reassign#0                                                                         (𝕡) one#0,reassign#0 | s.1.0#1,1,4,reassign#0 (copy)
        select                                                                                    (𝕡) one#0,reassign#0 | s.1.0#1,select%3#0
        l-load s.1.0#1 1                                                                          (𝕡) one#0,reassign#0 | select%3#0,s.1.0#1
        l-load select%3#0 1                                                                       (𝕡) one#0,reassign#0 | s.1.0#1,select%3#0
        ==                                                                                        (𝕡) one#0,reassign#0 | tmp%11#0
        l-load tmp%11#0 0                                                                         (𝕡) one#0,reassign#0 | tmp%11#0
        assert                                                                                    (𝕡) one#0,reassign#0 |
        retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple[routing]() -> void:
subroutine store_tuple:
    store_tuple_block@0:
        // tuple_support/nested_tuples.py:61
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0
        // tuple_support/nested_tuples.py:63
        // self.pwl = pwl
        byte "pwl"                                                                                reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0,"pwl"
        l-load reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0 1 "pwl",reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0
        app_global_put
        // tuple_support/nested_tuples.py:61
        // @arc4.abimethod()
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple[routing]() -> void:
subroutine load_tuple:
    load_tuple_block@0:
        // tuple_support/nested_tuples.py:67
        // return self.pwl
        int 0                                                                                     0
        byte "pwl"                                                                                0,"pwl"
        app_global_get_ex                                                                         maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                 maybe_value%0#0,maybe_exists%0#0
        assert // check self.pwl exists                                                           maybe_value%0#0
        // tuple_support/nested_tuples.py:65
        // @arc4.abimethod()
        byte 0x151f7c75                                                                           maybe_value%0#0,0x151f7c75
        l-load maybe_value%0#0 1                                                                  0x151f7c75,maybe_value%0#0
        concat                                                                                    tmp%7#0
        l-load tmp%7#0 0                                                                          tmp%7#0
        log
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box[routing]() -> void:
subroutine store_tuple_in_box:
    store_tuple_in_box_block@0:
        // tuple_support/nested_tuples.py:69
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64,uint64)%0#0
        l-load-copy reinterpret_Encoded(uint64,uint64)%0#0 0                                      reinterpret_Encoded(uint64,uint64)%0#0,reinterpret_Encoded(uint64,uint64)%0#0 (copy)
        extract 0 8                                                                               reinterpret_Encoded(uint64,uint64)%0#0,aggregate%extract%0#0
        l-load-copy reinterpret_Encoded(uint64,uint64)%0#0 1                                      reinterpret_Encoded(uint64,uint64)%0#0,aggregate%extract%0#0,reinterpret_Encoded(uint64,uint64)%0#0 (copy)
        int 8                                                                                     reinterpret_Encoded(uint64,uint64)%0#0,aggregate%extract%0#0,reinterpret_Encoded(uint64,uint64)%0#0 (copy),8
        extract_uint64                                                                            reinterpret_Encoded(uint64,uint64)%0#0,aggregate%extract%0#0,key.b#0
        // tuple_support/nested_tuples.py:71
        // self.box[key] = key._replace(b=key.b + 1)
        l-load key.b#0 0                                                                          reinterpret_Encoded(uint64,uint64)%0#0,aggregate%extract%0#0,key.b#0
        int 1                                                                                     reinterpret_Encoded(uint64,uint64)%0#0,aggregate%extract%0#0,key.b#0,1
        +                                                                                         reinterpret_Encoded(uint64,uint64)%0#0,aggregate%extract%0#0,tmp%0#1
        byte "box"                                                                                reinterpret_Encoded(uint64,uint64)%0#0,aggregate%extract%0#0,tmp%0#1,"box"
        l-load reinterpret_Encoded(uint64,uint64)%0#0 3                                           aggregate%extract%0#0,tmp%0#1,"box",reinterpret_Encoded(uint64,uint64)%0#0
        concat                                                                                    aggregate%extract%0#0,tmp%0#1,box_prefixed_key%0#0
        l-load tmp%0#1 1                                                                          aggregate%extract%0#0,box_prefixed_key%0#0,tmp%0#1
        itob                                                                                      aggregate%extract%0#0,box_prefixed_key%0#0,aggregate%val_as_bytes%1#0
        l-load aggregate%extract%0#0 2                                                            box_prefixed_key%0#0,aggregate%val_as_bytes%1#0,aggregate%extract%0#0
        l-load aggregate%val_as_bytes%1#0 1                                                       box_prefixed_key%0#0,aggregate%extract%0#0,aggregate%val_as_bytes%1#0
        concat                                                                                    box_prefixed_key%0#0,aggregate%head%1#0
        l-load box_prefixed_key%0#0 1                                                             aggregate%head%1#0,box_prefixed_key%0#0
        l-load aggregate%head%1#0 1                                                               box_prefixed_key%0#0,aggregate%head%1#0
        box_put
        // tuple_support/nested_tuples.py:69
        // @arc4.abimethod()
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box[routing]() -> void:
subroutine is_tuple_in_box:
    is_tuple_in_box_block@0:
        // tuple_support/nested_tuples.py:73
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64,uint64)%0#0
        // tuple_support/nested_tuples.py:75
        // return key in self.box
        byte "box"                                                                                reinterpret_Encoded(uint64,uint64)%0#0,"box"
        l-load reinterpret_Encoded(uint64,uint64)%0#0 1                                           "box",reinterpret_Encoded(uint64,uint64)%0#0
        concat                                                                                    box_prefixed_key%0#0
        l-load box_prefixed_key%0#0 0                                                             box_prefixed_key%0#0
        box_len                                                                                   _%0#0,maybe_exists%0#0
        l-store maybe_exists%0#0 1                                                                maybe_exists%0#0,_%0#0
        v-store _%0#0                                                                             maybe_exists%0#0
        // tuple_support/nested_tuples.py:73
        // @arc4.abimethod()
        byte 0x00                                                                                 maybe_exists%0#0,0x00
        int 0                                                                                     maybe_exists%0#0,0x00,0
        l-load maybe_exists%0#0 2                                                                 0x00,0,maybe_exists%0#0
        setbit                                                                                    aggregate%encoded_bool%0#0
        byte 0x151f7c75                                                                           aggregate%encoded_bool%0#0,0x151f7c75
        l-load aggregate%encoded_bool%0#0 1                                                       0x151f7c75,aggregate%encoded_bool%0#0
        concat                                                                                    tmp%4#0
        l-load tmp%4#0 0                                                                          tmp%4#0
        log
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box[routing]() -> void:
subroutine load_tuple_from_box:
    load_tuple_from_box_block@0:
        // tuple_support/nested_tuples.py:77
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64,uint64)%0#0
        // tuple_support/nested_tuples.py:79
        // return self.box[key]
        byte "box"                                                                                reinterpret_Encoded(uint64,uint64)%0#0,"box"
        l-load reinterpret_Encoded(uint64,uint64)%0#0 1                                           "box",reinterpret_Encoded(uint64,uint64)%0#0
        concat                                                                                    box_prefixed_key%0#0
        l-load box_prefixed_key%0#0 0                                                             box_prefixed_key%0#0
        box_get                                                                                   aggregate%box_get%0#0,aggregate%box_get%1#0
        l-load aggregate%box_get%1#0 0                                                            aggregate%box_get%0#0,aggregate%box_get%1#0
        assert // check self.box entry exists                                                     aggregate%box_get%0#0
        // tuple_support/nested_tuples.py:77
        // @arc4.abimethod()
        byte 0x151f7c75                                                                           aggregate%box_get%0#0,0x151f7c75
        l-load aggregate%box_get%0#0 1                                                            0x151f7c75,aggregate%box_get%0#0
        concat                                                                                    tmp%5#0
        l-load tmp%5#0 0                                                                          tmp%5#0
        log
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box[routing]() -> void:
subroutine maybe_load_tuple_from_box:
    maybe_load_tuple_from_box_block@0:
        // tuple_support/nested_tuples.py:81
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64,uint64)%0#0
        // tuple_support/nested_tuples.py:83
        // maybe_value, exists = self.box.maybe(key)
        byte "box"                                                                                reinterpret_Encoded(uint64,uint64)%0#0,"box"
        l-load reinterpret_Encoded(uint64,uint64)%0#0 1                                           "box",reinterpret_Encoded(uint64,uint64)%0#0
        concat                                                                                    box_prefixed_key%0#0
        l-load box_prefixed_key%0#0 0                                                             box_prefixed_key%0#0
        box_get                                                                                   maybe_value%0#0,exists#0
        l-store-copy exists#0 1                                                                   exists#0,maybe_value%0#0,exists#0 (copy)
        v-store exists#0                                                                          exists#0,maybe_value%0#0
        v-store maybe_value%0#0                                                                   exists#0
        l-load exists#0 0                                                                         exists#0
        bz maybe_load_tuple_from_box_ternary_false@3 ; b maybe_load_tuple_from_box_ternary_true@2 

    maybe_load_tuple_from_box_ternary_true@2:
        // tuple_support/nested_tuples.py:83
        // maybe_value, exists = self.box.maybe(key)
        v-load maybe_value%0#0                                                                    maybe_value%0#0
        l-store-copy maybe_value%0#0 0                                                            maybe_value%0#0,maybe_value%0#0 (copy)
        int 0                                                                                     maybe_value%0#0,maybe_value%0#0 (copy),0
        extract_uint64                                                                            maybe_value%0#0,aggregate%item0%0#0
        l-load maybe_value%0#0 1                                                                  aggregate%item0%0#0,maybe_value%0#0
        int 8                                                                                     aggregate%item0%0#0,maybe_value%0#0,8
        extract_uint64                                                                            aggregate%item0%0#0,aggregate%item1%0#0
        l-load aggregate%item1%0#0 0                                                              aggregate%item0%0#0,aggregate%item1%0#0
        v-store maybe_value.b#0                                                                   aggregate%item0%0#0
        l-load aggregate%item0%0#0 0                                                              aggregate%item0%0#0
        v-store maybe_value.a#0
        b maybe_load_tuple_from_box_ternary_merge@4

    maybe_load_tuple_from_box_ternary_false@3:
        // tuple_support/nested_tuples.py:83
        // maybe_value, exists = self.box.maybe(key)
        undefined                                                                                 undefined
        l-store ternary_result%0.a#1 0                                                            ternary_result%0.a#1
        undefined                                                                                 ternary_result%0.a#1,undefined
        l-store ternary_result%0.b#1 0                                                            ternary_result%0.a#1,ternary_result%0.b#1
        l-load ternary_result%0.b#1 0                                                             ternary_result%0.a#1,ternary_result%0.b#1
        v-store maybe_value.b#0                                                                   ternary_result%0.a#1
        l-load ternary_result%0.a#1 0                                                             ternary_result%0.a#1
        v-store maybe_value.a#0
        b maybe_load_tuple_from_box_ternary_merge@4

    maybe_load_tuple_from_box_ternary_merge@4:
        // tuple_support/nested_tuples.py:81
        // @arc4.abimethod()
        v-load maybe_value.a#0                                                                    maybe_value.a#0
        itob                                                                                      aggregate%val_as_bytes%0#0
        v-load maybe_value.b#0                                                                    aggregate%val_as_bytes%0#0,maybe_value.b#0
        itob                                                                                      aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        l-load aggregate%val_as_bytes%0#0 1                                                       aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%0#0
        l-load aggregate%val_as_bytes%1#0 1                                                       aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        concat                                                                                    aggregate%head%1#0
        byte 0x00                                                                                 aggregate%head%1#0,0x00
        int 0                                                                                     aggregate%head%1#0,0x00,0
        v-load exists#0                                                                           aggregate%head%1#0,0x00,0,exists#0
        setbit                                                                                    aggregate%head%1#0,aggregate%encoded_bool%0#0
        l-load aggregate%head%1#0 1                                                               aggregate%encoded_bool%0#0,aggregate%head%1#0
        l-load aggregate%encoded_bool%0#0 1                                                       aggregate%head%1#0,aggregate%encoded_bool%0#0
        concat                                                                                    aggregate%head%3#0
        byte 0x151f7c75                                                                           aggregate%head%3#0,0x151f7c75
        l-load aggregate%head%3#0 1                                                               0x151f7c75,aggregate%head%3#0
        concat                                                                                    tmp%6#0
        l-load tmp%6#0 0                                                                          tmp%6#0
        log
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default[routing]() -> void:
subroutine load_tuple_from_box_or_default:
    load_tuple_from_box_or_default_block@0:
        // tuple_support/nested_tuples.py:86
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64,uint64)%0#0
        // tuple_support/nested_tuples.py:88
        // return self.box.get(key, default=simple_tup(UInt64(4), UInt64(2)))
        byte "box"                                                                                reinterpret_Encoded(uint64,uint64)%0#0,"box"
        l-load reinterpret_Encoded(uint64,uint64)%0#0 1                                           "box",reinterpret_Encoded(uint64,uint64)%0#0
        concat                                                                                    box_prefixed_key%0#0
        int 4                                                                                     box_prefixed_key%0#0,4
        int 2                                                                                     box_prefixed_key%0#0,4,2
        callsub simple_tup                                                                        box_prefixed_key%0#0,tmp%0#1,tmp%1#1
        v-store tmp%1#1                                                                           box_prefixed_key%0#0,tmp%0#1
        v-store tmp%0#1                                                                           box_prefixed_key%0#0
        l-load box_prefixed_key%0#0 0                                                             box_prefixed_key%0#0
        box_get                                                                                   maybe_value%0#0,maybe_exists%0#0
        l-store maybe_exists%0#0 1                                                                maybe_exists%0#0,maybe_value%0#0
        v-store maybe_value%0#0                                                                   maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                 maybe_exists%0#0
        bz load_tuple_from_box_or_default_ternary_false@3 ; b load_tuple_from_box_or_default_ternary_true@2 

    load_tuple_from_box_or_default_ternary_true@2:
        // tuple_support/nested_tuples.py:88
        // return self.box.get(key, default=simple_tup(UInt64(4), UInt64(2)))
        v-load maybe_value%0#0                                                                    maybe_value%0#0
        l-store-copy maybe_value%0#0 0                                                            maybe_value%0#0,maybe_value%0#0 (copy)
        int 0                                                                                     maybe_value%0#0,maybe_value%0#0 (copy),0
        extract_uint64                                                                            maybe_value%0#0,aggregate%item0%0#0
        l-load maybe_value%0#0 1                                                                  aggregate%item0%0#0,maybe_value%0#0
        int 8                                                                                     aggregate%item0%0#0,maybe_value%0#0,8
        extract_uint64                                                                            aggregate%item0%0#0,aggregate%item1%0#0
        l-load aggregate%item1%0#0 0                                                              aggregate%item0%0#0,aggregate%item1%0#0
        v-store ternary_result%0.b#2                                                              aggregate%item0%0#0
        l-load aggregate%item0%0#0 0                                                              aggregate%item0%0#0
        v-store ternary_result%0.a#2
        b load_tuple_from_box_or_default_ternary_merge@4

    load_tuple_from_box_or_default_ternary_false@3:
        v-load tmp%1#1                                                                            tmp%1#1
        v-store ternary_result%0.b#2
        v-load tmp%0#1                                                                            tmp%0#1
        v-store ternary_result%0.a#2
        b load_tuple_from_box_or_default_ternary_merge@4

    load_tuple_from_box_or_default_ternary_merge@4:
        // tuple_support/nested_tuples.py:86
        // @arc4.abimethod()
        v-load ternary_result%0.a#2                                                               ternary_result%0.a#2
        itob                                                                                      aggregate%val_as_bytes%0#0
        v-load ternary_result%0.b#2                                                               aggregate%val_as_bytes%0#0,ternary_result%0.b#2
        itob                                                                                      aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        l-load aggregate%val_as_bytes%0#0 1                                                       aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%0#0
        l-load aggregate%val_as_bytes%1#0 1                                                       aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        concat                                                                                    aggregate%head%1#0
        byte 0x151f7c75                                                                           aggregate%head%1#0,0x151f7c75
        l-load aggregate%head%1#0 1                                                               0x151f7c75,aggregate%head%1#0
        concat                                                                                    tmp%5#0
        l-load tmp%5#0 0                                                                          tmp%5#0
        log
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default[routing]() -> void:
subroutine load_tuple_from_local_state_or_default:
    load_tuple_from_local_state_or_default_block@0:
        // tuple_support/nested_tuples.py:90
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(len+utf8[])%0#0
        l-load reinterpret_Encoded(len+utf8[])%0#0 0                                              reinterpret_Encoded(len+utf8[])%0#0
        extract 2 0                                                                               key#0
        // tuple_support/nested_tuples.py:92
        // local = LocalState(SimpleTup, key=echo(key))
        l-load key#0 0                                                                            key#0
        callsub echo                                                                              local#0
        // tuple_support/nested_tuples.py:93
        // return local.get(get_sender_inefficiently(), default=simple_tup(UInt64(4), UInt64(2)))
        callsub get_sender_inefficiently                                                          local#0,tmp%1#1
        int 4                                                                                     local#0,tmp%1#1,4
        int 2                                                                                     local#0,tmp%1#1,4,2
        callsub simple_tup                                                                        local#0,tmp%1#1,tmp%2#1,tmp%3#1
        v-store tmp%3#1                                                                           local#0,tmp%1#1,tmp%2#1
        v-store tmp%2#1                                                                           local#0,tmp%1#1
        l-load tmp%1#1 0                                                                          local#0,tmp%1#1
        int 0                                                                                     local#0,tmp%1#1,0
        l-load local#0 2                                                                          tmp%1#1,0,local#0
        app_local_get_ex                                                                          maybe_value%0#0,maybe_exists%0#0
        l-store maybe_exists%0#0 1                                                                maybe_exists%0#0,maybe_value%0#0
        v-store maybe_value%0#0                                                                   maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                 maybe_exists%0#0
        bz load_tuple_from_local_state_or_default_ternary_false@3 ; b load_tuple_from_local_state_or_default_ternary_true@2 

    load_tuple_from_local_state_or_default_ternary_true@2:
        // tuple_support/nested_tuples.py:93
        // return local.get(get_sender_inefficiently(), default=simple_tup(UInt64(4), UInt64(2)))
        v-load maybe_value%0#0                                                                    maybe_value%0#0
        l-store-copy maybe_value%0#0 0                                                            maybe_value%0#0,maybe_value%0#0 (copy)
        int 0                                                                                     maybe_value%0#0,maybe_value%0#0 (copy),0
        extract_uint64                                                                            maybe_value%0#0,aggregate%item0%0#0
        l-load maybe_value%0#0 1                                                                  aggregate%item0%0#0,maybe_value%0#0
        int 8                                                                                     aggregate%item0%0#0,maybe_value%0#0,8
        extract_uint64                                                                            aggregate%item0%0#0,aggregate%item1%0#0
        l-load aggregate%item1%0#0 0                                                              aggregate%item0%0#0,aggregate%item1%0#0
        v-store ternary_result%0.b#2                                                              aggregate%item0%0#0
        l-load aggregate%item0%0#0 0                                                              aggregate%item0%0#0
        v-store ternary_result%0.a#2
        b load_tuple_from_local_state_or_default_ternary_merge@4

    load_tuple_from_local_state_or_default_ternary_false@3:
        v-load tmp%3#1                                                                            tmp%3#1
        v-store ternary_result%0.b#2
        v-load tmp%2#1                                                                            tmp%2#1
        v-store ternary_result%0.a#2
        b load_tuple_from_local_state_or_default_ternary_merge@4

    load_tuple_from_local_state_or_default_ternary_merge@4:
        // tuple_support/nested_tuples.py:90
        // @arc4.abimethod()
        v-load ternary_result%0.a#2                                                               ternary_result%0.a#2
        itob                                                                                      aggregate%val_as_bytes%0#0
        v-load ternary_result%0.b#2                                                               aggregate%val_as_bytes%0#0,ternary_result%0.b#2
        itob                                                                                      aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        l-load aggregate%val_as_bytes%0#0 1                                                       aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%0#0
        l-load aggregate%val_as_bytes%1#0 1                                                       aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        concat                                                                                    aggregate%head%1#0
        byte 0x151f7c75                                                                           aggregate%head%1#0,0x151f7c75
        l-load aggregate%head%1#0 1                                                               0x151f7c75,aggregate%head%1#0
        concat                                                                                    tmp%4#0
        l-load tmp%4#0 0                                                                          tmp%4#0
        log
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple[routing]() -> void:
subroutine mutate_local_tuple:
    mutate_local_tuple_block@0:
        // tuple_support/nested_tuples.py:107
        // for i in urange(3):
        int 0                                                                                     0
        v-store i#0
        b mutate_local_tuple_for_header@2

    mutate_local_tuple_for_header@2:
        // tuple_support/nested_tuples.py:107
        // for i in urange(3):
        v-load i#0                                                                                i#0
        int 3                                                                                     i#0,3
        <                                                                                         continue_looping%0#0
        l-load continue_looping%0#0 0                                                             continue_looping%0#0
        bz mutate_local_tuple_after_for@5 ; b mutate_local_tuple_for_body@3

    mutate_local_tuple_for_body@3:
        // tuple_support/nested_tuples.py:108
        // assert twm.arr[i] == i
        v-load i#0                                                                                i#0
        l-store-copy i#0 0                                                                        i#0,i#0 (copy)
        int 8                                                                                     i#0,i#0 (copy),8
        *                                                                                         i#0,aggregate%bytes_offset%0#0
        byte 0x000000000000000000000000000000010000000000000002                                   i#0,aggregate%bytes_offset%0#0,0x000000000000000000000000000000010000000000000002
        l-load aggregate%bytes_offset%0#0 1                                                       i#0,0x000000000000000000000000000000010000000000000002,aggregate%bytes_offset%0#0
        int 8                                                                                     i#0,0x000000000000000000000000000000010000000000000002,aggregate%bytes_offset%0#0,8
        extract3 // on error: index access is out of bounds                                       i#0,aggregate%encoded_element%0#0
        l-load-copy i#0 1                                                                         i#0,aggregate%encoded_element%0#0,i#0 (copy)
        itob                                                                                      i#0,aggregate%encoded_element%0#0,tmp%2#1
        l-load aggregate%encoded_element%0#0 1                                                    i#0,tmp%2#1,aggregate%encoded_element%0#0
        l-load tmp%2#1 1                                                                          i#0,aggregate%encoded_element%0#0,tmp%2#1
        b==                                                                                       i#0,tmp%3#1
        l-load tmp%3#1 0                                                                          i#0,tmp%3#1
        assert                                                                                    i#0
        // tuple_support/nested_tuples.py:107
        // for i in urange(3):
        l-load i#0 0                                                                              i#0
        int 1                                                                                     i#0,1
        +                                                                                         i#0
        v-store i#0
        b mutate_local_tuple_for_header@2

    mutate_local_tuple_after_for@5:
        // tuple_support/nested_tuples.py:95
        // @arc4.abimethod()
        byte 0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000 0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000
        log
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method[routing]() -> void:
subroutine mutate_tuple_in_storage_currently_supported_method:
    mutate_tuple_in_storage_currently_supported_method_block@0:
        // tuple_support/nested_tuples.py:116
        // arr2 = self.twm.arr.copy()
        int 0                                                                                     0
        byte "twm"                                                                                0,"twm"
        app_global_get_ex                                                                         maybe_value%0#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                                 maybe_value%0#0,maybe_exists%0#0
        assert // check self.twm exists                                                           maybe_value%0#0
        l-load-copy maybe_value%0#0 0                                                             maybe_value%0#0,maybe_value%0#0 (copy)
        int 0                                                                                     maybe_value%0#0,maybe_value%0#0 (copy),0
        extract_uint16                                                                            maybe_value%0#0,aggregate%extract_uint16%0#0
        l-load-copy maybe_value%0#0 1                                                             maybe_value%0#0,aggregate%extract_uint16%0#0,maybe_value%0#0 (copy)
        int 2                                                                                     maybe_value%0#0,aggregate%extract_uint16%0#0,maybe_value%0#0 (copy),2
        extract_uint16                                                                            maybe_value%0#0,aggregate%extract_uint16%0#0,aggregate%extract_uint16%1#0
        l-load-copy maybe_value%0#0 2                                                             maybe_value%0#0,aggregate%extract_uint16%0#0,aggregate%extract_uint16%1#0,maybe_value%0#0 (copy)
        l-load aggregate%extract_uint16%0#0 2                                                     maybe_value%0#0,aggregate%extract_uint16%1#0,maybe_value%0#0 (copy),aggregate%extract_uint16%0#0
        l-load-copy aggregate%extract_uint16%1#0 2                                                maybe_value%0#0,aggregate%extract_uint16%1#0,maybe_value%0#0 (copy),aggregate%extract_uint16%0#0,aggregate%extract_uint16%1#0 (copy)
        substring3                                                                                maybe_value%0#0,aggregate%extract_uint16%1#0,arr2#0
        // tuple_support/nested_tuples.py:117
        // arr2.append(arc4.UInt64(1))
        l-load-copy arr2#0 0                                                                      maybe_value%0#0,aggregate%extract_uint16%1#0,arr2#0,arr2#0 (copy)
        byte 0x0000000000000001                                                                   maybe_value%0#0,aggregate%extract_uint16%1#0,arr2#0,arr2#0 (copy),0x0000000000000001
        concat // on error: max array length exceeded                                             maybe_value%0#0,aggregate%extract_uint16%1#0,arr2#0,concat%0#0
        l-load arr2#0 1                                                                           maybe_value%0#0,aggregate%extract_uint16%1#0,concat%0#0,arr2#0
        int 0                                                                                     maybe_value%0#0,aggregate%extract_uint16%1#0,concat%0#0,arr2#0,0
        extract_uint16                                                                            maybe_value%0#0,aggregate%extract_uint16%1#0,concat%0#0,extract_uint16%0#0
        l-load extract_uint16%0#0 0                                                               maybe_value%0#0,aggregate%extract_uint16%1#0,concat%0#0,extract_uint16%0#0
        int 1                                                                                     maybe_value%0#0,aggregate%extract_uint16%1#0,concat%0#0,extract_uint16%0#0,1
        +                                                                                         maybe_value%0#0,aggregate%extract_uint16%1#0,concat%0#0,add%0#0
        l-load add%0#0 0                                                                          maybe_value%0#0,aggregate%extract_uint16%1#0,concat%0#0,add%0#0
        itob                                                                                      maybe_value%0#0,aggregate%extract_uint16%1#0,concat%0#0,as_bytes%0#0
        l-load as_bytes%0#0 0                                                                     maybe_value%0#0,aggregate%extract_uint16%1#0,concat%0#0,as_bytes%0#0
        extract 6 2                                                                               maybe_value%0#0,aggregate%extract_uint16%1#0,concat%0#0,as_u16_bytes%0#0
        l-load concat%0#0 1                                                                       maybe_value%0#0,aggregate%extract_uint16%1#0,as_u16_bytes%0#0,concat%0#0
        l-load as_u16_bytes%0#0 1                                                                 maybe_value%0#0,aggregate%extract_uint16%1#0,concat%0#0,as_u16_bytes%0#0
        replace2 0                                                                                maybe_value%0#0,aggregate%extract_uint16%1#0,arr2#0
        // tuple_support/nested_tuples.py:118
        // self.twm = self.twm._replace(arr=arr2.copy())
        l-load-copy maybe_value%0#0 2                                                             maybe_value%0#0,aggregate%extract_uint16%1#0,arr2#0,maybe_value%0#0 (copy)
        len                                                                                       maybe_value%0#0,aggregate%extract_uint16%1#0,arr2#0,aggregate%len%2#0
        l-load maybe_value%0#0 3                                                                  aggregate%extract_uint16%1#0,arr2#0,aggregate%len%2#0,maybe_value%0#0
        l-load aggregate%extract_uint16%1#0 3                                                     arr2#0,aggregate%len%2#0,maybe_value%0#0,aggregate%extract_uint16%1#0
        l-load aggregate%len%2#0 2                                                                arr2#0,maybe_value%0#0,aggregate%extract_uint16%1#0,aggregate%len%2#0
        substring3                                                                                arr2#0,aggregate%substring3%5#0
        l-load-copy aggregate%substring3%5#0 0                                                    arr2#0,aggregate%substring3%5#0,aggregate%substring3%5#0 (copy)
        extract 0 8                                                                               arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0
        l-load-copy aggregate%substring3%5#0 1                                                    arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%substring3%5#0 (copy)
        int 8                                                                                     arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%substring3%5#0 (copy),8
        extract_uint16                                                                            arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%extract_uint16%9#0
        l-load-copy aggregate%substring3%5#0 2                                                    arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%extract_uint16%9#0,aggregate%substring3%5#0 (copy)
        int 10                                                                                    arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%extract_uint16%9#0,aggregate%substring3%5#0 (copy),10
        extract_uint16                                                                            arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%extract_uint16%9#0,aggregate%extract_uint16%10#0
        l-load-copy aggregate%substring3%5#0 3                                                    arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%extract_uint16%9#0,aggregate%extract_uint16%10#0,aggregate%substring3%5#0 (copy)
        l-load aggregate%extract_uint16%9#0 2                                                     arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%extract_uint16%10#0,aggregate%substring3%5#0 (copy),aggregate%extract_uint16%9#0
        l-load-copy aggregate%extract_uint16%10#0 2                                               arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%extract_uint16%10#0,aggregate%substring3%5#0 (copy),aggregate%extract_uint16%9#0,aggregate%extract_uint16%10#0 (copy)
        substring3                                                                                arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%extract_uint16%10#0,aggregate%substring3%6#0
        l-load aggregate%substring3%6#0 0                                                         arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%extract_uint16%10#0,aggregate%substring3%6#0
        extract 2 0                                                                               arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%extract_uint16%10#0,aggregate%item1%1#0
        l-load-copy aggregate%substring3%5#0 3                                                    arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%extract_uint16%10#0,aggregate%item1%1#0,aggregate%substring3%5#0 (copy)
        len                                                                                       arr2#0,aggregate%substring3%5#0,aggregate%extract%1#0,aggregate%extract_uint16%10#0,aggregate%item1%1#0,aggregate%len%3#0
        l-load aggregate%substring3%5#0 4                                                         arr2#0,aggregate%extract%1#0,aggregate%extract_uint16%10#0,aggregate%item1%1#0,aggregate%len%3#0,aggregate%substring3%5#0
        l-load aggregate%extract_uint16%10#0 3                                                    arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%len%3#0,aggregate%substring3%5#0,aggregate%extract_uint16%10#0
        l-load aggregate%len%3#0 2                                                                arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%substring3%5#0,aggregate%extract_uint16%10#0,aggregate%len%3#0
        substring3                                                                                arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%substring3%7#0
        l-load aggregate%substring3%7#0 0                                                         arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%substring3%7#0
        extract 2 0                                                                               arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0
        l-load-copy arr2#0 3                                                                      arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0,arr2#0 (copy)
        len                                                                                       arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0,aggregate%data_length%0#0
        int 4                                                                                     arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0,aggregate%data_length%0#0,4
        l-load aggregate%data_length%0#0 1                                                        arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0,4,aggregate%data_length%0#0
        +                                                                                         arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0
        l-load-copy aggregate%item1%1#0 2                                                         arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%item1%1#0 (copy)
        len                                                                                       arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%length%0#0
        l-load aggregate%length%0#0 0                                                             arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%length%0#0
        itob                                                                                      arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%as_bytes%1#0
        l-load aggregate%as_bytes%1#0 0                                                           arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%as_bytes%1#0
        extract 6 2                                                                               arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%length_uint16%0#0
        l-load aggregate%length_uint16%0#0 0                                                      arr2#0,aggregate%extract%1#0,aggregate%item1%1#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%length_uint16%0#0
        l-load aggregate%item1%1#0 3                                                              arr2#0,aggregate%extract%1#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%length_uint16%0#0,aggregate%item1%1#0
        concat                                                                                    arr2#0,aggregate%extract%1#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0
        l-load aggregate%extract%1#0 3                                                            arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%extract%1#0
        byte 0x000c                                                                               arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%extract%1#0,0x000c
        concat                                                                                    arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0
        l-load-copy aggregate%encoded_value%0#0 1                                                 arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%encoded_value%0#0 (copy)
        len                                                                                       arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%data_length%1#0
        int 12                                                                                    arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%data_length%1#0,12
        l-load aggregate%data_length%1#0 1                                                        arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,12,aggregate%data_length%1#0
        +                                                                                         arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%current_tail_offset%1#0
        l-load-copy aggregate%item2%1#0 4                                                         arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%current_tail_offset%1#0,aggregate%item2%1#0 (copy)
        len                                                                                       arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%current_tail_offset%1#0,aggregate%length%1#0
        l-load aggregate%length%1#0 0                                                             arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%current_tail_offset%1#0,aggregate%length%1#0
        itob                                                                                      arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%current_tail_offset%1#0,aggregate%as_bytes%3#0
        l-load aggregate%as_bytes%3#0 0                                                           arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%current_tail_offset%1#0,aggregate%as_bytes%3#0
        extract 6 2                                                                               arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%current_tail_offset%1#0,aggregate%length_uint16%1#0
        l-load aggregate%length_uint16%1#0 0                                                      arr2#0,aggregate%item2%1#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%current_tail_offset%1#0,aggregate%length_uint16%1#0
        l-load aggregate%item2%1#0 5                                                              arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%current_tail_offset%1#0,aggregate%length_uint16%1#0,aggregate%item2%1#0
        concat                                                                                    arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%current_tail_offset%1#0,aggregate%encoded_value%1#0
        l-load aggregate%current_tail_offset%1#0 1                                                arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%encoded_value%1#0,aggregate%current_tail_offset%1#0
        itob                                                                                      arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%encoded_value%1#0,aggregate%as_bytes%4#0
        l-load aggregate%as_bytes%4#0 0                                                           arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%encoded_value%1#0,aggregate%as_bytes%4#0
        extract 6 2                                                                               arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%head%3#0,aggregate%encoded_value%1#0,aggregate%offset_as_uint16%2#0
        l-load aggregate%head%3#0 2                                                               arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%encoded_value%1#0,aggregate%offset_as_uint16%2#0,aggregate%head%3#0
        l-load aggregate%offset_as_uint16%2#0 1                                                   arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%encoded_value%1#0,aggregate%head%3#0,aggregate%offset_as_uint16%2#0
        concat                                                                                    arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%encoded_value%1#0,aggregate%head%4#0
        l-load aggregate%head%4#0 0                                                               arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%0#0,aggregate%encoded_value%1#0,aggregate%head%4#0
        l-load aggregate%encoded_value%0#0 2                                                      arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%1#0,aggregate%head%4#0,aggregate%encoded_value%0#0
        concat                                                                                    arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%1#0,aggregate%concat%0#0
        l-load aggregate%concat%0#0 0                                                             arr2#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%1#0,aggregate%concat%0#0
        l-load aggregate%encoded_value%1#0 1                                                      arr2#0,aggregate%current_tail_offset%0#0,aggregate%concat%0#0,aggregate%encoded_value%1#0
        concat                                                                                    arr2#0,aggregate%current_tail_offset%0#0,aggregate%concat%1#0
        l-load aggregate%current_tail_offset%0#0 1                                                arr2#0,aggregate%concat%1#0,aggregate%current_tail_offset%0#0
        itob                                                                                      arr2#0,aggregate%concat%1#0,aggregate%as_bytes%5#0
        l-load aggregate%as_bytes%5#0 0                                                           arr2#0,aggregate%concat%1#0,aggregate%as_bytes%5#0
        extract 6 2                                                                               arr2#0,aggregate%concat%1#0,aggregate%offset_as_uint16%3#0
        byte 0x0004                                                                               arr2#0,aggregate%concat%1#0,aggregate%offset_as_uint16%3#0,0x0004
        l-load aggregate%offset_as_uint16%3#0 1                                                   arr2#0,aggregate%concat%1#0,0x0004,aggregate%offset_as_uint16%3#0
        concat                                                                                    arr2#0,aggregate%concat%1#0,aggregate%head%5#0
        l-load aggregate%head%5#0 0                                                               arr2#0,aggregate%concat%1#0,aggregate%head%5#0
        l-load arr2#0 2                                                                           aggregate%concat%1#0,aggregate%head%5#0,arr2#0
        concat                                                                                    aggregate%concat%1#0,aggregate%concat%2#0
        l-load aggregate%concat%2#0 0                                                             aggregate%concat%1#0,aggregate%concat%2#0
        l-load aggregate%concat%1#0 1                                                             aggregate%concat%2#0,aggregate%concat%1#0
        concat                                                                                    aggregate%concat%3#0
        byte "twm"                                                                                aggregate%concat%3#0,"twm"
        l-load aggregate%concat%3#0 1                                                             "twm",aggregate%concat%3#0
        app_global_put
        // tuple_support/nested_tuples.py:114
        // @arc4.abimethod()
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.run_tests[routing]() -> void:
subroutine run_tests:
    run_tests_block@0:
        // tuple_support/nested_tuples.py:136
        // test_intrinsics(UInt64(1), UInt64(2))
        int 1                                                                                     1
        int 2                                                                                     1,2
        // tuple_support/nested_tuples.py:214
        // nt = (UInt64(1), op.addw(num1, num2), UInt64(42))
        addw                                                                                      nt.1.0#0,nt.1.1#0
        // tuple_support/nested_tuples.py:217
        // assert nt[1] == (0, num1 + num2)  # type: ignore[comparison-overlap]
        l-load nt.1.0#0 1                                                                         nt.1.1#0,nt.1.0#0
        !                                                                                         nt.1.1#0,tmp%4#0
        l-load nt.1.1#0 1                                                                         tmp%4#0,nt.1.1#0
        int 3                                                                                     tmp%4#0,nt.1.1#0,3
        ==                                                                                        tmp%4#0,tmp%6#0
        l-load-copy tmp%4#0 1                                                                     tmp%4#0,tmp%6#0,tmp%4#0 (copy)
        l-load-copy tmp%6#0 1                                                                     tmp%4#0,tmp%6#0,tmp%4#0 (copy),tmp%6#0 (copy)
        &&                                                                                        tmp%4#0,tmp%6#0,tmp%7#0
        l-load tmp%7#0 0                                                                          tmp%4#0,tmp%6#0,tmp%7#0
        assert                                                                                    tmp%4#0,tmp%6#0
        // tuple_support/nested_tuples.py:218
        // assert nt[1][:1] == (0,)  # type: ignore[comparison-overlap]
        l-load tmp%4#0 1                                                                          tmp%6#0,tmp%4#0
        assert                                                                                    tmp%6#0
        // tuple_support/nested_tuples.py:219
        // assert nt[1][1:] == (num1 + num2,)
        l-load tmp%6#0 0                                                                          tmp%6#0
        assert
        // tuple_support/nested_tuples.py:138
        // test_nested_singles(UInt64(1), reassign=True)
        int 1                                                                                     1
        int 1                                                                                     1,1
        callsub test_nested_singles
        // tuple_support/nested_tuples.py:139
        // test_nested_singles(UInt64(1), reassign=False)
        int 1                                                                                     1
        int 0                                                                                     1,0
        callsub test_nested_singles
        // tuple_support/nested_tuples.py:295
        // total = UInt64(0)
        int 0                                                                                     0
        v-store total#0
        int 0                                                                                     0
        v-store loop_counter%0#0
        // tuple_support/nested_tuples.py:293
        // x = UInt64(1)
        int 1                                                                                     1
        // tuple_support/nested_tuples.py:297
        // for t in ((x, y), (y, x), (x, x), (y, y)):
        v-store t.0#0
        // tuple_support/nested_tuples.py:294
        // y = UInt64(2)
        int 2                                                                                     2
        // tuple_support/nested_tuples.py:297
        // for t in ((x, y), (y, x), (x, x), (y, y)):
        v-store t.1#0
        b run_tests_for_body@12

    run_tests_for_body@12:
        // tuple_support/nested_tuples.py:299
        // total += a + b
        v-load t.0#0                                                                              t.0#0
        v-load t.1#0                                                                              t.0#0,t.1#0
        +                                                                                         tmp%0#3
        v-load total#0                                                                            tmp%0#3,total#0
        l-load tmp%0#3 1                                                                          total#0,tmp%0#3
        +                                                                                         total#0
        v-store total#0
        // tuple_support/nested_tuples.py:297
        // for t in ((x, y), (y, x), (x, x), (y, y)):
        v-load loop_counter%0#0                                                                   loop_counter%0#0
        switch run_tests_for_header_1@13 run_tests_for_header_2@14 run_tests_for_header_3@15 ; b run_tests_after_for@16 

    run_tests_for_header_1@13:
        int 1                                                                                     1
        v-store loop_counter%0#0
        // tuple_support/nested_tuples.py:294
        // y = UInt64(2)
        int 2                                                                                     2
        // tuple_support/nested_tuples.py:297
        // for t in ((x, y), (y, x), (x, x), (y, y)):
        v-store t.0#0
        // tuple_support/nested_tuples.py:293
        // x = UInt64(1)
        int 1                                                                                     1
        // tuple_support/nested_tuples.py:297
        // for t in ((x, y), (y, x), (x, x), (y, y)):
        v-store t.1#0
        b run_tests_for_body@12

    run_tests_for_header_2@14:
        int 2                                                                                     2
        v-store loop_counter%0#0
        // tuple_support/nested_tuples.py:293
        // x = UInt64(1)
        int 1                                                                                     1
        // tuple_support/nested_tuples.py:297
        // for t in ((x, y), (y, x), (x, x), (y, y)):
        v-store t.0#0
        // tuple_support/nested_tuples.py:293
        // x = UInt64(1)
        int 1                                                                                     1
        // tuple_support/nested_tuples.py:297
        // for t in ((x, y), (y, x), (x, x), (y, y)):
        v-store t.1#0
        b run_tests_for_body@12

    run_tests_for_header_3@15:
        int 3                                                                                     3
        v-store loop_counter%0#0
        // tuple_support/nested_tuples.py:294
        // y = UInt64(2)
        int 2                                                                                     2
        // tuple_support/nested_tuples.py:297
        // for t in ((x, y), (y, x), (x, x), (y, y)):
        v-store t.0#0
        // tuple_support/nested_tuples.py:294
        // y = UInt64(2)
        int 2                                                                                     2
        // tuple_support/nested_tuples.py:297
        // for t in ((x, y), (y, x), (x, x), (y, y)):
        v-store t.1#0
        b run_tests_for_body@12

    run_tests_after_for@16:
        int 0                                                                                     0
        v-store loop_counter%1#0
        // tuple_support/nested_tuples.py:293
        // x = UInt64(1)
        int 1                                                                                     1
        // tuple_support/nested_tuples.py:301
        // for a, b in ((x, y), (y, x), (x, x), (y, y)):
        v-store a#2
        // tuple_support/nested_tuples.py:294
        // y = UInt64(2)
        int 2                                                                                     2
        // tuple_support/nested_tuples.py:301
        // for a, b in ((x, y), (y, x), (x, x), (y, y)):
        v-store b#2
        b run_tests_for_body@17

    run_tests_for_body@17:
        // tuple_support/nested_tuples.py:302
        // total += a + b
        v-load a#2                                                                                a#2
        v-load b#2                                                                                a#2,b#2
        +                                                                                         tmp%2#3
        v-load total#0                                                                            tmp%2#3,total#0
        l-load tmp%2#3 1                                                                          total#0,tmp%2#3
        +                                                                                         total#0
        v-store total#0
        // tuple_support/nested_tuples.py:301
        // for a, b in ((x, y), (y, x), (x, x), (y, y)):
        v-load loop_counter%1#0                                                                   loop_counter%1#0
        switch run_tests_for_header_1@18 run_tests_for_header_2@19 run_tests_for_header_3@20 ; b run_tests_after_for@21 

    run_tests_for_header_1@18:
        int 1                                                                                     1
        v-store loop_counter%1#0
        // tuple_support/nested_tuples.py:294
        // y = UInt64(2)
        int 2                                                                                     2
        // tuple_support/nested_tuples.py:301
        // for a, b in ((x, y), (y, x), (x, x), (y, y)):
        v-store a#2
        // tuple_support/nested_tuples.py:293
        // x = UInt64(1)
        int 1                                                                                     1
        // tuple_support/nested_tuples.py:301
        // for a, b in ((x, y), (y, x), (x, x), (y, y)):
        v-store b#2
        b run_tests_for_body@17

    run_tests_for_header_2@19:
        int 2                                                                                     2
        v-store loop_counter%1#0
        // tuple_support/nested_tuples.py:293
        // x = UInt64(1)
        int 1                                                                                     1
        // tuple_support/nested_tuples.py:301
        // for a, b in ((x, y), (y, x), (x, x), (y, y)):
        v-store a#2
        // tuple_support/nested_tuples.py:293
        // x = UInt64(1)
        int 1                                                                                     1
        // tuple_support/nested_tuples.py:301
        // for a, b in ((x, y), (y, x), (x, x), (y, y)):
        v-store b#2
        b run_tests_for_body@17

    run_tests_for_header_3@20:
        int 3                                                                                     3
        v-store loop_counter%1#0
        // tuple_support/nested_tuples.py:294
        // y = UInt64(2)
        int 2                                                                                     2
        // tuple_support/nested_tuples.py:301
        // for a, b in ((x, y), (y, x), (x, x), (y, y)):
        v-store a#2
        // tuple_support/nested_tuples.py:294
        // y = UInt64(2)
        int 2                                                                                     2
        // tuple_support/nested_tuples.py:301
        // for a, b in ((x, y), (y, x), (x, x), (y, y)):
        v-store b#2
        b run_tests_for_body@17

    run_tests_after_for@21:
        // tuple_support/nested_tuples.py:304
        // assert total // 8 == 3
        v-load total#0                                                                            total#0
        int 8                                                                                     total#0,8
        /                                                                                         tmp%4#1
        l-load tmp%4#1 0                                                                          tmp%4#1
        int 3                                                                                     tmp%4#1,3
        ==                                                                                        tmp%5#1
        l-load tmp%5#1 0                                                                          tmp%5#1
        assert
        // tuple_support/nested_tuples.py:168
        // self.build_nested_call_count += 1
        byte "build_nested_call_count"                                                            "build_nested_call_count"
        int 1                                                                                     "build_nested_call_count",1
        app_global_put
        // tuple_support/nested_tuples.py:120
        // @arc4.abimethod()
        byte 0x151f7c7580                                                                         0x151f7c7580
        log
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params[routing]() -> void:
subroutine nested_tuple_params:
    nested_tuple_params_block@0:
        // tuple_support/nested_tuples.py:149
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0
        l-load-copy reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 0              reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)
        int 0                                                                                     reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy),0
        extract_uint16                                                                            reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%0#0
        l-load-copy reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 1              reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%0#0,reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)
        int 2                                                                                     reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%0#0,reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy),2
        extract_uint16                                                                            reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%0#0,aggregate%extract_uint16%1#0
        l-load-copy reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 2              reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%0#0,aggregate%extract_uint16%1#0,reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)
        l-load aggregate%extract_uint16%0#0 2                                                     reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%1#0,reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy),aggregate%extract_uint16%0#0
        l-load-copy aggregate%extract_uint16%1#0 2                                                reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%1#0,reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy),aggregate%extract_uint16%0#0,aggregate%extract_uint16%1#0 (copy)
        substring3                                                                                reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%1#0,aggregate%substring3%0#0
        l-load aggregate%substring3%0#0 0                                                         reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%1#0,aggregate%substring3%0#0
        extract 2 0                                                                               reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%1#0,args.0#0
        l-load-copy reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 2              reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%1#0,args.0#0,reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 (copy)
        len                                                                                       reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%1#0,args.0#0,aggregate%len%0#0
        l-load reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 3                   aggregate%extract_uint16%1#0,args.0#0,aggregate%len%0#0,reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0
        l-load aggregate%extract_uint16%1#0 3                                                     args.0#0,aggregate%len%0#0,reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%1#0
        l-load aggregate%len%0#0 2                                                                args.0#0,reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0,aggregate%extract_uint16%1#0,aggregate%len%0#0
        substring3                                                                                args.0#0,aggregate%substring3%1#0
        l-load-copy aggregate%substring3%1#0 0                                                    args.0#0,aggregate%substring3%1#0,aggregate%substring3%1#0 (copy)
        int 0                                                                                     args.0#0,aggregate%substring3%1#0,aggregate%substring3%1#0 (copy),0
        extract_uint16                                                                            args.0#0,aggregate%substring3%1#0,aggregate%extract_uint16%3#0
        l-load-copy aggregate%substring3%1#0 1                                                    args.0#0,aggregate%substring3%1#0,aggregate%extract_uint16%3#0,aggregate%substring3%1#0 (copy)
        len                                                                                       args.0#0,aggregate%substring3%1#0,aggregate%extract_uint16%3#0,aggregate%len%1#0
        l-load-copy aggregate%substring3%1#0 2                                                    args.0#0,aggregate%substring3%1#0,aggregate%extract_uint16%3#0,aggregate%len%1#0,aggregate%substring3%1#0 (copy)
        l-load aggregate%extract_uint16%3#0 2                                                     args.0#0,aggregate%substring3%1#0,aggregate%len%1#0,aggregate%substring3%1#0 (copy),aggregate%extract_uint16%3#0
        l-load aggregate%len%1#0 2                                                                args.0#0,aggregate%substring3%1#0,aggregate%substring3%1#0 (copy),aggregate%extract_uint16%3#0,aggregate%len%1#0
        substring3                                                                                args.0#0,aggregate%substring3%1#0,aggregate%substring3%2#0
        l-load aggregate%substring3%2#0 0                                                         args.0#0,aggregate%substring3%1#0,aggregate%substring3%2#0
        extract 2 0                                                                               args.0#0,aggregate%substring3%1#0,args.1.0#0
        l-load aggregate%substring3%1#0 1                                                         args.0#0,args.1.0#0,aggregate%substring3%1#0
        extract 2 8                                                                               args.0#0,args.1.0#0,aggregate%extract%0#0
        l-load aggregate%extract%0#0 0                                                            args.0#0,args.1.0#0,aggregate%extract%0#0
        extract 0 8                                                                               args.0#0,args.1.0#0,aggregate%extract%1#0
        l-load-copy args.1.0#0 1                                                                  args.0#0,args.1.0#0,aggregate%extract%1#0,args.1.0#0 (copy)
        len                                                                                       args.0#0,args.1.0#0,aggregate%extract%1#0,aggregate%length%0#0
        l-load aggregate%length%0#0 0                                                             args.0#0,args.1.0#0,aggregate%extract%1#0,aggregate%length%0#0
        itob                                                                                      args.0#0,args.1.0#0,aggregate%extract%1#0,aggregate%as_bytes%0#0
        l-load aggregate%as_bytes%0#0 0                                                           args.0#0,args.1.0#0,aggregate%extract%1#0,aggregate%as_bytes%0#0
        extract 6 2                                                                               args.0#0,args.1.0#0,aggregate%extract%1#0,aggregate%length_uint16%0#0
        l-load aggregate%length_uint16%0#0 0                                                      args.0#0,args.1.0#0,aggregate%extract%1#0,aggregate%length_uint16%0#0
        l-load args.1.0#0 2                                                                       args.0#0,aggregate%extract%1#0,aggregate%length_uint16%0#0,args.1.0#0
        concat                                                                                    args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0
        l-load-copy aggregate%encoded_value%0#0 0                                                 args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%encoded_value%0#0 (copy)
        len                                                                                       args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%data_length%0#0
        int 4                                                                                     args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%data_length%0#0,4
        l-load aggregate%data_length%0#0 1                                                        args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0,4,aggregate%data_length%0#0
        +                                                                                         args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0
        l-load-copy args.0#0 3                                                                    args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,args.0#0 (copy)
        len                                                                                       args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%length%1#0
        l-load aggregate%length%1#0 0                                                             args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%length%1#0
        itob                                                                                      args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%as_bytes%2#0
        l-load aggregate%as_bytes%2#0 0                                                           args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%as_bytes%2#0
        extract 6 2                                                                               args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%length_uint16%1#0
        l-load aggregate%length_uint16%1#0 0                                                      args.0#0,aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%length_uint16%1#0
        l-load args.0#0 4                                                                         aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%length_uint16%1#0,args.0#0
        concat                                                                                    aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%1#0
        byte 0x000a                                                                               aggregate%extract%1#0,aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%1#0,0x000a
        l-load aggregate%extract%1#0 4                                                            aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%1#0,0x000a,aggregate%extract%1#0
        concat                                                                                    aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%1#0,aggregate%head%2#0
        l-load aggregate%head%2#0 0                                                               aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%encoded_value%1#0,aggregate%head%2#0
        l-load aggregate%encoded_value%1#0 1                                                      aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%head%2#0,aggregate%encoded_value%1#0
        concat                                                                                    aggregate%encoded_value%0#0,aggregate%current_tail_offset%0#0,aggregate%concat%0#0
        l-load aggregate%current_tail_offset%0#0 1                                                aggregate%encoded_value%0#0,aggregate%concat%0#0,aggregate%current_tail_offset%0#0
        itob                                                                                      aggregate%encoded_value%0#0,aggregate%concat%0#0,aggregate%as_bytes%4#0
        l-load aggregate%as_bytes%4#0 0                                                           aggregate%encoded_value%0#0,aggregate%concat%0#0,aggregate%as_bytes%4#0
        extract 6 2                                                                               aggregate%encoded_value%0#0,aggregate%concat%0#0,aggregate%offset_as_uint16%2#0
        byte 0x0004                                                                               aggregate%encoded_value%0#0,aggregate%concat%0#0,aggregate%offset_as_uint16%2#0,0x0004
        l-load aggregate%offset_as_uint16%2#0 1                                                   aggregate%encoded_value%0#0,aggregate%concat%0#0,0x0004,aggregate%offset_as_uint16%2#0
        concat                                                                                    aggregate%encoded_value%0#0,aggregate%concat%0#0,aggregate%head%3#0
        l-load aggregate%head%3#0 0                                                               aggregate%encoded_value%0#0,aggregate%concat%0#0,aggregate%head%3#0
        l-load aggregate%encoded_value%0#0 2                                                      aggregate%concat%0#0,aggregate%head%3#0,aggregate%encoded_value%0#0
        concat                                                                                    aggregate%concat%0#0,aggregate%concat%1#0
        l-load aggregate%concat%1#0 0                                                             aggregate%concat%0#0,aggregate%concat%1#0
        l-load aggregate%concat%0#0 1                                                             aggregate%concat%1#0,aggregate%concat%0#0
        concat                                                                                    aggregate%concat%2#0
        byte 0x151f7c75                                                                           aggregate%concat%2#0,0x151f7c75
        l-load aggregate%concat%2#0 1                                                             0x151f7c75,aggregate%concat%2#0
        concat                                                                                    tmp%7#0
        l-load tmp%7#0 0                                                                          tmp%7#0
        log
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple[routing]() -> void:
subroutine named_tuple:
    named_tuple_block@0:
        // tuple_support/nested_tuples.py:156
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0
        byte 0x151f7c75                                                                           reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0,0x151f7c75
        l-load reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0 1                       0x151f7c75,reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0
        concat                                                                                    tmp%7#0
        l-load tmp%7#0 0                                                                          tmp%7#0
        log
        int 1                                                                                     1
        return


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params[routing]() -> void:
subroutine nested_named_tuple_params:
    nested_named_tuple_params_block@0:
        // tuple_support/nested_tuples.py:161
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0
        byte 0x151f7c75                                                                           reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0,0x151f7c75
        l-load reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0 1 0x151f7c75,reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0
        concat                                                                                    tmp%11#0
        l-load tmp%11#0 0                                                                         tmp%11#0
        log
        int 1                                                                                     1
        return


