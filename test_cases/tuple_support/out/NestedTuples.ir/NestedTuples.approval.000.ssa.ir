main test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.tuple_support.nested_tuples.NestedTuples.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.tuple_support.nested_tuples.get_sender_inefficiently() -> account:
    block@0: // L179
        (log "Order is important")
        let tmp%0#0: account = (txn Sender)
        return tmp%0#0

subroutine test_cases.tuple_support.nested_tuples.simple_tup(a: uint64, b: uint64) -> <uint64, uint64>:
    block@0: // L185
        (log "I'm just a simple tup")
        return a#0 b#0

subroutine test_cases.tuple_support.nested_tuples.echo(s: string) -> string:
    block@0: // L191
        (log "Is there an echo in here?")
        return s#0

subroutine test_cases.tuple_support.nested_tuples.test_rearrange(_a: string, args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: string, args.2.1.1: string, _b: string) -> <string, uint64, uint64, uint64, string>:
    block@0: // L197
        let a#0: uint64 = args.0#0
        let b#0: uint64 = args.1#0
        let c#0: uint64 = args.2.0#0
        let d#0: string = args.2.1.0#0
        let e#0: string = args.2.1.1#0
        return d#0 a#0 b#0 c#0 e#0

subroutine test_cases.tuple_support.nested_tuples.test_swap(args.0: string, args.1: string) -> <string, string>:
    block@0: // L206
        let a#0: string = args.0#0
        let b#0: string = args.1#0
        return b#0 a#0

subroutine test_cases.tuple_support.nested_tuples.test_intrinsics(num1: uint64, num2: uint64) -> void:
    block@0: // L212
        let (tmp%0#0: uint64, tmp%1#0: uint64) = (addw num1#0 num2#0)
        let (nt.0#0: uint64, nt.1.0#0: uint64, nt.1.1#0: uint64, nt.2#0: uint64) = (1u, tmp%0#0, tmp%1#0, 42u)
        let tmp%2#0: bool = (== nt.0#0 1u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== nt.2#0 42u)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== nt.1.0#0 0u)
        let tmp%5#0: uint64 = (+ num1#0 num2#0)
        let tmp%6#0: bool = (== nt.1.1#0 tmp%5#0)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (== nt.1.0#0 0u)
        (assert tmp%8#0)
        let tmp%9#0: uint64 = (+ num1#0 num2#0)
        let tmp%10#0: bool = (== nt.1.1#0 tmp%9#0)
        (assert tmp%10#0)
        let x#0: uint64 = nt.1.0#0
        let y#0: uint64 = nt.1.1#0
        let tmp%11#0: bool = (== x#0 0u)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = (+ num1#0 num2#0)
        let tmp%13#0: bool = (== y#0 tmp%12#0)
        (assert tmp%13#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing() -> void:
    block@0: // L225
        let (nt.0#0: uint64, nt.1#0: uint64, nt.2.0#0: uint64, nt.2.1.0#0: string, nt.2.1.1#0: string, nt.2.2#0: uint64, nt.3#0: uint64, nt.4#0: uint64) = (1u, 2u, 3u, "a", "b", 4u, 5u, 6u)
        let a#0: uint64 = nt.1#0
        let (b.0#0: uint64, b.1.0#0: string, b.1.1#0: string, b.2#0: uint64) = (nt.2.0#0, nt.2.1.0#0, nt.2.1.1#0, nt.2.2#0)
        let c#0: uint64 = nt.3#0
        let tmp%0#0: bool = (== b.2#0 4u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== a#0 2u)
        let tmp%2#0: bool = (== c#0 5u)
        let tmp%3#0: bool = (&& tmp%1#0 tmp%2#0)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== b.1.0#0 "a")
        let tmp%5#0: bool = (== b.1.1#0 "b")
        let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%6#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: bool) -> void:
    block@0: // L247
        let (s.0.0#0: uint64, s.1.0#0: uint64, s.2.0#0: uint64) = (0u, one#0, 2u)
        let tmp%0#0: bool = (== s.0.0#0 0u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== s.0.0#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: bool = (== s.1.0#0 1u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (== s.1.0#0 one#0)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== s.2.0#0 2u)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== s.2.0#0 2u)
        (assert tmp%5#0)
        let t.0#0: uint64 = s.1.0#0
        goto reassign#0 ? block@1 : block@2
    block@1: // if_body_L262
        let (s.0.0#1: uint64, s.1.0#1: uint64, s.2.0#1: uint64) = (3u, 4u, 5u)
        goto block@2
    block@2: // after_if_else_L261
        let s.0.0#2: uint64 = φ(s.0.0#0 <- block@0, s.0.0#1 <- block@1)
        let s.1.0#2: uint64 = φ(s.1.0#0 <- block@0, s.1.0#1 <- block@1)
        let s.2.0#2: uint64 = φ(s.2.0#0 <- block@0, s.2.0#1 <- block@1)
        let select%0#0: uint64 = (select 0u 3u reassign#0)
        let tmp%6#0: bool = (== s.0.0#2 select%0#0)
        (assert tmp%6#0)
        let tmp#0: uint64 = s.2.0#2
        let select%1#0: uint64 = (select 2u 5u reassign#0)
        let tmp%7#0: bool = (== tmp#0 select%1#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (== t.0#0 one#0)
        (assert tmp%8#0)
        let s0.0#0: uint64 = s.0.0#2
        let s1#0: uint64 = s.1.0#2
        let s2.0#0: uint64 = s.2.0#2
        let tmp%9#0: uint64 = (+ s1#0 one#0)
        let s1#1: uint64 = tmp%9#0
        let select%2#0: uint64 = (select 2u 5u reassign#0)
        let tmp%10#0: bool = (== s1#1 select%2#0)
        (assert tmp%10#0)
        let select%3#0: uint64 = (select 1u 4u reassign#0)
        let tmp%11#0: bool = (== s.1.0#2 select%3#0)
        (assert tmp%11#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation() -> void:
    block@0: // L278
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(0x0000000000000000)
        let x.0.0#0: Encoded(len+uint64[]) = (encoded_array%0#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(0x0000000000000001)
        let concat%0#0: Encoded(len+uint64[]) = (concat x.0.0#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 x.0.0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let x.0.0#1: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        let array_length%0#0: uint64 = (extract_uint16 x.0.0#1 0u)
        let tmp%1#0: bool = (== array_length%0#0 2u)
        (assert tmp%1#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.test_nested_iteration() -> void:
    block@0: // L291
        let x#0: uint64 = 1u
        let y#0: uint64 = 2u
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let (t.0#0: uint64, t.1#0: uint64) = (x#0, y#0)
        goto block@1
    block@1: // for_body_L298
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4, loop_counter%0#4 <- block@5)
        let t.0#1: uint64 = φ(t.0#0 <- block@0, t.0#2 <- block@3, t.0#3 <- block@4, t.0#4 <- block@5)
        let t.1#1: uint64 = φ(t.1#0 <- block@0, t.1#2 <- block@3, t.1#3 <- block@4, t.1#4 <- block@5)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3, total#2 <- block@4, total#2 <- block@5)
        let a#0: uint64 = t.0#1
        let b#0: uint64 = t.1#1
        let tmp%0#0: uint64 = (+ a#0 b#0)
        let tmp%1#0: uint64 = (+ total#1 tmp%0#0)
        let total#2: uint64 = tmp%1#0
        goto block@2
    block@2: // for_footer_L297
        goto_nth [block@3, block@4, block@5][loop_counter%0#1] else goto block@6
    block@3: // for_header_1_L297
        let loop_counter%0#2: uint64 = 1u
        let (t.0#2: uint64, t.1#2: uint64) = (y#0, x#0)
        goto block@1
    block@4: // for_header_2_L297
        let loop_counter%0#3: uint64 = 2u
        let (t.0#3: uint64, t.1#3: uint64) = (x#0, x#0)
        goto block@1
    block@5: // for_header_3_L297
        let loop_counter%0#4: uint64 = 3u
        let (t.0#4: uint64, t.1#4: uint64) = (y#0, y#0)
        goto block@1
    block@6: // after_for_L297
        let loop_counter%1#0: uint64 = 0u
        let (a#1: uint64, b#1: uint64) = (x#0, y#0)
        goto block@7
    block@7: // for_body_L302
        let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@6, loop_counter%1#2 <- block@9, loop_counter%1#3 <- block@10, loop_counter%1#4 <- block@11)
        let total#3: uint64 = φ(total#2 <- block@6, total#4 <- block@9, total#4 <- block@10, total#4 <- block@11)
        let a#2: uint64 = φ(a#1 <- block@6, a#3 <- block@9, a#4 <- block@10, a#5 <- block@11)
        let b#2: uint64 = φ(b#1 <- block@6, b#3 <- block@9, b#4 <- block@10, b#5 <- block@11)
        let tmp%2#0: uint64 = (+ a#2 b#2)
        let tmp%3#0: uint64 = (+ total#3 tmp%2#0)
        let total#4: uint64 = tmp%3#0
        goto block@8
    block@8: // for_footer_L301
        goto_nth [block@9, block@10, block@11][loop_counter%1#1] else goto block@12
    block@9: // for_header_1_L301
        let loop_counter%1#2: uint64 = 1u
        let (a#3: uint64, b#3: uint64) = (y#0, x#0)
        goto block@7
    block@10: // for_header_2_L301
        let loop_counter%1#3: uint64 = 2u
        let (a#4: uint64, b#4: uint64) = (x#0, x#0)
        goto block@7
    block@11: // for_header_3_L301
        let loop_counter%1#4: uint64 = 3u
        let (a#5: uint64, b#5: uint64) = (y#0, y#0)
        goto block@7
    block@12: // after_for_L301
        let tmp%4#0: uint64 = (/ total#4 8u)
        let tmp%5#0: bool = (== tmp%4#0 3u)
        (assert tmp%5#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__() -> bool:
    block@0: // L48
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@18
    block@1: // abi_routing_L48
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void" => block@2, method "load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])" => block@3, method "store_tuple_in_box((uint64,uint64))void" => block@4, method "is_tuple_in_box((uint64,uint64))bool" => block@5, method "load_tuple_from_box((uint64,uint64))(uint64,uint64)" => block@6, method "maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)" => block@7, method "load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)" => block@8, method "load_tuple_from_local_state_or_default(string)(uint64,uint64)" => block@9, method "mutate_local_tuple()(uint64[],(uint64,byte[],string))" => block@10, method "mutate_tuple_in_storage_currently_supported_method()void" => block@11, method "run_tests()bool" => block@12, method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))" => block@13, method "named_tuple((uint64,byte[],string))(uint64,byte[],string)" => block@14, method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))" => block@15, * => block@16}
    block@2: // store_tuple_route_L61
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0: Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[])) = (txna ApplicationArgs 1)
        let (tmp%7#0: uint64, tmp%8#0: Encoded(uint64), tmp%9#0: uint64, tmp%10#0: bytes, tmp%11#0: string, tmp%12#0: Encoded(len+(uint64,(len+uint8[]),(len+utf8[]))[])) = decode_bytes<((uint64,Encoded(uint64),(uint64,bytes,string,),),Encoded(len+(uint64,(len+uint8[]),(len+utf8[]))[]),)>(reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0)
        test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple(tmp%7#0, tmp%8#0, tmp%9#0, tmp%10#0, tmp%11#0, tmp%12#0)
        return 1u
    block@3: // load_tuple_route_L65
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let (tmp%17#0: uint64, tmp%18#0: Encoded(uint64), tmp%19#0: uint64, tmp%20#0: bytes, tmp%21#0: string, tmp%22#0: Encoded(len+(uint64,(len+uint8[]),(len+utf8[]))[])) = test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple()
        let tmp%23#0: Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[])) = bytes_encode<((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))>(tmp%17#0, tmp%18#0, tmp%19#0, tmp%20#0, tmp%21#0, tmp%22#0)
        let tmp%24#0: bytes = (concat 0x151f7c75 tmp%23#0)
        (log tmp%24#0)
        return 1u
    block@4: // store_tuple_in_box_route_L69
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (== tmp%25#0 NoOp)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%28#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let (tmp%29#0: uint64, tmp%30#0: uint64) = decode_bytes<(uint64,uint64,)>(reinterpret_Encoded(uint64,uint64)%0#0)
        test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box(tmp%29#0, tmp%30#0)
        return 1u
    block@5: // is_tuple_in_box_route_L73
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (== tmp%31#0 NoOp)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (!= tmp%33#0 0u)
        (assert tmp%34#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let (tmp%35#0: uint64, tmp%36#0: uint64) = decode_bytes<(uint64,uint64,)>(reinterpret_Encoded(uint64,uint64)%1#0)
        let tmp%37#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box(tmp%35#0, tmp%36#0)
        let tmp%38#0: Encoded(bool8) = bytes_encode<bool8>(tmp%37#0)
        let tmp%39#0: bytes = (concat 0x151f7c75 tmp%38#0)
        (log tmp%39#0)
        return 1u
    block@6: // load_tuple_from_box_route_L77
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (== tmp%40#0 NoOp)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        let tmp%43#0: bool = (!= tmp%42#0 0u)
        (assert tmp%43#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let (tmp%44#0: uint64, tmp%45#0: uint64) = decode_bytes<(uint64,uint64,)>(reinterpret_Encoded(uint64,uint64)%2#0)
        let (tmp%46#0: uint64, tmp%47#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box(tmp%44#0, tmp%45#0)
        let tmp%48#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%46#0, tmp%47#0)
        let tmp%49#0: bytes = (concat 0x151f7c75 tmp%48#0)
        (log tmp%49#0)
        return 1u
    block@7: // maybe_load_tuple_from_box_route_L81
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (== tmp%50#0 NoOp)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        let tmp%53#0: bool = (!= tmp%52#0 0u)
        (assert tmp%53#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%3#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let (tmp%54#0: uint64, tmp%55#0: uint64) = decode_bytes<(uint64,uint64,)>(reinterpret_Encoded(uint64,uint64)%3#0)
        let (tmp%56#0: uint64, tmp%57#0: uint64, tmp%58#0: bool) = test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box(tmp%54#0, tmp%55#0)
        let tmp%59#0: Encoded((uint64,uint64),bool1) = bytes_encode<((uint64,uint64),bool1)>(tmp%56#0, tmp%57#0, tmp%58#0)
        let tmp%60#0: bytes = (concat 0x151f7c75 tmp%59#0)
        (log tmp%60#0)
        return 1u
    block@8: // load_tuple_from_box_or_default_route_L86
        let tmp%61#0: uint64 = (txn OnCompletion)
        let tmp%62#0: bool = (== tmp%61#0 NoOp)
        (assert tmp%62#0) // OnCompletion is not NoOp
        let tmp%63#0: uint64 = (txn ApplicationID)
        let tmp%64#0: bool = (!= tmp%63#0 0u)
        (assert tmp%64#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%4#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let (tmp%65#0: uint64, tmp%66#0: uint64) = decode_bytes<(uint64,uint64,)>(reinterpret_Encoded(uint64,uint64)%4#0)
        let (tmp%67#0: uint64, tmp%68#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default(tmp%65#0, tmp%66#0)
        let tmp%69#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%67#0, tmp%68#0)
        let tmp%70#0: bytes = (concat 0x151f7c75 tmp%69#0)
        (log tmp%70#0)
        return 1u
    block@9: // load_tuple_from_local_state_or_default_route_L90
        let tmp%71#0: uint64 = (txn OnCompletion)
        let tmp%72#0: bool = (== tmp%71#0 NoOp)
        (assert tmp%72#0) // OnCompletion is not NoOp
        let tmp%73#0: uint64 = (txn ApplicationID)
        let tmp%74#0: bool = (!= tmp%73#0 0u)
        (assert tmp%74#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%75#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let (tmp%76#0: uint64, tmp%77#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default(tmp%75#0)
        let tmp%78#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%76#0, tmp%77#0)
        let tmp%79#0: bytes = (concat 0x151f7c75 tmp%78#0)
        (log tmp%79#0)
        return 1u
    block@10: // mutate_local_tuple_route_L95
        let tmp%80#0: uint64 = (txn OnCompletion)
        let tmp%81#0: bool = (== tmp%80#0 NoOp)
        (assert tmp%81#0) // OnCompletion is not NoOp
        let tmp%82#0: uint64 = (txn ApplicationID)
        let tmp%83#0: bool = (!= tmp%82#0 0u)
        (assert tmp%83#0) // can only call when not creating
        let (tmp%84#0: Encoded(len+uint64[]), tmp%85#0: uint64, tmp%86#0: bytes, tmp%87#0: string) = test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple()
        let tmp%88#0: Encoded((len+uint64[]),(uint64,(len+uint8[]),(len+utf8[]))) = bytes_encode<((len+uint64[]),(uint64,(len+uint8[]),(len+utf8[])))>(tmp%84#0, tmp%85#0, tmp%86#0, tmp%87#0)
        let tmp%89#0: bytes = (concat 0x151f7c75 tmp%88#0)
        (log tmp%89#0)
        return 1u
    block@11: // mutate_tuple_in_storage_currently_supported_method_route_L114
        let tmp%90#0: uint64 = (txn OnCompletion)
        let tmp%91#0: bool = (== tmp%90#0 NoOp)
        (assert tmp%91#0) // OnCompletion is not NoOp
        let tmp%92#0: uint64 = (txn ApplicationID)
        let tmp%93#0: bool = (!= tmp%92#0 0u)
        (assert tmp%93#0) // can only call when not creating
        test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method()
        return 1u
    block@12: // run_tests_route_L120
        let tmp%94#0: uint64 = (txn OnCompletion)
        let tmp%95#0: bool = (== tmp%94#0 NoOp)
        (assert tmp%95#0) // OnCompletion is not NoOp
        let tmp%96#0: uint64 = (txn ApplicationID)
        let tmp%97#0: bool = (!= tmp%96#0 0u)
        (assert tmp%97#0) // can only call when not creating
        let tmp%98#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.run_tests()
        let tmp%99#0: Encoded(bool8) = bytes_encode<bool8>(tmp%98#0)
        let tmp%100#0: bytes = (concat 0x151f7c75 tmp%99#0)
        (log tmp%100#0)
        return 1u
    block@13: // nested_tuple_params_route_L149
        let tmp%101#0: uint64 = (txn OnCompletion)
        let tmp%102#0: bool = (== tmp%101#0 NoOp)
        (assert tmp%102#0) // OnCompletion is not NoOp
        let tmp%103#0: uint64 = (txn ApplicationID)
        let tmp%104#0: bool = (!= tmp%103#0 0u)
        (assert tmp%104#0) // can only call when not creating
        let reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0: Encoded((len+utf8[]),((len+uint8[]),(uint64))) = (txna ApplicationArgs 1)
        let (tmp%105#0: string, tmp%106#0: bytes, tmp%107#0: uint64) = decode_bytes<(string,(bytes,(uint64,),),)>(reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0)
        let (tmp%108#0: bytes, tmp%109#0: string, tmp%110#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(tmp%105#0, tmp%106#0, tmp%107#0)
        let tmp%111#0: Encoded((len+uint8[]),((len+utf8[]),uint64)) = bytes_encode<((len+uint8[]),((len+utf8[]),uint64))>(tmp%108#0, tmp%109#0, tmp%110#0)
        let tmp%112#0: bytes = (concat 0x151f7c75 tmp%111#0)
        (log tmp%112#0)
        return 1u
    block@14: // named_tuple_route_L156
        let tmp%113#0: uint64 = (txn OnCompletion)
        let tmp%114#0: bool = (== tmp%113#0 NoOp)
        (assert tmp%114#0) // OnCompletion is not NoOp
        let tmp%115#0: uint64 = (txn ApplicationID)
        let tmp%116#0: bool = (!= tmp%115#0 0u)
        (assert tmp%116#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0: Encoded(uint64,(len+uint8[]),(len+utf8[])) = (txna ApplicationArgs 1)
        let (tmp%117#0: uint64, tmp%118#0: bytes, tmp%119#0: string) = decode_bytes<(uint64,bytes,string,)>(reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0)
        let (tmp%120#0: uint64, tmp%121#0: bytes, tmp%122#0: string) = test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple(tmp%117#0, tmp%118#0, tmp%119#0)
        let tmp%123#0: Encoded(uint64,(len+uint8[]),(len+utf8[])) = bytes_encode<(uint64,(len+uint8[]),(len+utf8[]))>(tmp%120#0, tmp%121#0, tmp%122#0)
        let tmp%124#0: bytes = (concat 0x151f7c75 tmp%123#0)
        (log tmp%124#0)
        return 1u
    block@15: // nested_named_tuple_params_route_L161
        let tmp%125#0: uint64 = (txn OnCompletion)
        let tmp%126#0: bool = (== tmp%125#0 NoOp)
        (assert tmp%126#0) // OnCompletion is not NoOp
        let tmp%127#0: uint64 = (txn ApplicationID)
        let tmp%128#0: bool = (!= tmp%127#0 0u)
        (assert tmp%128#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0: Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))) = (txna ApplicationArgs 1)
        let (tmp%129#0: uint64, tmp%130#0: Encoded(uint64), tmp%131#0: uint64, tmp%132#0: bytes, tmp%133#0: string) = decode_bytes<(uint64,Encoded(uint64),(uint64,bytes,string,),)>(reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0)
        let (tmp%134#0: uint64, tmp%135#0: Encoded(uint64), tmp%136#0: uint64, tmp%137#0: bytes, tmp%138#0: string) = test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params(tmp%129#0, tmp%130#0, tmp%131#0, tmp%132#0, tmp%133#0)
        let tmp%139#0: Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))) = bytes_encode<(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))>(tmp%134#0, tmp%135#0, tmp%136#0, tmp%137#0, tmp%138#0)
        let tmp%140#0: bytes = (concat 0x151f7c75 tmp%139#0)
        (log tmp%140#0)
        return 1u
    block@16: // switch_case_default_L48
        goto block@17
    block@17: // switch_case_next_L48
        goto block@22
    block@18: // bare_routing_L48
        let tmp%141#0: uint64 = (txn OnCompletion)
        switch tmp%141#0 {0u => block@19, * => block@20}
    block@19: // __algopy_default_create_L1
        let tmp%142#0: uint64 = (txn ApplicationID)
        let tmp%143#0: bool = (== tmp%142#0 0u)
        (assert tmp%143#0) // can only call when creating
        test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create()
        return 1u
    block@20: // switch_case_default_L48
        goto block@21
    block@21: // switch_case_next_L48
        goto block@22
    block@22: // after_if_else_L48
        return 0u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__init__() -> void:
    block@0: // L49
        (app_global_put "build_nested_call_count" 0u)
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>()
        let encoded_for_storage%0#0: Encoded((len+uint64[]),(uint64,(len+uint8[]),(len+utf8[]))) = bytes_encode<((len+uint64[]),(uint64,(len+uint8[]),(len+utf8[])))>(encoded_array%0#0, 0u, 0x, "")
        (app_global_put "twm" encoded_for_storage%0#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple(pwl.parent.foo: uint64, pwl.parent.foo_arc: Encoded(uint64), pwl.parent.child.a: uint64, pwl.parent.child.b: bytes, pwl.parent.child.c: string, pwl.children: Encoded(len+(uint64,(len+uint8[]),(len+utf8[]))[])) -> void:
    block@0: // L61
        let encoded_for_storage%0#0: Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[])) = bytes_encode<((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))>(pwl.parent.foo#0, pwl.parent.foo_arc#0, pwl.parent.child.a#0, pwl.parent.child.b#0, pwl.parent.child.c#0, pwl.children#0)
        (app_global_put "pwl" encoded_for_storage%0#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple() -> <uint64, Encoded(uint64), uint64, bytes, string, Encoded(len+(uint64,(len+uint8[]),(len+utf8[]))[])>:
    block@0: // L65
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pwl")
        (assert maybe_exists%0#0) // check self.pwl exists
        let (tmp%0#0: uint64, tmp%1#0: Encoded(uint64), tmp%2#0: uint64, tmp%3#0: bytes, tmp%4#0: string, tmp%5#0: Encoded(len+(uint64,(len+uint8[]),(len+utf8[]))[])) = decode_bytes<((uint64,Encoded(uint64),(uint64,bytes,string,),),Encoded(len+(uint64,(len+uint8[]),(len+utf8[]))[]),)>(maybe_value%0#0)
        return tmp%0#0 tmp%1#0 tmp%2#0 tmp%3#0 tmp%4#0 tmp%5#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box(key.a: uint64, key.b: uint64) -> void:
    block@0: // L69
        let tmp%0#0: uint64 = (+ key.b#0 1u)
        let encoded_for_storage%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(key.a#0, key.b#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded_for_storage%0#0)
        let encoded_for_storage%1#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(key.a#0, tmp%0#0)
        box_write(box_prefixed_key%0#0, encoded_for_storage%1#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box(key.a: uint64, key.b: uint64) -> bool:
    block@0: // L73
        let encoded_for_storage%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(key.a#0, key.b#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded_for_storage%0#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        return maybe_exists%0#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box(key.a: uint64, key.b: uint64) -> <uint64, uint64>:
    block@0: // L77
        let encoded_for_storage%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(key.a#0, key.b#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded_for_storage%0#0)
        let storage_value%0#0: bytes = box_read(box_prefixed_key%0#0)
        let (tmp%0#0: uint64, tmp%1#0: uint64) = decode_bytes<(uint64,uint64,)>(storage_value%0#0)
        return tmp%0#0 tmp%1#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box(key.a: uint64, key.b: uint64) -> <uint64, uint64, bool>:
    block@0: // L81
        let encoded_for_storage%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(key.a#0, key.b#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded_for_storage%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        goto maybe_exists%0#0 ? block@1 : block@2
    block@1: // ternary_true_L83
        let (ternary_result%0.a#0: uint64, ternary_result%0.b#0: uint64) = decode_bytes<(uint64,uint64,)>(maybe_value%0#0)
        goto block@3
    block@2: // ternary_false_L83
        let (ternary_result%0.a#1: uint64, ternary_result%0.b#1: uint64) = (undefined, undefined)
        goto block@3
    block@3: // ternary_merge_L83
        let ternary_result%0.a#2: uint64 = φ(ternary_result%0.a#0 <- block@1, ternary_result%0.a#1 <- block@2)
        let ternary_result%0.b#2: uint64 = φ(ternary_result%0.b#0 <- block@1, ternary_result%0.b#1 <- block@2)
        let (maybe_value.a#0: uint64, maybe_value.b#0: uint64) = (ternary_result%0.a#2, ternary_result%0.b#2)
        let exists#0: bool = maybe_exists%0#0
        return maybe_value.a#0 maybe_value.b#0 exists#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default(key.a: uint64, key.b: uint64) -> <uint64, uint64>:
    block@0: // L86
        let encoded_for_storage%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(key.a#0, key.b#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded_for_storage%0#0)
        let (tmp%0#0: uint64, tmp%1#0: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        goto maybe_exists%0#0 ? block@1 : block@2
    block@1: // ternary_true_L88
        let (ternary_result%0.a#0: uint64, ternary_result%0.b#0: uint64) = decode_bytes<(uint64,uint64,)>(maybe_value%0#0)
        goto block@3
    block@2: // ternary_false_L88
        let (ternary_result%0.a#1: uint64, ternary_result%0.b#1: uint64) = (tmp%0#0, tmp%1#0)
        goto block@3
    block@3: // ternary_merge_L88
        let ternary_result%0.a#2: uint64 = φ(ternary_result%0.a#0 <- block@1, ternary_result%0.a#1 <- block@2)
        let ternary_result%0.b#2: uint64 = φ(ternary_result%0.b#0 <- block@1, ternary_result%0.b#1 <- block@2)
        return ternary_result%0.a#2 ternary_result%0.b#2

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default(key: string) -> <uint64, uint64>:
    block@0: // L90
        let tmp%0#0: string = test_cases.tuple_support.nested_tuples.echo(key#0)
        let local#0: bytes = tmp%0#0
        let tmp%1#0: account = test_cases.tuple_support.nested_tuples.get_sender_inefficiently()
        let (tmp%2#0: uint64, tmp%3#0: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex tmp%1#0 0u local#0)
        goto maybe_exists%0#0 ? block@1 : block@2
    block@1: // ternary_true_L93
        let (ternary_result%0.a#0: uint64, ternary_result%0.b#0: uint64) = decode_bytes<(uint64,uint64,)>(maybe_value%0#0)
        goto block@3
    block@2: // ternary_false_L93
        let (ternary_result%0.a#1: uint64, ternary_result%0.b#1: uint64) = (tmp%2#0, tmp%3#0)
        goto block@3
    block@3: // ternary_merge_L93
        let ternary_result%0.a#2: uint64 = φ(ternary_result%0.a#0 <- block@1, ternary_result%0.a#1 <- block@2)
        let ternary_result%0.b#2: uint64 = φ(ternary_result%0.b#0 <- block@1, ternary_result%0.b#1 <- block@2)
        return ternary_result%0.a#2 ternary_result%0.b#2

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple() -> <Encoded(len+uint64[]), uint64, bytes, string>:
    block@0: // L95
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(0x0000000000000000)
        let (twm.arr#0: Encoded(len+uint64[]), twm.child.a#0: uint64, twm.child.b#0: bytes, twm.child.c#0: string) = (encoded_array%0#0, 0u, 0x, "")
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(0x0000000000000001)
        let concat%0#0: Encoded(len+uint64[]) = (concat twm.arr#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 twm.arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let twm.arr#1: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        let tmp%1#0: Encoded(uint64[]) = bytes_encode<uint64[]>(0x0000000000000002)
        let concat%1#0: Encoded(len+uint64[]) = (concat twm.arr#1 tmp%1#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 twm.arr#1 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = replace%1#0
        let twm.arr#2: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%1#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L107
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L108
        let array_item%0#0: Encoded(uint64) = extract_value(twm.arr#2, i#1)
        let reinterpret_biguint%0#0: biguint = array_item%0#0
        let tmp%2#0: biguint = (itob i#1)
        let tmp%3#0: bool = (b== reinterpret_biguint%0#0 tmp%2#0)
        (assert tmp%3#0)
        goto block@3
    block@3: // for_footer_L107
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L107
        return twm.arr#2 twm.child.a#0 twm.child.b#0 twm.child.c#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method() -> void:
    block@0: // L114
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "twm")
        (assert maybe_exists%0#0) // check self.twm exists
        let (tmp%0#0: Encoded(len+uint64[]), tmp%1#0: uint64, tmp%2#0: bytes, tmp%3#0: string) = decode_bytes<(Encoded(len+uint64[]),(uint64,bytes,string,),)>(maybe_value%0#0)
        let arr2#0: Encoded(len+uint64[]) = tmp%0#0
        let tmp%4#0: Encoded(uint64[]) = bytes_encode<uint64[]>(0x0000000000000001)
        let concat%0#0: Encoded(len+uint64[]) = (concat arr2#0 tmp%4#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr2#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let arr2#1: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "twm")
        (assert maybe_exists%1#0) // check self.twm exists
        let (awst_tmp%0#0: Encoded(len+uint64[]), awst_tmp%1#0: uint64, awst_tmp%2#0: bytes, awst_tmp%3#0: string) = decode_bytes<(Encoded(len+uint64[]),(uint64,bytes,string,),)>(maybe_value%1#0)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),(uint64,(len+uint8[]),(len+utf8[]))) = bytes_encode<((len+uint64[]),(uint64,(len+uint8[]),(len+utf8[])))>(arr2#1, awst_tmp%1#0, awst_tmp%2#0, awst_tmp%3#0)
        (app_global_put "twm" encoded_for_storage%0#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.run_tests() -> bool:
    block@0: // L120
        let (x.0#0: string, x.1#0: string) = ("Hi", "There")
        let (awst_tmp%0#0: string, awst_tmp%1#0: string) = test_cases.tuple_support.nested_tuples.test_swap(x.0#0, x.1#0)
        let tmp%0#0: bool = (== awst_tmp%0#0 "There")
        let tmp%1#0: bool = (== awst_tmp%1#0 "Hi")
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        (assert tmp%2#0)
        let (y.0#0: uint64, y.1.0#0: string, y.1.1#0: string) = (1u, x.0#0, x.1#0)
        let (z.0#0: uint64, z.1#0: uint64, z.2.0#0: uint64, z.2.1.0#0: string, z.2.1.1#0: string) = (0u, 2u, y.0#0, y.1.0#0, y.1.1#0)
        let (z2.0#0: uint64, z2.1.0#0: string, z2.1.1#0: string) = (z.2.0#0, z.2.1.0#0, z.2.1.1#0)
        let (z2_1.0#0: string, z2_1.1#0: string) = (z2.1.0#0, z2.1.1#0)
        let _x#0: string = z2_1.0#0
        let z2_1_1#0: string = z2_1.1#0
        let tmp%3#0: bool = (== z2_1_1#0 "There")
        (assert tmp%3#0)
        let (tmp%4#0: string, tmp%5#0: uint64, tmp%6#0: uint64, tmp%7#0: uint64, tmp%8#0: string) = test_cases.tuple_support.nested_tuples.test_rearrange(x.0#0, z.0#0, z.1#0, z.2.0#0, z.2.1.0#0, z.2.1.1#0, x.1#0)
        let a#0: string = tmp%4#0
        let b#0: uint64 = tmp%5#0
        let c#0: uint64 = tmp%6#0
        let d#0: uint64 = tmp%7#0
        let e#0: string = tmp%8#0
        let tmp%9#0: bool = (== a#0 "Hi")
        let tmp%10#0: bool = (== b#0 0u)
        let tmp%11#0: bool = (&& tmp%9#0 tmp%10#0)
        (assert tmp%11#0)
        let tmp%12#0: bool = (== c#0 2u)
        let tmp%13#0: bool = (== d#0 1u)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let tmp%15#0: bool = (== e#0 "There")
        (assert tmp%15#0)
        test_cases.tuple_support.nested_tuples.test_intrinsics(1u, 2u)
        test_cases.tuple_support.nested_tuples.test_nested_slicing()
        test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 1u)
        test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 0u)
        test_cases.tuple_support.nested_tuples.test_nested_mutation()
        let tmp%16#0: bool = (== z.2.0#0 y.0#0)
        let tmp%17#0: bool = (== z.2.1.0#0 y.1.0#0)
        let tmp%18#0: bool = (== z.2.1.1#0 y.1.1#0)
        let tmp%19#0: bool = (&& tmp%17#0 tmp%18#0)
        let tmp%20#0: bool = (&& tmp%16#0 tmp%19#0)
        (assert tmp%20#0)
        test_cases.tuple_support.nested_tuples.test_nested_iteration()
        test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested()
        return 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(args.0: string, args.1.0: bytes, args.1.1.0: uint64) -> <bytes, string, uint64>:
    block@0: // L149
        let s#0: string = args.0#0
        let b#0: bytes = args.1.0#0
        let u#0: uint64 = args.1.1.0#0
        return b#0 s#0 u#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple(args.a: uint64, args.b: bytes, args.c: string) -> <uint64, bytes, string>:
    block@0: // L156
        let a#0: uint64 = args.a#0
        let b#0: bytes = args.b#0
        let c#0: string = args.c#0
        return a#0 b#0 c#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params(args.foo: uint64, args.foo_arc: Encoded(uint64), args.child.a: uint64, args.child.b: bytes, args.child.c: string) -> <uint64, Encoded(uint64), uint64, bytes, string>:
    block@0: // L161
        let foo#0: uint64 = args.foo#0
        let foo_arc#0: Encoded(uint64) = args.foo_arc#0
        let a#0: uint64 = args.child.a#0
        let b#0: bytes = args.child.b#0
        let c#0: string = args.child.c#0
        return foo#0 foo_arc#0 a#0 b#0 c#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.build_nested() -> <string, uint64, bytes>:
    block@0: // L166
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "build_nested_call_count")
        (assert maybe_exists%0#0) // check self.build_nested_call_count exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "build_nested_call_count" tmp%0#0)
        return "hi" 1u 0x686d6d6d

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested() -> void:
    block@0: // L171
        (app_global_put "build_nested_call_count" 0u)
        let (awst_tmp%0#0: string, awst_tmp%1#0: uint64, awst_tmp%2#0: bytes) = test_cases.tuple_support.nested_tuples.NestedTuples.build_nested()
        let tmp%0#0: bool = (== awst_tmp%0#0 awst_tmp%0#0)
        let tmp%1#0: bool = (== awst_tmp%1#0 awst_tmp%1#0)
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        let tmp%3#0: bool = (== awst_tmp%2#0 awst_tmp%2#0)
        let tmp%4#0: bool = (|| tmp%2#0 tmp%3#0)
        goto tmp%4#0 ? block@1 : block@2
    block@1: // ternary_true_L174
        let (ternary_result%0.0.0#0: string, ternary_result%0.0.1#0: uint64, ternary_result%0.1#0: bytes) = (awst_tmp%0#0, awst_tmp%1#0, awst_tmp%2#0)
        goto block@3
    block@2: // ternary_false_L174
        let (ternary_result%0.0.0#1: string, ternary_result%0.0.1#1: uint64, ternary_result%0.1#1: bytes) = test_cases.tuple_support.nested_tuples.NestedTuples.build_nested()
        goto block@3
    block@3: // ternary_merge_L174
        let ternary_result%0.0.0#2: string = φ(ternary_result%0.0.0#0 <- block@1, ternary_result%0.0.0#1 <- block@2)
        let ternary_result%0.0.1#2: uint64 = φ(ternary_result%0.0.1#0 <- block@1, ternary_result%0.0.1#1 <- block@2)
        let ternary_result%0.1#2: bytes = φ(ternary_result%0.1#0 <- block@1, ternary_result%0.1#1 <- block@2)
        let (result.0.0#0: string, result.0.1#0: uint64, result.1#0: bytes) = (ternary_result%0.0.0#2, ternary_result%0.0.1#2, ternary_result%0.1#2)
        let tmp%5#0: bool = (== result.0.0#0 "hi")
        (assert tmp%5#0)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "build_nested_call_count")
        (assert maybe_exists%0#0) // check self.build_nested_call_count exists
        let tmp%6#0: bool = (== maybe_value%0#0 1u)
        (assert tmp%6#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create() -> void:
    block@0: // L1
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__()
        return tmp%0#0