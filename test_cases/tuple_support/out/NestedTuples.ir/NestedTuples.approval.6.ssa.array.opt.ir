main test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "build_nested_call_count" 0u)
        (app_global_put "twm" 0x0004000600000000000000000000000c000e00000000)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@19
    block@4: // abi_routing_L48
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void" => block@5, method "load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])" => block@6, method "store_tuple_in_box((uint64,uint64))void" => block@7, method "is_tuple_in_box((uint64,uint64))bool" => block@8, method "load_tuple_from_box((uint64,uint64))(uint64,uint64)" => block@9, method "maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)" => block@10, method "load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)" => block@11, method "load_tuple_from_local_state_or_default(string)(uint64,uint64)" => block@12, method "mutate_local_tuple()(uint64[],(uint64,byte[],string))" => block@13, method "mutate_tuple_in_storage_currently_supported_method()void" => block@14, method "run_tests()bool" => block@15, method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))" => block@16, method "named_tuple((uint64,byte[],string))(uint64,byte[],string)" => block@17, method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))" => block@18, * => block@21}
    block@5: // store_tuple_route_L61
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[]))%0#0: Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[])) = (txna ApplicationArgs 1)
        let item_start_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[]))%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[]))%0#0 2u)
        let item0%0#0: bytes = (substring3 reinterpret_Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[]))%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item0%2#0: uint64 = (extract_uint64 item0%0#0 0u)
        let item1%0#0: bytes = ((extract 8 8) item0%0#0) // on error: Index access is out of bounds
        let item_start_offset%1#0: uint64 = (extract_uint16 item0%0#0 16u)
        let item_end_offset%1#0: uint64 = (len item0%0#0)
        let item2%0#0: bytes = (substring3 item0%0#0 item_start_offset%1#0 item_end_offset%1#0)
        let item0%4#0: uint64 = (extract_uint64 item2%0#0 0u)
        let item_start_offset%2#0: uint64 = (extract_uint16 item2%0#0 8u)
        let item_end_offset%2#0: uint64 = (extract_uint16 item2%0#0 10u)
        let item1%1#0: bytes = (substring3 item2%0#0 item_start_offset%2#0 item_end_offset%2#0)
        let item1%2#0: bytes = ((extract 2 0) item1%1#0)
        let item_end_offset%3#0: uint64 = (len item2%0#0)
        let item2%1#0: bytes = (substring3 item2%0#0 item_end_offset%2#0 item_end_offset%3#0)
        let item2%2#0: bytes = ((extract 2 0) item2%1#0)
        let item_end_offset%4#0: uint64 = (len reinterpret_Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[]))%0#0)
        let item1%3#0: bytes = (substring3 reinterpret_Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[]))%0#0 item_end_offset%0#0 item_end_offset%4#0)
        test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple(item0%2#0, item1%0#0, item0%4#0, item1%2#0, item2%2#0, item1%3#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0: bool = 1u
        goto block@22
    block@6: // load_tuple_route_L65
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let (to_encode%0#0: uint64, to_encode%1#0: Encoded(uint64), to_encode%2#0: uint64, to_encode%3#0: bytes, to_encode%4#0: string, to_encode%5#0: Encoded(len+(uint64,len+uint8[],len+utf8[])[])) = test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple()
        let val_as_bytes%0#1: bytes[8] = (itob to_encode%0#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#1 to_encode%1#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%2#0)
        let length%0#1: uint64 = (len to_encode%3#0)
        let as_bytes%0#1: bytes[8] = (itob length%0#1)
        let length_uint16%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let encoded_value%0#1: bytes = (concat length_uint16%0#1 to_encode%3#0)
        let data_length%0#1: uint64 = (len encoded_value%0#1)
        let current_tail_offset%0#1: uint64 = (+ 12u data_length%0#1)
        let encoded%3#1: Encoded((uint64,len+uint8[])) = (concat val_as_bytes%1#0 0x000c)
        let length%1#1: uint64 = (len to_encode%4#0)
        let as_bytes%2#1: bytes[8] = (itob length%1#1)
        let length_uint16%1#1: bytes = ((extract 6 2) as_bytes%2#1)
        let encoded_value%1#1: bytes = (concat length_uint16%1#1 to_encode%4#0)
        let tail%1#1: bytes = (concat encoded_value%0#1 encoded_value%1#1)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%0#1)
        let offset_as_uint16%1#1: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%4#1: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%3#1 offset_as_uint16%1#1)
        let encoded%5#1: bytes = (concat encoded%4#1 tail%1#1)
        let encoded%6#1: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (concat encoded%1#0 0x0012)
        let encoded%7#0: bytes = (concat encoded%6#1 encoded%5#1)
        let data_length%3#0: uint64 = (len encoded%7#0)
        let current_tail_offset%3#0: uint64 = (+ 4u data_length%3#0)
        let tail%4#0: bytes = (concat encoded%7#0 to_encode%5#0)
        let as_bytes%6#0: bytes[8] = (itob current_tail_offset%3#0)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%9#0: Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[])) = (concat 0x0004 offset_as_uint16%4#0)
        let encoded%10#0: bytes = (concat encoded%9#0 tail%4#0)
        let tmp%11#0: bytes = (concat 0x151f7c75 encoded%10#0)
        (log tmp%11#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#1: bool = 1u
        goto block@22
    block@7: // store_tuple_in_box_route_L69
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%0#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let item0%6#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%0#0 0u)
        let item1%5#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%0#0 8u)
        test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box(item0%6#0, item1%5#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#2: bool = 1u
        goto block@22
    block@8: // is_tuple_in_box_route_L73
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        (assert tmp%18#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%1#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let item0%8#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%1#0 0u)
        let item1%7#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%1#0 8u)
        let to_encode%6#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box(item0%8#0, item1%7#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%6#0)
        let tmp%20#0: bytes = (concat 0x151f7c75 encoded_bool%0#0)
        (log tmp%20#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#3: bool = 1u
        goto block@22
    block@9: // load_tuple_from_box_route_L77
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        (assert tmp%23#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%2#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let item0%10#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%2#0 0u)
        let item1%9#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%2#0 8u)
        let (to_encode%7#0: uint64, to_encode%8#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box(item0%10#0, item1%9#0)
        let val_as_bytes%2#0: bytes[8] = (itob to_encode%7#0)
        let val_as_bytes%3#0: bytes[8] = (itob to_encode%8#0)
        let encoded%12#0: Encoded((uint64,uint64)) = (concat val_as_bytes%2#0 val_as_bytes%3#0)
        let tmp%25#0: bytes = (concat 0x151f7c75 encoded%12#0)
        (log tmp%25#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#4: bool = 1u
        goto block@22
    block@10: // maybe_load_tuple_from_box_route_L81
        let tmp%26#0: uint64 = (txn OnCompletion)
        let tmp%27#0: bool = (! tmp%26#0)
        (assert tmp%27#0) // OnCompletion is not NoOp
        let tmp%28#0: uint64 = (txn ApplicationID)
        (assert tmp%28#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%3#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let item0%12#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%3#0 0u)
        let item1%11#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%3#0 8u)
        let (to_encode%9#0: uint64, to_encode%10#0: uint64, to_encode%11#0: bool) = test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box(item0%12#0, item1%11#0)
        let val_as_bytes%4#0: bytes[8] = (itob to_encode%9#0)
        let val_as_bytes%5#0: bytes[8] = (itob to_encode%10#0)
        let encoded%15#0: Encoded((uint64,uint64)) = (concat val_as_bytes%4#0 val_as_bytes%5#0)
        let encoded_bit%0#0: bytes = (setbit 0x00 0u to_encode%11#0)
        let encoded%18#0: Encoded(((uint64,uint64),bool1)) = (concat encoded%15#0 encoded_bit%0#0)
        let tmp%30#0: bytes = (concat 0x151f7c75 encoded%18#0)
        (log tmp%30#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#5: bool = 1u
        goto block@22
    block@11: // load_tuple_from_box_or_default_route_L86
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%4#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let item0%14#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%4#0 0u)
        let item1%13#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64))%4#0 8u)
        let (to_encode%12#0: uint64, to_encode%13#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default(item0%14#0, item1%13#0)
        let val_as_bytes%6#0: bytes[8] = (itob to_encode%12#0)
        let val_as_bytes%7#0: bytes[8] = (itob to_encode%13#0)
        let encoded%21#0: Encoded((uint64,uint64)) = (concat val_as_bytes%6#0 val_as_bytes%7#0)
        let tmp%35#0: bytes = (concat 0x151f7c75 encoded%21#0)
        (log tmp%35#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#6: bool = 1u
        goto block@22
    block@12: // load_tuple_from_local_state_or_default_route_L90
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        (assert tmp%38#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%40#0: bytes = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let (to_encode%14#0: uint64, to_encode%15#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default(tmp%40#0)
        let val_as_bytes%8#0: bytes[8] = (itob to_encode%14#0)
        let val_as_bytes%9#0: bytes[8] = (itob to_encode%15#0)
        let encoded%24#0: Encoded((uint64,uint64)) = (concat val_as_bytes%8#0 val_as_bytes%9#0)
        let tmp%41#0: bytes = (concat 0x151f7c75 encoded%24#0)
        (log tmp%41#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#7: bool = 1u
        goto block@22
    block@13: // mutate_local_tuple_route_L95
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        (assert tmp%44#0) // can only call when not creating
        let (to_encode%16#0: Encoded(len+uint64[]), to_encode%17#0: uint64, to_encode%18#0: bytes, to_encode%19#0: string) = test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple()
        let data_length%5#0: uint64 = (len to_encode%16#0)
        let current_tail_offset%5#0: uint64 = (+ 4u data_length%5#0)
        let val_as_bytes%10#0: bytes[8] = (itob to_encode%17#0)
        let length%2#0: uint64 = (len to_encode%18#0)
        let as_bytes%8#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 to_encode%18#0)
        let data_length%6#0: uint64 = (len encoded_value%2#0)
        let current_tail_offset%6#0: uint64 = (+ 12u data_length%6#0)
        let encoded%28#0: Encoded((uint64,len+uint8[])) = (concat val_as_bytes%10#0 0x000c)
        let length%3#0: uint64 = (len to_encode%19#0)
        let as_bytes%10#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 to_encode%19#0)
        let tail%7#0: bytes = (concat encoded_value%2#0 encoded_value%3#0)
        let as_bytes%11#0: bytes[8] = (itob current_tail_offset%6#0)
        let offset_as_uint16%7#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded%29#0: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%28#0 offset_as_uint16%7#0)
        let encoded%30#0: bytes = (concat encoded%29#0 tail%7#0)
        let tail%8#0: bytes = (concat to_encode%16#0 encoded%30#0)
        let as_bytes%12#0: bytes[8] = (itob current_tail_offset%5#0)
        let offset_as_uint16%8#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded%31#0: Encoded((len+uint64[],(uint64,len+uint8[],len+utf8[]))) = (concat 0x0004 offset_as_uint16%8#0)
        let encoded%32#0: bytes = (concat encoded%31#0 tail%8#0)
        let tmp%46#0: bytes = (concat 0x151f7c75 encoded%32#0)
        (log tmp%46#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#8: bool = 1u
        goto block@22
    block@14: // mutate_tuple_in_storage_currently_supported_method_route_L114
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        (assert tmp%49#0) // can only call when not creating
        test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method()
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#9: bool = 1u
        goto block@22
    block@15: // run_tests_route_L120
        let tmp%51#0: uint64 = (txn OnCompletion)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0) // OnCompletion is not NoOp
        let tmp%53#0: uint64 = (txn ApplicationID)
        (assert tmp%53#0) // can only call when not creating
        let to_encode%20#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.run_tests()
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u to_encode%20#0)
        let tmp%55#0: bytes = (concat 0x151f7c75 encoded_bool%1#0)
        (log tmp%55#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#10: bool = 1u
        goto block@22
    block@16: // nested_tuple_params_route_L149
        let tmp%56#0: uint64 = (txn OnCompletion)
        let tmp%57#0: bool = (! tmp%56#0)
        (assert tmp%57#0) // OnCompletion is not NoOp
        let tmp%58#0: uint64 = (txn ApplicationID)
        (assert tmp%58#0) // can only call when not creating
        let reinterpret_Encoded((len+utf8[],(len+uint8[],(uint64))))%0#0: Encoded((len+utf8[],(len+uint8[],(uint64)))) = (txna ApplicationArgs 1)
        let item_start_offset%5#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[],(len+uint8[],(uint64))))%0#0 0u)
        let item_end_offset%5#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[],(len+uint8[],(uint64))))%0#0 2u)
        let item0%15#0: bytes = (substring3 reinterpret_Encoded((len+utf8[],(len+uint8[],(uint64))))%0#0 item_start_offset%5#0 item_end_offset%5#0)
        let args.0#0: string = ((extract 2 0) item0%15#0)
        let item_end_offset%6#0: uint64 = (len reinterpret_Encoded((len+utf8[],(len+uint8[],(uint64))))%0#0)
        let item1%14#0: bytes = (substring3 reinterpret_Encoded((len+utf8[],(len+uint8[],(uint64))))%0#0 item_end_offset%5#0 item_end_offset%6#0)
        let item_start_offset%7#0: uint64 = (extract_uint16 item1%14#0 0u)
        let item_end_offset%7#0: uint64 = (len item1%14#0)
        let item0%17#0: bytes = (substring3 item1%14#0 item_start_offset%7#0 item_end_offset%7#0)
        let args.1.0#0: bytes = ((extract 2 0) item0%17#0)
        let item1%15#0: bytes = ((extract 2 8) item1%14#0) // on error: Index access is out of bounds
        let args.1.1.0#0: uint64 = (extract_uint64 item1%15#0 0u)
        let length%4#0: uint64 = (len args.1.0#0)
        let as_bytes%13#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%13#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 args.1.0#0)
        let data_length%9#0: uint64 = (len encoded_value%4#0)
        let current_tail_offset%9#0: uint64 = (+ 4u data_length%9#0)
        let length%5#0: uint64 = (len args.0#0)
        let as_bytes%15#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%15#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 args.0#0)
        let val_as_bytes%11#0: bytes[8] = (itob args.1.1.0#0)
        let encoded%35#0: Encoded((len+utf8[],uint64)) = (concat 0x000a val_as_bytes%11#0)
        let encoded%36#0: bytes = (concat encoded%35#0 encoded_value%5#0)
        let tail%11#0: bytes = (concat encoded_value%4#0 encoded%36#0)
        let as_bytes%17#0: bytes[8] = (itob current_tail_offset%9#0)
        let offset_as_uint16%11#0: bytes = ((extract 6 2) as_bytes%17#0)
        let encoded%37#0: Encoded((len+uint8[],(len+utf8[],uint64))) = (concat 0x0004 offset_as_uint16%11#0)
        let encoded%38#0: bytes = (concat encoded%37#0 tail%11#0)
        let tmp%60#0: bytes = (concat 0x151f7c75 encoded%38#0)
        (log tmp%60#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#11: bool = 1u
        goto block@22
    block@17: // named_tuple_route_L156
        let tmp%61#0: uint64 = (txn OnCompletion)
        let tmp%62#0: bool = (! tmp%61#0)
        (assert tmp%62#0) // OnCompletion is not NoOp
        let tmp%63#0: uint64 = (txn ApplicationID)
        (assert tmp%63#0) // can only call when not creating
        let reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0: Encoded((uint64,len+uint8[],len+utf8[])) = (txna ApplicationArgs 1)
        let args.a#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0 0u)
        let item_start_offset%8#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0 8u)
        let item_end_offset%8#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0 10u)
        let item1%16#0: bytes = (substring3 reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0 item_start_offset%8#0 item_end_offset%8#0)
        let args.b#0: bytes = ((extract 2 0) item1%16#0)
        let item_end_offset%9#0: uint64 = (len reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0)
        let item2%3#0: bytes = (substring3 reinterpret_Encoded((uint64,len+uint8[],len+utf8[]))%0#0 item_end_offset%8#0 item_end_offset%9#0)
        let args.c#0: string = ((extract 2 0) item2%3#0)
        let val_as_bytes%12#0: bytes[8] = (itob args.a#0)
        let length%6#0: uint64 = (len args.b#0)
        let as_bytes%18#0: bytes[8] = (itob length%6#0)
        let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%18#0)
        let encoded_value%6#0: bytes = (concat length_uint16%6#0 args.b#0)
        let data_length%12#0: uint64 = (len encoded_value%6#0)
        let current_tail_offset%12#0: uint64 = (+ 12u data_length%12#0)
        let encoded%40#0: Encoded((uint64,len+uint8[])) = (concat val_as_bytes%12#0 0x000c)
        let length%7#0: uint64 = (len args.c#0)
        let as_bytes%20#0: bytes[8] = (itob length%7#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%20#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 args.c#0)
        let tail%13#0: bytes = (concat encoded_value%6#0 encoded_value%7#0)
        let as_bytes%21#0: bytes[8] = (itob current_tail_offset%12#0)
        let offset_as_uint16%13#0: bytes = ((extract 6 2) as_bytes%21#0)
        let encoded%41#0: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%40#0 offset_as_uint16%13#0)
        let encoded%42#0: bytes = (concat encoded%41#0 tail%13#0)
        let tmp%65#0: bytes = (concat 0x151f7c75 encoded%42#0)
        (log tmp%65#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#12: bool = 1u
        goto block@22
    block@18: // nested_named_tuple_params_route_L161
        let tmp%66#0: uint64 = (txn OnCompletion)
        let tmp%67#0: bool = (! tmp%66#0)
        (assert tmp%67#0) // OnCompletion is not NoOp
        let tmp%68#0: uint64 = (txn ApplicationID)
        (assert tmp%68#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[])))%0#0: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (txna ApplicationArgs 1)
        let args.foo#0: uint64 = (extract_uint64 reinterpret_Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[])))%0#0 0u)
        let args.foo_arc#0: Encoded(uint64) = ((extract 8 8) reinterpret_Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[])))%0#0) // on error: Index access is out of bounds
        let item_start_offset%10#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[])))%0#0 16u)
        let item_end_offset%10#0: uint64 = (len reinterpret_Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[])))%0#0)
        let item2%5#0: bytes = (substring3 reinterpret_Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[])))%0#0 item_start_offset%10#0 item_end_offset%10#0)
        let args.child.a#0: uint64 = (extract_uint64 item2%5#0 0u)
        let item_start_offset%11#0: uint64 = (extract_uint16 item2%5#0 8u)
        let item_end_offset%11#0: uint64 = (extract_uint16 item2%5#0 10u)
        let item1%19#0: bytes = (substring3 item2%5#0 item_start_offset%11#0 item_end_offset%11#0)
        let args.child.b#0: bytes = ((extract 2 0) item1%19#0)
        let item_end_offset%12#0: uint64 = (len item2%5#0)
        let item2%6#0: bytes = (substring3 item2%5#0 item_end_offset%11#0 item_end_offset%12#0)
        let args.child.c#0: string = ((extract 2 0) item2%6#0)
        let val_as_bytes%13#0: bytes[8] = (itob args.foo#0)
        let encoded%44#0: Encoded((uint64,uint64)) = (concat val_as_bytes%13#0 args.foo_arc#0)
        let val_as_bytes%14#0: bytes[8] = (itob args.child.a#0)
        let length%8#0: uint64 = (len args.child.b#0)
        let as_bytes%22#0: bytes[8] = (itob length%8#0)
        let length_uint16%8#0: bytes = ((extract 6 2) as_bytes%22#0)
        let encoded_value%8#0: bytes = (concat length_uint16%8#0 args.child.b#0)
        let data_length%14#0: uint64 = (len encoded_value%8#0)
        let current_tail_offset%14#0: uint64 = (+ 12u data_length%14#0)
        let encoded%46#0: Encoded((uint64,len+uint8[])) = (concat val_as_bytes%14#0 0x000c)
        let length%9#0: uint64 = (len args.child.c#0)
        let as_bytes%24#0: bytes[8] = (itob length%9#0)
        let length_uint16%9#0: bytes = ((extract 6 2) as_bytes%24#0)
        let encoded_value%9#0: bytes = (concat length_uint16%9#0 args.child.c#0)
        let tail%15#0: bytes = (concat encoded_value%8#0 encoded_value%9#0)
        let as_bytes%25#0: bytes[8] = (itob current_tail_offset%14#0)
        let offset_as_uint16%15#0: bytes = ((extract 6 2) as_bytes%25#0)
        let encoded%47#0: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%46#0 offset_as_uint16%15#0)
        let encoded%48#0: bytes = (concat encoded%47#0 tail%15#0)
        let encoded%49#0: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (concat encoded%44#0 0x0012)
        let encoded%50#0: bytes = (concat encoded%49#0 encoded%48#0)
        let tmp%70#0: bytes = (concat 0x151f7c75 encoded%50#0)
        (log tmp%70#0)
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#13: bool = 1u
        goto block@22
    block@19: // bare_routing_L48
        let tmp%71#0: uint64 = (txn OnCompletion)
        goto tmp%71#0 ? block@21 : block@20
    block@20: // __algopy_default_create_L1
        let tmp%72#0: uint64 = (txn ApplicationID)
        let tmp%73#0: bool = (! tmp%72#0)
        (assert tmp%73#0) // can only call when creating
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#14: bool = 1u
        goto block@22
    block@21: // after_if_else_L48
        let test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#15: bool = 0u
        goto block@22
    block@22: // after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router___L1
        let tmp%0#1: bool = φ(test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#0 <- block@5, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#1 <- block@6, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#2 <- block@7, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#3 <- block@8, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#4 <- block@9, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#5 <- block@10, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#6 <- block@11, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#7 <- block@12, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#8 <- block@13, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#9 <- block@14, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#10 <- block@15, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#11 <- block@16, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#12 <- block@17, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#13 <- block@18, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#14 <- block@20, test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__%0#15 <- block@21)
        return tmp%0#1

subroutine test_cases.tuple_support.nested_tuples.get_sender_inefficiently() -> bytes[32]:
    block@0: // L179
        (log "Order is important")
        let tmp%0#0: bytes[32] = (txn Sender)
        return tmp%0#0

subroutine test_cases.tuple_support.nested_tuples.simple_tup(a: uint64, b: uint64) -> <uint64, uint64>:
    block@0: // L185
        (log "I'm just a simple tup")
        return a#0 b#0

subroutine test_cases.tuple_support.nested_tuples.echo(s: string) -> string:
    block@0: // L191
        (log "Is there an echo in here?")
        return s#0

subroutine test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: bool) -> void:
    block@0: // L247
        let s.0.0#0: uint64 = 0u
        let s.2.0#0: uint64 = 2u
        let tmp%2#0: bool = (== one#0 1u)
        (assert tmp%2#0)
        goto reassign#0 ? block@1 : block@2
    block@1: // if_body_L262
        let s.0.0#1: uint64 = 3u
        let s.1.0#1: uint64 = 4u
        let s.2.0#1: uint64 = 5u
        goto block@2
    block@2: // after_if_else_L261
        let s.0.0#2: uint64 = φ(s.0.0#0 <- block@0, s.0.0#1 <- block@1)
        let s.1.0#2: uint64 = φ(one#0 <- block@0, s.1.0#1 <- block@1)
        let s.2.0#2: uint64 = φ(s.2.0#0 <- block@0, s.2.0#1 <- block@1)
        let select%0#0: uint64 = (* reassign#0 3u)
        let tmp%6#0: bool = (== s.0.0#2 select%0#0)
        (assert tmp%6#0)
        let select%1#0: uint64 = (select 2u 5u reassign#0)
        let tmp%7#0: bool = (== s.2.0#2 select%1#0)
        (assert tmp%7#0)
        let s1#1: uint64 = (+ s.1.0#2 one#0)
        let tmp%9#0: bool = (== s1#1 select%1#0)
        (assert tmp%9#0)
        let select%3#0: uint64 = (select 1u 4u reassign#0)
        let tmp%10#0: bool = (== s.1.0#2 select%3#0)
        (assert tmp%10#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple(pwl.parent.foo: uint64, pwl.parent.foo_arc: Encoded(uint64), pwl.parent.child.a: uint64, pwl.parent.child.b: bytes, pwl.parent.child.c: string, pwl.children: Encoded(len+(uint64,len+uint8[],len+utf8[])[])) -> void:
    block@0: // L61
        let val_as_bytes%0#0: bytes[8] = (itob pwl.parent.foo#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 pwl.parent.foo_arc#0)
        let val_as_bytes%1#0: bytes[8] = (itob pwl.parent.child.a#0)
        let length%0#0: uint64 = (len pwl.parent.child.b#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 pwl.parent.child.b#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%0#0: uint64 = (+ 12u data_length%0#0)
        let encoded%3#0: Encoded((uint64,len+uint8[])) = (concat val_as_bytes%1#0 0x000c)
        let length%1#0: uint64 = (len pwl.parent.child.c#0)
        let as_bytes%2#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 pwl.parent.child.c#0)
        let tail%1#0: bytes = (concat encoded_value%0#0 encoded_value%1#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%4#0: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%3#0 offset_as_uint16%1#0)
        let encoded%5#0: bytes = (concat encoded%4#0 tail%1#0)
        let encoded%6#0: Encoded((uint64,uint64,(uint64,len+uint8[],len+utf8[]))) = (concat encoded%1#0 0x0012)
        let encoded%7#0: bytes = (concat encoded%6#0 encoded%5#0)
        let data_length%3#0: uint64 = (len encoded%7#0)
        let current_tail_offset%3#0: uint64 = (+ 4u data_length%3#0)
        let tail%4#0: bytes = (concat encoded%7#0 pwl.children#0)
        let as_bytes%6#0: bytes[8] = (itob current_tail_offset%3#0)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%9#0: Encoded(((uint64,uint64,(uint64,len+uint8[],len+utf8[])),len+(uint64,len+uint8[],len+utf8[])[])) = (concat 0x0004 offset_as_uint16%4#0)
        let encoded%10#0: bytes = (concat encoded%9#0 tail%4#0)
        (app_global_put "pwl" encoded%10#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple() -> <uint64, Encoded(uint64), uint64, bytes, string, Encoded(len+(uint64,len+uint8[],len+utf8[])[])>:
    block@0: // L65
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pwl")
        (assert maybe_exists%0#0) // check self.pwl exists
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let item0%0#0: bytes = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item0%2#0: uint64 = (extract_uint64 item0%0#0 0u)
        let item1%0#0: bytes = ((extract 8 8) item0%0#0) // on error: Index access is out of bounds
        let item_start_offset%1#0: uint64 = (extract_uint16 item0%0#0 16u)
        let item_end_offset%1#0: uint64 = (len item0%0#0)
        let item2%0#0: bytes = (substring3 item0%0#0 item_start_offset%1#0 item_end_offset%1#0)
        let item0%4#0: uint64 = (extract_uint64 item2%0#0 0u)
        let item_start_offset%2#0: uint64 = (extract_uint16 item2%0#0 8u)
        let item_end_offset%2#0: uint64 = (extract_uint16 item2%0#0 10u)
        let item1%1#0: bytes = (substring3 item2%0#0 item_start_offset%2#0 item_end_offset%2#0)
        let item1%2#0: bytes = ((extract 2 0) item1%1#0)
        let item_end_offset%3#0: uint64 = (len item2%0#0)
        let item2%1#0: bytes = (substring3 item2%0#0 item_end_offset%2#0 item_end_offset%3#0)
        let item2%2#0: bytes = ((extract 2 0) item2%1#0)
        let item_end_offset%4#0: uint64 = (len maybe_value%0#0)
        let item1%3#0: bytes = (substring3 maybe_value%0#0 item_end_offset%0#0 item_end_offset%4#0)
        return item0%2#0 item1%0#0 item0%4#0 item1%2#0 item2%2#0 item1%3#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box(key.a: uint64, key.b: uint64) -> void:
    block@0: // L69
        let tmp%0#0: uint64 = (+ key.b#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded%1#0)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%0#0)
        let encoded%4#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%3#0)
        (box_put box_prefixed_key%0#0 encoded%4#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box(key.a: uint64, key.b: uint64) -> bool:
    block@0: // L73
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded%1#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        return maybe_exists%0#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box(key.a: uint64, key.b: uint64) -> <uint64, uint64>:
    block@0: // L77
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded%1#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.box entry exists
        let item0%1#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let item1%1#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        return item0%1#0 item1%1#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box(key.a: uint64, key.b: uint64) -> <uint64, uint64, bool>:
    block@0: // L81
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded%1#0)
        let (maybe_value%0#0: bytes, exists#0: bool) = (box_get box_prefixed_key%0#0)
        goto exists#0 ? block@1 : block@2
    block@1: // ternary_true_L83
        let item0%1#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let item1%1#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        goto block@3
    block@2: // ternary_false_L83
        let ternary_result%0.a#1: uint64 = undefined
        let ternary_result%0.b#1: uint64 = undefined
        goto block@3
    block@3: // ternary_merge_L83
        let maybe_value.a#0: uint64 = φ(item0%1#0 <- block@1, ternary_result%0.a#1 <- block@2)
        let maybe_value.b#0: uint64 = φ(item1%1#0 <- block@1, ternary_result%0.b#1 <- block@2)
        return maybe_value.a#0 maybe_value.b#0 exists#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default(key.a: uint64, key.b: uint64) -> <uint64, uint64>:
    block@0: // L86
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded%1#0)
        let (tmp%0#0: uint64, tmp%1#0: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        goto maybe_exists%0#0 ? block@1 : block@2
    block@1: // ternary_true_L88
        let item0%1#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let item1%1#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        goto block@3
    block@2: // ternary_false_L88
        goto block@3
    block@3: // ternary_merge_L88
        let ternary_result%0.a#2: uint64 = φ(item0%1#0 <- block@1, tmp%0#0 <- block@2)
        let ternary_result%0.b#2: uint64 = φ(item1%1#0 <- block@1, tmp%1#0 <- block@2)
        return ternary_result%0.a#2 ternary_result%0.b#2

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default(key: string) -> <uint64, uint64>:
    block@0: // L90
        let local#0: bytes = test_cases.tuple_support.nested_tuples.echo(key#0)
        let tmp%0#0: bytes[32] = test_cases.tuple_support.nested_tuples.get_sender_inefficiently()
        let (tmp%1#0: uint64, tmp%2#0: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#0 0u local#0)
        goto maybe_exists%0#0 ? block@1 : block@2
    block@1: // ternary_true_L93
        let item0%1#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let item1%1#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        goto block@3
    block@2: // ternary_false_L93
        goto block@3
    block@3: // ternary_merge_L93
        let ternary_result%0.a#2: uint64 = φ(item0%1#0 <- block@1, tmp%1#0 <- block@2)
        let ternary_result%0.b#2: uint64 = φ(item1%1#0 <- block@1, tmp%2#0 <- block@2)
        return ternary_result%0.a#2 ternary_result%0.b#2

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple() -> <Encoded(len+uint64[]), uint64, bytes, string>:
    block@0: // L95
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L107
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L108
        let bytes_offset%0#0: uint64 = (* i#1 8u)
        let encoded_element%0#0: bytes = (extract3 0x000000000000000000000000000000010000000000000002 bytes_offset%0#0 8u) // on error: index access is out of bounds
        let tmp%0#0: biguint = (itob i#1)
        let tmp%1#0: bool = (b== encoded_element%0#0 tmp%0#0)
        (assert tmp%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L107
        return 0x0003000000000000000000000000000000010000000000000002 0u 0x ""

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method() -> void:
    block@0: // L114
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "twm")
        (assert maybe_exists%0#0) // check self.twm exists
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let arr2#0: Encoded(len+uint64[]) = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr2#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 0x0000000000000001)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr2#1: Encoded(len+uint64[]) = (concat len_16_bit%0#0 concatenated%0#0)
        let item_end_offset%5#0: uint64 = (len maybe_value%0#0)
        let item1%3#0: bytes = (substring3 maybe_value%0#0 item_end_offset%0#0 item_end_offset%5#0)
        let item0%5#0: uint64 = (extract_uint64 item1%3#0 0u)
        let item_start_offset%6#0: uint64 = (extract_uint16 item1%3#0 8u)
        let item_end_offset%6#0: uint64 = (extract_uint16 item1%3#0 10u)
        let item1%4#0: bytes = (substring3 item1%3#0 item_start_offset%6#0 item_end_offset%6#0)
        let item1%5#0: bytes = ((extract 2 0) item1%4#0)
        let item_end_offset%7#0: uint64 = (len item1%3#0)
        let item2%2#0: bytes = (substring3 item1%3#0 item_end_offset%6#0 item_end_offset%7#0)
        let item2%3#0: bytes = ((extract 2 0) item2%2#0)
        let data_length%0#0: uint64 = (len arr2#1)
        let current_tail_offset%0#0: uint64 = (+ 4u data_length%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob item0%5#0)
        let length%0#0: uint64 = (len item1%5#0)
        let as_bytes%2#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 item1%5#0)
        let data_length%1#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ 12u data_length%1#0)
        let encoded%4#0: Encoded((uint64,len+uint8[])) = (concat val_as_bytes%0#0 0x000c)
        let length%1#0: uint64 = (len item2%3#0)
        let as_bytes%4#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 item2%3#0)
        let tail%2#0: bytes = (concat encoded_value%0#0 encoded_value%1#0)
        let as_bytes%5#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded%5#0: Encoded((uint64,len+uint8[],len+utf8[])) = (concat encoded%4#0 offset_as_uint16%2#0)
        let encoded%6#0: bytes = (concat encoded%5#0 tail%2#0)
        let tail%3#0: bytes = (concat arr2#1 encoded%6#0)
        let as_bytes%6#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%7#0: Encoded((len+uint64[],(uint64,len+uint8[],len+utf8[]))) = (concat 0x0004 offset_as_uint16%3#0)
        let encoded%8#0: bytes = (concat encoded%7#0 tail%3#0)
        (app_global_put "twm" encoded%8#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.run_tests() -> bool:
    block@0: // L120
        let (nt.1.0#0: uint64, nt.1.1#0: uint64) = (addw 1u 2u)
        let tmp%4#1: bool = (! nt.1.0#0)
        let tmp%6#1: bool = (== nt.1.1#0 3u)
        let tmp%7#1: bool = (&& tmp%4#1 tmp%6#1)
        (assert tmp%7#1)
        (assert tmp%4#1)
        (assert tmp%6#1)
        test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 1u)
        test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 0u)
        let array%array_length%0#1: uint64 = 2u
        let tmp%1#2: bool = 1u
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let t.0#0: uint64 = 1u
        let t.1#0: uint64 = 2u
        goto block@12
    block@12: // for_body_L298
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@13, loop_counter%0#3 <- block@14, loop_counter%0#4 <- block@15)
        let t.0#1: uint64 = φ(t.0#0 <- block@0, t.0#2 <- block@13, t.0#3 <- block@14, t.0#4 <- block@15)
        let t.1#1: uint64 = φ(t.1#0 <- block@0, t.1#2 <- block@13, t.1#3 <- block@14, t.1#4 <- block@15)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@13, total#2 <- block@14, total#2 <- block@15)
        let tmp%0#3: uint64 = (+ t.0#1 t.1#1)
        let total#2: uint64 = (+ total#1 tmp%0#3)
        goto_nth [block@13, block@14, block@15][loop_counter%0#1] else goto block@16
    block@13: // for_header_1_L297
        let loop_counter%0#2: uint64 = 1u
        let t.0#2: uint64 = 2u
        let t.1#2: uint64 = 1u
        goto block@12
    block@14: // for_header_2_L297
        let loop_counter%0#3: uint64 = 2u
        let t.0#3: uint64 = 1u
        let t.1#3: uint64 = 1u
        goto block@12
    block@15: // for_header_3_L297
        let loop_counter%0#4: uint64 = 3u
        let t.0#4: uint64 = 2u
        let t.1#4: uint64 = 2u
        goto block@12
    block@16: // after_for_L297
        let loop_counter%1#0: uint64 = 0u
        let a#2: uint64 = 1u
        let b#2: uint64 = 2u
        goto block@17
    block@17: // for_body_L302
        let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@16, loop_counter%1#2 <- block@18, loop_counter%1#3 <- block@19, loop_counter%1#4 <- block@20)
        let total#3: uint64 = φ(total#2 <- block@16, total#4 <- block@18, total#4 <- block@19, total#4 <- block@20)
        let a#3: uint64 = φ(a#2 <- block@16, a#4 <- block@18, a#5 <- block@19, a#6 <- block@20)
        let b#3: uint64 = φ(b#2 <- block@16, b#4 <- block@18, b#5 <- block@19, b#6 <- block@20)
        let tmp%1#3: uint64 = (+ a#3 b#3)
        let total#4: uint64 = (+ total#3 tmp%1#3)
        goto_nth [block@18, block@19, block@20][loop_counter%1#1] else goto block@21
    block@18: // for_header_1_L301
        let loop_counter%1#2: uint64 = 1u
        let a#4: uint64 = 2u
        let b#4: uint64 = 1u
        goto block@17
    block@19: // for_header_2_L301
        let loop_counter%1#3: uint64 = 2u
        let a#5: uint64 = 1u
        let b#5: uint64 = 1u
        goto block@17
    block@20: // for_header_3_L301
        let loop_counter%1#4: uint64 = 3u
        let a#6: uint64 = 2u
        let b#6: uint64 = 2u
        goto block@17
    block@21: // after_for_L301
        let tmp%2#3: uint64 = (/ total#4 8u)
        let tmp%3#3: bool = (== tmp%2#3 3u)
        (assert tmp%3#3)
        (app_global_put "build_nested_call_count" 1u)
        return 1u