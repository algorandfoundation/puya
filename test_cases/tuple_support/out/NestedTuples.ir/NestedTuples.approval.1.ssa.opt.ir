main test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "build_nested_call_count" 0u)
        let array_data%0#0: bytes = 0x0000
        let val_as_bytes%0#0: bytes[8] = (itob 0u)
        let length%0#0: uint64 = 0u
        let length_uint16%0#0: bytes = 0x0000
        let encoded_value%0#0: bytes = 0x0000
        let length%1#0: uint64 = 0u
        let length_uint16%1#0: bytes = 0x0000
        let encoded_value%1#0: bytes = 0x0000
        let as_bytes%2#0: bytes[8] = (itob 12u)
        let offset_as_uint16%0#0: bytes = 0x000c
        let encoded_tuple_buffer%2#0: bytes = 0x0000000000000000000c
        let data_length%0#0: uint64 = 2u
        let current_tail_offset%1#0: uint64 = 14u
        let as_bytes%3#0: bytes[8] = (itob 14u)
        let offset_as_uint16%1#0: bytes = 0x000e
        let encoded_tuple_buffer%3#0: bytes = 0x0000000000000000000c000e
        let data_length%1#0: uint64 = 2u
        let encoded_tuple_buffer%4#0: bytes = 0x0000000000000000000c000e0000
        let encoded_tuple_buffer%5#0: bytes = 0x0000000000000000000c000e00000000
        let as_bytes%4#0: bytes[8] = (itob 4u)
        let offset_as_uint16%2#0: bytes = 0x0004
        let encoded_tuple_buffer%7#0: bytes = 0x0004
        let data_length%2#0: uint64 = 2u
        let current_tail_offset%4#0: uint64 = 6u
        let as_bytes%5#0: bytes[8] = (itob 6u)
        let offset_as_uint16%3#0: bytes = 0x0006
        let encoded_tuple_buffer%8#0: bytes = 0x00040006
        let data_length%3#0: uint64 = 16u
        let encoded_tuple_buffer%9#0: bytes = 0x000400060000
        let encoded_tuple_buffer%10#0: bytes = 0x0004000600000000000000000000000c000e00000000
        (app_global_put "twm" 0x0004000600000000000000000000000c000e00000000)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bool = test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__()
        return tmp%0#1

subroutine test_cases.tuple_support.nested_tuples.get_sender_inefficiently() -> bytes[32]:
    block@0: // L179
        (log "Order is important")
        let tmp%0#0: bytes[32] = (txn Sender)
        return tmp%0#0

subroutine test_cases.tuple_support.nested_tuples.simple_tup(a: uint64, b: uint64) -> <uint64, uint64>:
    block@0: // L185
        (log "I'm just a simple tup")
        return a#0 b#0

subroutine test_cases.tuple_support.nested_tuples.echo(s: bytes) -> bytes:
    block@0: // L191
        (log "Is there an echo in here?")
        return s#0

subroutine test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: bool) -> void:
    block@0: // L247
        let s.0.0#0: uint64 = 0u
        let s.2.0#0: uint64 = 2u
        let tmp%0#0: bool = 1u
        let tmp%1#0: bool = 1u
        let tmp%2#0: bool = (== one#0 1u)
        (assert tmp%2#0)
        let tmp%3#0: bool = 1u
        let tmp%4#0: bool = 1u
        let tmp%5#0: bool = 1u
        goto reassign#0 ? block@1 : block@2
    block@1: // if_body_L262
        let s.0.0#1: uint64 = 3u
        let s.1.0#1: uint64 = 4u
        let s.2.0#1: uint64 = 5u
        goto block@2
    block@2: // after_if_else_L261
        let s.0.0#2: uint64 = φ(s.0.0#0 <- block@0, s.0.0#1 <- block@1)
        let s.1.0#2: uint64 = φ(one#0 <- block@0, s.1.0#1 <- block@1)
        let s.2.0#2: uint64 = φ(s.2.0#0 <- block@0, s.2.0#1 <- block@1)
        let select%0#0: uint64 = (* reassign#0 3u)
        let tmp%6#0: bool = (== s.0.0#2 select%0#0)
        (assert tmp%6#0)
        let select%1#0: uint64 = (select 2u 5u reassign#0)
        let tmp%7#0: bool = (== s.2.0#2 select%1#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = 1u
        let s1#1: uint64 = (+ s.1.0#2 one#0)
        let tmp%9#0: bool = (== s1#1 select%1#0)
        (assert tmp%9#0)
        let select%3#0: uint64 = (select 1u 4u reassign#0)
        let tmp%10#0: bool = (== s.1.0#2 select%3#0)
        (assert tmp%10#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__() -> bool:
    block@0: // L48
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%0#0 ? block@1 : block@18
    block@1: // abi_routing_L48
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void" => block@2, method "load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])" => block@3, method "store_tuple_in_box((uint64,uint64))void" => block@4, method "is_tuple_in_box((uint64,uint64))bool" => block@5, method "load_tuple_from_box((uint64,uint64))(uint64,uint64)" => block@6, method "maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)" => block@7, method "load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)" => block@8, method "load_tuple_from_local_state_or_default(string)(uint64,uint64)" => block@9, method "mutate_local_tuple()(uint64[],(uint64,byte[],string))" => block@10, method "mutate_tuple_in_storage_currently_supported_method()void" => block@11, method "run_tests()bool" => block@12, method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))" => block@13, method "named_tuple((uint64,byte[],string))(uint64,byte[],string)" => block@14, method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))" => block@15, * => block@22}
    block@2: // store_tuple_route_L61
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%7#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%7#0 2u)
        let item0%0#0: bytes = (substring3 tmp%7#0 item_start_offset%0#0 item_end_offset%0#0)
        let item0%1#0: bytes = ((extract 0 8) item0%0#0) // on error: Index access is out of bounds
        let item0%2#0: uint64 = (extract_uint64 item0%0#0 0u)
        let item1%0#0: bytes = ((extract 8 8) item0%0#0) // on error: Index access is out of bounds
        let item_start_offset%1#0: uint64 = (extract_uint16 item0%0#0 16u)
        let item_end_offset%1#0: uint64 = (len item0%0#0)
        let item2%0#0: bytes = (substring3 item0%0#0 item_start_offset%1#0 item_end_offset%1#0)
        let item0%3#0: bytes = ((extract 0 8) item2%0#0) // on error: Index access is out of bounds
        let item0%4#0: uint64 = (extract_uint64 item2%0#0 0u)
        let item_start_offset%2#0: uint64 = (extract_uint16 item2%0#0 8u)
        let item_end_offset%2#0: uint64 = (extract_uint16 item2%0#0 10u)
        let item1%1#0: bytes = (substring3 item2%0#0 item_start_offset%2#0 item_end_offset%2#0)
        let item1%2#0: bytes = ((extract 2 0) item1%1#0)
        let item_end_offset%3#0: uint64 = (len item2%0#0)
        let item2%1#0: bytes = (substring3 item2%0#0 item_end_offset%2#0 item_end_offset%3#0)
        let item2%2#0: bytes = ((extract 2 0) item2%1#0)
        let item_end_offset%4#0: uint64 = (len tmp%7#0)
        let item1%3#0: bytes = (substring3 tmp%7#0 item_end_offset%0#0 item_end_offset%4#0)
        test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple(item0%2#0, item1%0#0, item0%4#0, item1%2#0, item2%2#0, item1%3#0)
        return 1u
    block@3: // load_tuple_route_L65
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: bytes[8], elements_to_encode%2#0: uint64, elements_to_encode%3#0: bytes, elements_to_encode%4#0: bytes, elements_to_encode%5#0: (encoded_uint64,bytes,bytes)[]) = test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple()
        let val_as_bytes%0#0: bytes[8] = (itob elements_to_encode%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%2#0)
        let length%0#0: uint64 = (len elements_to_encode%3#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 elements_to_encode%3#0)
        let length%1#0: uint64 = (len elements_to_encode%4#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 elements_to_encode%4#0)
        let as_bytes%2#0: bytes[8] = (itob 12u)
        let offset_as_uint16%0#0: bytes = 0x000c
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%1#0 0x000c)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ 12u data_length%0#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%1#0)
        let data_length%1#0: uint64 = (len encoded_value%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 encoded_value%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 encoded_value%1#0)
        let encoded_tuple_buffer%8#0: bytes = (concat val_as_bytes%0#0 elements_to_encode%1#0)
        let as_bytes%4#0: bytes[8] = (itob 18u)
        let offset_as_uint16%2#0: bytes = 0x0012
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 0x0012)
        let data_length%2#0: uint64 = (len encoded_tuple_buffer%5#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 encoded_tuple_buffer%5#0)
        let as_bytes%5#0: bytes[8] = (itob 4u)
        let offset_as_uint16%3#0: bytes = 0x0004
        let encoded_tuple_buffer%12#0: bytes = 0x0004
        let data_length%3#0: uint64 = (len encoded_tuple_buffer%10#0)
        let current_tail_offset%6#0: uint64 = (+ 4u data_length%3#0)
        let as_bytes%6#0: bytes[8] = (itob current_tail_offset%6#0)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_tuple_buffer%13#0: bytes = (concat 0x0004 offset_as_uint16%4#0)
        let data_length%4#0: uint64 = (len elements_to_encode%5#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 encoded_tuple_buffer%10#0)
        let encoded_tuple_buffer%15#0: bytes = (concat encoded_tuple_buffer%14#0 elements_to_encode%5#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%15#0)
        (log tmp%12#0)
        return 1u
    block@4: // store_tuple_in_box_route_L69
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%5#0: bytes = ((extract 0 8) reinterpret_bytes[16]%0#0) // on error: Index access is out of bounds
        let item0%6#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 0u)
        let item1%4#0: bytes = ((extract 8 8) reinterpret_bytes[16]%0#0) // on error: Index access is out of bounds
        let item1%5#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 8u)
        test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box(item0%6#0, item1%5#0)
        return 1u
    block@5: // is_tuple_in_box_route_L73
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_bytes[16]%1#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%7#0: bytes = ((extract 0 8) reinterpret_bytes[16]%1#0) // on error: Index access is out of bounds
        let item0%8#0: uint64 = (extract_uint64 reinterpret_bytes[16]%1#0 0u)
        let item1%6#0: bytes = ((extract 8 8) reinterpret_bytes[16]%1#0) // on error: Index access is out of bounds
        let item1%7#0: uint64 = (extract_uint64 reinterpret_bytes[16]%1#0 8u)
        let to_encode%0#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box(item0%8#0, item1%7#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%0#0)
        let tmp%21#0: bytes = (concat 0x151f7c75 encoded_bool%0#0)
        (log tmp%21#0)
        return 1u
    block@6: // load_tuple_from_box_route_L77
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%24#0) // can only call when not creating
        let reinterpret_bytes[16]%2#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%9#0: bytes = ((extract 0 8) reinterpret_bytes[16]%2#0) // on error: Index access is out of bounds
        let item0%10#0: uint64 = (extract_uint64 reinterpret_bytes[16]%2#0 0u)
        let item1%8#0: bytes = ((extract 8 8) reinterpret_bytes[16]%2#0) // on error: Index access is out of bounds
        let item1%9#0: uint64 = (extract_uint64 reinterpret_bytes[16]%2#0 8u)
        let (elements_to_encode%6#0: uint64, elements_to_encode%7#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box(item0%10#0, item1%9#0)
        let val_as_bytes%2#0: bytes[8] = (itob elements_to_encode%6#0)
        let val_as_bytes%3#0: bytes[8] = (itob elements_to_encode%7#0)
        let encoded_tuple_buffer%18#0: bytes = (concat val_as_bytes%2#0 val_as_bytes%3#0)
        let tmp%26#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%18#0)
        (log tmp%26#0)
        return 1u
    block@7: // maybe_load_tuple_from_box_route_L81
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%29#0) // can only call when not creating
        let reinterpret_bytes[16]%3#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%11#0: bytes = ((extract 0 8) reinterpret_bytes[16]%3#0) // on error: Index access is out of bounds
        let item0%12#0: uint64 = (extract_uint64 reinterpret_bytes[16]%3#0 0u)
        let item1%10#0: bytes = ((extract 8 8) reinterpret_bytes[16]%3#0) // on error: Index access is out of bounds
        let item1%11#0: uint64 = (extract_uint64 reinterpret_bytes[16]%3#0 8u)
        let (elements_to_encode%8#0: uint64, elements_to_encode%9#0: uint64, elements_to_encode%10#0: bool) = test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box(item0%12#0, item1%11#0)
        let val_as_bytes%4#0: bytes[8] = (itob elements_to_encode%8#0)
        let val_as_bytes%5#0: bytes[8] = (itob elements_to_encode%9#0)
        let encoded_tuple_buffer%21#0: bytes = (concat val_as_bytes%4#0 val_as_bytes%5#0)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u elements_to_encode%10#0)
        let encoded_tuple_buffer%24#0: bytes = (concat encoded_tuple_buffer%21#0 encoded_bool%1#0)
        let tmp%31#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%24#0)
        (log tmp%31#0)
        return 1u
    block@8: // load_tuple_from_box_or_default_route_L86
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        let tmp%35#0: bool = (!= tmp%34#0 0u)
        (assert tmp%34#0) // can only call when not creating
        let reinterpret_bytes[16]%4#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%13#0: bytes = ((extract 0 8) reinterpret_bytes[16]%4#0) // on error: Index access is out of bounds
        let item0%14#0: uint64 = (extract_uint64 reinterpret_bytes[16]%4#0 0u)
        let item1%12#0: bytes = ((extract 8 8) reinterpret_bytes[16]%4#0) // on error: Index access is out of bounds
        let item1%13#0: uint64 = (extract_uint64 reinterpret_bytes[16]%4#0 8u)
        let (elements_to_encode%11#0: uint64, elements_to_encode%12#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default(item0%14#0, item1%13#0)
        let val_as_bytes%6#0: bytes[8] = (itob elements_to_encode%11#0)
        let val_as_bytes%7#0: bytes[8] = (itob elements_to_encode%12#0)
        let encoded_tuple_buffer%27#0: bytes = (concat val_as_bytes%6#0 val_as_bytes%7#0)
        let tmp%36#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%27#0)
        (log tmp%36#0)
        return 1u
    block@9: // load_tuple_from_local_state_or_default_route_L90
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (!= tmp%39#0 0u)
        (assert tmp%39#0) // can only call when not creating
        let tmp%41#0: bytes = (txna ApplicationArgs 1)
        let tmp%42#0: bytes = ((extract 2 0) tmp%41#0)
        let (elements_to_encode%13#0: uint64, elements_to_encode%14#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default(tmp%42#0)
        let val_as_bytes%8#0: bytes[8] = (itob elements_to_encode%13#0)
        let val_as_bytes%9#0: bytes[8] = (itob elements_to_encode%14#0)
        let encoded_tuple_buffer%30#0: bytes = (concat val_as_bytes%8#0 val_as_bytes%9#0)
        let tmp%43#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%30#0)
        (log tmp%43#0)
        return 1u
    block@10: // mutate_local_tuple_route_L95
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (! tmp%44#0)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        let tmp%47#0: bool = (!= tmp%46#0 0u)
        (assert tmp%46#0) // can only call when not creating
        let (elements_to_encode%15#0: bytes, elements_to_encode%16#0: uint64, elements_to_encode%17#0: bytes, elements_to_encode%18#0: bytes) = test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple()
        let val_as_bytes%10#0: bytes[8] = (itob elements_to_encode%16#0)
        let length%2#0: uint64 = (len elements_to_encode%17#0)
        let as_bytes%7#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 elements_to_encode%17#0)
        let length%3#0: uint64 = (len elements_to_encode%18#0)
        let as_bytes%8#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 elements_to_encode%18#0)
        let as_bytes%9#0: bytes[8] = (itob 12u)
        let offset_as_uint16%5#0: bytes = 0x000c
        let encoded_tuple_buffer%33#0: bytes = (concat val_as_bytes%10#0 0x000c)
        let data_length%5#0: uint64 = (len encoded_value%2#0)
        let current_tail_offset%14#0: uint64 = (+ 12u data_length%5#0)
        let as_bytes%10#0: bytes[8] = (itob current_tail_offset%14#0)
        let offset_as_uint16%6#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded_tuple_buffer%34#0: bytes = (concat encoded_tuple_buffer%33#0 offset_as_uint16%6#0)
        let data_length%6#0: uint64 = (len encoded_value%3#0)
        let encoded_tuple_buffer%35#0: bytes = (concat encoded_tuple_buffer%34#0 encoded_value%2#0)
        let encoded_tuple_buffer%36#0: bytes = (concat encoded_tuple_buffer%35#0 encoded_value%3#0)
        let as_bytes%11#0: bytes[8] = (itob 4u)
        let offset_as_uint16%7#0: bytes = 0x0004
        let encoded_tuple_buffer%38#0: bytes = 0x0004
        let data_length%7#0: uint64 = (len elements_to_encode%15#0)
        let current_tail_offset%17#0: uint64 = (+ 4u data_length%7#0)
        let as_bytes%12#0: bytes[8] = (itob current_tail_offset%17#0)
        let offset_as_uint16%8#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded_tuple_buffer%39#0: bytes = (concat 0x0004 offset_as_uint16%8#0)
        let data_length%8#0: uint64 = (len encoded_tuple_buffer%36#0)
        let encoded_tuple_buffer%40#0: bytes = (concat encoded_tuple_buffer%39#0 elements_to_encode%15#0)
        let encoded_tuple_buffer%41#0: bytes = (concat encoded_tuple_buffer%40#0 encoded_tuple_buffer%36#0)
        let tmp%48#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%41#0)
        (log tmp%48#0)
        return 1u
    block@11: // mutate_tuple_in_storage_currently_supported_method_route_L114
        let tmp%49#0: uint64 = (txn OnCompletion)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0) // OnCompletion is not NoOp
        let tmp%51#0: uint64 = (txn ApplicationID)
        let tmp%52#0: bool = (!= tmp%51#0 0u)
        (assert tmp%51#0) // can only call when not creating
        test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method()
        return 1u
    block@12: // run_tests_route_L120
        let tmp%53#0: uint64 = (txn OnCompletion)
        let tmp%54#0: bool = (! tmp%53#0)
        (assert tmp%54#0) // OnCompletion is not NoOp
        let tmp%55#0: uint64 = (txn ApplicationID)
        let tmp%56#0: bool = (!= tmp%55#0 0u)
        (assert tmp%55#0) // can only call when not creating
        let to_encode%1#0: bool = test_cases.tuple_support.nested_tuples.NestedTuples.run_tests()
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u to_encode%1#0)
        let tmp%57#0: bytes = (concat 0x151f7c75 encoded_bool%2#0)
        (log tmp%57#0)
        return 1u
    block@13: // nested_tuple_params_route_L149
        let tmp%58#0: uint64 = (txn OnCompletion)
        let tmp%59#0: bool = (! tmp%58#0)
        (assert tmp%59#0) // OnCompletion is not NoOp
        let tmp%60#0: uint64 = (txn ApplicationID)
        let tmp%61#0: bool = (!= tmp%60#0 0u)
        (assert tmp%60#0) // can only call when not creating
        let tmp%62#0: bytes = (txna ApplicationArgs 1)
        let item_start_offset%5#0: uint64 = (extract_uint16 tmp%62#0 0u)
        let item_end_offset%5#0: uint64 = (extract_uint16 tmp%62#0 2u)
        let item0%15#0: bytes = (substring3 tmp%62#0 item_start_offset%5#0 item_end_offset%5#0)
        let item0%16#0: bytes = ((extract 2 0) item0%15#0)
        let item_end_offset%6#0: uint64 = (len tmp%62#0)
        let item1%14#0: bytes = (substring3 tmp%62#0 item_end_offset%5#0 item_end_offset%6#0)
        let item_start_offset%7#0: uint64 = (extract_uint16 item1%14#0 0u)
        let item_end_offset%7#0: uint64 = (len item1%14#0)
        let item0%17#0: bytes = (substring3 item1%14#0 item_start_offset%7#0 item_end_offset%7#0)
        let item0%18#0: bytes = ((extract 2 0) item0%17#0)
        let item1%15#0: bytes = ((extract 2 8) item1%14#0) // on error: Index access is out of bounds
        let item0%19#0: bytes = ((extract 0 8) item1%15#0) // on error: Index access is out of bounds
        let item0%20#0: uint64 = (extract_uint64 item1%15#0 0u)
        let (elements_to_encode%19#0: bytes, elements_to_encode%20#0: bytes, elements_to_encode%21#0: uint64) = test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(item0%16#0, item0%18#0, item0%20#0)
        let length%4#0: uint64 = (len elements_to_encode%19#0)
        let as_bytes%13#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%13#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 elements_to_encode%19#0)
        let length%5#0: uint64 = (len elements_to_encode%20#0)
        let as_bytes%14#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%14#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 elements_to_encode%20#0)
        let val_as_bytes%11#0: bytes[8] = (itob elements_to_encode%21#0)
        let as_bytes%15#0: bytes[8] = (itob 10u)
        let offset_as_uint16%9#0: bytes = 0x000a
        let encoded_tuple_buffer%43#0: bytes = 0x000a
        let data_length%9#0: uint64 = (len encoded_value%5#0)
        let encoded_tuple_buffer%44#0: bytes = (concat 0x000a val_as_bytes%11#0)
        let encoded_tuple_buffer%45#0: bytes = (concat encoded_tuple_buffer%44#0 encoded_value%5#0)
        let as_bytes%16#0: bytes[8] = (itob 4u)
        let offset_as_uint16%10#0: bytes = 0x0004
        let encoded_tuple_buffer%47#0: bytes = 0x0004
        let data_length%10#0: uint64 = (len encoded_value%4#0)
        let current_tail_offset%22#0: uint64 = (+ 4u data_length%10#0)
        let as_bytes%17#0: bytes[8] = (itob current_tail_offset%22#0)
        let offset_as_uint16%11#0: bytes = ((extract 6 2) as_bytes%17#0)
        let encoded_tuple_buffer%48#0: bytes = (concat 0x0004 offset_as_uint16%11#0)
        let data_length%11#0: uint64 = (len encoded_tuple_buffer%45#0)
        let encoded_tuple_buffer%49#0: bytes = (concat encoded_tuple_buffer%48#0 encoded_value%4#0)
        let encoded_tuple_buffer%50#0: bytes = (concat encoded_tuple_buffer%49#0 encoded_tuple_buffer%45#0)
        let tmp%63#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%50#0)
        (log tmp%63#0)
        return 1u
    block@14: // named_tuple_route_L156
        let tmp%64#0: uint64 = (txn OnCompletion)
        let tmp%65#0: bool = (! tmp%64#0)
        (assert tmp%65#0) // OnCompletion is not NoOp
        let tmp%66#0: uint64 = (txn ApplicationID)
        let tmp%67#0: bool = (!= tmp%66#0 0u)
        (assert tmp%66#0) // can only call when not creating
        let tmp%68#0: bytes = (txna ApplicationArgs 1)
        let item0%21#0: bytes = ((extract 0 8) tmp%68#0) // on error: Index access is out of bounds
        let item0%22#0: uint64 = (extract_uint64 tmp%68#0 0u)
        let item_start_offset%8#0: uint64 = (extract_uint16 tmp%68#0 8u)
        let item_end_offset%8#0: uint64 = (extract_uint16 tmp%68#0 10u)
        let item1%16#0: bytes = (substring3 tmp%68#0 item_start_offset%8#0 item_end_offset%8#0)
        let item1%17#0: bytes = ((extract 2 0) item1%16#0)
        let item_end_offset%9#0: uint64 = (len tmp%68#0)
        let item2%3#0: bytes = (substring3 tmp%68#0 item_end_offset%8#0 item_end_offset%9#0)
        let item2%4#0: bytes = ((extract 2 0) item2%3#0)
        let (elements_to_encode%22#0: uint64, elements_to_encode%23#0: bytes, elements_to_encode%24#0: bytes) = test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple(item0%22#0, item1%17#0, item2%4#0)
        let val_as_bytes%12#0: bytes[8] = (itob elements_to_encode%22#0)
        let length%6#0: uint64 = (len elements_to_encode%23#0)
        let as_bytes%18#0: bytes[8] = (itob length%6#0)
        let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%18#0)
        let encoded_value%6#0: bytes = (concat length_uint16%6#0 elements_to_encode%23#0)
        let length%7#0: uint64 = (len elements_to_encode%24#0)
        let as_bytes%19#0: bytes[8] = (itob length%7#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%19#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 elements_to_encode%24#0)
        let as_bytes%20#0: bytes[8] = (itob 12u)
        let offset_as_uint16%12#0: bytes = 0x000c
        let encoded_tuple_buffer%53#0: bytes = (concat val_as_bytes%12#0 0x000c)
        let data_length%12#0: uint64 = (len encoded_value%6#0)
        let current_tail_offset%25#0: uint64 = (+ 12u data_length%12#0)
        let as_bytes%21#0: bytes[8] = (itob current_tail_offset%25#0)
        let offset_as_uint16%13#0: bytes = ((extract 6 2) as_bytes%21#0)
        let encoded_tuple_buffer%54#0: bytes = (concat encoded_tuple_buffer%53#0 offset_as_uint16%13#0)
        let data_length%13#0: uint64 = (len encoded_value%7#0)
        let encoded_tuple_buffer%55#0: bytes = (concat encoded_tuple_buffer%54#0 encoded_value%6#0)
        let encoded_tuple_buffer%56#0: bytes = (concat encoded_tuple_buffer%55#0 encoded_value%7#0)
        let tmp%69#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%56#0)
        (log tmp%69#0)
        return 1u
    block@15: // nested_named_tuple_params_route_L161
        let tmp%70#0: uint64 = (txn OnCompletion)
        let tmp%71#0: bool = (! tmp%70#0)
        (assert tmp%71#0) // OnCompletion is not NoOp
        let tmp%72#0: uint64 = (txn ApplicationID)
        let tmp%73#0: bool = (!= tmp%72#0 0u)
        (assert tmp%72#0) // can only call when not creating
        let tmp%74#0: bytes = (txna ApplicationArgs 1)
        let item0%23#0: bytes = ((extract 0 8) tmp%74#0) // on error: Index access is out of bounds
        let item0%24#0: uint64 = (extract_uint64 tmp%74#0 0u)
        let item1%18#0: bytes = ((extract 8 8) tmp%74#0) // on error: Index access is out of bounds
        let item_start_offset%10#0: uint64 = (extract_uint16 tmp%74#0 16u)
        let item_end_offset%10#0: uint64 = (len tmp%74#0)
        let item2%5#0: bytes = (substring3 tmp%74#0 item_start_offset%10#0 item_end_offset%10#0)
        let item0%25#0: bytes = ((extract 0 8) item2%5#0) // on error: Index access is out of bounds
        let item0%26#0: uint64 = (extract_uint64 item2%5#0 0u)
        let item_start_offset%11#0: uint64 = (extract_uint16 item2%5#0 8u)
        let item_end_offset%11#0: uint64 = (extract_uint16 item2%5#0 10u)
        let item1%19#0: bytes = (substring3 item2%5#0 item_start_offset%11#0 item_end_offset%11#0)
        let item1%20#0: bytes = ((extract 2 0) item1%19#0)
        let item_end_offset%12#0: uint64 = (len item2%5#0)
        let item2%6#0: bytes = (substring3 item2%5#0 item_end_offset%11#0 item_end_offset%12#0)
        let item2%7#0: bytes = ((extract 2 0) item2%6#0)
        let (elements_to_encode%25#0: uint64, elements_to_encode%26#0: bytes[8], elements_to_encode%27#0: uint64, elements_to_encode%28#0: bytes, elements_to_encode%29#0: bytes) = test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params(item0%24#0, item1%18#0, item0%26#0, item1%20#0, item2%7#0)
        let val_as_bytes%13#0: bytes[8] = (itob elements_to_encode%25#0)
        let val_as_bytes%14#0: bytes[8] = (itob elements_to_encode%27#0)
        let length%8#0: uint64 = (len elements_to_encode%28#0)
        let as_bytes%22#0: bytes[8] = (itob length%8#0)
        let length_uint16%8#0: bytes = ((extract 6 2) as_bytes%22#0)
        let encoded_value%8#0: bytes = (concat length_uint16%8#0 elements_to_encode%28#0)
        let length%9#0: uint64 = (len elements_to_encode%29#0)
        let as_bytes%23#0: bytes[8] = (itob length%9#0)
        let length_uint16%9#0: bytes = ((extract 6 2) as_bytes%23#0)
        let encoded_value%9#0: bytes = (concat length_uint16%9#0 elements_to_encode%29#0)
        let as_bytes%24#0: bytes[8] = (itob 12u)
        let offset_as_uint16%14#0: bytes = 0x000c
        let encoded_tuple_buffer%59#0: bytes = (concat val_as_bytes%14#0 0x000c)
        let data_length%14#0: uint64 = (len encoded_value%8#0)
        let current_tail_offset%28#0: uint64 = (+ 12u data_length%14#0)
        let as_bytes%25#0: bytes[8] = (itob current_tail_offset%28#0)
        let offset_as_uint16%15#0: bytes = ((extract 6 2) as_bytes%25#0)
        let encoded_tuple_buffer%60#0: bytes = (concat encoded_tuple_buffer%59#0 offset_as_uint16%15#0)
        let data_length%15#0: uint64 = (len encoded_value%9#0)
        let encoded_tuple_buffer%61#0: bytes = (concat encoded_tuple_buffer%60#0 encoded_value%8#0)
        let encoded_tuple_buffer%62#0: bytes = (concat encoded_tuple_buffer%61#0 encoded_value%9#0)
        let encoded_tuple_buffer%65#0: bytes = (concat val_as_bytes%13#0 elements_to_encode%26#0)
        let as_bytes%26#0: bytes[8] = (itob 18u)
        let offset_as_uint16%16#0: bytes = 0x0012
        let encoded_tuple_buffer%66#0: bytes = (concat encoded_tuple_buffer%65#0 0x0012)
        let data_length%16#0: uint64 = (len encoded_tuple_buffer%62#0)
        let encoded_tuple_buffer%67#0: bytes = (concat encoded_tuple_buffer%66#0 encoded_tuple_buffer%62#0)
        let tmp%75#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%67#0)
        (log tmp%75#0)
        return 1u
    block@18: // bare_routing_L48
        let tmp%76#0: uint64 = (txn OnCompletion)
        goto tmp%76#0 ? block@22 : block@19
    block@19: // __algopy_default_create_L1
        let tmp%77#0: uint64 = (txn ApplicationID)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0) // can only call when creating
        return 1u
    block@22: // after_if_else_L48
        return 0u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple(pwl.parent.foo: uint64, pwl.parent.foo_arc: bytes[8], pwl.parent.child.a: uint64, pwl.parent.child.b: bytes, pwl.parent.child.c: bytes, pwl.children: (encoded_uint64,bytes,bytes)[]) -> void:
    block@0: // L61
        let val_as_bytes%0#0: bytes[8] = (itob pwl.parent.foo#0)
        let val_as_bytes%1#0: bytes[8] = (itob pwl.parent.child.a#0)
        let length%0#0: uint64 = (len pwl.parent.child.b#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 pwl.parent.child.b#0)
        let length%1#0: uint64 = (len pwl.parent.child.c#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 pwl.parent.child.c#0)
        let encoded_tuple_buffer%1#0: bytes = val_as_bytes%1#0
        let as_bytes%2#0: bytes[8] = (itob 12u)
        let offset_as_uint16%0#0: bytes = 0x000c
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%1#0 0x000c)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ 12u data_length%0#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%1#0)
        let data_length%1#0: uint64 = (len encoded_value%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 encoded_value%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 encoded_value%1#0)
        let encoded_tuple_buffer%7#0: bytes = val_as_bytes%0#0
        let encoded_tuple_buffer%8#0: bytes = (concat val_as_bytes%0#0 pwl.parent.foo_arc#0)
        let as_bytes%4#0: bytes[8] = (itob 18u)
        let offset_as_uint16%2#0: bytes = 0x0012
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 0x0012)
        let data_length%2#0: uint64 = (len encoded_tuple_buffer%5#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 encoded_tuple_buffer%5#0)
        let as_bytes%5#0: bytes[8] = (itob 4u)
        let offset_as_uint16%3#0: bytes = 0x0004
        let encoded_tuple_buffer%12#0: bytes = 0x0004
        let data_length%3#0: uint64 = (len encoded_tuple_buffer%10#0)
        let current_tail_offset%6#0: uint64 = (+ 4u data_length%3#0)
        let as_bytes%6#0: bytes[8] = (itob current_tail_offset%6#0)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_tuple_buffer%13#0: bytes = (concat 0x0004 offset_as_uint16%4#0)
        let data_length%4#0: uint64 = (len pwl.children#0)
        let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 encoded_tuple_buffer%10#0)
        let encoded_tuple_buffer%15#0: bytes = (concat encoded_tuple_buffer%14#0 pwl.children#0)
        (app_global_put "pwl" encoded_tuple_buffer%15#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple() -> <uint64, bytes[8], uint64, bytes, bytes, (encoded_uint64,bytes,bytes)[]>:
    block@0: // L65
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pwl")
        (assert maybe_exists%0#0) // check self.pwl exists
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let item0%0#0: bytes = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item0%1#0: bytes = ((extract 0 8) item0%0#0) // on error: Index access is out of bounds
        let item0%2#0: uint64 = (extract_uint64 item0%0#0 0u)
        let item1%0#0: bytes = ((extract 8 8) item0%0#0) // on error: Index access is out of bounds
        let item_start_offset%1#0: uint64 = (extract_uint16 item0%0#0 16u)
        let item_end_offset%1#0: uint64 = (len item0%0#0)
        let item2%0#0: bytes = (substring3 item0%0#0 item_start_offset%1#0 item_end_offset%1#0)
        let item0%3#0: bytes = ((extract 0 8) item2%0#0) // on error: Index access is out of bounds
        let item0%4#0: uint64 = (extract_uint64 item2%0#0 0u)
        let item_start_offset%2#0: uint64 = (extract_uint16 item2%0#0 8u)
        let item_end_offset%2#0: uint64 = (extract_uint16 item2%0#0 10u)
        let item1%1#0: bytes = (substring3 item2%0#0 item_start_offset%2#0 item_end_offset%2#0)
        let item1%2#0: bytes = ((extract 2 0) item1%1#0)
        let item_end_offset%3#0: uint64 = (len item2%0#0)
        let item2%1#0: bytes = (substring3 item2%0#0 item_end_offset%2#0 item_end_offset%3#0)
        let item2%2#0: bytes = ((extract 2 0) item2%1#0)
        let item_end_offset%4#0: uint64 = (len maybe_value%0#0)
        let item1%3#0: bytes = (substring3 maybe_value%0#0 item_end_offset%0#0 item_end_offset%4#0)
        return item0%2#0 item1%0#0 item0%4#0 item1%2#0 item2%2#0 item1%3#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box(key.a: uint64, key.b: uint64) -> void:
    block@0: // L69
        let tmp%0#0: uint64 = (+ key.b#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded_tuple_buffer%2#0)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%3#0)
        (box_put box_prefixed_key%0#0 encoded_tuple_buffer%5#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box(key.a: uint64, key.b: uint64) -> bool:
    block@0: // L73
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded_tuple_buffer%1#0: bytes = val_as_bytes%0#0
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded_tuple_buffer%2#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        return maybe_exists%0#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box(key.a: uint64, key.b: uint64) -> <uint64, uint64>:
    block@0: // L77
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded_tuple_buffer%1#0: bytes = val_as_bytes%0#0
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded_tuple_buffer%2#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.box entry exists
        let item0%0#0: bytes = ((extract 0 8) maybe_value%0#0) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let item1%0#0: bytes = ((extract 8 8) maybe_value%0#0) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        return item0%1#0 item1%1#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box(key.a: uint64, key.b: uint64) -> <uint64, uint64, bool>:
    block@0: // L81
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded_tuple_buffer%1#0: bytes = val_as_bytes%0#0
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded_tuple_buffer%2#0)
        let (maybe_value%0#0: bytes, exists#0: bool) = (box_get box_prefixed_key%0#0)
        goto exists#0 ? block@1 : block@2
    block@1: // ternary_true_L83
        let item0%0#0: bytes = ((extract 0 8) maybe_value%0#0) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let item1%0#0: bytes = ((extract 8 8) maybe_value%0#0) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        goto block@3
    block@2: // ternary_false_L83
        let ternary_result%0.a#1: uint64 = undefined
        let ternary_result%0.b#1: uint64 = undefined
        goto block@3
    block@3: // ternary_merge_L83
        let maybe_value.a#0: uint64 = φ(item0%1#0 <- block@1, ternary_result%0.a#1 <- block@2)
        let maybe_value.b#0: uint64 = φ(item1%1#0 <- block@1, ternary_result%0.b#1 <- block@2)
        return maybe_value.a#0 maybe_value.b#0 exists#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default(key.a: uint64, key.b: uint64) -> <uint64, uint64>:
    block@0: // L86
        let val_as_bytes%0#0: bytes[8] = (itob key.a#0)
        let val_as_bytes%1#0: bytes[8] = (itob key.b#0)
        let encoded_tuple_buffer%1#0: bytes = val_as_bytes%0#0
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat "box" encoded_tuple_buffer%2#0)
        let (tmp%0#0: uint64, tmp%1#0: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        goto maybe_exists%0#0 ? block@1 : block@2
    block@1: // ternary_true_L88
        let item0%0#0: bytes = ((extract 0 8) maybe_value%0#0) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let item1%0#0: bytes = ((extract 8 8) maybe_value%0#0) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        goto block@3
    block@2: // ternary_false_L88
        goto block@3
    block@3: // ternary_merge_L88
        let ternary_result%0.a#2: uint64 = φ(item0%1#0 <- block@1, tmp%0#0 <- block@2)
        let ternary_result%0.b#2: uint64 = φ(item1%1#0 <- block@1, tmp%1#0 <- block@2)
        return ternary_result%0.a#2 ternary_result%0.b#2

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default(key: bytes) -> <uint64, uint64>:
    block@0: // L90
        let local#0: bytes = test_cases.tuple_support.nested_tuples.echo(key#0)
        let tmp%0#0: bytes[32] = test_cases.tuple_support.nested_tuples.get_sender_inefficiently()
        let (tmp%1#0: uint64, tmp%2#0: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#0 0u local#0)
        goto maybe_exists%0#0 ? block@1 : block@2
    block@1: // ternary_true_L93
        let item0%0#0: bytes = ((extract 0 8) maybe_value%0#0) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let item1%0#0: bytes = ((extract 8 8) maybe_value%0#0) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        goto block@3
    block@2: // ternary_false_L93
        goto block@3
    block@3: // ternary_merge_L93
        let ternary_result%0.a#2: uint64 = φ(item0%1#0 <- block@1, tmp%1#0 <- block@2)
        let ternary_result%0.b#2: uint64 = φ(item1%1#0 <- block@1, tmp%2#0 <- block@2)
        return ternary_result%0.a#2 ternary_result%0.b#2

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple() -> <bytes, uint64, bytes, bytes>:
    block@0: // L95
        let result%0#0: bytes = 0x0000000000000000
        let twm.arr#0: bytes = 0x00010000000000000000
        let expr_value_trimmed%0#0: bytes = 0x0000000000000000
        let encoded%0#0: bytes[8][] = encode<bytes[8]>(0x0000000000000001)
        let concatenated%0#0: bytes = (concat 0x0000000000000000 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let twm.arr#1: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) twm.arr#1)
        let encoded%1#0: bytes[8][] = encode<bytes[8]>(0x0000000000000002)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 encoded%1#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let twm.arr#2: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L107
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L108
        let array_head_and_tail%0#0: bytes = ((extract 2 0) twm.arr#2)
        let item_offset%0#0: uint64 = (* i#1 8u)
        let reinterpret_biguint%0#0: biguint = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let tmp%0#0: biguint = (itob i#1)
        let tmp%1#0: bool = (b== reinterpret_biguint%0#0 tmp%0#0)
        (assert tmp%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L107
        return twm.arr#2 0u 0x ""

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method() -> void:
    block@0: // L114
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "twm")
        (assert maybe_exists%0#0) // check self.twm exists
        let item_start_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let arr2#0: bytes = (substring3 maybe_value%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item_end_offset%1#0: uint64 = (len maybe_value%0#0)
        let item1%0#0: bytes = (substring3 maybe_value%0#0 item_end_offset%0#0 item_end_offset%1#0)
        let item0%1#0: bytes = ((extract 0 8) item1%0#0) // on error: Index access is out of bounds
        let item_start_offset%2#0: uint64 = (extract_uint16 item1%0#0 8u)
        let item_end_offset%2#0: uint64 = (extract_uint16 item1%0#0 10u)
        let item1%1#0: bytes = (substring3 item1%0#0 item_start_offset%2#0 item_end_offset%2#0)
        let item_end_offset%3#0: uint64 = (len item1%0#0)
        let item2%0#0: bytes = (substring3 item1%0#0 item_end_offset%2#0 item_end_offset%3#0)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr2#0)
        let encoded%0#0: bytes[8][] = encode<bytes[8]>(0x0000000000000001)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr2#1: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (maybe_value%0#0, maybe_exists%0#0)
        (assert maybe_exists%1#0) // check self.twm exists
        let item_start_offset%4#0: uint64 = (extract_uint16 maybe_value%1#0 0u)
        let item_end_offset%4#0: uint64 = (extract_uint16 maybe_value%1#0 2u)
        let item_end_offset%5#0: uint64 = (len maybe_value%1#0)
        let item1%3#0: bytes = (substring3 maybe_value%1#0 item_end_offset%4#0 item_end_offset%5#0)
        let item0%4#0: bytes = ((extract 0 8) item1%3#0) // on error: Index access is out of bounds
        let item0%5#0: uint64 = (extract_uint64 item1%3#0 0u)
        let item_start_offset%6#0: uint64 = (extract_uint16 item1%3#0 8u)
        let item_end_offset%6#0: uint64 = (extract_uint16 item1%3#0 10u)
        let item1%4#0: bytes = (substring3 item1%3#0 item_start_offset%6#0 item_end_offset%6#0)
        let item1%5#0: bytes = ((extract 2 0) item1%4#0)
        let item_end_offset%7#0: uint64 = (len item1%3#0)
        let item2%2#0: bytes = (substring3 item1%3#0 item_end_offset%6#0 item_end_offset%7#0)
        let item2%3#0: bytes = ((extract 2 0) item2%2#0)
        let val_as_bytes%0#0: bytes[8] = (itob item0%5#0)
        let length%0#0: uint64 = (len item1%5#0)
        let as_bytes%1#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 item1%5#0)
        let length%1#0: uint64 = (len item2%3#0)
        let as_bytes%2#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 item2%3#0)
        let as_bytes%3#0: bytes[8] = (itob 12u)
        let offset_as_uint16%0#0: bytes = 0x000c
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 0x000c)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ 12u data_length%0#0)
        let as_bytes%4#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%1#0)
        let data_length%1#0: uint64 = (len encoded_value%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 encoded_value%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 encoded_value%1#0)
        let as_bytes%5#0: bytes[8] = (itob 4u)
        let offset_as_uint16%2#0: bytes = 0x0004
        let encoded_tuple_buffer%7#0: bytes = 0x0004
        let data_length%2#0: uint64 = (len arr2#1)
        let current_tail_offset%4#0: uint64 = (+ 4u data_length%2#0)
        let as_bytes%6#0: bytes[8] = (itob current_tail_offset%4#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_tuple_buffer%8#0: bytes = (concat 0x0004 offset_as_uint16%3#0)
        let data_length%3#0: uint64 = (len encoded_tuple_buffer%5#0)
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 arr2#1)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 encoded_tuple_buffer%5#0)
        (app_global_put "twm" encoded_tuple_buffer%10#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.run_tests() -> bool:
    block@0: // L120
        let tmp%0#0: bool = 1u
        let tmp%1#0: bool = 1u
        let tmp%2#0: bool = 1u
        let tmp%3#0: bool = 1u
        let tmp%4#0: bool = 1u
        let tmp%5#0: bool = 1u
        let tmp%6#0: bool = 1u
        let tmp%7#0: bool = 1u
        let tmp%8#0: bool = 1u
        let tmp%9#0: bool = 1u
        let tmp%10#0: bool = 1u
        let (nt.1.0#0: uint64, nt.1.1#0: uint64) = (addw 1u 2u)
        let tmp%4#1: bool = (! nt.1.0#0)
        let tmp%5#1: uint64 = 3u
        let tmp%6#1: bool = (== nt.1.1#0 3u)
        let tmp%7#1: bool = (&& tmp%4#1 tmp%6#1)
        (assert tmp%7#1)
        (assert tmp%4#1)
        (assert tmp%6#1)
        test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 1u)
        test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 0u)
        let encoded%0#0: bytes[8][] = encode<bytes[8]>(0x0000000000000001)
        let concatenated%0#0: bytes = (concat 0x0000000000000000 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let x.0.0#1: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let tmp%0#2: uint64 = (extract_uint16 x.0.0#1 0u)
        let tmp%1#2: bool = (== tmp%0#2 2u)
        (assert tmp%1#2)
        let tmp%11#0: bool = 1u
        let tmp%12#0: bool = 1u
        let tmp%13#0: bool = 1u
        let tmp%14#0: bool = 1u
        let tmp%15#0: bool = 1u
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let t.0#0: uint64 = 1u
        let t.1#0: uint64 = 2u
        goto block@12
    block@12: // for_body_L298
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@13, loop_counter%0#3 <- block@14, loop_counter%0#4 <- block@15)
        let t.0#1: uint64 = φ(t.0#0 <- block@0, t.0#2 <- block@13, t.0#3 <- block@14, t.0#4 <- block@15)
        let t.1#1: uint64 = φ(t.1#0 <- block@0, t.1#2 <- block@13, t.1#3 <- block@14, t.1#4 <- block@15)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@13, total#2 <- block@14, total#2 <- block@15)
        let tmp%0#3: uint64 = (+ t.0#1 t.1#1)
        let total#2: uint64 = (+ total#1 tmp%0#3)
        goto_nth [block@13, block@14, block@15][loop_counter%0#1] else goto block@16
    block@13: // for_header_1_L297
        let loop_counter%0#2: uint64 = 1u
        let t.0#2: uint64 = 2u
        let t.1#2: uint64 = 1u
        goto block@12
    block@14: // for_header_2_L297
        let loop_counter%0#3: uint64 = 2u
        let t.0#3: uint64 = 1u
        let t.1#3: uint64 = 1u
        goto block@12
    block@15: // for_header_3_L297
        let loop_counter%0#4: uint64 = 3u
        let t.0#4: uint64 = 2u
        let t.1#4: uint64 = 2u
        goto block@12
    block@16: // after_for_L297
        let loop_counter%1#0: uint64 = 0u
        let a#2: uint64 = 1u
        let b#2: uint64 = 2u
        goto block@17
    block@17: // for_body_L302
        let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@16, loop_counter%1#2 <- block@18, loop_counter%1#3 <- block@19, loop_counter%1#4 <- block@20)
        let total#3: uint64 = φ(total#2 <- block@16, total#4 <- block@18, total#4 <- block@19, total#4 <- block@20)
        let a#3: uint64 = φ(a#2 <- block@16, a#4 <- block@18, a#5 <- block@19, a#6 <- block@20)
        let b#3: uint64 = φ(b#2 <- block@16, b#4 <- block@18, b#5 <- block@19, b#6 <- block@20)
        let tmp%1#3: uint64 = (+ a#3 b#3)
        let total#4: uint64 = (+ total#3 tmp%1#3)
        goto_nth [block@18, block@19, block@20][loop_counter%1#1] else goto block@21
    block@18: // for_header_1_L301
        let loop_counter%1#2: uint64 = 1u
        let a#4: uint64 = 2u
        let b#4: uint64 = 1u
        goto block@17
    block@19: // for_header_2_L301
        let loop_counter%1#3: uint64 = 2u
        let a#5: uint64 = 1u
        let b#5: uint64 = 1u
        goto block@17
    block@20: // for_header_3_L301
        let loop_counter%1#4: uint64 = 3u
        let a#6: uint64 = 2u
        let b#6: uint64 = 2u
        goto block@17
    block@21: // after_for_L301
        let tmp%2#3: uint64 = (/ total#4 8u)
        let tmp%3#3: bool = (== tmp%2#3 3u)
        (assert tmp%3#3)
        (app_global_put "build_nested_call_count" 0u)
        let (awst_tmp%0#1: bytes, awst_tmp%1#1: uint64, awst_tmp%2#0: bytes) = test_cases.tuple_support.nested_tuples.NestedTuples.build_nested()
        let tmp%0#4: bool = 1u
        let tmp%1#4: bool = 1u
        let tmp%2#4: bool = 1u
        let tmp%3#4: bool = 1u
        let tmp%4#3: bool = 1u
        goto block@26
    block@26: // ternary_merge_L174
        let tmp%5#3: bool = (== awst_tmp%0#1 "hi")
        (assert tmp%5#3)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "build_nested_call_count")
        (assert maybe_exists%0#0) // check self.build_nested_call_count exists
        let tmp%6#3: bool = (== maybe_value%0#0 1u)
        (assert tmp%6#3)
        return 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(args.0: bytes, args.1.0: bytes, args.1.1.0: uint64) -> <bytes, bytes, uint64>:
    block@0: // L149
        return args.1.0#0 args.0#0 args.1.1.0#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple(args.a: uint64, args.b: bytes, args.c: bytes) -> <uint64, bytes, bytes>:
    block@0: // L156
        return args.a#0 args.b#0 args.c#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params(args.foo: uint64, args.foo_arc: bytes[8], args.child.a: uint64, args.child.b: bytes, args.child.c: bytes) -> <uint64, bytes[8], uint64, bytes, bytes>:
    block@0: // L161
        return args.foo#0 args.foo_arc#0 args.child.a#0 args.child.b#0 args.child.c#0

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.build_nested() -> <bytes, uint64, bytes>:
    block@0: // L166
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "build_nested_call_count")
        (assert maybe_exists%0#0) // check self.build_nested_call_count exists
        let materialized_values%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "build_nested_call_count" materialized_values%0#0)
        return "hi" 1u 0x686d6d6d