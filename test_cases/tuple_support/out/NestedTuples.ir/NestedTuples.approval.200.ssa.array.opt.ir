main test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "build_nested_call_count" 0u)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = 0x0000
        let aggregate%as_bytes%1#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x0004
        let aggregate%head%0#0: bytes = 0x0004
        let aggregate%data_length%0#0: uint64 = 2u
        let aggregate%current_tail_offset%0#0: uint64 = 6u
        let aggregate%length%0#0: uint64 = 0u
        let aggregate%length_uint16%0#0: bytes = 0x0000
        let aggregate%encoded_value%0#0: bytes = 0x0000
        let aggregate%as_bytes%3#0: bytes[8] = (itob 12u)
        let aggregate%offset_as_uint16%1#0: bytes = 0x000c
        let aggregate%head%2#0: bytes = 0x0000000000000000000c
        let aggregate%data_length%1#0: uint64 = 2u
        let aggregate%current_tail_offset%1#0: uint64 = 14u
        let aggregate%length%1#0: uint64 = 0u
        let aggregate%length_uint16%1#0: bytes = 0x0000
        let aggregate%encoded_value%1#0: bytes = 0x0000
        let aggregate%as_bytes%5#0: bytes[8] = (itob 14u)
        let aggregate%offset_as_uint16%2#0: bytes = 0x000e
        let aggregate%head%3#0: bytes = 0x0000000000000000000c000e
        let aggregate%concat%0#0: bytes = 0x0000000000000000000c000e0000
        let aggregate%concat%1#0: bytes = 0x0000000000000000000c000e00000000
        let aggregate%as_bytes%6#0: bytes[8] = (itob 6u)
        let aggregate%offset_as_uint16%3#0: bytes = 0x0006
        let aggregate%head%4#0: bytes = 0x00040006
        let aggregate%concat%2#0: bytes = 0x000400060000
        let aggregate%concat%3#0: bytes = 0x0004000600000000000000000000000c000e00000000
        (app_global_put "twm" 0x0004000600000000000000000000000c000e00000000)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@21
    block@4: // abi_routing_L48
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion is not NoOp
        let tmp%4#0: bool = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void" => block@6, method "load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])" => block@7, method "store_tuple_in_box((uint64,uint64))void" => block@8, method "is_tuple_in_box((uint64,uint64))bool" => block@9, method "load_tuple_from_box((uint64,uint64))(uint64,uint64)" => block@10, method "maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)" => block@11, method "load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)" => block@12, method "load_tuple_from_local_state_or_default(string)(uint64,uint64)" => block@13, method "mutate_local_tuple()(uint64[],(uint64,byte[],string))" => block@14, method "mutate_tuple_in_storage_currently_supported_method()void" => block@15, method "run_tests()bool" => block@16, method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))" => block@17, method "named_tuple((uint64,byte[],string))(uint64,byte[],string)" => block@18, method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))" => block@19, * => block@20}
    block@6: // store_tuple_route_L61
        test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple[routing]()
        goto block@20
    block@7: // load_tuple_route_L65
        test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple[routing]()
        goto block@20
    block@8: // store_tuple_in_box_route_L69
        test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box[routing]()
        goto block@20
    block@9: // is_tuple_in_box_route_L73
        test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box[routing]()
        goto block@20
    block@10: // load_tuple_from_box_route_L77
        test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box[routing]()
        goto block@20
    block@11: // maybe_load_tuple_from_box_route_L81
        test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box[routing]()
        goto block@20
    block@12: // load_tuple_from_box_or_default_route_L86
        test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default[routing]()
        goto block@20
    block@13: // load_tuple_from_local_state_or_default_route_L90
        test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default[routing]()
        goto block@20
    block@14: // mutate_local_tuple_route_L95
        test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple[routing]()
        goto block@20
    block@15: // mutate_tuple_in_storage_currently_supported_method_route_L114
        test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method[routing]()
        goto block@20
    block@16: // run_tests_route_L120
        test_cases.tuple_support.nested_tuples.NestedTuples.run_tests[routing]()
        goto block@20
    block@17: // nested_tuple_params_route_L149
        test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params[routing]()
        goto block@20
    block@18: // named_tuple_route_L156
        test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple[routing]()
        goto block@20
    block@19: // nested_named_tuple_params_route_L161
        test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params[routing]()
        goto block@20
    block@20: // after_if_else_L48
        fail
    block@21: // __algopy_default_create_L1
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: bool = (&& tmp%7#0 tmp%9#0)
        (assert tmp%10#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.get_sender_inefficiently() -> account:
    block@0: // L179
        (log "Order is important")
        let tmp%0#0: account = (txn Sender)
        return tmp%0#0

subroutine test_cases.tuple_support.nested_tuples.simple_tup(a: uint64, b: uint64) -> <uint64, uint64>:
    block@0: // L185
        (log "I'm just a simple tup")
        return a#0 b#0

subroutine test_cases.tuple_support.nested_tuples.echo(s: string) -> string:
    block@0: // L191
        (log "Is there an echo in here?")
        return s#0

subroutine test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: bool) -> void:
    block@0: // L247
        let s.0.0#0: uint64 = 0u
        let s.2.0#0: uint64 = 2u
        let tmp%2#0: bool = (== one#0 1u)
        (assert tmp%2#0)
        goto reassign#0 ? block@1 : block@2
    block@1: // if_body_L262
        let s.0.0#1: uint64 = 3u
        let s.1.0#1: uint64 = 4u
        let s.2.0#1: uint64 = 5u
        goto block@2
    block@2: // after_if_else_L261
        let s.0.0#2: uint64 = φ(s.0.0#0 <- block@0, s.0.0#1 <- block@1)
        let s.1.0#2: uint64 = φ(one#0 <- block@0, s.1.0#1 <- block@1)
        let s.2.0#2: uint64 = φ(s.2.0#0 <- block@0, s.2.0#1 <- block@1)
        let select%0#0: uint64 = (* reassign#0 3u)
        let tmp%6#0: bool = (== s.0.0#2 select%0#0)
        (assert tmp%6#0)
        let select%1#0: uint64 = (select 2u 5u reassign#0)
        let tmp%7#0: bool = (== s.2.0#2 select%1#0)
        (assert tmp%7#0)
        let s1#1: uint64 = (+ s.1.0#2 one#0)
        let tmp%10#0: bool = (== s1#1 select%1#0)
        (assert tmp%10#0)
        let select%3#0: uint64 = (select 1u 4u reassign#0)
        let tmp%11#0: bool = (== s.1.0#2 select%3#0)
        (assert tmp%11#0)
        return 

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple[routing]() -> void:
    block@0: // L61
        let reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0: Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[])) = (txna ApplicationArgs 1)
        (app_global_put "pwl" reinterpret_Encoded((uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))),(len+(uint64,(len+uint8[]),(len+utf8[]))[]))%0#0)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple[routing]() -> void:
    block@0: // L65
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pwl")
        (assert maybe_exists%0#0) // check self.pwl exists
        let tmp%7#0: bytes = (concat 0x151f7c75 maybe_value%0#0)
        (log tmp%7#0)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box[routing]() -> void:
    block@0: // L69
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = ((extract 0 8) reinterpret_Encoded(uint64,uint64)%0#0)
        let key.a#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 0u)
        let aggregate%extract%1#0: bytes = ((extract 8 8) reinterpret_Encoded(uint64,uint64)%0#0)
        let key.b#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 8u)
        let tmp%0#1: uint64 = (+ key.b#0 1u)
        let box_prefixed_key%0#0: bytes = (concat "box" reinterpret_Encoded(uint64,uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%0#1)
        let aggregate%head%1#0: bytes = (concat aggregate%extract%0#0 aggregate%val_as_bytes%1#0)
        (box_put box_prefixed_key%0#0 aggregate%head%1#0)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box[routing]() -> void:
    block@0: // L73
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let box_prefixed_key%0#0: bytes = (concat "box" reinterpret_Encoded(uint64,uint64)%0#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u maybe_exists%0#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%encoded_bool%0#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box[routing]() -> void:
    block@0: // L77
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let box_prefixed_key%0#0: bytes = (concat "box" reinterpret_Encoded(uint64,uint64)%0#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.box entry exists
        let tmp%5#0: bytes = (concat 0x151f7c75 aggregate%box_get%0#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.maybe_load_tuple_from_box[routing]() -> void:
    block@0: // L81
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let box_prefixed_key%0#0: bytes = (concat "box" reinterpret_Encoded(uint64,uint64)%0#0)
        let (maybe_value%0#0: bytes, exists#0: bool) = (box_get box_prefixed_key%0#0)
        goto exists#0 ? block@2 : block@3
    block@2: // ternary_true_L83
        let aggregate%extract%0#0: bytes = ((extract 0 8) maybe_value%0#0)
        let aggregate%item0%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let aggregate%extract%1#0: bytes = ((extract 8 8) maybe_value%0#0)
        let aggregate%item1%0#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        goto block@4
    block@3: // ternary_false_L83
        let ternary_result%0.a#1: uint64 = undefined
        let ternary_result%0.b#1: uint64 = undefined
        goto block@4
    block@4: // ternary_merge_L83
        let maybe_value.a#0: uint64 = φ(aggregate%item0%0#0 <- block@2, ternary_result%0.a#1 <- block@3)
        let maybe_value.b#0: uint64 = φ(aggregate%item1%0#0 <- block@2, ternary_result%0.b#1 <- block@3)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob maybe_value.a#0)
        let aggregate%head%0#0: bytes = aggregate%val_as_bytes%0#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob maybe_value.b#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let aggregate%head%2#0: bytes = aggregate%head%1#0
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u exists#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%1#0 aggregate%encoded_bool%0#0)
        let tmp%6#0: bytes = (concat 0x151f7c75 aggregate%head%3#0)
        (log tmp%6#0)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box_or_default[routing]() -> void:
    block@0: // L86
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let box_prefixed_key%0#0: bytes = (concat "box" reinterpret_Encoded(uint64,uint64)%0#0)
        let (tmp%0#1: uint64, tmp%1#1: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        goto maybe_exists%0#0 ? block@2 : block@3
    block@2: // ternary_true_L88
        let aggregate%extract%0#0: bytes = ((extract 0 8) maybe_value%0#0)
        let aggregate%item0%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let aggregate%extract%1#0: bytes = ((extract 8 8) maybe_value%0#0)
        let aggregate%item1%0#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        goto block@4
    block@3: // ternary_false_L88
        goto block@4
    block@4: // ternary_merge_L88
        let ternary_result%0.a#2: uint64 = φ(aggregate%item0%0#0 <- block@2, tmp%0#1 <- block@3)
        let ternary_result%0.b#2: uint64 = φ(aggregate%item1%0#0 <- block@2, tmp%1#1 <- block@3)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob ternary_result%0.a#2)
        let aggregate%head%0#0: bytes = aggregate%val_as_bytes%0#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob ternary_result%0.b#2)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 aggregate%head%1#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_local_state_or_default[routing]() -> void:
    block@0: // L90
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let key#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let local#0: bytes = test_cases.tuple_support.nested_tuples.echo(key#0)
        let tmp%1#1: account = test_cases.tuple_support.nested_tuples.get_sender_inefficiently()
        let (tmp%2#1: uint64, tmp%3#1: uint64) = test_cases.tuple_support.nested_tuples.simple_tup(4u, 2u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex tmp%1#1 0u local#0)
        goto maybe_exists%0#0 ? block@2 : block@3
    block@2: // ternary_true_L93
        let aggregate%extract%0#0: bytes = ((extract 0 8) maybe_value%0#0)
        let aggregate%item0%0#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let aggregate%extract%1#0: bytes = ((extract 8 8) maybe_value%0#0)
        let aggregate%item1%0#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        goto block@4
    block@3: // ternary_false_L93
        goto block@4
    block@4: // ternary_merge_L93
        let ternary_result%0.a#2: uint64 = φ(aggregate%item0%0#0 <- block@2, tmp%2#1 <- block@3)
        let ternary_result%0.b#2: uint64 = φ(aggregate%item1%0#0 <- block@2, tmp%3#1 <- block@3)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob ternary_result%0.a#2)
        let aggregate%head%0#0: bytes = aggregate%val_as_bytes%0#0
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob ternary_result%0.b#2)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%head%1#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.mutate_local_tuple[routing]() -> void:
    block@0: // L95
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = 0x0001
        let twm.arr#0: Encoded(len+uint64[]) = 0x00010000000000000000
        let aggregate%head%1#0: bytes = 0x0000000000000001
        let concat%0#0: Encoded(len+uint64[]) = 0x000100000000000000000000000000000001
        let extract_uint16%0#0: uint64 = 1u
        let add%0#0: uint64 = 2u
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let as_u16_bytes%0#0: bytes = 0x0002
        let twm.arr#1: Encoded(len+uint64[]) = 0x000200000000000000000000000000000001
        let aggregate%head%2#0: bytes = 0x0000000000000002
        let concat%1#0: Encoded(len+uint64[]) = 0x0002000000000000000000000000000000010000000000000002
        let extract_uint16%1#0: uint64 = 2u
        let add%1#0: uint64 = 3u
        let as_bytes%1#0: bytes[8] = (itob 3u)
        let as_u16_bytes%1#0: bytes = 0x0003
        let twm.arr#2: Encoded(len+uint64[]) = 0x0003000000000000000000000000000000010000000000000002
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L107
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 3u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L108
        let aggregate%total_length%0#0: uint64 = 26u
        let aggregate%array_trimmed%0#0: bytes = 0x000000000000000000000000000000010000000000000002
        let aggregate%bytes_offset%0#0: uint64 = (* i#1 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 0x000000000000000000000000000000010000000000000002 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let tmp%2#1: biguint = (itob i#1)
        let tmp%3#1: bool = (b== aggregate%encoded_element%0#0 tmp%2#1)
        (assert tmp%3#1)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L107
        let aggregate%as_bytes%1#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x0004
        let aggregate%head%3#0: bytes = 0x0004
        let aggregate%data_length%0#0: uint64 = 26u
        let aggregate%current_tail_offset%0#0: uint64 = 30u
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%length%0#0: uint64 = 0u
        let aggregate%length_uint16%0#0: bytes = 0x0000
        let aggregate%encoded_value%0#0: bytes = 0x0000
        let aggregate%as_bytes%3#0: bytes[8] = (itob 12u)
        let aggregate%offset_as_uint16%1#0: bytes = 0x000c
        let aggregate%head%5#0: bytes = 0x0000000000000000000c
        let aggregate%data_length%1#0: uint64 = 2u
        let aggregate%current_tail_offset%1#0: uint64 = 14u
        let aggregate%length%1#0: uint64 = 0u
        let aggregate%length_uint16%1#0: bytes = 0x0000
        let aggregate%encoded_value%1#0: bytes = 0x0000
        let aggregate%as_bytes%5#0: bytes[8] = (itob 14u)
        let aggregate%offset_as_uint16%2#0: bytes = 0x000e
        let aggregate%head%6#0: bytes = 0x0000000000000000000c000e
        let aggregate%concat%0#0: bytes = 0x0000000000000000000c000e0000
        let aggregate%concat%1#0: bytes = 0x0000000000000000000c000e00000000
        let aggregate%as_bytes%6#0: bytes[8] = (itob 30u)
        let aggregate%offset_as_uint16%3#0: bytes = 0x001e
        let aggregate%head%7#0: bytes = 0x0004001e
        let aggregate%concat%2#0: bytes = 0x0004001e0003000000000000000000000000000000010000000000000002
        let aggregate%concat%3#0: bytes = 0x0004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000
        let tmp%5#0: bytes = 0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000
        (log 0x151f7c750004001e00030000000000000000000000000000000100000000000000020000000000000000000c000e00000000)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.mutate_tuple_in_storage_currently_supported_method[routing]() -> void:
    block@0: // L114
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "twm")
        (assert maybe_exists%0#0) // check self.twm exists
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 maybe_value%0#0 2u)
        let arr2#0: Encoded(len+uint64[]) = (substring3 maybe_value%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%head%0#0: bytes = 0x0000000000000001
        let concat%0#0: Encoded(len+uint64[]) = (concat arr2#0 0x0000000000000001) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr2#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr2#1: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (maybe_value%0#0, maybe_exists%0#0)
        (assert maybe_exists%1#0) // check self.twm exists
        let aggregate%extract_uint16%8#0: uint64 = (extract_uint16 maybe_value%1#0 2u)
        let aggregate%len%2#0: uint64 = (len maybe_value%1#0)
        let aggregate%substring3%5#0: bytes = (substring3 maybe_value%1#0 aggregate%extract_uint16%8#0 aggregate%len%2#0)
        let aggregate%extract%1#0: bytes = ((extract 0 8) aggregate%substring3%5#0)
        let aggregate%item0%1#0: uint64 = (extract_uint64 aggregate%substring3%5#0 0u)
        let aggregate%extract_uint16%9#0: uint64 = (extract_uint16 aggregate%substring3%5#0 8u)
        let aggregate%extract_uint16%10#0: uint64 = (extract_uint16 aggregate%substring3%5#0 10u)
        let aggregate%substring3%6#0: bytes = (substring3 aggregate%substring3%5#0 aggregate%extract_uint16%9#0 aggregate%extract_uint16%10#0)
        let aggregate%item1%1#0: bytes = ((extract 2 0) aggregate%substring3%6#0)
        let aggregate%len%3#0: uint64 = (len aggregate%substring3%5#0)
        let aggregate%substring3%7#0: bytes = (substring3 aggregate%substring3%5#0 aggregate%extract_uint16%10#0 aggregate%len%3#0)
        let aggregate%item2%1#0: bytes = ((extract 2 0) aggregate%substring3%7#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x0004
        let aggregate%head%1#0: bytes = 0x0004
        let aggregate%data_length%0#0: uint64 = (len arr2#1)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%length%0#0: uint64 = (len aggregate%item1%1#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 aggregate%item1%1#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 12u)
        let aggregate%offset_as_uint16%1#0: bytes = 0x000c
        let aggregate%head%3#0: bytes = (concat aggregate%extract%1#0 0x000c)
        let aggregate%data_length%1#0: uint64 = (len aggregate%encoded_value%0#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ 12u aggregate%data_length%1#0)
        let aggregate%length%1#0: uint64 = (len aggregate%item2%1#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 aggregate%item2%1#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%1#0)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%2#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%4#0 aggregate%encoded_value%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%encoded_value%1#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%5#0: bytes = (concat 0x0004 aggregate%offset_as_uint16%3#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%5#0 arr2#1)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 aggregate%concat%1#0)
        (app_global_put "twm" aggregate%concat%3#0)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.run_tests[routing]() -> void:
    block@0: // L120
        let (nt.1.0#0: uint64, nt.1.1#0: uint64) = (addw 1u 2u)
        let tmp%4#0: bool = (! nt.1.0#0)
        let tmp%6#0: bool = (== nt.1.1#0 3u)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
        (assert tmp%7#0)
        (assert tmp%4#0)
        (assert tmp%6#0)
        test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 1u)
        test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 0u)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = 0x0001
        let x.0.0#0: Encoded(len+uint64[]) = 0x00010000000000000000
        let aggregate%head%1#0: bytes = 0x0000000000000001
        let concat%0#0: Encoded(len+uint64[]) = 0x000100000000000000000000000000000001
        let extract_uint16%0#0: uint64 = 1u
        let add%0#0: uint64 = 2u
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let as_u16_bytes%0#0: bytes = 0x0002
        let x.0.0#1: Encoded(len+uint64[]) = 0x000200000000000000000000000000000001
        let aggregate%array_length%0#0: uint64 = 2u
        let tmp%2#2: bool = 1u
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let t.0#0: uint64 = 1u
        let t.1#0: uint64 = 2u
        goto block@12
    block@12: // for_body_L298
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@13, loop_counter%0#3 <- block@14, loop_counter%0#4 <- block@15)
        let t.0#1: uint64 = φ(t.0#0 <- block@0, t.0#2 <- block@13, t.0#3 <- block@14, t.0#4 <- block@15)
        let t.1#1: uint64 = φ(t.1#0 <- block@0, t.1#2 <- block@13, t.1#3 <- block@14, t.1#4 <- block@15)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@13, total#2 <- block@14, total#2 <- block@15)
        let tmp%0#3: uint64 = (+ t.0#1 t.1#1)
        let total#2: uint64 = (+ total#1 tmp%0#3)
        goto_nth [block@13, block@14, block@15][loop_counter%0#1] else goto block@16
    block@13: // for_header_1_L297
        let loop_counter%0#2: uint64 = 1u
        let t.0#2: uint64 = 2u
        let t.1#2: uint64 = 1u
        goto block@12
    block@14: // for_header_2_L297
        let loop_counter%0#3: uint64 = 2u
        let t.0#3: uint64 = 1u
        let t.1#3: uint64 = 1u
        goto block@12
    block@15: // for_header_3_L297
        let loop_counter%0#4: uint64 = 3u
        let t.0#4: uint64 = 2u
        let t.1#4: uint64 = 2u
        goto block@12
    block@16: // after_for_L297
        let loop_counter%1#0: uint64 = 0u
        let a#2: uint64 = 1u
        let b#2: uint64 = 2u
        goto block@17
    block@17: // for_body_L302
        let loop_counter%1#1: uint64 = φ(loop_counter%1#0 <- block@16, loop_counter%1#2 <- block@18, loop_counter%1#3 <- block@19, loop_counter%1#4 <- block@20)
        let total#3: uint64 = φ(total#2 <- block@16, total#4 <- block@18, total#4 <- block@19, total#4 <- block@20)
        let a#3: uint64 = φ(a#2 <- block@16, a#4 <- block@18, a#5 <- block@19, a#6 <- block@20)
        let b#3: uint64 = φ(b#2 <- block@16, b#4 <- block@18, b#5 <- block@19, b#6 <- block@20)
        let tmp%2#3: uint64 = (+ a#3 b#3)
        let total#4: uint64 = (+ total#3 tmp%2#3)
        goto_nth [block@18, block@19, block@20][loop_counter%1#1] else goto block@21
    block@18: // for_header_1_L301
        let loop_counter%1#2: uint64 = 1u
        let a#4: uint64 = 2u
        let b#4: uint64 = 1u
        goto block@17
    block@19: // for_header_2_L301
        let loop_counter%1#3: uint64 = 2u
        let a#5: uint64 = 1u
        let b#5: uint64 = 1u
        goto block@17
    block@20: // for_header_3_L301
        let loop_counter%1#4: uint64 = 3u
        let a#6: uint64 = 2u
        let b#6: uint64 = 2u
        goto block@17
    block@21: // after_for_L301
        let tmp%4#1: uint64 = (/ total#4 8u)
        let tmp%5#1: bool = (== tmp%4#1 3u)
        (assert tmp%5#1)
        let (maybe_value%0#1: uint64, maybe_exists%0#1: bool) = (0u, 1u)
        (assert maybe_exists%0#1) // check self.build_nested_call_count exists
        let tmp%0#4: uint64 = (+ maybe_value%0#1 1u)
        (app_global_put "build_nested_call_count" tmp%0#4)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (tmp%0#4, 1u)
        (assert maybe_exists%0#0) // check self.build_nested_call_count exists
        let tmp%6#1: bool = (== maybe_value%0#0 1u)
        (assert tmp%6#1)
        let aggregate%encoded_bool%0#0: bytes[1] = 0x80
        let tmp%2#0: bytes = 0x151f7c7580
        (log 0x151f7c7580)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params[routing]() -> void:
    block@0: // L149
        let reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0: Encoded((len+utf8[]),((len+uint8[]),(uint64))) = (txna ApplicationArgs 1)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 0u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 2u)
        let aggregate%substring3%0#0: bytes = (substring3 reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let args.0#0: string = ((extract 2 0) aggregate%substring3%0#0)
        let aggregate%len%0#0: uint64 = (len reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 reinterpret_Encoded((len+utf8[]),((len+uint8[]),(uint64)))%0#0 aggregate%extract_uint16%1#0 aggregate%len%0#0)
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 aggregate%substring3%1#0 0u)
        let aggregate%len%1#0: uint64 = (len aggregate%substring3%1#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%substring3%1#0 aggregate%extract_uint16%3#0 aggregate%len%1#0)
        let args.1.0#0: bytes = ((extract 2 0) aggregate%substring3%2#0)
        let aggregate%extract%0#0: bytes = ((extract 2 8) aggregate%substring3%1#0)
        let aggregate%extract%1#0: bytes = ((extract 0 8) aggregate%extract%0#0)
        let args.1.1.0#0: uint64 = (extract_uint64 aggregate%extract%0#0 0u)
        let aggregate%length%0#0: uint64 = (len args.1.0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 args.1.0#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x0004
        let aggregate%head%0#0: bytes = 0x0004
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len args.0#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 args.0#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%1#0: bytes = 0x000a
        let aggregate%head%1#0: bytes = 0x000a
        let aggregate%head%2#0: bytes = (concat 0x000a aggregate%extract%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 aggregate%encoded_value%1#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%3#0: bytes = (concat 0x0004 aggregate%offset_as_uint16%2#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%3#0 aggregate%encoded_value%0#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%concat%1#0 aggregate%concat%0#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 aggregate%concat%2#0)
        (log tmp%7#0)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple[routing]() -> void:
    block@0: // L156
        let reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0: Encoded(uint64,(len+uint8[]),(len+utf8[])) = (txna ApplicationArgs 1)
        let tmp%7#0: bytes = (concat 0x151f7c75 reinterpret_Encoded(uint64,(len+uint8[]),(len+utf8[]))%0#0)
        (log tmp%7#0)
        exit 1u

subroutine test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params[routing]() -> void:
    block@0: // L161
        let reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0: Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[]))) = (txna ApplicationArgs 1)
        let tmp%11#0: bytes = (concat 0x151f7c75 reinterpret_Encoded(uint64,uint64,(uint64,(len+uint8[]),(len+utf8[])))%0#0)
        (log tmp%11#0)
        exit 1u