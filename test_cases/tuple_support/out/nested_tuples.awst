contract NestedTuples
{
  globals {
    ['build_nested_call_count']: uint64
  }
  
  constructor()
  {
    GlobalState['build_nested_call_count']: uint64 = 0u
  }
  
  abimethod run_tests(): bool
  {
    x: tuple<string,string> = ('Hi', 'There')
    assert(&&(SINGLE_EVAL(id=0, source=test_cases.tuple_support.nested_tuples::test_swap(x))[0] == 'There', SINGLE_EVAL(id=0)[1] == 'Hi'))
    y: tuple<uint64,tuple<string,string>> = (1u, x)
    z: tuple<uint64,uint64,tuple<uint64,tuple<string,string>>> = (0u, 2u, y)
    z2: tuple<uint64,tuple<string,string>> = z[2]
    z2_1: tuple<string,string> = z2[1]
    (_x, z2_1_1): tuple<string,string> = z2_1
    assert(z2_1_1 == 'There')
    (a, b, (c, d, (e))): tuple<string,uint64,tuple<uint64,uint64,tuple<string>>> = test_cases.tuple_support.nested_tuples::test_rearrange(x[0], z, x[1])
    assert(&&(a == 'Hi', b == 0u))
    assert(&&(c == 2u, d == 1u))
    assert(e == 'There')
    test_cases.tuple_support.nested_tuples::test_intrinsics(1u, 2u)
    test_cases.tuple_support.nested_tuples::test_nested_slicing()
    test_cases.tuple_support.nested_tuples::test_nested_singles(1u, reassign=true)
    test_cases.tuple_support.nested_tuples::test_nested_singles(1u, reassign=false)
    test_cases.tuple_support.nested_tuples::test_nested_mutation()
    assert(&&(SINGLE_EVAL(id=1, source=z[2])[0] == y[0], &&(SINGLE_EVAL(id=2, source=SINGLE_EVAL(id=1)[1])[0] == SINGLE_EVAL(id=3, source=y[1])[0], SINGLE_EVAL(id=2)[1] == SINGLE_EVAL(id=3)[1])))
    test_cases.tuple_support.nested_tuples::test_nested_iteration()
    this::test_single_evaluation_nested()
    return true
  }
  
  abimethod nested_tuple_params(args: tuple<string,tuple<bytes,tuple<uint64>>>): tuple<bytes,tuple<string,uint64>>
  {
    (s, (b, (u))): tuple<string,tuple<bytes,tuple<uint64>>> = args
    return (b, (s, u))
  }
  
  subroutine build_nested(): tuple<tuple<string,uint64>,bytes>
  {
    GlobalState['build_nested_call_count'] += 1u
    return (('hi', 1u), hex<"686D6D6D">)
  }
  
  subroutine test_single_evaluation_nested(): void
  {
    GlobalState['build_nested_call_count']: uint64 = 0u
    result: tuple<tuple<string,uint64>,bytes> = (||(&&(SINGLE_EVAL(id=5, source=SINGLE_EVAL(id=4, source=this::build_nested())[0])[0] == SINGLE_EVAL(id=5)[0], SINGLE_EVAL(id=5)[1] == SINGLE_EVAL(id=5)[1]), SINGLE_EVAL(id=6, source=SINGLE_EVAL(id=4)[1]) == SINGLE_EVAL(id=6))) ? (SINGLE_EVAL(id=4)) : (this::build_nested())
    assert(result[0][0] == 'hi')
    assert(GlobalState['build_nested_call_count'] == 1u)
  }
}

subroutine test_rearrange(_a: string, args: tuple<uint64,uint64,tuple<uint64,tuple<string,string>>>, _b: string): tuple<string,uint64,tuple<uint64,uint64,tuple<string>>>
{
  (a, b, (c, (d, e))): tuple<uint64,uint64,tuple<uint64,tuple<string,string>>> = args
  return (d, a, (b, c, (e)))
}

subroutine test_swap(args: tuple<string,string>): tuple<string,string>
{
  (a, b): tuple<string,string> = args
  return (b, a)
}

subroutine test_intrinsics(num1: uint64, num2: uint64): void
{
  nt: tuple<uint64,tuple<uint64,uint64>,uint64> = (1u, addw(num1, num2), 42u)
  assert(nt[0] == 1u)
  assert(nt[-1] == 42u)
  assert(&&(SINGLE_EVAL(id=7, source=nt[1])[0] == 0u, SINGLE_EVAL(id=7)[1] == num1 + num2))
  assert(SINGLE_EVAL(id=8, source=nt[1][:1u])[0] == 0u)
  assert(SINGLE_EVAL(id=9, source=nt[1][1u:])[0] == num1 + num2)
  ((x, y)): tuple<tuple<uint64,uint64>> = nt[1u:2u]
  assert(x == 0u)
  assert(y == num1 + num2)
}

subroutine test_nested_slicing(): void
{
  nt: tuple<uint64,uint64,tuple<uint64,tuple<string,string>,uint64>,uint64,uint64> = (1u, 2u, (3u, ('a', 'b'), 4u), 5u, 6u)
  (a, b, c): tuple<uint64,tuple<uint64,tuple<string,string>,uint64>,uint64> = nt[1u:4u]
  assert(b[-1] == 4u)
  assert(&&(a == 2u, c == 5u))
  assert(&&(SINGLE_EVAL(id=10, source=b[1][:])[0] == 'a', SINGLE_EVAL(id=10)[1] == 'b'))
}

subroutine test_nested_singles(one: uint64, reassign: bool): void
{
  s: tuple<tuple<uint64>,tuple<uint64>,tuple<uint64>> = ((0u), (one), (2u))
  assert(s[0][0] == 0u)
  assert(SINGLE_EVAL(id=11, source=s[0])[0] == 0u)
  assert(s[1][0] == 1u)
  assert(SINGLE_EVAL(id=12, source=s[1])[0] == one)
  assert(s[2][0] == 2u)
  assert(SINGLE_EVAL(id=13, source=s[2])[0] == 2u)
  t: tuple<uint64> = s[1]
  if (reassign) {
    s: tuple<tuple<uint64>,tuple<uint64>,tuple<uint64>> = ((3u), (4u), (5u))
  }
  assert(s[0][0] == (reassign) ? (3u) : (0u))
  (tmp): tuple<uint64> = s[2]
  assert(tmp == (reassign) ? (5u) : (2u))
  assert(t[0] == one)
  (s0, (s1), s2): tuple<tuple<uint64>,tuple<uint64>,tuple<uint64>> = s
  s1 += one
  assert(s1 == (reassign) ? (5u) : (2u))
  assert(s[1][0] == (reassign) ? (4u) : (1u))
}

subroutine test_nested_mutation(): void
{
  x: tuple<tuple<arc4.dynamic_array<arc4.uint64>>> = ((new arc4.dynamic_array<arc4.uint64>(0arc4u64)))
  x[0][0].extend((1arc4u64))
  assert(extract_uint16(x[0][0], 0u) == 2u)
}

subroutine test_nested_iteration(): void
{
  x: uint64 = 1u
  y: uint64 = 2u
  total: uint64 = 0u
  for t in ((x, y), (y, x), (x, x), (y, y)) {
    (a, b): tuple<uint64,uint64> = t
    total += a + b
  }
  for (a, b) in ((x, y), (y, x), (x, x), (y, y)) {
    total += a + b
  }
  assert(total // 8u == 3u)
}