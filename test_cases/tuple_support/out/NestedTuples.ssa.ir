contract test_cases.tuple_support.nested_tuples.NestedTuples:
    program approval:
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.approval_program() -> bool:
            block@0: // L5
                let (x.0#0: bytes, x.1#0: bytes) = ("Hi", "There")
                let (awst_tmp%0#0: bytes, awst_tmp%1#0: bytes) = test_cases.tuple_support.nested_tuples.test_swap(x.0#0, x.1#0)
                let tmp%0#0: bool = (== awst_tmp%0#0 "There")
                let tmp%1#0: bool = (== awst_tmp%1#0 "Hi")
                let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
                (assert tmp%2#0)
                let (y.0#0: uint64, y.1.0#0: bytes, y.1.1#0: bytes) = (1u, x.0#0, x.1#0)
                let (z.0#0: uint64, z.1#0: uint64, z.2.0#0: uint64, z.2.1.0#0: bytes, z.2.1.1#0: bytes) = (0u, 2u, y.0#0, y.1.0#0, y.1.1#0)
                let (tuple_assignment%0#0: bytes, tuple_assignment%1#0: uint64, tuple_assignment%2#0: uint64, tuple_assignment%3#0: uint64, tuple_assignment%4#0: bytes) = test_cases.tuple_support.nested_tuples.test_rearrange(z.0#0, z.1#0, z.2.0#0, z.2.1.0#0, z.2.1.1#0)
                let a#0: bytes = tuple_assignment%0#0
                let b#0: uint64 = tuple_assignment%1#0
                let c#0: uint64 = tuple_assignment%2#0
                let d#0: uint64 = tuple_assignment%3#0
                let e#0: bytes = tuple_assignment%4#0
                let tmp%3#0: bool = (== a#0 "Hi")
                let tmp%4#0: bool = (== b#0 0u)
                let tmp%5#0: bool = (&& tmp%3#0 tmp%4#0)
                (assert tmp%5#0)
                let tmp%6#0: bool = (== c#0 2u)
                let tmp%7#0: bool = (== d#0 1u)
                let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
                (assert tmp%8#0)
                let tmp%9#0: bool = (== e#0 "There")
                (assert tmp%9#0)
                let (awst_tmp%2#0: uint64, awst_tmp%3#0: bytes, awst_tmp%4#0: bytes) = (z.2.0#0, z.2.1.0#0, z.2.1.1#0)
                let tmp%10#0: bool = (== awst_tmp%2#0 y.0#0)
                let (awst_tmp%5#0: bytes, awst_tmp%6#0: bytes) = (awst_tmp%3#0, awst_tmp%4#0)
                let (awst_tmp%7#0: bytes, awst_tmp%8#0: bytes) = (y.1.0#0, y.1.1#0)
                let tmp%11#0: bool = (== awst_tmp%5#0 awst_tmp%7#0)
                let tmp%12#0: bool = (== awst_tmp%6#0 awst_tmp%8#0)
                let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
                let tmp%14#0: bool = (&& tmp%10#0 tmp%13#0)
                (assert tmp%14#0)
                return 1u
        
        subroutine test_cases.tuple_support.nested_tuples.test_swap(args.0: bytes, args.1: bytes) -> <bytes, bytes>:
            block@0: // L33
                let a#0: bytes = args.0#0
                let b#0: bytes = args.1#0
                return b#0 a#0
        
        subroutine test_cases.tuple_support.nested_tuples.test_rearrange(args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: bytes, args.2.1.1: bytes) -> <bytes, uint64, uint64, uint64, bytes>:
            block@0: // L24
                let a#0: uint64 = args.0#0
                let b#0: uint64 = args.1#0
                let c#0: uint64 = args.2.0#0
                let d#0: bytes = args.2.1.0#0
                let e#0: bytes = args.2.1.1#0
                return d#0 a#0 b#0 c#0 e#0
    
    program clear-state:
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.clear_state_program() -> bool:
            block@0: // L20
                return 1u