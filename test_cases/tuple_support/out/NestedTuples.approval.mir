// Op                                                                                                Stack (out)
// test_cases.tuple_support.nested_tuples.NestedTuples.approval_program() -> uint64:
main_block@0:
    txn ApplicationID                                                                                app_id%0#0
    bnz main_entrypoint@2
    // Implicit fall through to main_on_create@1

main_on_create@1:
    callsub __init__
    // Implicit fall through to main_entrypoint@2

main_entrypoint@2:
    callsub __puya_arc4_router__                                                                     tmp%0#0
    return


// test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    proto 0 1

__puya_arc4_router___block@0:
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txn NumAppArgs                                                                                   tmp%0#0
    bz __puya_arc4_router___bare_routing@8
    // Implicit fall through to __puya_arc4_router___abi_routing@1

__puya_arc4_router___abi_routing@1:
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txna ApplicationArgs 0                                                                           tmp%2#0
    method run_tests()bool                                                                           tmp%2#0,Method(run_tests()bool)
    method nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))                   tmp%2#0,Method(run_tests()bool),Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))
    method named_tuple((uint64,byte[],string))(uint64,byte[],string)                                 tmp%2#0,Method(run_tests()bool),Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))),Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))
    method nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)) tmp%2#0,Method(run_tests()bool),Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))),Method(named_tuple((uint64,byte[],string))(uint64,byte[],string)),Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))
    l-load tmp%2#0 4                                                                                 Method(run_tests()bool),Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))),Method(named_tuple((uint64,byte[],string))(uint64,byte[],string)),Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))),tmp%2#0
    match __puya_arc4_router___run_tests_route@2 __puya_arc4_router___nested_tuple_params_route@3 __puya_arc4_router___named_tuple_route@4 __puya_arc4_router___nested_named_tuple_params_route@5 
    int 0                                                                                            0
    retsub                                                                                           0

__puya_arc4_router___run_tests_route@2:
    // tuple_support/nested_tuples.py:22
    // @arc4.abimethod()
    txn OnCompletion                                                                                 tmp%3#0
    !                                                                                                tmp%4#0
    assert // OnCompletion is NoOp
    txn ApplicationID                                                                                tmp%5#0
    assert // is not creating
    callsub run_tests                                                                                to_encode%0#0
    byte 0x00                                                                                        to_encode%0#0,0x00
    int 0                                                                                            to_encode%0#0,0x00,0
    l-load to_encode%0#0 2                                                                           0x00,0,to_encode%0#0
    setbit                                                                                           encoded_bool%0#0
    byte 0x151f7c75                                                                                  encoded_bool%0#0,0x151f7c75
    l-load encoded_bool%0#0 1                                                                        0x151f7c75,encoded_bool%0#0
    concat                                                                                           tmp%7#0
    log
    int 1                                                                                            1
    retsub                                                                                           1

__puya_arc4_router___nested_tuple_params_route@3:
    // tuple_support/nested_tuples.py:51
    // @arc4.abimethod()
    txn OnCompletion                                                                                 tmp%8#0
    !                                                                                                tmp%9#0
    assert // OnCompletion is NoOp
    txn ApplicationID                                                                                tmp%10#0
    assert // is not creating
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txna ApplicationArgs 1                                                                           tmp%12#0
    l-load-copy tmp%12#0 0                                                                           tmp%12#0,tmp%12#0 (copy)
    int 0                                                                                            tmp%12#0,tmp%12#0 (copy),0
    extract_uint16                                                                                   tmp%12#0,item_start_offset%0#0
    l-load-copy tmp%12#0 1                                                                           tmp%12#0,item_start_offset%0#0,tmp%12#0 (copy)
    int 2                                                                                            tmp%12#0,item_start_offset%0#0,tmp%12#0 (copy),2
    extract_uint16                                                                                   tmp%12#0,item_start_offset%0#0,item_end_offset%0#0
    l-load-copy tmp%12#0 2                                                                           tmp%12#0,item_start_offset%0#0,item_end_offset%0#0,tmp%12#0 (copy)
    l-load item_start_offset%0#0 2                                                                   tmp%12#0,item_end_offset%0#0,tmp%12#0 (copy),item_start_offset%0#0
    l-load-copy item_end_offset%0#0 2                                                                tmp%12#0,item_end_offset%0#0,tmp%12#0 (copy),item_start_offset%0#0,item_end_offset%0#0 (copy)
    substring3                                                                                       tmp%12#0,item_end_offset%0#0,item0%0#0
    extract 2 0                                                                                      tmp%12#0,item_end_offset%0#0,item0%0%0#0
    l-load-copy tmp%12#0 2                                                                           tmp%12#0,item_end_offset%0#0,item0%0%0#0,tmp%12#0 (copy)
    len                                                                                              tmp%12#0,item_end_offset%0#0,item0%0%0#0,item_end_offset%1#0
    l-load tmp%12#0 3                                                                                item_end_offset%0#0,item0%0%0#0,item_end_offset%1#0,tmp%12#0
    l-load item_end_offset%0#0 3                                                                     item0%0%0#0,item_end_offset%1#0,tmp%12#0,item_end_offset%0#0
    l-load item_end_offset%1#0 2                                                                     item0%0%0#0,tmp%12#0,item_end_offset%0#0,item_end_offset%1#0
    substring3                                                                                       item0%0%0#0,item1%0#0
    l-load-copy item1%0#0 0                                                                          item0%0%0#0,item1%0#0,item1%0#0 (copy)
    int 0                                                                                            item0%0%0#0,item1%0#0,item1%0#0 (copy),0
    extract_uint16                                                                                   item0%0%0#0,item1%0#0,item_start_offset%2#0
    l-load-copy item1%0#0 1                                                                          item0%0%0#0,item1%0#0,item_start_offset%2#0,item1%0#0 (copy)
    len                                                                                              item0%0%0#0,item1%0#0,item_start_offset%2#0,item_end_offset%2#0
    l-load-copy item1%0#0 2                                                                          item0%0%0#0,item1%0#0,item_start_offset%2#0,item_end_offset%2#0,item1%0#0 (copy)
    l-load item_start_offset%2#0 2                                                                   item0%0%0#0,item1%0#0,item_end_offset%2#0,item1%0#0 (copy),item_start_offset%2#0
    l-load item_end_offset%2#0 2                                                                     item0%0%0#0,item1%0#0,item1%0#0 (copy),item_start_offset%2#0,item_end_offset%2#0
    substring3                                                                                       item0%0%0#0,item1%0#0,item0%1#0
    extract 2 0                                                                                      item0%0%0#0,item1%0#0,item0%1%0#0
    l-load item1%0#0 1                                                                               item0%0%0#0,item0%1%0#0,item1%0#0
    extract 2 8 // on error: Index access is out of bounds                                           item0%0%0#0,item0%1%0#0,item1%1#0
    extract 0 8 // on error: Index access is out of bounds                                           item0%0%0#0,item0%1%0#0,item0%2#0
    btoi                                                                                             item0%0%0#0,item0%1%0#0,item0%2%0#0
    // tuple_support/nested_tuples.py:51
    // @arc4.abimethod()
    l-load item0%0%0#0 2                                                                             item0%1%0#0,item0%2%0#0,item0%0%0#0
    l-load item0%1%0#0 2                                                                             item0%2%0#0,item0%0%0#0,item0%1%0#0
    l-load item0%2%0#0 2                                                                             item0%0%0#0,item0%1%0#0,item0%2%0#0
    callsub nested_tuple_params                                                                      elements_to_encode%0#0,elements_to_encode%1#0,elements_to_encode%2#0
    l-load-copy elements_to_encode%0#0 2                                                             elements_to_encode%0#0,elements_to_encode%1#0,elements_to_encode%2#0,elements_to_encode%0#0 (copy)
    len                                                                                              elements_to_encode%0#0,elements_to_encode%1#0,elements_to_encode%2#0,length%0#0
    itob                                                                                             elements_to_encode%0#0,elements_to_encode%1#0,elements_to_encode%2#0,as_bytes%0#0
    extract 6 2                                                                                      elements_to_encode%0#0,elements_to_encode%1#0,elements_to_encode%2#0,length_uint16%0#0
    l-load elements_to_encode%0#0 3                                                                  elements_to_encode%1#0,elements_to_encode%2#0,length_uint16%0#0,elements_to_encode%0#0
    concat                                                                                           elements_to_encode%1#0,elements_to_encode%2#0,encoded_value%0#0
    l-load-copy elements_to_encode%1#0 2                                                             elements_to_encode%1#0,elements_to_encode%2#0,encoded_value%0#0,elements_to_encode%1#0 (copy)
    len                                                                                              elements_to_encode%1#0,elements_to_encode%2#0,encoded_value%0#0,length%1#0
    itob                                                                                             elements_to_encode%1#0,elements_to_encode%2#0,encoded_value%0#0,as_bytes%1#0
    extract 6 2                                                                                      elements_to_encode%1#0,elements_to_encode%2#0,encoded_value%0#0,length_uint16%1#0
    l-load elements_to_encode%1#0 3                                                                  elements_to_encode%2#0,encoded_value%0#0,length_uint16%1#0,elements_to_encode%1#0
    concat                                                                                           elements_to_encode%2#0,encoded_value%0#0,encoded_value%1#0
    l-load elements_to_encode%2#0 2                                                                  encoded_value%0#0,encoded_value%1#0,elements_to_encode%2#0
    itob                                                                                             encoded_value%0#0,encoded_value%1#0,val_as_bytes%0#0
    byte 0x000a                                                                                      encoded_value%0#0,encoded_value%1#0,val_as_bytes%0#0,0x000a
    l-load val_as_bytes%0#0 1                                                                        encoded_value%0#0,encoded_value%1#0,0x000a,val_as_bytes%0#0
    concat                                                                                           encoded_value%0#0,encoded_value%1#0,encoded_tuple_buffer%2#0
    l-load encoded_value%1#0 1                                                                       encoded_value%0#0,encoded_tuple_buffer%2#0,encoded_value%1#0
    concat                                                                                           encoded_value%0#0,encoded_tuple_buffer%3#0
    l-load-copy encoded_value%0#0 1                                                                  encoded_value%0#0,encoded_tuple_buffer%3#0,encoded_value%0#0 (copy)
    len                                                                                              encoded_value%0#0,encoded_tuple_buffer%3#0,data_length%1#0
    int 4                                                                                            encoded_value%0#0,encoded_tuple_buffer%3#0,data_length%1#0,4
    l-load data_length%1#0 1                                                                         encoded_value%0#0,encoded_tuple_buffer%3#0,4,data_length%1#0
    +                                                                                                encoded_value%0#0,encoded_tuple_buffer%3#0,current_tail_offset%3#0
    itob                                                                                             encoded_value%0#0,encoded_tuple_buffer%3#0,as_bytes%4#0
    extract 6 2                                                                                      encoded_value%0#0,encoded_tuple_buffer%3#0,offset_as_uint16%2#0
    byte 0x0004                                                                                      encoded_value%0#0,encoded_tuple_buffer%3#0,offset_as_uint16%2#0,0x0004
    l-load offset_as_uint16%2#0 1                                                                    encoded_value%0#0,encoded_tuple_buffer%3#0,0x0004,offset_as_uint16%2#0
    concat                                                                                           encoded_value%0#0,encoded_tuple_buffer%3#0,encoded_tuple_buffer%6#0
    l-load encoded_value%0#0 2                                                                       encoded_tuple_buffer%3#0,encoded_tuple_buffer%6#0,encoded_value%0#0
    concat                                                                                           encoded_tuple_buffer%3#0,encoded_tuple_buffer%7#0
    l-load encoded_tuple_buffer%3#0 1                                                                encoded_tuple_buffer%7#0,encoded_tuple_buffer%3#0
    concat                                                                                           encoded_tuple_buffer%8#0
    byte 0x151f7c75                                                                                  encoded_tuple_buffer%8#0,0x151f7c75
    l-load encoded_tuple_buffer%8#0 1                                                                0x151f7c75,encoded_tuple_buffer%8#0
    concat                                                                                           tmp%13#0
    log
    int 1                                                                                            1
    retsub                                                                                           1

__puya_arc4_router___named_tuple_route@4:
    // tuple_support/nested_tuples.py:58
    // @arc4.abimethod()
    txn OnCompletion                                                                                 tmp%14#0
    !                                                                                                tmp%15#0
    assert // OnCompletion is NoOp
    txn ApplicationID                                                                                tmp%16#0
    assert // is not creating
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txna ApplicationArgs 1                                                                           tmp%18#0
    l-load-copy tmp%18#0 0                                                                           tmp%18#0,tmp%18#0 (copy)
    extract 0 8 // on error: Index access is out of bounds                                           tmp%18#0,item0%3#0
    btoi                                                                                             tmp%18#0,item0%3%0#0
    l-load-copy tmp%18#0 1                                                                           tmp%18#0,item0%3%0#0,tmp%18#0 (copy)
    int 8                                                                                            tmp%18#0,item0%3%0#0,tmp%18#0 (copy),8
    extract_uint16                                                                                   tmp%18#0,item0%3%0#0,item_start_offset%3#0
    l-load-copy tmp%18#0 2                                                                           tmp%18#0,item0%3%0#0,item_start_offset%3#0,tmp%18#0 (copy)
    int 10                                                                                           tmp%18#0,item0%3%0#0,item_start_offset%3#0,tmp%18#0 (copy),10
    extract_uint16                                                                                   tmp%18#0,item0%3%0#0,item_start_offset%3#0,item_end_offset%3#0
    l-load-copy tmp%18#0 3                                                                           tmp%18#0,item0%3%0#0,item_start_offset%3#0,item_end_offset%3#0,tmp%18#0 (copy)
    l-load item_start_offset%3#0 2                                                                   tmp%18#0,item0%3%0#0,item_end_offset%3#0,tmp%18#0 (copy),item_start_offset%3#0
    l-load-copy item_end_offset%3#0 2                                                                tmp%18#0,item0%3%0#0,item_end_offset%3#0,tmp%18#0 (copy),item_start_offset%3#0,item_end_offset%3#0 (copy)
    substring3                                                                                       tmp%18#0,item0%3%0#0,item_end_offset%3#0,item1%2#0
    extract 2 0                                                                                      tmp%18#0,item0%3%0#0,item_end_offset%3#0,item1%2%0#0
    l-load-copy tmp%18#0 3                                                                           tmp%18#0,item0%3%0#0,item_end_offset%3#0,item1%2%0#0,tmp%18#0 (copy)
    len                                                                                              tmp%18#0,item0%3%0#0,item_end_offset%3#0,item1%2%0#0,item_end_offset%4#0
    l-load tmp%18#0 4                                                                                item0%3%0#0,item_end_offset%3#0,item1%2%0#0,item_end_offset%4#0,tmp%18#0
    l-load item_end_offset%3#0 3                                                                     item0%3%0#0,item1%2%0#0,item_end_offset%4#0,tmp%18#0,item_end_offset%3#0
    l-load item_end_offset%4#0 2                                                                     item0%3%0#0,item1%2%0#0,tmp%18#0,item_end_offset%3#0,item_end_offset%4#0
    substring3                                                                                       item0%3%0#0,item1%2%0#0,item2%0#0
    extract 2 0                                                                                      item0%3%0#0,item1%2%0#0,item2%0%0#0
    // tuple_support/nested_tuples.py:58
    // @arc4.abimethod()
    l-load item0%3%0#0 2                                                                             item1%2%0#0,item2%0%0#0,item0%3%0#0
    l-load item1%2%0#0 2                                                                             item2%0%0#0,item0%3%0#0,item1%2%0#0
    l-load item2%0%0#0 2                                                                             item0%3%0#0,item1%2%0#0,item2%0%0#0
    callsub named_tuple                                                                              elements_to_encode%3#0,elements_to_encode%4#0,elements_to_encode%5#0
    l-load elements_to_encode%3#0 2                                                                  elements_to_encode%4#0,elements_to_encode%5#0,elements_to_encode%3#0
    itob                                                                                             elements_to_encode%4#0,elements_to_encode%5#0,val_as_bytes%1#0
    l-load-copy elements_to_encode%4#0 2                                                             elements_to_encode%4#0,elements_to_encode%5#0,val_as_bytes%1#0,elements_to_encode%4#0 (copy)
    len                                                                                              elements_to_encode%4#0,elements_to_encode%5#0,val_as_bytes%1#0,length%2#0
    itob                                                                                             elements_to_encode%4#0,elements_to_encode%5#0,val_as_bytes%1#0,as_bytes%5#0
    extract 6 2                                                                                      elements_to_encode%4#0,elements_to_encode%5#0,val_as_bytes%1#0,length_uint16%2#0
    l-load elements_to_encode%4#0 3                                                                  elements_to_encode%5#0,val_as_bytes%1#0,length_uint16%2#0,elements_to_encode%4#0
    concat                                                                                           elements_to_encode%5#0,val_as_bytes%1#0,encoded_value%2#0
    l-load-copy elements_to_encode%5#0 2                                                             elements_to_encode%5#0,val_as_bytes%1#0,encoded_value%2#0,elements_to_encode%5#0 (copy)
    len                                                                                              elements_to_encode%5#0,val_as_bytes%1#0,encoded_value%2#0,length%3#0
    itob                                                                                             elements_to_encode%5#0,val_as_bytes%1#0,encoded_value%2#0,as_bytes%6#0
    extract 6 2                                                                                      elements_to_encode%5#0,val_as_bytes%1#0,encoded_value%2#0,length_uint16%3#0
    l-load elements_to_encode%5#0 3                                                                  val_as_bytes%1#0,encoded_value%2#0,length_uint16%3#0,elements_to_encode%5#0
    concat                                                                                           val_as_bytes%1#0,encoded_value%2#0,encoded_value%3#0
    l-load val_as_bytes%1#0 2                                                                        encoded_value%2#0,encoded_value%3#0,val_as_bytes%1#0
    byte 0x000c                                                                                      encoded_value%2#0,encoded_value%3#0,val_as_bytes%1#0,0x000c
    concat                                                                                           encoded_value%2#0,encoded_value%3#0,encoded_tuple_buffer%11#0
    l-load-copy encoded_value%2#0 2                                                                  encoded_value%2#0,encoded_value%3#0,encoded_tuple_buffer%11#0,encoded_value%2#0 (copy)
    len                                                                                              encoded_value%2#0,encoded_value%3#0,encoded_tuple_buffer%11#0,data_length%3#0
    int 12                                                                                           encoded_value%2#0,encoded_value%3#0,encoded_tuple_buffer%11#0,data_length%3#0,12
    l-load data_length%3#0 1                                                                         encoded_value%2#0,encoded_value%3#0,encoded_tuple_buffer%11#0,12,data_length%3#0
    +                                                                                                encoded_value%2#0,encoded_value%3#0,encoded_tuple_buffer%11#0,current_tail_offset%6#0
    itob                                                                                             encoded_value%2#0,encoded_value%3#0,encoded_tuple_buffer%11#0,as_bytes%8#0
    extract 6 2                                                                                      encoded_value%2#0,encoded_value%3#0,encoded_tuple_buffer%11#0,offset_as_uint16%4#0
    l-load encoded_tuple_buffer%11#0 1                                                               encoded_value%2#0,encoded_value%3#0,offset_as_uint16%4#0,encoded_tuple_buffer%11#0
    l-load offset_as_uint16%4#0 1                                                                    encoded_value%2#0,encoded_value%3#0,encoded_tuple_buffer%11#0,offset_as_uint16%4#0
    concat                                                                                           encoded_value%2#0,encoded_value%3#0,encoded_tuple_buffer%12#0
    l-load encoded_value%2#0 2                                                                       encoded_value%3#0,encoded_tuple_buffer%12#0,encoded_value%2#0
    concat                                                                                           encoded_value%3#0,encoded_tuple_buffer%13#0
    l-load encoded_value%3#0 1                                                                       encoded_tuple_buffer%13#0,encoded_value%3#0
    concat                                                                                           encoded_tuple_buffer%14#0
    byte 0x151f7c75                                                                                  encoded_tuple_buffer%14#0,0x151f7c75
    l-load encoded_tuple_buffer%14#0 1                                                               0x151f7c75,encoded_tuple_buffer%14#0
    concat                                                                                           tmp%19#0
    log
    int 1                                                                                            1
    retsub                                                                                           1

__puya_arc4_router___nested_named_tuple_params_route@5:
    // tuple_support/nested_tuples.py:63
    // @arc4.abimethod()
    txn OnCompletion                                                                                 tmp%20#0
    !                                                                                                tmp%21#0
    assert // OnCompletion is NoOp
    txn ApplicationID                                                                                tmp%22#0
    assert // is not creating
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txna ApplicationArgs 1                                                                           tmp%24#0
    l-load-copy tmp%24#0 0                                                                           tmp%24#0,tmp%24#0 (copy)
    extract 0 8 // on error: Index access is out of bounds                                           tmp%24#0,item0%4#0
    btoi                                                                                             tmp%24#0,item0%4%0#0
    l-load-copy tmp%24#0 1                                                                           tmp%24#0,item0%4%0#0,tmp%24#0 (copy)
    extract 8 8 // on error: Index access is out of bounds                                           tmp%24#0,item0%4%0#0,item1%3#0
    l-load-copy tmp%24#0 2                                                                           tmp%24#0,item0%4%0#0,item1%3#0,tmp%24#0 (copy)
    int 16                                                                                           tmp%24#0,item0%4%0#0,item1%3#0,tmp%24#0 (copy),16
    extract_uint16                                                                                   tmp%24#0,item0%4%0#0,item1%3#0,item_start_offset%5#0
    l-load-copy tmp%24#0 3                                                                           tmp%24#0,item0%4%0#0,item1%3#0,item_start_offset%5#0,tmp%24#0 (copy)
    len                                                                                              tmp%24#0,item0%4%0#0,item1%3#0,item_start_offset%5#0,item_end_offset%5#0
    l-load tmp%24#0 4                                                                                item0%4%0#0,item1%3#0,item_start_offset%5#0,item_end_offset%5#0,tmp%24#0
    l-load item_start_offset%5#0 2                                                                   item0%4%0#0,item1%3#0,item_end_offset%5#0,tmp%24#0,item_start_offset%5#0
    l-load item_end_offset%5#0 2                                                                     item0%4%0#0,item1%3#0,tmp%24#0,item_start_offset%5#0,item_end_offset%5#0
    substring3                                                                                       item0%4%0#0,item1%3#0,item2%1#0
    l-load-copy item2%1#0 0                                                                          item0%4%0#0,item1%3#0,item2%1#0,item2%1#0 (copy)
    extract 0 8 // on error: Index access is out of bounds                                           item0%4%0#0,item1%3#0,item2%1#0,item0%5#0
    btoi                                                                                             item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0
    l-load-copy item2%1#0 1                                                                          item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item2%1#0 (copy)
    int 8                                                                                            item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item2%1#0 (copy),8
    extract_uint16                                                                                   item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item_start_offset%6#0
    l-load-copy item2%1#0 2                                                                          item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item_start_offset%6#0,item2%1#0 (copy)
    int 10                                                                                           item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item_start_offset%6#0,item2%1#0 (copy),10
    extract_uint16                                                                                   item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item_start_offset%6#0,item_end_offset%6#0
    l-load-copy item2%1#0 3                                                                          item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item_start_offset%6#0,item_end_offset%6#0,item2%1#0 (copy)
    l-load item_start_offset%6#0 2                                                                   item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item_end_offset%6#0,item2%1#0 (copy),item_start_offset%6#0
    l-load-copy item_end_offset%6#0 2                                                                item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item_end_offset%6#0,item2%1#0 (copy),item_start_offset%6#0,item_end_offset%6#0 (copy)
    substring3                                                                                       item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item_end_offset%6#0,item1%4#0
    extract 2 0                                                                                      item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item_end_offset%6#0,item1%4%0#0
    l-load-copy item2%1#0 3                                                                          item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item_end_offset%6#0,item1%4%0#0,item2%1#0 (copy)
    len                                                                                              item0%4%0#0,item1%3#0,item2%1#0,item0%5%0#0,item_end_offset%6#0,item1%4%0#0,item_end_offset%7#0
    l-load item2%1#0 4                                                                               item0%4%0#0,item1%3#0,item0%5%0#0,item_end_offset%6#0,item1%4%0#0,item_end_offset%7#0,item2%1#0
    l-load item_end_offset%6#0 3                                                                     item0%4%0#0,item1%3#0,item0%5%0#0,item1%4%0#0,item_end_offset%7#0,item2%1#0,item_end_offset%6#0
    l-load item_end_offset%7#0 2                                                                     item0%4%0#0,item1%3#0,item0%5%0#0,item1%4%0#0,item2%1#0,item_end_offset%6#0,item_end_offset%7#0
    substring3                                                                                       item0%4%0#0,item1%3#0,item0%5%0#0,item1%4%0#0,item2%2#0
    extract 2 0                                                                                      item0%4%0#0,item1%3#0,item0%5%0#0,item1%4%0#0,item2%2%0#0
    // tuple_support/nested_tuples.py:63
    // @arc4.abimethod()
    l-load item0%4%0#0 4                                                                             item1%3#0,item0%5%0#0,item1%4%0#0,item2%2%0#0,item0%4%0#0
    l-load item1%3#0 4                                                                               item0%5%0#0,item1%4%0#0,item2%2%0#0,item0%4%0#0,item1%3#0
    l-load item0%5%0#0 4                                                                             item1%4%0#0,item2%2%0#0,item0%4%0#0,item1%3#0,item0%5%0#0
    l-load item1%4%0#0 4                                                                             item2%2%0#0,item0%4%0#0,item1%3#0,item0%5%0#0,item1%4%0#0
    l-load item2%2%0#0 4                                                                             item0%4%0#0,item1%3#0,item0%5%0#0,item1%4%0#0,item2%2%0#0
    callsub nested_named_tuple_params                                                                elements_to_encode%6#0,elements_to_encode%7#0,elements_to_encode%8#0,elements_to_encode%9#0,elements_to_encode%10#0
    l-load elements_to_encode%6#0 4                                                                  elements_to_encode%7#0,elements_to_encode%8#0,elements_to_encode%9#0,elements_to_encode%10#0,elements_to_encode%6#0
    itob                                                                                             elements_to_encode%7#0,elements_to_encode%8#0,elements_to_encode%9#0,elements_to_encode%10#0,val_as_bytes%2#0
    l-load elements_to_encode%8#0 3                                                                  elements_to_encode%7#0,elements_to_encode%9#0,elements_to_encode%10#0,val_as_bytes%2#0,elements_to_encode%8#0
    itob                                                                                             elements_to_encode%7#0,elements_to_encode%9#0,elements_to_encode%10#0,val_as_bytes%2#0,val_as_bytes%3#0
    l-load-copy elements_to_encode%9#0 3                                                             elements_to_encode%7#0,elements_to_encode%9#0,elements_to_encode%10#0,val_as_bytes%2#0,val_as_bytes%3#0,elements_to_encode%9#0 (copy)
    len                                                                                              elements_to_encode%7#0,elements_to_encode%9#0,elements_to_encode%10#0,val_as_bytes%2#0,val_as_bytes%3#0,length%4#0
    itob                                                                                             elements_to_encode%7#0,elements_to_encode%9#0,elements_to_encode%10#0,val_as_bytes%2#0,val_as_bytes%3#0,as_bytes%9#0
    extract 6 2                                                                                      elements_to_encode%7#0,elements_to_encode%9#0,elements_to_encode%10#0,val_as_bytes%2#0,val_as_bytes%3#0,length_uint16%4#0
    l-load elements_to_encode%9#0 4                                                                  elements_to_encode%7#0,elements_to_encode%10#0,val_as_bytes%2#0,val_as_bytes%3#0,length_uint16%4#0,elements_to_encode%9#0
    concat                                                                                           elements_to_encode%7#0,elements_to_encode%10#0,val_as_bytes%2#0,val_as_bytes%3#0,encoded_value%4#0
    l-load-copy elements_to_encode%10#0 3                                                            elements_to_encode%7#0,elements_to_encode%10#0,val_as_bytes%2#0,val_as_bytes%3#0,encoded_value%4#0,elements_to_encode%10#0 (copy)
    len                                                                                              elements_to_encode%7#0,elements_to_encode%10#0,val_as_bytes%2#0,val_as_bytes%3#0,encoded_value%4#0,length%5#0
    itob                                                                                             elements_to_encode%7#0,elements_to_encode%10#0,val_as_bytes%2#0,val_as_bytes%3#0,encoded_value%4#0,as_bytes%10#0
    extract 6 2                                                                                      elements_to_encode%7#0,elements_to_encode%10#0,val_as_bytes%2#0,val_as_bytes%3#0,encoded_value%4#0,length_uint16%5#0
    l-load elements_to_encode%10#0 4                                                                 elements_to_encode%7#0,val_as_bytes%2#0,val_as_bytes%3#0,encoded_value%4#0,length_uint16%5#0,elements_to_encode%10#0
    concat                                                                                           elements_to_encode%7#0,val_as_bytes%2#0,val_as_bytes%3#0,encoded_value%4#0,encoded_value%5#0
    l-load val_as_bytes%3#0 2                                                                        elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,val_as_bytes%3#0
    byte 0x000c                                                                                      elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,val_as_bytes%3#0,0x000c
    concat                                                                                           elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,encoded_tuple_buffer%17#0
    l-load-copy encoded_value%4#0 2                                                                  elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,encoded_tuple_buffer%17#0,encoded_value%4#0 (copy)
    len                                                                                              elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,encoded_tuple_buffer%17#0,data_length%5#0
    int 12                                                                                           elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,encoded_tuple_buffer%17#0,data_length%5#0,12
    l-load data_length%5#0 1                                                                         elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,encoded_tuple_buffer%17#0,12,data_length%5#0
    +                                                                                                elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,encoded_tuple_buffer%17#0,current_tail_offset%9#0
    itob                                                                                             elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,encoded_tuple_buffer%17#0,as_bytes%12#0
    extract 6 2                                                                                      elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,encoded_tuple_buffer%17#0,offset_as_uint16%6#0
    l-load encoded_tuple_buffer%17#0 1                                                               elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,offset_as_uint16%6#0,encoded_tuple_buffer%17#0
    l-load offset_as_uint16%6#0 1                                                                    elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,encoded_tuple_buffer%17#0,offset_as_uint16%6#0
    concat                                                                                           elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%4#0,encoded_value%5#0,encoded_tuple_buffer%18#0
    l-load encoded_value%4#0 2                                                                       elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%5#0,encoded_tuple_buffer%18#0,encoded_value%4#0
    concat                                                                                           elements_to_encode%7#0,val_as_bytes%2#0,encoded_value%5#0,encoded_tuple_buffer%19#0
    l-load encoded_value%5#0 1                                                                       elements_to_encode%7#0,val_as_bytes%2#0,encoded_tuple_buffer%19#0,encoded_value%5#0
    concat                                                                                           elements_to_encode%7#0,val_as_bytes%2#0,encoded_tuple_buffer%20#0
    l-load val_as_bytes%2#0 1                                                                        elements_to_encode%7#0,encoded_tuple_buffer%20#0,val_as_bytes%2#0
    l-load elements_to_encode%7#0 2                                                                  encoded_tuple_buffer%20#0,val_as_bytes%2#0,elements_to_encode%7#0
    concat                                                                                           encoded_tuple_buffer%20#0,encoded_tuple_buffer%23#0
    byte 0x0012                                                                                      encoded_tuple_buffer%20#0,encoded_tuple_buffer%23#0,0x0012
    concat                                                                                           encoded_tuple_buffer%20#0,encoded_tuple_buffer%24#0
    l-load encoded_tuple_buffer%20#0 1                                                               encoded_tuple_buffer%24#0,encoded_tuple_buffer%20#0
    concat                                                                                           encoded_tuple_buffer%25#0
    byte 0x151f7c75                                                                                  encoded_tuple_buffer%25#0,0x151f7c75
    l-load encoded_tuple_buffer%25#0 1                                                               0x151f7c75,encoded_tuple_buffer%25#0
    concat                                                                                           tmp%25#0
    log
    int 1                                                                                            1
    retsub                                                                                           1

__puya_arc4_router___bare_routing@8:
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txn OnCompletion                                                                                 tmp%26#0
    bnz __puya_arc4_router___after_if_else@12
    // Implicit fall through to __puya_arc4_router_____algopy_default_create@9

__puya_arc4_router_____algopy_default_create@9:
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txn ApplicationID                                                                                tmp%27#0
    !                                                                                                tmp%28#0
    assert // is creating
    int 1                                                                                            1
    retsub                                                                                           1

__puya_arc4_router___after_if_else@12:
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    int 0                                                                                            0
    retsub                                                                                           0


// test_cases.tuple_support.nested_tuples.NestedTuples.run_tests() -> uint64:
run_tests:
    // tuple_support/nested_tuples.py:22-23
    // @arc4.abimethod()
    // def run_tests(self) -> bool:
    proto 0 1

run_tests_block@0:
    // tuple_support/nested_tuples.py:24
    // x = (String("Hi"), String("There"))
    byte "Hi"                                                                                        "Hi"
    byte "There"                                                                                     "Hi","There"
    // tuple_support/nested_tuples.py:25
    // assert test_swap(x) == (String("There"), String("Hi"))
    callsub test_swap                                                                                awst_tmp%0#0,awst_tmp%1#0
    l-load awst_tmp%0#0 1                                                                            awst_tmp%1#0,awst_tmp%0#0
    byte "There"                                                                                     awst_tmp%1#0,awst_tmp%0#0,"There"
    ==                                                                                               awst_tmp%1#0,tmp%0#0
    l-load awst_tmp%1#0 1                                                                            tmp%0#0,awst_tmp%1#0
    byte "Hi"                                                                                        tmp%0#0,awst_tmp%1#0,"Hi"
    ==                                                                                               tmp%0#0,tmp%1#0
    l-load tmp%0#0 1                                                                                 tmp%1#0,tmp%0#0
    l-load tmp%1#0 1                                                                                 tmp%0#0,tmp%1#0
    &&                                                                                               tmp%2#0
    assert
    // tuple_support/nested_tuples.py:24
    // x = (String("Hi"), String("There"))
    byte "Hi"                                                                                        "Hi"
    // tuple_support/nested_tuples.py:27
    // z = (UInt64(0), UInt64(2), y)
    int 0                                                                                            "Hi",0
    int 2                                                                                            "Hi",0,2
    // tuple_support/nested_tuples.py:26
    // y = (UInt64(1), x)
    int 1                                                                                            "Hi",0,2,1
    // tuple_support/nested_tuples.py:24
    // x = (String("Hi"), String("There"))
    byte "Hi"                                                                                        "Hi",0,2,1,"Hi"
    byte "There"                                                                                     "Hi",0,2,1,"Hi","There"
    byte "There"                                                                                     "Hi",0,2,1,"Hi","There","There"
    // tuple_support/nested_tuples.py:33
    // (a, b, (c, d, (e,))) = test_rearrange(x[0], _b=x[1], args=z)
    callsub test_rearrange                                                                           a#0,b#0,c#0,d#0,e#0
    // tuple_support/nested_tuples.py:34
    // assert (a, b) == (String("Hi"), UInt64(0))
    l-load a#0 4                                                                                     b#0,c#0,d#0,e#0,a#0
    byte "Hi"                                                                                        b#0,c#0,d#0,e#0,a#0,"Hi"
    ==                                                                                               b#0,c#0,d#0,e#0,tmp%4#0
    l-load b#0 4                                                                                     c#0,d#0,e#0,tmp%4#0,b#0
    !                                                                                                c#0,d#0,e#0,tmp%4#0,tmp%5#0
    l-load tmp%4#0 1                                                                                 c#0,d#0,e#0,tmp%5#0,tmp%4#0
    l-load tmp%5#0 1                                                                                 c#0,d#0,e#0,tmp%4#0,tmp%5#0
    &&                                                                                               c#0,d#0,e#0,tmp%6#0
    assert                                                                                           c#0,d#0,e#0
    // tuple_support/nested_tuples.py:35
    // assert (c, d) == (UInt64(2), UInt64(1))
    l-load c#0 2                                                                                     d#0,e#0,c#0
    int 2                                                                                            d#0,e#0,c#0,2
    ==                                                                                               d#0,e#0,tmp%7#0
    l-load d#0 2                                                                                     e#0,tmp%7#0,d#0
    int 1                                                                                            e#0,tmp%7#0,d#0,1
    ==                                                                                               e#0,tmp%7#0,tmp%8#0
    l-load tmp%7#0 1                                                                                 e#0,tmp%8#0,tmp%7#0
    l-load tmp%8#0 1                                                                                 e#0,tmp%7#0,tmp%8#0
    &&                                                                                               e#0,tmp%9#0
    assert                                                                                           e#0
    // tuple_support/nested_tuples.py:36
    // assert e == String("There")
    l-load e#0 0                                                                                     e#0
    byte "There"                                                                                     e#0,"There"
    ==                                                                                               tmp%10#0
    assert
    // tuple_support/nested_tuples.py:38
    // test_intrinsics(UInt64(1), UInt64(2))
    int 1                                                                                            1
    int 2                                                                                            1,2
    callsub test_intrinsics
    // tuple_support/nested_tuples.py:40
    // test_nested_singles(UInt64(1), reassign=True)
    int 1                                                                                            1
    int 1                                                                                            1,1
    callsub test_nested_singles
    // tuple_support/nested_tuples.py:41
    // test_nested_singles(UInt64(1), reassign=False)
    int 1                                                                                            1
    int 0                                                                                            1,0
    callsub test_nested_singles
    // tuple_support/nested_tuples.py:46
    // test_nested_iteration()
    callsub test_nested_iteration
    // tuple_support/nested_tuples.py:48
    // self.test_single_evaluation_nested()
    callsub test_single_evaluation_nested
    // tuple_support/nested_tuples.py:49
    // return True
    int 1                                                                                            1
    retsub                                                                                           1


// test_cases.tuple_support.nested_tuples.test_swap(args.0: bytes, args.1: bytes) -> bytes, bytes:
test_swap:                                                                                           (𝕡) args.0#0,args.1#0 |
    // tuple_support/nested_tuples.py:90-91
    // @subroutine
    // def test_swap(args: tuple[String, String]) -> tuple[String, String]:
    proto 2 2                                                                                        (𝕡) args.0#0,args.1#0 |

test_swap_block@0:                                                                                   (𝕡) args.0#0,args.1#0 |
    // tuple_support/nested_tuples.py:93
    // return b, a
    p-load args.1#0                                                                                  (𝕡) args.0#0,args.1#0 | args.1#0 (copy)
    p-load args.0#0                                                                                  (𝕡) args.0#0,args.1#0 | args.1#0 (copy),args.0#0 (copy)
    retsub                                                                                           args.1#0 (copy),args.0#0 (copy)


// test_cases.tuple_support.nested_tuples.test_rearrange(_a: bytes, args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: bytes, args.2.1.1: bytes, _b: bytes) -> bytes, uint64, uint64, uint64, bytes:
test_rearrange:                                                                                      (𝕡) _a#0,args.0#0,args.1#0,args.2.0#0,args.2.1.0#0,args.2.1.1#0,_b#0 |
    // tuple_support/nested_tuples.py:81-84
    // @subroutine
    // def test_rearrange(
    //     _a: String, args: tuple[UInt64, UInt64, tuple[UInt64, tuple[String, String]]], _b: String
    // ) -> tuple[String, UInt64, tuple[UInt64, UInt64, tuple[String]]]:
    proto 7 5                                                                                        (𝕡) _a#0,args.0#0,args.1#0,args.2.0#0,args.2.1.0#0,args.2.1.1#0,_b#0 |

test_rearrange_block@0:                                                                              (𝕡) _a#0,args.0#0,args.1#0,args.2.0#0,args.2.1.0#0,args.2.1.1#0,_b#0 |
    // tuple_support/nested_tuples.py:87
    // return d, a, (b, c, (e,))
    p-load args.2.1.0#0                                                                              (𝕡) _a#0,args.0#0,args.1#0,args.2.0#0,args.2.1.0#0,args.2.1.1#0,_b#0 | args.2.1.0#0 (copy)
    p-load args.0#0                                                                                  (𝕡) _a#0,args.0#0,args.1#0,args.2.0#0,args.2.1.0#0,args.2.1.1#0,_b#0 | args.2.1.0#0 (copy),args.0#0 (copy)
    p-load args.1#0                                                                                  (𝕡) _a#0,args.0#0,args.1#0,args.2.0#0,args.2.1.0#0,args.2.1.1#0,_b#0 | args.2.1.0#0 (copy),args.0#0 (copy),args.1#0 (copy)
    p-load args.2.0#0                                                                                (𝕡) _a#0,args.0#0,args.1#0,args.2.0#0,args.2.1.0#0,args.2.1.1#0,_b#0 | args.2.1.0#0 (copy),args.0#0 (copy),args.1#0 (copy),args.2.0#0 (copy)
    p-load args.2.1.1#0                                                                              (𝕡) _a#0,args.0#0,args.1#0,args.2.0#0,args.2.1.0#0,args.2.1.1#0,_b#0 | args.2.1.0#0 (copy),args.0#0 (copy),args.1#0 (copy),args.2.0#0 (copy),args.2.1.1#0 (copy)
    retsub                                                                                           args.2.1.0#0 (copy),args.0#0 (copy),args.1#0 (copy),args.2.0#0 (copy),args.2.1.1#0 (copy)


// test_cases.tuple_support.nested_tuples.test_intrinsics(num1: uint64, num2: uint64) -> void:
test_intrinsics:                                                                                     (𝕡) num1#0,num2#0 |
    // tuple_support/nested_tuples.py:96-97
    // @subroutine
    // def test_intrinsics(num1: UInt64, num2: UInt64) -> None:
    proto 2 0                                                                                        (𝕡) num1#0,num2#0 |

test_intrinsics_block@0:                                                                             (𝕡) num1#0,num2#0 |
    // tuple_support/nested_tuples.py:98
    // nt = (UInt64(1), op.addw(num1, num2), UInt64(42))
    p-load num1#0                                                                                    (𝕡) num1#0,num2#0 | num1#0 (copy)
    p-load num2#0                                                                                    (𝕡) num1#0,num2#0 | num1#0 (copy),num2#0 (copy)
    addw                                                                                             (𝕡) num1#0,num2#0 | nt.1.0#0,nt.1.1#0
    // tuple_support/nested_tuples.py:101
    // assert nt[1] == (0, num1 + num2)  # type: ignore[comparison-overlap]
    l-load nt.1.0#0 1                                                                                (𝕡) num1#0,num2#0 | nt.1.1#0,nt.1.0#0
    !                                                                                                (𝕡) num1#0,num2#0 | nt.1.1#0,tmp%4#0
    p-load num1#0                                                                                    (𝕡) num1#0,num2#0 | nt.1.1#0,tmp%4#0,num1#0 (copy)
    p-load num2#0                                                                                    (𝕡) num1#0,num2#0 | nt.1.1#0,tmp%4#0,num1#0 (copy),num2#0 (copy)
    +                                                                                                (𝕡) num1#0,num2#0 | nt.1.1#0,tmp%4#0,tmp%5#0
    l-load nt.1.1#0 2                                                                                (𝕡) num1#0,num2#0 | tmp%4#0,tmp%5#0,nt.1.1#0
    l-load tmp%5#0 1                                                                                 (𝕡) num1#0,num2#0 | tmp%4#0,nt.1.1#0,tmp%5#0
    ==                                                                                               (𝕡) num1#0,num2#0 | tmp%4#0,tmp%6#0
    l-load-copy tmp%4#0 1                                                                            (𝕡) num1#0,num2#0 | tmp%4#0,tmp%6#0,tmp%4#0 (copy)
    l-load-copy tmp%6#0 1                                                                            (𝕡) num1#0,num2#0 | tmp%4#0,tmp%6#0,tmp%4#0 (copy),tmp%6#0 (copy)
    &&                                                                                               (𝕡) num1#0,num2#0 | tmp%4#0,tmp%6#0,tmp%7#0
    assert                                                                                           (𝕡) num1#0,num2#0 | tmp%4#0,tmp%6#0
    // tuple_support/nested_tuples.py:102
    // assert nt[1][:1] == (0,)  # type: ignore[comparison-overlap]
    l-load tmp%4#0 1                                                                                 (𝕡) num1#0,num2#0 | tmp%6#0,tmp%4#0
    assert                                                                                           (𝕡) num1#0,num2#0 | tmp%6#0
    // tuple_support/nested_tuples.py:103
    // assert nt[1][1:] == (num1 + num2,)
    l-load tmp%6#0 0                                                                                 (𝕡) num1#0,num2#0 | tmp%6#0
    assert                                                                                           (𝕡) num1#0,num2#0 |
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: uint64) -> void:
test_nested_singles:                                                                                 (𝕡) one#0,reassign#0 |
    // tuple_support/nested_tuples.py:131-132
    // @subroutine
    // def test_nested_singles(one: UInt64, *, reassign: bool) -> None:
    proto 2 0                                                                                        (𝕡) one#0,reassign#0 |

test_nested_singles_block@0:                                                                         (𝕡) one#0,reassign#0 |
    // tuple_support/nested_tuples.py:134
    // (UInt64(0),),
    int 0                                                                                            (𝕡) one#0,reassign#0 | s.0.0#0
    // tuple_support/nested_tuples.py:133-137
    // s = (
    //     (UInt64(0),),
    //     (one,),
    //     (UInt64(2),),
    // )
    f-store s.0.0#0                                                                                  (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0 |
    // tuple_support/nested_tuples.py:136
    // (UInt64(2),),
    int 2                                                                                            (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0 | s.2.0#0
    // tuple_support/nested_tuples.py:133-137
    // s = (
    //     (UInt64(0),),
    //     (one,),
    //     (UInt64(2),),
    // )
    f-store s.2.0#0                                                                                  (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0 |
    // tuple_support/nested_tuples.py:140
    // assert s[1][0] == 1
    p-load one#0                                                                                     (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0 | one#0 (copy)
    int 1                                                                                            (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0 | one#0 (copy),1
    ==                                                                                               (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0 | tmp%2#0
    assert                                                                                           (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0 |
    p-load one#0                                                                                     (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0 | s.1.0#1
    f-store s.1.0#1                                                                                  (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 |
    // tuple_support/nested_tuples.py:145
    // if reassign:
    p-load reassign#0                                                                                (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | reassign#0 (copy)
    bz test_nested_singles_after_if_else@2                                                           (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 |
    // Implicit fall through to test_nested_singles_if_body@1                                        (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 |

test_nested_singles_if_body@1:                                                                       (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 |
    // tuple_support/nested_tuples.py:147
    // (UInt64(3),),
    int 3                                                                                            (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.0.0#0
    // tuple_support/nested_tuples.py:146-150
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    f-store s.0.0#0                                                                                  (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 |
    // tuple_support/nested_tuples.py:148
    // (UInt64(4),),
    int 4                                                                                            (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.1.0#1
    // tuple_support/nested_tuples.py:146-150
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    f-store s.1.0#1                                                                                  (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 |
    // tuple_support/nested_tuples.py:149
    // (UInt64(5),),
    int 5                                                                                            (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.2.0#0
    // tuple_support/nested_tuples.py:146-150
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    f-store s.2.0#0                                                                                  (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 |
    // Implicit fall through to test_nested_singles_after_if_else@2                                  (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 |

test_nested_singles_after_if_else@2:                                                                 (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 |
    // tuple_support/nested_tuples.py:151
    // assert s[0][0] == (3 if reassign else 0)
    p-load reassign#0                                                                                (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | reassign#0 (copy)
    int 3                                                                                            (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | reassign#0 (copy),3
    *                                                                                                (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | tmp%6#0
    f-load s.0.0#0                                                                                   (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | tmp%6#0,s.0.0#0
    l-load tmp%6#0 1                                                                                 (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.0.0#0,tmp%6#0
    ==                                                                                               (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | tmp%7#0
    assert                                                                                           (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 |
    // tuple_support/nested_tuples.py:153
    // assert tmp == (5 if reassign else 2)
    int 2                                                                                            (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | 2
    int 5                                                                                            (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | 2,5
    p-load reassign#0                                                                                (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | 2,5,reassign#0 (copy)
    select                                                                                           (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | tmp%8#0
    f-load s.2.0#0                                                                                   (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | tmp%8#0,s.2.0#0
    l-load-copy tmp%8#0 1                                                                            (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | tmp%8#0,s.2.0#0,tmp%8#0 (copy)
    ==                                                                                               (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | tmp%8#0,tmp%9#0
    assert                                                                                           (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | tmp%8#0
    // tuple_support/nested_tuples.py:157
    // s1 += one
    f-load s.1.0#1                                                                                   (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | tmp%8#0,s.1.0#1
    l-store-copy s.1.0#1 1                                                                           (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.1.0#1,tmp%8#0,s.1.0#1 (copy)
    p-load one#0                                                                                     (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.1.0#1,tmp%8#0,s.1.0#1 (copy),one#0 (copy)
    +                                                                                                (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.1.0#1,tmp%8#0,s1#1
    // tuple_support/nested_tuples.py:158
    // assert s1 == (5 if reassign else 2)
    l-load tmp%8#0 1                                                                                 (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.1.0#1,s1#1,tmp%8#0
    ==                                                                                               (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.1.0#1,tmp%12#0
    assert                                                                                           (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.1.0#1
    // tuple_support/nested_tuples.py:159
    // assert s[1][0] == (4 if reassign else 1)
    int 1                                                                                            (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.1.0#1,1
    int 4                                                                                            (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.1.0#1,1,4
    p-load reassign#0                                                                                (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.1.0#1,1,4,reassign#0 (copy)
    select                                                                                           (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.1.0#1,tmp%13#0
    l-load s.1.0#1 1                                                                                 (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | tmp%13#0,s.1.0#1
    l-load tmp%13#0 1                                                                                (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | s.1.0#1,tmp%13#0
    ==                                                                                               (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 | tmp%14#0
    assert                                                                                           (𝕡) one#0,reassign#0 | (𝕗) s.0.0#0,s.2.0#0,s.1.0#1 |
    retsub


// test_cases.tuple_support.nested_tuples.test_nested_iteration() -> void:
test_nested_iteration:
    // tuple_support/nested_tuples.py:175-176
    // @subroutine
    // def test_nested_iteration() -> None:
    proto 0 0
    allocate 1 to stack                                                                              (𝕗) a#1 |

test_nested_iteration_block@0:                                                                       (𝕗) a#1 |
    // tuple_support/nested_tuples.py:179
    // total = UInt64(0)
    int 0                                                                                            (𝕗) a#1 | total#0
    f-store total#0                                                                                  (𝕗) a#1,total#0 |
    int 0                                                                                            (𝕗) a#1,total#0 | loop_counter%0#0
    x-store loop_counter%0#0                                                                         (𝕗) a#1,total#0 | (𝕏) loop_counter%0#0 |
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    int 1                                                                                            (𝕗) a#1,total#0 | (𝕏) loop_counter%0#0 | t.0#0
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    f-store t.0#0                                                                                    (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 |
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    int 2                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 | t.1#0
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    x-store t.1#0                                                                                    (𝕗) a#1,total#0,t.0#0 | (𝕏) t.1#0,loop_counter%0#0 |
    // Implicit fall through to test_nested_iteration_for_body@1                                     (𝕗) a#1,total#0,t.0#0 | (𝕏) t.1#0,loop_counter%0#0 |

test_nested_iteration_for_body@1:                                                                    (𝕗) a#1,total#0,t.0#0 | (𝕏) t.1#0,loop_counter%0#0 |
    // tuple_support/nested_tuples.py:183
    // total += a + b
    f-load t.0#0                                                                                     (𝕗) a#1,total#0,t.0#0 | (𝕏) t.1#0,loop_counter%0#0 | t.0#0
    x-load t.1#0                                                                                     (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 | t.0#0,t.1#0
    +                                                                                                (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 | tmp%0#0
    f-load total#0                                                                                   (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 | tmp%0#0,total#0
    l-load tmp%0#0 1                                                                                 (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 | total#0,tmp%0#0
    +                                                                                                (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 | total#0
    f-store total#0                                                                                  (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 |
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    x-load loop_counter%0#0                                                                          (𝕗) a#1,total#0,t.0#0 | loop_counter%0#0
    switch test_nested_iteration_for_header_1@3 test_nested_iteration_for_header_2@4 test_nested_iteration_for_header_3@5 (𝕗) a#1,total#0,t.0#0 | 
    b test_nested_iteration_after_for@6                                                              (𝕗) a#1,total#0,t.0#0 |

test_nested_iteration_for_header_1@3:                                                                (𝕗) a#1,total#0,t.0#0 |
    int 1                                                                                            (𝕗) a#1,total#0,t.0#0 | loop_counter%0#0
    x-store loop_counter%0#0                                                                         (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 |
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    int 2                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 | t.0#0
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    f-store t.0#0                                                                                    (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 |
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    int 1                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 | t.1#0
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    x-store t.1#0                                                                                    (𝕗) a#1,total#0,t.0#0 | (𝕏) t.1#0,loop_counter%0#0 |
    b test_nested_iteration_for_body@1                                                               (𝕗) a#1,total#0,t.0#0 | (𝕏) t.1#0,loop_counter%0#0 |

test_nested_iteration_for_header_2@4:                                                                (𝕗) a#1,total#0,t.0#0 |
    int 2                                                                                            (𝕗) a#1,total#0,t.0#0 | loop_counter%0#0
    x-store loop_counter%0#0                                                                         (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 |
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    int 1                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 | t.0#0
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    f-store t.0#0                                                                                    (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 |
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    int 1                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 | t.1#0
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    x-store t.1#0                                                                                    (𝕗) a#1,total#0,t.0#0 | (𝕏) t.1#0,loop_counter%0#0 |
    b test_nested_iteration_for_body@1                                                               (𝕗) a#1,total#0,t.0#0 | (𝕏) t.1#0,loop_counter%0#0 |

test_nested_iteration_for_header_3@5:                                                                (𝕗) a#1,total#0,t.0#0 |
    int 3                                                                                            (𝕗) a#1,total#0,t.0#0 | loop_counter%0#0
    x-store loop_counter%0#0                                                                         (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 |
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    int 2                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 | t.0#0
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    f-store t.0#0                                                                                    (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 |
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    int 2                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%0#0 | t.1#0
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    x-store t.1#0                                                                                    (𝕗) a#1,total#0,t.0#0 | (𝕏) t.1#0,loop_counter%0#0 |
    b test_nested_iteration_for_body@1                                                               (𝕗) a#1,total#0,t.0#0 | (𝕏) t.1#0,loop_counter%0#0 |

test_nested_iteration_after_for@6:                                                                   (𝕗) a#1,total#0,t.0#0 |
    int 0                                                                                            (𝕗) a#1,total#0,t.0#0 | loop_counter%1#0
    x-store loop_counter%1#0                                                                         (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 |
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    int 1                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | a#1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    f-store a#1                                                                                      (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 |
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    int 2                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | b#1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    x-store b#1                                                                                      (𝕗) a#1,total#0,t.0#0 | (𝕏) b#1,loop_counter%1#0 |
    // Implicit fall through to test_nested_iteration_for_body@7                                     (𝕗) a#1,total#0,t.0#0 | (𝕏) b#1,loop_counter%1#0 |

test_nested_iteration_for_body@7:                                                                    (𝕗) a#1,total#0,t.0#0 | (𝕏) b#1,loop_counter%1#0 |
    // tuple_support/nested_tuples.py:186
    // total += a + b
    f-load a#1                                                                                       (𝕗) a#1,total#0,t.0#0 | (𝕏) b#1,loop_counter%1#0 | a#1
    x-load b#1                                                                                       (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | a#1,b#1
    +                                                                                                (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | tmp%1#0
    f-load total#0                                                                                   (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | tmp%1#0,total#0
    l-load tmp%1#0 1                                                                                 (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | total#0,tmp%1#0
    +                                                                                                (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | total#0
    f-store total#0                                                                                  (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 |
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    x-load loop_counter%1#0                                                                          (𝕗) a#1,total#0,t.0#0 | loop_counter%1#0
    switch test_nested_iteration_for_header_1@9 test_nested_iteration_for_header_2@10 test_nested_iteration_for_header_3@11 (𝕗) a#1,total#0,t.0#0 | 
    b test_nested_iteration_after_for@12                                                             (𝕗) a#1,total#0,t.0#0 |

test_nested_iteration_for_header_1@9:                                                                (𝕗) a#1,total#0,t.0#0 |
    int 1                                                                                            (𝕗) a#1,total#0,t.0#0 | loop_counter%1#0
    x-store loop_counter%1#0                                                                         (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 |
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    int 2                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | a#1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    f-store a#1                                                                                      (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 |
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    int 1                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | b#1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    x-store b#1                                                                                      (𝕗) a#1,total#0,t.0#0 | (𝕏) b#1,loop_counter%1#0 |
    b test_nested_iteration_for_body@7                                                               (𝕗) a#1,total#0,t.0#0 | (𝕏) b#1,loop_counter%1#0 |

test_nested_iteration_for_header_2@10:                                                               (𝕗) a#1,total#0,t.0#0 |
    int 2                                                                                            (𝕗) a#1,total#0,t.0#0 | loop_counter%1#0
    x-store loop_counter%1#0                                                                         (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 |
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    int 1                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | a#1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    f-store a#1                                                                                      (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 |
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    int 1                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | b#1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    x-store b#1                                                                                      (𝕗) a#1,total#0,t.0#0 | (𝕏) b#1,loop_counter%1#0 |
    b test_nested_iteration_for_body@7                                                               (𝕗) a#1,total#0,t.0#0 | (𝕏) b#1,loop_counter%1#0 |

test_nested_iteration_for_header_3@11:                                                               (𝕗) a#1,total#0,t.0#0 |
    int 3                                                                                            (𝕗) a#1,total#0,t.0#0 | loop_counter%1#0
    x-store loop_counter%1#0                                                                         (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 |
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    int 2                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | a#1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    f-store a#1                                                                                      (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 |
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    int 2                                                                                            (𝕗) a#1,total#0,t.0#0 | (𝕏) loop_counter%1#0 | b#1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    x-store b#1                                                                                      (𝕗) a#1,total#0,t.0#0 | (𝕏) b#1,loop_counter%1#0 |
    b test_nested_iteration_for_body@7                                                               (𝕗) a#1,total#0,t.0#0 | (𝕏) b#1,loop_counter%1#0 |

test_nested_iteration_after_for@12:                                                                  (𝕗) a#1,total#0,t.0#0 |
    // tuple_support/nested_tuples.py:188
    // assert total // 8 == 3
    f-load total#0                                                                                   (𝕗) a#1,total#0,t.0#0 | total#0
    int 8                                                                                            (𝕗) a#1,total#0,t.0#0 | total#0,8
    /                                                                                                (𝕗) a#1,total#0,t.0#0 | tmp%2#0
    int 3                                                                                            (𝕗) a#1,total#0,t.0#0 | tmp%2#0,3
    ==                                                                                               (𝕗) a#1,total#0,t.0#0 | tmp%3#0
    assert                                                                                           (𝕗) a#1,total#0,t.0#0 |
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested() -> void:
test_single_evaluation_nested:
    // tuple_support/nested_tuples.py:73-74
    // @subroutine
    // def test_single_evaluation_nested(self) -> None:
    proto 0 0

test_single_evaluation_nested_block@0:
    // tuple_support/nested_tuples.py:75
    // self.build_nested_call_count = UInt64(0)
    byte "build_nested_call_count"                                                                   "build_nested_call_count"
    int 0                                                                                            "build_nested_call_count",0
    app_global_put
    // tuple_support/nested_tuples.py:76
    // result = self.build_nested() or self.build_nested()
    callsub build_nested                                                                             awst_tmp%0#0,awst_tmp%1#0,awst_tmp%2#0
    pop 1                                                                                            awst_tmp%0#0,awst_tmp%1#0
    pop 1                                                                                            awst_tmp%0#0
    l-store awst_tmp%0#0 0                                                                           awst_tmp%0#0
    // tuple_support/nested_tuples.py:77
    // assert result[0][0] == "hi"
    l-load awst_tmp%0#0 0                                                                            awst_tmp%0#0
    byte "hi"                                                                                        awst_tmp%0#0,"hi"
    ==                                                                                               tmp%5#0
    assert
    // tuple_support/nested_tuples.py:78
    // assert self.build_nested_call_count == 1
    int 0                                                                                            0
    byte "build_nested_call_count"                                                                   0,"build_nested_call_count"
    app_global_get_ex                                                                                maybe_value%0#0,maybe_exists%0#0
    assert // check self.build_nested_call_count exists                                              maybe_value%0#0
    l-load maybe_value%0#0 0                                                                         maybe_value%0#0
    int 1                                                                                            maybe_value%0#0,1
    ==                                                                                               tmp%6#0
    assert
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.build_nested() -> bytes, uint64, bytes:
build_nested:
    // tuple_support/nested_tuples.py:68-69
    // @subroutine
    // def build_nested(self) -> tuple[tuple[String, UInt64], Bytes]:
    proto 0 3

build_nested_block@0:
    // tuple_support/nested_tuples.py:70
    // self.build_nested_call_count += 1
    int 0                                                                                            0
    byte "build_nested_call_count"                                                                   0,"build_nested_call_count"
    app_global_get_ex                                                                                maybe_value%0#0,maybe_exists%0#0
    assert // check self.build_nested_call_count exists                                              maybe_value%0#0
    l-load maybe_value%0#0 0                                                                         maybe_value%0#0
    int 1                                                                                            maybe_value%0#0,1
    +                                                                                                new_state_value%0#0
    byte "build_nested_call_count"                                                                   new_state_value%0#0,"build_nested_call_count"
    l-load new_state_value%0#0 1                                                                     "build_nested_call_count",new_state_value%0#0
    app_global_put
    // tuple_support/nested_tuples.py:71
    // return (String("hi"), UInt64(1)), Bytes(b"hmmm")
    byte "hi"                                                                                        "hi"
    int 1                                                                                            "hi",1
    byte 0x686d6d6d                                                                                  "hi",1,0x686d6d6d
    retsub                                                                                           "hi",1,0x686d6d6d


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params(args.0: bytes, args.1.0: bytes, args.1.1.0: uint64) -> bytes, bytes, uint64:
nested_tuple_params:                                                                                 (𝕡) args.0#0,args.1.0#0,args.1.1.0#0 |
    // tuple_support/nested_tuples.py:51-54
    // @arc4.abimethod()
    // def nested_tuple_params(
    //     self, args: tuple[String, tuple[Bytes, tuple[UInt64]]]
    // ) -> tuple[Bytes, tuple[String, UInt64]]:
    proto 3 3                                                                                        (𝕡) args.0#0,args.1.0#0,args.1.1.0#0 |

nested_tuple_params_block@0:                                                                         (𝕡) args.0#0,args.1.0#0,args.1.1.0#0 |
    // tuple_support/nested_tuples.py:56
    // return b, (s, u)
    p-load args.1.0#0                                                                                (𝕡) args.0#0,args.1.0#0,args.1.1.0#0 | args.1.0#0 (copy)
    p-load args.0#0                                                                                  (𝕡) args.0#0,args.1.0#0,args.1.1.0#0 | args.1.0#0 (copy),args.0#0 (copy)
    p-load args.1.1.0#0                                                                              (𝕡) args.0#0,args.1.0#0,args.1.1.0#0 | args.1.0#0 (copy),args.0#0 (copy),args.1.1.0#0 (copy)
    retsub                                                                                           args.1.0#0 (copy),args.0#0 (copy),args.1.1.0#0 (copy)


// test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple(args.a: uint64, args.b: bytes, args.c: bytes) -> uint64, bytes, bytes:
named_tuple:                                                                                         (𝕡) args.a#0,args.b#0,args.c#0 |
    // tuple_support/nested_tuples.py:58-59
    // @arc4.abimethod()
    // def named_tuple(self, args: Child) -> Child:
    proto 3 3                                                                                        (𝕡) args.a#0,args.b#0,args.c#0 |

named_tuple_block@0:                                                                                 (𝕡) args.a#0,args.b#0,args.c#0 |
    // tuple_support/nested_tuples.py:61
    // return Child(a, b, c)
    p-load args.a#0                                                                                  (𝕡) args.a#0,args.b#0,args.c#0 | args.a#0 (copy)
    p-load args.b#0                                                                                  (𝕡) args.a#0,args.b#0,args.c#0 | args.a#0 (copy),args.b#0 (copy)
    p-load args.c#0                                                                                  (𝕡) args.a#0,args.b#0,args.c#0 | args.a#0 (copy),args.b#0 (copy),args.c#0 (copy)
    retsub                                                                                           args.a#0 (copy),args.b#0 (copy),args.c#0 (copy)


// test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params(args.foo: uint64, args.foo_arc: bytes, args.child.a: uint64, args.child.b: bytes, args.child.c: bytes) -> uint64, bytes, uint64, bytes, bytes:
nested_named_tuple_params:                                                                           (𝕡) args.foo#0,args.foo_arc#0,args.child.a#0,args.child.b#0,args.child.c#0 |
    // tuple_support/nested_tuples.py:63-64
    // @arc4.abimethod()
    // def nested_named_tuple_params(self, args: Parent) -> Parent:
    proto 5 5                                                                                        (𝕡) args.foo#0,args.foo_arc#0,args.child.a#0,args.child.b#0,args.child.c#0 |

nested_named_tuple_params_block@0:                                                                   (𝕡) args.foo#0,args.foo_arc#0,args.child.a#0,args.child.b#0,args.child.c#0 |
    // tuple_support/nested_tuples.py:66
    // return Parent(foo, foo_arc, Child(a, b, c))
    p-load args.foo#0                                                                                (𝕡) args.foo#0,args.foo_arc#0,args.child.a#0,args.child.b#0,args.child.c#0 | args.foo#0 (copy)
    p-load args.foo_arc#0                                                                            (𝕡) args.foo#0,args.foo_arc#0,args.child.a#0,args.child.b#0,args.child.c#0 | args.foo#0 (copy),args.foo_arc#0 (copy)
    p-load args.child.a#0                                                                            (𝕡) args.foo#0,args.foo_arc#0,args.child.a#0,args.child.b#0,args.child.c#0 | args.foo#0 (copy),args.foo_arc#0 (copy),args.child.a#0 (copy)
    p-load args.child.b#0                                                                            (𝕡) args.foo#0,args.foo_arc#0,args.child.a#0,args.child.b#0,args.child.c#0 | args.foo#0 (copy),args.foo_arc#0 (copy),args.child.a#0 (copy),args.child.b#0 (copy)
    p-load args.child.c#0                                                                            (𝕡) args.foo#0,args.foo_arc#0,args.child.a#0,args.child.b#0,args.child.c#0 | args.foo#0 (copy),args.foo_arc#0 (copy),args.child.a#0 (copy),args.child.b#0 (copy),args.child.c#0 (copy)
    retsub                                                                                           args.foo#0 (copy),args.foo_arc#0 (copy),args.child.a#0 (copy),args.child.b#0 (copy),args.child.c#0 (copy)


// test_cases.tuple_support.nested_tuples.NestedTuples.__init__() -> void:
__init__:
    // tuple_support/nested_tuples.py:19
    // def __init__(self) -> None:
    proto 0 0

__init___block@0:
    // tuple_support/nested_tuples.py:20
    // self.build_nested_call_count = UInt64(0)
    byte "build_nested_call_count"                                                                   "build_nested_call_count"
    int 0                                                                                            "build_nested_call_count",0
    app_global_put
    retsub


