contract test_cases.tuple_support.nested_tuples.NestedTuples:
    program approval:
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.approval_program() -> bool:
            block@0: // L5
                let (awst_tmp%0#0: bytes, awst_tmp%1#0: bytes) = test_cases.tuple_support.nested_tuples.test_swap("Hi", "There")
                let tmp%0#0: bool = (== awst_tmp%0#0 "There")
                let tmp%1#0: bool = (== awst_tmp%1#0 "Hi")
                let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
                (assert tmp%2#0)
                let (a#0: bytes, b#0: uint64, c#0: uint64, d#0: uint64, e#0: bytes) = test_cases.tuple_support.nested_tuples.test_rearrange("Hi", 0u, 2u, 1u, "Hi", "There", "There")
                let tmp%4#0: bool = (== a#0 "Hi")
                let tmp%5#0: bool = (! b#0)
                let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
                (assert tmp%6#0)
                let tmp%7#0: bool = (== c#0 2u)
                let tmp%8#0: bool = (== d#0 1u)
                let tmp%9#0: bool = (&& tmp%7#0 tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: bool = (== e#0 "There")
                (assert tmp%10#0)
                test_cases.tuple_support.nested_tuples.test_intrinsics(1u, 2u)
                test_cases.tuple_support.nested_tuples.test_nested_slicing()
                test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 1u)
                test_cases.tuple_support.nested_tuples.test_nested_singles(1u, 0u)
                test_cases.tuple_support.nested_tuples.test_nested_mutation()
                return 1u
        
        subroutine test_cases.tuple_support.nested_tuples.test_swap(args.0: bytes, args.1: bytes) -> <bytes, bytes>:
            block@0: // L43
                return args.1#0 args.0#0
        
        subroutine test_cases.tuple_support.nested_tuples.test_rearrange(_a: bytes, args.0: uint64, args.1: uint64, args.2.0: uint64, args.2.1.0: bytes, args.2.1.1: bytes, _b: bytes) -> <bytes, uint64, uint64, uint64, bytes>:
            block@0: // L34
                return args.2.1.0#0 args.0#0 args.1#0 args.2.0#0 args.2.1.1#0
        
        subroutine test_cases.tuple_support.nested_tuples.test_intrinsics(num1: uint64, num2: uint64) -> void:
            block@0: // L49
                let (nt.1.0#0: uint64, nt.1.1#0: uint64) = (addw num1#0 num2#0)
                let tmp%4#0: bool = (! nt.1.0#0)
                let tmp%5#0: uint64 = (+ num1#0 num2#0)
                let tmp%6#0: bool = (== nt.1.1#0 tmp%5#0)
                let tmp%7#0: bool = (&& tmp%4#0 tmp%6#0)
                (assert tmp%7#0)
                (assert tmp%4#0)
                (assert tmp%6#0)
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.test_nested_slicing() -> void:
            block@0: // L62
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: bool) -> void:
            block@0: // L84
                let s.0.0#0: uint64 = 0u
                let s.2.0#0: uint64 = 2u
                let tmp%2#0: bool = (== one#0 1u)
                (assert tmp%2#0)
                goto reassign#0 ? block@1 : block@2
            block@1: // if_body_L98
                let s.0.0#1: uint64 = 3u
                let s.1.0#1: uint64 = 4u
                let s.2.0#1: uint64 = 5u
                goto block@2
            block@2: // after_if_else_L98
                let s.0.0#2: uint64 = φ(s.0.0#0 <- block@0, s.0.0#1 <- block@1)
                let s.1.0#2: uint64 = φ(one#0 <- block@0, s.1.0#1 <- block@1)
                let s.2.0#2: uint64 = φ(s.2.0#0 <- block@0, s.2.0#1 <- block@1)
                goto reassign#0 ? block@3 : block@4
            block@3: // ternary_true_L104
                let ternary_result%0#0: uint64 = 3u
                goto block@5
            block@4: // ternary_false_L104
                let ternary_result%0#1: uint64 = 0u
                goto block@5
            block@5: // ternary_merge_L104
                let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4)
                let tmp%6#0: bool = (== s.0.0#2 ternary_result%0#2)
                (assert tmp%6#0)
                goto reassign#0 ? block@6 : block@7
            block@6: // ternary_true_L106
                let ternary_result%1#0: uint64 = 5u
                goto block@8
            block@7: // ternary_false_L106
                let ternary_result%1#1: uint64 = 2u
                goto block@8
            block@8: // ternary_merge_L106
                let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@6, ternary_result%1#1 <- block@7)
                let tmp%7#0: bool = (== s.2.0#2 ternary_result%1#2)
                (assert tmp%7#0)
                let s1#1: uint64 = (+ s.1.0#2 one#0)
                goto reassign#0 ? block@9 : block@10
            block@9: // ternary_true_L111
                let ternary_result%2#0: uint64 = 5u
                goto block@11
            block@10: // ternary_false_L111
                let ternary_result%2#1: uint64 = 2u
                goto block@11
            block@11: // ternary_merge_L111
                let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@9, ternary_result%2#1 <- block@10)
                let tmp%9#0: bool = (== s1#1 ternary_result%2#2)
                (assert tmp%9#0)
                goto reassign#0 ? block@12 : block@13
            block@12: // ternary_true_L112
                let ternary_result%3#0: uint64 = 4u
                goto block@14
            block@13: // ternary_false_L112
                let ternary_result%3#1: uint64 = 1u
                goto block@14
            block@14: // ternary_merge_L112
                let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@12, ternary_result%3#1 <- block@13)
                let tmp%10#0: bool = (== s.1.0#2 ternary_result%3#2)
                (assert tmp%10#0)
                return 
        
        subroutine test_cases.tuple_support.nested_tuples.test_nested_mutation() -> void:
            block@0: // L115
                let x.0.0#1: bytes = 0x000200000000000000000000000000000001
                let tmp%0#0: uint64 = (extract_uint16 x.0.0#1 0u)
                let tmp%1#0: bool = (== tmp%0#0 2u)
                (assert tmp%1#0)
                return 
    
    program clear-state:
        subroutine test_cases.tuple_support.nested_tuples.NestedTuples.clear_state_program() -> bool:
            block@0: // L30
                return 1u