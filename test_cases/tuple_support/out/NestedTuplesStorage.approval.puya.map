{
  "version": 3,
  "sources": [
    "../tuple_storage.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeQ;AAAA;;AAAA;AAIA;AAAA;;AAAA;AACW;AAAA;AAAA;AAAA;AAAA;;;AAAX;AAAA;AAAA;AAJQ;;AAIR;AAAA;AAAA;AAAA;AAVR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AA6BK;;AAAA;AAAA;AAAA;;AAAA;AA7BL;;;AA6BK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAzBL;;;AAyBK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AArBL;;;AAqBK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAjBL;;;AAiBK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAZL;;AAAA;;;;;;;;;AAcyB;AAAA;AAAA;AAAA;AAAA;;;AAAjB;AAAA;AAAA;AAAuC;;AAAvC;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACS;;AAAT;;AAAA;;AAAA;;AAER;;;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAER;;;AAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAEiB;;AAAT;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"tup\" 0x000a \"box\" \"glob\" \"loc\" 0x000a000000000000000000010000000000000000 0x00010000000000000000"
    },
    "59": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "64": {
      "op": "bytec_0 // \"tup\"",
      "defined_out": [
        "\"tup\""
      ],
      "stack_out": [
        "\"tup\""
      ]
    },
    "65": {
      "op": "bytec 5 // 0x000a000000000000000000010000000000000000",
      "defined_out": [
        "\"tup\"",
        "0x000a000000000000000000010000000000000000"
      ],
      "stack_out": [
        "\"tup\"",
        "0x000a000000000000000000010000000000000000"
      ]
    },
    "67": {
      "op": "app_global_put",
      "stack_out": []
    },
    "68": {
      "op": "bytec_3 // \"glob\"",
      "defined_out": [
        "\"glob\""
      ],
      "stack_out": [
        "\"glob\""
      ]
    },
    "69": {
      "op": "bytec 5 // 0x000a000000000000000000010000000000000000",
      "stack_out": [
        "\"glob\"",
        "0x000a000000000000000000010000000000000000"
      ]
    },
    "71": {
      "op": "app_global_put",
      "stack_out": []
    },
    "72": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "73": {
      "op": "bytec_0 // \"tup\"",
      "stack_out": [
        "0",
        "\"tup\""
      ]
    },
    "74": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "75": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "76": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0"
      ]
    },
    "79": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "0x000a"
      ]
    },
    "80": {
      "op": "swap",
      "stack_out": [
        "0x000a",
        "aggregate%extract%1#0"
      ]
    },
    "81": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%6#0"
      ]
    },
    "82": {
      "op": "bytec 6 // 0x00010000000000000000",
      "defined_out": [
        "0x00010000000000000000",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%6#0",
        "0x00010000000000000000"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0"
      ]
    },
    "85": {
      "op": "bytec_0 // \"tup\"",
      "stack_out": [
        "aggregate%concat%2#0",
        "\"tup\""
      ]
    },
    "86": {
      "op": "swap",
      "stack_out": [
        "\"tup\"",
        "aggregate%concat%2#0"
      ]
    },
    "87": {
      "op": "app_global_put",
      "stack_out": []
    },
    "88": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "90": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "93": {
      "op": "pushbytess 0xbec76d87 0xacc253ae 0xe844940c 0x6222ef1a 0x1b269b50 // method \"bootstrap()void\", method \"mutate_tuple(uint64)void\", method \"mutate_box(uint64)void\", method \"mutate_global(uint64)void\", method \"mutate_local(uint64)void\"",
      "defined_out": [
        "Method(bootstrap()void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "Method(mutate_tuple(uint64)void)"
      ],
      "stack_out": [
        "Method(bootstrap()void)",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)"
      ]
    },
    "120": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(bootstrap()void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(bootstrap()void)",
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "tmp%2#0"
      ]
    },
    "123": {
      "op": "match main_bootstrap_route@5 main_mutate_tuple_route@6 main_mutate_box_route@7 main_mutate_global_route@8 main_mutate_local_route@9",
      "stack_out": []
    },
    "135": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "136": {
      "op": "return",
      "stack_out": []
    },
    "137": {
      "block": "main_mutate_local_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "139": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "140": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "141": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "143": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "144": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "147": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local",
      "op": "callsub mutate_local",
      "stack_out": []
    },
    "150": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "151": {
      "op": "return",
      "stack_out": []
    },
    "152": {
      "block": "main_mutate_global_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "154": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "155": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "156": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "158": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "159": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "162": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global",
      "op": "callsub mutate_global",
      "stack_out": []
    },
    "165": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "166": {
      "op": "return",
      "stack_out": []
    },
    "167": {
      "block": "main_mutate_box_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "169": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "170": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "171": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "173": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "174": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "177": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box",
      "op": "callsub mutate_box",
      "stack_out": []
    },
    "180": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "181": {
      "op": "return",
      "stack_out": []
    },
    "182": {
      "block": "main_mutate_tuple_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "184": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "185": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "186": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "188": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "189": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "192": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple",
      "op": "callsub mutate_tuple",
      "stack_out": []
    },
    "195": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "196": {
      "op": "return",
      "stack_out": []
    },
    "197": {
      "block": "main_bootstrap_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "199": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "OptIn"
      ]
    },
    "200": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "201": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "202": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "204": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "205": {
      "callsub": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap",
      "op": "callsub bootstrap"
    },
    "208": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "209": {
      "op": "return",
      "stack_out": []
    },
    "210": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "212": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "215": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "217": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "218": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "219": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "return",
      "stack_out": []
    },
    "221": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap",
      "params": {},
      "block": "bootstrap",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "222": {
      "op": "bytec_0 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"tup\""
      ]
    },
    "223": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "224": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "225": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "228": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "0x000a"
      ]
    },
    "229": {
      "op": "swap",
      "stack_out": [
        "0x000a",
        "aggregate%extract%0#0"
      ]
    },
    "230": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "231": {
      "op": "bytec 6 // 0x00010000000000000000",
      "defined_out": [
        "0x00010000000000000000",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "0x00010000000000000000"
      ]
    },
    "233": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "234": {
      "op": "bytec_2 // \"box\"",
      "defined_out": [
        "\"box\"",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "\"box\""
      ]
    },
    "235": {
      "op": "box_del",
      "defined_out": [
        "aggregate%concat%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "{box_del}"
      ]
    },
    "236": {
      "op": "pop",
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "237": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "aggregate%concat%0#0",
        "\"box\""
      ]
    },
    "238": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "aggregate%concat%0#0",
        "aggregate%concat%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "\"box\"",
        "aggregate%concat%0#0 (copy)"
      ]
    },
    "240": {
      "op": "box_put",
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "241": {
      "op": "txn Sender",
      "defined_out": [
        "aggregate%concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "tmp%0#0"
      ]
    },
    "243": {
      "op": "bytec 4 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "aggregate%concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "tmp%0#0",
        "\"loc\""
      ]
    },
    "245": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "\"loc\"",
        "aggregate%concat%0#0"
      ]
    },
    "247": {
      "op": "app_local_put",
      "stack_out": []
    },
    "248": {
      "retsub": true,
      "op": "retsub"
    },
    "249": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple",
      "params": {
        "val#0": "bytes"
      },
      "block": "mutate_tuple",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "252": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "253": {
      "op": "bytec_0 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"tup\""
      ]
    },
    "254": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "255": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "256": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "257": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "258": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "259": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "261": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "262": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "264": {
      "op": "cover 2",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "266": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "267": {
      "op": "swap",
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "268": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "271": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "273": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0 (copy)"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0 (copy)"
      ]
    },
    "275": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ]
    },
    "276": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "278": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "279": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "280": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "281": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "282": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "283": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "286": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "replace%0#0"
      ]
    },
    "288": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%0#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "replace%0#0",
        "0x000a"
      ]
    },
    "289": {
      "op": "uncover 2",
      "stack_out": [
        "replace%0#0",
        "0x000a",
        "aggregate%extract%0#0"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "replace%0#0"
      ],
      "stack_out": [
        "replace%0#0",
        "aggregate%head%2#0"
      ]
    },
    "292": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "replace%0#0"
      ]
    },
    "293": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "294": {
      "op": "bytec_0 // \"tup\"",
      "stack_out": [
        "aggregate%concat%0#0",
        "\"tup\""
      ]
    },
    "295": {
      "op": "swap",
      "stack_out": [
        "\"tup\"",
        "aggregate%concat%0#0"
      ]
    },
    "296": {
      "op": "app_global_put",
      "stack_out": []
    },
    "297": {
      "retsub": true,
      "op": "retsub"
    },
    "298": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box",
      "params": {
        "val#0": "bytes"
      },
      "block": "mutate_box",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "301": {
      "op": "bytec_2 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "302": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "303": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "304": {
      "op": "dup",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "305": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "0"
      ]
    },
    "306": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "307": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "309": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "310": {
      "op": "dig 2",
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "312": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "314": {
      "op": "substring3",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "315": {
      "op": "swap",
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "316": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "319": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "321": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0 (copy)"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0 (copy)"
      ]
    },
    "323": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ]
    },
    "324": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "326": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "327": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "328": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "329": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "330": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "331": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "334": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "replace%0#0"
      ]
    },
    "336": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%0#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "replace%0#0",
        "0x000a"
      ]
    },
    "337": {
      "op": "uncover 2",
      "stack_out": [
        "replace%0#0",
        "0x000a",
        "aggregate%extract%0#0"
      ]
    },
    "339": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "replace%0#0"
      ],
      "stack_out": [
        "replace%0#0",
        "aggregate%head%2#0"
      ]
    },
    "340": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "replace%0#0"
      ]
    },
    "341": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "342": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "aggregate%concat%0#0",
        "\"box\""
      ]
    },
    "343": {
      "op": "box_del",
      "defined_out": [
        "aggregate%concat%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "{box_del}"
      ]
    },
    "344": {
      "op": "pop",
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "345": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "aggregate%concat%0#0",
        "\"box\""
      ]
    },
    "346": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "aggregate%concat%0#0"
      ]
    },
    "347": {
      "op": "box_put",
      "stack_out": []
    },
    "348": {
      "retsub": true,
      "op": "retsub"
    },
    "349": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global",
      "params": {
        "val#0": "bytes"
      },
      "block": "mutate_global",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "352": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "353": {
      "op": "bytec_3 // \"glob\"",
      "defined_out": [
        "\"glob\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"glob\""
      ]
    },
    "354": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "355": {
      "error": "check self.glob exists",
      "op": "assert // check self.glob exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "356": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "357": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "358": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "359": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "361": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "362": {
      "op": "dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "364": {
      "op": "cover 2",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "366": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "367": {
      "op": "swap",
      "stack_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "368": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "371": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "373": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0 (copy)"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0 (copy)"
      ]
    },
    "375": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ]
    },
    "376": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "378": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "379": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "380": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "381": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "382": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "383": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "386": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "replace%0#0"
      ]
    },
    "388": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%0#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "replace%0#0",
        "0x000a"
      ]
    },
    "389": {
      "op": "uncover 2",
      "stack_out": [
        "replace%0#0",
        "0x000a",
        "aggregate%extract%0#0"
      ]
    },
    "391": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "replace%0#0"
      ],
      "stack_out": [
        "replace%0#0",
        "aggregate%head%2#0"
      ]
    },
    "392": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "replace%0#0"
      ]
    },
    "393": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "394": {
      "op": "bytec_3 // \"glob\"",
      "stack_out": [
        "aggregate%concat%0#0",
        "\"glob\""
      ]
    },
    "395": {
      "op": "swap",
      "stack_out": [
        "\"glob\"",
        "aggregate%concat%0#0"
      ]
    },
    "396": {
      "op": "app_global_put",
      "stack_out": []
    },
    "397": {
      "retsub": true,
      "op": "retsub"
    },
    "398": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local",
      "params": {
        "val#0": "bytes"
      },
      "block": "mutate_local",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "401": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "403": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "404": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "405": {
      "op": "bytec 4 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "\"loc\""
      ]
    },
    "407": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "408": {
      "error": "check self.loc exists for account",
      "op": "assert // check self.loc exists for account",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "409": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "410": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "411": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "412": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "414": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "415": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "417": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "419": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "420": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "421": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "424": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "426": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "tmp%0#0",
        "val#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0 (copy)"
      ]
    },
    "428": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ]
    },
    "429": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "431": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "432": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "433": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "434": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "435": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "436": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "439": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "replace%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "replace%0#0"
      ]
    },
    "441": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%0#0",
        "replace%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "replace%0#0",
        "0x000a"
      ]
    },
    "442": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "replace%0#0",
        "0x000a",
        "aggregate%extract%0#0"
      ]
    },
    "444": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "replace%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "replace%0#0",
        "aggregate%head%2#0"
      ]
    },
    "445": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "replace%0#0"
      ]
    },
    "446": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "447": {
      "op": "bytec 4 // \"loc\""
    },
    "449": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"loc\"",
        "aggregate%concat%0#0"
      ]
    },
    "450": {
      "op": "app_local_put",
      "stack_out": []
    },
    "451": {
      "retsub": true,
      "op": "retsub"
    }
  }
}