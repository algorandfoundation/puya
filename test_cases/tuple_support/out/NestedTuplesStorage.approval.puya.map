{
  "version": 3,
  "sources": [
    "../tuple_storage.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeQ;AAAA;;AAAA;AAIA;AAAA;;AAAA;AACW;AAAA;AAAA;AAAA;AAAA;;;AAAX;AAAA;AAAA;AAJQ;;AAIR;AAAA;AAAA;AAAA;AAVR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;AAcyB;AAAA;AAAA;AAAA;AAAA;;;AAAjB;AAAA;AAAA;AAAuC;;AAAvC;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACS;;AAAT;;AAAA;;AAAA;AAHH;AAAA;AAKA;;;AAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAEY;;AAAT;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"tup\" 0x000a \"box\" \"glob\" \"loc\" 0x000a000000000000000000010000000000000000 0x00010000000000000000"
    },
    "59": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "bnz after_if_else@2",
      "stack_out": []
    },
    "64": {
      "op": "bytec_0 // \"tup\"",
      "defined_out": [
        "\"tup\""
      ],
      "stack_out": [
        "\"tup\""
      ]
    },
    "65": {
      "op": "bytec 5 // 0x000a000000000000000000010000000000000000",
      "defined_out": [
        "\"tup\"",
        "0x000a000000000000000000010000000000000000"
      ],
      "stack_out": [
        "\"tup\"",
        "0x000a000000000000000000010000000000000000"
      ]
    },
    "67": {
      "op": "app_global_put",
      "stack_out": []
    },
    "68": {
      "op": "bytec_3 // \"glob\"",
      "defined_out": [
        "\"glob\""
      ],
      "stack_out": [
        "\"glob\""
      ]
    },
    "69": {
      "op": "bytec 5 // 0x000a000000000000000000010000000000000000",
      "stack_out": [
        "\"glob\"",
        "0x000a000000000000000000010000000000000000"
      ]
    },
    "71": {
      "op": "app_global_put",
      "stack_out": []
    },
    "72": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "73": {
      "op": "bytec_0 // \"tup\"",
      "stack_out": [
        "0",
        "\"tup\""
      ]
    },
    "74": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "75": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "76": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0"
      ]
    },
    "79": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "0x000a"
      ]
    },
    "80": {
      "op": "swap",
      "stack_out": [
        "0x000a",
        "aggregate%extract%1#0"
      ]
    },
    "81": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%6#0"
      ]
    },
    "82": {
      "op": "bytec 6 // 0x00010000000000000000",
      "defined_out": [
        "0x00010000000000000000",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%6#0",
        "0x00010000000000000000"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#0"
      ],
      "stack_out": [
        "aggregate%concat%2#0"
      ]
    },
    "85": {
      "op": "bytec_0 // \"tup\"",
      "stack_out": [
        "aggregate%concat%2#0",
        "\"tup\""
      ]
    },
    "86": {
      "op": "swap",
      "stack_out": [
        "\"tup\"",
        "aggregate%concat%2#0"
      ]
    },
    "87": {
      "op": "app_global_put",
      "stack_out": []
    },
    "88": {
      "block": "after_if_else@2",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "90": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "91": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "93": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "94": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "95": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "96": {
      "op": "switch call_NoOp create_NoOp call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED",
      "stack_out": []
    },
    "122": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "123": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "pushbytes 0xbec76d87 // method \"bootstrap()void\"",
      "defined_out": [
        "Method(bootstrap()void)"
      ],
      "stack_out": [
        "Method(bootstrap()void)"
      ]
    },
    "129": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(bootstrap()void)",
        "tmp%8#0"
      ],
      "stack_out": [
        "Method(bootstrap()void)",
        "tmp%8#0"
      ]
    },
    "132": {
      "op": "match bootstrap",
      "stack_out": []
    },
    "136": {
      "error": "this contract does not implement the given ABI method for call OptIn",
      "op": "err // this contract does not implement the given ABI method for call OptIn"
    },
    "137": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "139": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "140": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "op": "return // on error: this contract does not implement the given ABI method for create NoOp",
      "defined_out": [],
      "stack_out": []
    },
    "141": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "pushbytess 0xacc253ae 0xe844940c 0x6222ef1a 0x1b269b50 // method \"mutate_tuple(uint64)void\", method \"mutate_box(uint64)void\", method \"mutate_global(uint64)void\", method \"mutate_local(uint64)void\"",
      "defined_out": [
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "Method(mutate_tuple(uint64)void)"
      ],
      "stack_out": [
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)"
      ]
    },
    "163": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "Method(mutate_tuple(uint64)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(mutate_tuple(uint64)void)",
        "Method(mutate_box(uint64)void)",
        "Method(mutate_global(uint64)void)",
        "Method(mutate_local(uint64)void)",
        "tmp%5#0"
      ]
    },
    "166": {
      "op": "match mutate_tuple mutate_box mutate_global mutate_local",
      "stack_out": []
    },
    "176": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "177": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap[routing]",
      "params": {},
      "block": "bootstrap",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "178": {
      "op": "bytec_0 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"tup\""
      ]
    },
    "179": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "180": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "181": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "184": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "0x000a"
      ]
    },
    "185": {
      "op": "swap",
      "stack_out": [
        "0x000a",
        "aggregate%extract%0#0"
      ]
    },
    "186": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "187": {
      "op": "bytec 6 // 0x00010000000000000000",
      "defined_out": [
        "0x00010000000000000000",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "0x00010000000000000000"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "190": {
      "op": "bytec_2 // \"box\"",
      "defined_out": [
        "\"box\"",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "\"box\""
      ]
    },
    "191": {
      "op": "box_del",
      "defined_out": [
        "aggregate%concat%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "{box_del}"
      ]
    },
    "192": {
      "op": "pop",
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "193": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "aggregate%concat%0#0",
        "\"box\""
      ]
    },
    "194": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "aggregate%concat%0#0",
        "aggregate%concat%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "\"box\"",
        "aggregate%concat%0#0 (copy)"
      ]
    },
    "196": {
      "op": "box_put",
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "197": {
      "op": "txn Sender",
      "defined_out": [
        "aggregate%concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "tmp%0#0"
      ]
    },
    "199": {
      "op": "bytec 4 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "aggregate%concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "tmp%0#0",
        "\"loc\""
      ]
    },
    "201": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "\"loc\"",
        "aggregate%concat%0#0"
      ]
    },
    "203": {
      "op": "app_local_put",
      "stack_out": []
    },
    "204": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "205": {
      "op": "return",
      "stack_out": []
    },
    "206": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple[routing]",
      "params": {},
      "block": "mutate_tuple",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#0"
      ]
    },
    "209": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "0"
      ]
    },
    "210": {
      "op": "bytec_0 // \"tup\"",
      "defined_out": [
        "\"tup\"",
        "0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "0",
        "\"tup\""
      ]
    },
    "211": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "212": {
      "error": "check self.tup exists",
      "op": "assert // check self.tup exists",
      "stack_out": [
        "val#0",
        "maybe_value%0#0"
      ]
    },
    "213": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "214": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "215": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "216": {
      "op": "dig 1",
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "218": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "219": {
      "op": "dig 2",
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "221": {
      "op": "cover 2",
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "223": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "224": {
      "op": "swap",
      "stack_out": [
        "val#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "225": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "228": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "230": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0"
      ]
    },
    "232": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ]
    },
    "233": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "235": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "236": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "237": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "238": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "239": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "240": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "243": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "replace%0#0"
      ]
    },
    "245": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%0#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "replace%0#0",
        "0x000a"
      ]
    },
    "246": {
      "op": "uncover 2",
      "stack_out": [
        "replace%0#0",
        "0x000a",
        "aggregate%extract%0#0"
      ]
    },
    "248": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "replace%0#0"
      ],
      "stack_out": [
        "replace%0#0",
        "aggregate%head%2#0"
      ]
    },
    "249": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "replace%0#0"
      ]
    },
    "250": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "251": {
      "op": "bytec_0 // \"tup\"",
      "stack_out": [
        "aggregate%concat%0#0",
        "\"tup\""
      ]
    },
    "252": {
      "op": "swap",
      "stack_out": [
        "\"tup\"",
        "aggregate%concat%0#0"
      ]
    },
    "253": {
      "op": "app_global_put",
      "stack_out": []
    },
    "254": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "255": {
      "op": "return",
      "stack_out": []
    },
    "256": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box[routing]",
      "params": {},
      "block": "mutate_box",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#0"
      ]
    },
    "259": {
      "op": "bytec_2 // \"box\"",
      "defined_out": [
        "\"box\"",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "\"box\""
      ]
    },
    "260": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "261": {
      "error": "check self.box exists",
      "op": "assert // check self.box exists",
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0"
      ]
    },
    "262": {
      "op": "dup",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "263": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "0"
      ]
    },
    "264": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "265": {
      "op": "dig 1",
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "267": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "268": {
      "op": "dig 2",
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "270": {
      "op": "cover 2",
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "272": {
      "op": "substring3",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%substring3%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%box_get%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "273": {
      "op": "swap",
      "stack_out": [
        "val#0",
        "aggregate%substring3%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "274": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "277": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "279": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0"
      ]
    },
    "281": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ]
    },
    "282": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "284": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "285": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "286": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "287": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "288": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "289": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "292": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "replace%0#0"
      ]
    },
    "294": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%0#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "replace%0#0",
        "0x000a"
      ]
    },
    "295": {
      "op": "uncover 2",
      "stack_out": [
        "replace%0#0",
        "0x000a",
        "aggregate%extract%0#0"
      ]
    },
    "297": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "replace%0#0"
      ],
      "stack_out": [
        "replace%0#0",
        "aggregate%head%2#0"
      ]
    },
    "298": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "replace%0#0"
      ]
    },
    "299": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "300": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "aggregate%concat%0#0",
        "\"box\""
      ]
    },
    "301": {
      "op": "box_del",
      "defined_out": [
        "aggregate%concat%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "aggregate%concat%0#0",
        "{box_del}"
      ]
    },
    "302": {
      "op": "pop",
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "303": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "aggregate%concat%0#0",
        "\"box\""
      ]
    },
    "304": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "aggregate%concat%0#0"
      ]
    },
    "305": {
      "op": "box_put",
      "stack_out": []
    },
    "306": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "307": {
      "op": "return",
      "stack_out": []
    },
    "308": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global[routing]",
      "params": {},
      "block": "mutate_global",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#0"
      ]
    },
    "311": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "0"
      ]
    },
    "312": {
      "op": "bytec_3 // \"glob\"",
      "defined_out": [
        "\"glob\"",
        "0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "0",
        "\"glob\""
      ]
    },
    "313": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "314": {
      "error": "check self.glob exists",
      "op": "assert // check self.glob exists",
      "stack_out": [
        "val#0",
        "maybe_value%0#0"
      ]
    },
    "315": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "316": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "317": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "318": {
      "op": "dig 1",
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "320": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "321": {
      "op": "dig 2",
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "323": {
      "op": "cover 2",
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "325": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "326": {
      "op": "swap",
      "stack_out": [
        "val#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "327": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "330": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "332": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0"
      ]
    },
    "334": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ]
    },
    "335": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "337": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "338": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "339": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "340": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "341": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "342": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "345": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "replace%0#0"
      ]
    },
    "347": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%0#0",
        "replace%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "replace%0#0",
        "0x000a"
      ]
    },
    "348": {
      "op": "uncover 2",
      "stack_out": [
        "replace%0#0",
        "0x000a",
        "aggregate%extract%0#0"
      ]
    },
    "350": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "replace%0#0"
      ],
      "stack_out": [
        "replace%0#0",
        "aggregate%head%2#0"
      ]
    },
    "351": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "replace%0#0"
      ]
    },
    "352": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "353": {
      "op": "bytec_3 // \"glob\"",
      "stack_out": [
        "aggregate%concat%0#0",
        "\"glob\""
      ]
    },
    "354": {
      "op": "swap",
      "stack_out": [
        "\"glob\"",
        "aggregate%concat%0#0"
      ]
    },
    "355": {
      "op": "app_global_put",
      "stack_out": []
    },
    "356": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "357": {
      "op": "return",
      "stack_out": []
    },
    "358": {
      "subroutine": "test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local[routing]",
      "params": {},
      "block": "mutate_local",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "val#0"
      ],
      "stack_out": [
        "val#0"
      ]
    },
    "361": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#0"
      ]
    },
    "363": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "364": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "365": {
      "op": "bytec 4 // \"loc\"",
      "defined_out": [
        "\"loc\"",
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "\"loc\""
      ]
    },
    "367": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "368": {
      "error": "check self.loc exists for account",
      "op": "assert // check self.loc exists for account",
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "369": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "370": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "371": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "372": {
      "op": "dig 1",
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "374": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "375": {
      "op": "dig 2",
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "377": {
      "op": "cover 2",
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "379": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "380": {
      "op": "swap",
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "maybe_value%0#0"
      ]
    },
    "381": {
      "op": "extract 2 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "tmp%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "384": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "tmp%0#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "386": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0 (copy)",
        "val#0"
      ]
    },
    "388": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%0#0",
        "concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract%0#0",
        "concat%0#0"
      ]
    },
    "389": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "391": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "392": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "393": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "394": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "395": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_bytes%0#0",
        "concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "396": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "399": {
      "op": "replace2 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "replace%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "replace%0#0"
      ]
    },
    "401": {
      "op": "bytec_1 // 0x000a",
      "defined_out": [
        "0x000a",
        "aggregate%extract%0#0",
        "replace%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%0#0",
        "replace%0#0",
        "0x000a"
      ]
    },
    "402": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "replace%0#0",
        "0x000a",
        "aggregate%extract%0#0"
      ]
    },
    "404": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "replace%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "replace%0#0",
        "aggregate%head%2#0"
      ]
    },
    "405": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "replace%0#0"
      ]
    },
    "406": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "407": {
      "op": "bytec 4 // \"loc\""
    },
    "409": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"loc\"",
        "aggregate%concat%0#0"
      ]
    },
    "410": {
      "op": "app_local_put",
      "stack_out": []
    },
    "411": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "412": {
      "op": "return",
      "stack_out": []
    }
  }
}