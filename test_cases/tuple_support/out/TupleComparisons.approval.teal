#pragma version 10

test_cases.tuple_support.tuple_comparisons.TupleComparisons.approval_program:
    // tuple_support/tuple_comparisons.py:6
    // test_tuple_cmp_eval()
    callsub test_tuple_cmp_eval
    // tuple_support/tuple_comparisons.py:8
    // return True
    pushint 1 // 1
    return


// test_cases.tuple_support.tuple_comparisons.test_tuple_cmp_eval() -> void:
test_tuple_cmp_eval:
    // tuple_support/tuple_comparisons.py:14-15
    // @subroutine
    // def test_tuple_cmp_eval() -> None:
    proto 0 0
    // tuple_support/tuple_comparisons.py:18
    // log_and_return(UInt64(42)),
    pushint 42 // 42
    callsub log_and_return
    pop
    // tuple_support/tuple_comparisons.py:22
    // log_and_return(UInt64(43)),
    pushint 43 // 43
    callsub log_and_return
    pop
    // tuple_support/tuple_comparisons.py:28
    // log_and_return(UInt64(44)),
    pushint 44 // 44
    callsub log_and_return
    pop
    // tuple_support/tuple_comparisons.py:32
    // log_and_return(UInt64(45)),
    pushint 45 // 45
    callsub log_and_return
    pop
    // tuple_support/tuple_comparisons.py:36
    // assert (UInt64(1), UInt64(2)) != (UInt64(3), log_and_return(UInt64(46)))
    pushint 46 // 46
    callsub log_and_return
    pushint 2 // 2
    !=
    pushint 1 // 1
    ||
    assert
    // tuple_support/tuple_comparisons.py:37
    // tmp = (UInt64(1), UInt64(2)) == (UInt64(3), log_and_return(UInt64(47)))
    pushint 47 // 47
    callsub log_and_return
    pop
    retsub


// test_cases.tuple_support.tuple_comparisons.log_and_return(val: uint64) -> uint64:
log_and_return:
    // tuple_support/tuple_comparisons.py:52-53
    // @subroutine
    // def log_and_return(val: UInt64) -> UInt64:
    proto 1 1
    // tuple_support/tuple_comparisons.py:54
    // log(val)
    frame_dig -1
    itob
    log
    // tuple_support/tuple_comparisons.py:55
    // return val
    frame_dig -1
    retsub
