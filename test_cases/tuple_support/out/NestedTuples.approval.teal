#pragma version 10
#pragma typetrack false

// test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 2 3
    bytecblock "build_nested_call_count" 0x151f7c75 0x000c
    txn ApplicationID
    bnz main_after_if_else@2
    // tuple_support/nested_tuples.py:20
    // self.build_nested_call_count = UInt64(0)
    bytec_0 // "build_nested_call_count"
    intc_1 // 0
    app_global_put

main_after_if_else@2:
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0x9e5a3ba7 0xcea0521b 0x373f5b24 0xec593096 // method "run_tests()bool", method "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))", method "named_tuple((uint64,byte[],string))(uint64,byte[],string)", method "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))"
    txna ApplicationArgs 0
    match main_run_tests_route@5 main_nested_tuple_params_route@6 main_named_tuple_route@7 main_nested_named_tuple_params_route@8

main_after_if_else@11:
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    intc_1 // 0
    return

main_nested_named_tuple_params_route@8:
    // tuple_support/nested_tuples.py:63
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    extract 8 8 // on error: Index access is out of bounds
    dig 2
    pushint 16 // 16
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    pushint 8 // 8
    extract_uint16
    dig 2
    pushint 10 // 10
    extract_uint16
    dig 3
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 3
    len
    uncover 4
    uncover 3
    uncover 2
    substring3
    extract 2 0
    // tuple_support/nested_tuples.py:63
    // @arc4.abimethod()
    uncover 4
    itob
    uncover 3
    itob
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    uncover 2
    bytec_2 // 0x000c
    concat
    dig 2
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    uncover 2
    concat
    pushbytes 0x0012
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_named_tuple_route@7:
    // tuple_support/nested_tuples.py:58
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    pushint 8 // 8
    extract_uint16
    dig 2
    pushint 10 // 10
    extract_uint16
    dig 3
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 3
    len
    uncover 4
    uncover 3
    uncover 2
    substring3
    extract 2 0
    // tuple_support/nested_tuples.py:58
    // @arc4.abimethod()
    uncover 2
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    uncover 2
    bytec_2 // 0x000c
    concat
    dig 2
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_nested_tuple_params_route@6:
    // tuple_support/nested_tuples.py:51
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16
    dig 1
    intc_2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 2
    len
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_1 // 0
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    extract 2 0
    swap
    intc_2 // 2
    extract_uint64
    // tuple_support/nested_tuples.py:51
    // @arc4.abimethod()
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    uncover 2
    itob
    pushbytes 0x000a
    swap
    concat
    swap
    concat
    dig 1
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    pushbytes 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_run_tests_route@5:
    // tuple_support/nested_tuples.py:22
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub run_tests
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@9:
    // tuple_support/nested_tuples.py:18
    // class NestedTuples(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// test_cases.tuple_support.nested_tuples.test_nested_singles(one: uint64, reassign: uint64) -> void:
test_nested_singles:
    // tuple_support/nested_tuples.py:131-132
    // @subroutine
    // def test_nested_singles(one: UInt64, *, reassign: bool) -> None:
    proto 2 0
    // tuple_support/nested_tuples.py:134
    // (UInt64(0),),
    intc_1 // 0
    // tuple_support/nested_tuples.py:136
    // (UInt64(2),),
    intc_2 // 2
    // tuple_support/nested_tuples.py:140
    // assert s[1][0] == 1
    frame_dig -2
    intc_0 // 1
    ==
    assert
    frame_dig -2
    // tuple_support/nested_tuples.py:145
    // if reassign:
    frame_dig -1
    bz test_nested_singles_after_if_else@2
    // tuple_support/nested_tuples.py:147
    // (UInt64(3),),
    intc_3 // 3
    // tuple_support/nested_tuples.py:146-150
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    frame_bury 0
    // tuple_support/nested_tuples.py:148
    // (UInt64(4),),
    pushint 4 // 4
    // tuple_support/nested_tuples.py:146-150
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    frame_bury 2
    // tuple_support/nested_tuples.py:149
    // (UInt64(5),),
    pushint 5 // 5
    // tuple_support/nested_tuples.py:146-150
    // s = (
    //     (UInt64(3),),
    //     (UInt64(4),),
    //     (UInt64(5),),
    // )
    frame_bury 1

test_nested_singles_after_if_else@2:
    // tuple_support/nested_tuples.py:151
    // assert s[0][0] == (3 if reassign else 0)
    frame_dig -1
    intc_3 // 3
    *
    frame_dig 0
    ==
    assert
    // tuple_support/nested_tuples.py:153
    // assert tmp == (5 if reassign else 2)
    intc_2 // 2
    pushint 5 // 5
    frame_dig -1
    select
    frame_dig 1
    dig 1
    ==
    assert
    // tuple_support/nested_tuples.py:157
    // s1 += one
    frame_dig 2
    dup
    cover 2
    frame_dig -2
    +
    // tuple_support/nested_tuples.py:158
    // assert s1 == (5 if reassign else 2)
    ==
    assert
    // tuple_support/nested_tuples.py:159
    // assert s[1][0] == (4 if reassign else 1)
    intc_0 // 1
    pushint 4 // 4
    frame_dig -1
    select
    ==
    assert
    retsub


// test_cases.tuple_support.nested_tuples.NestedTuples.run_tests() -> uint64:
run_tests:
    // tuple_support/nested_tuples.py:22-23
    // @arc4.abimethod()
    // def run_tests(self) -> bool:
    proto 0 1
    pushbytes ""
    // tuple_support/nested_tuples.py:38
    // test_intrinsics(UInt64(1), UInt64(2))
    intc_0 // 1
    intc_2 // 2
    // tuple_support/nested_tuples.py:98
    // nt = (UInt64(1), op.addw(num1, num2), UInt64(42))
    addw
    // tuple_support/nested_tuples.py:101
    // assert nt[1] == (0, num1 + num2)  # type: ignore[comparison-overlap]
    swap
    !
    swap
    intc_3 // 3
    ==
    dup2
    &&
    assert
    // tuple_support/nested_tuples.py:102
    // assert nt[1][:1] == (0,)  # type: ignore[comparison-overlap]
    swap
    assert
    // tuple_support/nested_tuples.py:103
    // assert nt[1][1:] == (num1 + num2,)
    assert
    // tuple_support/nested_tuples.py:40
    // test_nested_singles(UInt64(1), reassign=True)
    intc_0 // 1
    dup
    callsub test_nested_singles
    // tuple_support/nested_tuples.py:41
    // test_nested_singles(UInt64(1), reassign=False)
    intc_0 // 1
    intc_1 // 0
    callsub test_nested_singles
    // tuple_support/nested_tuples.py:179
    // total = UInt64(0)
    intc_1 // 0
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_0 // 1
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    intc_1 // 0

run_tests_for_body@12:
    // tuple_support/nested_tuples.py:183
    // total += a + b
    frame_dig 2
    uncover 2
    +
    frame_dig 1
    +
    frame_bury 1
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    switch run_tests_for_header_1@13 run_tests_for_header_2@14 run_tests_for_header_3@15
    intc_1 // 0
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_0 // 1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    swap

run_tests_for_body@17:
    // tuple_support/nested_tuples.py:186
    // total += a + b
    frame_dig 0
    uncover 2
    +
    frame_dig 1
    +
    frame_bury 1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    switch run_tests_for_header_1@18 run_tests_for_header_2@19 run_tests_for_header_3@20
    // tuple_support/nested_tuples.py:188
    // assert total // 8 == 3
    frame_dig 1
    pushint 8 // 8
    /
    intc_3 // 3
    ==
    assert
    // tuple_support/nested_tuples.py:75
    // self.build_nested_call_count = UInt64(0)
    bytec_0 // "build_nested_call_count"
    intc_1 // 0
    app_global_put
    // tuple_support/nested_tuples.py:70
    // self.build_nested_call_count += 1
    intc_1 // 0
    bytec_0 // "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    intc_0 // 1
    +
    bytec_0 // "build_nested_call_count"
    swap
    app_global_put
    // tuple_support/nested_tuples.py:78
    // assert self.build_nested_call_count == 1
    intc_1 // 0
    bytec_0 // "build_nested_call_count"
    app_global_get_ex
    assert // check self.build_nested_call_count exists
    intc_0 // 1
    ==
    assert
    // tuple_support/nested_tuples.py:49
    // return True
    intc_0 // 1
    frame_bury 0
    retsub

run_tests_for_header_3@20:
    intc_3 // 3
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    swap
    b run_tests_for_body@17

run_tests_for_header_2@19:
    intc_2 // 2
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_0 // 1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_0 // 1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    swap
    b run_tests_for_body@17

run_tests_for_header_1@18:
    intc_0 // 1
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 0
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_0 // 1
    // tuple_support/nested_tuples.py:185
    // for a, b in ((x, y), (y, x), (x, x), (y, y)):
    swap
    b run_tests_for_body@17

run_tests_for_header_3@15:
    intc_3 // 3
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 2
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    swap
    b run_tests_for_body@12

run_tests_for_header_2@14:
    intc_2 // 2
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_0 // 1
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 2
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_0 // 1
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    swap
    b run_tests_for_body@12

run_tests_for_header_1@13:
    intc_0 // 1
    // tuple_support/nested_tuples.py:178
    // y = UInt64(2)
    intc_2 // 2
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    frame_bury 2
    // tuple_support/nested_tuples.py:177
    // x = UInt64(1)
    intc_0 // 1
    // tuple_support/nested_tuples.py:181
    // for t in ((x, y), (y, x), (x, x), (y, y)):
    swap
    b run_tests_for_body@12
