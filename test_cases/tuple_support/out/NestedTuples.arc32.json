{
    "hints": {
        "run_tests()bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "named_tuple((uint64,byte[],string))(uint64,byte[],string)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "args": {
                    "name": "Child",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "byte[]"
                        ],
                        [
                            "c",
                            "string"
                        ]
                    ]
                },
                "output": {
                    "name": "Child",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "byte[]"
                        ],
                        [
                            "c",
                            "string"
                        ]
                    ]
                }
            }
        },
        "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "args": {
                    "name": "Parent",
                    "elements": [
                        [
                            "foo",
                            "uint64"
                        ],
                        [
                            "foo_arc",
                            "uint64"
                        ],
                        [
                            "child",
                            "(uint64,byte[],string)"
                        ]
                    ]
                },
                "output": {
                    "name": "Parent",
                    "elements": [
                        [
                            "foo",
                            "uint64"
                        ],
                        [
                            "foo_arc",
                            "uint64"
                        ],
                        [
                            "child",
                            "(uint64,byte[],string)"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "build_nested_call_count": {
                    "type": "uint64",
                    "key": "build_nested_call_count"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "NestedTuples",
        "methods": [
            {
                "name": "run_tests",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "nested_tuple_params",
                "args": [
                    {
                        "type": "(string,(byte[],(uint64)))",
                        "name": "args"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],(string,uint64))"
                }
            },
            {
                "name": "named_tuple",
                "args": [
                    {
                        "type": "(uint64,byte[],string)",
                        "name": "args"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,byte[],string)"
                }
            },
            {
                "name": "nested_named_tuple_params",
                "args": [
                    {
                        "type": "(uint64,uint64,(uint64,byte[],string))",
                        "name": "args"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,(uint64,byte[],string))"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}