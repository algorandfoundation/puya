{
    "hints": {
        "store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "pwl": {
                    "name": "ParentWithList",
                    "elements": [
                        [
                            "parent",
                            "(uint64,uint64,(uint64,byte[],string))"
                        ],
                        [
                            "children",
                            "(uint64,byte[],string)[]"
                        ]
                    ]
                }
            }
        },
        "load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ParentWithList",
                    "elements": [
                        [
                            "parent",
                            "(uint64,uint64,(uint64,byte[],string))"
                        ],
                        [
                            "children",
                            "(uint64,byte[],string)[]"
                        ]
                    ]
                }
            }
        },
        "store_tuple_in_box((uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "key": {
                    "name": "SimpleTup",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "is_tuple_in_box((uint64,uint64))bool": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "key": {
                    "name": "SimpleTup",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "load_tuple_from_box((uint64,uint64))(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "key": {
                    "name": "SimpleTup",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "SimpleTup",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "maybe_load_tuple_from_box((uint64,uint64))((uint64,uint64),bool)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "key": {
                    "name": "SimpleTup",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "load_tuple_from_box_or_default((uint64,uint64))(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "key": {
                    "name": "SimpleTup",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "SimpleTup",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "load_tuple_from_local_state_or_default(string)(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "SimpleTup",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "mutate_local_tuple()(uint64[],(uint64,byte[],string))": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "TupleWithMutable",
                    "elements": [
                        [
                            "arr",
                            "uint64[]"
                        ],
                        [
                            "child",
                            "(uint64,byte[],string)"
                        ]
                    ]
                }
            }
        },
        "mutate_tuple_in_storage_currently_supported_method()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "run_tests()bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "named_tuple((uint64,byte[],string))(uint64,byte[],string)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "args": {
                    "name": "Child",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "byte[]"
                        ],
                        [
                            "c",
                            "string"
                        ]
                    ]
                },
                "output": {
                    "name": "Child",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "byte[]"
                        ],
                        [
                            "c",
                            "string"
                        ]
                    ]
                }
            }
        },
        "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "args": {
                    "name": "Parent",
                    "elements": [
                        [
                            "foo",
                            "uint64"
                        ],
                        [
                            "foo_arc",
                            "uint64"
                        ],
                        [
                            "child",
                            "(uint64,byte[],string)"
                        ]
                    ]
                },
                "output": {
                    "name": "Parent",
                    "elements": [
                        [
                            "foo",
                            "uint64"
                        ],
                        [
                            "foo_arc",
                            "uint64"
                        ],
                        [
                            "child",
                            "(uint64,byte[],string)"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "build_nested_call_count": {
                    "type": "uint64",
                    "key": "build_nested_call_count"
                },
                "pwl": {
                    "type": "bytes",
                    "key": "pwl"
                },
                "twm": {
                    "type": "bytes",
                    "key": "twm"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "NestedTuples",
        "methods": [
            {
                "name": "store_tuple",
                "args": [
                    {
                        "type": "((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])",
                        "name": "pwl"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "load_tuple",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])"
                }
            },
            {
                "name": "store_tuple_in_box",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "is_tuple_in_box",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "load_tuple_from_box",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "maybe_load_tuple_from_box",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "((uint64,uint64),bool)"
                }
            },
            {
                "name": "load_tuple_from_box_or_default",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "load_tuple_from_local_state_or_default",
                "args": [
                    {
                        "type": "string",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "mutate_local_tuple",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64[],(uint64,byte[],string))"
                }
            },
            {
                "name": "mutate_tuple_in_storage_currently_supported_method",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "run_tests",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "nested_tuple_params",
                "args": [
                    {
                        "type": "(string,(byte[],(uint64)))",
                        "name": "args"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],(string,uint64))"
                }
            },
            {
                "name": "named_tuple",
                "args": [
                    {
                        "type": "(uint64,byte[],string)",
                        "name": "args"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,byte[],string)"
                }
            },
            {
                "name": "nested_named_tuple_params",
                "args": [
                    {
                        "type": "(uint64,uint64,(uint64,byte[],string))",
                        "name": "args"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,(uint64,byte[],string))"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}