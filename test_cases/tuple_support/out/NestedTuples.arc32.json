{
    "hints": {
        "run_tests()bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "named_tuple((uint64,byte[],string))(uint64,byte[],string)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "args": {
                    "name": "Child",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "byte[]"
                        ],
                        [
                            "c",
                            "string"
                        ]
                    ]
                },
                "output": {
                    "name": "Child",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "byte[]"
                        ],
                        [
                            "c",
                            "string"
                        ]
                    ]
                }
            }
        },
        "nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "args": {
                    "name": "Parent",
                    "elements": [
                        [
                            "foo",
                            "uint64"
                        ],
                        [
                            "foo_arc",
                            "uint64"
                        ],
                        [
                            "child",
                            "(uint64,byte[],string)"
                        ]
                    ]
                },
                "output": {
                    "name": "Parent",
                    "elements": [
                        [
                            "foo",
                            "uint64"
                        ],
                        [
                            "foo_arc",
                            "uint64"
                        ],
                        [
                            "child",
                            "(uint64,byte[],string)"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnR1cGxlX3N1cHBvcnQubmVzdGVkX3R1cGxlcy5OZXN0ZWRUdXBsZXMuYXBwcm92YWxfcHJvZ3JhbToKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9lbnRyeXBvaW50QDIKICAgIGNhbGxzdWIgX19pbml0X18KCm1haW5fZW50cnlwb2ludEAyOgogICAgY2FsbHN1YiBfX3B1eWFfYXJjNF9yb3V0ZXJfXwogICAgcmV0dXJuCgoKLy8gdGVzdF9jYXNlcy50dXBsZV9zdXBwb3J0Lm5lc3RlZF90dXBsZXMuTmVzdGVkVHVwbGVzLl9fcHV5YV9hcmM0X3JvdXRlcl9fKCkgLT4gdWludDY0OgpfX3B1eWFfYXJjNF9yb3V0ZXJfXzoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxOAogICAgLy8gY2xhc3MgTmVzdGVkVHVwbGVzKEFSQzRDb250cmFjdCk6CiAgICBwcm90byAwIDEKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19iYXJlX3JvdXRpbmdAOAogICAgbWV0aG9kICJydW5fdGVzdHMoKWJvb2wiCiAgICBtZXRob2QgIm5lc3RlZF90dXBsZV9wYXJhbXMoKHN0cmluZywoYnl0ZVtdLCh1aW50NjQpKSkpKGJ5dGVbXSwoc3RyaW5nLHVpbnQ2NCkpIgogICAgbWV0aG9kICJuYW1lZF90dXBsZSgodWludDY0LGJ5dGVbXSxzdHJpbmcpKSh1aW50NjQsYnl0ZVtdLHN0cmluZykiCiAgICBtZXRob2QgIm5lc3RlZF9uYW1lZF90dXBsZV9wYXJhbXMoKHVpbnQ2NCx1aW50NjQsKHVpbnQ2NCxieXRlW10sc3RyaW5nKSkpKHVpbnQ2NCx1aW50NjQsKHVpbnQ2NCxieXRlW10sc3RyaW5nKSkiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBfX3B1eWFfYXJjNF9yb3V0ZXJfX19ydW5fdGVzdHNfcm91dGVAMiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19uZXN0ZWRfdHVwbGVfcGFyYW1zX3JvdXRlQDMgX19wdXlhX2FyYzRfcm91dGVyX19fbmFtZWRfdHVwbGVfcm91dGVANCBfX3B1eWFfYXJjNF9yb3V0ZXJfX19uZXN0ZWRfbmFtZWRfdHVwbGVfcGFyYW1zX3JvdXRlQDUKICAgIGludCAwCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX3J1bl90ZXN0c19yb3V0ZUAyOgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjIyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBydW5fdGVzdHMKICAgIGJ5dGUgMHgwMAogICAgaW50IDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnQgMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19uZXN0ZWRfdHVwbGVfcGFyYW1zX3JvdXRlQDM6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NTEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTgKICAgIC8vIGNsYXNzIE5lc3RlZFR1cGxlcyhBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZHVwCiAgICBpbnQgMAogICAgZXh0cmFjdF91aW50MTYKICAgIHN3YXAKICAgIGR1cAogICAgaW50IDIKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMQogICAgdW5jb3ZlciAzCiAgICBkaWcgMgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIGNvdmVyIDIKICAgIGRpZyAxCiAgICBsZW4KICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgaW50IDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBzd2FwCiAgICBkdXAKICAgIGxlbgogICAgc3dhcAogICAgZHVwCiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMwogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIHN3YXAKICAgIGV4dHJhY3QgMiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NTEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIG5lc3RlZF90dXBsZV9wYXJhbXMKICAgIGNvdmVyIDIKICAgIHN3YXAKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBieXRlIDB4MDAwYQogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBsZW4KICAgIGludCA0CiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgYnl0ZSAweDAwMDQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fbmFtZWRfdHVwbGVfcm91dGVANDoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo1OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxOAogICAgLy8gY2xhc3MgTmVzdGVkVHVwbGVzKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGV4dHJhY3QgMCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgc3dhcAogICAgZHVwCiAgICBpbnQgOAogICAgZXh0cmFjdF91aW50MTYKICAgIHN3YXAKICAgIGR1cAogICAgaW50IDEwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDEKICAgIHVuY292ZXIgMwogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGV4dHJhY3QgMiAwCiAgICBjb3ZlciAyCiAgICBkaWcgMQogICAgbGVuCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjU4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBuYW1lZF90dXBsZQogICAgY292ZXIgMgogICAgc3dhcAogICAgaXRvYgogICAgY292ZXIgMgogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgY292ZXIgMgogICAgc3dhcAogICAgYnl0ZSAweDAwMGMKICAgIGNvbmNhdAogICAgZGlnIDEKICAgIGxlbgogICAgaW50IDEyCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fbmVzdGVkX25hbWVkX3R1cGxlX3BhcmFtc19yb3V0ZUA1OgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjYzCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE4CiAgICAvLyBjbGFzcyBOZXN0ZWRUdXBsZXMoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBzd2FwCiAgICBkdXAKICAgIGV4dHJhY3QgOCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgc3dhcAogICAgZHVwCiAgICBpbnQgMTYKICAgIGV4dHJhY3RfdWludDE2CiAgICBzd2FwCiAgICBkdXAKICAgIGxlbgogICAgc3dhcAogICAgY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgZHVwCiAgICBleHRyYWN0IDAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHN3YXAKICAgIGR1cAogICAgaW50IDgKICAgIGV4dHJhY3RfdWludDE2CiAgICBzd2FwCiAgICBkdXAKICAgIGludCAxMAogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAxCiAgICB1bmNvdmVyIDMKICAgIGRpZyAyCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgMAogICAgY292ZXIgMgogICAgZGlnIDEKICAgIGxlbgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo2MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgbmVzdGVkX25hbWVkX3R1cGxlX3BhcmFtcwogICAgY292ZXIgNAogICAgY292ZXIgMwogICAgY292ZXIgMgogICAgY292ZXIgNAogICAgaXRvYgogICAgY292ZXIgMwogICAgaXRvYgogICAgY292ZXIgMgogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgY292ZXIgMgogICAgc3dhcAogICAgYnl0ZSAweDAwMGMKICAgIGNvbmNhdAogICAgZGlnIDEKICAgIGxlbgogICAgaW50IDEyCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIGJ5dGUgMHgwMDEyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYmFyZV9yb3V0aW5nQDg6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTgKICAgIC8vIGNsYXNzIE5lc3RlZFR1cGxlcyhBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IF9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTIKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIGludCAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTI6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTgKICAgIC8vIGNsYXNzIE5lc3RlZFR1cGxlcyhBUkM0Q29udHJhY3QpOgogICAgaW50IDAKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLk5lc3RlZFR1cGxlcy5ydW5fdGVzdHMoKSAtPiB1aW50NjQ6CnJ1bl90ZXN0czoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyMi0yMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBydW5fdGVzdHMoc2VsZikgLT4gYm9vbDoKICAgIHByb3RvIDAgMQogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI0CiAgICAvLyB4ID0gKFN0cmluZygiSGkiKSwgU3RyaW5nKCJUaGVyZSIpKQogICAgYnl0ZSAiSGkiCiAgICBieXRlICJUaGVyZSIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyNQogICAgLy8gYXNzZXJ0IHRlc3Rfc3dhcCh4KSA9PSAoU3RyaW5nKCJUaGVyZSIpLCBTdHJpbmcoIkhpIikpCiAgICBjYWxsc3ViIHRlc3Rfc3dhcAogICAgc3dhcAogICAgYnl0ZSAiVGhlcmUiCiAgICA9PQogICAgc3dhcAogICAgYnl0ZSAiSGkiCiAgICA9PQogICAgJiYKICAgIGFzc2VydAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI0CiAgICAvLyB4ID0gKFN0cmluZygiSGkiKSwgU3RyaW5nKCJUaGVyZSIpKQogICAgYnl0ZSAiSGkiCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MjcKICAgIC8vIHogPSAoVUludDY0KDApLCBVSW50NjQoMiksIHkpCiAgICBpbnQgMAogICAgaW50IDIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyNgogICAgLy8geSA9IChVSW50NjQoMSksIHgpCiAgICBpbnQgMQogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjI0CiAgICAvLyB4ID0gKFN0cmluZygiSGkiKSwgU3RyaW5nKCJUaGVyZSIpKQogICAgYnl0ZSAiSGkiCiAgICBieXRlICJUaGVyZSIKICAgIGR1cAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjMzCiAgICAvLyAoYSwgYiwgKGMsIGQsIChlLCkpKSA9IHRlc3RfcmVhcnJhbmdlKHhbMF0sIF9iPXhbMV0sIGFyZ3M9eikKICAgIGNhbGxzdWIgdGVzdF9yZWFycmFuZ2UKICAgIGNvdmVyIDQKICAgIGNvdmVyIDMKICAgIGNvdmVyIDIKICAgIHN3YXAKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTozNAogICAgLy8gYXNzZXJ0IChhLCBiKSA9PSAoU3RyaW5nKCJIaSIpLCBVSW50NjQoMCkpCiAgICBieXRlICJIaSIKICAgID09CiAgICBzd2FwCiAgICAhCiAgICAmJgogICAgYXNzZXJ0CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MzUKICAgIC8vIGFzc2VydCAoYywgZCkgPT0gKFVJbnQ2NCgyKSwgVUludDY0KDEpKQogICAgaW50IDIKICAgID09CiAgICBzd2FwCiAgICBpbnQgMQogICAgPT0KICAgICYmCiAgICBhc3NlcnQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTozNgogICAgLy8gYXNzZXJ0IGUgPT0gU3RyaW5nKCJUaGVyZSIpCiAgICBieXRlICJUaGVyZSIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTozOAogICAgLy8gdGVzdF9pbnRyaW5zaWNzKFVJbnQ2NCgxKSwgVUludDY0KDIpKQogICAgaW50IDEKICAgIGludCAyCiAgICBjYWxsc3ViIHRlc3RfaW50cmluc2ljcwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjQwCiAgICAvLyB0ZXN0X25lc3RlZF9zaW5nbGVzKFVJbnQ2NCgxKSwgcmVhc3NpZ249VHJ1ZSkKICAgIGludCAxCiAgICBkdXAKICAgIGNhbGxzdWIgdGVzdF9uZXN0ZWRfc2luZ2xlcwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjQxCiAgICAvLyB0ZXN0X25lc3RlZF9zaW5nbGVzKFVJbnQ2NCgxKSwgcmVhc3NpZ249RmFsc2UpCiAgICBpbnQgMQogICAgaW50IDAKICAgIGNhbGxzdWIgdGVzdF9uZXN0ZWRfc2luZ2xlcwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjQ2CiAgICAvLyB0ZXN0X25lc3RlZF9pdGVyYXRpb24oKQogICAgY2FsbHN1YiB0ZXN0X25lc3RlZF9pdGVyYXRpb24KICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo0OAogICAgLy8gc2VsZi50ZXN0X3NpbmdsZV9ldmFsdWF0aW9uX25lc3RlZCgpCiAgICBjYWxsc3ViIHRlc3Rfc2luZ2xlX2V2YWx1YXRpb25fbmVzdGVkCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NDkKICAgIC8vIHJldHVybiBUcnVlCiAgICBpbnQgMQogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50dXBsZV9zdXBwb3J0Lm5lc3RlZF90dXBsZXMudGVzdF9zd2FwKGFyZ3MuMDogYnl0ZXMsIGFyZ3MuMTogYnl0ZXMpIC0+IGJ5dGVzLCBieXRlczoKdGVzdF9zd2FwOgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjkwLTkxCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIHRlc3Rfc3dhcChhcmdzOiB0dXBsZVtTdHJpbmcsIFN0cmluZ10pIC0+IHR1cGxlW1N0cmluZywgU3RyaW5nXToKICAgIHByb3RvIDIgMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjkzCiAgICAvLyByZXR1cm4gYiwgYQogICAgZnJhbWVfZGlnIC0xCiAgICBmcmFtZV9kaWcgLTIKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLnRlc3RfcmVhcnJhbmdlKF9hOiBieXRlcywgYXJncy4wOiB1aW50NjQsIGFyZ3MuMTogdWludDY0LCBhcmdzLjIuMDogdWludDY0LCBhcmdzLjIuMS4wOiBieXRlcywgYXJncy4yLjEuMTogYnl0ZXMsIF9iOiBieXRlcykgLT4gYnl0ZXMsIHVpbnQ2NCwgdWludDY0LCB1aW50NjQsIGJ5dGVzOgp0ZXN0X3JlYXJyYW5nZToKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo4MS04NAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiB0ZXN0X3JlYXJyYW5nZSgKICAgIC8vICAgICBfYTogU3RyaW5nLCBhcmdzOiB0dXBsZVtVSW50NjQsIFVJbnQ2NCwgdHVwbGVbVUludDY0LCB0dXBsZVtTdHJpbmcsIFN0cmluZ11dXSwgX2I6IFN0cmluZwogICAgLy8gKSAtPiB0dXBsZVtTdHJpbmcsIFVJbnQ2NCwgdHVwbGVbVUludDY0LCBVSW50NjQsIHR1cGxlW1N0cmluZ11dXToKICAgIHByb3RvIDcgNQogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5Ojg3CiAgICAvLyByZXR1cm4gZCwgYSwgKGIsIGMsIChlLCkpCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtNgogICAgZnJhbWVfZGlnIC01CiAgICBmcmFtZV9kaWcgLTQKICAgIGZyYW1lX2RpZyAtMgogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50dXBsZV9zdXBwb3J0Lm5lc3RlZF90dXBsZXMudGVzdF9pbnRyaW5zaWNzKG51bTE6IHVpbnQ2NCwgbnVtMjogdWludDY0KSAtPiB2b2lkOgp0ZXN0X2ludHJpbnNpY3M6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6OTYtOTcKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgdGVzdF9pbnRyaW5zaWNzKG51bTE6IFVJbnQ2NCwgbnVtMjogVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6OTgKICAgIC8vIG50ID0gKFVJbnQ2NCgxKSwgb3AuYWRkdyhudW0xLCBudW0yKSwgVUludDY0KDQyKSkKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICBhZGR3CiAgICBzd2FwCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTAxCiAgICAvLyBhc3NlcnQgbnRbMV0gPT0gKDAsIG51bTEgKyBudW0yKSAgIyB0eXBlOiBpZ25vcmVbY29tcGFyaXNvbi1vdmVybGFwXQogICAgIQogICAgc3dhcAogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgICsKICAgID09CiAgICBkdXAyCiAgICAmJgogICAgYXNzZXJ0CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTAyCiAgICAvLyBhc3NlcnQgbnRbMV1bOjFdID09ICgwLCkgICMgdHlwZTogaWdub3JlW2NvbXBhcmlzb24tb3ZlcmxhcF0KICAgIHN3YXAKICAgIGFzc2VydAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjEwMwogICAgLy8gYXNzZXJ0IG50WzFdWzE6XSA9PSAobnVtMSArIG51bTIsKQogICAgYXNzZXJ0CiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnR1cGxlX3N1cHBvcnQubmVzdGVkX3R1cGxlcy50ZXN0X25lc3RlZF9zaW5nbGVzKG9uZTogdWludDY0LCByZWFzc2lnbjogdWludDY0KSAtPiB2b2lkOgp0ZXN0X25lc3RlZF9zaW5nbGVzOgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjEzMS0xMzIKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgdGVzdF9uZXN0ZWRfc2luZ2xlcyhvbmU6IFVJbnQ2NCwgKiwgcmVhc3NpZ246IGJvb2wpIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxMzQKICAgIC8vIChVSW50NjQoMCksKSwKICAgIGludCAwCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTM2CiAgICAvLyAoVUludDY0KDIpLCksCiAgICBpbnQgMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE0MAogICAgLy8gYXNzZXJ0IHNbMV1bMF0gPT0gMQogICAgZnJhbWVfZGlnIC0yCiAgICBpbnQgMQogICAgPT0KICAgIGFzc2VydAogICAgZnJhbWVfZGlnIC0yCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTQ1CiAgICAvLyBpZiByZWFzc2lnbjoKICAgIGZyYW1lX2RpZyAtMQogICAgYnogdGVzdF9uZXN0ZWRfc2luZ2xlc19hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNDcKICAgIC8vIChVSW50NjQoMyksKSwKICAgIGludCAzCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTQ2LTE1MAogICAgLy8gcyA9ICgKICAgIC8vICAgICAoVUludDY0KDMpLCksCiAgICAvLyAgICAgKFVJbnQ2NCg0KSwpLAogICAgLy8gICAgIChVSW50NjQoNSksKSwKICAgIC8vICkKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE0OAogICAgLy8gKFVJbnQ2NCg0KSwpLAogICAgaW50IDQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNDYtMTUwCiAgICAvLyBzID0gKAogICAgLy8gICAgIChVSW50NjQoMyksKSwKICAgIC8vICAgICAoVUludDY0KDQpLCksCiAgICAvLyAgICAgKFVJbnQ2NCg1KSwpLAogICAgLy8gKQogICAgZnJhbWVfYnVyeSAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTQ5CiAgICAvLyAoVUludDY0KDUpLCksCiAgICBpbnQgNQogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE0Ni0xNTAKICAgIC8vIHMgPSAoCiAgICAvLyAgICAgKFVJbnQ2NCgzKSwpLAogICAgLy8gICAgIChVSW50NjQoNCksKSwKICAgIC8vICAgICAoVUludDY0KDUpLCksCiAgICAvLyApCiAgICBmcmFtZV9idXJ5IDEKCnRlc3RfbmVzdGVkX3NpbmdsZXNfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE1MQogICAgLy8gYXNzZXJ0IHNbMF1bMF0gPT0gKDMgaWYgcmVhc3NpZ24gZWxzZSAwKQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnQgMwogICAgKgogICAgZnJhbWVfZGlnIDAKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNTMKICAgIC8vIGFzc2VydCB0bXAgPT0gKDUgaWYgcmVhc3NpZ24gZWxzZSAyKQogICAgaW50IDIKICAgIGludCA1CiAgICBmcmFtZV9kaWcgLTEKICAgIHNlbGVjdAogICAgZnJhbWVfZGlnIDEKICAgIGRpZyAxCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTU3CiAgICAvLyBzMSArPSBvbmUKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGZyYW1lX2RpZyAtMgogICAgKwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE1OAogICAgLy8gYXNzZXJ0IHMxID09ICg1IGlmIHJlYXNzaWduIGVsc2UgMikKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNTkKICAgIC8vIGFzc2VydCBzWzFdWzBdID09ICg0IGlmIHJlYXNzaWduIGVsc2UgMSkKICAgIGludCAxCiAgICBpbnQgNAogICAgZnJhbWVfZGlnIC0xCiAgICBzZWxlY3QKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLnRlc3RfbmVzdGVkX2l0ZXJhdGlvbigpIC0+IHZvaWQ6CnRlc3RfbmVzdGVkX2l0ZXJhdGlvbjoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNzUtMTc2CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIHRlc3RfbmVzdGVkX2l0ZXJhdGlvbigpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIGJ5dGUgIiIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNzkKICAgIC8vIHRvdGFsID0gVUludDY0KDApCiAgICBpbnQgMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE3NwogICAgLy8geCA9IFVJbnQ2NCgxKQogICAgaW50IDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNzgKICAgIC8vIHkgPSBVSW50NjQoMikKICAgIGludCAyCiAgICBpbnQgMAoKdGVzdF9uZXN0ZWRfaXRlcmF0aW9uX2Zvcl9ib2R5QDE6CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTgzCiAgICAvLyB0b3RhbCArPSBhICsgYgogICAgZnJhbWVfZGlnIDIKICAgIHVuY292ZXIgMgogICAgKwogICAgZnJhbWVfZGlnIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE4MQogICAgLy8gZm9yIHQgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBzd2l0Y2ggdGVzdF9uZXN0ZWRfaXRlcmF0aW9uX2Zvcl9oZWFkZXJfMUAzIHRlc3RfbmVzdGVkX2l0ZXJhdGlvbl9mb3JfaGVhZGVyXzJANCB0ZXN0X25lc3RlZF9pdGVyYXRpb25fZm9yX2hlYWRlcl8zQDUKICAgIGIgdGVzdF9uZXN0ZWRfaXRlcmF0aW9uX2FmdGVyX2ZvckA2Cgp0ZXN0X25lc3RlZF9pdGVyYXRpb25fZm9yX2hlYWRlcl8xQDM6CiAgICBpbnQgMQogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE3OAogICAgLy8geSA9IFVJbnQ2NCgyKQogICAgaW50IDIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxODEKICAgIC8vIGZvciB0IGluICgoeCwgeSksICh5LCB4KSwgKHgsIHgpLCAoeSwgeSkpOgogICAgZnJhbWVfYnVyeSAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTc3CiAgICAvLyB4ID0gVUludDY0KDEpCiAgICBpbnQgMQogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE4MQogICAgLy8gZm9yIHQgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBzd2FwCiAgICBiIHRlc3RfbmVzdGVkX2l0ZXJhdGlvbl9mb3JfYm9keUAxCgp0ZXN0X25lc3RlZF9pdGVyYXRpb25fZm9yX2hlYWRlcl8yQDQ6CiAgICBpbnQgMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE3NwogICAgLy8geCA9IFVJbnQ2NCgxKQogICAgaW50IDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxODEKICAgIC8vIGZvciB0IGluICgoeCwgeSksICh5LCB4KSwgKHgsIHgpLCAoeSwgeSkpOgogICAgZnJhbWVfYnVyeSAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTc3CiAgICAvLyB4ID0gVUludDY0KDEpCiAgICBpbnQgMQogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE4MQogICAgLy8gZm9yIHQgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBzd2FwCiAgICBiIHRlc3RfbmVzdGVkX2l0ZXJhdGlvbl9mb3JfYm9keUAxCgp0ZXN0X25lc3RlZF9pdGVyYXRpb25fZm9yX2hlYWRlcl8zQDU6CiAgICBpbnQgMwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE3OAogICAgLy8geSA9IFVJbnQ2NCgyKQogICAgaW50IDIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxODEKICAgIC8vIGZvciB0IGluICgoeCwgeSksICh5LCB4KSwgKHgsIHgpLCAoeSwgeSkpOgogICAgZnJhbWVfYnVyeSAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTc4CiAgICAvLyB5ID0gVUludDY0KDIpCiAgICBpbnQgMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE4MQogICAgLy8gZm9yIHQgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBzd2FwCiAgICBiIHRlc3RfbmVzdGVkX2l0ZXJhdGlvbl9mb3JfYm9keUAxCgp0ZXN0X25lc3RlZF9pdGVyYXRpb25fYWZ0ZXJfZm9yQDY6CiAgICBpbnQgMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE3NwogICAgLy8geCA9IFVJbnQ2NCgxKQogICAgaW50IDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxODUKICAgIC8vIGZvciBhLCBiIGluICgoeCwgeSksICh5LCB4KSwgKHgsIHgpLCAoeSwgeSkpOgogICAgZnJhbWVfYnVyeSAwCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTc4CiAgICAvLyB5ID0gVUludDY0KDIpCiAgICBpbnQgMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE4NQogICAgLy8gZm9yIGEsIGIgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBzd2FwCgp0ZXN0X25lc3RlZF9pdGVyYXRpb25fZm9yX2JvZHlANzoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxODYKICAgIC8vIHRvdGFsICs9IGEgKyBiCiAgICBmcmFtZV9kaWcgMAogICAgdW5jb3ZlciAyCiAgICArCiAgICBmcmFtZV9kaWcgMQogICAgKwogICAgZnJhbWVfYnVyeSAxCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTg1CiAgICAvLyBmb3IgYSwgYiBpbiAoKHgsIHkpLCAoeSwgeCksICh4LCB4KSwgKHksIHkpKToKICAgIHN3aXRjaCB0ZXN0X25lc3RlZF9pdGVyYXRpb25fZm9yX2hlYWRlcl8xQDkgdGVzdF9uZXN0ZWRfaXRlcmF0aW9uX2Zvcl9oZWFkZXJfMkAxMCB0ZXN0X25lc3RlZF9pdGVyYXRpb25fZm9yX2hlYWRlcl8zQDExCiAgICBiIHRlc3RfbmVzdGVkX2l0ZXJhdGlvbl9hZnRlcl9mb3JAMTIKCnRlc3RfbmVzdGVkX2l0ZXJhdGlvbl9mb3JfaGVhZGVyXzFAOToKICAgIGludCAxCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTc4CiAgICAvLyB5ID0gVUludDY0KDIpCiAgICBpbnQgMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE4NQogICAgLy8gZm9yIGEsIGIgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNzcKICAgIC8vIHggPSBVSW50NjQoMSkKICAgIGludCAxCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTg1CiAgICAvLyBmb3IgYSwgYiBpbiAoKHgsIHkpLCAoeSwgeCksICh4LCB4KSwgKHksIHkpKToKICAgIHN3YXAKICAgIGIgdGVzdF9uZXN0ZWRfaXRlcmF0aW9uX2Zvcl9ib2R5QDcKCnRlc3RfbmVzdGVkX2l0ZXJhdGlvbl9mb3JfaGVhZGVyXzJAMTA6CiAgICBpbnQgMgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE3NwogICAgLy8geCA9IFVJbnQ2NCgxKQogICAgaW50IDEKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxODUKICAgIC8vIGZvciBhLCBiIGluICgoeCwgeSksICh5LCB4KSwgKHgsIHgpLCAoeSwgeSkpOgogICAgZnJhbWVfYnVyeSAwCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTc3CiAgICAvLyB4ID0gVUludDY0KDEpCiAgICBpbnQgMQogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE4NQogICAgLy8gZm9yIGEsIGIgaW4gKCh4LCB5KSwgKHksIHgpLCAoeCwgeCksICh5LCB5KSk6CiAgICBzd2FwCiAgICBiIHRlc3RfbmVzdGVkX2l0ZXJhdGlvbl9mb3JfYm9keUA3Cgp0ZXN0X25lc3RlZF9pdGVyYXRpb25fZm9yX2hlYWRlcl8zQDExOgogICAgaW50IDMKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxNzgKICAgIC8vIHkgPSBVSW50NjQoMikKICAgIGludCAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6MTg1CiAgICAvLyBmb3IgYSwgYiBpbiAoKHgsIHkpLCAoeSwgeCksICh4LCB4KSwgKHksIHkpKToKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjE3OAogICAgLy8geSA9IFVJbnQ2NCgyKQogICAgaW50IDIKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxODUKICAgIC8vIGZvciBhLCBiIGluICgoeCwgeSksICh5LCB4KSwgKHgsIHgpLCAoeSwgeSkpOgogICAgc3dhcAogICAgYiB0ZXN0X25lc3RlZF9pdGVyYXRpb25fZm9yX2JvZHlANwoKdGVzdF9uZXN0ZWRfaXRlcmF0aW9uX2FmdGVyX2ZvckAxMjoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxODgKICAgIC8vIGFzc2VydCB0b3RhbCAvLyA4ID09IDMKICAgIGZyYW1lX2RpZyAxCiAgICBpbnQgOAogICAgLwogICAgaW50IDMKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLk5lc3RlZFR1cGxlcy50ZXN0X3NpbmdsZV9ldmFsdWF0aW9uX25lc3RlZCgpIC0+IHZvaWQ6CnRlc3Rfc2luZ2xlX2V2YWx1YXRpb25fbmVzdGVkOgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjczLTc0CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIHRlc3Rfc2luZ2xlX2V2YWx1YXRpb25fbmVzdGVkKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo3NQogICAgLy8gc2VsZi5idWlsZF9uZXN0ZWRfY2FsbF9jb3VudCA9IFVJbnQ2NCgwKQogICAgYnl0ZSAiYnVpbGRfbmVzdGVkX2NhbGxfY291bnQiCiAgICBpbnQgMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo3NgogICAgLy8gcmVzdWx0ID0gc2VsZi5idWlsZF9uZXN0ZWQoKSBvciBzZWxmLmJ1aWxkX25lc3RlZCgpCiAgICBjYWxsc3ViIGJ1aWxkX25lc3RlZAogICAgcG9wbiAyCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NzcKICAgIC8vIGFzc2VydCByZXN1bHRbMF1bMF0gPT0gImhpIgogICAgYnl0ZSAiaGkiCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NzgKICAgIC8vIGFzc2VydCBzZWxmLmJ1aWxkX25lc3RlZF9jYWxsX2NvdW50ID09IDEKICAgIGludCAwCiAgICBieXRlICJidWlsZF9uZXN0ZWRfY2FsbF9jb3VudCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5idWlsZF9uZXN0ZWRfY2FsbF9jb3VudCBleGlzdHMKICAgIGludCAxCiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnR1cGxlX3N1cHBvcnQubmVzdGVkX3R1cGxlcy5OZXN0ZWRUdXBsZXMuYnVpbGRfbmVzdGVkKCkgLT4gYnl0ZXMsIHVpbnQ2NCwgYnl0ZXM6CmJ1aWxkX25lc3RlZDoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo2OC02OQogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBidWlsZF9uZXN0ZWQoc2VsZikgLT4gdHVwbGVbdHVwbGVbU3RyaW5nLCBVSW50NjRdLCBCeXRlc106CiAgICBwcm90byAwIDMKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo3MAogICAgLy8gc2VsZi5idWlsZF9uZXN0ZWRfY2FsbF9jb3VudCArPSAxCiAgICBpbnQgMAogICAgYnl0ZSAiYnVpbGRfbmVzdGVkX2NhbGxfY291bnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYnVpbGRfbmVzdGVkX2NhbGxfY291bnQgZXhpc3RzCiAgICBpbnQgMQogICAgKwogICAgYnl0ZSAiYnVpbGRfbmVzdGVkX2NhbGxfY291bnQiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjcxCiAgICAvLyByZXR1cm4gKFN0cmluZygiaGkiKSwgVUludDY0KDEpKSwgQnl0ZXMoYiJobW1tIikKICAgIGJ5dGUgImhpIgogICAgaW50IDEKICAgIGJ5dGUgMHg2ODZkNmQ2ZAogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50dXBsZV9zdXBwb3J0Lm5lc3RlZF90dXBsZXMuTmVzdGVkVHVwbGVzLm5lc3RlZF90dXBsZV9wYXJhbXMoYXJncy4wOiBieXRlcywgYXJncy4xLjA6IGJ5dGVzLCBhcmdzLjEuMS4wOiB1aW50NjQpIC0+IGJ5dGVzLCBieXRlcywgdWludDY0OgpuZXN0ZWRfdHVwbGVfcGFyYW1zOgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjUxLTU0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIG5lc3RlZF90dXBsZV9wYXJhbXMoCiAgICAvLyAgICAgc2VsZiwgYXJnczogdHVwbGVbU3RyaW5nLCB0dXBsZVtCeXRlcywgdHVwbGVbVUludDY0XV1dCiAgICAvLyApIC0+IHR1cGxlW0J5dGVzLCB0dXBsZVtTdHJpbmcsIFVJbnQ2NF1dOgogICAgcHJvdG8gMyAzCiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NTYKICAgIC8vIHJldHVybiBiLCAocywgdSkKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTEKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLk5lc3RlZFR1cGxlcy5uYW1lZF90dXBsZShhcmdzLmE6IHVpbnQ2NCwgYXJncy5iOiBieXRlcywgYXJncy5jOiBieXRlcykgLT4gdWludDY0LCBieXRlcywgYnl0ZXM6Cm5hbWVkX3R1cGxlOgogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjU4LTU5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIG5hbWVkX3R1cGxlKHNlbGYsIGFyZ3M6IENoaWxkKSAtPiBDaGlsZDoKICAgIHByb3RvIDMgMwogICAgLy8gdHVwbGVfc3VwcG9ydC9uZXN0ZWRfdHVwbGVzLnB5OjYxCiAgICAvLyByZXR1cm4gQ2hpbGQoYSwgYiwgYykKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHVwbGVfc3VwcG9ydC5uZXN0ZWRfdHVwbGVzLk5lc3RlZFR1cGxlcy5uZXN0ZWRfbmFtZWRfdHVwbGVfcGFyYW1zKGFyZ3MuZm9vOiB1aW50NjQsIGFyZ3MuZm9vX2FyYzogYnl0ZXMsIGFyZ3MuY2hpbGQuYTogdWludDY0LCBhcmdzLmNoaWxkLmI6IGJ5dGVzLCBhcmdzLmNoaWxkLmM6IGJ5dGVzKSAtPiB1aW50NjQsIGJ5dGVzLCB1aW50NjQsIGJ5dGVzLCBieXRlczoKbmVzdGVkX25hbWVkX3R1cGxlX3BhcmFtczoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo2My02NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBuZXN0ZWRfbmFtZWRfdHVwbGVfcGFyYW1zKHNlbGYsIGFyZ3M6IFBhcmVudCkgLT4gUGFyZW50OgogICAgcHJvdG8gNSA1CiAgICAvLyB0dXBsZV9zdXBwb3J0L25lc3RlZF90dXBsZXMucHk6NjYKICAgIC8vIHJldHVybiBQYXJlbnQoZm9vLCBmb29fYXJjLCBDaGlsZChhLCBiLCBjKSkKICAgIGZyYW1lX2RpZyAtNQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnR1cGxlX3N1cHBvcnQubmVzdGVkX3R1cGxlcy5OZXN0ZWRUdXBsZXMuX19pbml0X18oKSAtPiB2b2lkOgpfX2luaXRfXzoKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToxOQogICAgLy8gZGVmIF9faW5pdF9fKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weToyMAogICAgLy8gc2VsZi5idWlsZF9uZXN0ZWRfY2FsbF9jb3VudCA9IFVJbnQ2NCgwKQogICAgYnl0ZSAiYnVpbGRfbmVzdGVkX2NhbGxfY291bnQiCiAgICBpbnQgMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnR1cGxlX3N1cHBvcnQubmVzdGVkX3R1cGxlcy5OZXN0ZWRUdXBsZXMuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "build_nested_call_count": {
                    "type": "uint64",
                    "key": "build_nested_call_count"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "NestedTuples",
        "methods": [
            {
                "name": "run_tests",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "nested_tuple_params",
                "args": [
                    {
                        "type": "(string,(byte[],(uint64)))",
                        "name": "args"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],(string,uint64))"
                }
            },
            {
                "name": "named_tuple",
                "args": [
                    {
                        "type": "(uint64,byte[],string)",
                        "name": "args"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,byte[],string)"
                }
            },
            {
                "name": "nested_named_tuple_params",
                "args": [
                    {
                        "type": "(uint64,uint64,(uint64,byte[],string))",
                        "name": "args"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,(uint64,byte[],string))"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}