{
    "hints": {
        "run_tests()bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnR1cGxlX3N1cHBvcnQubmVzdGVkX3R1cGxlcy5OZXN0ZWRUdXBsZXMuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHR1cGxlX3N1cHBvcnQvbmVzdGVkX3R1cGxlcy5weTo0CiAgICAvLyBjbGFzcyBOZXN0ZWRUdXBsZXMoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "build_nested_call_count": {
                    "type": "uint64",
                    "key": "build_nested_call_count"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "NestedTuples",
        "methods": [
            {
                "name": "run_tests",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "nested_tuple_params",
                "args": [
                    {
                        "type": "(string,(byte[],(uint64)))",
                        "name": "args"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],(string,uint64))"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}