contract TupleComparisons
{
  approval_program(): bool
  {
    test_cases.tuple_support.tuple_comparisons::test_tuple_cmp_eval()
    test_cases.tuple_support.tuple_comparisons::test_tuple_cmp_empty()
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}

subroutine test_tuple_cmp_eval(): void
{
  assert(||('abc' != 'abc', SINGLE_EVAL(id=0, source=test_cases.tuple_support.tuple_comparisons::log_and_return(42u)) == SINGLE_EVAL(id=0, source=test_cases.tuple_support.tuple_comparisons::log_and_return(42u))))
  tmp: bool = &&('abc' == 'abc', SINGLE_EVAL(id=1, source=test_cases.tuple_support.tuple_comparisons::log_and_return(43u)) != SINGLE_EVAL(id=1, source=test_cases.tuple_support.tuple_comparisons::log_and_return(43u)))
  assert(!(tmp))
  assert(||('abc' != 'abc', SINGLE_EVAL(id=2, source=test_cases.tuple_support.tuple_comparisons::log_and_return(44u)) == SINGLE_EVAL(id=2, source=test_cases.tuple_support.tuple_comparisons::log_and_return(44u))))
  tmp: bool = &&('abc' == 'abc', SINGLE_EVAL(id=3, source=test_cases.tuple_support.tuple_comparisons::log_and_return(45u)) != SINGLE_EVAL(id=3, source=test_cases.tuple_support.tuple_comparisons::log_and_return(45u)))
  assert(!(tmp))
  assert(||(1u != 3u, 2u != test_cases.tuple_support.tuple_comparisons::log_and_return(46u)))
  tmp: bool = &&(1u == 3u, 2u == test_cases.tuple_support.tuple_comparisons::log_and_return(47u))
  assert(!(tmp))
}

subroutine test_tuple_cmp_empty(): void
{
  assert(true)
  tmp: bool = false
  assert(!(tmp))
  assert(true)
  tmp: bool = false
  assert(!(tmp))
}

subroutine log_and_return(val: uint64): uint64
{
  log(itob(val))
  return val
}