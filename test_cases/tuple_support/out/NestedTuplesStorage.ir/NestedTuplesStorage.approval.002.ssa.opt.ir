main test_cases.tuple_support.tuple_storage.NestedTuplesStorage.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(0x0000000000000000)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = bytes_encode<((len+uint64[]),uint64)>(encoded_array%0#0, 0u)
        (app_global_put "tup" encoded_for_storage%0#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%0#0) // check self.tup exists
        let (awst_tmp%0#0: Encoded(len+uint64[]), awst_tmp%1#0: uint64) = decode_bytes<(Encoded(len+uint64[]),uint64,)>(maybe_value%0#0)
        let encoded_for_storage%1#0: Encoded((len+uint64[]),uint64) = bytes_encode<((len+uint64[]),uint64)>(encoded_array%0#0, awst_tmp%1#0)
        (app_global_put "glob" encoded_for_storage%1#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%1#0) // check self.tup exists
        let (awst_tmp%2#0: Encoded(len+uint64[]), awst_tmp%3#0: uint64) = decode_bytes<(Encoded(len+uint64[]),uint64,)>(maybe_value%1#0)
        let encoded_for_storage%2#0: Encoded((len+uint64[]),uint64) = bytes_encode<((len+uint64[]),uint64)>(encoded_array%0#0, awst_tmp%3#0)
        (app_global_put "tup" encoded_for_storage%2#0)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@13
    block@4: // abi_routing_L11
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "bootstrap()void" => block@5, * => block@6}
    block@5: // bootstrap_route_L23
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be OptIn && can only call when not creating
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap[routing]()
        goto block@6
    block@6: // switch_case_next_L11
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: bool = (txn ApplicationID)
        (assert tmp%10#0)
        let tmp%11#0: bytes = (txna ApplicationArgs 0)
        switch tmp%11#0 {method "mutate_tuple(uint64)void" => block@8, method "mutate_box(uint64)void" => block@9, method "mutate_global(uint64)void" => block@10, method "mutate_local(uint64)void" => block@11, * => block@12}
    block@8: // mutate_tuple_route_L28
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple[routing]()
        goto block@12
    block@9: // mutate_box_route_L32
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box[routing]()
        goto block@12
    block@10: // mutate_global_route_L36
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global[routing]()
        goto block@12
    block@11: // mutate_local_route_L40
        test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local[routing]()
        goto block@12
    block@12: // after_if_else_L11
        fail
    block@13: // __algopy_default_create_L1
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (! tmp%14#0)
        let tmp%16#0: bool = (&& tmp%13#0 tmp%15#0)
        (assert tmp%16#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.bootstrap[routing]() -> void:
    block@0: // L23
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(0x0000000000000000)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%0#0) // check self.tup exists
        let (awst_tmp%0#0: Encoded(len+uint64[]), awst_tmp%1#0: uint64) = decode_bytes<(Encoded(len+uint64[]),uint64,)>(maybe_value%0#0)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = bytes_encode<((len+uint64[]),uint64)>(encoded_array%0#0, awst_tmp%1#0)
        box_write("box", encoded_for_storage%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%1#0) // check self.tup exists
        let (awst_tmp%2#0: Encoded(len+uint64[]), awst_tmp%3#0: uint64) = decode_bytes<(Encoded(len+uint64[]),uint64,)>(maybe_value%1#0)
        let tmp%0#0: account = (txn Sender)
        let encoded_for_storage%1#0: Encoded((len+uint64[]),uint64) = bytes_encode<((len+uint64[]),uint64)>(encoded_array%0#0, awst_tmp%3#0)
        (app_local_put tmp%0#0 "loc" encoded_for_storage%1#0)
        exit 1u

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_tuple[routing]() -> void:
    block@0: // L28
        let val#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "tup")
        (assert maybe_exists%0#0) // check self.tup exists
        let (tmp%0#0: Encoded(len+uint64[]), tmp%1#0: uint64) = decode_bytes<(Encoded(len+uint64[]),uint64,)>(maybe_value%0#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(val#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat tmp%0#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = bytes_encode<((len+uint64[]),uint64)>(replace%0#0, tmp%1#0)
        (app_global_put "tup" encoded_for_storage%0#0)
        exit 1u

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_box[routing]() -> void:
    block@0: // L32
        let val#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let storage_value%0#0: bytes = box_read("box")
        let (tmp%0#0: Encoded(len+uint64[]), tmp%1#0: uint64) = decode_bytes<(Encoded(len+uint64[]),uint64,)>(storage_value%0#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(val#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat tmp%0#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = bytes_encode<((len+uint64[]),uint64)>(replace%0#0, tmp%1#0)
        box_write("box", encoded_for_storage%0#0)
        exit 1u

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_global[routing]() -> void:
    block@0: // L36
        let val#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "glob")
        (assert maybe_exists%0#0) // check self.glob exists
        let (tmp%0#0: Encoded(len+uint64[]), tmp%1#0: uint64) = decode_bytes<(Encoded(len+uint64[]),uint64,)>(maybe_value%0#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(val#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat tmp%0#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = bytes_encode<((len+uint64[]),uint64)>(replace%0#0, tmp%1#0)
        (app_global_put "glob" encoded_for_storage%0#0)
        exit 1u

subroutine test_cases.tuple_support.tuple_storage.NestedTuplesStorage.mutate_local[routing]() -> void:
    block@0: // L40
        let val#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#0 0u "loc")
        (assert maybe_exists%0#0) // check self.loc exists for account
        let (tmp%1#0: Encoded(len+uint64[]), tmp%2#0: uint64) = decode_bytes<(Encoded(len+uint64[]),uint64,)>(maybe_value%0#0)
        let tmp%3#0: Encoded(uint64[]) = bytes_encode<uint64[]>(val#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat tmp%1#0 tmp%3#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%1#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let encoded_for_storage%0#0: Encoded((len+uint64[]),uint64) = bytes_encode<((len+uint64[]),uint64)>(replace%0#0, tmp%2#0)
        (app_local_put tmp%0#0 "loc" encoded_for_storage%0#0)
        exit 1u