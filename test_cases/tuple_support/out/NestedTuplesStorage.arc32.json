{
    "hints": {
        "bootstrap()void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "mutate_tuple(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mutate_box(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mutate_global(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mutate_local(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "glob": {
                    "type": "bytes",
                    "key": "glob"
                },
                "tup": {
                    "type": "bytes",
                    "key": "tup"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "loc": {
                    "type": "bytes",
                    "key": "loc"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "NestedTuplesStorage",
        "methods": [
            {
                "name": "bootstrap",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "mutate_tuple",
                "args": [
                    {
                        "type": "uint64",
                        "name": "val"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "mutate_box",
                "args": [
                    {
                        "type": "uint64",
                        "name": "val"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "mutate_global",
                "args": [
                    {
                        "type": "uint64",
                        "name": "val"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "mutate_local",
                "args": [
                    {
                        "type": "uint64",
                        "name": "val"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}