// Op                                                                                 Stack (out)
// test_cases.tuple_support.tuple_support.TupleSupport.approval_program() -> uint64:
subroutine main:
    main_block@0:
        txn ApplicationID                                                             tmp%0#0
        l-load tmp%0#0 0                                                              tmp%0#0
        bz main_call___init__@1 ; b main_after_if_else@2

    main_call___init__@1:
        // tuple_support/tuple_support.py:6
        // self.state = UInt64(0)
        byte "state"                                                                  "state"
        int 0                                                                         "state",0
        app_global_put
        b main_after_if_else@2

    main_after_if_else@2:
        // tuple_support/tuple_support.py:9
        // total = add_three_values((UInt64(101), UInt64(102), UInt64(103)))
        int 101                                                                       101
        int 102                                                                       101,102
        int 103                                                                       101,102,103
        callsub add_three_values                                                      total#0
        // tuple_support/tuple_support.py:10
        // log(total)
        l-load total#0 0                                                              total#0
        itob                                                                          tmp%2#0
        l-load tmp%2#0 0                                                              tmp%2#0
        log
        // tuple_support/tuple_support.py:11
        // (a, b) = (UInt64(1), UInt64(2))
        int 1                                                                         1
        int 2                                                                         1,2
        // tuple_support/tuple_support.py:12
        // (did_overflow, self.state) = op.addw(a, b)
        addw                                                                          did_overflow#0,result.1#0
        byte "state"                                                                  did_overflow#0,result.1#0,"state"
        l-load-copy result.1#0 1                                                      did_overflow#0,result.1#0,"state",result.1#0 (copy)
        app_global_put                                                                did_overflow#0,result.1#0
        // tuple_support/tuple_support.py:13
        // assert not did_overflow, "overflow!"
        l-load-copy did_overflow#0 1                                                  did_overflow#0,result.1#0,did_overflow#0 (copy)
        !                                                                             did_overflow#0,result.1#0,tmp%5#0
        l-load tmp%5#0 0                                                              did_overflow#0,result.1#0,tmp%5#0
        assert // overflow!                                                           did_overflow#0,result.1#0
        // tuple_support/tuple_support.py:125
        // result = a + b
        byte 0x48656c6c6f2c20776f726c6421                                             did_overflow#0,result.1#0,0x48656c6c6f2c20776f726c6421
        // tuple_support/tuple_support.py:34
        // log(bytes_combine((Bytes(b"Hello, "), Bytes(b"world!"))))
        log                                                                           did_overflow#0,result.1#0
        // tuple_support/tuple_support.py:35
        // max_uint64 = UInt64(2**64 - 1)
        int 18446744073709551615                                                      did_overflow#0,result.1#0,18446744073709551615
        int 18446744073709551615                                                      did_overflow#0,result.1#0,18446744073709551615,18446744073709551615
        // tuple_support/tuple_support.py:36
        // hi, mid, lo = addw2(op.addw(max_uint64, max_uint64), op.addw(a, b))
        addw                                                                          did_overflow#0,result.1#0,a.0#0,a.1#0
        // tuple_support/tuple_support.py:151
        // lo_carry, c_lo = op.addw(a_lo, b_lo)
        l-load a.1#0 0                                                                did_overflow#0,result.1#0,a.0#0,a.1#0
        l-load result.1#0 2                                                           did_overflow#0,a.0#0,a.1#0,result.1#0
        addw                                                                          did_overflow#0,a.0#0,lo_carry#0,c_lo#0
        // tuple_support/tuple_support.py:152
        // hi_carry1, c_mid = op.addw(a_hi, b_hi)
        l-load a.0#0 2                                                                did_overflow#0,lo_carry#0,c_lo#0,a.0#0
        l-load did_overflow#0 3                                                       lo_carry#0,c_lo#0,a.0#0,did_overflow#0
        addw                                                                          lo_carry#0,c_lo#0,hi_carry1#0,c_mid#0
        // tuple_support/tuple_support.py:153
        // hi_carry2, c_mid = op.addw(c_mid, lo_carry)
        l-load c_mid#0 0                                                              lo_carry#0,c_lo#0,hi_carry1#0,c_mid#0
        l-load lo_carry#0 3                                                           c_lo#0,hi_carry1#0,c_mid#0,lo_carry#0
        addw                                                                          c_lo#0,hi_carry1#0,hi_carry2#0,c_mid#0
        // tuple_support/tuple_support.py:154
        // did_overflow, c_hi = op.addw(hi_carry1, hi_carry2)
        l-load hi_carry1#0 2                                                          c_lo#0,hi_carry2#0,c_mid#0,hi_carry1#0
        l-load hi_carry2#0 2                                                          c_lo#0,c_mid#0,hi_carry1#0,hi_carry2#0
        addw                                                                          c_lo#0,c_mid#0,did_overflow#0,c_hi#0
        // tuple_support/tuple_support.py:155
        // assert not did_overflow, "is such a thing even possible? 👽"
        l-load did_overflow#0 1                                                       c_lo#0,c_mid#0,c_hi#0,did_overflow#0
        !                                                                             c_lo#0,c_mid#0,c_hi#0,tmp%8#1
        l-load tmp%8#1 0                                                              c_lo#0,c_mid#0,c_hi#0,tmp%8#1
        assert // is such a thing even possible? 👽                                    c_lo#0,c_mid#0,c_hi#0
        // tuple_support/tuple_support.py:37
        // log(hi)
        l-load c_hi#0 0                                                               c_lo#0,c_mid#0,c_hi#0
        itob                                                                          c_lo#0,c_mid#0,tmp%29#0
        l-load tmp%29#0 0                                                             c_lo#0,c_mid#0,tmp%29#0
        log                                                                           c_lo#0,c_mid#0
        // tuple_support/tuple_support.py:38
        // log(mid)
        l-load c_mid#0 0                                                              c_lo#0,c_mid#0
        itob                                                                          c_lo#0,tmp%30#0
        l-load tmp%30#0 0                                                             c_lo#0,tmp%30#0
        log                                                                           c_lo#0
        // tuple_support/tuple_support.py:39
        // log(lo)
        l-load c_lo#0 0                                                               c_lo#0
        itob                                                                          tmp%31#0
        l-load tmp%31#0 0                                                             tmp%31#0
        log
        // tuple_support/tuple_support.py:132
        // result = Bytes()
        byte 0x                                                                       0x
        v-store result#1
        // tuple_support/tuple_support.py:133
        // for _i in urange(count):
        int 0                                                                         0
        l-store value_internal%0#0 0                                                  value_internal%0#0
        l-load value_internal%0#0 0                                                   value_internal%0#0
        v-store _i#0
        b main_for_header@24

    main_for_header@24:
        // tuple_support/tuple_support.py:133
        // for _i in urange(count):
        v-load _i#0                                                                   _i#0
        // tuple_support/tuple_support.py:40
        // log(bytes_multiply((Bytes(b"na"), UInt64(5))))
        int 5                                                                         _i#0,5
        // tuple_support/tuple_support.py:133
        // for _i in urange(count):
        <                                                                             continue_looping%0#0
        l-load continue_looping%0#0 0                                                 continue_looping%0#0
        bz main_after_for@27 ; b main_for_body@25

    main_for_body@25:
        // tuple_support/tuple_support.py:134
        // result += b
        v-load result#1                                                               result#1
        // tuple_support/tuple_support.py:40
        // log(bytes_multiply((Bytes(b"na"), UInt64(5))))
        byte 0x6e61                                                                   result#1,0x6e61
        // tuple_support/tuple_support.py:134
        // result += b
        concat                                                                        result#1
        v-store result#1
        // tuple_support/tuple_support.py:133
        // for _i in urange(count):
        v-load _i#0                                                                   _i#0
        int 1                                                                         _i#0,1
        +                                                                             value_internal%0#0
        l-load value_internal%0#0 0                                                   value_internal%0#0
        v-store _i#0
        b main_for_header@24

    main_after_for@27:
        // tuple_support/tuple_support.py:40
        // log(bytes_multiply((Bytes(b"na"), UInt64(5))))
        v-load result#1                                                               result#1
        log
        // tuple_support/tuple_support.py:44
        // UInt64(1),
        int 1                                                                         1
        // tuple_support/tuple_support.py:45
        // UInt64(2),
        int 2                                                                         1,2
        // tuple_support/tuple_support.py:46
        // UInt64(3),
        int 3                                                                         1,2,3
        // tuple_support/tuple_support.py:171
        // assert add_three_values(one_to_three) == values[0] + values[1] + values[2]
        callsub add_three_values                                                      tmp%0#6
        l-load tmp%0#6 0                                                              tmp%0#6
        int 6                                                                         tmp%0#6,6
        ==                                                                            tmp%3#3
        l-load tmp%3#3 0                                                              tmp%3#3
        assert
        // tuple_support/tuple_support.py:90
        // log("non_empty_tuple called")
        byte "non_empty_tuple called"                                                 "non_empty_tuple called"
        log
        // tuple_support/tuple_support.py:56
        // log("not empty")
        byte "not empty"                                                              "not empty"
        log
        // tuple_support/tuple_support.py:84
        // log("get_uint_with_side_effect called")
        byte "get_uint_with_side_effect called"                                       "get_uint_with_side_effect called"
        log
        // tuple_support/tuple_support.py:58
        // log("not empty2")
        byte "not empty2"                                                             "not empty2"
        log
        // tuple_support/tuple_support.py:65
        // return a + b
        int 3                                                                         3
        return


// test_cases.tuple_support.tuple_support.add_three_values(values.0: uint64, values.1: uint64, values.2: uint64) -> uint64:
subroutine add_three_values:
    add_three_values_block@0:                                                         (𝕡) values.0#0,values.1#0,values.2#0 |
        // tuple_support/tuple_support.py:140
        // total = UInt64(0)
        int 0                                                                         (𝕡) values.0#0,values.1#0,values.2#0 | 0
        v-store total#0                                                               (𝕡) values.0#0,values.1#0,values.2#0 |
        int 0                                                                         (𝕡) values.0#0,values.1#0,values.2#0 | 0
        v-store loop_counter%0#0                                                      (𝕡) values.0#0,values.1#0,values.2#0 |
        p-load values.0#0                                                             (𝕡) values.0#0,values.1#0,values.2#0 | values.0#0 (copy)
        v-store value#1                                                               (𝕡) values.0#0,values.1#0,values.2#0 |
        b add_three_values_for_body@1                                                 (𝕡) values.0#0,values.1#0,values.2#0 |

    add_three_values_for_body@1:                                                      (𝕡) values.0#0,values.1#0,values.2#0 |
        // tuple_support/tuple_support.py:142
        // total += value
        v-load total#0                                                                (𝕡) values.0#0,values.1#0,values.2#0 | total#0
        v-load value#1                                                                (𝕡) values.0#0,values.1#0,values.2#0 | total#0,value#1
        +                                                                             (𝕡) values.0#0,values.1#0,values.2#0 | total#0
        v-store total#0                                                               (𝕡) values.0#0,values.1#0,values.2#0 |
        // tuple_support/tuple_support.py:141
        // for value in values:
        v-load loop_counter%0#0                                                       (𝕡) values.0#0,values.1#0,values.2#0 | loop_counter%0#0
        switch add_three_values_for_header_1@3 add_three_values_for_header_2@4 ; b add_three_values_after_for@5 (𝕡) values.0#0,values.1#0,values.2#0 | 

    add_three_values_for_header_1@3:                                                  (𝕡) values.0#0,values.1#0,values.2#0 |
        int 1                                                                         (𝕡) values.0#0,values.1#0,values.2#0 | 1
        v-store loop_counter%0#0                                                      (𝕡) values.0#0,values.1#0,values.2#0 |
        p-load values.1#0                                                             (𝕡) values.0#0,values.1#0,values.2#0 | values.1#0 (copy)
        v-store value#1                                                               (𝕡) values.0#0,values.1#0,values.2#0 |
        b add_three_values_for_body@1                                                 (𝕡) values.0#0,values.1#0,values.2#0 |

    add_three_values_for_header_2@4:                                                  (𝕡) values.0#0,values.1#0,values.2#0 |
        int 2                                                                         (𝕡) values.0#0,values.1#0,values.2#0 | 2
        v-store loop_counter%0#0                                                      (𝕡) values.0#0,values.1#0,values.2#0 |
        p-load values.2#0                                                             (𝕡) values.0#0,values.1#0,values.2#0 | values.2#0 (copy)
        v-store value#1                                                               (𝕡) values.0#0,values.1#0,values.2#0 |
        b add_three_values_for_body@1                                                 (𝕡) values.0#0,values.1#0,values.2#0 |

    add_three_values_after_for@5:                                                     (𝕡) values.0#0,values.1#0,values.2#0 |
        // tuple_support/tuple_support.py:144
        // return total
        v-load total#0                                                                (𝕡) values.0#0,values.1#0,values.2#0 | total#0
        retsub                                                                        total#0


