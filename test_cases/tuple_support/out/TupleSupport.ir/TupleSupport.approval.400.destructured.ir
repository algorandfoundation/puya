main test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "state" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let total#0: uint64 = test_cases.tuple_support.tuple_support.add_three_values(101u, 102u, 103u)
        let tmp%1#1: bytes = (itob total#0)
        (log tmp%1#1)
        let (did_overflow#0: uint64, result.1#0: uint64) = (addw 1u 2u)
        (app_global_put "state" result.1#0)
        let tmp%4#0: bool = (! did_overflow#0)
        (assert tmp%4#0) // overflow!
        (log 0x48656c6c6f2c20776f726c6421)
        let (a.0#0: uint64, a.1#0: uint64) = (addw 18446744073709551615u 18446744073709551615u)
        let (lo_carry#0: uint64, c_lo#0: uint64) = (addw a.1#0 result.1#0)
        let (hi_carry1#0: uint64, c_mid#0: uint64) = (addw a.0#0 did_overflow#0)
        let (hi_carry2#0: uint64, c_mid#0: uint64) = (addw c_mid#0 lo_carry#0)
        let (did_overflow#0: uint64, c_hi#0: uint64) = (addw hi_carry1#0 hi_carry2#0)
        let tmp%8#0: bool = (! did_overflow#0)
        (assert tmp%8#0) // is such a thing even possible? ðŸ‘½
        let tmp%28#0: bytes = (itob c_hi#0)
        (log tmp%28#0)
        let tmp%29#0: bytes = (itob c_mid#0)
        (log tmp%29#0)
        let tmp%30#0: bytes = (itob c_lo#0)
        (log tmp%30#0)
        let result#1: bytes = 0x
        let value_internal%0#0: uint64 = 0u
        let _i#1: uint64 = value_internal%0#0
        goto block@15
    block@15: // for_header_L133
        let continue_looping%0#0: bool = (< _i#1 5u)
        goto continue_looping%0#0 ? block@16 : block@17
    block@16: // for_body_L134
        let result#1: bytes = (concat result#1 0x6e61)
        let value_internal%0#0: uint64 = (+ _i#1 1u)
        let _i#1: uint64 = value_internal%0#0
        goto block@15
    block@17: // after_for_L133
        (log result#1)
        let tmp%0#1: uint64 = test_cases.tuple_support.tuple_support.add_three_values(1u, 2u, 3u)
        let tmp%3#1: bool = (== tmp%0#1 6u)
        (assert tmp%3#1)
        (log "non_empty_tuple called")
        (log "not empty")
        (log "get_uint_with_side_effect called")
        (log "not empty2")
        return 3u

subroutine test_cases.tuple_support.tuple_support.add_three_values(values.0: uint64, values.1: uint64, values.2: uint64) -> uint64:
    block@0: // L138
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let value#1: uint64 = values.0#0
        goto block@1
    block@1: // for_body_L142
        let total#0: uint64 = (+ total#0 value#1)
        goto_nth [block@3, block@4][loop_counter%0#0] else goto block@5
    block@3: // for_header_1_L141
        let loop_counter%0#0: uint64 = 1u
        let value#1: uint64 = values.1#0
        goto block@1
    block@4: // for_header_2_L141
        let loop_counter%0#0: uint64 = 2u
        let value#1: uint64 = values.2#0
        goto block@1
    block@5: // after_for_L141
        return total#0