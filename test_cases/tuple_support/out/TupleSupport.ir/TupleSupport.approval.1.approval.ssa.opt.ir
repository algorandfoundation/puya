main test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "state" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let total#0: uint64 = test_cases.tuple_support.tuple_support.add_three_values(101u, 102u, 103u)
        let tmp%0#1: bytes = (itob total#0)
        (log tmp%0#1)
        let (did_overflow#0: uint64, result.1#0: uint64) = (addw 1u 2u)
        (app_global_put "state" result.1#0)
        let tmp%1#1: bool = (! did_overflow#0)
        (assert tmp%1#1) // overflow!
        let tup.0#1: uint64 = 3u
        let tup.1#1: uint64 = 3u
        goto block@6
    block@6: // after_if_else_L20
        let tmp%7#0: bool = (== 3u tup.0#1)
        (assert tmp%7#0)
        let tmp%8#0: bool = (== 3u tup.1#1)
        (assert tmp%8#0)
        let (awst_tmp%0#0: uint64, awst_tmp%1#0: uint64) = test_cases.tuple_support.tuple_support.get_tuple(1u, 2u)
        goto block@9
    block@9: // ternary_merge_L29
        let tmp%12#0: bool = (== awst_tmp%0#0 1u)
        let tmp%13#0: bool = (== awst_tmp%1#0 2u)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let tmp%15#0: bytes = test_cases.tuple_support.tuple_support.bytes_combine(0x48656c6c6f2c20, 0x776f726c6421)
        (log tmp%15#0)
        let (tmp%16#0: uint64, tmp%17#0: uint64) = (addw 18446744073709551615u 18446744073709551615u)
        let (hi#0: uint64, mid#0: uint64, lo#0: uint64) = test_cases.tuple_support.tuple_support.addw2(tmp%16#0, tmp%17#0, did_overflow#0, result.1#0)
        let tmp%20#0: bytes = (itob hi#0)
        (log tmp%20#0)
        let tmp%21#0: bytes = (itob mid#0)
        (log tmp%21#0)
        let tmp%22#0: bytes = (itob lo#0)
        (log tmp%22#0)
        let tmp%23#0: bytes = test_cases.tuple_support.tuple_support.bytes_multiply(0x6e61, 5u)
        (log tmp%23#0)
        test_cases.tuple_support.tuple_support.test_tuple_swap(0u)
        test_cases.tuple_support.tuple_support.slicing(1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u)
        test_cases.tuple_support.tuple_support.bin_ops()
        let (awst_tmp%2#0: uint64, awst_tmp%3#0: uint64) = test_cases.tuple_support.tuple_support.non_empty_tuple()
        (log "not empty")
        let awst_tmp%4#0: uint64 = test_cases.tuple_support.tuple_support.get_uint_with_side_effect()
        (log "not empty2")
        test_cases.tuple_support.tuple_support.single_tuple()
        test_cases.tuple_support.tuple_support.test_empty()
        return 3u

subroutine test_cases.tuple_support.tuple_support.add_three_values(values.0: uint64, values.1: uint64, values.2: uint64) -> uint64:
    block@0: // L138
        let total#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        goto block@1
    block@1: // for_body_L142
        let loop_counter%0#1: uint64 = Ï†(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4)
        let total#1: uint64 = Ï†(total#0 <- block@0, total#2 <- block@3, total#2 <- block@4)
        let value#1: uint64 = Ï†(values.0#0 <- block@0, values.1#0 <- block@3, values.2#0 <- block@4)
        let total#2: uint64 = (+ total#1 value#1)
        goto_nth [block@3, block@4][loop_counter%0#1] else goto block@5
    block@3: // for_header_1_L141
        let loop_counter%0#2: uint64 = 1u
        goto block@1
    block@4: // for_header_2_L141
        let loop_counter%0#3: uint64 = 2u
        goto block@1
    block@5: // after_for_L141
        return total#2

subroutine test_cases.tuple_support.tuple_support.get_tuple(a: uint64, b: uint64) -> <uint64, uint64>:
    block@0: // L71
        return a#0 b#0

subroutine test_cases.tuple_support.tuple_support.bytes_combine(arg.0: bytes, arg.1: bytes) -> bytes:
    block@0: // L122
        let result#0: bytes = (concat arg.0#0 arg.1#0)
        return result#0

subroutine test_cases.tuple_support.tuple_support.addw2(a.0: uint64, a.1: uint64, b.0: uint64, b.1: uint64) -> <uint64, uint64, uint64>:
    block@0: // L147
        let (lo_carry#0: uint64, c_lo#0: uint64) = (addw a.1#0 b.1#0)
        let (hi_carry1#0: uint64, c_mid#0: uint64) = (addw a.0#0 b.0#0)
        let (hi_carry2#0: uint64, c_mid#1: uint64) = (addw c_mid#0 lo_carry#0)
        let (did_overflow#0: uint64, c_hi#0: uint64) = (addw hi_carry1#0 hi_carry2#0)
        let tmp%0#0: bool = (! did_overflow#0)
        (assert tmp%0#0) // is such a thing even possible? ðŸ‘½
        return c_hi#0 c_mid#1 c_lo#0

subroutine test_cases.tuple_support.tuple_support.bytes_multiply(arg.0: bytes, arg.1: uint64) -> bytes:
    block@0: // L129
        let result#0: bytes = 0x
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L133
        let _i#1: uint64 = Ï†(_i#0 <- block@0, _i#2 <- block@2)
        let result#1: bytes = Ï†(result#0 <- block@0, result#2 <- block@2)
        let continue_looping%0#0: bool = (< _i#1 arg.1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L134
        let result#2: bytes = (concat result#1 arg.0#0)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@1
    block@4: // after_for_L133
        return result#1

subroutine test_cases.tuple_support.tuple_support.test_tuple_swap(zero: uint64) -> void:
    block@0: // L159
        let a#0: uint64 = (+ zero#0 1u)
        let b#0: uint64 = (+ zero#0 2u)
        let tmp%0#0: bool = (== b#0 2u)
        (assert tmp%0#0) // a should be two
        let tmp%1#0: bool = (== a#0 1u)
        (assert tmp%1#0) // b should be one
        return 

subroutine test_cases.tuple_support.tuple_support.slicing(values.0: uint64, values.1: uint64, values.2: uint64, values.3: uint64, values.4: uint64, values.5: uint64, values.6: uint64, values.7: uint64) -> void:
    block@0: // L168
        let tmp%0#0: uint64 = test_cases.tuple_support.tuple_support.add_three_values(values.0#0, values.1#0, values.2#0)
        let tmp%1#0: uint64 = (+ values.0#0 values.1#0)
        let tmp%2#0: uint64 = (+ tmp%1#0 values.2#0)
        let tmp%3#0: bool = (== tmp%0#0 tmp%2#0)
        (assert tmp%3#0)
        return 

subroutine test_cases.tuple_support.tuple_support.bin_ops() -> void:
    block@0: // L94
        return 

subroutine test_cases.tuple_support.tuple_support.non_empty_tuple() -> <uint64, uint64>:
    block@0: // L88
        (log "non_empty_tuple called")
        return 4u 2u

subroutine test_cases.tuple_support.tuple_support.get_uint_with_side_effect() -> uint64:
    block@0: // L82
        (log "get_uint_with_side_effect called")
        return 4u

subroutine test_cases.tuple_support.tuple_support.single_tuple() -> void:
    block@0: // L76
        return 

subroutine test_cases.tuple_support.tuple_support.test_empty() -> void:
    block@0: // L178
        return 