{
  "version": 3,
  "sources": [
    "../tuple_support.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAKQ;AAAa;AAAb;AAG0B;;;;;AAAlB;;;AACJ;AAAJ;AACU;AAAW;AACQ;AAAd;AAAf;;AAAA;AACO;;AAAA;AAAP;AAgHK;;;;;;;;;;;;;;;AA3FL;AACa;;;;;;;;;;;AAAA;AACO;AAmHP;;AAAA;AACE;;AAAA;;AAAA;AACA;;AAAA;AACE;;AAAA;AACd;AAAA;AAAP;AAtHQ;AAAJ;AACI;AAAJ;AACI;AAAJ;AA6FK;AAAT;;AACU;;;AAAd;AA7F0C;;AA6F1C;AAAA;;;AACQ;;AA9FoB;;;;AA8FpB;AAAA;;AADM;AAAA;AAAA;;;;;;AA7FN;;AAAA;AAIQ;AACA;AACA;AA6HL;;;AAAkC;;AAAlC;AAAP;AAjFI;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAlCY;;;;;;;;;;;AAAJ;AA4BJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AA1BY;;;;;;;;;;;;AAAJ;AAOG;AAAP;AAyEP;;;AAEW;;;;AAEJ;;AAAA;;AAAA;AAAA;;AADR;;;;;;AAGI;;AAAA;AAAA;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.tuple_support.tuple_support.TupleSupport.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 3"
    },
    "7": {
      "op": "bytecblock 0x \"state\""
    },
    "16": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#1"
      ]
    },
    "17": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "18": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "tmp%0#0"
      ]
    },
    "20": {
      "op": "bnz main_after_if_else@2",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "23": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\""
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "\"state\""
      ]
    },
    "24": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "\"state\"",
        "0"
      ]
    },
    "25": {
      "op": "app_global_put",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "26": {
      "block": "main_after_if_else@2",
      "stack_in": [
        "result#1",
        "_i#0"
      ],
      "op": "pushints 101 102 103 // 101, 102, 103",
      "defined_out": [
        "101",
        "102",
        "103"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "101",
        "102",
        "103"
      ]
    },
    "31": {
      "callsub": "test_cases.tuple_support.tuple_support.add_three_values",
      "op": "callsub add_three_values",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "total#0"
      ]
    },
    "34": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "tmp%2#0"
      ]
    },
    "35": {
      "op": "log",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "36": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "1"
      ]
    },
    "37": {
      "op": "intc_2 // 2",
      "defined_out": [
        "1",
        "2"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "1",
        "2"
      ]
    },
    "38": {
      "op": "addw",
      "defined_out": [
        "did_overflow#0",
        "result.1#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "result.1#0"
      ]
    },
    "39": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "did_overflow#0",
        "result.1#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "result.1#0",
        "\"state\""
      ]
    },
    "40": {
      "op": "dig 1",
      "defined_out": [
        "\"state\"",
        "did_overflow#0",
        "result.1#0",
        "result.1#0 (copy)"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "result.1#0",
        "\"state\"",
        "result.1#0 (copy)"
      ]
    },
    "42": {
      "op": "app_global_put",
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "result.1#0"
      ]
    },
    "43": {
      "op": "dig 1",
      "defined_out": [
        "did_overflow#0",
        "did_overflow#0 (copy)",
        "result.1#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "result.1#0",
        "did_overflow#0 (copy)"
      ]
    },
    "45": {
      "op": "!",
      "defined_out": [
        "did_overflow#0",
        "result.1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "result.1#0",
        "tmp%5#0"
      ]
    },
    "46": {
      "error": "overflow!",
      "op": "assert // overflow!",
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "result.1#0"
      ]
    },
    "47": {
      "op": "pushbytes 0x48656c6c6f2c20776f726c6421",
      "defined_out": [
        "0x48656c6c6f2c20776f726c6421",
        "did_overflow#0",
        "result.1#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "result.1#0",
        "0x48656c6c6f2c20776f726c6421"
      ]
    },
    "62": {
      "op": "log",
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "result.1#0"
      ]
    },
    "63": {
      "op": "pushint 18446744073709551615 // 18446744073709551615",
      "defined_out": [
        "18446744073709551615",
        "did_overflow#0",
        "result.1#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "result.1#0",
        "18446744073709551615"
      ]
    },
    "74": {
      "op": "dup",
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "result.1#0",
        "18446744073709551615",
        "18446744073709551615"
      ]
    },
    "75": {
      "op": "addw",
      "defined_out": [
        "a.0#0",
        "a.1#0",
        "did_overflow#0",
        "result.1#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "result.1#0",
        "a.0#0",
        "a.1#0"
      ]
    },
    "76": {
      "op": "uncover 2",
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "a.0#0",
        "a.1#0",
        "result.1#0"
      ]
    },
    "78": {
      "op": "addw",
      "defined_out": [
        "a.0#0",
        "c_lo#0",
        "did_overflow#0",
        "lo_carry#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "a.0#0",
        "lo_carry#0",
        "c_lo#0"
      ]
    },
    "79": {
      "op": "uncover 2",
      "stack_out": [
        "result#1",
        "_i#0",
        "did_overflow#0",
        "lo_carry#0",
        "c_lo#0",
        "a.0#0"
      ]
    },
    "81": {
      "op": "uncover 3",
      "stack_out": [
        "result#1",
        "_i#0",
        "lo_carry#0",
        "c_lo#0",
        "a.0#0",
        "did_overflow#0"
      ]
    },
    "83": {
      "op": "addw",
      "defined_out": [
        "c_lo#0",
        "c_mid#0",
        "hi_carry1#0",
        "lo_carry#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "lo_carry#0",
        "c_lo#0",
        "hi_carry1#0",
        "c_mid#0"
      ]
    },
    "84": {
      "op": "uncover 3",
      "stack_out": [
        "result#1",
        "_i#0",
        "c_lo#0",
        "hi_carry1#0",
        "c_mid#0",
        "lo_carry#0"
      ]
    },
    "86": {
      "op": "addw",
      "defined_out": [
        "c_lo#0",
        "c_mid#0",
        "hi_carry1#0",
        "hi_carry2#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "c_lo#0",
        "hi_carry1#0",
        "hi_carry2#0",
        "c_mid#0"
      ]
    },
    "87": {
      "op": "cover 2",
      "stack_out": [
        "result#1",
        "_i#0",
        "c_lo#0",
        "c_mid#0",
        "hi_carry1#0",
        "hi_carry2#0"
      ]
    },
    "89": {
      "op": "addw",
      "defined_out": [
        "c_hi#0",
        "c_lo#0",
        "c_mid#0",
        "did_overflow#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "c_lo#0",
        "c_mid#0",
        "did_overflow#0",
        "c_hi#0"
      ]
    },
    "90": {
      "op": "swap",
      "stack_out": [
        "result#1",
        "_i#0",
        "c_lo#0",
        "c_mid#0",
        "c_hi#0",
        "did_overflow#0"
      ]
    },
    "91": {
      "op": "!",
      "defined_out": [
        "c_hi#0",
        "c_lo#0",
        "c_mid#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "c_lo#0",
        "c_mid#0",
        "c_hi#0",
        "tmp%8#1"
      ]
    },
    "92": {
      "error": "is such a thing even possible? \ud83d\udc7d",
      "op": "assert // is such a thing even possible? \ud83d\udc7d",
      "stack_out": [
        "result#1",
        "_i#0",
        "c_lo#0",
        "c_mid#0",
        "c_hi#0"
      ]
    },
    "93": {
      "op": "itob",
      "defined_out": [
        "c_lo#0",
        "c_mid#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "c_lo#0",
        "c_mid#0",
        "tmp%29#0"
      ]
    },
    "94": {
      "op": "log",
      "stack_out": [
        "result#1",
        "_i#0",
        "c_lo#0",
        "c_mid#0"
      ]
    },
    "95": {
      "op": "itob",
      "defined_out": [
        "c_lo#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "c_lo#0",
        "tmp%30#0"
      ]
    },
    "96": {
      "op": "log",
      "stack_out": [
        "result#1",
        "_i#0",
        "c_lo#0"
      ]
    },
    "97": {
      "op": "itob",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "tmp%31#0"
      ]
    },
    "98": {
      "op": "log",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "99": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "result#1"
      ]
    },
    "100": {
      "op": "bury 2",
      "defined_out": [
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "102": {
      "op": "intc_0 // 0",
      "defined_out": [
        "_i#0",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "_i#0"
      ]
    },
    "103": {
      "op": "bury 1",
      "defined_out": [
        "_i#0",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "105": {
      "block": "main_for_header@24",
      "stack_in": [
        "result#1",
        "_i#0"
      ],
      "op": "dup",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "_i#0"
      ]
    },
    "106": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "_i#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "_i#0",
        "5"
      ]
    },
    "108": {
      "op": "<",
      "defined_out": [
        "_i#0",
        "continue_looping%0#0"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "continue_looping%0#0"
      ]
    },
    "109": {
      "op": "bz main_after_for@27",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "112": {
      "op": "dig 1",
      "defined_out": [
        "_i#0",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "result#1"
      ]
    },
    "114": {
      "op": "pushbytes 0x6e61",
      "defined_out": [
        "0x6e61",
        "_i#0",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "result#1",
        "0x6e61"
      ]
    },
    "118": {
      "op": "concat",
      "stack_out": [
        "result#1",
        "_i#0",
        "result#1"
      ]
    },
    "119": {
      "op": "bury 2",
      "defined_out": [
        "_i#0",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "121": {
      "op": "dup",
      "stack_out": [
        "result#1",
        "_i#0",
        "_i#0"
      ]
    },
    "122": {
      "op": "intc_1 // 1",
      "stack_out": [
        "result#1",
        "_i#0",
        "_i#0",
        "1"
      ]
    },
    "123": {
      "op": "+",
      "stack_out": [
        "result#1",
        "_i#0",
        "_i#0"
      ]
    },
    "124": {
      "op": "bury 1",
      "defined_out": [
        "_i#0",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "126": {
      "op": "b main_for_header@24"
    },
    "129": {
      "block": "main_after_for@27",
      "stack_in": [
        "result#1",
        "_i#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "result#1"
      ]
    },
    "131": {
      "op": "log",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "132": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "1"
      ]
    },
    "133": {
      "op": "intc_2 // 2",
      "defined_out": [
        "1",
        "2",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "1",
        "2"
      ]
    },
    "134": {
      "op": "intc_3 // 3",
      "defined_out": [
        "1",
        "2",
        "3",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "1",
        "2",
        "3"
      ]
    },
    "135": {
      "callsub": "test_cases.tuple_support.tuple_support.add_three_values",
      "op": "callsub add_three_values",
      "defined_out": [
        "result#1",
        "tmp%0#6"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "tmp%0#6"
      ]
    },
    "138": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "result#1",
        "tmp%0#6"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "tmp%0#6",
        "6"
      ]
    },
    "140": {
      "op": "==",
      "defined_out": [
        "result#1",
        "tmp%3#3"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "tmp%3#3"
      ]
    },
    "141": {
      "op": "assert",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "142": {
      "op": "pushbytes \"non_empty_tuple called\"",
      "defined_out": [
        "\"non_empty_tuple called\"",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "\"non_empty_tuple called\""
      ]
    },
    "166": {
      "op": "log",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "167": {
      "op": "pushbytes \"not empty\"",
      "defined_out": [
        "\"not empty\"",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "\"not empty\""
      ]
    },
    "178": {
      "op": "log",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "179": {
      "op": "pushbytes \"get_uint_with_side_effect called\"",
      "defined_out": [
        "\"get_uint_with_side_effect called\"",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "\"get_uint_with_side_effect called\""
      ]
    },
    "213": {
      "op": "log",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "214": {
      "op": "pushbytes \"not empty2\"",
      "defined_out": [
        "\"not empty2\"",
        "result#1"
      ],
      "stack_out": [
        "result#1",
        "_i#0",
        "\"not empty2\""
      ]
    },
    "226": {
      "op": "log",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "227": {
      "op": "intc_3 // 3",
      "stack_out": [
        "result#1",
        "_i#0",
        "3"
      ]
    },
    "228": {
      "op": "return",
      "stack_out": [
        "result#1",
        "_i#0"
      ]
    },
    "229": {
      "subroutine": "test_cases.tuple_support.tuple_support.add_three_values",
      "params": {
        "values.0#0": "uint64",
        "values.1#0": "uint64",
        "values.2#0": "uint64"
      },
      "block": "add_three_values",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "232": {
      "op": "intc_0 // 0"
    },
    "233": {
      "op": "frame_dig -3"
    },
    "235": {
      "op": "intc_0 // 0",
      "defined_out": [
        "loop_counter%0#0",
        "total#0",
        "value#1"
      ],
      "stack_out": [
        "total#0",
        "value#1",
        "loop_counter%0#0"
      ]
    },
    "236": {
      "block": "add_three_values_for_body@1",
      "stack_in": [
        "total#0",
        "value#1",
        "loop_counter%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "value#1",
        "loop_counter%0#0",
        "total#0"
      ]
    },
    "238": {
      "op": "uncover 2",
      "defined_out": [
        "total#0",
        "value#1"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "total#0",
        "value#1"
      ]
    },
    "240": {
      "op": "+",
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "total#0"
      ]
    },
    "241": {
      "op": "frame_bury 0",
      "defined_out": [
        "loop_counter%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "243": {
      "op": "switch add_three_values_for_header_1@3 add_three_values_for_header_2@4",
      "stack_out": [
        "total#0"
      ]
    },
    "249": {
      "op": "frame_dig 0",
      "stack_out": [
        "total#0",
        "total#0"
      ]
    },
    "251": {
      "op": "swap"
    },
    "252": {
      "retsub": true,
      "op": "retsub"
    },
    "253": {
      "block": "add_three_values_for_header_2@4",
      "stack_in": [
        "total#0"
      ],
      "op": "frame_dig -1"
    },
    "255": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "value#1"
      ],
      "stack_out": [
        "total#0",
        "value#1",
        "loop_counter%0#0"
      ]
    },
    "256": {
      "op": "b add_three_values_for_body@1"
    },
    "259": {
      "block": "add_three_values_for_header_1@3",
      "stack_in": [
        "total#0"
      ],
      "op": "frame_dig -2"
    },
    "261": {
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "value#1"
      ],
      "stack_out": [
        "total#0",
        "value#1",
        "loop_counter%0#0"
      ]
    },
    "262": {
      "op": "b add_three_values_for_body@1"
    }
  }
}