// Op                                                                                                      Stack (out)
// test_cases.tuple_support.tuple_support.TupleSupport.approval_program() -> uint64:
main_block@0:
    txn ApplicationID                                                                                      app_id%0#0
    bnz main_entrypoint@2
    // Implicit fall through to main_on_create@1

main_on_create@1:
    callsub __init__
    // Implicit fall through to main_entrypoint@2

main_entrypoint@2:
    // tuple_support/tuple_support.py:9
    // total = add_three_values((UInt64(101), UInt64(102), UInt64(103)))
    int 101                                                                                                101
    int 102                                                                                                101,102
    int 103                                                                                                101,102,103
    callsub add_three_values                                                                               total#0
    // tuple_support/tuple_support.py:10
    // log(total)
    itob                                                                                                   tmp%0#0
    log
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1                                                                                                  1
    int 2                                                                                                  1,2
    // tuple_support/tuple_support.py:12
    // (did_overflow, self.state) = op.addw(a, b)
    addw                                                                                                   did_overflow#0,result.1#0
    byte "state"                                                                                           did_overflow#0,result.1#0,"state"
    l-load-copy result.1#0 1                                                                               did_overflow#0,result.1#0,"state",result.1#0 (copy)
    app_global_put                                                                                         did_overflow#0,result.1#0
    // tuple_support/tuple_support.py:13
    // assert not did_overflow, "overflow!"
    l-load-copy did_overflow#0 1                                                                           did_overflow#0,result.1#0,did_overflow#0 (copy)
    !                                                                                                      did_overflow#0,result.1#0,tmp%1#0
    assert // overflow!                                                                                    did_overflow#0,result.1#0
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1                                                                                                  did_overflow#0,result.1#0,1
    int 2                                                                                                  did_overflow#0,result.1#0,1,2
    // tuple_support/tuple_support.py:29
    // (m, n) = get_tuple(a, b) or get_tuple(b, a)
    callsub get_tuple                                                                                      did_overflow#0,result.1#0,awst_tmp%0#0,awst_tmp%1#0
    // tuple_support/tuple_support.py:30
    // assert (m, n) == (a, b)
    l-load awst_tmp%0#0 1                                                                                  did_overflow#0,result.1#0,awst_tmp%1#0,awst_tmp%0#0
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 1                                                                                                  did_overflow#0,result.1#0,awst_tmp%1#0,awst_tmp%0#0,1
    // tuple_support/tuple_support.py:30
    // assert (m, n) == (a, b)
    ==                                                                                                     did_overflow#0,result.1#0,awst_tmp%1#0,tmp%12#0
    l-load awst_tmp%1#0 1                                                                                  did_overflow#0,result.1#0,tmp%12#0,awst_tmp%1#0
    // tuple_support/tuple_support.py:11
    // (a, b) = (UInt64(1), UInt64(2))
    int 2                                                                                                  did_overflow#0,result.1#0,tmp%12#0,awst_tmp%1#0,2
    // tuple_support/tuple_support.py:30
    // assert (m, n) == (a, b)
    ==                                                                                                     did_overflow#0,result.1#0,tmp%12#0,tmp%13#0
    l-load tmp%12#0 1                                                                                      did_overflow#0,result.1#0,tmp%13#0,tmp%12#0
    l-load tmp%13#0 1                                                                                      did_overflow#0,result.1#0,tmp%12#0,tmp%13#0
    &&                                                                                                     did_overflow#0,result.1#0,tmp%14#0
    assert                                                                                                 did_overflow#0,result.1#0
    // tuple_support/tuple_support.py:34
    // log(bytes_combine((Bytes(b"Hello, "), Bytes(b"world!"))))
    byte 0x48656c6c6f2c20                                                                                  did_overflow#0,result.1#0,0x48656c6c6f2c20
    byte 0x776f726c6421                                                                                    did_overflow#0,result.1#0,0x48656c6c6f2c20,0x776f726c6421
    callsub bytes_combine                                                                                  did_overflow#0,result.1#0,tmp%15#0
    log                                                                                                    did_overflow#0,result.1#0
    // tuple_support/tuple_support.py:35
    // max_uint64 = UInt64(2**64 - 1)
    int 18446744073709551615                                                                               did_overflow#0,result.1#0,18446744073709551615
    int 18446744073709551615                                                                               did_overflow#0,result.1#0,18446744073709551615,18446744073709551615
    // tuple_support/tuple_support.py:36
    // hi, mid, lo = addw2(op.addw(max_uint64, max_uint64), op.addw(a, b))
    addw                                                                                                   did_overflow#0,result.1#0,tmp%16#0,tmp%17#0
    l-load tmp%16#0 1                                                                                      did_overflow#0,result.1#0,tmp%17#0,tmp%16#0
    l-load tmp%17#0 1                                                                                      did_overflow#0,result.1#0,tmp%16#0,tmp%17#0
    l-load did_overflow#0 3                                                                                result.1#0,tmp%16#0,tmp%17#0,did_overflow#0
    l-load result.1#0 3                                                                                    tmp%16#0,tmp%17#0,did_overflow#0,result.1#0
    callsub addw2                                                                                          hi#0,mid#0,lo#0
    // tuple_support/tuple_support.py:37
    // log(hi)
    l-load hi#0 2                                                                                          mid#0,lo#0,hi#0
    itob                                                                                                   mid#0,lo#0,tmp%20#0
    log                                                                                                    mid#0,lo#0
    // tuple_support/tuple_support.py:38
    // log(mid)
    l-load mid#0 1                                                                                         lo#0,mid#0
    itob                                                                                                   lo#0,tmp%21#0
    log                                                                                                    lo#0
    // tuple_support/tuple_support.py:39
    // log(lo)
    l-load lo#0 0                                                                                          lo#0
    itob                                                                                                   tmp%22#0
    log
    // tuple_support/tuple_support.py:40
    // log(bytes_multiply((Bytes(b"na"), UInt64(5))))
    byte 0x6e61                                                                                            0x6e61
    int 5                                                                                                  0x6e61,5
    callsub bytes_multiply                                                                                 tmp%23#0
    log
    // tuple_support/tuple_support.py:41
    // test_tuple_swap(zero=UInt64(0))
    int 0                                                                                                  0
    callsub test_tuple_swap
    // tuple_support/tuple_support.py:44
    // UInt64(1),
    int 1                                                                                                  1
    // tuple_support/tuple_support.py:45
    // UInt64(2),
    int 2                                                                                                  1,2
    // tuple_support/tuple_support.py:46
    // UInt64(3),
    int 3                                                                                                  1,2,3
    // tuple_support/tuple_support.py:47
    // UInt64(4),
    int 4                                                                                                  1,2,3,4
    // tuple_support/tuple_support.py:48
    // UInt64(5),
    int 5                                                                                                  1,2,3,4,5
    // tuple_support/tuple_support.py:49
    // UInt64(6),
    int 6                                                                                                  1,2,3,4,5,6
    // tuple_support/tuple_support.py:50
    // UInt64(7),
    int 7                                                                                                  1,2,3,4,5,6,7
    // tuple_support/tuple_support.py:51
    // UInt64(8),
    int 8                                                                                                  1,2,3,4,5,6,7,8
    // tuple_support/tuple_support.py:42-53
    // slicing(
    //     (
    //         UInt64(1),
    //         UInt64(2),
    //         UInt64(3),
    //         UInt64(4),
    //         UInt64(5),
    //         UInt64(6),
    //         UInt64(7),
    //         UInt64(8),
    //     )
    // )
    callsub slicing
    // tuple_support/tuple_support.py:55
    // if non_empty_tuple():
    callsub non_empty_tuple                                                                                awst_tmp%2#0,awst_tmp%3#0
    pop 1                                                                                                  awst_tmp%2#0
    pop 1
    // tuple_support/tuple_support.py:56
    // log("not empty")
    byte "not empty"                                                                                       "not empty"
    log
    // tuple_support/tuple_support.py:57
    // if (get_uint_with_side_effect(),):  # noqa: F634
    callsub get_uint_with_side_effect                                                                      awst_tmp%4#0
    pop 1
    // tuple_support/tuple_support.py:58
    // log("not empty2")
    byte "not empty2"                                                                                      "not empty2"
    log
    // tuple_support/tuple_support.py:65
    // return a + b
    int 3                                                                                                  3
    return


// test_cases.tuple_support.tuple_support.add_three_values(values.0: uint64, values.1: uint64, values.2: uint64) -> uint64:
add_three_values:                                                                                          (𝕡) values.0#0,values.1#0,values.2#0 |
    // tuple_support/tuple_support.py:138-139
    // @subroutine
    // def add_three_values(values: tuple[UInt64, UInt64, UInt64]) -> UInt64:
    proto 3 1                                                                                              (𝕡) values.0#0,values.1#0,values.2#0 |

add_three_values_block@0:                                                                                  (𝕡) values.0#0,values.1#0,values.2#0 |
    // tuple_support/tuple_support.py:140
    // total = UInt64(0)
    int 0                                                                                                  (𝕡) values.0#0,values.1#0,values.2#0 | total#0
    f-store total#0                                                                                        (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 |
    int 0                                                                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | loop_counter%0#0
    x-store loop_counter%0#0                                                                               (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) loop_counter%0#0 |
    p-load values.0#0                                                                                      (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) loop_counter%0#0 | value#1
    x-store value#1                                                                                        (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) value#1,loop_counter%0#0 |
    // Implicit fall through to add_three_values_for_body@1                                                (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) value#1,loop_counter%0#0 |

add_three_values_for_body@1:                                                                               (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) value#1,loop_counter%0#0 |
    // tuple_support/tuple_support.py:142
    // total += value
    f-load total#0                                                                                         (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) value#1,loop_counter%0#0 | total#0
    x-load value#1                                                                                         (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) loop_counter%0#0 | total#0,value#1
    +                                                                                                      (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) loop_counter%0#0 | total#0
    l-store-copy total#0 0                                                                                 (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) loop_counter%0#0 | total#0,total#0
    f-store total#0                                                                                        (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) loop_counter%0#0 | total#0
    // tuple_support/tuple_support.py:141
    // for value in values:
    x-load loop_counter%0#0                                                                                (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | total#0,loop_counter%0#0
    switch add_three_values_for_header_1@3 add_three_values_for_header_2@4                                 (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | total#0
    l-load total#0 0                                                                                       (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | total#0
    // tuple_support/tuple_support.py:144
    // return total
    retsub                                                                                                 total#0

add_three_values_for_header_1@3:                                                                           (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 |
    int 1                                                                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | loop_counter%0#0
    x-store loop_counter%0#0                                                                               (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) loop_counter%0#0 |
    p-load values.1#0                                                                                      (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) loop_counter%0#0 | value#1
    x-store value#1                                                                                        (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) value#1,loop_counter%0#0 |
    b add_three_values_for_body@1                                                                          (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) value#1,loop_counter%0#0 |

add_three_values_for_header_2@4:                                                                           (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 |
    int 2                                                                                                  (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | loop_counter%0#0
    x-store loop_counter%0#0                                                                               (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) loop_counter%0#0 |
    p-load values.2#0                                                                                      (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) loop_counter%0#0 | value#1
    x-store value#1                                                                                        (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) value#1,loop_counter%0#0 |
    b add_three_values_for_body@1                                                                          (𝕡) values.0#0,values.1#0,values.2#0 | (𝕗) total#0 | (𝕏) value#1,loop_counter%0#0 |


// test_cases.tuple_support.tuple_support.get_tuple(a: uint64, b: uint64) -> uint64, uint64:
get_tuple:                                                                                                 (𝕡) a#0,b#0 |
    // tuple_support/tuple_support.py:71-72
    // @subroutine
    // def get_tuple(a: UInt64, b: UInt64) -> tuple[UInt64, UInt64]:
    proto 2 2                                                                                              (𝕡) a#0,b#0 |

get_tuple_block@0:                                                                                         (𝕡) a#0,b#0 |
    // tuple_support/tuple_support.py:73
    // return a, b
    p-load a#0                                                                                             (𝕡) a#0,b#0 | a#0 (copy)
    p-load b#0                                                                                             (𝕡) a#0,b#0 | a#0 (copy),b#0 (copy)
    retsub                                                                                                 a#0 (copy),b#0 (copy)


// test_cases.tuple_support.tuple_support.bytes_combine(arg.0: bytes, arg.1: bytes) -> bytes:
bytes_combine:                                                                                             (𝕡) arg.0#0,arg.1#0 |
    // tuple_support/tuple_support.py:122-123
    // @subroutine
    // def bytes_combine(arg: tuple[Bytes, Bytes]) -> Bytes:
    proto 2 1                                                                                              (𝕡) arg.0#0,arg.1#0 |

bytes_combine_block@0:                                                                                     (𝕡) arg.0#0,arg.1#0 |
    // tuple_support/tuple_support.py:125
    // result = a + b
    p-load arg.0#0                                                                                         (𝕡) arg.0#0,arg.1#0 | arg.0#0 (copy)
    p-load arg.1#0                                                                                         (𝕡) arg.0#0,arg.1#0 | arg.0#0 (copy),arg.1#0 (copy)
    concat                                                                                                 (𝕡) arg.0#0,arg.1#0 | result#0
    // tuple_support/tuple_support.py:126
    // return result
    retsub                                                                                                 result#0


// test_cases.tuple_support.tuple_support.addw2(a.0: uint64, a.1: uint64, b.0: uint64, b.1: uint64) -> uint64, uint64, uint64:
addw2:                                                                                                     (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 |
    // tuple_support/tuple_support.py:147-148
    // @subroutine
    // def addw2(a: tuple[UInt64, UInt64], b: tuple[UInt64, UInt64]) -> tuple[UInt64, UInt64, UInt64]:
    proto 4 3                                                                                              (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 |

addw2_block@0:                                                                                             (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 |
    // tuple_support/tuple_support.py:151
    // lo_carry, c_lo = op.addw(a_lo, b_lo)
    p-load a.1#0                                                                                           (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | a.1#0 (copy)
    p-load b.1#0                                                                                           (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | a.1#0 (copy),b.1#0 (copy)
    addw                                                                                                   (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | lo_carry#0,c_lo#0
    // tuple_support/tuple_support.py:152
    // hi_carry1, c_mid = op.addw(a_hi, b_hi)
    p-load a.0#0                                                                                           (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | lo_carry#0,c_lo#0,a.0#0 (copy)
    p-load b.0#0                                                                                           (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | lo_carry#0,c_lo#0,a.0#0 (copy),b.0#0 (copy)
    addw                                                                                                   (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | lo_carry#0,c_lo#0,hi_carry1#0,c_mid#0
    // tuple_support/tuple_support.py:153
    // hi_carry2, c_mid = op.addw(c_mid, lo_carry)
    l-load lo_carry#0 3                                                                                    (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,hi_carry1#0,c_mid#0,lo_carry#0
    addw                                                                                                   (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,hi_carry1#0,hi_carry2#0,c_mid#0
    // tuple_support/tuple_support.py:154
    // did_overflow, c_hi = op.addw(hi_carry1, hi_carry2)
    l-load hi_carry1#0 2                                                                                   (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,hi_carry2#0,c_mid#0,hi_carry1#0
    l-load hi_carry2#0 2                                                                                   (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_mid#0,hi_carry1#0,hi_carry2#0
    addw                                                                                                   (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_mid#0,did_overflow#0,c_hi#0
    // tuple_support/tuple_support.py:155
    // assert not did_overflow, "is such a thing even possible? 👽"
    l-load did_overflow#0 1                                                                                (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_mid#0,c_hi#0,did_overflow#0
    !                                                                                                      (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_mid#0,c_hi#0,tmp%0#0
    assert // is such a thing even possible? 👽                                                             (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_mid#0,c_hi#0
    // tuple_support/tuple_support.py:156
    // return c_hi, c_mid, c_lo
    l-load c_hi#0 0                                                                                        (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_mid#0,c_hi#0
    l-load c_mid#0 1                                                                                       (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_lo#0,c_hi#0,c_mid#0
    l-load c_lo#0 2                                                                                        (𝕡) a.0#0,a.1#0,b.0#0,b.1#0 | c_hi#0,c_mid#0,c_lo#0
    retsub                                                                                                 c_hi#0,c_mid#0,c_lo#0


// test_cases.tuple_support.tuple_support.bytes_multiply(arg.0: bytes, arg.1: uint64) -> bytes:
bytes_multiply:                                                                                            (𝕡) arg.0#0,arg.1#0 |
    // tuple_support/tuple_support.py:129-130
    // @subroutine
    // def bytes_multiply(arg: tuple[Bytes, UInt64]) -> Bytes:
    proto 2 1                                                                                              (𝕡) arg.0#0,arg.1#0 |

bytes_multiply_block@0:                                                                                    (𝕡) arg.0#0,arg.1#0 |
    // tuple_support/tuple_support.py:132
    // result = Bytes()
    byte 0x                                                                                                (𝕡) arg.0#0,arg.1#0 | result#0
    f-store result#0                                                                                       (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0 |
    // tuple_support/tuple_support.py:133
    // for _i in urange(count):
    int 0                                                                                                  (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0 | _i#0
    f-store _i#0                                                                                           (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |
    // Implicit fall through to bytes_multiply_for_header@1                                                (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |

bytes_multiply_for_header@1:                                                                               (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |
    // tuple_support/tuple_support.py:133
    // for _i in urange(count):
    f-load _i#0                                                                                            (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | _i#0
    p-load arg.1#0                                                                                         (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | _i#0,arg.1#0 (copy)
    <                                                                                                      (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | continue_looping%0#0
    bz bytes_multiply_after_for@4                                                                          (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |
    // Implicit fall through to bytes_multiply_for_body@2                                                  (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |

bytes_multiply_for_body@2:                                                                                 (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |
    // tuple_support/tuple_support.py:134
    // result += b
    f-load result#0                                                                                        (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | result#0
    p-load arg.0#0                                                                                         (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | result#0,arg.0#0 (copy)
    concat                                                                                                 (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | result#0
    f-store result#0                                                                                       (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |
    // tuple_support/tuple_support.py:133
    // for _i in urange(count):
    f-load _i#0                                                                                            (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | _i#0
    int 1                                                                                                  (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | _i#0,1
    +                                                                                                      (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | _i#0
    f-store _i#0                                                                                           (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |
    b bytes_multiply_for_header@1                                                                          (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |

bytes_multiply_after_for@4:                                                                                (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 |
    // tuple_support/tuple_support.py:135
    // return result
    f-load result#0                                                                                        (𝕡) arg.0#0,arg.1#0 | (𝕗) result#0,_i#0 | result#0
    retsub                                                                                                 result#0


// test_cases.tuple_support.tuple_support.test_tuple_swap(zero: uint64) -> void:
test_tuple_swap:                                                                                           (𝕡) zero#0 |
    // tuple_support/tuple_support.py:159-160
    // @subroutine
    // def test_tuple_swap(zero: UInt64) -> None:
    proto 1 0                                                                                              (𝕡) zero#0 |

test_tuple_swap_block@0:                                                                                   (𝕡) zero#0 |
    // tuple_support/tuple_support.py:161
    // a = zero + 1
    p-load zero#0                                                                                          (𝕡) zero#0 | zero#0 (copy)
    int 1                                                                                                  (𝕡) zero#0 | zero#0 (copy),1
    +                                                                                                      (𝕡) zero#0 | a#0
    // tuple_support/tuple_support.py:162
    // b = zero + 2
    p-load zero#0                                                                                          (𝕡) zero#0 | a#0,zero#0 (copy)
    int 2                                                                                                  (𝕡) zero#0 | a#0,zero#0 (copy),2
    +                                                                                                      (𝕡) zero#0 | a#0,b#0
    // tuple_support/tuple_support.py:164
    // assert a == 2, "a should be two"
    int 2                                                                                                  (𝕡) zero#0 | a#0,b#0,2
    ==                                                                                                     (𝕡) zero#0 | a#0,tmp%0#0
    assert // a should be two                                                                              (𝕡) zero#0 | a#0
    // tuple_support/tuple_support.py:165
    // assert b == 1, "b should be one"
    l-load a#0 0                                                                                           (𝕡) zero#0 | a#0
    int 1                                                                                                  (𝕡) zero#0 | a#0,1
    ==                                                                                                     (𝕡) zero#0 | tmp%1#0
    assert // b should be one                                                                              (𝕡) zero#0 |
    retsub


// test_cases.tuple_support.tuple_support.slicing(values.0: uint64, values.1: uint64, values.2: uint64, values.3: uint64, values.4: uint64, values.5: uint64, values.6: uint64, values.7: uint64) -> void:
slicing:                                                                                                   (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 |
    // tuple_support/tuple_support.py:168-169
    // @subroutine
    // def slicing(values: tuple[UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64]) -> None:
    proto 8 0                                                                                              (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 |

slicing_block@0:                                                                                           (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 |
    // tuple_support/tuple_support.py:171
    // assert add_three_values(one_to_three) == values[0] + values[1] + values[2]
    p-load values.0#0                                                                                      (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 | values.0#0 (copy)
    p-load values.1#0                                                                                      (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 | values.0#0 (copy),values.1#0 (copy)
    p-load values.2#0                                                                                      (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 | values.0#0 (copy),values.1#0 (copy),values.2#0 (copy)
    callsub add_three_values                                                                               (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 | tmp%0#0
    p-load values.0#0                                                                                      (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 | tmp%0#0,values.0#0 (copy)
    p-load values.1#0                                                                                      (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 | tmp%0#0,values.0#0 (copy),values.1#0 (copy)
    +                                                                                                      (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 | tmp%0#0,tmp%1#0
    p-load values.2#0                                                                                      (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 | tmp%0#0,tmp%1#0,values.2#0 (copy)
    +                                                                                                      (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 | tmp%0#0,tmp%2#0
    l-load tmp%0#0 1                                                                                       (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 | tmp%2#0,tmp%0#0
    l-load tmp%2#0 1                                                                                       (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 | tmp%0#0,tmp%2#0
    ==                                                                                                     (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 | tmp%3#0
    assert                                                                                                 (𝕡) values.0#0,values.1#0,values.2#0,values.3#0,values.4#0,values.5#0,values.6#0,values.7#0 |
    retsub


// test_cases.tuple_support.tuple_support.non_empty_tuple() -> uint64, uint64:
non_empty_tuple:
    // tuple_support/tuple_support.py:88-89
    // @subroutine
    // def non_empty_tuple() -> tuple[UInt64, UInt64]:
    proto 0 2

non_empty_tuple_block@0:
    // tuple_support/tuple_support.py:90
    // log("non_empty_tuple called")
    byte "non_empty_tuple called"                                                                          "non_empty_tuple called"
    log
    // tuple_support/tuple_support.py:91
    // return UInt64(4), UInt64(2)
    int 4                                                                                                  4
    int 2                                                                                                  4,2
    retsub                                                                                                 4,2


// test_cases.tuple_support.tuple_support.get_uint_with_side_effect() -> uint64:
get_uint_with_side_effect:
    // tuple_support/tuple_support.py:82-83
    // @subroutine
    // def get_uint_with_side_effect() -> UInt64:
    proto 0 1

get_uint_with_side_effect_block@0:
    // tuple_support/tuple_support.py:84
    // log("get_uint_with_side_effect called")
    byte "get_uint_with_side_effect called"                                                                "get_uint_with_side_effect called"
    log
    // tuple_support/tuple_support.py:85
    // return UInt64(4)
    int 4                                                                                                  4
    retsub                                                                                                 4


// test_cases.tuple_support.tuple_support.TupleSupport.__init__() -> void:
__init__:
    // tuple_support/tuple_support.py:5
    // def __init__(self) -> None:
    proto 0 0

__init___block@0:
    // tuple_support/tuple_support.py:6
    // self.state = UInt64(0)
    byte "state"                                                                                           "state"
    int 0                                                                                                  "state",0
    app_global_put
    retsub


