contract test_cases.reinterpret_cast.contract.Contract:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__() -> bool:
            block@0: // L4
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@6
            block@1: // abi_routing_L4
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "bytes_to_bool()bool" => block@2, method "test_bytes_to_biguint()void" => block@3, * => block@4}
            block@2: // bytes_to_bool_route_L6
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // is not creating
                let to_encode%0#0: bool = test_cases.reinterpret_cast.contract.Contract.bytes_to_bool()
                let encoded_bool%0#0: bytes = (setbit 0x00 0u to_encode%0#0)
                let tmp%7#0: bytes = (concat 0x151f7c75 encoded_bool%0#0)
                (log tmp%7#0)
                return 1u
            block@3: // test_bytes_to_biguint_route_L10
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: bool = (== tmp%8#0 NoOp)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: uint64 = (txn ApplicationID)
                let tmp%11#0: bool = (!= tmp%10#0 0u)
                (assert tmp%11#0) // is not creating
                test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint()
                return 1u
            block@4: // switch_case_default_L4
                goto block@5
            block@5: // switch_case_next_L4
                goto block@10
            block@6: // bare_routing_L4
                let tmp%12#0: uint64 = (txn OnCompletion)
                switch tmp%12#0 {0u => block@7, * => block@8}
            block@7: // __algopy_default_create_L1
                let tmp%13#0: uint64 = (txn ApplicationID)
                let tmp%14#0: bool = (== tmp%13#0 0u)
                (assert tmp%14#0) // is creating
                test_cases.reinterpret_cast.contract.Contract.__algopy_default_create()
                return 1u
            block@8: // switch_case_default_L4
                goto block@9
            block@9: // switch_case_next_L4
                goto block@10
            block@10: // after_if_else_L4
                return 0u
        
        subroutine test_cases.reinterpret_cast.contract.Contract.bytes_to_bool() -> bool:
            block@0: // L6
                let tmp%0#0: uint64 = (len 0x)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                return tmp%1#0
        
        subroutine test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint() -> void:
            block@0: // L10
                let tmp%0#0: biguint = test_cases.reinterpret_cast.contract.bytes_to_biguint()
                let tmp%1#0: bool = (b!= tmp%0#0 0b)
                (assert tmp%1#0)
                return 
        
        subroutine test_cases.reinterpret_cast.contract.bytes_to_biguint() -> biguint:
            block@0: // L15
                let reinterpret_biguint%0#0: biguint = 0x
                return reinterpret_biguint%0#0
        
        subroutine test_cases.reinterpret_cast.contract.Contract.__algopy_default_create() -> void:
            block@0: // L1
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u