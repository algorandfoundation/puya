// Op                                                                          Stack (out)
// test_cases.reinterpret_cast.contract.Contract.approval_program() -> uint64:
main_block@0:
    callsub __puya_arc4_router__                                               tmp%0#0
    return


// test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    proto 0 1

__puya_arc4_router___block@0:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txn NumAppArgs                                                             tmp%0#0
    bz __puya_arc4_router___bare_routing@6
    // Implicit fall through to __puya_arc4_router___abi_routing@1

__puya_arc4_router___abi_routing@1:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txna ApplicationArgs 0                                                     tmp%2#0
    method bytes_to_bool()bool                                                 tmp%2#0,Method(bytes_to_bool()bool)
    method test_bytes_to_biguint()void                                         tmp%2#0,Method(bytes_to_bool()bool),Method(test_bytes_to_biguint()void)
    l-load tmp%2#0 2                                                           Method(bytes_to_bool()bool),Method(test_bytes_to_biguint()void),tmp%2#0
    match __puya_arc4_router___bytes_to_bool_route@2 __puya_arc4_router___test_bytes_to_biguint_route@3 
    int 0                                                                      0
    retsub                                                                     0

__puya_arc4_router___bytes_to_bool_route@2:
    // reinterpret_cast/contract.py:5
    // @arc4.abimethod()
    txn OnCompletion                                                           tmp%3#0
    !                                                                          tmp%4#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                          tmp%5#0
    assert // can only call when not creating
    callsub bytes_to_bool                                                      to_encode%0#0
    byte 0x00                                                                  to_encode%0#0,0x00
    int 0                                                                      to_encode%0#0,0x00,0
    l-load to_encode%0#0 2                                                     0x00,0,to_encode%0#0
    setbit                                                                     encoded_bool%0#0
    byte 0x151f7c75                                                            encoded_bool%0#0,0x151f7c75
    l-load encoded_bool%0#0 1                                                  0x151f7c75,encoded_bool%0#0
    concat                                                                     tmp%7#0
    log
    int 1                                                                      1
    retsub                                                                     1

__puya_arc4_router___test_bytes_to_biguint_route@3:
    // reinterpret_cast/contract.py:9
    // @arc4.abimethod()
    txn OnCompletion                                                           tmp%8#0
    !                                                                          tmp%9#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                          tmp%10#0
    assert // can only call when not creating
    callsub test_bytes_to_biguint
    int 1                                                                      1
    retsub                                                                     1

__puya_arc4_router___bare_routing@6:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txn OnCompletion                                                           tmp%12#0
    bnz __puya_arc4_router___after_if_else@10
    // Implicit fall through to __puya_arc4_router_____algopy_default_create@7

__puya_arc4_router_____algopy_default_create@7:
    txn ApplicationID                                                          tmp%13#0
    !                                                                          tmp%14#0
    assert // can only call when creating
    int 1                                                                      1
    retsub                                                                     1

__puya_arc4_router___after_if_else@10:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    int 0                                                                      0
    retsub                                                                     0


// test_cases.reinterpret_cast.contract.Contract.bytes_to_bool() -> uint64:
bytes_to_bool:
    // reinterpret_cast/contract.py:5-6
    // @arc4.abimethod()
    // def bytes_to_bool(self) -> bool:
    proto 0 1

bytes_to_bool_block@0:
    // reinterpret_cast/contract.py:7
    // return bool(Bytes())
    int 0                                                                      0
    retsub                                                                     0


// test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint() -> void:
test_bytes_to_biguint:
    // reinterpret_cast/contract.py:9-10
    // @arc4.abimethod()
    // def test_bytes_to_biguint(self) -> None:
    proto 0 0

test_bytes_to_biguint_block@0:
    // reinterpret_cast/contract.py:11
    // assert bytes_to_biguint()
    callsub bytes_to_biguint                                                   tmp%0#0
    byte 0x                                                                    tmp%0#0,0x
    b!=                                                                        tmp%1#0
    assert
    retsub


// test_cases.reinterpret_cast.contract.bytes_to_biguint() -> bytes:
bytes_to_biguint:
    // reinterpret_cast/contract.py:14-15
    // @subroutine
    // def bytes_to_biguint() -> BigUInt:
    proto 0 1

bytes_to_biguint_block@0:
    // reinterpret_cast/contract.py:16
    // return BigUInt.from_bytes(Bytes())
    byte 0x                                                                    0x
    retsub                                                                     0x


