#pragma version 10

test_cases.reinterpret_cast.contract.Contract.approval_program:
    intcblock 0 1
    callsub __puya_arc4_router__
    return


// test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@6
    pushbytess 0x4034b731 0x7e9fd4cf // method "bytes_to_bool()bool", method "test_bytes_to_biguint()void"
    txna ApplicationArgs 0
    match __puya_arc4_router___bytes_to_bool_route@2 __puya_arc4_router___test_bytes_to_biguint_route@3
    intc_0 // 0
    retsub

__puya_arc4_router___bytes_to_bool_route@2:
    // reinterpret_cast/contract.py:6
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub bytes_to_bool
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___test_bytes_to_biguint_route@3:
    // reinterpret_cast/contract.py:10
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_bytes_to_biguint
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@6:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@10:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    intc_0 // 0
    retsub


// test_cases.reinterpret_cast.contract.Contract.bytes_to_bool() -> uint64:
bytes_to_bool:
    // reinterpret_cast/contract.py:6-7
    // @arc4.abimethod()
    // def bytes_to_bool(self) -> bool:
    proto 0 1
    // reinterpret_cast/contract.py:8
    // return bool(Bytes())
    intc_0 // 0
    retsub


// test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint() -> void:
test_bytes_to_biguint:
    // reinterpret_cast/contract.py:10-11
    // @arc4.abimethod()
    // def test_bytes_to_biguint(self) -> None:
    proto 0 0
    // reinterpret_cast/contract.py:12
    // assert bytes_to_biguint()
    callsub bytes_to_biguint
    pushbytes 0x
    b!=
    assert
    retsub


// test_cases.reinterpret_cast.contract.bytes_to_biguint() -> bytes:
bytes_to_biguint:
    // reinterpret_cast/contract.py:15-16
    // @subroutine
    // def bytes_to_biguint() -> BigUInt:
    proto 0 1
    // reinterpret_cast/contract.py:17
    // return BigUInt.from_bytes(Bytes())
    pushbytes 0x
    retsub
