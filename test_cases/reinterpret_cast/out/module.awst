contract Contract
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.reinterpret_cast.contract.Contract.bytes_to_bool(): bool
  {
    return len(hex<"">) != 0u
  }
  
  abimethod test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint(): void
  {
    assert(test_cases.reinterpret_cast.contract.bytes_to_biguint() != 0n)
  }
  
  baremethod test_cases.reinterpret_cast.contract.Contract.__algopy_default_create(): void
  {
  }
}

subroutine bytes_to_biguint(): biguint
{
  return reinterpret_cast<biguint>(hex<"">)
}