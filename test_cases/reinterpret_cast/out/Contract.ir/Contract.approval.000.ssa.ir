main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.reinterpret_cast.contract.bytes_to_biguint() -> biguint:
    block@0: // L14
        let reinterpret_biguint%0#0: biguint = 0x
        return reinterpret_biguint%0#0

subroutine test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@6
    block@2: // call_NoOp_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "bytes_to_bool()bool" => block@3, method "test_bytes_to_biguint()void" => block@4, * => block@5}
    block@3: // bytes_to_bool_route_L5
        test_cases.reinterpret_cast.contract.Contract.bytes_to_bool[routing]()
        goto block@5
    block@4: // test_bytes_to_biguint_route_L9
        test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint[routing]()
        goto block@5
    block@5: // switch_case_next_L4
        goto block@7
    block@6: // create_NoOp_L4
        goto block@7
    block@7: // after_if_else_L4
        goto block@9
    block@8: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.reinterpret_cast.contract.Contract.__algopy_default_create()
        exit 1u
    block@9: // after_if_else_L4
        exit 0u

subroutine test_cases.reinterpret_cast.contract.Contract.bytes_to_bool[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bool = test_cases.reinterpret_cast.contract.Contract.bytes_to_bool()
        let tmp%1#0: Encoded(bool8) = bytes_encode<bool8>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint[routing]() -> void:
    block@0: // L9
        test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint()
        exit 1u

subroutine test_cases.reinterpret_cast.contract.Contract.bytes_to_bool() -> bool:
    block@0: // L5
        let tmp%0#0: uint64 = (len 0x)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        return tmp%1#0

subroutine test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint() -> void:
    block@0: // L9
        let tmp%0#0: biguint = test_cases.reinterpret_cast.contract.bytes_to_biguint()
        let tmp%1#0: bool = (b!= tmp%0#0 0b)
        (assert tmp%1#0)
        return 

subroutine test_cases.reinterpret_cast.contract.Contract.__algopy_default_create() -> void:
    block@0: // L1
        return 