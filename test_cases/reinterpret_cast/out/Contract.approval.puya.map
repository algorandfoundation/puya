{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAKK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;AAAA;AAAA;;AADL;;AAAA;;;;;;;;;AAKA;;;AAEe;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "10": {
      "op": "pushbytess 0x4034b731 0x7e9fd4cf // method \"bytes_to_bool()bool\", method \"test_bytes_to_biguint()void\""
    },
    "22": {
      "op": "txna ApplicationArgs 0"
    },
    "25": {
      "op": "match main_bytes_to_bool_route@3 main_test_bytes_to_biguint_route@4"
    },
    "31": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "32": {
      "op": "return"
    },
    "33": {
      "block": "main_test_bytes_to_biguint_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "35": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "36": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "37": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "39": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "40": {
      "callsub": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint",
      "op": "callsub test_bytes_to_biguint"
    },
    "43": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "44": {
      "op": "return"
    },
    "45": {
      "block": "main_bytes_to_bool_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "47": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "48": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "49": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "51": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "52": {
      "op": "pushbytes 0x151f7c7500",
      "defined_out": [
        "0x151f7c7500"
      ],
      "stack_out": [
        "0x151f7c7500"
      ]
    },
    "59": {
      "op": "log",
      "stack_out": []
    },
    "60": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "return"
    },
    "62": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "64": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "67": {
      "op": "txn ApplicationID"
    },
    "69": {
      "op": "!"
    },
    "70": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "71": {
      "op": "intc_0 // 1"
    },
    "72": {
      "op": "return"
    },
    "73": {
      "subroutine": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint",
      "params": {},
      "block": "test_bytes_to_biguint",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "76": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "77": {
      "op": "assert",
      "stack_out": []
    },
    "78": {
      "retsub": true,
      "op": "retsub"
    }
  }
}