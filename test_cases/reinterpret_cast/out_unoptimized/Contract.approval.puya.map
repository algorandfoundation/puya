{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;AAAA;AAKK;;;;;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWyB;;AAA1B;;;;AAXC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;;;AAFe;;AAAL;AAAA;AAAA;AAAP;;;;AAIO;;;AAAA;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "b main_block@0"
    },
    "8": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "11": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "14": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "15": {
      "op": "bz main___algopy_default_create@9",
      "stack_out": []
    },
    "18": {
      "op": "b main_abi_routing@2"
    },
    "21": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "23": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "24": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "25": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "26": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "28": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "29": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "30": {
      "op": "bz main_create_NoOp@7",
      "stack_out": []
    },
    "33": {
      "op": "b main_call_NoOp@3"
    },
    "36": {
      "block": "main_call_NoOp@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "39": {
      "op": "pushbytes 0x4034b731 // method \"bytes_to_bool()bool\"",
      "defined_out": [
        "Method(bytes_to_bool()bool)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(bytes_to_bool()bool)"
      ]
    },
    "45": {
      "op": "pushbytes 0x7e9fd4cf // method \"test_bytes_to_biguint()void\"",
      "defined_out": [
        "Method(bytes_to_bool()bool)",
        "Method(test_bytes_to_biguint()void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(bytes_to_bool()bool)",
        "Method(test_bytes_to_biguint()void)"
      ]
    },
    "51": {
      "op": "uncover 2",
      "stack_out": [
        "Method(bytes_to_bool()bool)",
        "Method(test_bytes_to_biguint()void)",
        "tmp%6#0"
      ]
    },
    "53": {
      "op": "match main_bytes_to_bool_route@4 main_test_bytes_to_biguint_route@5",
      "stack_out": []
    },
    "59": {
      "op": "b main_switch_case_next@6"
    },
    "62": {
      "block": "main_switch_case_next@6",
      "stack_in": [],
      "op": "b main_after_if_else@8"
    },
    "65": {
      "block": "main_after_if_else@8",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "68": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "69": {
      "block": "main_test_bytes_to_biguint_route@5",
      "stack_in": [],
      "callsub": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint[routing]",
      "op": "callsub test_bytes_to_biguint"
    },
    "72": {
      "op": "b main_switch_case_next@6"
    },
    "75": {
      "block": "main_bytes_to_bool_route@4",
      "stack_in": [],
      "callsub": "test_cases.reinterpret_cast.contract.Contract.bytes_to_bool[routing]",
      "op": "callsub bytes_to_bool"
    },
    "78": {
      "op": "b main_switch_case_next@6"
    },
    "81": {
      "block": "main_create_NoOp@7",
      "stack_in": [],
      "op": "b main_after_if_else@8"
    },
    "84": {
      "block": "main___algopy_default_create@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "86": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "87": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "88": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "90": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "91": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "92": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "93": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "94": {
      "op": "b main_block@12"
    },
    "97": {
      "block": "main_block@12",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.reinterpret_cast.contract.Contract.__algopy_default_create@13"
    },
    "100": {
      "block": "main_after_inlined_test_cases.reinterpret_cast.contract.Contract.__algopy_default_create@13",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "101": {
      "op": "return",
      "stack_out": []
    },
    "102": {
      "subroutine": "test_cases.reinterpret_cast.contract.bytes_to_biguint",
      "params": {},
      "block": "bytes_to_biguint",
      "stack_in": [],
      "op": "b bytes_to_biguint_block@0"
    },
    "105": {
      "block": "bytes_to_biguint_block@0",
      "stack_in": [],
      "op": "pushbytes 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "107": {
      "retsub": true,
      "op": "retsub"
    },
    "108": {
      "subroutine": "test_cases.reinterpret_cast.contract.Contract.bytes_to_bool[routing]",
      "params": {},
      "block": "bytes_to_bool",
      "stack_in": [],
      "op": "b bytes_to_bool_block@0"
    },
    "111": {
      "block": "bytes_to_bool_block@0",
      "stack_in": [],
      "callsub": "test_cases.reinterpret_cast.contract.Contract.bytes_to_bool",
      "op": "callsub test_cases.reinterpret_cast.contract.Contract.bytes_to_bool",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "114": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "117": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0"
      ]
    },
    "118": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%0#0"
      ]
    },
    "120": {
      "op": "setbit",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "121": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "127": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "129": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "130": {
      "op": "log",
      "stack_out": []
    },
    "131": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "132": {
      "op": "return",
      "stack_out": []
    },
    "133": {
      "subroutine": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint[routing]",
      "params": {},
      "block": "test_bytes_to_biguint",
      "stack_in": [],
      "op": "b test_bytes_to_biguint_block@0"
    },
    "136": {
      "block": "test_bytes_to_biguint_block@0",
      "stack_in": [],
      "callsub": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint",
      "op": "callsub test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint"
    },
    "139": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "140": {
      "op": "return",
      "stack_out": []
    },
    "141": {
      "subroutine": "test_cases.reinterpret_cast.contract.Contract.bytes_to_bool",
      "params": {},
      "block": "test_cases.reinterpret_cast.contract.Contract.bytes_to_bool",
      "stack_in": [],
      "op": "b test_cases.reinterpret_cast.contract.Contract.bytes_to_bool_block@0"
    },
    "144": {
      "block": "test_cases.reinterpret_cast.contract.Contract.bytes_to_bool_block@0",
      "stack_in": [],
      "op": "pushbytes 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "146": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "147": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "148": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "149": {
      "retsub": true,
      "op": "retsub"
    },
    "150": {
      "subroutine": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint",
      "params": {},
      "block": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint",
      "stack_in": [],
      "op": "b test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint_block@0"
    },
    "153": {
      "block": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint_block@0",
      "stack_in": [],
      "callsub": "test_cases.reinterpret_cast.contract.bytes_to_biguint",
      "op": "callsub bytes_to_biguint",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "156": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x"
      ]
    },
    "158": {
      "op": "b!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "159": {
      "op": "assert",
      "stack_out": []
    },
    "160": {
      "retsub": true,
      "op": "retsub"
    }
  }
}