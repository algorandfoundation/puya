{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;AAKK;;;;;;AAJA;;;;;;AADL;;;AAAA;;AAAA;;;;;;;;;AAAA;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAY8B;;AAA1B;;;;AAXC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;;;AAFe;;AAAL;AAAA;AAAA;AAAP;;;;AAIO;;;AAAA;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "b main_block@0"
    },
    "8": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "11": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "14": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "15": {
      "op": "bz main_bare_routing@16",
      "stack_out": []
    },
    "18": {
      "op": "b main_abi_routing@2"
    },
    "21": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "match",
      "stack_out": []
    },
    "26": {
      "op": "b main_route_NoOp@3"
    },
    "29": {
      "block": "main_route_NoOp@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "31": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "32": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "33": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "34": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "37": {
      "op": "match",
      "stack_out": []
    },
    "39": {
      "op": "b main_switch_case_default@4"
    },
    "42": {
      "block": "main_switch_case_default@4",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "44": {
      "op": "bz main_create_NoOp@10",
      "stack_out": []
    },
    "47": {
      "op": "b main_call_NoOp@5"
    },
    "50": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "53": {
      "op": "pushbytes 0x4034b731 // method \"bytes_to_bool()bool\"",
      "defined_out": [
        "Method(bytes_to_bool()bool)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(bytes_to_bool()bool)"
      ]
    },
    "59": {
      "op": "pushbytes 0x7e9fd4cf // method \"test_bytes_to_biguint()void\"",
      "defined_out": [
        "Method(bytes_to_bool()bool)",
        "Method(test_bytes_to_biguint()void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(bytes_to_bool()bool)",
        "Method(test_bytes_to_biguint()void)"
      ]
    },
    "65": {
      "op": "uncover 2",
      "stack_out": [
        "Method(bytes_to_bool()bool)",
        "Method(test_bytes_to_biguint()void)",
        "tmp%7#0"
      ]
    },
    "67": {
      "op": "match main_bytes_to_bool_route@6 main_test_bytes_to_biguint_route@7",
      "stack_out": []
    },
    "73": {
      "op": "b main_switch_case_default@8"
    },
    "76": {
      "block": "main_switch_case_default@8",
      "stack_in": [],
      "op": "b main_switch_case_next@9"
    },
    "79": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@13"
    },
    "82": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "b main_switch_case_next@14"
    },
    "85": {
      "block": "main_switch_case_next@14",
      "stack_in": [],
      "op": "b main_switch_case_next@15"
    },
    "88": {
      "block": "main_switch_case_next@15",
      "stack_in": [],
      "op": "b main_after_if_else@20"
    },
    "91": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "92": {
      "block": "main_test_bytes_to_biguint_route@7",
      "stack_in": [],
      "callsub": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint[routing]",
      "op": "callsub test_bytes_to_biguint"
    },
    "95": {
      "op": "b main_switch_case_next@9"
    },
    "98": {
      "block": "main_bytes_to_bool_route@6",
      "stack_in": [],
      "callsub": "test_cases.reinterpret_cast.contract.Contract.bytes_to_bool[routing]",
      "op": "callsub bytes_to_bool"
    },
    "101": {
      "op": "b main_switch_case_next@9"
    },
    "104": {
      "block": "main_create_NoOp@10",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "107": {
      "op": "match",
      "stack_out": []
    },
    "109": {
      "op": "b main_switch_case_default@11"
    },
    "112": {
      "block": "main_switch_case_default@11",
      "stack_in": [],
      "op": "b main_switch_case_next@12"
    },
    "115": {
      "block": "main_switch_case_next@12",
      "stack_in": [],
      "op": "b main_after_if_else@13"
    },
    "118": {
      "block": "main_bare_routing@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "120": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "121": {
      "op": "uncover 1",
      "stack_out": [
        "0",
        "tmp%9#0"
      ]
    },
    "123": {
      "op": "match main___algopy_default_create@17",
      "stack_out": []
    },
    "127": {
      "op": "b main_switch_case_default@18"
    },
    "130": {
      "block": "main_switch_case_default@18",
      "stack_in": [],
      "op": "b main_switch_case_next@19"
    },
    "133": {
      "block": "main_switch_case_next@19",
      "stack_in": [],
      "op": "b main_after_if_else@20"
    },
    "136": {
      "block": "main___algopy_default_create@17",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "138": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "139": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "140": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "141": {
      "op": "b main_block@22"
    },
    "144": {
      "block": "main_block@22",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.reinterpret_cast.contract.Contract.__algopy_default_create@23"
    },
    "147": {
      "block": "main_after_inlined_test_cases.reinterpret_cast.contract.Contract.__algopy_default_create@23",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "148": {
      "op": "return",
      "stack_out": []
    },
    "149": {
      "subroutine": "test_cases.reinterpret_cast.contract.bytes_to_biguint",
      "params": {},
      "block": "bytes_to_biguint",
      "stack_in": [],
      "op": "b bytes_to_biguint_block@0"
    },
    "152": {
      "block": "bytes_to_biguint_block@0",
      "stack_in": [],
      "op": "pushbytes 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "154": {
      "retsub": true,
      "op": "retsub"
    },
    "155": {
      "subroutine": "test_cases.reinterpret_cast.contract.Contract.bytes_to_bool[routing]",
      "params": {},
      "block": "bytes_to_bool",
      "stack_in": [],
      "op": "b bytes_to_bool_block@0"
    },
    "158": {
      "block": "bytes_to_bool_block@0",
      "stack_in": [],
      "callsub": "test_cases.reinterpret_cast.contract.Contract.bytes_to_bool",
      "op": "callsub test_cases.reinterpret_cast.contract.Contract.bytes_to_bool",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "161": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "164": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0"
      ]
    },
    "165": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%0#0"
      ]
    },
    "167": {
      "op": "setbit",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "168": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "174": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "176": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "177": {
      "op": "log",
      "stack_out": []
    },
    "178": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "179": {
      "op": "return",
      "stack_out": []
    },
    "180": {
      "subroutine": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint[routing]",
      "params": {},
      "block": "test_bytes_to_biguint",
      "stack_in": [],
      "op": "b test_bytes_to_biguint_block@0"
    },
    "183": {
      "block": "test_bytes_to_biguint_block@0",
      "stack_in": [],
      "callsub": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint",
      "op": "callsub test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint"
    },
    "186": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "187": {
      "op": "return",
      "stack_out": []
    },
    "188": {
      "subroutine": "test_cases.reinterpret_cast.contract.Contract.bytes_to_bool",
      "params": {},
      "block": "test_cases.reinterpret_cast.contract.Contract.bytes_to_bool",
      "stack_in": [],
      "op": "b test_cases.reinterpret_cast.contract.Contract.bytes_to_bool_block@0"
    },
    "191": {
      "block": "test_cases.reinterpret_cast.contract.Contract.bytes_to_bool_block@0",
      "stack_in": [],
      "op": "pushbytes 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "193": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "194": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "195": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "196": {
      "retsub": true,
      "op": "retsub"
    },
    "197": {
      "subroutine": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint",
      "params": {},
      "block": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint",
      "stack_in": [],
      "op": "b test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint_block@0"
    },
    "200": {
      "block": "test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint_block@0",
      "stack_in": [],
      "callsub": "test_cases.reinterpret_cast.contract.bytes_to_biguint",
      "op": "callsub bytes_to_biguint",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "203": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x"
      ]
    },
    "205": {
      "op": "b!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "206": {
      "op": "assert",
      "stack_out": []
    },
    "207": {
      "retsub": true,
      "op": "retsub"
    }
  }
}