main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "bytes_to_bool()bool" => block@3, method "test_bytes_to_biguint()void" => block@4, * => block@5}
    block@3: // bytes_to_bool_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let tmp%7#0: bool = test_cases.reinterpret_cast.contract.Contract.bytes_to_bool()
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%7#0)
        let as_Encoded(bool8)%0#0: Encoded(bool8) = encoded_bool%0#0
        let tmp%8#0: bytes = (concat 0x151f7c75 as_Encoded(bool8)%0#0)
        (log tmp%8#0)
        let test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__%0#0
        goto block@12
    block@4: // test_bytes_to_biguint_route_L9
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (== tmp%9#0 NoOp)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%12#0) // can only call when not creating
        test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint()
        let test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__%0#0
        goto block@12
    block@5: // switch_case_default_L4
        goto block@6
    block@6: // switch_case_next_L4
        goto block@11
    block@7: // bare_routing_L4
        let tmp%13#0: uint64 = (txn OnCompletion)
        switch tmp%13#0 {0u => block@8, * => block@9}
    block@8: // __algopy_default_create_L1
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (== tmp%14#0 0u)
        (assert tmp%15#0) // can only call when creating
        goto block@13
    block@13: // L1
        goto block@14
    block@14: // after_inlined_test_cases.reinterpret_cast.contract.Contract.__algopy_default_create_L1
        let test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__%0#0
        goto block@12
    block@9: // switch_case_default_L4
        goto block@10
    block@10: // switch_case_next_L4
        goto block@11
    block@11: // after_if_else_L4
        let test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__%0#0
        goto block@12
    block@12: // after_inlined_test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.reinterpret_cast.contract.bytes_to_biguint() -> biguint:
    block@0: // L14
        return 0x

subroutine test_cases.reinterpret_cast.contract.Contract.bytes_to_bool() -> bool:
    block@0: // L5
        let tmp%0#0: uint64 = (len 0x)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        return tmp%1#0

subroutine test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint() -> void:
    block@0: // L9
        let tmp%0#0: biguint = test_cases.reinterpret_cast.contract.bytes_to_biguint()
        let tmp%1#0: bool = (b!= tmp%0#0 0b)
        (assert tmp%1#0)
        return 