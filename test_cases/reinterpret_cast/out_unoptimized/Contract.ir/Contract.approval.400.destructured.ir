main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@7, 2u => block@10, 3u => block@11, 4u => block@12, 5u => block@13, 6u => block@14, 7u => block@15, 8u => block@16, 9u => block@17, 10u => block@18, 11u => block@19, * => block@20}
    block@2: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "bytes_to_bool()bool" => block@3, method "test_bytes_to_biguint()void" => block@4, * => block@5}
    block@3: // bytes_to_bool_route_L5
        test_cases.reinterpret_cast.contract.Contract.bytes_to_bool[routing]()
        goto block@6
    block@4: // test_bytes_to_biguint_route_L9
        test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint[routing]()
        goto block@6
    block@5: // switch_case_default_L4
        goto block@6
    block@6: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@7: // switch_case_1_L4
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@8 : block@9
    block@8: // __algopy_default_create_L1
        goto block@22
    block@22: // L1
        goto block@23
    block@23: // after_inlined_test_cases.reinterpret_cast.contract.Contract.__algopy_default_create_L1
        exit 1u
    block@9: // else_body_L4
        fail // this contract does not implement the given ABI method for create NoOp
    block@10: // switch_case_2_L4
        goto block@20
    block@11: // switch_case_3_L4
        goto block@20
    block@12: // switch_case_4_L4
        goto block@20
    block@13: // switch_case_5_L4
        goto block@20
    block@14: // switch_case_6_L4
        goto block@20
    block@15: // switch_case_7_L4
        goto block@20
    block@16: // switch_case_8_L4
        goto block@20
    block@17: // switch_case_9_L4
        goto block@20
    block@18: // switch_case_10_L4
        goto block@20
    block@19: // switch_case_11_L4
        goto block@20
    block@20: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@21: // after_inlined_test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.reinterpret_cast.contract.bytes_to_biguint() -> biguint:
    block@0: // L14
        return 0x

subroutine test_cases.reinterpret_cast.contract.Contract.bytes_to_bool[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bool = test_cases.reinterpret_cast.contract.Contract.bytes_to_bool()
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%0#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%1#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint[routing]() -> void:
    block@0: // L9
        test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint()
        exit 1u

subroutine test_cases.reinterpret_cast.contract.Contract.bytes_to_bool() -> bool:
    block@0: // L5
        let tmp%0#0: uint64 = (len 0x)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        return tmp%1#0

subroutine test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint() -> void:
    block@0: // L9
        let tmp%0#0: biguint = test_cases.reinterpret_cast.contract.bytes_to_biguint()
        let tmp%1#0: bool = (b!= tmp%0#0 0b)
        (assert tmp%1#0)
        return 