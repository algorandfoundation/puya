#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0
    b block@0

block@0:
    b block@1

block@1:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    intc_1 // 0
    intc_0 // 1
    pushint 2 // 2
    pushint 3 // 3
    pushint 4 // 4
    pushint 5 // 5
    pushint 6 // 6
    pushint 7 // 7
    pushint 8 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_ClearState:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_ClearState:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_OptIn:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_OptIn:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_NoOp:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txn NumAppArgs
    intc_1 // 0
    ==
    bz else_body@9
    b __algopy_default_create@8

__algopy_default_create@8:
    b block@22

block@22:
    b after_inlined_test_cases.reinterpret_cast.contract.Contract.__algopy_default_create@23

after_inlined_test_cases.reinterpret_cast.contract.Contract.__algopy_default_create@23:
    intc_0 // 1
    return

else_body@9:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x4034b731 // method "bytes_to_bool()bool"
    pushbytes 0x7e9fd4cf // method "test_bytes_to_biguint()void"
    uncover 2
    match bytes_to_bool_route@3 test_bytes_to_biguint_route@4
    b switch_case_default@5

switch_case_default@5:
    b switch_case_next@6

switch_case_next@6:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    err // this contract does not implement the given ABI method for call NoOp

test_bytes_to_biguint_route@4:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    callsub test_bytes_to_biguint
    b switch_case_next@6

bytes_to_bool_route@3:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    callsub bytes_to_bool
    b switch_case_next@6


// test_cases.reinterpret_cast.contract.bytes_to_biguint() -> bytes:
bytes_to_biguint:
    b bytes_to_biguint_block@0

bytes_to_biguint_block@0:
    // reinterpret_cast/contract.py:16
    // return BigUInt.from_bytes(Bytes())
    pushbytes 0x
    retsub


// test_cases.reinterpret_cast.contract.Contract.bytes_to_bool[routing]() -> void:
bytes_to_bool:
    b bytes_to_bool_block@0

bytes_to_bool_block@0:
    // reinterpret_cast/contract.py:5
    // @arc4.abimethod()
    callsub test_cases.reinterpret_cast.contract.Contract.bytes_to_bool
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint[routing]() -> void:
test_bytes_to_biguint:
    b test_bytes_to_biguint_block@0

test_bytes_to_biguint_block@0:
    // reinterpret_cast/contract.py:9
    // @arc4.abimethod()
    callsub test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint
    intc_0 // 1
    return


// test_cases.reinterpret_cast.contract.Contract.bytes_to_bool() -> uint64:
test_cases.reinterpret_cast.contract.Contract.bytes_to_bool:
    b test_cases.reinterpret_cast.contract.Contract.bytes_to_bool_block@0

test_cases.reinterpret_cast.contract.Contract.bytes_to_bool_block@0:
    // reinterpret_cast/contract.py:7
    // return bool(Bytes())
    pushbytes 0x
    len
    intc_1 // 0
    !=
    retsub


// test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint() -> void:
test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint:
    b test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint_block@0

test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint_block@0:
    // reinterpret_cast/contract.py:11
    // assert bytes_to_biguint()
    callsub bytes_to_biguint
    pushbytes 0x
    b!=
    assert
    retsub
