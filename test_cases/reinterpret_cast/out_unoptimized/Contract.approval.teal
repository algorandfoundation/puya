#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    b block@0

block@0:
    b block@1

block@1:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __algopy_default_create@10
    b abi_routing@2

abi_routing@2:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz create_NoOp@8
    b call_NoOp@3

call_NoOp@3:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x4034b731 // method "bytes_to_bool()bool"
    pushbytes 0x7e9fd4cf // method "test_bytes_to_biguint()void"
    uncover 2
    match bytes_to_bool_route@4 test_bytes_to_biguint_route@5
    b switch_case_default@6

switch_case_default@6:
    b switch_case_next@7

switch_case_next@7:
    b after_if_else@9

after_if_else@9:
    b after_if_else@11

after_if_else@11:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    err

test_bytes_to_biguint_route@5:
    // reinterpret_cast/contract.py:9
    // @arc4.abimethod()
    callsub test_bytes_to_biguint
    b switch_case_next@7

bytes_to_bool_route@4:
    // reinterpret_cast/contract.py:5
    // @arc4.abimethod()
    callsub bytes_to_bool
    b switch_case_next@7

create_NoOp@8:
    b after_if_else@9

__algopy_default_create@10:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b block@13

block@13:
    b after_inlined_test_cases.reinterpret_cast.contract.Contract.__algopy_default_create@14

after_inlined_test_cases.reinterpret_cast.contract.Contract.__algopy_default_create@14:
    intc_1 // 1
    return


// test_cases.reinterpret_cast.contract.bytes_to_biguint() -> bytes:
bytes_to_biguint:
    b bytes_to_biguint_block@0

bytes_to_biguint_block@0:
    // reinterpret_cast/contract.py:16
    // return BigUInt.from_bytes(Bytes())
    pushbytes 0x
    retsub


// test_cases.reinterpret_cast.contract.Contract.bytes_to_bool[routing]() -> void:
bytes_to_bool:
    b bytes_to_bool_block@0

bytes_to_bool_block@0:
    // reinterpret_cast/contract.py:5
    // @arc4.abimethod()
    callsub test_cases.reinterpret_cast.contract.Contract.bytes_to_bool
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint[routing]() -> void:
test_bytes_to_biguint:
    b test_bytes_to_biguint_block@0

test_bytes_to_biguint_block@0:
    // reinterpret_cast/contract.py:9
    // @arc4.abimethod()
    callsub test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint
    intc_1 // 1
    return


// test_cases.reinterpret_cast.contract.Contract.bytes_to_bool() -> uint64:
test_cases.reinterpret_cast.contract.Contract.bytes_to_bool:
    b test_cases.reinterpret_cast.contract.Contract.bytes_to_bool_block@0

test_cases.reinterpret_cast.contract.Contract.bytes_to_bool_block@0:
    // reinterpret_cast/contract.py:7
    // return bool(Bytes())
    pushbytes 0x
    len
    intc_0 // 0
    !=
    retsub


// test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint() -> void:
test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint:
    b test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint_block@0

test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint_block@0:
    // reinterpret_cast/contract.py:11
    // assert bytes_to_biguint()
    callsub bytes_to_biguint
    pushbytes 0x
    b!=
    assert
    retsub
