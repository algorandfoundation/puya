#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1

main_block@1:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@7

main_abi_routing@2:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x4034b731 // method "bytes_to_bool()bool"
    pushbytes 0x7e9fd4cf // method "test_bytes_to_biguint()void"
    uncover 2
    match main_bytes_to_bool_route@3 main_test_bytes_to_biguint_route@4

main_switch_case_default@5:

main_switch_case_next@6:

main_after_if_else@11:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__@12:
    return

main_test_bytes_to_biguint_route@4:
    // reinterpret_cast/contract.py:9
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_bytes_to_biguint
    intc_1 // 1
    b main_after_inlined_test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__@12

main_bytes_to_bool_route@3:
    // reinterpret_cast/contract.py:5
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub bytes_to_bool
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__@12

main_bare_routing@7:
    // reinterpret_cast/contract.py:4
    // class Contract(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@8

main_switch_case_default@9:

main_switch_case_next@10:
    b main_after_if_else@11

main___algopy_default_create@8:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@13:

main_after_inlined_test_cases.reinterpret_cast.contract.Contract.__algopy_default_create@14:
    intc_1 // 1
    b main_after_inlined_test_cases.reinterpret_cast.contract.Contract.__puya_arc4_router__@12


// test_cases.reinterpret_cast.contract.Contract.bytes_to_bool() -> uint64:
bytes_to_bool:
    // reinterpret_cast/contract.py:5-6
    // @arc4.abimethod()
    // def bytes_to_bool(self) -> bool:
    proto 0 1
    // reinterpret_cast/contract.py:7
    // return bool(Bytes())
    pushbytes 0x
    len
    intc_0 // 0
    !=
    retsub


// test_cases.reinterpret_cast.contract.Contract.test_bytes_to_biguint() -> void:
test_bytes_to_biguint:
    // reinterpret_cast/contract.py:9-10
    // @arc4.abimethod()
    // def test_bytes_to_biguint(self) -> None:
    proto 0 0
    // reinterpret_cast/contract.py:11
    // assert bytes_to_biguint()
    callsub bytes_to_biguint
    pushbytes 0x
    b!=
    assert
    retsub


// test_cases.reinterpret_cast.contract.bytes_to_biguint() -> bytes:
bytes_to_biguint:
    // reinterpret_cast/contract.py:14-15
    // @subroutine
    // def bytes_to_biguint() -> BigUInt:
    proto 0 1
    // reinterpret_cast/contract.py:16
    // return BigUInt.from_bytes(Bytes())
    pushbytes 0x
    retsub
