#pragma version 10

test_cases.contains.contract.MyContract.approval_program:
    int 10
    dup
    int 15
    byte 0x66697665
    callsub is_in_tuple_1
    int 5
    int 10
    int 15
    byte 0x66697665
    callsub is_in_tuple_1
    swap
    assert // Should be true
    !
    assert // Should be false
    byte 0x68656c6c6f
    dup
    int 0
    byte 0x626f6e6a6f7572
    callsub is_in_tuple_2
    byte 0x6369616f
    byte 0x68656c6c6f
    int 0
    byte 0x626f6e6a6f7572
    callsub is_in_tuple_2
    swap
    assert // Should be true
    !
    assert // Should be false
    byte 0x1d65e22bcbbf
    dup
    byte 0x07acf5cae41e
    callsub is_in_tuple_3
    byte 0x3acbc457977e
    byte 0x1d65e22bcbbf
    byte 0x07acf5cae41e
    callsub is_in_tuple_3
    swap
    assert // Should be true
    !
    assert // Should be false
    int 1
    return


// test_cases.contains.contract.MyContract.is_in_tuple_1(x: uint64, y.0: uint64, y.1: uint64, y.2: bytes) -> uint64:
is_in_tuple_1:
    proto 4 1
    frame_dig -4
    frame_dig -3
    ==
    frame_dig -4
    frame_dig -2
    ==
    ||
    retsub


// test_cases.contains.contract.MyContract.is_in_tuple_2(x: bytes, y.0: bytes, y.1: uint64, y.2: bytes) -> uint64:
is_in_tuple_2:
    proto 4 1
    frame_dig -4
    frame_dig -3
    ==
    frame_dig -4
    frame_dig -1
    ==
    ||
    retsub


// test_cases.contains.contract.MyContract.is_in_tuple_3(x: bytes, y.0: bytes, y.1: bytes) -> uint64:
is_in_tuple_3:
    proto 3 1
    frame_dig -3
    frame_dig -2
    b==
    frame_dig -3
    frame_dig -1
    b==
    ||
    retsub
