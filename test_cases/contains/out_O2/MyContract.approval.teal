#pragma version 10

test_cases.contains.contract.MyContract.approval_program:
    int 10
    dup
    int 15
    byte 0x66697665
    callsub is_in_tuple_1
    int 5
    int 10
    int 15
    byte 0x66697665
    callsub is_in_tuple_1
    swap
    assert // Should be true
    !
    assert // Should be false
    byte 0x68656c6c6f
    dup
    int 0
    byte 0x626f6e6a6f7572
    callsub is_in_tuple_2
    byte 0x6369616f
    byte 0x68656c6c6f
    int 0
    byte 0x626f6e6a6f7572
    callsub is_in_tuple_2
    swap
    assert // Should be true
    !
    assert // Should be false
    byte 0x1d65e22bcbbf
    dup
    byte 0x07acf5cae41e
    callsub is_in_tuple_3
    byte 0x3acbc457977e
    byte 0x1d65e22bcbbf
    byte 0x07acf5cae41e
    callsub is_in_tuple_3
    swap
    assert // Should be true
    !
    assert // Should be false
    callsub test_string_types
    callsub test_numeric_types
    int 1
    return


// test_cases.contains.contract.MyContract.is_in_tuple_1(x: uint64, y.0: uint64, y.1: uint64, y.2: bytes) -> uint64:
is_in_tuple_1:
    proto 4 1
    frame_dig -4
    frame_dig -3
    ==
    bnz is_in_tuple_1_bool_true@2
    frame_dig -4
    frame_dig -2
    ==
    bz is_in_tuple_1_bool_false@3

is_in_tuple_1_bool_true@2:
    int 1
    b is_in_tuple_1_bool_merge@4

is_in_tuple_1_bool_false@3:
    int 0

is_in_tuple_1_bool_merge@4:
    retsub


// test_cases.contains.contract.MyContract.is_in_tuple_2(x: bytes, y.0: bytes, y.1: uint64, y.2: bytes) -> uint64:
is_in_tuple_2:
    proto 4 1
    frame_dig -4
    frame_dig -3
    ==
    bnz is_in_tuple_2_bool_true@2
    frame_dig -4
    frame_dig -1
    ==
    bz is_in_tuple_2_bool_false@3

is_in_tuple_2_bool_true@2:
    int 1
    b is_in_tuple_2_bool_merge@4

is_in_tuple_2_bool_false@3:
    int 0

is_in_tuple_2_bool_merge@4:
    retsub


// test_cases.contains.contract.MyContract.is_in_tuple_3(x: bytes, y.0: bytes, y.1: bytes) -> uint64:
is_in_tuple_3:
    proto 3 1
    frame_dig -3
    frame_dig -2
    b==
    bnz is_in_tuple_3_bool_true@2
    frame_dig -3
    frame_dig -1
    b==
    bz is_in_tuple_3_bool_false@3

is_in_tuple_3_bool_true@2:
    int 1
    b is_in_tuple_3_bool_merge@4

is_in_tuple_3_bool_false@3:
    int 0

is_in_tuple_3_bool_merge@4:
    retsub


// test_cases.contains.contract.MyContract.test_string_types() -> void:
test_string_types:
    proto 0 0
    int 0
    dupn 22
    callsub foo_string
    dup
    callsub foo_string
    callsub baz_string
    cover 2
    ==
    bnz test_string_types_bool_true@2
    frame_dig 23
    frame_dig 24
    ==
    bz test_string_types_bool_false@3

test_string_types_bool_true@2:
    int 1
    b test_string_types_bool_merge@4

test_string_types_bool_false@3:
    int 0

test_string_types_bool_merge@4:
    assert // foo in (foo, baz)
    callsub foo_string
    dup
    frame_bury 0
    callsub bar_string
    callsub baz_string
    frame_bury 19
    ==
    bnz test_string_types_bool_true@6
    frame_dig 0
    frame_dig 19
    ==
    bz test_string_types_bool_false@7

test_string_types_bool_true@6:
    int 1
    b test_string_types_bool_merge@8

test_string_types_bool_false@7:
    int 0

test_string_types_bool_merge@8:
    !
    assert // foo not in (bar, baz)
    callsub foo_arc4
    callsub baz_string
    frame_bury 8
    callsub bar_string
    frame_bury 9
    extract 2 0
    callsub foo_string
    dup
    frame_bury 1
    ==
    bnz test_string_types_bool_true@11
    frame_dig 1
    frame_dig 8
    ==
    bnz test_string_types_bool_true@11
    frame_dig 1
    frame_dig 9
    ==
    bz test_string_types_bool_false@12

test_string_types_bool_true@11:
    int 1
    b test_string_types_bool_merge@13

test_string_types_bool_false@12:
    int 0

test_string_types_bool_merge@13:
    assert // foo in (foo, baz, bar)
    callsub foo_arc4
    extract 2 0
    dup
    frame_bury 10
    callsub foo_string
    callsub baz_string
    frame_bury 11
    callsub bar_string
    frame_bury 12
    ==
    bnz test_string_types_bool_true@16
    frame_dig 10
    frame_dig 11
    ==
    bnz test_string_types_bool_true@16
    frame_dig 10
    frame_dig 12
    ==
    bz test_string_types_bool_false@17

test_string_types_bool_true@16:
    int 1
    b test_string_types_bool_merge@18

test_string_types_bool_false@17:
    int 0

test_string_types_bool_merge@18:
    assert // foo in (foo, baz, bar)
    callsub bar_arc4
    callsub baz_string
    frame_bury 13
    extract 2 0
    callsub foo_string
    dup
    frame_bury 2
    ==
    bnz test_string_types_bool_true@20
    frame_dig 2
    frame_dig 13
    ==
    bz test_string_types_bool_false@21

test_string_types_bool_true@20:
    int 1
    b test_string_types_bool_merge@22

test_string_types_bool_false@21:
    int 0

test_string_types_bool_merge@22:
    !
    assert // foo not in (bar, baz)
    callsub foo_arc4
    dup
    frame_bury 3
    callsub bar_arc4
    callsub baz_string
    frame_bury 14
    ==
    bnz test_string_types_bool_true@24
    frame_dig 3
    extract 2 0
    frame_dig 14
    ==
    bz test_string_types_bool_false@25

test_string_types_bool_true@24:
    int 1
    b test_string_types_bool_merge@26

test_string_types_bool_false@25:
    int 0

test_string_types_bool_merge@26:
    !
    assert // foo not in (bar, baz)
    callsub bar_arc4
    callsub baz_string
    frame_bury 15
    callsub foo_string
    frame_bury 16
    callsub one_u64
    pop
    extract 2 0
    callsub foo_string
    dup
    frame_bury 4
    ==
    bnz test_string_types_bool_true@29
    frame_dig 4
    frame_dig 15
    ==
    bnz test_string_types_bool_true@29
    frame_dig 4
    frame_dig 16
    ==
    bz test_string_types_bool_false@30

test_string_types_bool_true@29:
    int 1
    b test_string_types_bool_merge@31

test_string_types_bool_false@30:
    int 0

test_string_types_bool_merge@31:
    assert // foo in (bar, baz, foo, 1)
    callsub foo_arc4
    dup
    frame_bury 5
    callsub bar_arc4
    callsub baz_string
    frame_bury 17
    callsub foo_string
    frame_bury 18
    callsub one_u64
    pop
    ==
    bnz test_string_types_bool_true@34
    frame_dig 5
    extract 2 0
    dup
    frame_bury 20
    frame_dig 17
    ==
    bnz test_string_types_bool_true@34
    frame_dig 20
    frame_dig 18
    ==
    bz test_string_types_bool_false@35

test_string_types_bool_true@34:
    int 1
    b test_string_types_bool_merge@36

test_string_types_bool_false@35:
    int 0

test_string_types_bool_merge@36:
    assert // foo in (bar, baz, foo, 1)
    callsub bar_arc4
    callsub baz_string
    frame_bury 21
    callsub one_u64
    pop
    extract 2 0
    callsub foo_string
    dup
    frame_bury 6
    ==
    bnz test_string_types_bool_true@38
    frame_dig 6
    frame_dig 21
    ==
    bz test_string_types_bool_false@39

test_string_types_bool_true@38:
    int 1
    b test_string_types_bool_merge@40

test_string_types_bool_false@39:
    int 0

test_string_types_bool_merge@40:
    !
    assert // foo not in (bar, baz, 1)
    callsub foo_arc4
    dup
    frame_bury 7
    callsub bar_arc4
    callsub baz_string
    frame_bury 22
    callsub one_u64
    pop
    ==
    bnz test_string_types_bool_true@42
    frame_dig 7
    extract 2 0
    frame_dig 22
    ==
    bz test_string_types_bool_false@43

test_string_types_bool_true@42:
    int 1
    b test_string_types_bool_merge@44

test_string_types_bool_false@43:
    int 0

test_string_types_bool_merge@44:
    !
    assert // foo not in (bar, baz, 1)
    callsub foo_string
    pop
    callsub foo_arc4
    pop
    retsub


// test_cases.contains.contract.foo_string() -> bytes:
foo_string:
    proto 0 1
    byte "foo"
    retsub


// test_cases.contains.contract.baz_string() -> bytes:
baz_string:
    proto 0 1
    byte "baz"
    retsub


// test_cases.contains.contract.bar_string() -> bytes:
bar_string:
    proto 0 1
    byte "bar"
    retsub


// test_cases.contains.contract.foo_arc4() -> bytes:
foo_arc4:
    proto 0 1
    byte 0x0003666f6f
    retsub


// test_cases.contains.contract.bar_arc4() -> bytes:
bar_arc4:
    proto 0 1
    byte 0x0003626172
    retsub


// test_cases.contains.contract.one_u64() -> uint64:
one_u64:
    proto 0 1
    int 1
    retsub


// test_cases.contains.contract.MyContract.test_numeric_types() -> void:
test_numeric_types:
    proto 0 0
    int 0
    dupn 26
    byte ""
    dupn 8
    callsub one_u64
    dup
    callsub one_u64
    callsub two_u64
    cover 2
    ==
    bnz test_numeric_types_bool_true@2
    frame_dig 36
    frame_dig 37
    ==
    bz test_numeric_types_bool_false@3

test_numeric_types_bool_true@2:
    int 1
    b test_numeric_types_bool_merge@4

test_numeric_types_bool_false@3:
    int 0

test_numeric_types_bool_merge@4:
    assert // 1 in (1, 2)
    callsub one_u64
    dup
    frame_bury 27
    callsub two_u64
    frame_bury 35
    int 3
    ==
    bnz test_numeric_types_bool_true@6
    frame_dig 27
    frame_dig 35
    ==
    bz test_numeric_types_bool_false@7

test_numeric_types_bool_true@6:
    int 1
    b test_numeric_types_bool_merge@8

test_numeric_types_bool_false@7:
    int 0

test_numeric_types_bool_merge@8:
    !
    assert // 1 not in (3, 2)
    callsub one_u64
    dup
    frame_bury 30
    callsub one_u64
    callsub two_u8
    frame_bury 23
    ==
    bnz test_numeric_types_bool_true@11
    frame_dig 30
    int 3
    ==
    bnz test_numeric_types_bool_true@11
    frame_dig 30
    itob
    frame_dig 23
    b==
    bz test_numeric_types_bool_false@12

test_numeric_types_bool_true@11:
    int 1
    b test_numeric_types_bool_merge@13

test_numeric_types_bool_false@12:
    int 0

test_numeric_types_bool_merge@13:
    assert // 1 in (1, 3, 2)
    callsub one_arc4u64
    callsub two_u8
    frame_bury 13
    callsub one_u64
    dup
    frame_bury 32
    itob
    dup
    frame_bury 14
    b==
    bnz test_numeric_types_bool_true@16
    frame_dig 32
    int 4
    ==
    bnz test_numeric_types_bool_true@16
    frame_dig 13
    frame_dig 14
    b==
    bz test_numeric_types_bool_false@17

test_numeric_types_bool_true@16:
    int 1
    b test_numeric_types_bool_merge@18

test_numeric_types_bool_false@17:
    int 0

test_numeric_types_bool_merge@18:
    assert // 1 in (1, 4, 2)
    callsub one_arc4u64
    callsub two_u8
    frame_bury 15
    int 2
    itob
    dup
    frame_bury 16
    b==
    bnz test_numeric_types_bool_true@21
    frame_dig 15
    frame_dig 16
    b==
    bz test_numeric_types_bool_false@22

test_numeric_types_bool_true@21:
    int 1
    b test_numeric_types_bool_merge@23

test_numeric_types_bool_false@22:
    int 0

test_numeric_types_bool_merge@23:
    assert // 2 in (1, 3, 2)
    callsub two_u8
    dup
    frame_bury 7
    callsub one_arc4u64
    callsub two_u8
    frame_bury 17
    b==
    bnz test_numeric_types_bool_true@26
    int 3
    itob
    frame_dig 7
    b==
    bnz test_numeric_types_bool_true@26
    frame_dig 7
    frame_dig 17
    b==
    bz test_numeric_types_bool_false@27

test_numeric_types_bool_true@26:
    int 1
    b test_numeric_types_bool_merge@28

test_numeric_types_bool_false@27:
    int 0

test_numeric_types_bool_merge@28:
    assert // 2 in (1, 3, 2)
    callsub two_u8
    dup
    frame_bury 8
    callsub one_arc4u64
    b==
    bnz test_numeric_types_bool_true@31
    frame_dig 8
    frame_dig 16
    b==
    bnz test_numeric_types_bool_true@31
    int 3
    itob
    frame_dig 8
    b==
    bz test_numeric_types_bool_false@32

test_numeric_types_bool_true@31:
    int 1
    b test_numeric_types_bool_merge@33

test_numeric_types_bool_false@32:
    int 0

test_numeric_types_bool_merge@33:
    assert // 2 in (1, 2, 3)
    callsub three_u512
    dup
    frame_bury 9
    int 3
    itob
    dup
    frame_bury 18
    b==
    bnz test_numeric_types_bool_true@35
    int 4
    itob
    frame_dig 9
    b==
    bz test_numeric_types_bool_false@36

test_numeric_types_bool_true@35:
    int 1
    b test_numeric_types_bool_merge@37

test_numeric_types_bool_false@36:
    int 0

test_numeric_types_bool_merge@37:
    assert // 3 in (3, 4)
    callsub four_biguint
    dup
    frame_bury 10
    int 5
    itob
    dup
    frame_bury 19
    b==
    bnz test_numeric_types_bool_true@39
    int 4
    itob
    frame_dig 10
    b==
    bz test_numeric_types_bool_false@40

test_numeric_types_bool_true@39:
    int 1
    b test_numeric_types_bool_merge@41

test_numeric_types_bool_false@40:
    int 0

test_numeric_types_bool_merge@41:
    assert // 4 in (5, 4)
    callsub one_u64
    dup
    frame_bury 33
    callsub two_u8
    frame_bury 20
    int 5
    ==
    bnz test_numeric_types_bool_true@43
    frame_dig 33
    itob
    frame_dig 20
    b==
    bz test_numeric_types_bool_false@44

test_numeric_types_bool_true@43:
    int 1
    b test_numeric_types_bool_merge@45

test_numeric_types_bool_false@44:
    int 0

test_numeric_types_bool_merge@45:
    !
    assert // 1 not in (5, 2)
    callsub one_u64
    dup
    frame_bury 34
    callsub two_u8
    frame_bury 21
    int 3
    ==
    bnz test_numeric_types_bool_true@47
    frame_dig 34
    itob
    frame_dig 21
    b==
    bz test_numeric_types_bool_false@48

test_numeric_types_bool_true@47:
    int 1
    b test_numeric_types_bool_merge@49

test_numeric_types_bool_false@48:
    int 0

test_numeric_types_bool_merge@49:
    !
    assert // 1 not in (app(1), 3, 2)
    callsub one_u64
    dup
    frame_bury 28
    callsub two_u8
    frame_bury 22
    int 3
    ==
    bnz test_numeric_types_bool_true@51
    frame_dig 28
    itob
    frame_dig 22
    b==
    bz test_numeric_types_bool_false@52

test_numeric_types_bool_true@51:
    int 1
    b test_numeric_types_bool_merge@53

test_numeric_types_bool_false@52:
    int 0

test_numeric_types_bool_merge@53:
    !
    assert // 1 not in (3, 2)
    callsub one_arc4u64
    frame_dig 16
    b==
    bnz test_numeric_types_bool_true@55
    int 0
    b test_numeric_types_bool_merge@57

test_numeric_types_bool_true@55:
    int 1

test_numeric_types_bool_merge@57:
    !
    assert // 2 not in (1, 3)
    callsub two_u8
    dup
    frame_bury 0
    callsub one_arc4u64
    b==
    bnz test_numeric_types_bool_true@59
    frame_dig 0
    frame_dig 18
    b==
    bz test_numeric_types_bool_false@60

test_numeric_types_bool_true@59:
    int 1
    b test_numeric_types_bool_merge@61

test_numeric_types_bool_false@60:
    int 0

test_numeric_types_bool_merge@61:
    !
    assert // 2 not in (1, 3)
    callsub two_u8
    dup
    frame_bury 1
    callsub one_arc4u64
    b==
    bnz test_numeric_types_bool_true@63
    frame_dig 1
    frame_dig 18
    b==
    bz test_numeric_types_bool_false@64

test_numeric_types_bool_true@63:
    int 1
    b test_numeric_types_bool_merge@65

test_numeric_types_bool_false@64:
    int 0

test_numeric_types_bool_merge@65:
    !
    assert // 2 not in (1, 3)
    callsub three_u512
    dup
    frame_bury 2
    frame_dig 19
    b==
    bnz test_numeric_types_bool_true@67
    int 7
    itob
    frame_dig 2
    b==
    bz test_numeric_types_bool_false@68

test_numeric_types_bool_true@67:
    int 1
    b test_numeric_types_bool_merge@69

test_numeric_types_bool_false@68:
    int 0

test_numeric_types_bool_merge@69:
    !
    assert // 3 not in (5, 7)
    callsub four_biguint
    dup
    frame_bury 3
    frame_dig 16
    b==
    bnz test_numeric_types_bool_true@71
    int 9
    itob
    frame_dig 3
    b==
    bz test_numeric_types_bool_false@72

test_numeric_types_bool_true@71:
    int 1
    b test_numeric_types_bool_merge@73

test_numeric_types_bool_false@72:
    int 0

test_numeric_types_bool_merge@73:
    !
    assert // 4 not in (2, 9)
    callsub one_u64
    dup
    frame_bury 29
    callsub foo_string
    pop
    callsub one_u64
    callsub two_u8
    frame_bury 24
    ==
    bnz test_numeric_types_bool_true@76
    frame_dig 29
    int 3
    ==
    bnz test_numeric_types_bool_true@76
    frame_dig 29
    itob
    frame_dig 24
    b==
    bz test_numeric_types_bool_false@77

test_numeric_types_bool_true@76:
    int 1
    b test_numeric_types_bool_merge@78

test_numeric_types_bool_false@77:
    int 0

test_numeric_types_bool_merge@78:
    assert // 1 in (foo, 1, 3, 2)
    callsub one_arc4u64
    callsub bar_string
    pop
    callsub two_u8
    frame_bury 25
    callsub one_u64
    itob
    dup
    frame_bury 26
    b==
    bnz test_numeric_types_bool_true@80
    frame_dig 25
    frame_dig 26
    b==
    bz test_numeric_types_bool_false@81

test_numeric_types_bool_true@80:
    int 1
    b test_numeric_types_bool_merge@82

test_numeric_types_bool_false@81:
    int 0

test_numeric_types_bool_merge@82:
    assert // 1 in (1, bar, 2)
    callsub foo_arc4
    pop
    callsub two_u8
    frame_dig 16
    b==
    bz test_numeric_types_bool_false@85
    int 1
    b test_numeric_types_bool_merge@86

test_numeric_types_bool_false@85:
    int 0

test_numeric_types_bool_merge@86:
    assert // 2 in (foo, 3, 2)
    callsub two_u8
    dup
    frame_bury 4
    callsub bar_arc4
    pop
    callsub two_u8
    frame_bury 11
    frame_dig 18
    b==
    bnz test_numeric_types_bool_true@88
    frame_dig 4
    frame_dig 11
    b==
    bz test_numeric_types_bool_false@89

test_numeric_types_bool_true@88:
    int 1
    b test_numeric_types_bool_merge@90

test_numeric_types_bool_false@89:
    int 0

test_numeric_types_bool_merge@90:
    assert // 2 in (bar, 3, 2)
    callsub two_u8
    dup
    frame_bury 5
    callsub foo_string
    pop
    frame_dig 16
    b==
    bnz test_numeric_types_bool_true@92
    frame_dig 5
    frame_dig 18
    b==
    bz test_numeric_types_bool_false@93

test_numeric_types_bool_true@92:
    int 1
    b test_numeric_types_bool_merge@94

test_numeric_types_bool_false@93:
    int 0

test_numeric_types_bool_merge@94:
    assert // 2 in foo(2, 3)
    callsub three_u512
    dup
    frame_bury 6
    callsub foo_string
    pop
    frame_dig 19
    b==
    bnz test_numeric_types_bool_true@96
    frame_dig 6
    frame_dig 18
    b==
    bz test_numeric_types_bool_false@97

test_numeric_types_bool_true@96:
    int 1
    b test_numeric_types_bool_merge@98

test_numeric_types_bool_false@97:
    int 0

test_numeric_types_bool_merge@98:
    assert // 3 in (5, 3, foo)
    callsub one_u64
    dup
    frame_bury 31
    callsub foo_string
    pop
    callsub two_u8
    frame_bury 12
    int 3
    ==
    bnz test_numeric_types_bool_true@100
    frame_dig 31
    itob
    frame_dig 12
    b==
    bz test_numeric_types_bool_false@101

test_numeric_types_bool_true@100:
    int 1
    b test_numeric_types_bool_merge@102

test_numeric_types_bool_false@101:
    int 0

test_numeric_types_bool_merge@102:
    !
    assert // 1 not in (foo, 3, 2)
    callsub bar_string
    pop
    callsub two_u8
    callsub one_u64
    itob
    b==
    !
    assert // 1 not in (bar, 2)
    callsub foo_arc4
    pop
    callsub two_u8
    callsub bar_arc4
    pop
    frame_dig 18
    dup
    cover 2
    b==
    !
    assert // 2 not in (bar, 3)
    callsub two_u8
    callsub foo_string
    pop
    b==
    !
    assert // 2 not in (foo, 3)
    callsub three_u512
    callsub foo_string
    pop
    frame_dig 19
    b==
    !
    assert // 3 not in (5, foo)
    retsub


// test_cases.contains.contract.two_u64() -> uint64:
two_u64:
    proto 0 1
    int 2
    retsub


// test_cases.contains.contract.two_u8() -> bytes:
two_u8:
    proto 0 1
    byte 0x02
    retsub


// test_cases.contains.contract.one_arc4u64() -> bytes:
one_arc4u64:
    proto 0 1
    byte 0x0000000000000001
    retsub


// test_cases.contains.contract.three_u512() -> bytes:
three_u512:
    proto 0 1
    byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    retsub


// test_cases.contains.contract.four_biguint() -> bytes:
four_biguint:
    proto 0 1
    byte 0x04
    retsub
