#pragma version 10
#pragma typetrack false

// test_cases.contains.contract.MyContract.approval_program() -> uint64:
main:
    intcblock 0 1 10 15
    bytecblock 0x66697665 0x68656c6c6f 0x626f6e6a6f7572 0x1d65e22bcbbf 0x07acf5cae41e
    // contains/contract.py:10
    // one_true = self.is_in_tuple_1(UInt64(10), (UInt64(10), not_ten, Bytes(b"five")))
    intc_2 // 10
    dup
    // contains/contract.py:8
    // not_ten = UInt64(15)
    intc_3 // 15
    // contains/contract.py:10
    // one_true = self.is_in_tuple_1(UInt64(10), (UInt64(10), not_ten, Bytes(b"five")))
    bytec_0 // 0x66697665
    callsub is_in_tuple_1
    // contains/contract.py:11
    // one_false = self.is_in_tuple_1(UInt64(5), (UInt64(10), not_ten, Bytes(b"five")))
    pushint 5 // 5
    intc_2 // 10
    // contains/contract.py:8
    // not_ten = UInt64(15)
    intc_3 // 15
    // contains/contract.py:11
    // one_false = self.is_in_tuple_1(UInt64(5), (UInt64(10), not_ten, Bytes(b"five")))
    bytec_0 // 0x66697665
    callsub is_in_tuple_1
    // contains/contract.py:12
    // assert one_true, "Should be true"
    swap
    assert // Should be true
    // contains/contract.py:13
    // assert not one_false, "Should be false"
    !
    assert // Should be false
    // contains/contract.py:16
    // Bytes(b"hello"), (Bytes(b"hello"), UInt64(0), Bytes(b"bonjour"))
    bytec_1 // 0x68656c6c6f
    dup
    intc_0 // 0
    bytec_2 // 0x626f6e6a6f7572
    // contains/contract.py:15-17
    // two_true = self.is_in_tuple_2(
    //     Bytes(b"hello"), (Bytes(b"hello"), UInt64(0), Bytes(b"bonjour"))
    // )
    callsub is_in_tuple_2
    // contains/contract.py:19
    // Bytes(b"ciao"), (Bytes(b"hello"), UInt64(0), Bytes(b"bonjour"))
    pushbytes 0x6369616f
    bytec_1 // 0x68656c6c6f
    intc_0 // 0
    bytec_2 // 0x626f6e6a6f7572
    // contains/contract.py:18-20
    // two_false = self.is_in_tuple_2(
    //     Bytes(b"ciao"), (Bytes(b"hello"), UInt64(0), Bytes(b"bonjour"))
    // )
    callsub is_in_tuple_2
    // contains/contract.py:21
    // assert two_true, "Should be true"
    swap
    assert // Should be true
    // contains/contract.py:22
    // assert not two_false, "Should be false"
    !
    assert // Should be false
    // contains/contract.py:25
    // BigUInt(32323423423423), (BigUInt(32323423423423), BigUInt(8439439483934))
    bytec_3 // 0x1d65e22bcbbf
    dup
    bytec 4 // 0x07acf5cae41e
    // contains/contract.py:24-26
    // three_true = self.is_in_tuple_3(
    //     BigUInt(32323423423423), (BigUInt(32323423423423), BigUInt(8439439483934))
    // )
    callsub is_in_tuple_3
    // contains/contract.py:28
    // BigUInt(32323423423423) + BigUInt(32323423423423),
    pushbytes 0x3acbc457977e
    // contains/contract.py:29
    // (BigUInt(32323423423423), BigUInt(8439439483934)),
    bytec_3 // 0x1d65e22bcbbf
    bytec 4 // 0x07acf5cae41e
    // contains/contract.py:27-30
    // three_false = self.is_in_tuple_3(
    //     BigUInt(32323423423423) + BigUInt(32323423423423),
    //     (BigUInt(32323423423423), BigUInt(8439439483934)),
    // )
    callsub is_in_tuple_3
    // contains/contract.py:31
    // assert three_true, "Should be true"
    swap
    assert // Should be true
    // contains/contract.py:32
    // assert not three_false, "Should be false"
    !
    assert // Should be false
    // contains/contract.py:37
    // return UInt64(1)
    intc_1 // 1
    return


// test_cases.contains.contract.MyContract.is_in_tuple_1(x: uint64, y.0: uint64, y.1: uint64, y.2: bytes) -> uint64:
is_in_tuple_1:
    // contains/contract.py:42-43
    // @subroutine
    // def is_in_tuple_1(self, x: UInt64, y: tuple[UInt64, UInt64, Bytes]) -> bool:
    proto 4 1
    // contains/contract.py:44
    // return x in y
    frame_dig -4
    frame_dig -3
    ==
    bnz is_in_tuple_1_bool_true@2
    frame_dig -4
    frame_dig -2
    ==
    bz is_in_tuple_1_bool_false@3

is_in_tuple_1_bool_true@2:
    intc_1 // 1
    // contains/contract.py:44
    // return x in y
    retsub

is_in_tuple_1_bool_false@3:
    intc_0 // 0
    // contains/contract.py:44
    // return x in y
    retsub


// test_cases.contains.contract.MyContract.is_in_tuple_2(x: bytes, y.0: bytes, y.1: uint64, y.2: bytes) -> uint64:
is_in_tuple_2:
    // contains/contract.py:46-47
    // @subroutine
    // def is_in_tuple_2(self, x: Bytes, y: tuple[Bytes, UInt64, Bytes]) -> bool:
    proto 4 1
    // contains/contract.py:48
    // return x in y
    frame_dig -4
    frame_dig -3
    ==
    bnz is_in_tuple_2_bool_true@2
    frame_dig -4
    frame_dig -1
    ==
    bz is_in_tuple_2_bool_false@3

is_in_tuple_2_bool_true@2:
    intc_1 // 1
    // contains/contract.py:48
    // return x in y
    retsub

is_in_tuple_2_bool_false@3:
    intc_0 // 0
    // contains/contract.py:48
    // return x in y
    retsub


// test_cases.contains.contract.MyContract.is_in_tuple_3(x: bytes, y.0: bytes, y.1: bytes) -> uint64:
is_in_tuple_3:
    // contains/contract.py:50-51
    // @subroutine
    // def is_in_tuple_3(self, x: BigUInt, y: tuple[BigUInt, BigUInt]) -> bool:
    proto 3 1
    // contains/contract.py:52
    // return x in y
    frame_dig -3
    frame_dig -2
    b==
    bnz is_in_tuple_3_bool_true@2
    frame_dig -3
    frame_dig -1
    b==
    bz is_in_tuple_3_bool_false@3

is_in_tuple_3_bool_true@2:
    intc_1 // 1
    // contains/contract.py:52
    // return x in y
    retsub

is_in_tuple_3_bool_false@3:
    intc_0 // 0
    // contains/contract.py:52
    // return x in y
    retsub
