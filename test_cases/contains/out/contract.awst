contract MyContract
{
  approval_program(): uint64
  {
    not_ten: uint64 = 15u
    one_true: bool = this::is_in_tuple_1(10u, (10u, not_ten, hex<"66697665">))
    one_false: bool = this::is_in_tuple_1(5u, (10u, not_ten, hex<"66697665">))
    assert(one_true, comment="Should be true")
    assert(!(one_false), comment="Should be false")
    two_true: bool = this::is_in_tuple_2(hex<"68656C6C6F">, (hex<"68656C6C6F">, 0u, hex<"626F6E6A6F7572">))
    two_false: bool = this::is_in_tuple_2(hex<"6369616F">, (hex<"68656C6C6F">, 0u, hex<"626F6E6A6F7572">))
    assert(two_true, comment="Should be true")
    assert(!(two_false), comment="Should be false")
    three_true: bool = this::is_in_tuple_3(32323423423423n, (32323423423423n, 8439439483934n))
    three_false: bool = this::is_in_tuple_3(32323423423423n b+ 32323423423423n, (32323423423423n, 8439439483934n))
    assert(three_true, comment="Should be true")
    assert(!(three_false), comment="Should be false")
    return 1u
  }
  
  clear_state_program(): uint64
  {
    return 1u
  }
  
  subroutine is_in_tuple_1(x: uint64, y: tuple<uint64,uint64,bytes>): bool
  {
    return x IS IN y
  }
  
  subroutine is_in_tuple_2(x: bytes, y: tuple<bytes,uint64,bytes>): bool
  {
    return x IS IN y
  }
  
  subroutine is_in_tuple_3(x: biguint, y: tuple<biguint,biguint>): bool
  {
    return x IS IN y
  }
}