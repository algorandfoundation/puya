{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASsC;AAAa;AAFjC;AAEsD;AAArD;;;AACoB;;AAAY;AAHjC;AAGsD;AAApD;;;AACZ;AAAA;AACO;AAAP;AAGI;AAAkB;AAAiB;AAAW;AADvC;;;AAIP;;;;;;AAAiB;AAAiB;AAAW;AADrC;;;AAGZ;AAAA;AACO;AAAP;AAGI;AAA0B;AAAyB;;AAD1C;;;AAIT;;;;;;;;AACC;AAAyB;;AAFhB;;;AAId;AAAA;AACO;AAKP;AAKR;;;AAEe;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAP;;AAAA;AAER;;;AAEe;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAP;;AAAA;AAER;;;AAEe;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAP;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.contains.contract.MyContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 10 15"
    },
    "7": {
      "op": "bytecblock 0x66697665 0x68656c6c6f 0x626f6e6a6f7572 0x1d65e22bcbbf 0x07acf5cae41e"
    },
    "42": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10"
      ],
      "stack_out": [
        "10"
      ]
    },
    "43": {
      "op": "dup",
      "stack_out": [
        "10",
        "10"
      ]
    },
    "44": {
      "op": "intc_3 // 15",
      "defined_out": [
        "10",
        "15"
      ],
      "stack_out": [
        "10",
        "10",
        "15"
      ]
    },
    "45": {
      "op": "bytec_0 // 0x66697665",
      "defined_out": [
        "0x66697665",
        "10",
        "15"
      ],
      "stack_out": [
        "10",
        "10",
        "15",
        "0x66697665"
      ]
    },
    "46": {
      "callsub": "test_cases.contains.contract.MyContract.is_in_tuple_1",
      "op": "callsub is_in_tuple_1",
      "defined_out": [
        "one_true#0"
      ],
      "stack_out": [
        "one_true#0"
      ]
    },
    "49": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "one_true#0"
      ],
      "stack_out": [
        "one_true#0",
        "5"
      ]
    },
    "51": {
      "op": "intc_2 // 10",
      "stack_out": [
        "one_true#0",
        "5",
        "10"
      ]
    },
    "52": {
      "op": "intc_3 // 15",
      "stack_out": [
        "one_true#0",
        "5",
        "10",
        "15"
      ]
    },
    "53": {
      "op": "bytec_0 // 0x66697665",
      "stack_out": [
        "one_true#0",
        "5",
        "10",
        "15",
        "0x66697665"
      ]
    },
    "54": {
      "callsub": "test_cases.contains.contract.MyContract.is_in_tuple_1",
      "op": "callsub is_in_tuple_1",
      "defined_out": [
        "one_false#0",
        "one_true#0"
      ],
      "stack_out": [
        "one_true#0",
        "one_false#0"
      ]
    },
    "57": {
      "op": "swap",
      "stack_out": [
        "one_false#0",
        "one_true#0"
      ]
    },
    "58": {
      "error": "Should be true",
      "op": "assert // Should be true",
      "stack_out": [
        "one_false#0"
      ]
    },
    "59": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "60": {
      "error": "Should be false",
      "op": "assert // Should be false",
      "stack_out": []
    },
    "61": {
      "op": "bytec_1 // 0x68656c6c6f",
      "defined_out": [
        "0x68656c6c6f"
      ],
      "stack_out": [
        "0x68656c6c6f"
      ]
    },
    "62": {
      "op": "dup",
      "stack_out": [
        "0x68656c6c6f",
        "0x68656c6c6f"
      ]
    },
    "63": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x68656c6c6f"
      ],
      "stack_out": [
        "0x68656c6c6f",
        "0x68656c6c6f",
        "0"
      ]
    },
    "64": {
      "op": "bytec_2 // 0x626f6e6a6f7572",
      "defined_out": [
        "0",
        "0x626f6e6a6f7572",
        "0x68656c6c6f"
      ],
      "stack_out": [
        "0x68656c6c6f",
        "0x68656c6c6f",
        "0",
        "0x626f6e6a6f7572"
      ]
    },
    "65": {
      "callsub": "test_cases.contains.contract.MyContract.is_in_tuple_2",
      "op": "callsub is_in_tuple_2",
      "defined_out": [
        "two_true#0"
      ],
      "stack_out": [
        "two_true#0"
      ]
    },
    "68": {
      "op": "pushbytes 0x6369616f",
      "defined_out": [
        "0x6369616f",
        "two_true#0"
      ],
      "stack_out": [
        "two_true#0",
        "0x6369616f"
      ]
    },
    "74": {
      "op": "bytec_1 // 0x68656c6c6f",
      "stack_out": [
        "two_true#0",
        "0x6369616f",
        "0x68656c6c6f"
      ]
    },
    "75": {
      "op": "intc_0 // 0",
      "stack_out": [
        "two_true#0",
        "0x6369616f",
        "0x68656c6c6f",
        "0"
      ]
    },
    "76": {
      "op": "bytec_2 // 0x626f6e6a6f7572",
      "stack_out": [
        "two_true#0",
        "0x6369616f",
        "0x68656c6c6f",
        "0",
        "0x626f6e6a6f7572"
      ]
    },
    "77": {
      "callsub": "test_cases.contains.contract.MyContract.is_in_tuple_2",
      "op": "callsub is_in_tuple_2",
      "defined_out": [
        "two_false#0",
        "two_true#0"
      ],
      "stack_out": [
        "two_true#0",
        "two_false#0"
      ]
    },
    "80": {
      "op": "swap",
      "stack_out": [
        "two_false#0",
        "two_true#0"
      ]
    },
    "81": {
      "error": "Should be true",
      "op": "assert // Should be true",
      "stack_out": [
        "two_false#0"
      ]
    },
    "82": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "83": {
      "error": "Should be false",
      "op": "assert // Should be false",
      "stack_out": []
    },
    "84": {
      "op": "bytec_3 // 0x1d65e22bcbbf",
      "defined_out": [
        "0x1d65e22bcbbf"
      ],
      "stack_out": [
        "0x1d65e22bcbbf"
      ]
    },
    "85": {
      "op": "dup",
      "stack_out": [
        "0x1d65e22bcbbf",
        "0x1d65e22bcbbf"
      ]
    },
    "86": {
      "op": "bytec 4 // 0x07acf5cae41e",
      "defined_out": [
        "0x07acf5cae41e",
        "0x1d65e22bcbbf"
      ],
      "stack_out": [
        "0x1d65e22bcbbf",
        "0x1d65e22bcbbf",
        "0x07acf5cae41e"
      ]
    },
    "88": {
      "callsub": "test_cases.contains.contract.MyContract.is_in_tuple_3",
      "op": "callsub is_in_tuple_3",
      "defined_out": [
        "three_true#0"
      ],
      "stack_out": [
        "three_true#0"
      ]
    },
    "91": {
      "op": "pushbytes 0x3acbc457977e",
      "defined_out": [
        "0x3acbc457977e",
        "three_true#0"
      ],
      "stack_out": [
        "three_true#0",
        "0x3acbc457977e"
      ]
    },
    "99": {
      "op": "bytec_3 // 0x1d65e22bcbbf",
      "stack_out": [
        "three_true#0",
        "0x3acbc457977e",
        "0x1d65e22bcbbf"
      ]
    },
    "100": {
      "op": "bytec 4 // 0x07acf5cae41e",
      "stack_out": [
        "three_true#0",
        "0x3acbc457977e",
        "0x1d65e22bcbbf",
        "0x07acf5cae41e"
      ]
    },
    "102": {
      "callsub": "test_cases.contains.contract.MyContract.is_in_tuple_3",
      "op": "callsub is_in_tuple_3",
      "defined_out": [
        "three_false#0",
        "three_true#0"
      ],
      "stack_out": [
        "three_true#0",
        "three_false#0"
      ]
    },
    "105": {
      "op": "swap",
      "stack_out": [
        "three_false#0",
        "three_true#0"
      ]
    },
    "106": {
      "error": "Should be true",
      "op": "assert // Should be true",
      "stack_out": [
        "three_false#0"
      ]
    },
    "107": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "108": {
      "error": "Should be false",
      "op": "return // on error: Should be false",
      "defined_out": [],
      "stack_out": []
    },
    "109": {
      "subroutine": "test_cases.contains.contract.MyContract.is_in_tuple_1",
      "params": {
        "x#0": "uint64",
        "y.0#0": "uint64",
        "y.1#0": "uint64",
        "y.2#0": "bytes"
      },
      "block": "is_in_tuple_1",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "112": {
      "op": "frame_dig -4",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "114": {
      "op": "frame_dig -3",
      "defined_out": [
        "x#0 (copy)",
        "y.0#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "y.0#0 (copy)"
      ]
    },
    "116": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "bnz is_in_tuple_1_bool_true@2",
      "stack_out": []
    },
    "120": {
      "op": "frame_dig -4",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "122": {
      "op": "frame_dig -2",
      "defined_out": [
        "x#0 (copy)",
        "y.1#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "y.1#0 (copy)"
      ]
    },
    "124": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "125": {
      "op": "bz is_in_tuple_1_bool_false@3",
      "stack_out": []
    },
    "128": {
      "block": "is_in_tuple_1_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "129": {
      "retsub": true,
      "op": "retsub"
    },
    "130": {
      "block": "is_in_tuple_1_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "131": {
      "retsub": true,
      "op": "retsub"
    },
    "132": {
      "subroutine": "test_cases.contains.contract.MyContract.is_in_tuple_2",
      "params": {
        "x#0": "bytes",
        "y.0#0": "bytes",
        "y.1#0": "uint64",
        "y.2#0": "bytes"
      },
      "block": "is_in_tuple_2",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "135": {
      "op": "frame_dig -4",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "137": {
      "op": "frame_dig -3",
      "defined_out": [
        "x#0 (copy)",
        "y.0#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "y.0#0 (copy)"
      ]
    },
    "139": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "140": {
      "op": "bnz is_in_tuple_2_bool_true@2",
      "stack_out": []
    },
    "143": {
      "op": "frame_dig -4",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "145": {
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)",
        "y.2#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "y.2#0 (copy)"
      ]
    },
    "147": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "148": {
      "op": "bz is_in_tuple_2_bool_false@3",
      "stack_out": []
    },
    "151": {
      "block": "is_in_tuple_2_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "152": {
      "retsub": true,
      "op": "retsub"
    },
    "153": {
      "block": "is_in_tuple_2_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "154": {
      "retsub": true,
      "op": "retsub"
    },
    "155": {
      "subroutine": "test_cases.contains.contract.MyContract.is_in_tuple_3",
      "params": {
        "x#0": "bytes",
        "y.0#0": "bytes",
        "y.1#0": "bytes"
      },
      "block": "is_in_tuple_3",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "158": {
      "op": "frame_dig -3",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "160": {
      "op": "frame_dig -2",
      "defined_out": [
        "x#0 (copy)",
        "y.0#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "y.0#0 (copy)"
      ]
    },
    "162": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "163": {
      "op": "bnz is_in_tuple_3_bool_true@2",
      "stack_out": []
    },
    "166": {
      "op": "frame_dig -3",
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "168": {
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)",
        "y.1#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)",
        "y.1#0 (copy)"
      ]
    },
    "170": {
      "op": "b==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "171": {
      "op": "bz is_in_tuple_3_bool_false@3",
      "stack_out": []
    },
    "174": {
      "block": "is_in_tuple_3_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "175": {
      "retsub": true,
      "op": "retsub"
    },
    "176": {
      "block": "is_in_tuple_3_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "177": {
      "retsub": true,
      "op": "retsub"
    }
  }
}