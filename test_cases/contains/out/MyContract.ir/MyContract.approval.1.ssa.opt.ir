main test_cases.contains.contract.MyContract.approval_program:
    block@0: // L7
        let one_true#0: bool = test_cases.contains.contract.MyContract.is_in_tuple_1(10u, 10u, 15u, 0x66697665)
        let one_false#0: bool = test_cases.contains.contract.MyContract.is_in_tuple_1(5u, 10u, 15u, 0x66697665)
        (assert one_true#0) // Should be true
        let tmp%0#0: bool = (! one_false#0)
        (assert tmp%0#0) // Should be false
        let two_true#0: bool = test_cases.contains.contract.MyContract.is_in_tuple_2(0x68656c6c6f, 0x68656c6c6f, 0u, 0x626f6e6a6f7572)
        let two_false#0: bool = test_cases.contains.contract.MyContract.is_in_tuple_2(0x6369616f, 0x68656c6c6f, 0u, 0x626f6e6a6f7572)
        (assert two_true#0) // Should be true
        let tmp%1#0: bool = (! two_false#0)
        (assert tmp%1#0) // Should be false
        let three_true#0: bool = test_cases.contains.contract.MyContract.is_in_tuple_3(32323423423423b, 32323423423423b, 8439439483934b)
        let tmp%2#0: biguint = 64646846846846b
        let three_false#0: bool = test_cases.contains.contract.MyContract.is_in_tuple_3(64646846846846b, 32323423423423b, 8439439483934b)
        (assert three_true#0) // Should be true
        let tmp%3#0: bool = (! three_false#0)
        (assert tmp%3#0) // Should be false
        let awst_tmp%0#0: string = test_cases.contains.contract.foo_string()
        let tmp%0#1: string = test_cases.contains.contract.foo_string()
        let tmp%1#1: string = test_cases.contains.contract.baz_string()
        let tmp%2#1: bool = (== awst_tmp%0#0 tmp%0#1)
        goto tmp%2#1 ? block@3 : block@2
    block@2: // or_contd_L56
        let tmp%3#1: bool = (== awst_tmp%0#0 tmp%1#1)
        goto tmp%3#1 ? block@3 : block@4
    block@3: // bool_true_L56
        let or_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L56
        let or_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L56
        let or_result%0#2: bool = φ(or_result%0#0 <- block@3, or_result%0#1 <- block@4)
        (assert or_result%0#2) // foo in (foo, baz)
        let awst_tmp%1#0: string = test_cases.contains.contract.foo_string()
        let tmp%4#0: string = test_cases.contains.contract.bar_string()
        let tmp%5#0: string = test_cases.contains.contract.baz_string()
        let tmp%6#0: bool = (== awst_tmp%1#0 tmp%4#0)
        goto tmp%6#0 ? block@7 : block@6
    block@6: // or_contd_L57
        let tmp%7#0: bool = (== awst_tmp%1#0 tmp%5#0)
        goto tmp%7#0 ? block@7 : block@8
    block@7: // bool_true_L57
        let or_result%1#0: bool = 1u
        goto block@9
    block@8: // bool_false_L57
        let or_result%1#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L57
        let or_result%1#2: bool = φ(or_result%1#0 <- block@7, or_result%1#1 <- block@8)
        let tmp%8#0: bool = (! or_result%1#2)
        (assert tmp%8#0) // foo not in (bar, baz)
        let tmp%9#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%10#0: string = test_cases.contains.contract.baz_string()
        let tmp%11#0: string = test_cases.contains.contract.bar_string()
        let tmp%12#0: bytes = ((extract 2 0) tmp%9#0)
        let awst_tmp%2#0: string = test_cases.contains.contract.foo_string()
        let tmp%13#0: bool = (== tmp%12#0 awst_tmp%2#0)
        goto tmp%13#0 ? block@12 : block@10
    block@10: // or_contd_L58
        let tmp%14#0: bool = (== awst_tmp%2#0 tmp%10#0)
        goto tmp%14#0 ? block@12 : block@11
    block@11: // or_contd_L58
        let tmp%15#0: bool = (== awst_tmp%2#0 tmp%11#0)
        goto tmp%15#0 ? block@12 : block@13
    block@12: // bool_true_L58
        let or_result%2#0: bool = 1u
        goto block@14
    block@13: // bool_false_L58
        let or_result%2#1: bool = 0u
        goto block@14
    block@14: // bool_merge_L58
        let or_result%2#2: bool = φ(or_result%2#0 <- block@12, or_result%2#1 <- block@13)
        (assert or_result%2#2) // foo in (foo, baz, bar)
        let awst_tmp%3#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%16#0: bytes = ((extract 2 0) awst_tmp%3#0)
        let tmp%17#0: string = test_cases.contains.contract.foo_string()
        let tmp%18#0: string = test_cases.contains.contract.baz_string()
        let tmp%19#0: string = test_cases.contains.contract.bar_string()
        let tmp%20#0: bool = (== tmp%16#0 tmp%17#0)
        goto tmp%20#0 ? block@17 : block@15
    block@15: // or_contd_L59
        let tmp%22#0: bool = (== tmp%16#0 tmp%18#0)
        goto tmp%22#0 ? block@17 : block@16
    block@16: // or_contd_L59
        let tmp%24#0: bool = (== tmp%16#0 tmp%19#0)
        goto tmp%24#0 ? block@17 : block@18
    block@17: // bool_true_L59
        let or_result%3#0: bool = 1u
        goto block@19
    block@18: // bool_false_L59
        let or_result%3#1: bool = 0u
        goto block@19
    block@19: // bool_merge_L59
        let or_result%3#2: bool = φ(or_result%3#0 <- block@17, or_result%3#1 <- block@18)
        (assert or_result%3#2) // foo in (foo, baz, bar)
        let tmp%25#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%26#0: string = test_cases.contains.contract.baz_string()
        let tmp%27#0: bytes = ((extract 2 0) tmp%25#0)
        let awst_tmp%4#0: string = test_cases.contains.contract.foo_string()
        let tmp%28#0: bool = (== tmp%27#0 awst_tmp%4#0)
        goto tmp%28#0 ? block@21 : block@20
    block@20: // or_contd_L60
        let tmp%29#0: bool = (== awst_tmp%4#0 tmp%26#0)
        goto tmp%29#0 ? block@21 : block@22
    block@21: // bool_true_L60
        let or_result%4#0: bool = 1u
        goto block@23
    block@22: // bool_false_L60
        let or_result%4#1: bool = 0u
        goto block@23
    block@23: // bool_merge_L60
        let or_result%4#2: bool = φ(or_result%4#0 <- block@21, or_result%4#1 <- block@22)
        let tmp%30#0: bool = (! or_result%4#2)
        (assert tmp%30#0) // foo not in (bar, baz)
        let awst_tmp%5#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%31#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%32#0: string = test_cases.contains.contract.baz_string()
        let tmp%33#0: bool = (== awst_tmp%5#0 tmp%31#0)
        goto tmp%33#0 ? block@25 : block@24
    block@24: // or_contd_L61
        let tmp%34#0: bytes = ((extract 2 0) awst_tmp%5#0)
        let tmp%35#0: bool = (== tmp%34#0 tmp%32#0)
        goto tmp%35#0 ? block@25 : block@26
    block@25: // bool_true_L61
        let or_result%5#0: bool = 1u
        goto block@27
    block@26: // bool_false_L61
        let or_result%5#1: bool = 0u
        goto block@27
    block@27: // bool_merge_L61
        let or_result%5#2: bool = φ(or_result%5#0 <- block@25, or_result%5#1 <- block@26)
        let tmp%36#0: bool = (! or_result%5#2)
        (assert tmp%36#0) // foo not in (bar, baz)
        let tmp%37#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%38#0: string = test_cases.contains.contract.baz_string()
        let tmp%39#0: string = test_cases.contains.contract.foo_string()
        let tmp%40#0: uint64 = test_cases.contains.contract.one_u64()
        let tmp%41#0: bytes = ((extract 2 0) tmp%37#0)
        let awst_tmp%6#0: string = test_cases.contains.contract.foo_string()
        let tmp%42#0: bool = (== tmp%41#0 awst_tmp%6#0)
        goto tmp%42#0 ? block@30 : block@28
    block@28: // or_contd_L62
        let tmp%43#0: bool = (== awst_tmp%6#0 tmp%38#0)
        goto tmp%43#0 ? block@30 : block@29
    block@29: // or_contd_L62
        let tmp%44#0: bool = (== awst_tmp%6#0 tmp%39#0)
        goto tmp%44#0 ? block@30 : block@31
    block@30: // bool_true_L62
        let or_result%6#0: bool = 1u
        goto block@32
    block@31: // bool_false_L62
        let or_result%6#1: bool = 0u
        goto block@32
    block@32: // bool_merge_L62
        let or_result%6#2: bool = φ(or_result%6#0 <- block@30, or_result%6#1 <- block@31)
        (assert or_result%6#2) // foo in (bar, baz, foo, 1)
        let awst_tmp%7#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%45#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%46#0: string = test_cases.contains.contract.baz_string()
        let tmp%47#0: string = test_cases.contains.contract.foo_string()
        let tmp%48#0: uint64 = test_cases.contains.contract.one_u64()
        let tmp%49#0: bool = (== awst_tmp%7#0 tmp%45#0)
        goto tmp%49#0 ? block@35 : block@33
    block@33: // or_contd_L68
        let tmp%50#0: bytes = ((extract 2 0) awst_tmp%7#0)
        let tmp%51#0: bool = (== tmp%50#0 tmp%46#0)
        goto tmp%51#0 ? block@35 : block@34
    block@34: // or_contd_L68
        let tmp%53#0: bool = (== tmp%50#0 tmp%47#0)
        goto tmp%53#0 ? block@35 : block@36
    block@35: // bool_true_L68
        let or_result%7#0: bool = 1u
        goto block@37
    block@36: // bool_false_L68
        let or_result%7#1: bool = 0u
        goto block@37
    block@37: // bool_merge_L68
        let or_result%7#2: bool = φ(or_result%7#0 <- block@35, or_result%7#1 <- block@36)
        (assert or_result%7#2) // foo in (bar, baz, foo, 1)
        let tmp%54#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%55#0: string = test_cases.contains.contract.baz_string()
        let tmp%56#0: uint64 = test_cases.contains.contract.one_u64()
        let tmp%57#0: bytes = ((extract 2 0) tmp%54#0)
        let awst_tmp%8#0: string = test_cases.contains.contract.foo_string()
        let tmp%58#0: bool = (== tmp%57#0 awst_tmp%8#0)
        goto tmp%58#0 ? block@39 : block@38
    block@38: // or_contd_L74
        let tmp%59#0: bool = (== awst_tmp%8#0 tmp%55#0)
        goto tmp%59#0 ? block@39 : block@40
    block@39: // bool_true_L74
        let or_result%8#0: bool = 1u
        goto block@41
    block@40: // bool_false_L74
        let or_result%8#1: bool = 0u
        goto block@41
    block@41: // bool_merge_L74
        let or_result%8#2: bool = φ(or_result%8#0 <- block@39, or_result%8#1 <- block@40)
        let tmp%60#0: bool = (! or_result%8#2)
        (assert tmp%60#0) // foo not in (bar, baz, 1)
        let awst_tmp%9#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%61#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%62#0: string = test_cases.contains.contract.baz_string()
        let tmp%63#0: uint64 = test_cases.contains.contract.one_u64()
        let tmp%64#0: bool = (== awst_tmp%9#0 tmp%61#0)
        goto tmp%64#0 ? block@43 : block@42
    block@42: // or_contd_L79
        let tmp%65#0: bytes = ((extract 2 0) awst_tmp%9#0)
        let tmp%66#0: bool = (== tmp%65#0 tmp%62#0)
        goto tmp%66#0 ? block@43 : block@44
    block@43: // bool_true_L79
        let or_result%9#0: bool = 1u
        goto block@45
    block@44: // bool_false_L79
        let or_result%9#1: bool = 0u
        goto block@45
    block@45: // bool_merge_L79
        let or_result%9#2: bool = φ(or_result%9#0 <- block@43, or_result%9#1 <- block@44)
        let tmp%67#0: bool = (! or_result%9#2)
        (assert tmp%67#0) // foo not in (bar, baz, 1)
        let tmp%68#0: string = test_cases.contains.contract.foo_string()
        let tmp%69#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%70#0: bool = 0u
        let tmp%71#0: bool = 1u
        let awst_tmp%0#1: uint64 = test_cases.contains.contract.one_u64()
        let tmp%0#2: uint64 = test_cases.contains.contract.one_u64()
        let tmp%1#2: uint64 = test_cases.contains.contract.two_u64()
        let tmp%2#2: bool = (== awst_tmp%0#1 tmp%0#2)
        goto tmp%2#2 ? block@49 : block@48
    block@48: // or_contd_L88
        let tmp%3#2: bool = (== awst_tmp%0#1 tmp%1#2)
        goto tmp%3#2 ? block@49 : block@50
    block@49: // bool_true_L88
        let or_result%0#3: bool = 1u
        goto block@51
    block@50: // bool_false_L88
        let or_result%0#4: bool = 0u
        goto block@51
    block@51: // bool_merge_L88
        let or_result%0#5: bool = φ(or_result%0#3 <- block@49, or_result%0#4 <- block@50)
        (assert or_result%0#5) // 1 in (1, 2)
        let awst_tmp%1#1: uint64 = test_cases.contains.contract.one_u64()
        let tmp%4#1: uint64 = test_cases.contains.contract.two_u64()
        let tmp%5#1: bool = (== awst_tmp%1#1 3u)
        goto tmp%5#1 ? block@53 : block@52
    block@52: // or_contd_L89
        let tmp%6#1: bool = (== awst_tmp%1#1 tmp%4#1)
        goto tmp%6#1 ? block@53 : block@54
    block@53: // bool_true_L89
        let or_result%1#3: bool = 1u
        goto block@55
    block@54: // bool_false_L89
        let or_result%1#4: bool = 0u
        goto block@55
    block@55: // bool_merge_L89
        let or_result%1#5: bool = φ(or_result%1#3 <- block@53, or_result%1#4 <- block@54)
        let tmp%7#1: bool = (! or_result%1#5)
        (assert tmp%7#1) // 1 not in (3, 2)
        let awst_tmp%2#1: uint64 = test_cases.contains.contract.one_u64()
        let tmp%8#1: uint64 = test_cases.contains.contract.one_u64()
        let tmp%9#1: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%10#1: bool = (== awst_tmp%2#1 tmp%8#1)
        goto tmp%10#1 ? block@58 : block@56
    block@56: // or_contd_L91
        let tmp%11#1: bool = (== awst_tmp%2#1 3u)
        goto tmp%11#1 ? block@58 : block@57
    block@57: // or_contd_L91
        let tmp%12#1: biguint = (itob awst_tmp%2#1)
        let tmp%13#1: bool = (b== tmp%9#1 tmp%12#1)
        goto tmp%13#1 ? block@58 : block@59
    block@58: // bool_true_L91
        let or_result%2#3: bool = 1u
        goto block@60
    block@59: // bool_false_L91
        let or_result%2#4: bool = 0u
        goto block@60
    block@60: // bool_merge_L91
        let or_result%2#5: bool = φ(or_result%2#3 <- block@58, or_result%2#4 <- block@59)
        (assert or_result%2#5) // 1 in (1, 3, 2)
        let tmp%14#1: Encoded(uint64) = test_cases.contains.contract.one_arc4u64()
        let tmp%15#1: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let awst_tmp%3#1: uint64 = test_cases.contains.contract.one_u64()
        let tmp%16#1: biguint = (itob awst_tmp%3#1)
        let tmp%17#1: bool = (b== tmp%14#1 tmp%16#1)
        goto tmp%17#1 ? block@63 : block@61
    block@61: // or_contd_L92
        let tmp%18#1: bool = (== awst_tmp%3#1 4u)
        goto tmp%18#1 ? block@63 : block@62
    block@62: // or_contd_L92
        let tmp%20#1: bool = (b== tmp%15#1 tmp%16#1)
        goto tmp%20#1 ? block@63 : block@64
    block@63: // bool_true_L92
        let or_result%3#3: bool = 1u
        goto block@65
    block@64: // bool_false_L92
        let or_result%3#4: bool = 0u
        goto block@65
    block@65: // bool_merge_L92
        let or_result%3#5: bool = φ(or_result%3#3 <- block@63, or_result%3#4 <- block@64)
        (assert or_result%3#5) // 1 in (1, 4, 2)
        let tmp%21#1: Encoded(uint64) = test_cases.contains.contract.one_arc4u64()
        let tmp%22#1: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%23#1: biguint = (itob 2u)
        let tmp%24#1: bool = (b== tmp%21#1 tmp%23#1)
        goto tmp%24#1 ? block@68 : block@66
    block@66: // or_contd_L93
        let tmp%25#1: bool = 0u
        let tmp%27#1: bool = (b== tmp%22#1 tmp%23#1)
        goto tmp%27#1 ? block@68 : block@69
    block@68: // bool_true_L93
        let or_result%4#3: bool = 1u
        goto block@70
    block@69: // bool_false_L93
        let or_result%4#4: bool = 0u
        goto block@70
    block@70: // bool_merge_L93
        let or_result%4#5: bool = φ(or_result%4#3 <- block@68, or_result%4#4 <- block@69)
        (assert or_result%4#5) // 2 in (1, 3, 2)
        let awst_tmp%4#1: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%28#1: Encoded(uint64) = test_cases.contains.contract.one_arc4u64()
        let tmp%29#1: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%30#1: bool = (b== awst_tmp%4#1 tmp%28#1)
        goto tmp%30#1 ? block@73 : block@71
    block@71: // or_contd_L94
        let tmp%31#1: biguint = (itob 3u)
        let tmp%32#1: bool = (b== awst_tmp%4#1 tmp%31#1)
        goto tmp%32#1 ? block@73 : block@72
    block@72: // or_contd_L94
        let tmp%33#1: bool = (b== awst_tmp%4#1 tmp%29#1)
        goto tmp%33#1 ? block@73 : block@74
    block@73: // bool_true_L94
        let or_result%5#3: bool = 1u
        goto block@75
    block@74: // bool_false_L94
        let or_result%5#4: bool = 0u
        goto block@75
    block@75: // bool_merge_L94
        let or_result%5#5: bool = φ(or_result%5#3 <- block@73, or_result%5#4 <- block@74)
        (assert or_result%5#5) // 2 in (1, 3, 2)
        let awst_tmp%5#1: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%34#1: Encoded(uint64) = test_cases.contains.contract.one_arc4u64()
        let tmp%35#1: bool = (b== awst_tmp%5#1 tmp%34#1)
        goto tmp%35#1 ? block@78 : block@76
    block@76: // or_contd_L95
        let tmp%37#1: bool = (b== awst_tmp%5#1 tmp%23#1)
        goto tmp%37#1 ? block@78 : block@77
    block@77: // or_contd_L95
        let tmp%38#1: biguint = (itob 3u)
        let tmp%39#1: bool = (b== awst_tmp%5#1 tmp%38#1)
        goto tmp%39#1 ? block@78 : block@79
    block@78: // bool_true_L95
        let or_result%6#3: bool = 1u
        goto block@80
    block@79: // bool_false_L95
        let or_result%6#4: bool = 0u
        goto block@80
    block@80: // bool_merge_L95
        let or_result%6#5: bool = φ(or_result%6#3 <- block@78, or_result%6#4 <- block@79)
        (assert or_result%6#5) // 2 in (1, 2, 3)
        let awst_tmp%6#1: Encoded(uint512) = test_cases.contains.contract.three_u512()
        let tmp%40#1: biguint = (itob 3u)
        let tmp%41#1: bool = (b== awst_tmp%6#1 tmp%40#1)
        goto tmp%41#1 ? block@82 : block@81
    block@81: // or_contd_L96
        let tmp%42#1: biguint = (itob 4u)
        let tmp%43#1: bool = (b== awst_tmp%6#1 tmp%42#1)
        goto tmp%43#1 ? block@82 : block@83
    block@82: // bool_true_L96
        let or_result%7#3: bool = 1u
        goto block@84
    block@83: // bool_false_L96
        let or_result%7#4: bool = 0u
        goto block@84
    block@84: // bool_merge_L96
        let or_result%7#5: bool = φ(or_result%7#3 <- block@82, or_result%7#4 <- block@83)
        (assert or_result%7#5) // 3 in (3, 4)
        let awst_tmp%7#1: biguint = test_cases.contains.contract.four_biguint()
        let tmp%44#1: biguint = (itob 5u)
        let tmp%45#1: bool = (b== awst_tmp%7#1 tmp%44#1)
        goto tmp%45#1 ? block@86 : block@85
    block@85: // or_contd_L97
        let tmp%46#1: biguint = (itob 4u)
        let tmp%47#1: bool = (b== awst_tmp%7#1 tmp%46#1)
        goto tmp%47#1 ? block@86 : block@87
    block@86: // bool_true_L97
        let or_result%8#3: bool = 1u
        goto block@88
    block@87: // bool_false_L97
        let or_result%8#4: bool = 0u
        goto block@88
    block@88: // bool_merge_L97
        let or_result%8#5: bool = φ(or_result%8#3 <- block@86, or_result%8#4 <- block@87)
        (assert or_result%8#5) // 4 in (5, 4)
        let awst_tmp%8#1: uint64 = test_cases.contains.contract.one_u64()
        let tmp%48#1: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%49#1: bool = (== awst_tmp%8#1 5u)
        goto tmp%49#1 ? block@90 : block@89
    block@89: // or_contd_L99
        let tmp%50#1: biguint = (itob awst_tmp%8#1)
        let tmp%51#1: bool = (b== tmp%48#1 tmp%50#1)
        goto tmp%51#1 ? block@90 : block@91
    block@90: // bool_true_L99
        let or_result%9#3: bool = 1u
        goto block@92
    block@91: // bool_false_L99
        let or_result%9#4: bool = 0u
        goto block@92
    block@92: // bool_merge_L99
        let or_result%9#5: bool = φ(or_result%9#3 <- block@90, or_result%9#4 <- block@91)
        let tmp%52#1: bool = (! or_result%9#5)
        (assert tmp%52#1) // 1 not in (5, 2)
        let awst_tmp%9#1: uint64 = test_cases.contains.contract.one_u64()
        let tmp%53#1: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%54#1: bool = (== awst_tmp%9#1 3u)
        goto tmp%54#1 ? block@94 : block@93
    block@93: // or_contd_L100
        let tmp%55#1: biguint = (itob awst_tmp%9#1)
        let tmp%56#1: bool = (b== tmp%53#1 tmp%55#1)
        goto tmp%56#1 ? block@94 : block@95
    block@94: // bool_true_L100
        let or_result%10#0: bool = 1u
        goto block@96
    block@95: // bool_false_L100
        let or_result%10#1: bool = 0u
        goto block@96
    block@96: // bool_merge_L100
        let or_result%10#2: bool = φ(or_result%10#0 <- block@94, or_result%10#1 <- block@95)
        let tmp%57#1: bool = (! or_result%10#2)
        (assert tmp%57#1) // 1 not in (app(1), 3, 2)
        let awst_tmp%10#0: uint64 = test_cases.contains.contract.one_u64()
        let tmp%58#1: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%59#1: bool = (== awst_tmp%10#0 3u)
        goto tmp%59#1 ? block@98 : block@97
    block@97: // or_contd_L101
        let tmp%60#1: biguint = (itob awst_tmp%10#0)
        let tmp%61#1: bool = (b== tmp%58#1 tmp%60#1)
        goto tmp%61#1 ? block@98 : block@99
    block@98: // bool_true_L101
        let or_result%11#0: bool = 1u
        goto block@100
    block@99: // bool_false_L101
        let or_result%11#1: bool = 0u
        goto block@100
    block@100: // bool_merge_L101
        let or_result%11#2: bool = φ(or_result%11#0 <- block@98, or_result%11#1 <- block@99)
        let tmp%62#1: bool = (! or_result%11#2)
        (assert tmp%62#1) // 1 not in (3, 2)
        let tmp%63#1: Encoded(uint64) = test_cases.contains.contract.one_arc4u64()
        let tmp%65#1: bool = (b== tmp%63#1 tmp%23#1)
        goto tmp%65#1 ? block@102 : block@101
    block@101: // or_contd_L102
        let tmp%66#1: bool = 0u
        let or_result%12#1: bool = 0u
        goto block@104
    block@102: // bool_true_L102
        let or_result%12#0: bool = 1u
        goto block@104
    block@104: // bool_merge_L102
        let or_result%12#2: bool = φ(or_result%12#0 <- block@102, or_result%12#1 <- block@101)
        let tmp%67#1: bool = (! or_result%12#2)
        (assert tmp%67#1) // 2 not in (1, 3)
        let awst_tmp%11#0: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%68#1: Encoded(uint64) = test_cases.contains.contract.one_arc4u64()
        let tmp%69#1: bool = (b== awst_tmp%11#0 tmp%68#1)
        goto tmp%69#1 ? block@106 : block@105
    block@105: // or_contd_L103
        let tmp%71#1: bool = (b== awst_tmp%11#0 tmp%40#1)
        goto tmp%71#1 ? block@106 : block@107
    block@106: // bool_true_L103
        let or_result%13#0: bool = 1u
        goto block@108
    block@107: // bool_false_L103
        let or_result%13#1: bool = 0u
        goto block@108
    block@108: // bool_merge_L103
        let or_result%13#2: bool = φ(or_result%13#0 <- block@106, or_result%13#1 <- block@107)
        let tmp%72#0: bool = (! or_result%13#2)
        (assert tmp%72#0) // 2 not in (1, 3)
        let awst_tmp%12#0: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%73#0: Encoded(uint64) = test_cases.contains.contract.one_arc4u64()
        let tmp%74#0: bool = (b== awst_tmp%12#0 tmp%73#0)
        goto tmp%74#0 ? block@110 : block@109
    block@109: // or_contd_L104
        let tmp%76#0: bool = (b== awst_tmp%12#0 tmp%40#1)
        goto tmp%76#0 ? block@110 : block@111
    block@110: // bool_true_L104
        let or_result%14#0: bool = 1u
        goto block@112
    block@111: // bool_false_L104
        let or_result%14#1: bool = 0u
        goto block@112
    block@112: // bool_merge_L104
        let or_result%14#2: bool = φ(or_result%14#0 <- block@110, or_result%14#1 <- block@111)
        let tmp%77#0: bool = (! or_result%14#2)
        (assert tmp%77#0) // 2 not in (1, 3)
        let awst_tmp%13#0: Encoded(uint512) = test_cases.contains.contract.three_u512()
        let tmp%79#0: bool = (b== awst_tmp%13#0 tmp%44#1)
        goto tmp%79#0 ? block@114 : block@113
    block@113: // or_contd_L105
        let tmp%80#0: biguint = (itob 7u)
        let tmp%81#0: bool = (b== awst_tmp%13#0 tmp%80#0)
        goto tmp%81#0 ? block@114 : block@115
    block@114: // bool_true_L105
        let or_result%15#0: bool = 1u
        goto block@116
    block@115: // bool_false_L105
        let or_result%15#1: bool = 0u
        goto block@116
    block@116: // bool_merge_L105
        let or_result%15#2: bool = φ(or_result%15#0 <- block@114, or_result%15#1 <- block@115)
        let tmp%82#0: bool = (! or_result%15#2)
        (assert tmp%82#0) // 3 not in (5, 7)
        let awst_tmp%14#0: biguint = test_cases.contains.contract.four_biguint()
        let tmp%84#0: bool = (b== awst_tmp%14#0 tmp%23#1)
        goto tmp%84#0 ? block@118 : block@117
    block@117: // or_contd_L106
        let tmp%85#0: biguint = (itob 9u)
        let tmp%86#0: bool = (b== awst_tmp%14#0 tmp%85#0)
        goto tmp%86#0 ? block@118 : block@119
    block@118: // bool_true_L106
        let or_result%16#0: bool = 1u
        goto block@120
    block@119: // bool_false_L106
        let or_result%16#1: bool = 0u
        goto block@120
    block@120: // bool_merge_L106
        let or_result%16#2: bool = φ(or_result%16#0 <- block@118, or_result%16#1 <- block@119)
        let tmp%87#0: bool = (! or_result%16#2)
        (assert tmp%87#0) // 4 not in (2, 9)
        let awst_tmp%15#0: uint64 = test_cases.contains.contract.one_u64()
        let tmp%88#0: string = test_cases.contains.contract.foo_string()
        let tmp%89#0: uint64 = test_cases.contains.contract.one_u64()
        let tmp%90#0: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%91#0: bool = (== awst_tmp%15#0 tmp%89#0)
        goto tmp%91#0 ? block@123 : block@121
    block@121: // or_contd_L108
        let tmp%92#0: bool = (== awst_tmp%15#0 3u)
        goto tmp%92#0 ? block@123 : block@122
    block@122: // or_contd_L108
        let tmp%93#0: biguint = (itob awst_tmp%15#0)
        let tmp%94#0: bool = (b== tmp%90#0 tmp%93#0)
        goto tmp%94#0 ? block@123 : block@124
    block@123: // bool_true_L108
        let or_result%17#0: bool = 1u
        goto block@125
    block@124: // bool_false_L108
        let or_result%17#1: bool = 0u
        goto block@125
    block@125: // bool_merge_L108
        let or_result%17#2: bool = φ(or_result%17#0 <- block@123, or_result%17#1 <- block@124)
        (assert or_result%17#2) // 1 in (foo, 1, 3, 2)
        let tmp%95#0: Encoded(uint64) = test_cases.contains.contract.one_arc4u64()
        let tmp%96#0: string = test_cases.contains.contract.bar_string()
        let tmp%97#0: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let awst_tmp%16#0: uint64 = test_cases.contains.contract.one_u64()
        let tmp%98#0: biguint = (itob awst_tmp%16#0)
        let tmp%99#0: bool = (b== tmp%95#0 tmp%98#0)
        goto tmp%99#0 ? block@127 : block@126
    block@126: // or_contd_L114
        let tmp%101#0: bool = (b== tmp%97#0 tmp%98#0)
        goto tmp%101#0 ? block@127 : block@128
    block@127: // bool_true_L114
        let or_result%18#0: bool = 1u
        goto block@129
    block@128: // bool_false_L114
        let or_result%18#1: bool = 0u
        goto block@129
    block@129: // bool_merge_L114
        let or_result%18#2: bool = φ(or_result%18#0 <- block@127, or_result%18#1 <- block@128)
        (assert or_result%18#2) // 1 in (1, bar, 2)
        let tmp%102#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%103#0: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%104#0: bool = 0u
        let tmp%106#0: bool = (b== tmp%103#0 tmp%23#1)
        goto tmp%106#0 ? block@131 : block@132
    block@131: // bool_true_L115
        let or_result%19#0: bool = 1u
        goto block@133
    block@132: // bool_false_L115
        let or_result%19#1: bool = 0u
        goto block@133
    block@133: // bool_merge_L115
        let or_result%19#2: bool = φ(or_result%19#0 <- block@131, or_result%19#1 <- block@132)
        (assert or_result%19#2) // 2 in (foo, 3, 2)
        let awst_tmp%17#0: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%107#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%108#0: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%110#0: bool = (b== awst_tmp%17#0 tmp%40#1)
        goto tmp%110#0 ? block@135 : block@134
    block@134: // or_contd_L116
        let tmp%111#0: bool = (b== awst_tmp%17#0 tmp%108#0)
        goto tmp%111#0 ? block@135 : block@136
    block@135: // bool_true_L116
        let or_result%20#0: bool = 1u
        goto block@137
    block@136: // bool_false_L116
        let or_result%20#1: bool = 0u
        goto block@137
    block@137: // bool_merge_L116
        let or_result%20#2: bool = φ(or_result%20#0 <- block@135, or_result%20#1 <- block@136)
        (assert or_result%20#2) // 2 in (bar, 3, 2)
        let awst_tmp%18#0: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%112#0: string = test_cases.contains.contract.foo_string()
        let tmp%114#0: bool = (b== awst_tmp%18#0 tmp%23#1)
        goto tmp%114#0 ? block@139 : block@138
    block@138: // or_contd_L117
        let tmp%116#0: bool = (b== awst_tmp%18#0 tmp%40#1)
        goto tmp%116#0 ? block@139 : block@140
    block@139: // bool_true_L117
        let or_result%21#0: bool = 1u
        goto block@141
    block@140: // bool_false_L117
        let or_result%21#1: bool = 0u
        goto block@141
    block@141: // bool_merge_L117
        let or_result%21#2: bool = φ(or_result%21#0 <- block@139, or_result%21#1 <- block@140)
        (assert or_result%21#2) // 2 in foo(2, 3)
        let awst_tmp%19#0: Encoded(uint512) = test_cases.contains.contract.three_u512()
        let tmp%117#0: string = test_cases.contains.contract.foo_string()
        let tmp%119#0: bool = (b== awst_tmp%19#0 tmp%44#1)
        goto tmp%119#0 ? block@143 : block@142
    block@142: // or_contd_L118
        let tmp%121#0: bool = (b== awst_tmp%19#0 tmp%40#1)
        goto tmp%121#0 ? block@143 : block@144
    block@143: // bool_true_L118
        let or_result%22#0: bool = 1u
        goto block@145
    block@144: // bool_false_L118
        let or_result%22#1: bool = 0u
        goto block@145
    block@145: // bool_merge_L118
        let or_result%22#2: bool = φ(or_result%22#0 <- block@143, or_result%22#1 <- block@144)
        (assert or_result%22#2) // 3 in (5, 3, foo)
        let awst_tmp%20#0: uint64 = test_cases.contains.contract.one_u64()
        let tmp%122#0: string = test_cases.contains.contract.foo_string()
        let tmp%123#0: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%124#0: bool = (== awst_tmp%20#0 3u)
        goto tmp%124#0 ? block@147 : block@146
    block@146: // or_contd_L120
        let tmp%125#0: biguint = (itob awst_tmp%20#0)
        let tmp%126#0: bool = (b== tmp%123#0 tmp%125#0)
        goto tmp%126#0 ? block@147 : block@148
    block@147: // bool_true_L120
        let or_result%23#0: bool = 1u
        goto block@149
    block@148: // bool_false_L120
        let or_result%23#1: bool = 0u
        goto block@149
    block@149: // bool_merge_L120
        let or_result%23#2: bool = φ(or_result%23#0 <- block@147, or_result%23#1 <- block@148)
        let tmp%127#0: bool = (! or_result%23#2)
        (assert tmp%127#0) // 1 not in (foo, 3, 2)
        let tmp%128#0: string = test_cases.contains.contract.bar_string()
        let tmp%129#0: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let awst_tmp%21#0: uint64 = test_cases.contains.contract.one_u64()
        let tmp%130#0: biguint = (itob awst_tmp%21#0)
        let tmp%131#0: bool = (b== tmp%129#0 tmp%130#0)
        let tmp%132#0: bool = (! tmp%131#0)
        (assert tmp%132#0) // 1 not in (bar, 2)
        let tmp%133#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%134#0: bool = 0u
        let tmp%135#0: bool = 1u
        let awst_tmp%22#0: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%136#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%138#0: bool = (b== awst_tmp%22#0 tmp%40#1)
        let tmp%139#0: bool = (! tmp%138#0)
        (assert tmp%139#0) // 2 not in (bar, 3)
        let awst_tmp%23#0: Encoded(uint8) = test_cases.contains.contract.two_u8()
        let tmp%140#0: string = test_cases.contains.contract.foo_string()
        let tmp%142#0: bool = (b== awst_tmp%23#0 tmp%40#1)
        let tmp%143#0: bool = (! tmp%142#0)
        (assert tmp%143#0) // 2 not in (foo, 3)
        let awst_tmp%24#0: Encoded(uint512) = test_cases.contains.contract.three_u512()
        let tmp%144#0: string = test_cases.contains.contract.foo_string()
        let tmp%146#0: bool = (b== awst_tmp%24#0 tmp%44#1)
        let tmp%147#0: bool = (! tmp%146#0)
        (assert tmp%147#0) // 3 not in (5, foo)
        let tmp%148#0: biguint = (itob 64u)
        let tmp%149#0: bool = 0u
        let tmp%150#0: biguint = (itob 66u)
        let tmp%151#0: bool = 0u
        let or_result%24#1: bool = 0u
        goto block@153
    block@153: // bool_merge_L130
        let tmp%152#0: bool = (! or_result%24#1)
        (assert tmp%152#0) // 65 not in (b'A', 64, 66)
        return 1u

subroutine test_cases.contains.contract.one_u64() -> uint64:
    block@0: // L137
        return 1u

subroutine test_cases.contains.contract.one_arc4u64() -> Encoded(uint64):
    block@0: // L142
        return 0x0000000000000001

subroutine test_cases.contains.contract.two_u64() -> uint64:
    block@0: // L147
        return 2u

subroutine test_cases.contains.contract.two_u8() -> Encoded(uint8):
    block@0: // L152
        return 0x02

subroutine test_cases.contains.contract.three_u512() -> Encoded(uint512):
    block@0: // L157
        return 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003

subroutine test_cases.contains.contract.four_biguint() -> biguint:
    block@0: // L162
        return 4b

subroutine test_cases.contains.contract.foo_string() -> string:
    block@0: // L167
        return "foo"

subroutine test_cases.contains.contract.foo_arc4() -> Encoded(len+utf8[]):
    block@0: // L172
        let length%0#0: uint64 = 3u
        let as_bytes%0#0: bytes[8] = (itob 3u)
        let length_uint16%0#0: bytes = 0x0003
        let encoded_value%0#0: bytes = 0x0003666f6f
        return 0x0003666f6f

subroutine test_cases.contains.contract.bar_string() -> string:
    block@0: // L177
        return "bar"

subroutine test_cases.contains.contract.bar_arc4() -> Encoded(len+utf8[]):
    block@0: // L182
        let length%0#0: uint64 = 3u
        let as_bytes%0#0: bytes[8] = (itob 3u)
        let length_uint16%0#0: bytes = 0x0003
        let encoded_value%0#0: bytes = 0x0003626172
        return 0x0003626172

subroutine test_cases.contains.contract.baz_string() -> string:
    block@0: // L187
        return "baz"

subroutine test_cases.contains.contract.MyContract.is_in_tuple_1(x: uint64, y.0: uint64, y.1: uint64, y.2: bytes) -> bool:
    block@0: // L42
        let tmp%0#0: bool = (== x#0 y.0#0)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // or_contd_L44
        let tmp%1#0: bool = (== x#0 y.1#0)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L44
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L44
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L44
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        return or_result%0#2

subroutine test_cases.contains.contract.MyContract.is_in_tuple_2(x: bytes, y.0: bytes, y.1: uint64, y.2: bytes) -> bool:
    block@0: // L46
        let tmp%0#0: bool = (== x#0 y.0#0)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // or_contd_L48
        let tmp%1#0: bool = (== x#0 y.2#0)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L48
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L48
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L48
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        return or_result%0#2

subroutine test_cases.contains.contract.MyContract.is_in_tuple_3(x: biguint, y.0: biguint, y.1: biguint) -> bool:
    block@0: // L50
        let tmp%0#0: bool = (b== x#0 y.0#0)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // or_contd_L52
        let tmp%1#0: bool = (b== x#0 y.1#0)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L52
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L52
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L52
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        return or_result%0#2