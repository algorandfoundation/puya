main test_cases.contains.contract.MyContract.approval_program:
    block@0: // L7
        let one_true#0: bool = test_cases.contains.contract.MyContract.is_in_tuple_1(10u, 10u, 15u, 0x66697665)
        let one_false#0: bool = test_cases.contains.contract.MyContract.is_in_tuple_1(5u, 10u, 15u, 0x66697665)
        (assert one_true#0) // Should be true
        let tmp%2#0: bool = (! one_false#0)
        (assert tmp%2#0) // Should be false
        let two_true#0: bool = test_cases.contains.contract.MyContract.is_in_tuple_2(0x68656c6c6f, 0x68656c6c6f, 0u, 0x626f6e6a6f7572)
        let two_false#0: bool = test_cases.contains.contract.MyContract.is_in_tuple_2(0x6369616f, 0x68656c6c6f, 0u, 0x626f6e6a6f7572)
        (assert two_true#0) // Should be true
        let tmp%5#0: bool = (! two_false#0)
        (assert tmp%5#0) // Should be false
        let three_true#0: bool = test_cases.contains.contract.MyContract.is_in_tuple_3(32323423423423b, 32323423423423b, 8439439483934b)
        let three_false#0: bool = test_cases.contains.contract.MyContract.is_in_tuple_3(64646846846846b, 32323423423423b, 8439439483934b)
        (assert three_true#0) // Should be true
        let tmp%9#0: bool = (! three_false#0)
        (assert tmp%9#0) // Should be false
        let tmp%2#1: bool = 1u
        let or_result%0#0: bool = 1u
        goto block@5
    block@5: // bool_merge_L56
        (assert or_result%0#0) // foo in (foo, baz)
        let tmp%6#1: bool = 0u
        let tmp%7#1: bool = 0u
        let or_result%1#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L57
        let tmp%8#1: bool = (! or_result%1#1)
        (assert tmp%8#1) // foo not in (bar, baz)
        let tmp%9#1: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%12#0: string = decode_bytes<string>(tmp%9#1)
        let tmp%13#0: bool = (== tmp%12#0 "foo")
        goto tmp%13#0 ? block@12 : block@10
    block@10: // or_contd_L58
        let tmp%14#0: bool = 0u
        let tmp%15#0: bool = 0u
        let or_result%2#1: bool = 0u
        goto block@14
    block@12: // bool_true_L58
        let or_result%2#0: bool = 1u
        goto block@14
    block@14: // bool_merge_L58
        let or_result%2#2: bool = φ(or_result%2#0 <- block@12, or_result%2#1 <- block@10)
        (assert or_result%2#2) // foo in (foo, baz, bar)
        let awst_tmp%3#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%16#0: string = decode_bytes<string>(awst_tmp%3#0)
        let tmp%20#0: bool = (== tmp%16#0 "foo")
        goto tmp%20#0 ? block@17 : block@15
    block@15: // or_contd_L59
        let tmp%22#0: bool = (== tmp%16#0 "baz")
        goto tmp%22#0 ? block@17 : block@16
    block@16: // or_contd_L59
        let tmp%24#0: bool = (== tmp%16#0 "bar")
        goto tmp%24#0 ? block@17 : block@18
    block@17: // bool_true_L59
        let or_result%3#0: bool = 1u
        goto block@19
    block@18: // bool_false_L59
        let or_result%3#1: bool = 0u
        goto block@19
    block@19: // bool_merge_L59
        let or_result%3#2: bool = φ(or_result%3#0 <- block@17, or_result%3#1 <- block@18)
        (assert or_result%3#2) // foo in (foo, baz, bar)
        let tmp%25#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%27#0: string = decode_bytes<string>(tmp%25#0)
        let tmp%28#0: bool = (== tmp%27#0 "foo")
        goto tmp%28#0 ? block@21 : block@20
    block@20: // or_contd_L60
        let tmp%29#0: bool = 0u
        let or_result%4#1: bool = 0u
        goto block@23
    block@21: // bool_true_L60
        let or_result%4#0: bool = 1u
        goto block@23
    block@23: // bool_merge_L60
        let or_result%4#2: bool = φ(or_result%4#0 <- block@21, or_result%4#1 <- block@20)
        let tmp%30#0: bool = (! or_result%4#2)
        (assert tmp%30#0) // foo not in (bar, baz)
        let awst_tmp%5#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%31#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%33#0: bool = (== awst_tmp%5#0 tmp%31#0)
        goto tmp%33#0 ? block@25 : block@24
    block@24: // or_contd_L61
        let tmp%34#0: string = decode_bytes<string>(awst_tmp%5#0)
        let tmp%35#0: bool = (== tmp%34#0 "baz")
        goto tmp%35#0 ? block@25 : block@26
    block@25: // bool_true_L61
        let or_result%5#0: bool = 1u
        goto block@27
    block@26: // bool_false_L61
        let or_result%5#1: bool = 0u
        goto block@27
    block@27: // bool_merge_L61
        let or_result%5#2: bool = φ(or_result%5#0 <- block@25, or_result%5#1 <- block@26)
        let tmp%36#0: bool = (! or_result%5#2)
        (assert tmp%36#0) // foo not in (bar, baz)
        let tmp%37#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%41#0: string = decode_bytes<string>(tmp%37#0)
        let tmp%42#0: bool = (== tmp%41#0 "foo")
        goto tmp%42#0 ? block@30 : block@28
    block@28: // or_contd_L62
        let tmp%43#0: bool = 0u
        let tmp%44#0: bool = 1u
        goto block@30
    block@30: // bool_true_L62
        let or_result%6#0: bool = 1u
        goto block@32
    block@32: // bool_merge_L62
        (assert or_result%6#0) // foo in (bar, baz, foo, 1)
        let awst_tmp%7#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%45#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%49#0: bool = (== awst_tmp%7#0 tmp%45#0)
        goto tmp%49#0 ? block@35 : block@33
    block@33: // or_contd_L68
        let tmp%50#0: string = decode_bytes<string>(awst_tmp%7#0)
        let tmp%51#0: bool = (== tmp%50#0 "baz")
        goto tmp%51#0 ? block@35 : block@34
    block@34: // or_contd_L68
        let tmp%53#0: bool = (== tmp%50#0 "foo")
        goto tmp%53#0 ? block@35 : block@36
    block@35: // bool_true_L68
        let or_result%7#0: bool = 1u
        goto block@37
    block@36: // bool_false_L68
        let or_result%7#1: bool = 0u
        goto block@37
    block@37: // bool_merge_L68
        let or_result%7#2: bool = φ(or_result%7#0 <- block@35, or_result%7#1 <- block@36)
        (assert or_result%7#2) // foo in (bar, baz, foo, 1)
        let tmp%54#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%57#0: string = decode_bytes<string>(tmp%54#0)
        let tmp%58#0: bool = (== tmp%57#0 "foo")
        goto tmp%58#0 ? block@39 : block@38
    block@38: // or_contd_L74
        let tmp%59#0: bool = 0u
        let or_result%8#1: bool = 0u
        goto block@41
    block@39: // bool_true_L74
        let or_result%8#0: bool = 1u
        goto block@41
    block@41: // bool_merge_L74
        let or_result%8#2: bool = φ(or_result%8#0 <- block@39, or_result%8#1 <- block@38)
        let tmp%60#0: bool = (! or_result%8#2)
        (assert tmp%60#0) // foo not in (bar, baz, 1)
        let awst_tmp%9#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%61#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%64#0: bool = (== awst_tmp%9#0 tmp%61#0)
        goto tmp%64#0 ? block@43 : block@42
    block@42: // or_contd_L79
        let tmp%65#0: string = decode_bytes<string>(awst_tmp%9#0)
        let tmp%66#0: bool = (== tmp%65#0 "baz")
        goto tmp%66#0 ? block@43 : block@44
    block@43: // bool_true_L79
        let or_result%9#0: bool = 1u
        goto block@45
    block@44: // bool_false_L79
        let or_result%9#1: bool = 0u
        goto block@45
    block@45: // bool_merge_L79
        let or_result%9#2: bool = φ(or_result%9#0 <- block@43, or_result%9#1 <- block@44)
        let tmp%67#0: bool = (! or_result%9#2)
        (assert tmp%67#0) // foo not in (bar, baz, 1)
        let tmp%69#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%2#2: bool = 1u
        let or_result%0#3: bool = 1u
        goto block@51
    block@51: // bool_merge_L88
        (assert or_result%0#3) // 1 in (1, 2)
        let tmp%5#2: bool = 0u
        let tmp%6#2: bool = 0u
        let or_result%1#4: bool = 0u
        goto block@55
    block@55: // bool_merge_L89
        let tmp%7#2: bool = (! or_result%1#4)
        (assert tmp%7#2) // 1 not in (3, 2)
        let tmp%10#1: bool = 1u
        let or_result%2#3: bool = 1u
        goto block@60
    block@60: // bool_merge_L91
        (assert or_result%2#3) // 1 in (1, 3, 2)
        let tmp%16#1: biguint = (itob 1u)
        let tmp%17#1: bool = 1u
        let or_result%3#3: bool = 1u
        goto block@65
    block@65: // bool_merge_L92
        (assert or_result%3#3) // 1 in (1, 4, 2)
        let tmp%23#1: biguint = (itob 2u)
        let tmp%24#1: bool = 0u
        let tmp%27#1: bool = 1u
        let or_result%4#3: bool = 1u
        goto block@70
    block@70: // bool_merge_L93
        (assert or_result%4#3) // 2 in (1, 3, 2)
        let tmp%30#1: bool = 0u
        let tmp%31#1: biguint = (itob 3u)
        let tmp%32#1: bool = 0u
        let tmp%33#1: bool = 1u
        let or_result%5#3: bool = 1u
        goto block@75
    block@75: // bool_merge_L94
        (assert or_result%5#3) // 2 in (1, 3, 2)
        let tmp%35#1: bool = 0u
        let tmp%37#1: bool = 1u
        let or_result%6#3: bool = 1u
        goto block@80
    block@80: // bool_merge_L95
        (assert or_result%6#3) // 2 in (1, 2, 3)
        let tmp%41#1: bool = 1u
        let or_result%7#3: bool = 1u
        goto block@84
    block@84: // bool_merge_L96
        (assert or_result%7#3) // 3 in (3, 4)
        let tmp%44#1: biguint = (itob 5u)
        let tmp%45#1: bool = 0u
        let tmp%46#1: biguint = (itob 4u)
        let tmp%47#1: bool = 1u
        let or_result%8#3: bool = 1u
        goto block@88
    block@88: // bool_merge_L97
        (assert or_result%8#3) // 4 in (5, 4)
        let tmp%49#1: bool = 0u
        let tmp%51#1: bool = 0u
        let or_result%9#4: bool = 0u
        goto block@92
    block@92: // bool_merge_L99
        let tmp%52#1: bool = (! or_result%9#4)
        (assert tmp%52#1) // 1 not in (5, 2)
        let tmp%54#1: bool = 0u
        let tmp%56#1: bool = 0u
        let or_result%10#1: bool = 0u
        goto block@96
    block@96: // bool_merge_L100
        let tmp%57#1: bool = (! or_result%10#1)
        (assert tmp%57#1) // 1 not in (app(1), 3, 2)
        let tmp%59#1: bool = 0u
        let tmp%61#1: bool = 0u
        let or_result%11#1: bool = 0u
        goto block@100
    block@100: // bool_merge_L101
        let tmp%62#1: bool = (! or_result%11#1)
        (assert tmp%62#1) // 1 not in (3, 2)
        let tmp%65#1: bool = 0u
        let or_result%12#1: bool = 0u
        goto block@104
    block@104: // bool_merge_L102
        let tmp%67#1: bool = (! or_result%12#1)
        (assert tmp%67#1) // 2 not in (1, 3)
        let tmp%69#1: bool = 0u
        let tmp%71#1: bool = 0u
        let or_result%13#1: bool = 0u
        goto block@108
    block@108: // bool_merge_L103
        let tmp%72#0: bool = (! or_result%13#1)
        (assert tmp%72#0) // 2 not in (1, 3)
        let tmp%74#0: bool = 0u
        let tmp%76#0: bool = 0u
        let or_result%14#1: bool = 0u
        goto block@112
    block@112: // bool_merge_L104
        let tmp%77#0: bool = (! or_result%14#1)
        (assert tmp%77#0) // 2 not in (1, 3)
        let tmp%79#0: bool = 0u
        let tmp%80#0: biguint = (itob 7u)
        let tmp%81#0: bool = 0u
        let or_result%15#1: bool = 0u
        goto block@116
    block@116: // bool_merge_L105
        let tmp%82#0: bool = (! or_result%15#1)
        (assert tmp%82#0) // 3 not in (5, 7)
        let tmp%84#0: bool = 0u
        let tmp%85#0: biguint = (itob 9u)
        let tmp%86#0: bool = 0u
        let or_result%16#1: bool = 0u
        goto block@120
    block@120: // bool_merge_L106
        let tmp%87#0: bool = (! or_result%16#1)
        (assert tmp%87#0) // 4 not in (2, 9)
        let tmp%91#0: bool = 1u
        let or_result%17#0: bool = 1u
        goto block@125
    block@125: // bool_merge_L108
        (assert or_result%17#0) // 1 in (foo, 1, 3, 2)
        let tmp%99#0: bool = 1u
        let or_result%18#0: bool = 1u
        goto block@129
    block@129: // bool_merge_L114
        (assert or_result%18#0) // 1 in (1, bar, 2)
        let tmp%102#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%106#0: bool = 1u
        let or_result%19#0: bool = 1u
        goto block@133
    block@133: // bool_merge_L115
        (assert or_result%19#0) // 2 in (foo, 3, 2)
        let tmp%107#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%110#0: bool = 0u
        let tmp%111#0: bool = 1u
        let or_result%20#0: bool = 1u
        goto block@137
    block@137: // bool_merge_L116
        (assert or_result%20#0) // 2 in (bar, 3, 2)
        let tmp%114#0: bool = 1u
        let or_result%21#0: bool = 1u
        goto block@141
    block@141: // bool_merge_L117
        (assert or_result%21#0) // 2 in foo(2, 3)
        let tmp%119#0: bool = 0u
        let tmp%121#0: bool = 1u
        let or_result%22#0: bool = 1u
        goto block@145
    block@145: // bool_merge_L118
        (assert or_result%22#0) // 3 in (5, 3, foo)
        let tmp%124#0: bool = 0u
        let tmp%126#0: bool = 0u
        let or_result%23#1: bool = 0u
        goto block@149
    block@149: // bool_merge_L120
        let tmp%127#0: bool = (! or_result%23#1)
        (assert tmp%127#0) // 1 not in (foo, 3, 2)
        let tmp%131#0: bool = 0u
        let tmp%132#0: bool = 1u
        let tmp%133#0: Encoded(len+utf8[]) = test_cases.contains.contract.foo_arc4()
        let tmp%136#0: Encoded(len+utf8[]) = test_cases.contains.contract.bar_arc4()
        let tmp%138#0: bool = 0u
        let tmp%139#0: bool = 1u
        let tmp%142#0: bool = 0u
        let tmp%143#0: bool = 1u
        let tmp%146#0: bool = 0u
        let tmp%147#0: bool = 1u
        let tmp%152#0: bool = 1u
        return 1u

subroutine test_cases.contains.contract.foo_arc4() -> Encoded(len+utf8[]):
    block@0: // L172
        let encoded%0#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(0x666f6f)
        return encoded%0#0

subroutine test_cases.contains.contract.bar_arc4() -> Encoded(len+utf8[]):
    block@0: // L182
        let encoded%0#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(0x626172)
        return encoded%0#0

subroutine test_cases.contains.contract.MyContract.is_in_tuple_1(x: uint64, y.0: uint64, y.1: uint64, y.2: bytes) -> bool:
    block@0: // L42
        let tmp%0#0: bool = (== x#0 y.0#0)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // or_contd_L44
        let tmp%1#0: bool = (== x#0 y.1#0)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L44
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L44
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L44
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        return or_result%0#2

subroutine test_cases.contains.contract.MyContract.is_in_tuple_2(x: bytes, y.0: bytes, y.1: uint64, y.2: bytes) -> bool:
    block@0: // L46
        let tmp%0#0: bool = (== x#0 y.0#0)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // or_contd_L48
        let tmp%1#0: bool = (== x#0 y.2#0)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L48
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L48
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L48
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        return or_result%0#2

subroutine test_cases.contains.contract.MyContract.is_in_tuple_3(x: biguint, y.0: biguint, y.1: biguint) -> bool:
    block@0: // L50
        let tmp%0#0: bool = (b== x#0 y.0#0)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // or_contd_L52
        let tmp%1#0: bool = (b== x#0 y.1#0)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L52
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L52
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L52
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        return or_result%0#2