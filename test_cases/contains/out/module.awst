abstract contract ARC4Contract
{
  clear_state_program(): bool
  {
    return true
  }
}

contract MyContract
{
  approval_program(): uint64
  {
    not_ten: uint64 = 15u
    one_true: bool = this::is_in_tuple_1(10u, (10u, not_ten, hex<"66697665">))
    one_false: bool = this::is_in_tuple_1(5u, (10u, not_ten, hex<"66697665">))
    assert(one_true, comment="Should be true")
    assert(!(one_false), comment="Should be false")
    two_true: bool = this::is_in_tuple_2(hex<"68656C6C6F">, (hex<"68656C6C6F">, 0u, hex<"626F6E6A6F7572">))
    two_false: bool = this::is_in_tuple_2(hex<"6369616F">, (hex<"68656C6C6F">, 0u, hex<"626F6E6A6F7572">))
    assert(two_true, comment="Should be true")
    assert(!(two_false), comment="Should be false")
    three_true: bool = this::is_in_tuple_3(32323423423423n, (32323423423423n, 8439439483934n))
    three_false: bool = this::is_in_tuple_3(32323423423423n b+ 32323423423423n, (32323423423423n, 8439439483934n))
    assert(three_true, comment="Should be true")
    assert(!(three_false), comment="Should be false")
    this::test_string_types()
    this::test_numeric_types()
    return 1u
  }
  
  clear_state_program(): uint64
  {
    return 1u
  }
  
  subroutine is_in_tuple_1(x: uint64, y: tuple<uint64,uint64,bytes>): bool
  {
    return x == y[0] or x == y[1]
  }
  
  subroutine is_in_tuple_2(x: bytes, y: tuple<bytes,uint64,bytes>): bool
  {
    return x == y[0] or x == y[2]
  }
  
  subroutine is_in_tuple_3(x: biguint, y: tuple<biguint,biguint>): bool
  {
    return x == y[0] or x == y[1]
  }
  
  subroutine test_string_types(): void
  {
    assert(SINGLE_EVAL(id=0, source=test_cases.contains.contract.foo_string()) == SINGLE_EVAL(id=1, source=(test_cases.contains.contract.foo_string(), test_cases.contains.contract.baz_string()))[0] or SINGLE_EVAL(id=0) == SINGLE_EVAL(id=1)[1], comment="foo in (foo, baz)")
    assert(!(SINGLE_EVAL(id=2, source=test_cases.contains.contract.foo_string()) == SINGLE_EVAL(id=3, source=(test_cases.contains.contract.bar_string(), test_cases.contains.contract.baz_string()))[0] or SINGLE_EVAL(id=2) == SINGLE_EVAL(id=3)[1]), comment="foo not in (bar, baz)")
    assert(arc4_decode(SINGLE_EVAL(id=4, source=(test_cases.contains.contract.foo_arc4(), test_cases.contains.contract.baz_string(), test_cases.contains.contract.bar_string()))[0], string) == SINGLE_EVAL(id=5, source=test_cases.contains.contract.foo_string()) or SINGLE_EVAL(id=5) == SINGLE_EVAL(id=4)[1] or SINGLE_EVAL(id=5) == SINGLE_EVAL(id=4)[2], comment="foo in (foo, baz, bar)")
    assert(arc4_decode(SINGLE_EVAL(id=6, source=test_cases.contains.contract.foo_arc4()), string) == SINGLE_EVAL(id=7, source=(test_cases.contains.contract.foo_string(), test_cases.contains.contract.baz_string(), test_cases.contains.contract.bar_string()))[0] or arc4_decode(SINGLE_EVAL(id=6), string) == SINGLE_EVAL(id=7)[1] or arc4_decode(SINGLE_EVAL(id=6), string) == SINGLE_EVAL(id=7)[2], comment="foo in (foo, baz, bar)")
    assert(!(arc4_decode(SINGLE_EVAL(id=8, source=(test_cases.contains.contract.bar_arc4(), test_cases.contains.contract.baz_string()))[0], string) == SINGLE_EVAL(id=9, source=test_cases.contains.contract.foo_string()) or SINGLE_EVAL(id=9) == SINGLE_EVAL(id=8)[1]), comment="foo not in (bar, baz)")
    assert(!(SINGLE_EVAL(id=10, source=test_cases.contains.contract.foo_arc4()) == SINGLE_EVAL(id=11, source=(test_cases.contains.contract.bar_arc4(), test_cases.contains.contract.baz_string()))[0] or arc4_decode(SINGLE_EVAL(id=10), string) == SINGLE_EVAL(id=11)[1]), comment="foo not in (bar, baz)")
    assert(arc4_decode(SINGLE_EVAL(id=12, source=(test_cases.contains.contract.bar_arc4(), test_cases.contains.contract.baz_string(), test_cases.contains.contract.foo_string(), test_cases.contains.contract.one_u64()))[0], string) == SINGLE_EVAL(id=13, source=test_cases.contains.contract.foo_string()) or SINGLE_EVAL(id=13) == SINGLE_EVAL(id=12)[1] or SINGLE_EVAL(id=13) == SINGLE_EVAL(id=12)[2], comment="foo in (bar, baz, foo, 1)")
    assert(SINGLE_EVAL(id=14, source=test_cases.contains.contract.foo_arc4()) == SINGLE_EVAL(id=15, source=(test_cases.contains.contract.bar_arc4(), test_cases.contains.contract.baz_string(), test_cases.contains.contract.foo_string(), test_cases.contains.contract.one_u64()))[0] or arc4_decode(SINGLE_EVAL(id=14), string) == SINGLE_EVAL(id=15)[1] or arc4_decode(SINGLE_EVAL(id=14), string) == SINGLE_EVAL(id=15)[2], comment="foo in (bar, baz, foo, 1)")
    assert(!(arc4_decode(SINGLE_EVAL(id=16, source=(test_cases.contains.contract.bar_arc4(), test_cases.contains.contract.baz_string(), test_cases.contains.contract.one_u64()))[0], string) == SINGLE_EVAL(id=17, source=test_cases.contains.contract.foo_string()) or SINGLE_EVAL(id=17) == SINGLE_EVAL(id=16)[1]), comment="foo not in (bar, baz, 1)")
    assert(!(SINGLE_EVAL(id=18, source=test_cases.contains.contract.foo_arc4()) == SINGLE_EVAL(id=19, source=(test_cases.contains.contract.bar_arc4(), test_cases.contains.contract.baz_string(), test_cases.contains.contract.one_u64()))[0] or arc4_decode(SINGLE_EVAL(id=18), string) == SINGLE_EVAL(id=19)[1]), comment="foo not in (bar, baz, 1)")
    assert(!(hex<"666F6F"> == SINGLE_EVAL(id=20, source=(test_cases.contains.contract.foo_string(), test_cases.contains.contract.foo_arc4(), hex<"626172">))[2]), comment="b'foo' not in (foo, foo, b'bar')")
  }
  
  subroutine test_numeric_types(): void
  {
    assert(SINGLE_EVAL(id=21, source=test_cases.contains.contract.one_u64()) == SINGLE_EVAL(id=22, source=(test_cases.contains.contract.one_u64(), test_cases.contains.contract.two_u64()))[0] or SINGLE_EVAL(id=21) == SINGLE_EVAL(id=22)[1], comment="1 in (1, 2)")
    assert(!(SINGLE_EVAL(id=23, source=test_cases.contains.contract.one_u64()) == SINGLE_EVAL(id=24, source=(3u, test_cases.contains.contract.two_u64()))[0] or SINGLE_EVAL(id=23) == SINGLE_EVAL(id=24)[1]), comment="1 not in (3, 2)")
    assert(SINGLE_EVAL(id=25, source=test_cases.contains.contract.one_u64()) == SINGLE_EVAL(id=26, source=(test_cases.contains.contract.one_u64(), 3u, test_cases.contains.contract.two_u8()))[0] or SINGLE_EVAL(id=25) == SINGLE_EVAL(id=26)[1] or reinterpret_cast<biguint>(SINGLE_EVAL(id=26)[2]) == itob(SINGLE_EVAL(id=25)), comment="1 in (1, 3, 2)")
    assert(reinterpret_cast<biguint>(SINGLE_EVAL(id=27, source=(test_cases.contains.contract.one_arc4u64(), 4u, test_cases.contains.contract.two_u8()))[0]) == itob(SINGLE_EVAL(id=28, source=test_cases.contains.contract.one_u64())) or SINGLE_EVAL(id=28) == SINGLE_EVAL(id=27)[1] or reinterpret_cast<biguint>(SINGLE_EVAL(id=27)[2]) == itob(SINGLE_EVAL(id=28)), comment="1 in (1, 4, 2)")
    assert(reinterpret_cast<biguint>(SINGLE_EVAL(id=29, source=(test_cases.contains.contract.one_arc4u64(), 3u, test_cases.contains.contract.two_u8()))[0]) == itob(2u) or 2u == SINGLE_EVAL(id=29)[1] or reinterpret_cast<biguint>(SINGLE_EVAL(id=29)[2]) == itob(2u), comment="2 in (1, 3, 2)")
    assert(reinterpret_cast<biguint>(SINGLE_EVAL(id=30, source=test_cases.contains.contract.two_u8())) == reinterpret_cast<biguint>(SINGLE_EVAL(id=31, source=(test_cases.contains.contract.one_arc4u64(), 3u, test_cases.contains.contract.two_u8()))[0]) or reinterpret_cast<biguint>(SINGLE_EVAL(id=30)) == itob(SINGLE_EVAL(id=31)[1]) or reinterpret_cast<biguint>(SINGLE_EVAL(id=30)) == reinterpret_cast<biguint>(SINGLE_EVAL(id=31)[2]), comment="2 in (1, 3, 2)")
    assert(reinterpret_cast<biguint>(SINGLE_EVAL(id=32, source=test_cases.contains.contract.two_u8())) == reinterpret_cast<biguint>(SINGLE_EVAL(id=33, source=(test_cases.contains.contract.one_arc4u64(), 2u, 3u))[0]) or reinterpret_cast<biguint>(SINGLE_EVAL(id=32)) == itob(SINGLE_EVAL(id=33)[1]) or reinterpret_cast<biguint>(SINGLE_EVAL(id=32)) == itob(SINGLE_EVAL(id=33)[2]), comment="2 in (1, 2, 3)")
    assert(reinterpret_cast<biguint>(SINGLE_EVAL(id=34, source=test_cases.contains.contract.three_u512())) == itob(SINGLE_EVAL(id=35, source=(3u, 4u))[0]) or reinterpret_cast<biguint>(SINGLE_EVAL(id=34)) == itob(SINGLE_EVAL(id=35)[1]), comment="3 in (3, 4)")
    assert(SINGLE_EVAL(id=36, source=test_cases.contains.contract.four_biguint()) == itob(SINGLE_EVAL(id=37, source=(5u, 4u))[0]) or SINGLE_EVAL(id=36) == itob(SINGLE_EVAL(id=37)[1]), comment="4 in (5, 4)")
    assert(!(SINGLE_EVAL(id=38, source=test_cases.contains.contract.one_u64()) == SINGLE_EVAL(id=39, source=(5u, test_cases.contains.contract.two_u8()))[0] or reinterpret_cast<biguint>(SINGLE_EVAL(id=39)[1]) == itob(SINGLE_EVAL(id=38))), comment="1 not in (5, 2)")
    assert(!(SINGLE_EVAL(id=40, source=test_cases.contains.contract.one_u64()) == SINGLE_EVAL(id=41, source=(reinterpret_cast<application>(1u), 3u, test_cases.contains.contract.two_u8()))[1] or reinterpret_cast<biguint>(SINGLE_EVAL(id=41)[2]) == itob(SINGLE_EVAL(id=40))), comment="1 not in (app(1), 3, 2)")
    assert(!(SINGLE_EVAL(id=42, source=test_cases.contains.contract.one_u64()) == SINGLE_EVAL(id=43, source=(3u, test_cases.contains.contract.two_u8()))[0] or reinterpret_cast<biguint>(SINGLE_EVAL(id=43)[1]) == itob(SINGLE_EVAL(id=42))), comment="1 not in (3, 2)")
    assert(!(reinterpret_cast<biguint>(SINGLE_EVAL(id=44, source=(test_cases.contains.contract.one_arc4u64(), 3u))[0]) == itob(2u) or 2u == SINGLE_EVAL(id=44)[1]), comment="2 not in (1, 3)")
    assert(!(reinterpret_cast<biguint>(SINGLE_EVAL(id=45, source=test_cases.contains.contract.two_u8())) == reinterpret_cast<biguint>(SINGLE_EVAL(id=46, source=(test_cases.contains.contract.one_arc4u64(), 3u))[0]) or reinterpret_cast<biguint>(SINGLE_EVAL(id=45)) == itob(SINGLE_EVAL(id=46)[1])), comment="2 not in (1, 3)")
    assert(!(reinterpret_cast<biguint>(SINGLE_EVAL(id=47, source=test_cases.contains.contract.two_u8())) == reinterpret_cast<biguint>(SINGLE_EVAL(id=48, source=(test_cases.contains.contract.one_arc4u64(), 3u))[0]) or reinterpret_cast<biguint>(SINGLE_EVAL(id=47)) == itob(SINGLE_EVAL(id=48)[1])), comment="2 not in (1, 3)")
    assert(!(reinterpret_cast<biguint>(SINGLE_EVAL(id=49, source=test_cases.contains.contract.three_u512())) == itob(SINGLE_EVAL(id=50, source=(5u, 7u))[0]) or reinterpret_cast<biguint>(SINGLE_EVAL(id=49)) == itob(SINGLE_EVAL(id=50)[1])), comment="3 not in (5, 7)")
    assert(!(SINGLE_EVAL(id=51, source=test_cases.contains.contract.four_biguint()) == itob(SINGLE_EVAL(id=52, source=(2u, 9u))[0]) or SINGLE_EVAL(id=51) == itob(SINGLE_EVAL(id=52)[1])), comment="4 not in (2, 9)")
    assert(SINGLE_EVAL(id=53, source=test_cases.contains.contract.one_u64()) == SINGLE_EVAL(id=54, source=(test_cases.contains.contract.foo_string(), test_cases.contains.contract.one_u64(), 3u, test_cases.contains.contract.two_u8()))[1] or SINGLE_EVAL(id=53) == SINGLE_EVAL(id=54)[2] or reinterpret_cast<biguint>(SINGLE_EVAL(id=54)[3]) == itob(SINGLE_EVAL(id=53)), comment="1 in (foo, 1, 3, 2)")
    assert(reinterpret_cast<biguint>(SINGLE_EVAL(id=55, source=(test_cases.contains.contract.one_arc4u64(), test_cases.contains.contract.bar_string(), test_cases.contains.contract.two_u8()))[0]) == itob(SINGLE_EVAL(id=56, source=test_cases.contains.contract.one_u64())) or reinterpret_cast<biguint>(SINGLE_EVAL(id=55)[2]) == itob(SINGLE_EVAL(id=56)), comment="1 in (1, bar, 2)")
    assert(2u == SINGLE_EVAL(id=57, source=(test_cases.contains.contract.foo_arc4(), 3u, test_cases.contains.contract.two_u8()))[1] or reinterpret_cast<biguint>(SINGLE_EVAL(id=57)[2]) == itob(2u), comment="2 in (foo, 3, 2)")
    assert(reinterpret_cast<biguint>(SINGLE_EVAL(id=58, source=test_cases.contains.contract.two_u8())) == itob(SINGLE_EVAL(id=59, source=(test_cases.contains.contract.bar_arc4(), 3u, test_cases.contains.contract.two_u8()))[1]) or reinterpret_cast<biguint>(SINGLE_EVAL(id=58)) == reinterpret_cast<biguint>(SINGLE_EVAL(id=59)[2]), comment="2 in (bar, 3, 2)")
    assert(reinterpret_cast<biguint>(SINGLE_EVAL(id=60, source=test_cases.contains.contract.two_u8())) == itob(SINGLE_EVAL(id=61, source=(test_cases.contains.contract.foo_string(), 2u, 3u))[1]) or reinterpret_cast<biguint>(SINGLE_EVAL(id=60)) == itob(SINGLE_EVAL(id=61)[2]), comment="2 in foo(2, 3)")
    assert(reinterpret_cast<biguint>(SINGLE_EVAL(id=62, source=test_cases.contains.contract.three_u512())) == itob(SINGLE_EVAL(id=63, source=(5u, 3u, test_cases.contains.contract.foo_string()))[0]) or reinterpret_cast<biguint>(SINGLE_EVAL(id=62)) == itob(SINGLE_EVAL(id=63)[1]), comment="3 in (5, 3, foo)")
    assert(!(SINGLE_EVAL(id=64, source=test_cases.contains.contract.one_u64()) == SINGLE_EVAL(id=65, source=(test_cases.contains.contract.foo_string(), 3u, test_cases.contains.contract.two_u8()))[1] or reinterpret_cast<biguint>(SINGLE_EVAL(id=65)[2]) == itob(SINGLE_EVAL(id=64))), comment="1 not in (foo, 3, 2)")
    assert(!(reinterpret_cast<biguint>(SINGLE_EVAL(id=66, source=(test_cases.contains.contract.bar_string(), test_cases.contains.contract.two_u8()))[1]) == itob(SINGLE_EVAL(id=67, source=test_cases.contains.contract.one_u64()))), comment="1 not in (bar, 2)")
    assert(!(2u == SINGLE_EVAL(id=68, source=(test_cases.contains.contract.foo_arc4(), 3u))[1]), comment="2 not in (foo, 3)")
    assert(!(reinterpret_cast<biguint>(SINGLE_EVAL(id=69, source=test_cases.contains.contract.two_u8())) == itob(SINGLE_EVAL(id=70, source=(test_cases.contains.contract.bar_arc4(), 3u))[1])), comment="2 not in (bar, 3)")
    assert(!(reinterpret_cast<biguint>(SINGLE_EVAL(id=71, source=test_cases.contains.contract.two_u8())) == itob(SINGLE_EVAL(id=72, source=(test_cases.contains.contract.foo_string(), 3u))[1])), comment="2 not in (foo, 3)")
    assert(!(reinterpret_cast<biguint>(SINGLE_EVAL(id=73, source=test_cases.contains.contract.three_u512())) == itob(SINGLE_EVAL(id=74, source=(5u, test_cases.contains.contract.foo_string()))[0])), comment="3 not in (5, foo)")
    assert(!(reinterpret_cast<biguint>(65arc4u8) == itob(SINGLE_EVAL(id=75, source=(hex<"41">, 64u, 66u))[1]) or reinterpret_cast<biguint>(65arc4u8) == itob(SINGLE_EVAL(id=75)[2])), comment="65 not in (b'A', 64, 66)")
  }
}

subroutine one_u64(): uint64
{
  return 1u
}

subroutine one_arc4u64(): arc4.uint64
{
  return 1arc4u64
}

subroutine two_u64(): uint64
{
  return 2u
}

subroutine two_u8(): arc4.uint8
{
  return 2arc4u8
}

subroutine three_u512(): arc4.uint512
{
  return 3arc4n512
}

subroutine four_biguint(): biguint
{
  return 4n
}

subroutine foo_string(): string
{
  return 'foo'
}

subroutine foo_arc4(): arc4.dynamic_array<arc4.uint8>
{
  return arc4_encode('foo', arc4.dynamic_array<arc4.uint8>)
}

subroutine bar_string(): string
{
  return 'bar'
}

subroutine bar_arc4(): arc4.dynamic_array<arc4.uint8>
{
  return arc4_encode('bar', arc4.dynamic_array<arc4.uint8>)
}

subroutine baz_string(): string
{
  return 'baz'
}