main test_cases.enumeration.contract.EnumerationContract.approval_program:
    block@0: // L5
        let iteration_count#3: uint64 = 0u
        let item_sum#1: uint64 = 0u
        let index_sum#3: uint64 = 0u
        let item#0: uint64 = 10u
        goto block@2
    block@2: // for_header_L38
        let item#1: uint64 = φ(item#0 <- block@0, item#2 <- block@3)
        let iteration_count#4: uint64 = φ(iteration_count#3 <- block@0, iteration_count#5 <- block@3)
        let item_sum#2: uint64 = φ(item_sum#1 <- block@0, item_sum#3 <- block@3)
        let continue_looping%0#0: bool = (< item#1 21u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L39
        let iteration_count#5: uint64 = (+ iteration_count#4 1u)
        let item_sum#3: uint64 = (+ item_sum#2 item#1)
        let item#2: uint64 = (+ item#1 5u)
        goto block@2
    block@5: // after_for_L38
        let item#3: uint64 = 10u
        let index#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L42
        let item#4: uint64 = φ(item#3 <- block@5, item#5 <- block@7)
        let index#1: uint64 = φ(index#0 <- block@5, index#2 <- block@7)
        let iteration_count#6: uint64 = φ(iteration_count#4 <- block@5, iteration_count#7 <- block@7)
        let item_sum#4: uint64 = φ(item_sum#2 <- block@5, item_sum#5 <- block@7)
        let index_sum#4: uint64 = φ(index_sum#3 <- block@5, index_sum#5 <- block@7)
        let continue_looping%1#0: bool = (< item#4 21u)
        goto continue_looping%1#0 ? block@7 : block@9
    block@7: // for_body_L43
        let iteration_count#7: uint64 = (+ iteration_count#6 1u)
        let item_sum#5: uint64 = (+ item_sum#4 item#4)
        let index_sum#5: uint64 = (+ index_sum#4 index#1)
        let item#5: uint64 = (+ item#4 5u)
        let index#2: uint64 = (+ index#1 1u)
        goto block@6
    block@9: // after_for_L42
        let tmp%3#0: bool = (== iteration_count#6 6u)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== item_sum#4 90u)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== index_sum#4 3u)
        (assert tmp%5#0)
        let iteration_count#8: uint64 = 0u
        let item_concat#2: bytes = 0x
        let index_sum#6: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let item#6: bytes = 0x486f77
        goto block@12
    block@12: // for_body_L57
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@9, loop_counter%0#2 <- block@14, loop_counter%0#3 <- block@15, loop_counter%0#4 <- block@16)
        let iteration_count#9: uint64 = φ(iteration_count#8 <- block@9, iteration_count#10 <- block@14, iteration_count#10 <- block@15, iteration_count#10 <- block@16)
        let item_concat#3: bytes = φ(item_concat#2 <- block@9, item_concat#4 <- block@14, item_concat#4 <- block@15, item_concat#4 <- block@16)
        let item#7: bytes = φ(item#6 <- block@9, item#8 <- block@14, item#9 <- block@15, item#10 <- block@16)
        let iteration_count#10: uint64 = (+ iteration_count#9 1u)
        let item_concat#4: bytes = (concat item_concat#3 item#7)
        goto_nth [block@14, block@15, block@16][loop_counter%0#1] else goto block@17
    block@14: // for_header_1_L56
        let loop_counter%0#2: uint64 = 1u
        let item#8: bytes = 0x4e6f77
        goto block@12
    block@15: // for_header_2_L56
        let loop_counter%0#3: uint64 = 2u
        let item#9: bytes = 0x42726f776e
        goto block@12
    block@16: // for_header_3_L56
        let loop_counter%0#4: uint64 = 3u
        let item#10: bytes = 0x436f77
        goto block@12
    block@17: // after_for_L56
        let item#11: bytes = 0x486f77
        let index#3: uint64 = 0u
        goto block@18
    block@18: // for_body_L60
        let index#4: uint64 = φ(index#3 <- block@17, index#5 <- block@20, index#6 <- block@21, index#7 <- block@22)
        let iteration_count#11: uint64 = φ(iteration_count#10 <- block@17, iteration_count#12 <- block@20, iteration_count#12 <- block@21, iteration_count#12 <- block@22)
        let item_concat#5: bytes = φ(item_concat#4 <- block@17, item_concat#6 <- block@20, item_concat#6 <- block@21, item_concat#6 <- block@22)
        let item#12: bytes = φ(item#11 <- block@17, item#13 <- block@20, item#14 <- block@21, item#15 <- block@22)
        let index_sum#7: uint64 = φ(index_sum#6 <- block@17, index_sum#8 <- block@20, index_sum#8 <- block@21, index_sum#8 <- block@22)
        let iteration_count#12: uint64 = (+ iteration_count#11 1u)
        let item_concat#6: bytes = (concat item_concat#5 item#12)
        let index_sum#8: uint64 = (+ index_sum#7 index#4)
        goto_nth [block@20, block@21, block@22][index#4] else goto block@23
    block@20: // for_header_1_L59
        let item#13: bytes = 0x4e6f77
        let index#5: uint64 = 1u
        goto block@18
    block@21: // for_header_2_L59
        let item#14: bytes = 0x42726f776e
        let index#6: uint64 = 2u
        goto block@18
    block@22: // for_header_3_L59
        let item#15: bytes = 0x436f77
        let index#7: uint64 = 3u
        goto block@18
    block@23: // after_for_L59
        let tmp%9#0: bool = (== iteration_count#12 8u)
        (assert tmp%9#0)
        let tmp%10#0: bool = (== item_concat#6 0x486f774e6f7742726f776e436f77486f774e6f7742726f776e436f77)
        (assert tmp%10#0)
        let tmp%11#0: bool = (== index_sum#8 6u)
        (assert tmp%11#0)
        let iteration_count#13: uint64 = 0u
        let item_concat#7: bytes = 0x
        let index_sum#9: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@26
    block@26: // for_header_L73
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@23, item_index_internal%0#2 <- block@27)
        let iteration_count#14: uint64 = φ(iteration_count#13 <- block@23, iteration_count#15 <- block@27)
        let item_concat#8: bytes = φ(item_concat#7 <- block@23, item_concat#9 <- block@27)
        let continue_looping%0#1: bool = (< item_index_internal%0#1 7u)
        goto continue_looping%0#1 ? block@27 : block@29
    block@27: // for_body_L74
        let item#16: bytes = (extract3 0x61626364656667 item_index_internal%0#1 1u)
        let iteration_count#15: uint64 = (+ iteration_count#14 1u)
        let item_concat#9: bytes = (concat item_concat#8 item#16)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@26
    block@29: // after_for_L73
        let item_index_internal%1#0: uint64 = 0u
        goto block@30
    block@30: // for_header_L76
        let index#8: uint64 = φ(item_index_internal%1#0 <- block@29, item_index_internal%1#2 <- block@31)
        let iteration_count#16: uint64 = φ(iteration_count#14 <- block@29, iteration_count#17 <- block@31)
        let item_concat#10: bytes = φ(item_concat#8 <- block@29, item_concat#11 <- block@31)
        let index_sum#10: uint64 = φ(index_sum#9 <- block@29, index_sum#11 <- block@31)
        let continue_looping%1#1: bool = (< index#8 7u)
        goto continue_looping%1#1 ? block@31 : block@33
    block@31: // for_body_L77
        let item#17: bytes = (extract3 0x61626364656667 index#8 1u)
        let iteration_count#17: uint64 = (+ iteration_count#16 1u)
        let item_concat#11: bytes = (concat item_concat#10 item#17)
        let index_sum#11: uint64 = (+ index_sum#10 index#8)
        let item_index_internal%1#2: uint64 = (+ index#8 1u)
        goto block@30
    block@33: // after_for_L76
        let tmp%15#0: bool = (== iteration_count#16 14u)
        (assert tmp%15#0)
        let tmp%16#0: bool = (== item_concat#10 0x6162636465666761626364656667)
        (assert tmp%16#0)
        let tmp%17#0: bool = (== index_sum#10 21u)
        (assert tmp%17#0)
        return 1u