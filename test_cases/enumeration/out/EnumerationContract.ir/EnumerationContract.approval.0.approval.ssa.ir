main test_cases.enumeration.contract.EnumerationContract.approval_program:
    block@0: // L5
        let (tuple_assignment%0#0: uint64, tuple_assignment%1#0: uint64, tuple_assignment%2#0: uint64) = test_cases.enumeration.contract.enumerate_urange(10u, 21u, 5u)
        let iteration_count#0: uint64 = tuple_assignment%0#0
        let item_sum#0: uint64 = tuple_assignment%1#0
        let index_sum#0: uint64 = tuple_assignment%2#0
        let tmp%0#0: bool = (== iteration_count#0 6u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== item_sum#0 90u)
        (assert tmp%1#0)
        let tmp%2#0: bool = (== index_sum#0 3u)
        (assert tmp%2#0)
        let (tuple_assignment%3#0: uint64, tuple_assignment%4#0: bytes, tuple_assignment%5#0: uint64) = test_cases.enumeration.contract.enumerate_tuple(0x486f77, 0x4e6f77, 0x42726f776e, 0x436f77)
        let iteration_count#1: uint64 = tuple_assignment%3#0
        let item_concat#0: bytes = tuple_assignment%4#0
        let index_sum#1: uint64 = tuple_assignment%5#0
        let tmp%3#0: bool = (== iteration_count#1 8u)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== item_concat#0 0x486f774e6f7742726f776e436f77486f774e6f7742726f776e436f77)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== index_sum#1 6u)
        (assert tmp%5#0)
        let (tuple_assignment%6#0: uint64, tuple_assignment%7#0: bytes, tuple_assignment%8#0: uint64) = test_cases.enumeration.contract.enumerate_bytes(0x61626364656667)
        let iteration_count#2: uint64 = tuple_assignment%6#0
        let item_concat#1: bytes = tuple_assignment%7#0
        let index_sum#2: uint64 = tuple_assignment%8#0
        let tmp%6#0: bool = (== iteration_count#2 14u)
        (assert tmp%6#0)
        let tmp%7#0: bool = (== item_concat#1 0x6162636465666761626364656667)
        (assert tmp%7#0)
        let tmp%8#0: bool = (== index_sum#2 21u)
        (assert tmp%8#0)
        return 1u

subroutine test_cases.enumeration.contract.enumerate_urange(start: uint64, stop: uint64, step: uint64) -> <uint64, uint64, uint64>:
    block@0: // L32
        let iteration_count#0: uint64 = 0u
        let item_sum#0: uint64 = 0u
        let index_sum#0: uint64 = 0u
        (assert step#0) // Step cannot be zero
        let item#0: uint64 = start#0
        goto block@1
    block@1: // for_header_L38
        let item#1: uint64 = φ(item#0 <- block@0, item#2 <- block@3)
        let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3)
        let item_sum#1: uint64 = φ(item_sum#0 <- block@0, item_sum#2 <- block@3)
        let continue_looping%0#0: bool = (< item#1 stop#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L39
        let iteration_count#2: uint64 = (+ iteration_count#1 1u)
        let item_sum#2: uint64 = (+ item_sum#1 item#1)
        goto block@3
    block@3: // for_footer_L38
        let item#2: uint64 = (+ item#1 step#0)
        goto block@1
    block@4: // after_for_L38
        (assert step#0) // Step cannot be zero
        let item#3: uint64 = start#0
        let index#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L42
        let item#4: uint64 = φ(item#3 <- block@4, item#5 <- block@7)
        let index#1: uint64 = φ(index#0 <- block@4, index#2 <- block@7)
        let iteration_count#3: uint64 = φ(iteration_count#1 <- block@4, iteration_count#4 <- block@7)
        let item_sum#3: uint64 = φ(item_sum#1 <- block@4, item_sum#4 <- block@7)
        let index_sum#1: uint64 = φ(index_sum#0 <- block@4, index_sum#2 <- block@7)
        let continue_looping%1#0: bool = (< item#4 stop#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L43
        let iteration_count#4: uint64 = (+ iteration_count#3 1u)
        let item_sum#4: uint64 = (+ item_sum#3 item#4)
        let index_sum#2: uint64 = (+ index_sum#1 index#1)
        goto block@7
    block@7: // for_footer_L42
        let item#5: uint64 = (+ item#4 step#0)
        let index#2: uint64 = (+ index#1 1u)
        goto block@5
    block@8: // after_for_L42
        return iteration_count#3 item_sum#3 index_sum#1

subroutine test_cases.enumeration.contract.enumerate_tuple(tup.0: bytes, tup.1: bytes, tup.2: bytes, tup.3: bytes) -> <uint64, bytes, uint64>:
    block@0: // L50
        let iteration_count#0: uint64 = 0u
        let item_concat#0: bytes = 0x
        let index_sum#0: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let item#0: bytes = tup.0#0
        goto block@1
    block@1: // for_body_L57
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4, loop_counter%0#4 <- block@5)
        let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3, iteration_count#2 <- block@4, iteration_count#2 <- block@5)
        let item_concat#1: bytes = φ(item_concat#0 <- block@0, item_concat#2 <- block@3, item_concat#2 <- block@4, item_concat#2 <- block@5)
        let item#1: bytes = φ(item#0 <- block@0, item#2 <- block@3, item#3 <- block@4, item#4 <- block@5)
        let iteration_count#2: uint64 = (+ iteration_count#1 1u)
        let item_concat#2: bytes = (concat item_concat#1 item#1)
        goto block@2
    block@2: // for_footer_L56
        goto_nth [block@3, block@4, block@5][loop_counter%0#1] else goto block@6
    block@3: // for_header_1_L56
        let loop_counter%0#2: uint64 = 1u
        let item#2: bytes = tup.1#0
        goto block@1
    block@4: // for_header_2_L56
        let loop_counter%0#3: uint64 = 2u
        let item#3: bytes = tup.2#0
        goto block@1
    block@5: // for_header_3_L56
        let loop_counter%0#4: uint64 = 3u
        let item#4: bytes = tup.3#0
        goto block@1
    block@6: // after_for_L56
        let loop_counter%1#0: uint64 = 0u
        let item#5: bytes = tup.0#0
        let index#0: uint64 = 0u
        goto block@7
    block@7: // for_body_L60
        let index#1: uint64 = φ(index#0 <- block@6, index#2 <- block@9, index#3 <- block@10, index#4 <- block@11)
        let iteration_count#3: uint64 = φ(iteration_count#2 <- block@6, iteration_count#4 <- block@9, iteration_count#4 <- block@10, iteration_count#4 <- block@11)
        let item_concat#3: bytes = φ(item_concat#2 <- block@6, item_concat#4 <- block@9, item_concat#4 <- block@10, item_concat#4 <- block@11)
        let item#6: bytes = φ(item#5 <- block@6, item#7 <- block@9, item#8 <- block@10, item#9 <- block@11)
        let index_sum#1: uint64 = φ(index_sum#0 <- block@6, index_sum#2 <- block@9, index_sum#2 <- block@10, index_sum#2 <- block@11)
        let iteration_count#4: uint64 = (+ iteration_count#3 1u)
        let item_concat#4: bytes = (concat item_concat#3 item#6)
        let index_sum#2: uint64 = (+ index_sum#1 index#1)
        goto block@8
    block@8: // for_footer_L59
        goto_nth [block@9, block@10, block@11][index#1] else goto block@12
    block@9: // for_header_1_L59
        let loop_counter%1#1: uint64 = 1u
        let item#7: bytes = tup.1#0
        let index#2: uint64 = 1u
        goto block@7
    block@10: // for_header_2_L59
        let loop_counter%1#2: uint64 = 2u
        let item#8: bytes = tup.2#0
        let index#3: uint64 = 2u
        goto block@7
    block@11: // for_header_3_L59
        let loop_counter%1#3: uint64 = 3u
        let item#9: bytes = tup.3#0
        let index#4: uint64 = 3u
        goto block@7
    block@12: // after_for_L59
        return iteration_count#4 item_concat#4 index_sum#2

subroutine test_cases.enumeration.contract.enumerate_bytes(bytes_: bytes) -> <uint64, bytes, uint64>:
    block@0: // L67
        let iteration_count#0: uint64 = 0u
        let item_concat#0: bytes = 0x
        let index_sum#0: uint64 = 0u
        let bytes_length%0#0: uint64 = (len bytes_#0)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = bytes_length%0#0
        goto block@1
    block@1: // for_header_L73
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3)
        let item_concat#1: bytes = φ(item_concat#0 <- block@0, item_concat#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 bytes_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L74
        let item#0: bytes = (extract3 bytes_#0 item_index_internal%0#1 1u)
        let iteration_count#2: uint64 = (+ iteration_count#1 1u)
        let item_concat#2: bytes = (concat item_concat#1 item#0)
        goto block@3
    block@3: // for_footer_L73
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L73
        let bytes_length%1#0: uint64 = (len bytes_#0)
        let item_index_internal%1#0: uint64 = 0u
        let reverse_index_internal%1#0: uint64 = bytes_length%1#0
        goto block@5
    block@5: // for_header_L76
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@7)
        let iteration_count#3: uint64 = φ(iteration_count#1 <- block@4, iteration_count#4 <- block@7)
        let item_concat#3: bytes = φ(item_concat#1 <- block@4, item_concat#4 <- block@7)
        let index_sum#1: uint64 = φ(index_sum#0 <- block@4, index_sum#2 <- block@7)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 bytes_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L77
        let item#1: bytes = (extract3 bytes_#0 item_index_internal%1#1 1u)
        let index#0: uint64 = item_index_internal%1#1
        let iteration_count#4: uint64 = (+ iteration_count#3 1u)
        let item_concat#4: bytes = (concat item_concat#3 item#1)
        let index_sum#2: uint64 = (+ index_sum#1 index#0)
        goto block@7
    block@7: // for_footer_L76
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@8: // after_for_L76
        return iteration_count#3 item_concat#3 index_sum#1