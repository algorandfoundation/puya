contract EnumerationContract
{
  approval_program(): bool
  {
    (iteration_count, item_sum, index_sum): tuple[algopy.UInt64, algopy.UInt64, algopy.UInt64] = test_cases.enumeration.contract::enumerate_urange(10u, 21u, 5u)
    assert(iteration_count == 6u)
    assert(item_sum == 90u)
    assert(index_sum == 3u)
    (iteration_count, item_concat, index_sum): tuple[algopy.UInt64, algopy.Bytes, algopy.UInt64] = test_cases.enumeration.contract::enumerate_tuple(('How', 'Now', 'Brown', 'Cow'))
    assert(iteration_count == 8u)
    assert(item_concat == 'HowNowBrownCowHowNowBrownCow')
    assert(index_sum == 6u)
    (iteration_count, item_concat, index_sum): tuple[algopy.UInt64, algopy.Bytes, algopy.UInt64] = test_cases.enumeration.contract::enumerate_bytes('abcdefg')
    assert(iteration_count == 14u)
    assert(item_concat == 'abcdefgabcdefg')
    assert(index_sum == 21u)
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}

subroutine enumerate_urange(start: algopy.UInt64, stop: algopy.UInt64, step: algopy.UInt64): tuple[algopy.UInt64, algopy.UInt64, algopy.UInt64]
{
  iteration_count: algopy.UInt64 = 0u
  item_sum: algopy.UInt64 = 0u
  index_sum: algopy.UInt64 = 0u
  for item in range(start, stop, step) {
    iteration_count += 1u
    item_sum += item
  }
  for (index, item) in enumerate(range(start, stop, step)) {
    iteration_count += 1u
    item_sum += item
    index_sum += index
  }
  return (iteration_count, item_sum, index_sum)
}

subroutine enumerate_tuple(tup: tuple[algopy.Bytes, algopy.Bytes, algopy.Bytes, algopy.Bytes]): tuple[algopy.UInt64, algopy.Bytes, algopy.UInt64]
{
  iteration_count: algopy.UInt64 = 0u
  item_concat: algopy.Bytes = ''
  index_sum: algopy.UInt64 = 0u
  for item in tup {
    iteration_count += 1u
    item_concat += item
  }
  for (index, item) in enumerate(tup) {
    iteration_count += 1u
    item_concat += item
    index_sum += index
  }
  return (iteration_count, item_concat, index_sum)
}

subroutine enumerate_bytes(bytes_: algopy.Bytes): tuple[algopy.UInt64, algopy.Bytes, algopy.UInt64]
{
  iteration_count: algopy.UInt64 = 0u
  item_concat: algopy.Bytes = ''
  index_sum: algopy.UInt64 = 0u
  for item in bytes_ {
    iteration_count += 1u
    item_concat += item
  }
  for (index, item) in enumerate(bytes_) {
    iteration_count += 1u
    item_concat += item
    index_sum += index
  }
  return (iteration_count, item_concat, index_sum)
}