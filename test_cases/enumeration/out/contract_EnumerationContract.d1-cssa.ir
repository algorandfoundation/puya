contract test_cases.enumeration.contract.EnumerationContract:
    program approval:
        subroutine test_cases.enumeration.contract.EnumerationContract.approval_program() -> uint64:
            block@0: // L5
                let (iteration_count#0: uint64, item_sum#0: uint64, index_sum#0: uint64) = test_cases.enumeration.contract.enumerate_urange(10u, 21u, 5u)
                let tmp%3#0: uint64 = (== iteration_count#0 6u)
                (assert tmp%3#0)
                let tmp%4#0: uint64 = (== item_sum#0 90u)
                (assert tmp%4#0)
                let tmp%5#0: uint64 = (== index_sum#0 3u)
                (assert tmp%5#0)
                let (iteration_count#1: uint64, item_concat#0: bytes, index_sum#1: uint64) = test_cases.enumeration.contract.enumerate_tuple("How", "Now", "Brown", "Cow")
                let tmp%9#0: uint64 = (== iteration_count#1 8u)
                (assert tmp%9#0)
                let tmp%10#0: uint64 = (== item_concat#0 "HowNowBrownCowHowNowBrownCow")
                (assert tmp%10#0)
                let tmp%11#0: uint64 = (== index_sum#1 6u)
                (assert tmp%11#0)
                let (iteration_count#2: uint64, item_concat#1: bytes, index_sum#2: uint64) = test_cases.enumeration.contract.enumerate_bytes("abcdefg")
                let tmp%15#0: uint64 = (== iteration_count#2 14u)
                (assert tmp%15#0)
                let tmp%16#0: uint64 = (== item_concat#1 "abcdefgabcdefg")
                (assert tmp%16#0)
                let tmp%17#0: uint64 = (== index_sum#2 21u)
                (assert tmp%17#0)
                return 1u
        
        subroutine test_cases.enumeration.contract.enumerate_urange(start: uint64, stop: uint64, step: uint64) -> <uint64, uint64, uint64>:
            block@0: // L32
                let iteration_count#0: uint64 = 0u
                let item_sum#0: uint64 = 0u
                let index_sum#0: uint64 = 0u
                (assert step#0) // Step cannot be zero
                let (start#1: uint64, iteration_count#7: uint64, item_sum#7: uint64) = (start#0, iteration_count#0, item_sum#0)
                goto block@1
            block@1: // for_header_L38
                let item#2: uint64 = φ(start#1 <- block@0, range_item%0#4 <- block@2)
                let iteration_count#9: uint64 = φ(iteration_count#7 <- block@0, iteration_count#8 <- block@2)
                let item_sum#9: uint64 = φ(item_sum#7 <- block@0, item_sum#8 <- block@2)
                let (item#0: uint64, iteration_count#3: uint64, item_sum#3: uint64) = (item#2, iteration_count#9, item_sum#9)
                let continue_looping%1#0: uint64 = (< item#0 stop#0)
                goto continue_looping%1#0 ? block@2 : block@5
            block@2: // for_body_L38
                let iteration_count#2: uint64 = (+ iteration_count#3 1u)
                let item_sum#2: uint64 = (+ item_sum#3 item#0)
                let range_item%0#3: uint64 = (+ item#0 step#0)
                let (range_item%0#4: uint64, iteration_count#8: uint64, item_sum#8: uint64) = (range_item%0#3, iteration_count#2, item_sum#2)
                goto block@1
            block@5: // after_for_L38
                let range_index%3#0: uint64 = 0u
                let (start#2: uint64, range_index%3#3: uint64, iteration_count#10: uint64, item_sum#10: uint64, index_sum#4: uint64) = (start#0, range_index%3#0, iteration_count#3, item_sum#3, index_sum#0)
                goto block@6
            block@6: // for_header_L42
                let item#3: uint64 = φ(start#2 <- block@5, range_item%2#4 <- block@7)
                let index#1: uint64 = φ(range_index%3#3 <- block@5, range_index%3#4 <- block@7)
                let iteration_count#12: uint64 = φ(iteration_count#10 <- block@5, iteration_count#11 <- block@7)
                let item_sum#12: uint64 = φ(item_sum#10 <- block@5, item_sum#11 <- block@7)
                let index_sum#6: uint64 = φ(index_sum#4 <- block@5, index_sum#5 <- block@7)
                let (item#1: uint64, index#0: uint64, iteration_count#6: uint64, item_sum#6: uint64, index_sum#3: uint64) = (item#3, index#1, iteration_count#12, item_sum#12, index_sum#6)
                let continue_looping%4#0: uint64 = (< item#1 stop#0)
                goto continue_looping%4#0 ? block@7 : block@10
            block@7: // for_body_L42
                let iteration_count#5: uint64 = (+ iteration_count#6 1u)
                let item_sum#5: uint64 = (+ item_sum#6 item#1)
                let index_sum#2: uint64 = (+ index_sum#3 index#0)
                let range_item%2#3: uint64 = (+ item#1 step#0)
                let range_index%3#2: uint64 = (+ index#0 1u)
                let (range_item%2#4: uint64, range_index%3#4: uint64, iteration_count#11: uint64, item_sum#11: uint64, index_sum#5: uint64) = (range_item%2#3, range_index%3#2, iteration_count#5, item_sum#5, index_sum#2)
                goto block@6
            block@10: // after_for_L42
                return iteration_count#6 item_sum#6 index_sum#3
        
        subroutine test_cases.enumeration.contract.enumerate_tuple(tup.0: bytes, tup.1: bytes, tup.2: bytes, tup.3: bytes) -> <uint64, bytes, uint64>:
            block@0: // L50
                let iteration_count#0: uint64 = 0u
                let item_concat#0: bytes = ""
                let index_sum#0: uint64 = 0u
                let tuple_index%0#0: uint64 = 0u
                let (iteration_count#11: uint64, item_concat#11: bytes, tup.0#1: bytes, tuple_index%0#6: uint64) = (iteration_count#0, item_concat#0, tup.0#0, tuple_index%0#0)
                goto block@5
            block@2: // for_header_1_L56
                let (iteration_count#12: uint64, item_concat#12: bytes, tup.1#1: bytes, tuple_index%0#7: uint64) = (iteration_count#5, item_concat#5, tup.1#0, tuple_index%0#5)
                goto block@5
            block@3: // for_header_2_L56
                let (iteration_count#13: uint64, item_concat#13: bytes, tup.2#1: bytes, tuple_index%0#8: uint64) = (iteration_count#5, item_concat#5, tup.2#0, tuple_index%0#5)
                goto block@5
            block@4: // for_header_3_L56
                let (iteration_count#14: uint64, item_concat#14: bytes, tup.3#1: bytes, tuple_index%0#9: uint64) = (iteration_count#5, item_concat#5, tup.3#0, tuple_index%0#5)
                goto block@5
            block@5: // for_body_L56
                let iteration_count#15: uint64 = φ(iteration_count#11 <- block@0, iteration_count#12 <- block@2, iteration_count#13 <- block@3, iteration_count#14 <- block@4)
                let item_concat#15: bytes = φ(item_concat#11 <- block@0, item_concat#12 <- block@2, item_concat#13 <- block@3, item_concat#14 <- block@4)
                let item#10: bytes = φ(tup.0#1 <- block@0, tup.1#1 <- block@2, tup.2#1 <- block@3, tup.3#1 <- block@4)
                let tuple_index%0#10: uint64 = φ(tuple_index%0#6 <- block@0, tuple_index%0#7 <- block@2, tuple_index%0#8 <- block@3, tuple_index%0#9 <- block@4)
                let (iteration_count#1: uint64, item_concat#1: bytes, item#4: bytes, tuple_index%0#1: uint64) = (iteration_count#15, item_concat#15, item#10, tuple_index%0#10)
                let iteration_count#5: uint64 = (+ iteration_count#1 1u)
                let item_concat#5: bytes = (concat item_concat#1 item#4)
                let tuple_index%0#5: uint64 = (+ tuple_index%0#1 1u)
                goto_nth [block@2, block@3, block@4][tuple_index%0#1] else goto block@8
            block@8: // for_header_0_L59
                let tuple_index%1#0: uint64 = 0u
                let (tuple_index%1#6: uint64, iteration_count#16: uint64, item_concat#16: bytes, tup.0#2: bytes, index_sum#7: uint64) = (tuple_index%1#0, iteration_count#5, item_concat#5, tup.0#0, index_sum#0)
                goto block@12
            block@9: // for_header_1_L59
                let (tuple_index%1#7: uint64, iteration_count#17: uint64, item_concat#17: bytes, tup.1#2: bytes, index_sum#8: uint64) = (tuple_index%1#5, iteration_count#10, item_concat#10, tup.1#0, index_sum#6)
                goto block@12
            block@10: // for_header_2_L59
                let (tuple_index%1#8: uint64, iteration_count#18: uint64, item_concat#18: bytes, tup.2#2: bytes, index_sum#9: uint64) = (tuple_index%1#5, iteration_count#10, item_concat#10, tup.2#0, index_sum#6)
                goto block@12
            block@11: // for_header_3_L59
                let (tuple_index%1#9: uint64, iteration_count#19: uint64, item_concat#19: bytes, tup.3#2: bytes, index_sum#10: uint64) = (tuple_index%1#5, iteration_count#10, item_concat#10, tup.3#0, index_sum#6)
                goto block@12
            block@12: // for_body_L59
                let index#1: uint64 = φ(tuple_index%1#6 <- block@8, tuple_index%1#7 <- block@9, tuple_index%1#8 <- block@10, tuple_index%1#9 <- block@11)
                let iteration_count#20: uint64 = φ(iteration_count#16 <- block@8, iteration_count#17 <- block@9, iteration_count#18 <- block@10, iteration_count#19 <- block@11)
                let item_concat#20: bytes = φ(item_concat#16 <- block@8, item_concat#17 <- block@9, item_concat#18 <- block@10, item_concat#19 <- block@11)
                let item#11: bytes = φ(tup.0#2 <- block@8, tup.1#2 <- block@9, tup.2#2 <- block@10, tup.3#2 <- block@11)
                let index_sum#11: uint64 = φ(index_sum#7 <- block@8, index_sum#8 <- block@9, index_sum#9 <- block@10, index_sum#10 <- block@11)
                let (index#0: uint64, iteration_count#6: uint64, item_concat#6: bytes, item#9: bytes, index_sum#1: uint64) = (index#1, iteration_count#20, item_concat#20, item#11, index_sum#11)
                let iteration_count#10: uint64 = (+ iteration_count#6 1u)
                let item_concat#10: bytes = (concat item_concat#6 item#9)
                let index_sum#6: uint64 = (+ index_sum#1 index#0)
                let tuple_index%1#5: uint64 = (+ index#0 1u)
                goto_nth [block@9, block@10, block@11][index#0] else return iteration_count#10 item_concat#10 index_sum#6
        
        subroutine test_cases.enumeration.contract.enumerate_bytes(bytes_: bytes) -> <uint64, bytes, uint64>:
            block@0: // L67
                let iteration_count#0: uint64 = 0u
                let item_concat#0: bytes = ""
                let index_sum#0: uint64 = 0u
                let bytes_length%0#0: uint64 = (len bytes_#0)
                let item_index_internal%1#0: uint64 = 0u
                let (item_index_internal%1#3: uint64, iteration_count#5: uint64, item_concat#5: bytes) = (item_index_internal%1#0, iteration_count#0, item_concat#0)
                goto block@1
            block@1: // for_header_L73
                let item_index_internal%1#5: uint64 = φ(item_index_internal%1#3 <- block@0, item_index_internal%1#4 <- block@2)
                let iteration_count#7: uint64 = φ(iteration_count#5 <- block@0, iteration_count#6 <- block@2)
                let item_concat#7: bytes = φ(item_concat#5 <- block@0, item_concat#6 <- block@2)
                let (item_index_internal%1#1: uint64, iteration_count#1: uint64, item_concat#1: bytes) = (item_index_internal%1#5, iteration_count#7, item_concat#7)
                let continue_looping%3#0: uint64 = (< item_index_internal%1#1 bytes_length%0#0)
                goto continue_looping%3#0 ? block@2 : block@4
            block@2: // for_body_L73
                let item#0: bytes = (extract3 bytes_#0 item_index_internal%1#1 1u)
                let iteration_count#2: uint64 = (+ iteration_count#1 1u)
                let item_concat#2: bytes = (concat item_concat#1 item#0)
                let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
                let (item_index_internal%1#4: uint64, iteration_count#6: uint64, item_concat#6: bytes) = (item_index_internal%1#2, iteration_count#2, item_concat#2)
                goto block@1
            block@4: // after_for_L73
                let item_index_internal%5#0: uint64 = 0u
                let (item_index_internal%5#3: uint64, iteration_count#8: uint64, item_concat#8: bytes, index_sum#3: uint64) = (item_index_internal%5#0, iteration_count#1, item_concat#1, index_sum#0)
                goto block@5
            block@5: // for_header_L76
                let index#1: uint64 = φ(item_index_internal%5#3 <- block@4, item_index_internal%5#4 <- block@6)
                let iteration_count#10: uint64 = φ(iteration_count#8 <- block@4, iteration_count#9 <- block@6)
                let item_concat#10: bytes = φ(item_concat#8 <- block@4, item_concat#9 <- block@6)
                let index_sum#5: uint64 = φ(index_sum#3 <- block@4, index_sum#4 <- block@6)
                let (index#0: uint64, iteration_count#3: uint64, item_concat#3: bytes, index_sum#1: uint64) = (index#1, iteration_count#10, item_concat#10, index_sum#5)
                let continue_looping%7#0: uint64 = (< index#0 bytes_length%0#0)
                goto continue_looping%7#0 ? block@6 : block@8
            block@6: // for_body_L76
                let item#1: bytes = (extract3 bytes_#0 index#0 1u)
                let iteration_count#4: uint64 = (+ iteration_count#3 1u)
                let item_concat#4: bytes = (concat item_concat#3 item#1)
                let index_sum#2: uint64 = (+ index_sum#1 index#0)
                let item_index_internal%5#2: uint64 = (+ index#0 1u)
                let (item_index_internal%5#4: uint64, iteration_count#9: uint64, item_concat#9: bytes, index_sum#4: uint64) = (item_index_internal%5#2, iteration_count#4, item_concat#4, index_sum#2)
                goto block@5
            block@8: // after_for_L76
                return iteration_count#3 item_concat#3 index_sum#1
    
    program clear-state:
        subroutine test_cases.enumeration.contract.EnumerationContract.clear_state_program() -> uint64:
            block@0: // L28
                return 1u