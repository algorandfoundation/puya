#pragma version 10

test_cases.enumeration.contract.EnumerationContract.approval_program:
    intcblock 1 0 3 21
    // enumeration/contract.py:6
    // iteration_count, item_sum, index_sum = enumerate_urange(UInt64(10), UInt64(21), UInt64(5))
    pushint 10 // 10
    intc_3 // 21
    pushint 5 // 5
    callsub enumerate_urange
    // enumeration/contract.py:8
    // assert iteration_count == 6
    uncover 2
    pushint 6 // 6
    ==
    assert
    // enumeration/contract.py:9
    // assert item_sum == 90
    swap
    pushint 90 // 90
    ==
    assert
    // enumeration/contract.py:10
    // assert index_sum == 3
    intc_2 // 3
    ==
    assert
    // enumeration/contract.py:13
    // (Bytes(b"How"), Bytes(b"Now"), Bytes(b"Brown"), Bytes(b"Cow"))
    pushbytess 0x486f77 0x4e6f77 0x42726f776e 0x436f77 // 0x486f77, 0x4e6f77, 0x42726f776e, 0x436f77
    // enumeration/contract.py:12-14
    // iteration_count, item_concat, index_sum = enumerate_tuple(
    //     (Bytes(b"How"), Bytes(b"Now"), Bytes(b"Brown"), Bytes(b"Cow"))
    // )
    callsub enumerate_tuple
    // enumeration/contract.py:16
    // assert iteration_count == 8
    uncover 2
    pushint 8 // 8
    ==
    assert
    // enumeration/contract.py:17
    // assert item_concat == Bytes(b"HowNowBrownCowHowNowBrownCow")
    swap
    pushbytes 0x486f774e6f7742726f776e436f77486f774e6f7742726f776e436f77
    ==
    assert
    // enumeration/contract.py:18
    // assert index_sum == 6
    pushint 6 // 6
    ==
    assert
    // enumeration/contract.py:20
    // iteration_count, item_concat, index_sum = enumerate_bytes(Bytes(b"abcdefg"))
    pushbytes 0x61626364656667
    callsub enumerate_bytes
    // enumeration/contract.py:22
    // assert iteration_count == 14
    uncover 2
    pushint 14 // 14
    ==
    assert
    // enumeration/contract.py:23
    // assert item_concat == Bytes(b"abcdefgabcdefg")
    swap
    pushbytes 0x6162636465666761626364656667
    ==
    assert
    // enumeration/contract.py:24
    // assert index_sum == 21
    intc_3 // 21
    ==
    assert
    // enumeration/contract.py:26
    // return True
    intc_0 // 1
    return


// test_cases.enumeration.contract.enumerate_urange(start: uint64, stop: uint64, step: uint64) -> uint64, uint64, uint64:
enumerate_urange:
    // enumeration/contract.py:32-33
    // @subroutine
    // def enumerate_urange(start: UInt64, stop: UInt64, step: UInt64) -> tuple[UInt64, UInt64, UInt64]:
    proto 3 3
    pushbytes ""
    // enumeration/contract.py:34
    // iteration_count = UInt64(0)
    intc_1 // 0
    // enumeration/contract.py:35-36
    // item_sum = UInt64(0)
    // index_sum = UInt64(0)
    dupn 2
    // enumeration/contract.py:38
    // for item in urange(start, stop, step):
    frame_dig -1
    assert // Step cannot be zero
    frame_dig -3

enumerate_urange_for_header@1:
    // enumeration/contract.py:38
    // for item in urange(start, stop, step):
    frame_dig 4
    frame_dig -2
    <
    bz enumerate_urange_after_for@4
    // enumeration/contract.py:39
    // iteration_count += 1
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    // enumeration/contract.py:40
    // item_sum += item
    frame_dig 2
    frame_dig 4
    dup
    cover 2
    +
    frame_bury 2
    // enumeration/contract.py:38
    // for item in urange(start, stop, step):
    frame_dig -1
    +
    frame_bury 4
    b enumerate_urange_for_header@1

enumerate_urange_after_for@4:
    intc_1 // 0
    // enumeration/contract.py:42
    // for index, item in uenumerate(urange(start, stop, step)):
    frame_bury 0
    frame_dig -3
    frame_bury 4

enumerate_urange_for_header@5:
    // enumeration/contract.py:42
    // for index, item in uenumerate(urange(start, stop, step)):
    frame_dig 4
    frame_dig -2
    <
    bz enumerate_urange_after_for@8
    // enumeration/contract.py:43
    // iteration_count += 1
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    // enumeration/contract.py:44
    // item_sum += item
    frame_dig 2
    frame_dig 4
    dup
    cover 2
    +
    frame_bury 2
    // enumeration/contract.py:45
    // index_sum += index
    frame_dig 3
    frame_dig 0
    dup
    cover 3
    +
    frame_bury 3
    // enumeration/contract.py:42
    // for index, item in uenumerate(urange(start, stop, step)):
    frame_dig -1
    +
    frame_bury 4
    intc_0 // 1
    +
    frame_bury 0
    b enumerate_urange_for_header@5

enumerate_urange_after_for@8:
    // enumeration/contract.py:47
    // return iteration_count, item_sum, index_sum
    frame_dig 1
    frame_dig 2
    frame_dig 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub


// test_cases.enumeration.contract.enumerate_tuple(tup.0: bytes, tup.1: bytes, tup.2: bytes, tup.3: bytes) -> uint64, bytes, uint64:
enumerate_tuple:
    // enumeration/contract.py:50-51
    // @subroutine
    // def enumerate_tuple(tup: tuple[Bytes, Bytes, Bytes, Bytes]) -> tuple[UInt64, Bytes, UInt64]:
    proto 4 3
    // enumeration/contract.py:52
    // iteration_count = UInt64(0)
    intc_1 // 0
    // enumeration/contract.py:53
    // item_concat = Bytes(b"")
    pushbytes 0x
    // enumeration/contract.py:54
    // index_sum = UInt64(0)
    intc_1 // 0
    frame_dig -4
    intc_1 // 0

enumerate_tuple_for_body@1:
    // enumeration/contract.py:57
    // iteration_count += 1
    frame_dig 0
    intc_0 // 1
    +
    frame_bury 0
    // enumeration/contract.py:58
    // item_concat += item
    frame_dig 1
    uncover 2
    concat
    frame_bury 1
    // enumeration/contract.py:56
    // for item in tup:
    switch enumerate_tuple_for_header_1@3 enumerate_tuple_for_header_2@4 enumerate_tuple_for_header_3@5
    b enumerate_tuple_after_for@6

enumerate_tuple_for_header_1@3:
    frame_dig -3
    intc_0 // 1
    b enumerate_tuple_for_body@1

enumerate_tuple_for_header_2@4:
    frame_dig -2
    pushint 2 // 2
    b enumerate_tuple_for_body@1

enumerate_tuple_for_header_3@5:
    frame_dig -1
    intc_2 // 3
    b enumerate_tuple_for_body@1

enumerate_tuple_after_for@6:
    frame_dig -4
    intc_1 // 0

enumerate_tuple_for_body@7:
    // enumeration/contract.py:60
    // iteration_count += 1
    frame_dig 0
    intc_0 // 1
    +
    dup
    frame_bury 0
    // enumeration/contract.py:61
    // item_concat += item
    frame_dig 1
    uncover 3
    concat
    dup
    frame_bury 1
    // enumeration/contract.py:62
    // index_sum += index
    frame_dig 2
    uncover 3
    dup
    cover 2
    +
    dup
    cover 2
    frame_bury 2
    // enumeration/contract.py:59
    // for index, item in uenumerate(tup):
    switch enumerate_tuple_for_header_1@9 enumerate_tuple_for_header_2@10 enumerate_tuple_for_header_3@11
    // enumeration/contract.py:64
    // return iteration_count, item_concat, index_sum
    uncover 5
    uncover 5
    uncover 5
    retsub

enumerate_tuple_for_header_1@9:
    frame_dig -3
    intc_0 // 1
    b enumerate_tuple_for_body@7

enumerate_tuple_for_header_2@10:
    frame_dig -2
    pushint 2 // 2
    b enumerate_tuple_for_body@7

enumerate_tuple_for_header_3@11:
    frame_dig -1
    intc_2 // 3
    b enumerate_tuple_for_body@7


// test_cases.enumeration.contract.enumerate_bytes(bytes_: bytes) -> uint64, bytes, uint64:
enumerate_bytes:
    // enumeration/contract.py:67-68
    // @subroutine
    // def enumerate_bytes(bytes_: Bytes) -> tuple[UInt64, Bytes, UInt64]:
    proto 1 3
    pushbytes ""
    // enumeration/contract.py:69
    // iteration_count = UInt64(0)
    intc_1 // 0
    // enumeration/contract.py:70-71
    // item_concat = Bytes(b"")
    // index_sum = UInt64(0)
    dup2
    // enumeration/contract.py:73
    // for item in bytes_:
    frame_dig -1
    len
    intc_1 // 0

enumerate_bytes_for_header@1:
    // enumeration/contract.py:73
    // for item in bytes_:
    frame_dig 5
    frame_dig 4
    <
    bz enumerate_bytes_after_for@4
    frame_dig -1
    frame_dig 5
    dup
    cover 2
    intc_0 // 1
    extract3
    // enumeration/contract.py:74
    // iteration_count += 1
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    // enumeration/contract.py:75
    // item_concat += item
    frame_dig 2
    swap
    concat
    frame_bury 2
    intc_0 // 1
    +
    frame_bury 5
    b enumerate_bytes_for_header@1

enumerate_bytes_after_for@4:
    intc_1 // 0
    frame_bury 0

enumerate_bytes_for_header@5:
    // enumeration/contract.py:76
    // for index, item in uenumerate(bytes_):
    frame_dig 0
    frame_dig 4
    <
    bz enumerate_bytes_after_for@8
    frame_dig -1
    frame_dig 0
    dup
    cover 2
    intc_0 // 1
    extract3
    // enumeration/contract.py:77
    // iteration_count += 1
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    // enumeration/contract.py:78
    // item_concat += item
    frame_dig 2
    swap
    concat
    frame_bury 2
    // enumeration/contract.py:79
    // index_sum += index
    frame_dig 3
    dig 1
    +
    frame_bury 3
    intc_0 // 1
    +
    frame_bury 0
    b enumerate_bytes_for_header@5

enumerate_bytes_after_for@8:
    // enumeration/contract.py:81
    // return iteration_count, item_concat, index_sum
    frame_dig 1
    frame_dig 2
    frame_dig 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub
