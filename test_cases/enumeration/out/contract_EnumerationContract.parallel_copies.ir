contract test_cases.enumeration.contract.EnumerationContract:
    program approval:
        subroutine test_cases.enumeration.contract.EnumerationContract.approval_program() -> uint64:
            block@0: // L5
                let (iteration_count#0: uint64, item_sum#0: uint64, index_sum#0: uint64) = test_cases.enumeration.contract.enumerate_urange(10u, 21u, 5u)
                let tmp%3#0: uint64 = (== iteration_count#0 6u)
                (assert tmp%3#0)
                let tmp%4#0: uint64 = (== item_sum#0 90u)
                (assert tmp%4#0)
                let tmp%5#0: uint64 = (== index_sum#0 3u)
                (assert tmp%5#0)
                let (iteration_count#1: uint64, item_concat#0: bytes, index_sum#1: uint64) = test_cases.enumeration.contract.enumerate_tuple("How", "Now", "Brown", "Cow")
                let tmp%9#0: uint64 = (== iteration_count#1 8u)
                (assert tmp%9#0)
                let tmp%10#0: uint64 = (== item_concat#0 "HowNowBrownCowHowNowBrownCow")
                (assert tmp%10#0)
                let tmp%11#0: uint64 = (== index_sum#1 6u)
                (assert tmp%11#0)
                let (iteration_count#2: uint64, item_concat#1: bytes, index_sum#2: uint64) = test_cases.enumeration.contract.enumerate_bytes("abcdefg")
                let tmp%15#0: uint64 = (== iteration_count#2 14u)
                (assert tmp%15#0)
                let tmp%16#0: uint64 = (== item_concat#1 "abcdefgabcdefg")
                (assert tmp%16#0)
                let tmp%17#0: uint64 = (== index_sum#2 21u)
                (assert tmp%17#0)
                return 1u
        
        subroutine test_cases.enumeration.contract.enumerate_urange(start: uint64, stop: uint64, step: uint64) -> <uint64, uint64, uint64>:
            block@0: // L33
                let iteration_count#0: uint64 = 0u
                let item_sum#0: uint64 = 0u
                let index_sum#0: uint64 = 0u
                (assert step#0) // Step cannot be zero
                let should_loop%0#0: uint64 = (< start#0 stop#0)
                let iteration_count#14: uint64 = iteration_count#0
                let item_sum#14: uint64 = item_sum#0
                goto should_loop%0#0 ? block@1 : block@6
            block@1: // for_preamble_L38
                let item#2: uint64 = start#0
                let iteration_count#11: uint64 = iteration_count#0
                let item_sum#11: uint64 = item_sum#0
                goto block@2
            block@2: // for_header_L38
                let item#0: uint64 = item#2
                let iteration_count#3: uint64 = iteration_count#11
                let item_sum#3: uint64 = item_sum#11
                let continue_looping%2#0: uint64 = (< item#0 stop#0)
                let iteration_count#14: uint64 = iteration_count#3
                let item_sum#14: uint64 = item_sum#3
                goto continue_looping%2#0 ? block@3 : block@6
            block@3: // for_body_L38
                let iteration_count#2: uint64 = (+ iteration_count#3 1u)
                let item_sum#2: uint64 = (+ item_sum#3 item#0)
                let range_item%1#3: uint64 = (+ item#0 step#0)
                let item#2: uint64 = range_item%1#3
                let iteration_count#11: uint64 = iteration_count#2
                let item_sum#11: uint64 = item_sum#2
                goto block@2
            block@6: // after_for_L38
                let iteration_count#7: uint64 = iteration_count#14
                let item_sum#7: uint64 = item_sum#14
                (assert step#0) // Step cannot be zero
                let should_loop%3#0: uint64 = (< start#0 stop#0)
                let iteration_count#20: uint64 = iteration_count#7
                let item_sum#20: uint64 = item_sum#7
                let index_sum#12: uint64 = index_sum#0
                goto should_loop%3#0 ? block@7 : block@12
            block@7: // for_preamble_L42
                let range_index%5#0: uint64 = 0u
                let item#3: uint64 = start#0
                let index#1: uint64 = range_index%5#0
                let iteration_count#17: uint64 = iteration_count#7
                let item_sum#17: uint64 = item_sum#7
                let index_sum#9: uint64 = index_sum#0
                goto block@8
            block@8: // for_header_L42
                let item#1: uint64 = item#3
                let index#0: uint64 = index#1
                let iteration_count#6: uint64 = iteration_count#17
                let item_sum#6: uint64 = item_sum#17
                let index_sum#3: uint64 = index_sum#9
                let continue_looping%6#0: uint64 = (< item#1 stop#0)
                let iteration_count#20: uint64 = iteration_count#6
                let item_sum#20: uint64 = item_sum#6
                let index_sum#12: uint64 = index_sum#3
                goto continue_looping%6#0 ? block@9 : block@12
            block@9: // for_body_L42
                let iteration_count#5: uint64 = (+ iteration_count#6 1u)
                let item_sum#5: uint64 = (+ item_sum#6 item#1)
                let index_sum#2: uint64 = (+ index_sum#3 index#0)
                let range_item%4#3: uint64 = (+ item#1 step#0)
                let range_index%5#2: uint64 = (+ index#0 1u)
                let item#3: uint64 = range_item%4#3
                let index#1: uint64 = range_index%5#2
                let iteration_count#17: uint64 = iteration_count#5
                let item_sum#17: uint64 = item_sum#5
                let index_sum#9: uint64 = index_sum#2
                goto block@8
            block@12: // after_for_L42
                let iteration_count#8: uint64 = iteration_count#20
                let item_sum#8: uint64 = item_sum#20
                let index_sum#6: uint64 = index_sum#12
                return iteration_count#8 item_sum#8 index_sum#6
        
        subroutine test_cases.enumeration.contract.enumerate_tuple(tup.0: bytes, tup.1: bytes, tup.2: bytes, tup.3: bytes) -> <uint64, bytes, uint64>:
            block@0: // L51
                let iteration_count#0: uint64 = 0u
                let item_concat#0: bytes = ""
                let index_sum#0: uint64 = 0u
                let tuple_index%0#0: uint64 = 0u
                let iteration_count#15: uint64 = iteration_count#0
                let item_concat#15: bytes = item_concat#0
                let item#10: bytes = tup.0#0
                let tuple_index%0#10: uint64 = tuple_index%0#0
                goto block@5
            block@2: // for_header_1_L56
                let iteration_count#15: uint64 = iteration_count#5
                let item_concat#15: bytes = item_concat#5
                let item#10: bytes = tup.1#0
                let tuple_index%0#10: uint64 = tuple_index%0#5
                goto block@5
            block@3: // for_header_2_L56
                let iteration_count#15: uint64 = iteration_count#5
                let item_concat#15: bytes = item_concat#5
                let item#10: bytes = tup.2#0
                let tuple_index%0#10: uint64 = tuple_index%0#5
                goto block@5
            block@4: // for_header_3_L56
                let iteration_count#15: uint64 = iteration_count#5
                let item_concat#15: bytes = item_concat#5
                let item#10: bytes = tup.3#0
                let tuple_index%0#10: uint64 = tuple_index%0#5
                goto block@5
            block@5: // for_body_L56
                let iteration_count#1: uint64 = iteration_count#15
                let item_concat#1: bytes = item_concat#15
                let item#4: bytes = item#10
                let tuple_index%0#1: uint64 = tuple_index%0#10
                let iteration_count#5: uint64 = (+ iteration_count#1 1u)
                let item_concat#5: bytes = (concat item_concat#1 item#4)
                let tuple_index%0#5: uint64 = (+ tuple_index%0#1 1u)
                goto [block@2, block@3, block@4, ...block@7][tuple_index%0#1]
            block@7: // after_for_L56
                let tuple_index%1#0: uint64 = 0u
                let index#1: uint64 = tuple_index%1#0
                let iteration_count#20: uint64 = iteration_count#5
                let item_concat#20: bytes = item_concat#5
                let item#11: bytes = tup.0#0
                let index_sum#11: uint64 = index_sum#0
                goto block@12
            block@9: // for_header_1_L59
                let index#1: uint64 = tuple_index%1#5
                let iteration_count#20: uint64 = iteration_count#10
                let item_concat#20: bytes = item_concat#10
                let item#11: bytes = tup.1#0
                let index_sum#11: uint64 = index_sum#6
                goto block@12
            block@10: // for_header_2_L59
                let index#1: uint64 = tuple_index%1#5
                let iteration_count#20: uint64 = iteration_count#10
                let item_concat#20: bytes = item_concat#10
                let item#11: bytes = tup.2#0
                let index_sum#11: uint64 = index_sum#6
                goto block@12
            block@11: // for_header_3_L59
                let index#1: uint64 = tuple_index%1#5
                let iteration_count#20: uint64 = iteration_count#10
                let item_concat#20: bytes = item_concat#10
                let item#11: bytes = tup.3#0
                let index_sum#11: uint64 = index_sum#6
                goto block@12
            block@12: // for_body_L59
                let index#0: uint64 = index#1
                let iteration_count#6: uint64 = iteration_count#20
                let item_concat#6: bytes = item_concat#20
                let item#9: bytes = item#11
                let index_sum#1: uint64 = index_sum#11
                let iteration_count#10: uint64 = (+ iteration_count#6 1u)
                let item_concat#10: bytes = (concat item_concat#6 item#9)
                let index_sum#6: uint64 = (+ index_sum#1 index#0)
                let tuple_index%1#5: uint64 = (+ index#0 1u)
                goto [block@9, block@10, block@11, ...block@14][index#0]
            block@14: // after_for_L59
                return iteration_count#10 item_concat#10 index_sum#6
        
        subroutine test_cases.enumeration.contract.enumerate_bytes(bytes_: bytes) -> <uint64, bytes, uint64>:
            block@0: // L68
                let iteration_count#0: uint64 = 0u
                let item_concat#0: bytes = ""
                let index_sum#0: uint64 = 0u
                let bytes_length%0#0: uint64 = (len bytes_#0)
                let item_index_internal%1#0: uint64 = 0u
                let item_index_internal%1#5: uint64 = item_index_internal%1#0
                let iteration_count#7: uint64 = iteration_count#0
                let item_concat#7: bytes = item_concat#0
                goto block@1
            block@1: // for_header_L73
                let item_index_internal%1#1: uint64 = item_index_internal%1#5
                let iteration_count#1: uint64 = iteration_count#7
                let item_concat#1: bytes = item_concat#7
                let continue_looping%3#0: uint64 = (< item_index_internal%1#1 bytes_length%0#0)
                goto continue_looping%3#0 ? block@2 : block@4
            block@2: // for_body_L73
                let item#0: bytes = (extract3 bytes_#0 item_index_internal%1#1 1u)
                let iteration_count#2: uint64 = (+ iteration_count#1 1u)
                let item_concat#2: bytes = (concat item_concat#1 item#0)
                let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
                let item_index_internal%1#5: uint64 = item_index_internal%1#2
                let iteration_count#7: uint64 = iteration_count#2
                let item_concat#7: bytes = item_concat#2
                goto block@1
            block@4: // after_for_L73
                let bytes_length%4#0: uint64 = (len bytes_#0)
                let item_index_internal%5#0: uint64 = 0u
                let index#1: uint64 = item_index_internal%5#0
                let iteration_count#10: uint64 = iteration_count#1
                let item_concat#10: bytes = item_concat#1
                let index_sum#5: uint64 = index_sum#0
                goto block@5
            block@5: // for_header_L76
                let index#0: uint64 = index#1
                let iteration_count#3: uint64 = iteration_count#10
                let item_concat#3: bytes = item_concat#10
                let index_sum#1: uint64 = index_sum#5
                let continue_looping%7#0: uint64 = (< index#0 bytes_length%4#0)
                goto continue_looping%7#0 ? block@6 : block@8
            block@6: // for_body_L76
                let item#1: bytes = (extract3 bytes_#0 index#0 1u)
                let iteration_count#4: uint64 = (+ iteration_count#3 1u)
                let item_concat#4: bytes = (concat item_concat#3 item#1)
                let index_sum#2: uint64 = (+ index_sum#1 index#0)
                let item_index_internal%5#2: uint64 = (+ index#0 1u)
                let index#1: uint64 = item_index_internal%5#2
                let iteration_count#10: uint64 = iteration_count#4
                let item_concat#10: bytes = item_concat#4
                let index_sum#5: uint64 = index_sum#2
                goto block@5
            block@8: // after_for_L76
                return iteration_count#3 item_concat#3 index_sum#1
    
    program clear-state:
        subroutine test_cases.enumeration.contract.EnumerationContract.clear_state_program() -> uint64:
            block@0: // L28
                return 1u