contract test_cases.enumeration.contract.EnumerationContract:
    program approval:
        subroutine test_cases.enumeration.contract.EnumerationContract.approval_program() -> bool:
            block@0: // L5
                let (tuple_assignment%0#0: uint64, tuple_assignment%1#0: uint64, tuple_assignment%2#0: uint64) = test_cases.enumeration.contract.enumerate_urange(10u, 21u, 5u)
                let iteration_count#0: uint64 = tuple_assignment%0#0
                let item_sum#0: uint64 = tuple_assignment%1#0
                let index_sum#0: uint64 = tuple_assignment%2#0
                let tmp%0#0: bool = (== iteration_count#0 6u)
                (assert tmp%0#0)
                let tmp%1#0: bool = (== item_sum#0 90u)
                (assert tmp%1#0)
                let tmp%2#0: bool = (== index_sum#0 3u)
                (assert tmp%2#0)
                let (tuple_assignment%3#0: uint64, tuple_assignment%4#0: bytes, tuple_assignment%5#0: uint64) = test_cases.enumeration.contract.enumerate_tuple(0x486f77, 0x4e6f77, 0x42726f776e, 0x436f77)
                let iteration_count#0: uint64 = tuple_assignment%3#0
                let item_concat#0: bytes = tuple_assignment%4#0
                let index_sum#0: uint64 = tuple_assignment%5#0
                let tmp%3#0: bool = (== iteration_count#0 8u)
                (assert tmp%3#0)
                let tmp%4#0: bool = (== item_concat#0 0x486f774e6f7742726f776e436f77486f774e6f7742726f776e436f77)
                (assert tmp%4#0)
                let tmp%5#0: bool = (== index_sum#0 6u)
                (assert tmp%5#0)
                let (tuple_assignment%6#0: uint64, tuple_assignment%7#0: bytes, tuple_assignment%8#0: uint64) = test_cases.enumeration.contract.enumerate_bytes(0x61626364656667)
                let iteration_count#0: uint64 = tuple_assignment%6#0
                let item_concat#0: bytes = tuple_assignment%7#0
                let index_sum#0: uint64 = tuple_assignment%8#0
                let tmp%6#0: bool = (== iteration_count#0 14u)
                (assert tmp%6#0)
                let tmp%7#0: bool = (== item_concat#0 0x6162636465666761626364656667)
                (assert tmp%7#0)
                let tmp%8#0: bool = (== index_sum#0 21u)
                (assert tmp%8#0)
                return 1u
        
        subroutine test_cases.enumeration.contract.enumerate_urange(start: uint64, stop: uint64, step: uint64) -> <uint64, uint64, uint64>:
            block@0: // L32
                let iteration_count#0: uint64 = 0u
                let item_sum#0: uint64 = 0u
                let index_sum#0: uint64 = 0u
                (assert step#0) // Step cannot be zero
                let range_item%0#0: uint64 = start#0
                goto block@1
            block@1: // for_header_L38
                let continue_looping%0#0: bool = (< range_item%0#0 stop#0)
                goto continue_looping%0#0 ? block@2 : block@5
            block@2: // for_body_L38
                let item#0: uint64 = range_item%0#0
                let iteration_count#0: uint64 = (+ iteration_count#0 1u)
                let item_sum#0: uint64 = (+ item_sum#0 item#0)
                goto block@3
            block@3: // for_footer_L38
                goto block@4
            block@4: // for_increment_L38
                let range_item%0#0: uint64 = (+ range_item%0#0 step#0)
                goto block@1
            block@5: // after_for_L38
                (assert step#0) // Step cannot be zero
                let range_item%1#0: uint64 = start#0
                let range_index%0#0: uint64 = 0u
                goto block@6
            block@6: // for_header_L42
                let continue_looping%1#0: bool = (< range_item%1#0 stop#0)
                goto continue_looping%1#0 ? block@7 : block@10
            block@7: // for_body_L42
                let item#0: uint64 = range_item%1#0
                let index#0: uint64 = range_index%0#0
                let iteration_count#0: uint64 = (+ iteration_count#0 1u)
                let item_sum#0: uint64 = (+ item_sum#0 item#0)
                let index_sum#0: uint64 = (+ index_sum#0 index#0)
                goto block@8
            block@8: // for_footer_L42
                goto block@9
            block@9: // for_increment_L42
                let range_item%1#0: uint64 = (+ range_item%1#0 step#0)
                let range_index%0#0: uint64 = (+ range_index%0#0 1u)
                goto block@6
            block@10: // after_for_L42
                return iteration_count#0 item_sum#0 index_sum#0
        
        subroutine test_cases.enumeration.contract.enumerate_tuple(tup.0: bytes, tup.1: bytes, tup.2: bytes, tup.3: bytes) -> <uint64, bytes, uint64>:
            block@0: // L50
                let iteration_count#0: uint64 = 0u
                let item_concat#0: bytes = 0x
                let index_sum#0: uint64 = 0u
                goto block@1
            block@1: // for_header_0_L56
                let tuple_index%0#0: uint64 = 0u
                let item#0: bytes = tup.0#0
                goto block@5
            block@2: // for_header_1_L56
                let item#0: bytes = tup.1#0
                let tuple_index%0#0: uint64 = tuple_index%0#5
                goto block@5
            block@3: // for_header_2_L56
                let item#0: bytes = tup.2#0
                let tuple_index%0#0: uint64 = tuple_index%0#5
                goto block@5
            block@4: // for_header_3_L56
                let item#0: bytes = tup.3#0
                let tuple_index%0#0: uint64 = tuple_index%0#5
                goto block@5
            block@5: // for_body_L56
                let iteration_count#0: uint64 = (+ iteration_count#0 1u)
                let item_concat#0: bytes = (concat item_concat#0 item#0)
                goto block@6
            block@6: // for_footer_L56
                let tuple_index%0#5: uint64 = (+ tuple_index%0#0 1u)
                goto_nth [block@2, block@3, block@4][tuple_index%0#0] else goto block@7
            block@7: // after_for_L56
                goto block@8
            block@8: // for_header_0_L59
                let tuple_index%1#0: uint64 = 0u
                let item#0: bytes = tup.0#0
                goto block@12
            block@9: // for_header_1_L59
                let item#0: bytes = tup.1#0
                let tuple_index%1#0: uint64 = tuple_index%1#5
                goto block@12
            block@10: // for_header_2_L59
                let item#0: bytes = tup.2#0
                let tuple_index%1#0: uint64 = tuple_index%1#5
                goto block@12
            block@11: // for_header_3_L59
                let item#0: bytes = tup.3#0
                let tuple_index%1#0: uint64 = tuple_index%1#5
                goto block@12
            block@12: // for_body_L59
                let index#0: uint64 = tuple_index%1#0
                let iteration_count#0: uint64 = (+ iteration_count#0 1u)
                let item_concat#0: bytes = (concat item_concat#0 item#0)
                let index_sum#0: uint64 = (+ index_sum#0 index#0)
                goto block@13
            block@13: // for_footer_L59
                let tuple_index%1#5: uint64 = (+ tuple_index%1#0 1u)
                goto_nth [block@9, block@10, block@11][tuple_index%1#0] else goto block@14
            block@14: // after_for_L59
                return iteration_count#0 item_concat#0 index_sum#0
        
        subroutine test_cases.enumeration.contract.enumerate_bytes(bytes_: bytes) -> <uint64, bytes, uint64>:
            block@0: // L67
                let iteration_count#0: uint64 = 0u
                let item_concat#0: bytes = 0x
                let index_sum#0: uint64 = 0u
                let bytes_length%0#0: uint64 = (len bytes_#0)
                let item_index_internal%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L73
                let continue_looping%0#0: bool = (< item_index_internal%0#0 bytes_length%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L73
                let item#0: bytes = (extract3 bytes_#0 item_index_internal%0#0 1u)
                let iteration_count#0: uint64 = (+ iteration_count#0 1u)
                let item_concat#0: bytes = (concat item_concat#0 item#0)
                goto block@3
            block@3: // for_footer_L73
                let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
                goto block@1
            block@4: // after_for_L73
                let bytes_length%1#0: uint64 = (len bytes_#0)
                let item_index_internal%1#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L76
                let continue_looping%1#0: bool = (< item_index_internal%1#0 bytes_length%1#0)
                goto continue_looping%1#0 ? block@6 : block@8
            block@6: // for_body_L76
                let item#0: bytes = (extract3 bytes_#0 item_index_internal%1#0 1u)
                let index#0: uint64 = item_index_internal%1#0
                let iteration_count#0: uint64 = (+ iteration_count#0 1u)
                let item_concat#0: bytes = (concat item_concat#0 item#0)
                let index_sum#0: uint64 = (+ index_sum#0 index#0)
                goto block@7
            block@7: // for_footer_L76
                let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
                goto block@5
            block@8: // after_for_L76
                return iteration_count#0 item_concat#0 index_sum#0
    
    program clear-state:
        subroutine test_cases.enumeration.contract.EnumerationContract.clear_state_program() -> bool:
            block@0: // L28
                return 1u