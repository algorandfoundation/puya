main test_cases.enumeration.contract.EnumerationContract.approval_program:
    block@0: // L5
        let iteration_count#3: uint64 = 0u
        let item_sum#1: uint64 = 0u
        let index_sum#3: uint64 = 0u
        let item#0: uint64 = 10u
        goto block@2
    block@2: // for_header_L38
        let continue_looping%0#0: bool = (< item#0 21u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L39
        let iteration_count#3: uint64 = (+ iteration_count#3 1u)
        let item_sum#1: uint64 = (+ item_sum#1 item#0)
        let item#0: uint64 = (+ item#0 5u)
        goto block@2
    block@5: // after_for_L38
        let item#0: uint64 = 10u
        let index#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L42
        let continue_looping%1#0: bool = (< item#0 21u)
        goto continue_looping%1#0 ? block@7 : block@9
    block@7: // for_body_L43
        let iteration_count#3: uint64 = (+ iteration_count#3 1u)
        let item_sum#1: uint64 = (+ item_sum#1 item#0)
        let index_sum#3: uint64 = (+ index_sum#3 index#0)
        let item#0: uint64 = (+ item#0 5u)
        let index#0: uint64 = (+ index#0 1u)
        goto block@6
    block@9: // after_for_L42
        let tmp%3#0: bool = (== iteration_count#3 6u)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== item_sum#1 90u)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== index_sum#3 3u)
        (assert tmp%5#0)
        let iteration_count#3: uint64 = 0u
        let item_concat#2: bytes = 0x
        let index_sum#3: uint64 = 0u
        let loop_counter%0#0: uint64 = 0u
        let item#6: bytes = 0x486f77
        goto block@12
    block@12: // for_body_L57
        let iteration_count#3: uint64 = (+ iteration_count#3 1u)
        let item_concat#2: bytes = (concat item_concat#2 item#6)
        goto_nth [block@14, block@15, block@16][loop_counter%0#0] else goto block@17
    block@14: // for_header_1_L56
        let loop_counter%0#0: uint64 = 1u
        let item#6: bytes = 0x4e6f77
        goto block@12
    block@15: // for_header_2_L56
        let loop_counter%0#0: uint64 = 2u
        let item#6: bytes = 0x42726f776e
        goto block@12
    block@16: // for_header_3_L56
        let loop_counter%0#0: uint64 = 3u
        let item#6: bytes = 0x436f77
        goto block@12
    block@17: // after_for_L56
        let item#6: bytes = 0x486f77
        let index#0: uint64 = 0u
        goto block@18
    block@18: // for_body_L60
        let iteration_count#3: uint64 = (+ iteration_count#3 1u)
        let item_concat#2: bytes = (concat item_concat#2 item#6)
        let index_sum#3: uint64 = (+ index_sum#3 index#0)
        goto_nth [block@20, block@21, block@22][index#0] else goto block@23
    block@20: // for_header_1_L59
        let item#6: bytes = 0x4e6f77
        let index#0: uint64 = 1u
        goto block@18
    block@21: // for_header_2_L59
        let item#6: bytes = 0x42726f776e
        let index#0: uint64 = 2u
        goto block@18
    block@22: // for_header_3_L59
        let item#6: bytes = 0x436f77
        let index#0: uint64 = 3u
        goto block@18
    block@23: // after_for_L59
        let tmp%9#0: bool = (== iteration_count#3 8u)
        (assert tmp%9#0)
        let tmp%10#0: bool = (== item_concat#2 0x486f774e6f7742726f776e436f77486f774e6f7742726f776e436f77)
        (assert tmp%10#0)
        let tmp%11#0: bool = (== index_sum#3 6u)
        (assert tmp%11#0)
        let iteration_count#3: uint64 = 0u
        let item_concat#2: bytes = 0x
        let index_sum#3: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@26
    block@26: // for_header_L73
        let continue_looping%0#0: bool = (< item_index_internal%0#0 7u)
        goto continue_looping%0#0 ? block@27 : block@29
    block@27: // for_body_L74
        let item#6: bytes = (extract3 0x61626364656667 item_index_internal%0#0 1u) // on error: Index access is out of bounds
        let iteration_count#3: uint64 = (+ iteration_count#3 1u)
        let item_concat#2: bytes = (concat item_concat#2 item#6)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@26
    block@29: // after_for_L73
        let item_index_internal%1#0: uint64 = 0u
        let index#0: uint64 = item_index_internal%1#0
        goto block@30
    block@30: // for_header_L76
        let continue_looping%1#0: bool = (< index#0 7u)
        goto continue_looping%1#0 ? block@31 : block@33
    block@31: // for_body_L77
        let item#6: bytes = (extract3 0x61626364656667 index#0 1u) // on error: Index access is out of bounds
        let iteration_count#3: uint64 = (+ iteration_count#3 1u)
        let item_concat#2: bytes = (concat item_concat#2 item#6)
        let index_sum#3: uint64 = (+ index_sum#3 index#0)
        let item_index_internal%1#0: uint64 = (+ index#0 1u)
        let index#0: uint64 = item_index_internal%1#0
        goto block@30
    block@33: // after_for_L76
        let tmp%15#0: bool = (== iteration_count#3 14u)
        (assert tmp%15#0)
        let tmp%16#0: bool = (== item_concat#2 0x6162636465666761626364656667)
        (assert tmp%16#0)
        let tmp%17#0: bool = (== index_sum#3 21u)
        (assert tmp%17#0)
        return 1u