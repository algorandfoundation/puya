#pragma version 10
#pragma typetrack false

// test_cases.enumeration.contract.EnumerationContract.approval_program() -> uint64:
main:
    intcblock 1 0 21 3
    bytecblock 0x 0x486f77 0x61626364656667 0x436f77 0x42726f776e 0x4e6f77
    intc_1 // 0
    bytec_0 // ""
    dup
    intc_1 // 0
    dupn 2
    pushint 10 // 10

main_for_header@2:
    dup
    intc_2 // 21
    <
    bz main_after_for@5
    dig 3
    intc_0 // 1
    +
    bury 4
    dig 2
    dig 1
    dup
    cover 2
    +
    bury 4
    pushint 5 // 5
    +
    bury 1
    b main_for_header@2

main_after_for@5:
    pushint 10 // 10
    intc_1 // 0
    bury 7
    bury 1

main_for_header@6:
    dup
    intc_2 // 21
    <
    bz main_after_for@9
    dig 3
    intc_0 // 1
    +
    bury 4
    dig 2
    dig 1
    dup
    cover 2
    +
    bury 4
    dig 2
    dig 7
    dup
    cover 3
    +
    bury 4
    pushint 5 // 5
    +
    swap
    intc_0 // 1
    +
    bury 7
    bury 1
    b main_for_header@6

main_after_for@9:
    dig 3
    pushint 6 // 6
    ==
    assert
    dig 2
    pushint 90 // 90
    ==
    assert
    dig 1
    intc_3 // 3
    ==
    assert
    intc_1 // 0
    bury 4
    bytec_0 // 0x
    bury 7
    intc_1 // 0
    bury 2
    bytec_1 // 0x486f77
    intc_1 // 0

main_for_body@12:
    dig 5
    intc_0 // 1
    +
    bury 6
    dig 8
    uncover 2
    concat
    bury 8
    switch main_for_header_1@14 main_for_header_2@15 main_for_header_3@16
    bytec_1 // 0x486f77
    intc_1 // 0
    bury 7

main_for_body@18:
    dig 4
    intc_0 // 1
    +
    bury 5
    dig 7
    swap
    concat
    bury 7
    dig 1
    dig 6
    dup
    cover 2
    +
    bury 3
    switch main_for_header_1@20 main_for_header_2@21 main_for_header_3@22
    dig 3
    pushint 8 // 8
    ==
    assert
    dig 6
    pushbytes 0x486f774e6f7742726f776e436f77486f774e6f7742726f776e436f77
    ==
    assert
    dig 1
    pushint 6 // 6
    ==
    assert
    intc_1 // 0
    bury 4
    bytec_0 // 0x
    bury 7
    intc_1 // 0
    bury 2
    intc_1 // 0
    bury 5

main_for_header@26:
    dig 4
    pushint 7 // 7
    <
    bz main_after_for@29
    bytec_2 // 0x61626364656667
    dig 5
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 5
    intc_0 // 1
    +
    bury 6
    dig 8
    swap
    concat
    bury 8
    intc_0 // 1
    +
    bury 5
    b main_for_header@26

main_after_for@29:
    intc_1 // 0
    bury 6

main_for_header@30:
    dig 5
    pushint 7 // 7
    <
    bz main_after_for@33
    bytec_2 // 0x61626364656667
    dig 6
    dup
    cover 2
    intc_0 // 1
    extract3
    dig 5
    intc_0 // 1
    +
    bury 6
    dig 8
    swap
    concat
    bury 8
    dig 2
    dig 1
    +
    bury 3
    intc_0 // 1
    +
    bury 6
    b main_for_header@30

main_after_for@33:
    dig 3
    pushint 14 // 14
    ==
    assert
    dig 6
    pushbytes 0x6162636465666761626364656667
    ==
    assert
    dig 1
    intc_2 // 21
    ==
    return

main_for_header_3@22:
    bytec_3 // 0x436f77
    intc_3 // 3
    bury 7
    b main_for_body@18

main_for_header_2@21:
    bytec 4 // 0x42726f776e
    pushint 2 // 2
    bury 7
    b main_for_body@18

main_for_header_1@20:
    bytec 5 // 0x4e6f77
    intc_0 // 1
    bury 7
    b main_for_body@18

main_for_header_3@16:
    bytec_3 // 0x436f77
    intc_3 // 3
    b main_for_body@12

main_for_header_2@15:
    bytec 4 // 0x42726f776e
    pushint 2 // 2
    b main_for_body@12

main_for_header_1@14:
    bytec 5 // 0x4e6f77
    intc_0 // 1
    b main_for_body@12
