#pragma version 10

test_cases.enumeration.contract.EnumerationContract.approval_program:
    int 10
    int 21
    int 5
    callsub enumerate_urange
    cover 2
    swap
    int 6
    ==
    assert
    int 90
    ==
    assert
    int 3
    ==
    assert
    byte 0x486f77
    byte 0x4e6f77
    byte 0x42726f776e
    byte 0x436f77
    callsub enumerate_tuple
    cover 2
    swap
    int 8
    ==
    assert
    byte 0x486f774e6f7742726f776e436f77486f774e6f7742726f776e436f77
    ==
    assert
    int 6
    ==
    assert
    byte 0x61626364656667
    callsub enumerate_bytes
    cover 2
    swap
    int 14
    ==
    assert
    byte 0x6162636465666761626364656667
    ==
    assert
    int 21
    ==
    assert
    int 1
    return


// test_cases.enumeration.contract.enumerate_urange(start: uint64, stop: uint64, step: uint64) -> uint64, uint64, uint64:
enumerate_urange:
    proto 3 3
    byte ""
    int 0
    dupn 2
    frame_dig -1
    assert // Step cannot be zero
    frame_dig -3

enumerate_urange_for_header@1:
    frame_dig 4
    frame_dig -2
    <
    bz enumerate_urange_after_for@5
    frame_dig 1
    int 1
    +
    frame_bury 1
    frame_dig 2
    frame_dig 4
    dup
    cover 2
    +
    frame_bury 2
    frame_dig -1
    +
    frame_bury 4
    b enumerate_urange_for_header@1

enumerate_urange_after_for@5:
    int 0
    frame_bury 0
    frame_dig -3
    frame_bury 4

enumerate_urange_for_header@6:
    frame_dig 4
    frame_dig -2
    <
    bz enumerate_urange_after_for@10
    frame_dig 1
    int 1
    +
    frame_bury 1
    frame_dig 2
    frame_dig 4
    dup
    cover 2
    +
    frame_bury 2
    frame_dig 3
    frame_dig 0
    dup
    cover 3
    +
    frame_bury 3
    frame_dig -1
    +
    swap
    int 1
    +
    frame_bury 0
    frame_bury 4
    b enumerate_urange_for_header@6

enumerate_urange_after_for@10:
    frame_dig 1
    frame_dig 2
    frame_dig 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub


// test_cases.enumeration.contract.enumerate_tuple(tup.0: bytes, tup.1: bytes, tup.2: bytes, tup.3: bytes) -> uint64, bytes, uint64:
enumerate_tuple:
    proto 4 3
    byte ""
    dupn 2
    int 0
    byte 0x
    int 0
    frame_dig -4
    int 0
    b enumerate_tuple_for_body@5

enumerate_tuple_for_header_1@2:
    frame_dig -3
    frame_dig 1
    b enumerate_tuple_for_body@5

enumerate_tuple_for_header_2@3:
    frame_dig -2
    frame_dig 1
    b enumerate_tuple_for_body@5

enumerate_tuple_for_header_3@4:
    frame_dig -1
    frame_dig 1

enumerate_tuple_for_body@5:
    frame_dig 3
    int 1
    +
    frame_bury 3
    frame_dig 4
    uncover 2
    concat
    frame_bury 4
    dup
    int 1
    +
    frame_bury 1
    switch enumerate_tuple_for_header_1@2 enumerate_tuple_for_header_2@3 enumerate_tuple_for_header_3@4
    frame_dig -4
    int 0
    frame_bury 0
    b enumerate_tuple_for_body@12

enumerate_tuple_for_header_1@9:
    frame_dig -3
    frame_dig 2
    frame_bury 0
    b enumerate_tuple_for_body@12

enumerate_tuple_for_header_2@10:
    frame_dig -2
    frame_dig 2
    frame_bury 0
    b enumerate_tuple_for_body@12

enumerate_tuple_for_header_3@11:
    frame_dig -1
    frame_dig 2
    frame_bury 0

enumerate_tuple_for_body@12:
    frame_dig 3
    int 1
    +
    dup
    frame_bury 3
    frame_dig 4
    uncover 2
    concat
    dup
    frame_bury 4
    frame_dig 5
    frame_dig 0
    dup
    cover 2
    +
    dup
    cover 2
    frame_bury 5
    dup
    int 1
    +
    frame_bury 2
    switch enumerate_tuple_for_header_1@9 enumerate_tuple_for_header_2@10 enumerate_tuple_for_header_3@11
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub


// test_cases.enumeration.contract.enumerate_bytes(bytes_: bytes) -> uint64, bytes, uint64:
enumerate_bytes:
    proto 1 3
    byte ""
    int 0
    byte 0x
    int 0
    frame_dig -1
    len
    int 0

enumerate_bytes_for_header@1:
    frame_dig 5
    frame_dig 4
    <
    bz enumerate_bytes_after_for@4
    frame_dig -1
    frame_dig 5
    dup
    cover 2
    int 1
    extract3
    frame_dig 1
    int 1
    +
    frame_bury 1
    frame_dig 2
    swap
    concat
    frame_bury 2
    int 1
    +
    frame_bury 5
    b enumerate_bytes_for_header@1

enumerate_bytes_after_for@4:
    int 0
    frame_bury 0

enumerate_bytes_for_header@5:
    frame_dig 0
    frame_dig 4
    <
    bz enumerate_bytes_after_for@8
    frame_dig -1
    frame_dig 0
    dup
    cover 2
    int 1
    extract3
    frame_dig 1
    int 1
    +
    frame_bury 1
    frame_dig 2
    swap
    concat
    frame_bury 2
    frame_dig 3
    dig 1
    +
    frame_bury 3
    int 1
    +
    frame_bury 0
    b enumerate_bytes_for_header@5

enumerate_bytes_after_for@8:
    frame_dig 1
    frame_dig 2
    frame_dig 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub
