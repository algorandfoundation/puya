#pragma version 10

test_cases.enumeration.contract.EnumerationContract.approval_program:
    intcblock 1 0 3 21
    bytecblock 0x
    pushint 10 // 10
    intc_3 // 21
    pushint 5 // 5
    callsub enumerate_urange
    cover 2
    swap
    pushint 6 // 6
    ==
    assert
    pushint 90 // 90
    ==
    assert
    intc_2 // 3
    ==
    assert
    pushbytess 0x486f77 0x4e6f77 0x42726f776e 0x436f77 // 0x486f77, 0x4e6f77, 0x42726f776e, 0x436f77
    callsub enumerate_tuple
    cover 2
    swap
    pushint 8 // 8
    ==
    assert
    pushbytes 0x486f774e6f7742726f776e436f77486f774e6f7742726f776e436f77
    ==
    assert
    pushint 6 // 6
    ==
    assert
    pushbytes 0x61626364656667
    callsub enumerate_bytes
    cover 2
    swap
    pushint 14 // 14
    ==
    assert
    pushbytes 0x6162636465666761626364656667
    ==
    assert
    intc_3 // 21
    ==
    assert
    intc_0 // 1
    return


// test_cases.enumeration.contract.enumerate_urange(start: uint64, stop: uint64, step: uint64) -> uint64, uint64, uint64:
enumerate_urange:
    proto 3 3
    bytec_0 // ""
    intc_1 // 0
    dupn 2
    frame_dig -1
    assert // Step cannot be zero
    frame_dig -3

enumerate_urange_for_header@1:
    frame_dig 4
    frame_dig -2
    <
    bz enumerate_urange_after_for@4
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    frame_dig 2
    frame_dig 4
    dup
    cover 2
    +
    frame_bury 2
    frame_dig -1
    +
    frame_bury 4
    b enumerate_urange_for_header@1

enumerate_urange_after_for@4:
    intc_1 // 0
    frame_bury 0
    frame_dig -3
    frame_bury 4

enumerate_urange_for_header@5:
    frame_dig 4
    frame_dig -2
    <
    bz enumerate_urange_after_for@8
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    frame_dig 2
    frame_dig 4
    dup
    cover 2
    +
    frame_bury 2
    frame_dig 3
    frame_dig 0
    dup
    cover 3
    +
    frame_bury 3
    frame_dig -1
    +
    frame_bury 4
    intc_0 // 1
    +
    frame_bury 0
    b enumerate_urange_for_header@5

enumerate_urange_after_for@8:
    frame_dig 1
    frame_dig 2
    frame_dig 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub


// test_cases.enumeration.contract.enumerate_tuple(tup.0: bytes, tup.1: bytes, tup.2: bytes, tup.3: bytes) -> uint64, bytes, uint64:
enumerate_tuple:
    proto 4 3
    intc_1 // 0
    bytec_0 // 0x
    intc_1 // 0
    frame_dig -4
    intc_1 // 0

enumerate_tuple_for_body@1:
    frame_dig 0
    intc_0 // 1
    +
    frame_bury 0
    frame_dig 1
    uncover 2
    concat
    frame_bury 1
    switch enumerate_tuple_for_header_1@3 enumerate_tuple_for_header_2@4 enumerate_tuple_for_header_3@5
    b enumerate_tuple_after_for@6

enumerate_tuple_for_header_1@3:
    frame_dig -3
    intc_0 // 1
    b enumerate_tuple_for_body@1

enumerate_tuple_for_header_2@4:
    frame_dig -2
    pushint 2 // 2
    b enumerate_tuple_for_body@1

enumerate_tuple_for_header_3@5:
    frame_dig -1
    intc_2 // 3
    b enumerate_tuple_for_body@1

enumerate_tuple_after_for@6:
    frame_dig -4
    intc_1 // 0

enumerate_tuple_for_body@7:
    frame_dig 0
    intc_0 // 1
    +
    dup
    frame_bury 0
    frame_dig 1
    uncover 3
    concat
    dup
    frame_bury 1
    frame_dig 2
    uncover 3
    dup
    cover 2
    +
    dup
    cover 2
    frame_bury 2
    switch enumerate_tuple_for_header_1@9 enumerate_tuple_for_header_2@10 enumerate_tuple_for_header_3@11
    uncover 5
    uncover 5
    uncover 5
    retsub

enumerate_tuple_for_header_1@9:
    frame_dig -3
    intc_0 // 1
    b enumerate_tuple_for_body@7

enumerate_tuple_for_header_2@10:
    frame_dig -2
    pushint 2 // 2
    b enumerate_tuple_for_body@7

enumerate_tuple_for_header_3@11:
    frame_dig -1
    intc_2 // 3
    b enumerate_tuple_for_body@7


// test_cases.enumeration.contract.enumerate_bytes(bytes_: bytes) -> uint64, bytes, uint64:
enumerate_bytes:
    proto 1 3
    bytec_0 // ""
    intc_1 // 0
    bytec_0 // 0x
    intc_1 // 0
    frame_dig -1
    len
    intc_1 // 0

enumerate_bytes_for_header@1:
    frame_dig 5
    frame_dig 4
    <
    bz enumerate_bytes_after_for@4
    frame_dig -1
    frame_dig 5
    dup
    cover 2
    intc_0 // 1
    extract3
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    frame_dig 2
    swap
    concat
    frame_bury 2
    intc_0 // 1
    +
    frame_bury 5
    b enumerate_bytes_for_header@1

enumerate_bytes_after_for@4:
    intc_1 // 0
    frame_bury 0

enumerate_bytes_for_header@5:
    frame_dig 0
    frame_dig 4
    <
    bz enumerate_bytes_after_for@8
    frame_dig -1
    frame_dig 0
    dup
    cover 2
    intc_0 // 1
    extract3
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    frame_dig 2
    swap
    concat
    frame_bury 2
    frame_dig 3
    dig 1
    +
    frame_bury 3
    intc_0 // 1
    +
    frame_bury 0
    b enumerate_bytes_for_header@5

enumerate_bytes_after_for@8:
    frame_dig 1
    frame_dig 2
    frame_dig 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub
