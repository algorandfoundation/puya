debug: PuyaOptions(paths=['enumeration'], output_teal=True, output_arc32=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@0: // L84
debug: Terminated block@0: // L84
debug: Sealing block@None: // if_body_L106
debug: Sealing block@None: // else_body_L106
debug: Terminated block@1: // if_body_L106
debug: Sealing block@2: // after_if_else_L106
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L106
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L84
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L106
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L84
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L106
debug: Sealing block@None: // ternary_true_L110
debug: Sealing block@None: // ternary_false_L110
debug: Terminated block@3: // ternary_true_L110
debug: Terminated block@4: // ternary_false_L110
debug: Sealing block@5: // ternary_merge_L110
debug: Created Phi assignment: let ternary_result%6#2: uint64 = undefined while trying to resolve 'ternary_result%6' in block@5: // ternary_merge_L110
debug: Added ternary_result%6#0 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@3) in block@3: // ternary_true_L110
debug: Added ternary_result%6#1 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@3, ternary_result%6#1 <- block@4) in block@4: // ternary_false_L110
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L106
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L84
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L110
debug: Looking for 'range_item%7' in an unsealed block creating an incomplete Phi: block@6: // for_header_L110
debug: Created Phi assignment: let range_item%7#1: uint64 = undefined while trying to resolve 'range_item%7' in block@6: // for_header_L110
debug: Terminated block@6: // for_header_L110
debug: Looking for 'range_item%7' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let range_item%7#2: uint64 = undefined while trying to resolve 'range_item%7' in block@7: // for_body_L110
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L110
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L110
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L110
debug: Terminated block@7: // for_body_L110
debug: Sealing block@8: // for_footer_L110
debug: Terminated block@8: // for_footer_L110
debug: Sealing block@9: // for_increment_L110
debug: Terminated block@9: // for_increment_L110
debug: Sealing block@6: // for_header_L110
debug: Added range_item%7#0 to Phi node: let range_item%7#1: uint64 = φ(range_item%7#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added range_item%7#3 to Phi node: let range_item%7#1: uint64 = φ(range_item%7#0 <- block@5, range_item%7#3 <- block@9) in block@9: // for_increment_L110
debug: Sealing block@7: // for_body_L110
debug: Added range_item%7#1 to Phi node: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6) (range_item%7#2) with range_item%7#1
debug: Deleting Phi assignment: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6) (range_item%7#2) with range_item%7#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L110
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L106
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L84
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L106
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L110
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L110
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L110
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L110
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L110
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L110
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L106
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L84
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L110
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L110
debug: Terminated block@10: // after_for_L110
debug: Sealing block@0: // L117
debug: Terminated block@0: // L117
debug: Sealing block@0: // L139
debug: Terminated block@0: // L139
debug: Sealing block@0: // L166
debug: Terminated block@0: // L166
debug: Sealing block@0: // L195
debug: Terminated block@0: // L195
debug: Sealing block@None: // if_body_L210
debug: Sealing block@None: // else_body_L210
debug: Terminated block@1: // if_body_L210
debug: Terminated block@2: // else_body_L210
debug: Sealing block@3: // after_if_else_L210
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L210
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@4: // for_header_L215
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@4: // for_header_L215
debug: Terminated block@4: // for_header_L215
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let range_item%1#2: uint64 = undefined while trying to resolve 'range_item%1' in block@5: // for_body_L215
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_body_L215
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@5: // for_body_L215
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_body_L215
debug: Terminated block@5: // for_body_L215
debug: Sealing block@6: // for_footer_L215
debug: Terminated block@6: // for_footer_L215
debug: Sealing block@7: // for_increment_L215
debug: Terminated block@7: // for_increment_L215
debug: Sealing block@4: // for_header_L215
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3) in block@3: // after_if_else_L210
debug: Added range_item%1#3 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3, range_item%1#3 <- block@7) in block@7: // for_increment_L215
debug: Sealing block@5: // for_body_L215
debug: Added range_item%1#1 to Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4) (range_item%1#2) with range_item%1#1
debug: Deleting Phi assignment: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4)
debug: Replaced trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4) (range_item%1#2) with range_item%1#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L210
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L210
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3) in block@3: // after_if_else_L210
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3, tail_cursor#3 <- block@7) in block@7: // for_increment_L215
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L215
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L210
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@7) in block@7: // for_increment_L215
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@4)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L210
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@7) in block@7: // for_increment_L215
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L215
debug: Terminated block@8: // after_for_L215
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L32
debug: Terminated block@0: // L32
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L38
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L38
debug: Terminated block@1: // for_header_L38
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L38
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L38
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@2: // for_body_L38
debug: Created Phi assignment: let iteration_count#1: uint64 = undefined while trying to resolve 'iteration_count' in block@2: // for_body_L38
debug: Looking for 'item_sum' in an unsealed block creating an incomplete Phi: block@2: // for_body_L38
debug: Created Phi assignment: let item_sum#1: uint64 = undefined while trying to resolve 'item_sum' in block@2: // for_body_L38
debug: Terminated block@2: // for_body_L38
debug: Sealing block@3: // for_footer_L38
debug: Terminated block@3: // for_footer_L38
debug: Sealing block@4: // for_increment_L38
debug: Terminated block@4: // for_increment_L38
debug: Sealing block@1: // for_header_L38
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L32
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L38
debug: Sealing block@2: // for_body_L38
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L38
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let iteration_count#3: uint64 = undefined while trying to resolve 'iteration_count' in block@1: // for_header_L38
debug: Added iteration_count#0 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#0 <- block@0) in block@0: // L32
debug: Added iteration_count#2 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@4) in block@4: // for_increment_L38
debug: Added iteration_count#3 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#3 <- block@1) in block@1: // for_header_L38
debug: Replacing trivial Phi node: let iteration_count#1: uint64 = φ(iteration_count#3 <- block@1) (iteration_count#1) with iteration_count#3
debug: Deleting Phi assignment: let iteration_count#1: uint64 = φ(iteration_count#3 <- block@1)
debug: Replaced trivial Phi node: let iteration_count#1: uint64 = φ(iteration_count#3 <- block@1) (iteration_count#1) with iteration_count#3 in current definition for 0 blocks
debug: Created Phi assignment: let item_sum#3: uint64 = undefined while trying to resolve 'item_sum' in block@1: // for_header_L38
debug: Added item_sum#0 to Phi node: let item_sum#3: uint64 = φ(item_sum#0 <- block@0) in block@0: // L32
debug: Added item_sum#2 to Phi node: let item_sum#3: uint64 = φ(item_sum#0 <- block@0, item_sum#2 <- block@4) in block@4: // for_increment_L38
debug: Added item_sum#3 to Phi node: let item_sum#1: uint64 = φ(item_sum#3 <- block@1) in block@1: // for_header_L38
debug: Replacing trivial Phi node: let item_sum#1: uint64 = φ(item_sum#3 <- block@1) (item_sum#1) with item_sum#3
debug: Deleting Phi assignment: let item_sum#1: uint64 = φ(item_sum#3 <- block@1)
debug: Replaced trivial Phi node: let item_sum#1: uint64 = φ(item_sum#3 <- block@1) (item_sum#1) with item_sum#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L38
debug: Created Phi assignment: let step#1: uint64 = undefined while trying to resolve 'step' in block@1: // for_header_L38
debug: Added step#0 to Phi node: let step#1: uint64 = φ(step#0 <- block@0) in block@0: // L32
debug: Added step#1 to Phi node: let step#1: uint64 = φ(step#0 <- block@0, step#1 <- block@4) in block@4: // for_increment_L38
debug: Replacing trivial Phi node: let step#1: uint64 = φ(step#0 <- block@0, step#1 <- block@4) (step#1) with step#0
debug: Deleting Phi assignment: let step#1: uint64 = φ(step#0 <- block@0, step#1 <- block@4)
debug: Replaced trivial Phi node: let step#1: uint64 = φ(step#0 <- block@0, step#1 <- block@4) (step#1) with step#0 in current definition for 4 blocks
debug: Created Phi assignment: let stop#1: uint64 = undefined while trying to resolve 'stop' in block@1: // for_header_L38
debug: Added stop#0 to Phi node: let stop#1: uint64 = φ(stop#0 <- block@0) in block@0: // L32
debug: Added stop#1 to Phi node: let stop#1: uint64 = φ(stop#0 <- block@0, stop#1 <- block@4) in block@4: // for_increment_L38
debug: Replacing trivial Phi node: let stop#1: uint64 = φ(stop#0 <- block@0, stop#1 <- block@4) (stop#1) with stop#0
debug: Deleting Phi assignment: let stop#1: uint64 = φ(stop#0 <- block@0, stop#1 <- block@4)
debug: Replaced trivial Phi node: let stop#1: uint64 = φ(stop#0 <- block@0, stop#1 <- block@4) (stop#1) with stop#0 in current definition for 4 blocks
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // for_header_L38
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L32
debug: Added start#1 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#1 <- block@4) in block@4: // for_increment_L38
debug: Replacing trivial Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#1 <- block@4) (start#1) with start#0
debug: Deleting Phi assignment: let start#1: uint64 = φ(start#0 <- block@0, start#1 <- block@4)
debug: Replaced trivial Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#1 <- block@4) (start#1) with start#0 in current definition for 4 blocks
debug: Terminated block@5: // after_for_L38
debug: Looking for 'range_item%2' in an unsealed block creating an incomplete Phi: block@6: // for_header_L42
debug: Created Phi assignment: let range_item%2#1: uint64 = undefined while trying to resolve 'range_item%2' in block@6: // for_header_L42
debug: Terminated block@6: // for_header_L42
debug: Looking for 'range_item%2' in an unsealed block creating an incomplete Phi: block@7: // for_body_L42
debug: Created Phi assignment: let range_item%2#2: uint64 = undefined while trying to resolve 'range_item%2' in block@7: // for_body_L42
debug: Looking for 'range_index%3' in an unsealed block creating an incomplete Phi: block@7: // for_body_L42
debug: Created Phi assignment: let range_index%3#1: uint64 = undefined while trying to resolve 'range_index%3' in block@7: // for_body_L42
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@7: // for_body_L42
debug: Created Phi assignment: let iteration_count#4: uint64 = undefined while trying to resolve 'iteration_count' in block@7: // for_body_L42
debug: Looking for 'item_sum' in an unsealed block creating an incomplete Phi: block@7: // for_body_L42
debug: Created Phi assignment: let item_sum#4: uint64 = undefined while trying to resolve 'item_sum' in block@7: // for_body_L42
debug: Looking for 'index_sum' in an unsealed block creating an incomplete Phi: block@7: // for_body_L42
debug: Created Phi assignment: let index_sum#1: uint64 = undefined while trying to resolve 'index_sum' in block@7: // for_body_L42
debug: Terminated block@7: // for_body_L42
debug: Sealing block@8: // for_footer_L42
debug: Terminated block@8: // for_footer_L42
debug: Sealing block@9: // for_increment_L42
debug: Terminated block@9: // for_increment_L42
debug: Sealing block@6: // for_header_L42
debug: Added range_item%2#0 to Phi node: let range_item%2#1: uint64 = φ(range_item%2#0 <- block@5) in block@5: // after_for_L38
debug: Added range_item%2#3 to Phi node: let range_item%2#1: uint64 = φ(range_item%2#0 <- block@5, range_item%2#3 <- block@9) in block@9: // for_increment_L42
debug: Sealing block@7: // for_body_L42
debug: Added range_item%2#1 to Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@6) in block@6: // for_header_L42
debug: Replacing trivial Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@6) (range_item%2#2) with range_item%2#1
debug: Deleting Phi assignment: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@6) (range_item%2#2) with range_item%2#1 in current definition for 2 blocks
debug: Created Phi assignment: let range_index%3#3: uint64 = undefined while trying to resolve 'range_index%3' in block@6: // for_header_L42
debug: Added range_index%3#0 to Phi node: let range_index%3#3: uint64 = φ(range_index%3#0 <- block@5) in block@5: // after_for_L38
debug: Added range_index%3#2 to Phi node: let range_index%3#3: uint64 = φ(range_index%3#0 <- block@5, range_index%3#2 <- block@9) in block@9: // for_increment_L42
debug: Added range_index%3#3 to Phi node: let range_index%3#1: uint64 = φ(range_index%3#3 <- block@6) in block@6: // for_header_L42
debug: Replacing trivial Phi node: let range_index%3#1: uint64 = φ(range_index%3#3 <- block@6) (range_index%3#1) with range_index%3#3
debug: Deleting Phi assignment: let range_index%3#1: uint64 = φ(range_index%3#3 <- block@6)
debug: Replaced trivial Phi node: let range_index%3#1: uint64 = φ(range_index%3#3 <- block@6) (range_index%3#1) with range_index%3#3 in current definition for 2 blocks
debug: Created Phi assignment: let iteration_count#6: uint64 = undefined while trying to resolve 'iteration_count' in block@6: // for_header_L42
debug: Added iteration_count#3 to Phi node: let iteration_count#6: uint64 = φ(iteration_count#3 <- block@5) in block@5: // after_for_L38
debug: Added iteration_count#5 to Phi node: let iteration_count#6: uint64 = φ(iteration_count#3 <- block@5, iteration_count#5 <- block@9) in block@9: // for_increment_L42
debug: Added iteration_count#6 to Phi node: let iteration_count#4: uint64 = φ(iteration_count#6 <- block@6) in block@6: // for_header_L42
debug: Replacing trivial Phi node: let iteration_count#4: uint64 = φ(iteration_count#6 <- block@6) (iteration_count#4) with iteration_count#6
debug: Deleting Phi assignment: let iteration_count#4: uint64 = φ(iteration_count#6 <- block@6)
debug: Replaced trivial Phi node: let iteration_count#4: uint64 = φ(iteration_count#6 <- block@6) (iteration_count#4) with iteration_count#6 in current definition for 0 blocks
debug: Created Phi assignment: let item_sum#6: uint64 = undefined while trying to resolve 'item_sum' in block@6: // for_header_L42
debug: Added item_sum#3 to Phi node: let item_sum#6: uint64 = φ(item_sum#3 <- block@5) in block@5: // after_for_L38
debug: Added item_sum#5 to Phi node: let item_sum#6: uint64 = φ(item_sum#3 <- block@5, item_sum#5 <- block@9) in block@9: // for_increment_L42
debug: Added item_sum#6 to Phi node: let item_sum#4: uint64 = φ(item_sum#6 <- block@6) in block@6: // for_header_L42
debug: Replacing trivial Phi node: let item_sum#4: uint64 = φ(item_sum#6 <- block@6) (item_sum#4) with item_sum#6
debug: Deleting Phi assignment: let item_sum#4: uint64 = φ(item_sum#6 <- block@6)
debug: Replaced trivial Phi node: let item_sum#4: uint64 = φ(item_sum#6 <- block@6) (item_sum#4) with item_sum#6 in current definition for 0 blocks
debug: Created Phi assignment: let index_sum#3: uint64 = undefined while trying to resolve 'index_sum' in block@6: // for_header_L42
debug: Created Phi assignment: let index_sum#4: uint64 = undefined while trying to resolve 'index_sum' in block@1: // for_header_L38
debug: Added index_sum#0 to Phi node: let index_sum#4: uint64 = φ(index_sum#0 <- block@0) in block@0: // L32
debug: Added index_sum#4 to Phi node: let index_sum#4: uint64 = φ(index_sum#0 <- block@0, index_sum#4 <- block@4) in block@4: // for_increment_L38
debug: Replacing trivial Phi node: let index_sum#4: uint64 = φ(index_sum#0 <- block@0, index_sum#4 <- block@4) (index_sum#4) with index_sum#0
debug: Deleting Phi assignment: let index_sum#4: uint64 = φ(index_sum#0 <- block@0, index_sum#4 <- block@4)
debug: Replaced trivial Phi node: let index_sum#4: uint64 = φ(index_sum#0 <- block@0, index_sum#4 <- block@4) (index_sum#4) with index_sum#0 in current definition for 4 blocks
debug: Added index_sum#0 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@5) in block@5: // after_for_L38
debug: Added index_sum#2 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@5, index_sum#2 <- block@9) in block@9: // for_increment_L42
debug: Added index_sum#3 to Phi node: let index_sum#1: uint64 = φ(index_sum#3 <- block@6) in block@6: // for_header_L42
debug: Replacing trivial Phi node: let index_sum#1: uint64 = φ(index_sum#3 <- block@6) (index_sum#1) with index_sum#3
debug: Deleting Phi assignment: let index_sum#1: uint64 = φ(index_sum#3 <- block@6)
debug: Replaced trivial Phi node: let index_sum#1: uint64 = φ(index_sum#3 <- block@6) (index_sum#1) with index_sum#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L42
debug: Terminated block@10: // after_for_L42
debug: Sealing block@0: // L50
debug: Terminated block@0: // L50
debug: Sealing block@1: // for_header_0_L56
debug: Terminated block@1: // for_header_0_L56
debug: Terminated block@2: // for_header_1_L56
debug: Terminated block@3: // for_header_2_L56
debug: Terminated block@4: // for_header_3_L56
debug: Sealing block@None: // for_body_L56
debug: Created Phi assignment: let iteration_count#1: uint64 = undefined while trying to resolve 'iteration_count' in block@5: // for_body_L56
debug: Added iteration_count#0 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@1) in block@1: // for_header_0_L56
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@2: // for_header_1_L56
debug: Created Phi assignment: let iteration_count#2: uint64 = undefined while trying to resolve 'iteration_count' in block@2: // for_header_1_L56
debug: Added iteration_count#2 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@1, iteration_count#2 <- block@2) in block@2: // for_header_1_L56
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@3: // for_header_2_L56
debug: Created Phi assignment: let iteration_count#3: uint64 = undefined while trying to resolve 'iteration_count' in block@3: // for_header_2_L56
debug: Added iteration_count#3 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@1, iteration_count#2 <- block@2, iteration_count#3 <- block@3) in block@3: // for_header_2_L56
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@4: // for_header_3_L56
debug: Created Phi assignment: let iteration_count#4: uint64 = undefined while trying to resolve 'iteration_count' in block@4: // for_header_3_L56
debug: Added iteration_count#4 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@1, iteration_count#2 <- block@2, iteration_count#3 <- block@3, iteration_count#4 <- block@4) in block@4: // for_header_3_L56
debug: Created Phi assignment: let item_concat#1: bytes = undefined while trying to resolve 'item_concat' in block@5: // for_body_L56
debug: Added item_concat#0 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@1) in block@1: // for_header_0_L56
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@2: // for_header_1_L56
debug: Created Phi assignment: let item_concat#2: bytes = undefined while trying to resolve 'item_concat' in block@2: // for_header_1_L56
debug: Added item_concat#2 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@1, item_concat#2 <- block@2) in block@2: // for_header_1_L56
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@3: // for_header_2_L56
debug: Created Phi assignment: let item_concat#3: bytes = undefined while trying to resolve 'item_concat' in block@3: // for_header_2_L56
debug: Added item_concat#3 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@1, item_concat#2 <- block@2, item_concat#3 <- block@3) in block@3: // for_header_2_L56
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@4: // for_header_3_L56
debug: Created Phi assignment: let item_concat#4: bytes = undefined while trying to resolve 'item_concat' in block@4: // for_header_3_L56
debug: Added item_concat#4 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@1, item_concat#2 <- block@2, item_concat#3 <- block@3, item_concat#4 <- block@4) in block@4: // for_header_3_L56
debug: Created Phi assignment: let item#4: bytes = undefined while trying to resolve 'item' in block@5: // for_body_L56
debug: Added item#0 to Phi node: let item#4: bytes = φ(item#0 <- block@1) in block@1: // for_header_0_L56
debug: Added item#1 to Phi node: let item#4: bytes = φ(item#0 <- block@1, item#1 <- block@2) in block@2: // for_header_1_L56
debug: Added item#2 to Phi node: let item#4: bytes = φ(item#0 <- block@1, item#1 <- block@2, item#2 <- block@3) in block@3: // for_header_2_L56
debug: Added item#3 to Phi node: let item#4: bytes = φ(item#0 <- block@1, item#1 <- block@2, item#2 <- block@3, item#3 <- block@4) in block@4: // for_header_3_L56
debug: Terminated block@5: // for_body_L56
debug: Sealing block@6: // for_footer_L56
debug: Created Phi assignment: let tuple_index%0#1: uint64 = undefined while trying to resolve 'tuple_index%0' in block@5: // for_body_L56
debug: Added tuple_index%0#0 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1) in block@1: // for_header_0_L56
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@2: // for_header_1_L56
debug: Created Phi assignment: let tuple_index%0#2: uint64 = undefined while trying to resolve 'tuple_index%0' in block@2: // for_header_1_L56
debug: Added tuple_index%0#2 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1, tuple_index%0#2 <- block@2) in block@2: // for_header_1_L56
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@3: // for_header_2_L56
debug: Created Phi assignment: let tuple_index%0#3: uint64 = undefined while trying to resolve 'tuple_index%0' in block@3: // for_header_2_L56
debug: Added tuple_index%0#3 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1, tuple_index%0#2 <- block@2, tuple_index%0#3 <- block@3) in block@3: // for_header_2_L56
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@4: // for_header_3_L56
debug: Created Phi assignment: let tuple_index%0#4: uint64 = undefined while trying to resolve 'tuple_index%0' in block@4: // for_header_3_L56
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1, tuple_index%0#2 <- block@2, tuple_index%0#3 <- block@3, tuple_index%0#4 <- block@4) in block@4: // for_header_3_L56
debug: Terminated block@6: // for_footer_L56
debug: Sealing block@2: // for_header_1_L56
debug: Added iteration_count#5 to Phi node: let iteration_count#2: uint64 = φ(iteration_count#5 <- block@6) in block@6: // for_footer_L56
debug: Replacing trivial Phi node: let iteration_count#2: uint64 = φ(iteration_count#5 <- block@6) (iteration_count#2) with iteration_count#5
debug: Deleting Phi assignment: let iteration_count#2: uint64 = φ(iteration_count#5 <- block@6)
debug: Replaced trivial Phi node: let iteration_count#2: uint64 = φ(iteration_count#5 <- block@6) (iteration_count#2) with iteration_count#5 in current definition for 1 blocks
debug: Added item_concat#5 to Phi node: let item_concat#2: bytes = φ(item_concat#5 <- block@6) in block@6: // for_footer_L56
debug: Replacing trivial Phi node: let item_concat#2: bytes = φ(item_concat#5 <- block@6) (item_concat#2) with item_concat#5
debug: Deleting Phi assignment: let item_concat#2: bytes = φ(item_concat#5 <- block@6)
debug: Replaced trivial Phi node: let item_concat#2: bytes = φ(item_concat#5 <- block@6) (item_concat#2) with item_concat#5 in current definition for 1 blocks
debug: Added tuple_index%0#5 to Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#5 <- block@6) in block@6: // for_footer_L56
debug: Replacing trivial Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#5 <- block@6) (tuple_index%0#2) with tuple_index%0#5
debug: Deleting Phi assignment: let tuple_index%0#2: uint64 = φ(tuple_index%0#5 <- block@6)
debug: Replaced trivial Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#5 <- block@6) (tuple_index%0#2) with tuple_index%0#5 in current definition for 1 blocks
debug: Sealing block@3: // for_header_2_L56
debug: Added iteration_count#5 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#5 <- block@6) in block@6: // for_footer_L56
debug: Replacing trivial Phi node: let iteration_count#3: uint64 = φ(iteration_count#5 <- block@6) (iteration_count#3) with iteration_count#5
debug: Deleting Phi assignment: let iteration_count#3: uint64 = φ(iteration_count#5 <- block@6)
debug: Replaced trivial Phi node: let iteration_count#3: uint64 = φ(iteration_count#5 <- block@6) (iteration_count#3) with iteration_count#5 in current definition for 1 blocks
debug: Added item_concat#5 to Phi node: let item_concat#3: bytes = φ(item_concat#5 <- block@6) in block@6: // for_footer_L56
debug: Replacing trivial Phi node: let item_concat#3: bytes = φ(item_concat#5 <- block@6) (item_concat#3) with item_concat#5
debug: Deleting Phi assignment: let item_concat#3: bytes = φ(item_concat#5 <- block@6)
debug: Replaced trivial Phi node: let item_concat#3: bytes = φ(item_concat#5 <- block@6) (item_concat#3) with item_concat#5 in current definition for 1 blocks
debug: Added tuple_index%0#5 to Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#5 <- block@6) in block@6: // for_footer_L56
debug: Replacing trivial Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#5 <- block@6) (tuple_index%0#3) with tuple_index%0#5
debug: Deleting Phi assignment: let tuple_index%0#3: uint64 = φ(tuple_index%0#5 <- block@6)
debug: Replaced trivial Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#5 <- block@6) (tuple_index%0#3) with tuple_index%0#5 in current definition for 1 blocks
debug: Sealing block@4: // for_header_3_L56
debug: Added iteration_count#5 to Phi node: let iteration_count#4: uint64 = φ(iteration_count#5 <- block@6) in block@6: // for_footer_L56
debug: Replacing trivial Phi node: let iteration_count#4: uint64 = φ(iteration_count#5 <- block@6) (iteration_count#4) with iteration_count#5
debug: Deleting Phi assignment: let iteration_count#4: uint64 = φ(iteration_count#5 <- block@6)
debug: Replaced trivial Phi node: let iteration_count#4: uint64 = φ(iteration_count#5 <- block@6) (iteration_count#4) with iteration_count#5 in current definition for 1 blocks
debug: Added item_concat#5 to Phi node: let item_concat#4: bytes = φ(item_concat#5 <- block@6) in block@6: // for_footer_L56
debug: Replacing trivial Phi node: let item_concat#4: bytes = φ(item_concat#5 <- block@6) (item_concat#4) with item_concat#5
debug: Deleting Phi assignment: let item_concat#4: bytes = φ(item_concat#5 <- block@6)
debug: Replaced trivial Phi node: let item_concat#4: bytes = φ(item_concat#5 <- block@6) (item_concat#4) with item_concat#5 in current definition for 1 blocks
debug: Added tuple_index%0#5 to Phi node: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@6) in block@6: // for_footer_L56
debug: Replacing trivial Phi node: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@6) (tuple_index%0#4) with tuple_index%0#5
debug: Deleting Phi assignment: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@6)
debug: Replaced trivial Phi node: let tuple_index%0#4: uint64 = φ(tuple_index%0#5 <- block@6) (tuple_index%0#4) with tuple_index%0#5 in current definition for 1 blocks
debug: Sealing block@None: // after_for_L56
debug: Created Phi assignment: let tup.0#1: bytes = undefined while trying to resolve 'tup.0' in block@5: // for_body_L56
debug: Added tup.0#0 to Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@1) in block@1: // for_header_0_L56
debug: Added tup.0#1 to Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@1, tup.0#1 <- block@2) in block@2: // for_header_1_L56
debug: Added tup.0#1 to Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@1, tup.0#1 <- block@2, tup.0#1 <- block@3) in block@3: // for_header_2_L56
debug: Added tup.0#1 to Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@1, tup.0#1 <- block@2, tup.0#1 <- block@3, tup.0#1 <- block@4) in block@4: // for_header_3_L56
debug: Replacing trivial Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@1, tup.0#1 <- block@2, tup.0#1 <- block@3, tup.0#1 <- block@4) (tup.0#1) with tup.0#0
debug: Deleting Phi assignment: let tup.0#1: bytes = φ(tup.0#0 <- block@1, tup.0#1 <- block@2, tup.0#1 <- block@3, tup.0#1 <- block@4)
debug: Replaced trivial Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@1, tup.0#1 <- block@2, tup.0#1 <- block@3, tup.0#1 <- block@4) (tup.0#1) with tup.0#0 in current definition for 5 blocks
debug: Created Phi assignment: let tup.1#1: bytes = undefined while trying to resolve 'tup.1' in block@5: // for_body_L56
debug: Added tup.1#0 to Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@1) in block@1: // for_header_0_L56
debug: Added tup.1#1 to Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@1, tup.1#1 <- block@2) in block@2: // for_header_1_L56
debug: Added tup.1#1 to Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@1, tup.1#1 <- block@2, tup.1#1 <- block@3) in block@3: // for_header_2_L56
debug: Added tup.1#1 to Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@1, tup.1#1 <- block@2, tup.1#1 <- block@3, tup.1#1 <- block@4) in block@4: // for_header_3_L56
debug: Replacing trivial Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@1, tup.1#1 <- block@2, tup.1#1 <- block@3, tup.1#1 <- block@4) (tup.1#1) with tup.1#0
debug: Deleting Phi assignment: let tup.1#1: bytes = φ(tup.1#0 <- block@1, tup.1#1 <- block@2, tup.1#1 <- block@3, tup.1#1 <- block@4)
debug: Replaced trivial Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@1, tup.1#1 <- block@2, tup.1#1 <- block@3, tup.1#1 <- block@4) (tup.1#1) with tup.1#0 in current definition for 5 blocks
debug: Created Phi assignment: let tup.2#1: bytes = undefined while trying to resolve 'tup.2' in block@5: // for_body_L56
debug: Added tup.2#0 to Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@1) in block@1: // for_header_0_L56
debug: Added tup.2#1 to Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@1, tup.2#1 <- block@2) in block@2: // for_header_1_L56
debug: Added tup.2#1 to Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@1, tup.2#1 <- block@2, tup.2#1 <- block@3) in block@3: // for_header_2_L56
debug: Added tup.2#1 to Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@1, tup.2#1 <- block@2, tup.2#1 <- block@3, tup.2#1 <- block@4) in block@4: // for_header_3_L56
debug: Replacing trivial Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@1, tup.2#1 <- block@2, tup.2#1 <- block@3, tup.2#1 <- block@4) (tup.2#1) with tup.2#0
debug: Deleting Phi assignment: let tup.2#1: bytes = φ(tup.2#0 <- block@1, tup.2#1 <- block@2, tup.2#1 <- block@3, tup.2#1 <- block@4)
debug: Replaced trivial Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@1, tup.2#1 <- block@2, tup.2#1 <- block@3, tup.2#1 <- block@4) (tup.2#1) with tup.2#0 in current definition for 5 blocks
debug: Created Phi assignment: let tup.3#1: bytes = undefined while trying to resolve 'tup.3' in block@5: // for_body_L56
debug: Added tup.3#0 to Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@1) in block@1: // for_header_0_L56
debug: Added tup.3#1 to Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@1, tup.3#1 <- block@2) in block@2: // for_header_1_L56
debug: Added tup.3#1 to Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@1, tup.3#1 <- block@2, tup.3#1 <- block@3) in block@3: // for_header_2_L56
debug: Added tup.3#1 to Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@1, tup.3#1 <- block@2, tup.3#1 <- block@3, tup.3#1 <- block@4) in block@4: // for_header_3_L56
debug: Replacing trivial Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@1, tup.3#1 <- block@2, tup.3#1 <- block@3, tup.3#1 <- block@4) (tup.3#1) with tup.3#0
debug: Deleting Phi assignment: let tup.3#1: bytes = φ(tup.3#0 <- block@1, tup.3#1 <- block@2, tup.3#1 <- block@3, tup.3#1 <- block@4)
debug: Replaced trivial Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@1, tup.3#1 <- block@2, tup.3#1 <- block@3, tup.3#1 <- block@4) (tup.3#1) with tup.3#0 in current definition for 5 blocks
debug: Terminated block@7: // after_for_L56
debug: Sealing block@8: // for_header_0_L59
debug: Terminated block@8: // for_header_0_L59
debug: Terminated block@9: // for_header_1_L59
debug: Terminated block@10: // for_header_2_L59
debug: Terminated block@11: // for_header_3_L59
debug: Sealing block@None: // for_body_L59
debug: Created Phi assignment: let tuple_index%1#1: uint64 = undefined while trying to resolve 'tuple_index%1' in block@12: // for_body_L59
debug: Added tuple_index%1#0 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#0 <- block@8) in block@8: // for_header_0_L59
debug: Looking for 'tuple_index%1' in an unsealed block creating an incomplete Phi: block@9: // for_header_1_L59
debug: Created Phi assignment: let tuple_index%1#2: uint64 = undefined while trying to resolve 'tuple_index%1' in block@9: // for_header_1_L59
debug: Added tuple_index%1#2 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#0 <- block@8, tuple_index%1#2 <- block@9) in block@9: // for_header_1_L59
debug: Looking for 'tuple_index%1' in an unsealed block creating an incomplete Phi: block@10: // for_header_2_L59
debug: Created Phi assignment: let tuple_index%1#3: uint64 = undefined while trying to resolve 'tuple_index%1' in block@10: // for_header_2_L59
debug: Added tuple_index%1#3 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#0 <- block@8, tuple_index%1#2 <- block@9, tuple_index%1#3 <- block@10) in block@10: // for_header_2_L59
debug: Looking for 'tuple_index%1' in an unsealed block creating an incomplete Phi: block@11: // for_header_3_L59
debug: Created Phi assignment: let tuple_index%1#4: uint64 = undefined while trying to resolve 'tuple_index%1' in block@11: // for_header_3_L59
debug: Added tuple_index%1#4 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#0 <- block@8, tuple_index%1#2 <- block@9, tuple_index%1#3 <- block@10, tuple_index%1#4 <- block@11) in block@11: // for_header_3_L59
debug: Created Phi assignment: let iteration_count#6: uint64 = undefined while trying to resolve 'iteration_count' in block@12: // for_body_L59
debug: Added iteration_count#5 to Phi node: let iteration_count#6: uint64 = φ(iteration_count#5 <- block@8) in block@8: // for_header_0_L59
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@9: // for_header_1_L59
debug: Created Phi assignment: let iteration_count#7: uint64 = undefined while trying to resolve 'iteration_count' in block@9: // for_header_1_L59
debug: Added iteration_count#7 to Phi node: let iteration_count#6: uint64 = φ(iteration_count#5 <- block@8, iteration_count#7 <- block@9) in block@9: // for_header_1_L59
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@10: // for_header_2_L59
debug: Created Phi assignment: let iteration_count#8: uint64 = undefined while trying to resolve 'iteration_count' in block@10: // for_header_2_L59
debug: Added iteration_count#8 to Phi node: let iteration_count#6: uint64 = φ(iteration_count#5 <- block@8, iteration_count#7 <- block@9, iteration_count#8 <- block@10) in block@10: // for_header_2_L59
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@11: // for_header_3_L59
debug: Created Phi assignment: let iteration_count#9: uint64 = undefined while trying to resolve 'iteration_count' in block@11: // for_header_3_L59
debug: Added iteration_count#9 to Phi node: let iteration_count#6: uint64 = φ(iteration_count#5 <- block@8, iteration_count#7 <- block@9, iteration_count#8 <- block@10, iteration_count#9 <- block@11) in block@11: // for_header_3_L59
debug: Created Phi assignment: let item_concat#6: bytes = undefined while trying to resolve 'item_concat' in block@12: // for_body_L59
debug: Added item_concat#5 to Phi node: let item_concat#6: bytes = φ(item_concat#5 <- block@8) in block@8: // for_header_0_L59
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@9: // for_header_1_L59
debug: Created Phi assignment: let item_concat#7: bytes = undefined while trying to resolve 'item_concat' in block@9: // for_header_1_L59
debug: Added item_concat#7 to Phi node: let item_concat#6: bytes = φ(item_concat#5 <- block@8, item_concat#7 <- block@9) in block@9: // for_header_1_L59
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@10: // for_header_2_L59
debug: Created Phi assignment: let item_concat#8: bytes = undefined while trying to resolve 'item_concat' in block@10: // for_header_2_L59
debug: Added item_concat#8 to Phi node: let item_concat#6: bytes = φ(item_concat#5 <- block@8, item_concat#7 <- block@9, item_concat#8 <- block@10) in block@10: // for_header_2_L59
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@11: // for_header_3_L59
debug: Created Phi assignment: let item_concat#9: bytes = undefined while trying to resolve 'item_concat' in block@11: // for_header_3_L59
debug: Added item_concat#9 to Phi node: let item_concat#6: bytes = φ(item_concat#5 <- block@8, item_concat#7 <- block@9, item_concat#8 <- block@10, item_concat#9 <- block@11) in block@11: // for_header_3_L59
debug: Created Phi assignment: let item#9: bytes = undefined while trying to resolve 'item' in block@12: // for_body_L59
debug: Added item#5 to Phi node: let item#9: bytes = φ(item#5 <- block@8) in block@8: // for_header_0_L59
debug: Added item#6 to Phi node: let item#9: bytes = φ(item#5 <- block@8, item#6 <- block@9) in block@9: // for_header_1_L59
debug: Added item#7 to Phi node: let item#9: bytes = φ(item#5 <- block@8, item#6 <- block@9, item#7 <- block@10) in block@10: // for_header_2_L59
debug: Added item#8 to Phi node: let item#9: bytes = φ(item#5 <- block@8, item#6 <- block@9, item#7 <- block@10, item#8 <- block@11) in block@11: // for_header_3_L59
debug: Created Phi assignment: let index_sum#1: uint64 = undefined while trying to resolve 'index_sum' in block@12: // for_body_L59
debug: Created Phi assignment: let index_sum#2: uint64 = undefined while trying to resolve 'index_sum' in block@5: // for_body_L56
debug: Added index_sum#0 to Phi node: let index_sum#2: uint64 = φ(index_sum#0 <- block@1) in block@1: // for_header_0_L56
debug: Added index_sum#2 to Phi node: let index_sum#2: uint64 = φ(index_sum#0 <- block@1, index_sum#2 <- block@2) in block@2: // for_header_1_L56
debug: Added index_sum#2 to Phi node: let index_sum#2: uint64 = φ(index_sum#0 <- block@1, index_sum#2 <- block@2, index_sum#2 <- block@3) in block@3: // for_header_2_L56
debug: Added index_sum#2 to Phi node: let index_sum#2: uint64 = φ(index_sum#0 <- block@1, index_sum#2 <- block@2, index_sum#2 <- block@3, index_sum#2 <- block@4) in block@4: // for_header_3_L56
debug: Replacing trivial Phi node: let index_sum#2: uint64 = φ(index_sum#0 <- block@1, index_sum#2 <- block@2, index_sum#2 <- block@3, index_sum#2 <- block@4) (index_sum#2) with index_sum#0
debug: Deleting Phi assignment: let index_sum#2: uint64 = φ(index_sum#0 <- block@1, index_sum#2 <- block@2, index_sum#2 <- block@3, index_sum#2 <- block@4)
debug: Replaced trivial Phi node: let index_sum#2: uint64 = φ(index_sum#0 <- block@1, index_sum#2 <- block@2, index_sum#2 <- block@3, index_sum#2 <- block@4) (index_sum#2) with index_sum#0 in current definition for 5 blocks
debug: Added index_sum#0 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@8) in block@8: // for_header_0_L59
debug: Looking for 'index_sum' in an unsealed block creating an incomplete Phi: block@9: // for_header_1_L59
debug: Created Phi assignment: let index_sum#3: uint64 = undefined while trying to resolve 'index_sum' in block@9: // for_header_1_L59
debug: Added index_sum#3 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@8, index_sum#3 <- block@9) in block@9: // for_header_1_L59
debug: Looking for 'index_sum' in an unsealed block creating an incomplete Phi: block@10: // for_header_2_L59
debug: Created Phi assignment: let index_sum#4: uint64 = undefined while trying to resolve 'index_sum' in block@10: // for_header_2_L59
debug: Added index_sum#4 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@8, index_sum#3 <- block@9, index_sum#4 <- block@10) in block@10: // for_header_2_L59
debug: Looking for 'index_sum' in an unsealed block creating an incomplete Phi: block@11: // for_header_3_L59
debug: Created Phi assignment: let index_sum#5: uint64 = undefined while trying to resolve 'index_sum' in block@11: // for_header_3_L59
debug: Added index_sum#5 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@8, index_sum#3 <- block@9, index_sum#4 <- block@10, index_sum#5 <- block@11) in block@11: // for_header_3_L59
debug: Terminated block@12: // for_body_L59
debug: Sealing block@13: // for_footer_L59
debug: Terminated block@13: // for_footer_L59
debug: Sealing block@9: // for_header_1_L59
debug: Added tuple_index%1#5 to Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#5 <- block@13) in block@13: // for_footer_L59
debug: Replacing trivial Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#5 <- block@13) (tuple_index%1#2) with tuple_index%1#5
debug: Deleting Phi assignment: let tuple_index%1#2: uint64 = φ(tuple_index%1#5 <- block@13)
debug: Replaced trivial Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#5 <- block@13) (tuple_index%1#2) with tuple_index%1#5 in current definition for 1 blocks
debug: Added iteration_count#10 to Phi node: let iteration_count#7: uint64 = φ(iteration_count#10 <- block@13) in block@13: // for_footer_L59
debug: Replacing trivial Phi node: let iteration_count#7: uint64 = φ(iteration_count#10 <- block@13) (iteration_count#7) with iteration_count#10
debug: Deleting Phi assignment: let iteration_count#7: uint64 = φ(iteration_count#10 <- block@13)
debug: Replaced trivial Phi node: let iteration_count#7: uint64 = φ(iteration_count#10 <- block@13) (iteration_count#7) with iteration_count#10 in current definition for 1 blocks
debug: Added item_concat#10 to Phi node: let item_concat#7: bytes = φ(item_concat#10 <- block@13) in block@13: // for_footer_L59
debug: Replacing trivial Phi node: let item_concat#7: bytes = φ(item_concat#10 <- block@13) (item_concat#7) with item_concat#10
debug: Deleting Phi assignment: let item_concat#7: bytes = φ(item_concat#10 <- block@13)
debug: Replaced trivial Phi node: let item_concat#7: bytes = φ(item_concat#10 <- block@13) (item_concat#7) with item_concat#10 in current definition for 1 blocks
debug: Added index_sum#6 to Phi node: let index_sum#3: uint64 = φ(index_sum#6 <- block@13) in block@13: // for_footer_L59
debug: Replacing trivial Phi node: let index_sum#3: uint64 = φ(index_sum#6 <- block@13) (index_sum#3) with index_sum#6
debug: Deleting Phi assignment: let index_sum#3: uint64 = φ(index_sum#6 <- block@13)
debug: Replaced trivial Phi node: let index_sum#3: uint64 = φ(index_sum#6 <- block@13) (index_sum#3) with index_sum#6 in current definition for 1 blocks
debug: Sealing block@10: // for_header_2_L59
debug: Added tuple_index%1#5 to Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#5 <- block@13) in block@13: // for_footer_L59
debug: Replacing trivial Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#5 <- block@13) (tuple_index%1#3) with tuple_index%1#5
debug: Deleting Phi assignment: let tuple_index%1#3: uint64 = φ(tuple_index%1#5 <- block@13)
debug: Replaced trivial Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#5 <- block@13) (tuple_index%1#3) with tuple_index%1#5 in current definition for 1 blocks
debug: Added iteration_count#10 to Phi node: let iteration_count#8: uint64 = φ(iteration_count#10 <- block@13) in block@13: // for_footer_L59
debug: Replacing trivial Phi node: let iteration_count#8: uint64 = φ(iteration_count#10 <- block@13) (iteration_count#8) with iteration_count#10
debug: Deleting Phi assignment: let iteration_count#8: uint64 = φ(iteration_count#10 <- block@13)
debug: Replaced trivial Phi node: let iteration_count#8: uint64 = φ(iteration_count#10 <- block@13) (iteration_count#8) with iteration_count#10 in current definition for 1 blocks
debug: Added item_concat#10 to Phi node: let item_concat#8: bytes = φ(item_concat#10 <- block@13) in block@13: // for_footer_L59
debug: Replacing trivial Phi node: let item_concat#8: bytes = φ(item_concat#10 <- block@13) (item_concat#8) with item_concat#10
debug: Deleting Phi assignment: let item_concat#8: bytes = φ(item_concat#10 <- block@13)
debug: Replaced trivial Phi node: let item_concat#8: bytes = φ(item_concat#10 <- block@13) (item_concat#8) with item_concat#10 in current definition for 1 blocks
debug: Added index_sum#6 to Phi node: let index_sum#4: uint64 = φ(index_sum#6 <- block@13) in block@13: // for_footer_L59
debug: Replacing trivial Phi node: let index_sum#4: uint64 = φ(index_sum#6 <- block@13) (index_sum#4) with index_sum#6
debug: Deleting Phi assignment: let index_sum#4: uint64 = φ(index_sum#6 <- block@13)
debug: Replaced trivial Phi node: let index_sum#4: uint64 = φ(index_sum#6 <- block@13) (index_sum#4) with index_sum#6 in current definition for 1 blocks
debug: Sealing block@11: // for_header_3_L59
debug: Added tuple_index%1#5 to Phi node: let tuple_index%1#4: uint64 = φ(tuple_index%1#5 <- block@13) in block@13: // for_footer_L59
debug: Replacing trivial Phi node: let tuple_index%1#4: uint64 = φ(tuple_index%1#5 <- block@13) (tuple_index%1#4) with tuple_index%1#5
debug: Deleting Phi assignment: let tuple_index%1#4: uint64 = φ(tuple_index%1#5 <- block@13)
debug: Replaced trivial Phi node: let tuple_index%1#4: uint64 = φ(tuple_index%1#5 <- block@13) (tuple_index%1#4) with tuple_index%1#5 in current definition for 1 blocks
debug: Added iteration_count#10 to Phi node: let iteration_count#9: uint64 = φ(iteration_count#10 <- block@13) in block@13: // for_footer_L59
debug: Replacing trivial Phi node: let iteration_count#9: uint64 = φ(iteration_count#10 <- block@13) (iteration_count#9) with iteration_count#10
debug: Deleting Phi assignment: let iteration_count#9: uint64 = φ(iteration_count#10 <- block@13)
debug: Replaced trivial Phi node: let iteration_count#9: uint64 = φ(iteration_count#10 <- block@13) (iteration_count#9) with iteration_count#10 in current definition for 1 blocks
debug: Added item_concat#10 to Phi node: let item_concat#9: bytes = φ(item_concat#10 <- block@13) in block@13: // for_footer_L59
debug: Replacing trivial Phi node: let item_concat#9: bytes = φ(item_concat#10 <- block@13) (item_concat#9) with item_concat#10
debug: Deleting Phi assignment: let item_concat#9: bytes = φ(item_concat#10 <- block@13)
debug: Replaced trivial Phi node: let item_concat#9: bytes = φ(item_concat#10 <- block@13) (item_concat#9) with item_concat#10 in current definition for 1 blocks
debug: Added index_sum#6 to Phi node: let index_sum#5: uint64 = φ(index_sum#6 <- block@13) in block@13: // for_footer_L59
debug: Replacing trivial Phi node: let index_sum#5: uint64 = φ(index_sum#6 <- block@13) (index_sum#5) with index_sum#6
debug: Deleting Phi assignment: let index_sum#5: uint64 = φ(index_sum#6 <- block@13)
debug: Replaced trivial Phi node: let index_sum#5: uint64 = φ(index_sum#6 <- block@13) (index_sum#5) with index_sum#6 in current definition for 1 blocks
debug: Sealing block@None: // after_for_L59
debug: Terminated block@14: // after_for_L59
debug: Sealing block@0: // L67
debug: Terminated block@0: // L67
debug: Looking for 'item_index_internal%1' in an unsealed block creating an incomplete Phi: block@1: // for_header_L73
debug: Created Phi assignment: let item_index_internal%1#1: uint64 = undefined while trying to resolve 'item_index_internal%1' in block@1: // for_header_L73
debug: Terminated block@1: // for_header_L73
debug: Sealing block@None: // for_body_L73
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@1: // for_header_L73
debug: Created Phi assignment: let iteration_count#1: uint64 = undefined while trying to resolve 'iteration_count' in block@1: // for_header_L73
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@1: // for_header_L73
debug: Created Phi assignment: let item_concat#1: bytes = undefined while trying to resolve 'item_concat' in block@1: // for_header_L73
debug: Terminated block@2: // for_body_L73
debug: Sealing block@3: // for_footer_L73
debug: Sealing block@None: // after_for_L73
debug: Terminated block@3: // for_footer_L73
debug: Sealing block@1: // for_header_L73
debug: Added item_index_internal%1#0 to Phi node: let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@0) in block@0: // L67
debug: Added item_index_internal%1#2 to Phi node: let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@0, item_index_internal%1#2 <- block@3) in block@3: // for_footer_L73
debug: Added iteration_count#0 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0) in block@0: // L67
debug: Added iteration_count#2 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3) in block@3: // for_footer_L73
debug: Added item_concat#0 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0) in block@0: // L67
debug: Added item_concat#2 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0, item_concat#2 <- block@3) in block@3: // for_footer_L73
debug: Created Phi assignment: let bytes_#1: bytes = undefined while trying to resolve 'bytes_' in block@1: // for_header_L73
debug: Added bytes_#0 to Phi node: let bytes_#1: bytes = φ(bytes_#0 <- block@0) in block@0: // L67
debug: Added bytes_#1 to Phi node: let bytes_#1: bytes = φ(bytes_#0 <- block@0, bytes_#1 <- block@3) in block@3: // for_footer_L73
debug: Replacing trivial Phi node: let bytes_#1: bytes = φ(bytes_#0 <- block@0, bytes_#1 <- block@3) (bytes_#1) with bytes_#0
debug: Deleting Phi assignment: let bytes_#1: bytes = φ(bytes_#0 <- block@0, bytes_#1 <- block@3)
debug: Replaced trivial Phi node: let bytes_#1: bytes = φ(bytes_#0 <- block@0, bytes_#1 <- block@3) (bytes_#1) with bytes_#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L73
debug: Looking for 'item_index_internal%5' in an unsealed block creating an incomplete Phi: block@5: // for_header_L76
debug: Created Phi assignment: let item_index_internal%5#1: uint64 = undefined while trying to resolve 'item_index_internal%5' in block@5: // for_header_L76
debug: Terminated block@5: // for_header_L76
debug: Sealing block@None: // for_body_L76
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@5: // for_header_L76
debug: Created Phi assignment: let iteration_count#3: uint64 = undefined while trying to resolve 'iteration_count' in block@5: // for_header_L76
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@5: // for_header_L76
debug: Created Phi assignment: let item_concat#3: bytes = undefined while trying to resolve 'item_concat' in block@5: // for_header_L76
debug: Looking for 'index_sum' in an unsealed block creating an incomplete Phi: block@5: // for_header_L76
debug: Created Phi assignment: let index_sum#1: uint64 = undefined while trying to resolve 'index_sum' in block@5: // for_header_L76
debug: Terminated block@6: // for_body_L76
debug: Sealing block@7: // for_footer_L76
debug: Sealing block@None: // after_for_L76
debug: Terminated block@7: // for_footer_L76
debug: Sealing block@5: // for_header_L76
debug: Added item_index_internal%5#0 to Phi node: let item_index_internal%5#1: uint64 = φ(item_index_internal%5#0 <- block@4) in block@4: // after_for_L73
debug: Added item_index_internal%5#2 to Phi node: let item_index_internal%5#1: uint64 = φ(item_index_internal%5#0 <- block@4, item_index_internal%5#2 <- block@7) in block@7: // for_footer_L76
debug: Added iteration_count#1 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#1 <- block@4) in block@4: // after_for_L73
debug: Added iteration_count#4 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#1 <- block@4, iteration_count#4 <- block@7) in block@7: // for_footer_L76
debug: Added item_concat#1 to Phi node: let item_concat#3: bytes = φ(item_concat#1 <- block@4) in block@4: // after_for_L73
debug: Added item_concat#4 to Phi node: let item_concat#3: bytes = φ(item_concat#1 <- block@4, item_concat#4 <- block@7) in block@7: // for_footer_L76
debug: Created Phi assignment: let index_sum#3: uint64 = undefined while trying to resolve 'index_sum' in block@1: // for_header_L73
debug: Added index_sum#0 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0) in block@0: // L67
debug: Added index_sum#3 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) in block@3: // for_footer_L73
debug: Replacing trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) (index_sum#3) with index_sum#0
debug: Deleting Phi assignment: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3)
debug: Replaced trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) (index_sum#3) with index_sum#0 in current definition for 3 blocks
debug: Added index_sum#0 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@4) in block@4: // after_for_L73
debug: Added index_sum#2 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@4, index_sum#2 <- block@7) in block@7: // for_footer_L76
debug: Terminated block@8: // after_for_L76
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L28
debug: Terminated block@0: // L28
debug: Output IR to enumeration/out/EnumerationContract.ssa.ir
info: Optimizing test_cases.enumeration.contract.EnumerationContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%0#0, iteration_count#0
debug: Replacing {tuple_assignment%0#0} with iteration_count#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%1#0, item_sum#0
debug: Replacing {tuple_assignment%1#0} with item_sum#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%2#0, index_sum#0
debug: Replacing {tuple_assignment%2#0} with index_sum#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%6#0, iteration_count#1
debug: Replacing {tuple_assignment%6#0} with iteration_count#1 made 1 modifications
debug: Found equivalence set: tuple_assignment%7#0, item_concat#0
debug: Replacing {tuple_assignment%7#0} with item_concat#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%8#0, index_sum#1
debug: Replacing {tuple_assignment%8#0} with index_sum#1 made 1 modifications
debug: Found equivalence set: tuple_assignment%12#0, iteration_count#2
debug: Replacing {tuple_assignment%12#0} with iteration_count#2 made 1 modifications
debug: Found equivalence set: tuple_assignment%13#0, item_concat#1
debug: Replacing {tuple_assignment%13#0} with item_concat#1 made 1 modifications
debug: Found equivalence set: tuple_assignment%14#0, index_sum#2
debug: Replacing {tuple_assignment%14#0} with index_sum#2 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_urange
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: start#0, range_item%0#0, range_item%2#0
debug: Replacing {range_item%0#0, range_item%2#0} with start#0 made 2 modifications
debug: Found equivalence set: range_item%0#1, item#0
debug: Replacing {range_item%0#1} with item#0 made 3 modifications
debug: Found equivalence set: range_item%2#1, item#1
debug: Replacing {range_item%2#1} with item#1 made 3 modifications
debug: Found equivalence set: range_index%3#3, index#0
debug: Replacing {range_index%3#3} with index#0 made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // for_footer_L38 with block@2: // for_body_L38 in block@4: // for_increment_L38
debug: Merged linear block@3: // for_footer_L38 into block@2: // for_body_L38
debug: Replaced predecessor block@4: // for_increment_L38 with block@2: // for_body_L38 in block@1: // for_header_L38
debug: Merged linear block@4: // for_increment_L38 into block@2: // for_body_L38
debug: Replaced predecessor block@8: // for_footer_L42 with block@7: // for_body_L42 in block@9: // for_increment_L42
debug: Merged linear block@8: // for_footer_L42 into block@7: // for_body_L42
debug: Replaced predecessor block@9: // for_increment_L42 with block@7: // for_body_L42 in block@6: // for_header_L42
debug: Merged linear block@9: // for_increment_L42 into block@7: // for_body_L42
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Removing redundant assert of step#0
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_tuple
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tup.0#0, item#0, item#5
debug: Replacing {item#0, item#5} with tup.0#0 made 2 modifications
debug: Found equivalence set: tup.1#0, item#1, item#6
debug: Replacing {item#1, item#6} with tup.1#0 made 2 modifications
debug: Found equivalence set: tup.2#0, item#2, item#7
debug: Replacing {item#2, item#7} with tup.2#0 made 2 modifications
debug: Found equivalence set: tup.3#0, item#3, item#8
debug: Replacing {item#3, item#8} with tup.3#0 made 2 modifications
debug: Found equivalence set: tuple_index%1#1, index#0
debug: Replacing {tuple_index%1#1} with index#0 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: adding block@6: // for_footer_L56 as a predecessor of block@8: // for_header_0_L59 due to inlining of block@7: // after_for_L56
debug: simplified terminator of block@6: // for_footer_L56 from goto_nth [block@2, block@3, block@4][tuple_index%0#1] else goto block@7 to goto_nth [block@2, block@3, block@4][tuple_index%0#1] else goto block@8
debug: simplified terminator of block@13: // for_footer_L59 from goto_nth [block@9, block@10, block@11][index#0] else goto block@14 to goto_nth [block@9, block@10, block@11][index#0] else return iteration_count#10 item_concat#10 index_sum#6
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // for_header_0_L56 with block@0: // L50 in block@5: // for_body_L56
debug: Merged linear block@1: // for_header_0_L56 into block@0: // L50
debug: Replaced predecessor block@6: // for_footer_L56 with block@5: // for_body_L56 in block@2: // for_header_1_L56
debug: Replaced predecessor block@6: // for_footer_L56 with block@5: // for_body_L56 in block@3: // for_header_2_L56
debug: Replaced predecessor block@6: // for_footer_L56 with block@5: // for_body_L56 in block@4: // for_header_3_L56
debug: Replaced predecessor block@6: // for_footer_L56 with block@5: // for_body_L56 in block@8: // for_header_0_L59
debug: Merged linear block@6: // for_footer_L56 into block@5: // for_body_L56
debug: Replaced predecessor block@13: // for_footer_L59 with block@12: // for_body_L59 in block@9: // for_header_1_L59
debug: Replaced predecessor block@13: // for_footer_L59 with block@12: // for_body_L59 in block@10: // for_header_2_L59
debug: Replaced predecessor block@13: // for_footer_L59 with block@12: // for_body_L59 in block@11: // for_header_3_L59
debug: Merged linear block@13: // for_footer_L59 into block@12: // for_body_L59
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // for_header_1_L56 because it's used by phi nodes
debug: Not removing empty block block@3: // for_header_2_L56 because it's used by phi nodes
debug: Not removing empty block block@4: // for_header_3_L56 because it's used by phi nodes
debug: Removed empty block: block@7: // after_for_L56
debug: Not removing empty block block@9: // for_header_1_L59 because it's used by phi nodes
debug: Not removing empty block block@10: // for_header_2_L59 because it's used by phi nodes
debug: Not removing empty block block@11: // for_header_3_L59 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@14: // after_for_L59
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_bytes
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: bytes_length%0#0, reverse_index_internal%2#0
debug: Found equivalence set: bytes_length%4#0, reverse_index_internal%6#0
debug: Found equivalence set: item_index_internal%5#1, index#0
debug: Replacing {item_index_internal%5#1} with index#0 made 4 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // for_footer_L73 with block@2: // for_body_L73 in block@1: // for_header_L73
debug: Merged linear block@3: // for_footer_L73 into block@2: // for_body_L73
debug: Replaced predecessor block@7: // for_footer_L76 with block@6: // for_body_L76 in block@5: // for_header_L76
debug: Merged linear block@7: // for_footer_L76 into block@6: // for_body_L76
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let bytes_length%4#0: uint64 = (len bytes_#0) with copy of existing registers [Register(atype=uint64, name='bytes_length%0', version=0, source_location=enumeration/contract.py:73)]
debug: Found equivalence set: bytes_length%0#0, bytes_length%4#0
debug: Replacing {bytes_length%4#0} with bytes_length%0#0 made 1 modifications
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to enumeration/out/EnumerationContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_urange
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_tuple
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // for_header_1_L56 because it's used by phi nodes
debug: Not removing empty block block@3: // for_header_2_L56 because it's used by phi nodes
debug: Not removing empty block block@4: // for_header_3_L56 because it's used by phi nodes
debug: Not removing empty block block@9: // for_header_1_L59 because it's used by phi nodes
debug: Not removing empty block block@10: // for_header_2_L59 because it's used by phi nodes
debug: Not removing empty block block@11: // for_header_3_L59 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_bytes
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 2, ending loop
debug: Removing Phis from test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Removing Phis from test_cases.enumeration.contract.enumerate_urange
debug: Removing Phis from test_cases.enumeration.contract.enumerate_tuple
debug: Removing Phis from test_cases.enumeration.contract.enumerate_bytes
debug: Removing Phis from test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Coalescing local variables in test_cases.enumeration.contract.EnumerationContract.approval_program using strategy RootOperandGrouping
debug: Coalescing iteration_count#0 with [iteration_count#1, iteration_count#2]
debug: Coalescing index_sum#0 with [index_sum#1, index_sum#2]
debug: Coalescing item_concat#0 with [item_concat#1]
debug: Coalescing resulted in 10 replacement/s
debug: Coalescing local variables in test_cases.enumeration.contract.enumerate_urange using strategy RootOperandGrouping
debug: Coalescing iteration_count#0 with [iteration_count#9, iteration_count#3, iteration_count#2, iteration_count#12, iteration_count#6, iteration_count#5]
debug: Coalescing item_sum#0 with [item_sum#9, item_sum#3, item_sum#2, item_sum#12, item_sum#6, item_sum#5]
debug: Coalescing index_sum#0 with [index_sum#6, index_sum#3, index_sum#2]
debug: Coalescing item#0 with [item#2, item#3, item#1]
debug: Coalescing range_index%3#0 with [range_index%3#2]
debug: Coalescing index#0 with [index#1]
debug: Coalescing resulted in 55 replacement/s
debug: Coalescing local variables in test_cases.enumeration.contract.enumerate_tuple using strategy RootOperandGrouping
debug: Coalescing iteration_count#0 with [iteration_count#15, iteration_count#1, iteration_count#5, iteration_count#20, iteration_count#6, iteration_count#10]
debug: Coalescing item_concat#0 with [item_concat#15, item_concat#1, item_concat#5, item_concat#20, item_concat#6, item_concat#10]
debug: Coalescing index_sum#0 with [index_sum#11, index_sum#1, index_sum#6]
debug: Coalescing tuple_index%0#0 with [tuple_index%0#10, tuple_index%0#1]
debug: Coalescing item#4 with [item#10, item#11, item#9]
debug: Coalescing tuple_index%1#0 with [tuple_index%1#5]
debug: Coalescing index#0 with [index#1]
debug: Coalescing resulted in 89 replacement/s
debug: Coalescing local variables in test_cases.enumeration.contract.enumerate_bytes using strategy RootOperandGrouping
debug: Coalescing iteration_count#0 with [iteration_count#7, iteration_count#1, iteration_count#2, iteration_count#10, iteration_count#3, iteration_count#4]
debug: Coalescing item_concat#0 with [item_concat#7, item_concat#1, item_concat#2, item_concat#10, item_concat#3, item_concat#4]
debug: Coalescing index_sum#0 with [index_sum#5, index_sum#1, index_sum#2]
debug: Coalescing item_index_internal%1#0 with [item_index_internal%1#5, item_index_internal%1#1, item_index_internal%1#2]
debug: Coalescing item#0 with [item#1]
debug: Coalescing item_index_internal%5#0 with [item_index_internal%5#2]
debug: Coalescing index#0 with [index#1]
debug: Coalescing resulted in 56 replacement/s
debug: Coalescing local variables in test_cases.enumeration.contract.EnumerationContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Sequentializing parallel copies in test_cases.enumeration.contract.enumerate_urange
debug: loc: {item#0=None, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, start#0=start#0}
debug: pred: {item#0=start#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0}
debug: ready: item#0
debug: to_do: item#0, iteration_count#0, item_sum#0
debug: * avail item#0
debug: * avail start#0
debug: * to_do item_sum#0
debug: * to_do iteration_count#0
debug: * to_do item#0
debug: loc: {item#0=item#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0}
debug: pred: {item#0=item#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0}
debug: ready: 
debug: to_do: item#0, iteration_count#0, item_sum#0
debug: * to_do item_sum#0
debug: * to_do iteration_count#0
debug: * to_do item#0
debug: loc: {item#0=None, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, range_item%0#3=range_item%0#3}
debug: pred: {item#0=range_item%0#3, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0}
debug: ready: item#0
debug: to_do: item#0, iteration_count#0, item_sum#0
debug: * avail item#0
debug: * avail range_item%0#3
debug: * to_do item_sum#0
debug: * to_do iteration_count#0
debug: * to_do item#0
debug: loc: {item#0=None, index#0=None, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, index_sum#0=index_sum#0, start#0=start#0, range_index%3#0=range_index%3#0}
debug: pred: {item#0=start#0, index#0=range_index%3#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, index_sum#0=index_sum#0}
debug: ready: item#0, index#0
debug: to_do: item#0, index#0, iteration_count#0, item_sum#0, index_sum#0
debug: * avail index#0
debug: * avail range_index%3#0
debug: * avail item#0
debug: * avail start#0
debug: * to_do index_sum#0
debug: * to_do item_sum#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: * to_do item#0
debug: loc: {item#0=item#0, index#0=index#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, index_sum#0=index_sum#0}
debug: pred: {item#0=item#0, index#0=index#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, index_sum#0=index_sum#0}
debug: ready: 
debug: to_do: item#0, index#0, iteration_count#0, item_sum#0, index_sum#0
debug: * to_do index_sum#0
debug: * to_do item_sum#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: * to_do item#0
debug: loc: {item#0=None, index#0=None, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, index_sum#0=index_sum#0, range_item%2#3=range_item%2#3, range_index%3#0=range_index%3#0}
debug: pred: {item#0=range_item%2#3, index#0=range_index%3#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, index_sum#0=index_sum#0}
debug: ready: item#0, index#0
debug: to_do: item#0, index#0, iteration_count#0, item_sum#0, index_sum#0
debug: * avail index#0
debug: * avail range_index%3#0
debug: * avail item#0
debug: * avail range_item%2#3
debug: * to_do index_sum#0
debug: * to_do item_sum#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: * to_do item#0
debug: Sequentializing parallel copies in test_cases.enumeration.contract.enumerate_tuple
debug: loc: {iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=None, tuple_index%0#0=tuple_index%0#0, tup.0#0=tup.0#0}
debug: pred: {iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=tup.0#0, tuple_index%0#0=tuple_index%0#0}
debug: ready: item#4
debug: to_do: iteration_count#0, item_concat#0, item#4, tuple_index%0#0
debug: * avail item#4
debug: * avail tup.0#0
debug: * to_do tuple_index%0#0
debug: * to_do item#4
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: loc: {iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=None, tuple_index%0#0=None, tup.1#0=tup.1#0, tuple_index%0#5=tuple_index%0#5}
debug: pred: {iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=tup.1#0, tuple_index%0#0=tuple_index%0#5}
debug: ready: item#4, tuple_index%0#0
debug: to_do: iteration_count#0, item_concat#0, item#4, tuple_index%0#0
debug: * avail tuple_index%0#0
debug: * avail tuple_index%0#5
debug: * avail item#4
debug: * avail tup.1#0
debug: * to_do tuple_index%0#0
debug: * to_do item#4
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: loc: {iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=None, tuple_index%0#0=None, tup.2#0=tup.2#0, tuple_index%0#5=tuple_index%0#5}
debug: pred: {iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=tup.2#0, tuple_index%0#0=tuple_index%0#5}
debug: ready: item#4, tuple_index%0#0
debug: to_do: iteration_count#0, item_concat#0, item#4, tuple_index%0#0
debug: * avail tuple_index%0#0
debug: * avail tuple_index%0#5
debug: * avail item#4
debug: * avail tup.2#0
debug: * to_do tuple_index%0#0
debug: * to_do item#4
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: loc: {iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=None, tuple_index%0#0=None, tup.3#0=tup.3#0, tuple_index%0#5=tuple_index%0#5}
debug: pred: {iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=tup.3#0, tuple_index%0#0=tuple_index%0#5}
debug: ready: item#4, tuple_index%0#0
debug: to_do: iteration_count#0, item_concat#0, item#4, tuple_index%0#0
debug: * avail tuple_index%0#0
debug: * avail tuple_index%0#5
debug: * avail item#4
debug: * avail tup.3#0
debug: * to_do tuple_index%0#0
debug: * to_do item#4
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: loc: {iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=item#4, tuple_index%0#0=tuple_index%0#0}
debug: pred: {iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=item#4, tuple_index%0#0=tuple_index%0#0}
debug: ready: 
debug: to_do: iteration_count#0, item_concat#0, item#4, tuple_index%0#0
debug: * to_do tuple_index%0#0
debug: * to_do item#4
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: loc: {index#0=None, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=None, index_sum#0=index_sum#0, tuple_index%1#0=tuple_index%1#0, tup.0#0=tup.0#0}
debug: pred: {index#0=tuple_index%1#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=tup.0#0, index_sum#0=index_sum#0}
debug: ready: index#0, item#4
debug: to_do: index#0, iteration_count#0, item_concat#0, item#4, index_sum#0
debug: * avail item#4
debug: * avail tup.0#0
debug: * avail index#0
debug: * avail tuple_index%1#0
debug: * to_do index_sum#0
debug: * to_do item#4
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: loc: {index#0=None, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=None, index_sum#0=index_sum#0, tuple_index%1#0=tuple_index%1#0, tup.1#0=tup.1#0}
debug: pred: {index#0=tuple_index%1#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=tup.1#0, index_sum#0=index_sum#0}
debug: ready: index#0, item#4
debug: to_do: index#0, iteration_count#0, item_concat#0, item#4, index_sum#0
debug: * avail item#4
debug: * avail tup.1#0
debug: * avail index#0
debug: * avail tuple_index%1#0
debug: * to_do index_sum#0
debug: * to_do item#4
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: loc: {index#0=None, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=None, index_sum#0=index_sum#0, tuple_index%1#0=tuple_index%1#0, tup.2#0=tup.2#0}
debug: pred: {index#0=tuple_index%1#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=tup.2#0, index_sum#0=index_sum#0}
debug: ready: index#0, item#4
debug: to_do: index#0, iteration_count#0, item_concat#0, item#4, index_sum#0
debug: * avail item#4
debug: * avail tup.2#0
debug: * avail index#0
debug: * avail tuple_index%1#0
debug: * to_do index_sum#0
debug: * to_do item#4
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: loc: {index#0=None, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=None, index_sum#0=index_sum#0, tuple_index%1#0=tuple_index%1#0, tup.3#0=tup.3#0}
debug: pred: {index#0=tuple_index%1#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=tup.3#0, index_sum#0=index_sum#0}
debug: ready: index#0, item#4
debug: to_do: index#0, iteration_count#0, item_concat#0, item#4, index_sum#0
debug: * avail item#4
debug: * avail tup.3#0
debug: * avail index#0
debug: * avail tuple_index%1#0
debug: * to_do index_sum#0
debug: * to_do item#4
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: loc: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=item#4, index_sum#0=index_sum#0}
debug: pred: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#4=item#4, index_sum#0=index_sum#0}
debug: ready: 
debug: to_do: index#0, iteration_count#0, item_concat#0, item#4, index_sum#0
debug: * to_do index_sum#0
debug: * to_do item#4
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: Sequentializing parallel copies in test_cases.enumeration.contract.enumerate_bytes
debug: loc: {item_index_internal%1#0=item_index_internal%1#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0}
debug: pred: {item_index_internal%1#0=item_index_internal%1#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0}
debug: ready: 
debug: to_do: item_index_internal%1#0, iteration_count#0, item_concat#0
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do item_index_internal%1#0
debug: loc: {item_index_internal%1#0=item_index_internal%1#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0}
debug: pred: {item_index_internal%1#0=item_index_internal%1#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0}
debug: ready: 
debug: to_do: item_index_internal%1#0, iteration_count#0, item_concat#0
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do item_index_internal%1#0
debug: loc: {item_index_internal%1#0=item_index_internal%1#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0}
debug: pred: {item_index_internal%1#0=item_index_internal%1#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0}
debug: ready: 
debug: to_do: item_index_internal%1#0, iteration_count#0, item_concat#0
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do item_index_internal%1#0
debug: loc: {index#0=None, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, index_sum#0=index_sum#0, item_index_internal%5#0=item_index_internal%5#0}
debug: pred: {index#0=item_index_internal%5#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, index_sum#0=index_sum#0}
debug: ready: index#0
debug: to_do: index#0, iteration_count#0, item_concat#0, index_sum#0
debug: * avail index#0
debug: * avail item_index_internal%5#0
debug: * to_do index_sum#0
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: loc: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, index_sum#0=index_sum#0}
debug: pred: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, index_sum#0=index_sum#0}
debug: ready: 
debug: to_do: index#0, iteration_count#0, item_concat#0, index_sum#0
debug: * to_do index_sum#0
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: loc: {index#0=None, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, index_sum#0=index_sum#0, item_index_internal%5#0=item_index_internal%5#0}
debug: pred: {index#0=item_index_internal%5#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, index_sum#0=index_sum#0}
debug: ready: index#0
debug: to_do: index#0, iteration_count#0, item_concat#0, index_sum#0
debug: * avail index#0
debug: * avail item_index_internal%5#0
debug: * to_do index_sum#0
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: Sequentializing parallel copies in test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to enumeration/out/EnumerationContract.destructured.ir
debug: Inserted main_block@0.ops[6]: 'store iteration_count#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[8]: 'load iteration_count#0' with 'load iteration_count#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[11]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[13]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[18]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[20]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[25]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[27]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[36]: 'store iteration_count#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[38]: 'load iteration_count#0' with 'load iteration_count#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[41]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[43]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[48]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[50]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[55]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[57]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[63]: 'store iteration_count#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[65]: 'load iteration_count#0' with 'load iteration_count#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[68]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[70]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[75]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[77]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[82]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[84]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[5]: 'store item_sum#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[16]: 'load item_sum#0' with 'load item_sum#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[36]: 'store item_concat#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[47]: 'load item_concat#0' with 'load item_concat#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[64]: 'store item_concat#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[75]: 'load item_concat#0' with 'load item_concat#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[4]: 'store index_sum#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[24]: 'load index_sum#0' with 'load index_sum#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[36]: 'store index_sum#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[56]: 'load index_sum#0' with 'load index_sum#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[65]: 'store index_sum#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[85]: 'load index_sum#0' with 'load index_sum#0 from l-stack (no copy)'
debug: Inserted enumerate_urange_for_header@1.ops[3]: 'store continue_looping%1#0 to l-stack (copy)'
debug: Replaced enumerate_urange_for_header@1.ops[5]: 'load continue_looping%1#0' with 'load continue_looping%1#0 from l-stack (no copy)'
debug: Inserted enumerate_urange_for_body@2.ops[11]: 'store range_item%0#3 to l-stack (copy)'
debug: Replaced enumerate_urange_for_body@2.ops[13]: 'load range_item%0#3' with 'load range_item%0#3 from l-stack (no copy)'
debug: Inserted enumerate_urange_for_body@2.ops[6]: 'store item#0 to l-stack (copy)'
debug: Replaced enumerate_urange_for_body@2.ops[9]: 'load item#0' with 'load item#0 from l-stack (no copy)'
debug: Inserted enumerate_urange_after_for@5.ops[1]: 'store range_index%3#0 to l-stack (copy)'
debug: Replaced enumerate_urange_after_for@5.ops[3]: 'load range_index%3#0' with 'load range_index%3#0 from l-stack (no copy)'
debug: Inserted enumerate_urange_for_header@6.ops[3]: 'store continue_looping%4#0 to l-stack (copy)'
debug: Replaced enumerate_urange_for_header@6.ops[5]: 'load continue_looping%4#0' with 'load continue_looping%4#0 from l-stack (no copy)'
debug: Inserted enumerate_urange_for_body@7.ops[19]: 'store range_index%3#0 to l-stack (copy)'
debug: Replaced enumerate_urange_for_body@7.ops[21]: 'load range_index%3#0' with 'load range_index%3#0 from l-stack (no copy)'
debug: Inserted enumerate_urange_for_body@7.ops[6]: 'store item#0 to l-stack (copy)'
debug: Replaced enumerate_urange_for_body@7.ops[13]: 'load item#0' with 'load item#0 from l-stack (no copy)'
debug: Inserted enumerate_urange_for_body@7.ops[11]: 'store index#0 to l-stack (copy)'
debug: Replaced enumerate_urange_for_body@7.ops[18]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted enumerate_urange_for_body@7.ops[17]: 'store range_item%2#3 to l-stack (copy)'
debug: Replaced enumerate_urange_for_body@7.ops[26]: 'load range_item%2#3' with 'load range_item%2#3 from l-stack (no copy)'
debug: Found 4 edge set/s for test_cases.enumeration.contract.enumerate_urange
debug: test_cases.enumeration.contract.enumerate_urange f-stack entry: ['index#0']
debug: test_cases.enumeration.contract.enumerate_urange f-stack on first store: ['iteration_count#0', 'item_sum#0', 'index_sum#0', 'item#0']
debug: Inserted enumerate_tuple_for_body@5.ops[9]: 'store tuple_index%0#0 to l-stack (copy)'
debug: Replaced enumerate_tuple_for_body@5.ops[13]: 'load tuple_index%0#0' with 'load tuple_index%0#0 from l-stack (no copy)'
debug: Inserted enumerate_tuple_for_header_0@8.ops[1]: 'store tuple_index%1#0 to l-stack (copy)'
debug: Replaced enumerate_tuple_for_header_0@8.ops[5]: 'load tuple_index%1#0' with 'load tuple_index%1#0 from l-stack (no copy)'
debug: Inserted enumerate_tuple_for_body@12.ops[10]: 'store index#0 to l-stack (copy)'
debug: Replaced enumerate_tuple_for_body@12.ops[13]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted enumerate_tuple_for_body@12.ops[14]: 'store index#0 to l-stack (copy)'
debug: Replaced enumerate_tuple_for_body@12.ops[18]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted enumerate_tuple_for_body@12.ops[12]: 'store index_sum#0 to l-stack (copy)'
debug: Replaced enumerate_tuple_for_body@12.ops[23]: 'load index_sum#0' with 'load index_sum#0 from l-stack (no copy)'
debug: Inserted enumerate_tuple_for_body@12.ops[7]: 'store item_concat#0 to l-stack (copy)'
debug: Replaced enumerate_tuple_for_body@12.ops[23]: 'load item_concat#0' with 'load item_concat#0 from l-stack (no copy)'
debug: Inserted enumerate_tuple_for_body@12.ops[3]: 'store iteration_count#0 to l-stack (copy)'
debug: Replaced enumerate_tuple_for_body@12.ops[23]: 'load iteration_count#0' with 'load iteration_count#0 from l-stack (no copy)'
debug: Found 4 edge set/s for test_cases.enumeration.contract.enumerate_tuple
debug: Allocated 2 variable/s to x-stack: item#4, tuple_index%0#0
debug: shared x-stack for enumerate_tuple_block@0 -> enumerate_tuple_for_body@5: item#4, tuple_index%0#0
debug: shared x-stack for enumerate_tuple_for_header_1@2 -> enumerate_tuple_for_body@5: item#4, tuple_index%0#0
debug: shared x-stack for enumerate_tuple_for_header_2@3 -> enumerate_tuple_for_body@5: item#4, tuple_index%0#0
debug: shared x-stack for enumerate_tuple_for_header_3@4 -> enumerate_tuple_for_body@5: item#4, tuple_index%0#0
debug: shared x-stack for enumerate_tuple_for_header_0@8 -> enumerate_tuple_for_body@12: item#4
debug: shared x-stack for enumerate_tuple_for_header_1@9 -> enumerate_tuple_for_body@12: item#4
debug: shared x-stack for enumerate_tuple_for_header_2@10 -> enumerate_tuple_for_body@12: item#4
debug: shared x-stack for enumerate_tuple_for_header_3@11 -> enumerate_tuple_for_body@12: item#4
debug: test_cases.enumeration.contract.enumerate_tuple f-stack entry: ['index#0', 'tuple_index%0#5', 'tuple_index%1#0']
debug: test_cases.enumeration.contract.enumerate_tuple f-stack on first store: ['iteration_count#0', 'item_concat#0', 'index_sum#0']
debug: Inserted enumerate_bytes_for_header@1.ops[3]: 'store continue_looping%3#0 to l-stack (copy)'
debug: Replaced enumerate_bytes_for_header@1.ops[5]: 'load continue_looping%3#0' with 'load continue_looping%3#0 from l-stack (no copy)'
debug: Inserted enumerate_bytes_for_body@2.ops[4]: 'store item#0 to l-stack (copy)'
debug: Replaced enumerate_bytes_for_body@2.ops[11]: 'load item#0' with 'load item#0 from l-stack (no copy)'
debug: Inserted enumerate_bytes_for_body@2.ops[2]: 'store item_index_internal%1#0 to l-stack (copy)'
debug: Replaced enumerate_bytes_for_body@2.ops[15]: 'load item_index_internal%1#0' with 'load item_index_internal%1#0 from l-stack (no copy)'
debug: Inserted enumerate_bytes_after_for@4.ops[1]: 'store item_index_internal%5#0 to l-stack (copy)'
debug: Replaced enumerate_bytes_after_for@4.ops[3]: 'load item_index_internal%5#0' with 'load item_index_internal%5#0 from l-stack (no copy)'
debug: Inserted enumerate_bytes_for_header@5.ops[3]: 'store continue_looping%7#0 to l-stack (copy)'
debug: Replaced enumerate_bytes_for_header@5.ops[5]: 'load continue_looping%7#0' with 'load continue_looping%7#0 from l-stack (no copy)'
debug: Inserted enumerate_bytes_for_body@6.ops[20]: 'store item_index_internal%5#0 to l-stack (copy)'
debug: Replaced enumerate_bytes_for_body@6.ops[22]: 'load item_index_internal%5#0' with 'load item_index_internal%5#0 from l-stack (no copy)'
debug: Inserted enumerate_bytes_for_body@6.ops[15]: 'store index#0 to l-stack (copy)'
debug: Replaced enumerate_bytes_for_body@6.ops[18]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted enumerate_bytes_for_body@6.ops[4]: 'store item#0 to l-stack (copy)'
debug: Replaced enumerate_bytes_for_body@6.ops[11]: 'load item#0' with 'load item#0 from l-stack (no copy)'
debug: Inserted enumerate_bytes_for_body@6.ops[2]: 'store index#0 to l-stack (copy)'
debug: Replaced enumerate_bytes_for_body@6.ops[16]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Found 4 edge set/s for test_cases.enumeration.contract.enumerate_bytes
debug: test_cases.enumeration.contract.enumerate_bytes f-stack entry: ['index#0']
debug: test_cases.enumeration.contract.enumerate_bytes f-stack on first store: ['iteration_count#0', 'item_concat#0', 'index_sum#0', 'bytes_length%0#0', 'item_index_internal%1#0']
info: Writing enumeration/out/EnumerationContract.approval.teal
info: Writing enumeration/out/EnumerationContract.clear.teal