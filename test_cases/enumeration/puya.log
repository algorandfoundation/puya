debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=True, output_arc56=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, output_teal_intermediates=False, output_op_statistics=True, debug_level=1, optimization_level=1, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, optimizations_override=immutabledict({}), expand_all_bytes=False, paths=['enumeration'], resource_encoding='value', output_awst=True, output_awst_json=False, output_source_annotations_json=False, output_client=True, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
info: writing enumeration/out/module.awst
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Terminated block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let required_budget_with_buffer#3: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@3
debug: Added required_budget_with_buffer#3 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#3 <- block@3) in block@3
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@4
debug: Created Phi assignment: let required_budget_with_buffer#4: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@4
debug: Added required_budget_with_buffer#4 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#3 <- block@3, required_budget_with_buffer#4 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#3 <- block@3, required_budget_with_buffer#4 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Added required_budget_with_buffer#2 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#2 <- block@6) in block@6
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let fee_source#3: uint64 = undefined while trying to resolve 'fee_source' in block@3
debug: Added fee_source#3 to Phi node: let fee_source#2: uint64 = φ(fee_source#3 <- block@3) in block@3
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@4
debug: Created Phi assignment: let fee_source#4: uint64 = undefined while trying to resolve 'fee_source' in block@4
debug: Added fee_source#4 to Phi node: let fee_source#2: uint64 = φ(fee_source#3 <- block@3, fee_source#4 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#3 <- block@3, fee_source#4 <- block@4, fee_source#1 <- block@5) in block@5
debug: Added fee_source#2 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#2 <- block@6) in block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#3) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2)
debug: Replaced trivial Phi node: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#3) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#3: uint64 = φ(fee_source#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let fee_source#3: uint64 = φ(fee_source#1 <- block@2) (fee_source#3) with fee_source#1
debug: Deleting Phi assignment: let fee_source#3: uint64 = φ(fee_source#1 <- block@2)
debug: Replaced trivial Phi node: let fee_source#3: uint64 = φ(fee_source#1 <- block@2) (fee_source#3) with fee_source#1 in current definition for 1 blocks
debug: Sealing block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#4) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2)
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#4) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#1 to Phi node: let fee_source#4: uint64 = φ(fee_source#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let fee_source#4: uint64 = φ(fee_source#1 <- block@2) (fee_source#4) with fee_source#1
debug: Deleting Phi assignment: let fee_source#4: uint64 = φ(fee_source#1 <- block@2)
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#4: uint64 = φ(fee_source#1 <- block@2) (fee_source#4) with fee_source#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.enumeration.contract.enumerate_urange
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: uint64 = undefined while trying to resolve 'item' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let iteration_count#1: uint64 = undefined while trying to resolve 'iteration_count' in block@1
debug: Looking for 'item_sum' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_sum#1: uint64 = undefined while trying to resolve 'item_sum' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added item#0 to Phi node: let item#1: uint64 = φ(item#0 <- block@0) in block@0
debug: Added item#2 to Phi node: let item#1: uint64 = φ(item#0 <- block@0, item#2 <- block@3) in block@3
debug: Added iteration_count#0 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0) in block@0
debug: Added iteration_count#2 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3) in block@3
debug: Added item_sum#0 to Phi node: let item_sum#1: uint64 = φ(item_sum#0 <- block@0) in block@0
debug: Added item_sum#2 to Phi node: let item_sum#1: uint64 = φ(item_sum#0 <- block@0, item_sum#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let step#1: uint64 = undefined while trying to resolve 'step' in block@1
debug: Added step#0 to Phi node: let step#1: uint64 = φ(step#0 <- block@0) in block@0
debug: Added step#1 to Phi node: let step#1: uint64 = φ(step#0 <- block@0, step#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let step#1: uint64 = φ(step#0 <- block@0, step#1 <- block@3) (step#1) with step#0
debug: Deleting Phi assignment: let step#1: uint64 = φ(step#0 <- block@0, step#1 <- block@3)
debug: Replaced trivial Phi node: let step#1: uint64 = φ(step#0 <- block@0, step#1 <- block@3) (step#1) with step#0 in current definition for 3 blocks
debug: Created Phi assignment: let stop#1: uint64 = undefined while trying to resolve 'stop' in block@1
debug: Added stop#0 to Phi node: let stop#1: uint64 = φ(stop#0 <- block@0) in block@0
debug: Added stop#1 to Phi node: let stop#1: uint64 = φ(stop#0 <- block@0, stop#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let stop#1: uint64 = φ(stop#0 <- block@0, stop#1 <- block@3) (stop#1) with stop#0
debug: Deleting Phi assignment: let stop#1: uint64 = φ(stop#0 <- block@0, stop#1 <- block@3)
debug: Replaced trivial Phi node: let stop#1: uint64 = φ(stop#0 <- block@0, stop#1 <- block@3) (stop#1) with stop#0 in current definition for 3 blocks
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#1 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#1 <- block@3) (start#1) with start#0
debug: Deleting Phi assignment: let start#1: uint64 = φ(start#0 <- block@0, start#1 <- block@3)
debug: Replaced trivial Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#1 <- block@3) (start#1) with start#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item#4: uint64 = undefined while trying to resolve 'item' in block@5
debug: Looking for 'index' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let index#1: uint64 = undefined while trying to resolve 'index' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let iteration_count#3: uint64 = undefined while trying to resolve 'iteration_count' in block@5
debug: Looking for 'item_sum' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_sum#3: uint64 = undefined while trying to resolve 'item_sum' in block@5
debug: Looking for 'index_sum' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let index_sum#1: uint64 = undefined while trying to resolve 'index_sum' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added item#3 to Phi node: let item#4: uint64 = φ(item#3 <- block@4) in block@4
debug: Added item#5 to Phi node: let item#4: uint64 = φ(item#3 <- block@4, item#5 <- block@7) in block@7
debug: Added index#0 to Phi node: let index#1: uint64 = φ(index#0 <- block@4) in block@4
debug: Added index#2 to Phi node: let index#1: uint64 = φ(index#0 <- block@4, index#2 <- block@7) in block@7
debug: Added iteration_count#1 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#1 <- block@4) in block@4
debug: Added iteration_count#4 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#1 <- block@4, iteration_count#4 <- block@7) in block@7
debug: Added item_sum#1 to Phi node: let item_sum#3: uint64 = φ(item_sum#1 <- block@4) in block@4
debug: Added item_sum#4 to Phi node: let item_sum#3: uint64 = φ(item_sum#1 <- block@4, item_sum#4 <- block@7) in block@7
debug: Created Phi assignment: let index_sum#3: uint64 = undefined while trying to resolve 'index_sum' in block@1
debug: Added index_sum#0 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0) in block@0
debug: Added index_sum#3 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) in block@3
debug: Replacing trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) (index_sum#3) with index_sum#0
debug: Deleting Phi assignment: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3)
debug: Replaced trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) (index_sum#3) with index_sum#0 in current definition for 3 blocks
debug: Added index_sum#0 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@4) in block@4
debug: Added index_sum#2 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@4, index_sum#2 <- block@7) in block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Building IR for function test_cases.enumeration.contract.enumerate_tuple
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'loop_counter%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let loop_counter%0#1: uint64 = undefined while trying to resolve 'loop_counter%0' in block@1
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let iteration_count#1: uint64 = undefined while trying to resolve 'iteration_count' in block@1
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_concat#1: bytes = undefined while trying to resolve 'item_concat' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@1
debug: Added loop_counter%0#0 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0) in block@0
debug: Added loop_counter%0#2 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3) in block@3
debug: Added loop_counter%0#3 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4) in block@4
debug: Added loop_counter%0#4 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4, loop_counter%0#4 <- block@5) in block@5
debug: Added iteration_count#0 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0) in block@0
debug: Added iteration_count#2 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3) in block@3
debug: Added iteration_count#2 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3, iteration_count#2 <- block@4) in block@4
debug: Added iteration_count#2 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3, iteration_count#2 <- block@4, iteration_count#2 <- block@5) in block@5
debug: Added item_concat#0 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0) in block@0
debug: Added item_concat#2 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0, item_concat#2 <- block@3) in block@3
debug: Added item_concat#2 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0, item_concat#2 <- block@3, item_concat#2 <- block@4) in block@4
debug: Added item_concat#2 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0, item_concat#2 <- block@3, item_concat#2 <- block@4, item_concat#2 <- block@5) in block@5
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#2 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#2 <- block@3) in block@3
debug: Added item#3 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#2 <- block@3, item#3 <- block@4) in block@4
debug: Added item#4 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#2 <- block@3, item#3 <- block@4, item#4 <- block@5) in block@5
debug: Sealing block@6
debug: Created Phi assignment: let tup.0#1: bytes = undefined while trying to resolve 'tup.0' in block@1
debug: Added tup.0#0 to Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@0) in block@0
debug: Added tup.0#1 to Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@0, tup.0#1 <- block@3) in block@3
debug: Added tup.0#1 to Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@0, tup.0#1 <- block@3, tup.0#1 <- block@4) in block@4
debug: Added tup.0#1 to Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@0, tup.0#1 <- block@3, tup.0#1 <- block@4, tup.0#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@0, tup.0#1 <- block@3, tup.0#1 <- block@4, tup.0#1 <- block@5) (tup.0#1) with tup.0#0
debug: Deleting Phi assignment: let tup.0#1: bytes = φ(tup.0#0 <- block@0, tup.0#1 <- block@3, tup.0#1 <- block@4, tup.0#1 <- block@5)
debug: Replaced trivial Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@0, tup.0#1 <- block@3, tup.0#1 <- block@4, tup.0#1 <- block@5) (tup.0#1) with tup.0#0 in current definition for 5 blocks
debug: Created Phi assignment: let tup.1#1: bytes = undefined while trying to resolve 'tup.1' in block@1
debug: Added tup.1#0 to Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@0) in block@0
debug: Added tup.1#1 to Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@0, tup.1#1 <- block@3) in block@3
debug: Added tup.1#1 to Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@0, tup.1#1 <- block@3, tup.1#1 <- block@4) in block@4
debug: Added tup.1#1 to Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@0, tup.1#1 <- block@3, tup.1#1 <- block@4, tup.1#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@0, tup.1#1 <- block@3, tup.1#1 <- block@4, tup.1#1 <- block@5) (tup.1#1) with tup.1#0
debug: Deleting Phi assignment: let tup.1#1: bytes = φ(tup.1#0 <- block@0, tup.1#1 <- block@3, tup.1#1 <- block@4, tup.1#1 <- block@5)
debug: Replaced trivial Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@0, tup.1#1 <- block@3, tup.1#1 <- block@4, tup.1#1 <- block@5) (tup.1#1) with tup.1#0 in current definition for 5 blocks
debug: Created Phi assignment: let tup.2#1: bytes = undefined while trying to resolve 'tup.2' in block@1
debug: Added tup.2#0 to Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@0) in block@0
debug: Added tup.2#1 to Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@0, tup.2#1 <- block@3) in block@3
debug: Added tup.2#1 to Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@0, tup.2#1 <- block@3, tup.2#1 <- block@4) in block@4
debug: Added tup.2#1 to Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@0, tup.2#1 <- block@3, tup.2#1 <- block@4, tup.2#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@0, tup.2#1 <- block@3, tup.2#1 <- block@4, tup.2#1 <- block@5) (tup.2#1) with tup.2#0
debug: Deleting Phi assignment: let tup.2#1: bytes = φ(tup.2#0 <- block@0, tup.2#1 <- block@3, tup.2#1 <- block@4, tup.2#1 <- block@5)
debug: Replaced trivial Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@0, tup.2#1 <- block@3, tup.2#1 <- block@4, tup.2#1 <- block@5) (tup.2#1) with tup.2#0 in current definition for 5 blocks
debug: Created Phi assignment: let tup.3#1: bytes = undefined while trying to resolve 'tup.3' in block@1
debug: Added tup.3#0 to Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@0) in block@0
debug: Added tup.3#1 to Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@0, tup.3#1 <- block@3) in block@3
debug: Added tup.3#1 to Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@0, tup.3#1 <- block@3, tup.3#1 <- block@4) in block@4
debug: Added tup.3#1 to Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@0, tup.3#1 <- block@3, tup.3#1 <- block@4, tup.3#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@0, tup.3#1 <- block@3, tup.3#1 <- block@4, tup.3#1 <- block@5) (tup.3#1) with tup.3#0
debug: Deleting Phi assignment: let tup.3#1: bytes = φ(tup.3#0 <- block@0, tup.3#1 <- block@3, tup.3#1 <- block@4, tup.3#1 <- block@5)
debug: Replaced trivial Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@0, tup.3#1 <- block@3, tup.3#1 <- block@4, tup.3#1 <- block@5) (tup.3#1) with tup.3#0 in current definition for 5 blocks
debug: Terminated block@6
debug: Looking for 'index' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let index#1: uint64 = undefined while trying to resolve 'index' in block@7
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let iteration_count#3: uint64 = undefined while trying to resolve 'iteration_count' in block@7
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let item_concat#3: bytes = undefined while trying to resolve 'item_concat' in block@7
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let item#6: bytes = undefined while trying to resolve 'item' in block@7
debug: Looking for 'index_sum' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let index_sum#1: uint64 = undefined while trying to resolve 'index_sum' in block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@7
debug: Added index#0 to Phi node: let index#1: uint64 = φ(index#0 <- block@6) in block@6
debug: Added index#2 to Phi node: let index#1: uint64 = φ(index#0 <- block@6, index#2 <- block@9) in block@9
debug: Added index#3 to Phi node: let index#1: uint64 = φ(index#0 <- block@6, index#2 <- block@9, index#3 <- block@10) in block@10
debug: Added index#4 to Phi node: let index#1: uint64 = φ(index#0 <- block@6, index#2 <- block@9, index#3 <- block@10, index#4 <- block@11) in block@11
debug: Added iteration_count#2 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#2 <- block@6) in block@6
debug: Added iteration_count#4 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#2 <- block@6, iteration_count#4 <- block@9) in block@9
debug: Added iteration_count#4 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#2 <- block@6, iteration_count#4 <- block@9, iteration_count#4 <- block@10) in block@10
debug: Added iteration_count#4 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#2 <- block@6, iteration_count#4 <- block@9, iteration_count#4 <- block@10, iteration_count#4 <- block@11) in block@11
debug: Added item_concat#2 to Phi node: let item_concat#3: bytes = φ(item_concat#2 <- block@6) in block@6
debug: Added item_concat#4 to Phi node: let item_concat#3: bytes = φ(item_concat#2 <- block@6, item_concat#4 <- block@9) in block@9
debug: Added item_concat#4 to Phi node: let item_concat#3: bytes = φ(item_concat#2 <- block@6, item_concat#4 <- block@9, item_concat#4 <- block@10) in block@10
debug: Added item_concat#4 to Phi node: let item_concat#3: bytes = φ(item_concat#2 <- block@6, item_concat#4 <- block@9, item_concat#4 <- block@10, item_concat#4 <- block@11) in block@11
debug: Added item#5 to Phi node: let item#6: bytes = φ(item#5 <- block@6) in block@6
debug: Added item#7 to Phi node: let item#6: bytes = φ(item#5 <- block@6, item#7 <- block@9) in block@9
debug: Added item#8 to Phi node: let item#6: bytes = φ(item#5 <- block@6, item#7 <- block@9, item#8 <- block@10) in block@10
debug: Added item#9 to Phi node: let item#6: bytes = φ(item#5 <- block@6, item#7 <- block@9, item#8 <- block@10, item#9 <- block@11) in block@11
debug: Created Phi assignment: let index_sum#3: uint64 = undefined while trying to resolve 'index_sum' in block@1
debug: Added index_sum#0 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0) in block@0
debug: Added index_sum#3 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) in block@3
debug: Added index_sum#3 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3, index_sum#3 <- block@4) in block@4
debug: Added index_sum#3 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3, index_sum#3 <- block@4, index_sum#3 <- block@5) in block@5
debug: Replacing trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3, index_sum#3 <- block@4, index_sum#3 <- block@5) (index_sum#3) with index_sum#0
debug: Deleting Phi assignment: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3, index_sum#3 <- block@4, index_sum#3 <- block@5)
debug: Replaced trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3, index_sum#3 <- block@4, index_sum#3 <- block@5) (index_sum#3) with index_sum#0 in current definition for 5 blocks
debug: Added index_sum#0 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@6) in block@6
debug: Added index_sum#2 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@6, index_sum#2 <- block@9) in block@9
debug: Added index_sum#2 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@6, index_sum#2 <- block@9, index_sum#2 <- block@10) in block@10
debug: Added index_sum#2 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@6, index_sum#2 <- block@9, index_sum#2 <- block@10, index_sum#2 <- block@11) in block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Building IR for function test_cases.enumeration.contract.enumerate_bytes
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'item_index_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_index_internal%0#1: uint64 = undefined while trying to resolve 'item_index_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let iteration_count#1: uint64 = undefined while trying to resolve 'iteration_count' in block@1
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_concat#1: bytes = undefined while trying to resolve 'item_concat' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added item_index_internal%0#0 to Phi node: let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0) in block@0
debug: Added item_index_internal%0#2 to Phi node: let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3) in block@3
debug: Added iteration_count#0 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0) in block@0
debug: Added iteration_count#2 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3) in block@3
debug: Added item_concat#0 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0) in block@0
debug: Added item_concat#2 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0, item_concat#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let bytes_#1: bytes = undefined while trying to resolve 'bytes_' in block@1
debug: Added bytes_#0 to Phi node: let bytes_#1: bytes = φ(bytes_#0 <- block@0) in block@0
debug: Added bytes_#1 to Phi node: let bytes_#1: bytes = φ(bytes_#0 <- block@0, bytes_#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let bytes_#1: bytes = φ(bytes_#0 <- block@0, bytes_#1 <- block@3) (bytes_#1) with bytes_#0
debug: Deleting Phi assignment: let bytes_#1: bytes = φ(bytes_#0 <- block@0, bytes_#1 <- block@3)
debug: Replaced trivial Phi node: let bytes_#1: bytes = φ(bytes_#0 <- block@0, bytes_#1 <- block@3) (bytes_#1) with bytes_#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'item_index_internal%1' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_index_internal%1#1: uint64 = undefined while trying to resolve 'item_index_internal%1' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let iteration_count#3: uint64 = undefined while trying to resolve 'iteration_count' in block@5
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_concat#3: bytes = undefined while trying to resolve 'item_concat' in block@5
debug: Looking for 'index_sum' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let index_sum#1: uint64 = undefined while trying to resolve 'index_sum' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added item_index_internal%1#0 to Phi node: let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4) in block@4
debug: Added item_index_internal%1#2 to Phi node: let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@7) in block@7
debug: Added iteration_count#1 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#1 <- block@4) in block@4
debug: Added iteration_count#4 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#1 <- block@4, iteration_count#4 <- block@7) in block@7
debug: Added item_concat#1 to Phi node: let item_concat#3: bytes = φ(item_concat#1 <- block@4) in block@4
debug: Added item_concat#4 to Phi node: let item_concat#3: bytes = φ(item_concat#1 <- block@4, item_concat#4 <- block@7) in block@7
debug: Created Phi assignment: let index_sum#3: uint64 = undefined while trying to resolve 'index_sum' in block@1
debug: Added index_sum#0 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0) in block@0
debug: Added index_sum#3 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) in block@3
debug: Replacing trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) (index_sum#3) with index_sum#0
debug: Deleting Phi assignment: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3)
debug: Replaced trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) (index_sum#3) with index_sum#0 in current definition for 3 blocks
debug: Added index_sum#0 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@4) in block@4
debug: Added index_sum#2 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@4, index_sum#2 <- block@7) in block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Building IR for function test_cases.enumeration.contract.EnumerationContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy._contract.Contract.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.enumeration.contract.EnumerationContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.enumeration.contract.EnumerationContract.approval_program
debug: removing unused subroutine test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: Building IR for function test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.enumeration.contract.enumerate_urange
debug: removing unused subroutine test_cases.enumeration.contract.enumerate_tuple
debug: removing unused subroutine test_cases.enumeration.contract.enumerate_bytes
debug: removing unused subroutine test_cases.enumeration.contract.EnumerationContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.enumeration.contract.EnumerationContract.approval_program
debug: removing unused subroutine test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: Output IR to enumeration/out/EnumerationContract.ir/EnumerationContract.approval.000.ssa.ir
debug: Output IR to enumeration/out/EnumerationContract.ir/EnumerationContract.clear.000.ssa.ir
debug: optimizing approval program of test_cases.enumeration.contract.EnumerationContract at level 1
debug: Begin optimization pass 1/100
debug: marking single-use function test_cases.enumeration.contract.enumerate_urange for inlining
debug: marking single-use function test_cases.enumeration.contract.enumerate_tuple for inlining
debug: marking single-use function test_cases.enumeration.contract.enumerate_bytes for inlining
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
enumeration/contract.py:6:48 debug: inlining call to test_cases.enumeration.contract.enumerate_urange in test_cases.enumeration.contract.EnumerationContract.approval_program
enumeration/contract.py:12:51 debug: inlining call to test_cases.enumeration.contract.enumerate_tuple in test_cases.enumeration.contract.EnumerationContract.approval_program
enumeration/contract.py:20:51 debug: inlining call to test_cases.enumeration.contract.enumerate_bytes in test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%0#1, iteration_count#5
debug: selected iteration_count#5 from equivalence set
debug: Found equivalence set: tmp%1#1, item_sum#3
debug: selected item_sum#3 from equivalence set
debug: Found equivalence set: tmp%2#1, iteration_count#7
debug: selected iteration_count#7 from equivalence set
debug: Found equivalence set: tmp%3#1, item_sum#5
debug: selected item_sum#5 from equivalence set
debug: Found equivalence set: tmp%4#1, index_sum#5
debug: selected index_sum#5 from equivalence set
debug: Found equivalence set: iteration_count#6, tmp%0#0, iteration_count#0
debug: selected iteration_count#6 from equivalence set
debug: Found equivalence set: item_sum#4, tmp%1#0, item_sum#0
debug: selected item_sum#4 from equivalence set
debug: Found equivalence set: index_sum#4, tmp%2#0, index_sum#0
debug: selected index_sum#4 from equivalence set
debug: Found equivalence set: tmp%0#2, iteration_count#10
debug: selected iteration_count#10 from equivalence set
debug: Found equivalence set: tmp%1#2, item_concat#4
debug: selected item_concat#4 from equivalence set
debug: Found equivalence set: tmp%2#2, iteration_count#12, tmp%6#0, iteration_count#1
debug: selected iteration_count#12 from equivalence set
debug: Found equivalence set: tmp%3#2, item_concat#6, tmp%7#0, item_concat#0
debug: selected item_concat#6 from equivalence set
debug: Found equivalence set: tmp%4#2, index_sum#8, tmp%8#0, index_sum#1
debug: selected index_sum#8 from equivalence set
debug: Found equivalence set: bytes_length%0#0, reverse_index_internal%0#0
debug: selected bytes_length%0#0 from equivalence set
debug: Found equivalence set: tmp%0#3, iteration_count#15
debug: selected iteration_count#15 from equivalence set
debug: Found equivalence set: tmp%1#3, item_concat#9
debug: selected item_concat#9 from equivalence set
debug: Found equivalence set: bytes_length%1#0, reverse_index_internal%1#0
debug: selected bytes_length%1#0 from equivalence set
debug: Found equivalence set: item_index_internal%1#1, index#8
debug: selected index#8 from equivalence set
debug: Found equivalence set: tmp%2#3, iteration_count#17
debug: selected iteration_count#17 from equivalence set
debug: Found equivalence set: tmp%3#3, item_concat#11
debug: selected item_concat#11 from equivalence set
debug: Found equivalence set: tmp%4#3, index_sum#11
debug: selected index_sum#11 from equivalence set
debug: Found equivalence set: iteration_count#16, tmp%12#0, iteration_count#2
debug: selected iteration_count#16 from equivalence set
debug: Found equivalence set: item_concat#10, tmp%13#0, item_concat#1
debug: selected item_concat#10 from equivalence set
debug: Found equivalence set: index_sum#10, tmp%14#0, index_sum#2
debug: selected index_sum#10 from equivalence set
debug: Copy propagation made 28 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable start#0
debug: Removing unused variable stop#0
debug: Removing unused variable step#0
debug: Removing unused variable tup.0#0
debug: Removing unused variable tup.1#0
debug: Removing unused variable tup.2#0
debug: Removing unused variable tup.3#0
debug: Removing unused variable loop_counter%1#0
debug: Removing unused variable loop_counter%1#1
debug: Removing unused variable loop_counter%1#2
debug: Removing unused variable loop_counter%1#3
debug: Removing unused variable bytes_#0
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (len 0x61626364656667) to 7u
debug: Simplified (len 0x61626364656667) to 7u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@4 with block@3 in block@2
debug: Merged linear block@4 into block@3
debug: Replaced predecessor block@8 with block@7 in block@6
debug: Merged linear block@8 into block@7
debug: Replaced predecessor block@10 with block@9 in block@11
debug: Merged linear block@10 into block@9
debug: Replaced predecessor block@11 with block@9 in block@12
debug: Merged linear block@11 into block@9
debug: Replaced predecessor block@13 with block@12 in block@14
debug: Replaced predecessor block@13 with block@12 in block@15
debug: Replaced predecessor block@13 with block@12 in block@16
debug: Replaced predecessor block@13 with block@12 in block@17
debug: Merged linear block@13 into block@12
debug: Replaced predecessor block@19 with block@18 in block@20
debug: Replaced predecessor block@19 with block@18 in block@21
debug: Replaced predecessor block@19 with block@18 in block@22
debug: Replaced predecessor block@19 with block@18 in block@23
debug: Merged linear block@19 into block@18
debug: Replaced predecessor block@24 with block@23 in block@25
debug: Merged linear block@24 into block@23
debug: Replaced predecessor block@25 with block@23 in block@26
debug: Merged linear block@25 into block@23
debug: Replaced predecessor block@28 with block@27 in block@26
debug: Merged linear block@28 into block@27
debug: Replaced predecessor block@32 with block@31 in block@30
debug: Merged linear block@32 into block@31
debug: Merged linear block@34 into block@33
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_urange
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: start#0, item#0, item#3
debug: selected start#0 from equivalence set
debug: Found equivalence set: tmp%0#0, iteration_count#2
debug: selected iteration_count#2 from equivalence set
debug: Found equivalence set: tmp%1#0, item_sum#2
debug: selected item_sum#2 from equivalence set
debug: Found equivalence set: tmp%2#0, iteration_count#4
debug: selected iteration_count#4 from equivalence set
debug: Found equivalence set: tmp%3#0, item_sum#4
debug: selected item_sum#4 from equivalence set
debug: Found equivalence set: tmp%4#0, index_sum#2
debug: selected index_sum#2 from equivalence set
debug: Copy propagation made 7 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3 with block@2 in block@1
debug: Merged linear block@3 into block@2
debug: Replaced predecessor block@7 with block@6 in block@5
debug: Merged linear block@7 into block@6
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Removing redundant assert of step#0
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_tuple
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tup.0#0, item#0, item#5
debug: selected tup.0#0 from equivalence set
debug: Found equivalence set: tmp%0#0, iteration_count#2
debug: selected iteration_count#2 from equivalence set
debug: Found equivalence set: tmp%1#0, item_concat#2
debug: selected item_concat#2 from equivalence set
debug: Found equivalence set: tup.1#0, item#2, item#7
debug: selected tup.1#0 from equivalence set
debug: Found equivalence set: tup.2#0, item#3, item#8
debug: selected tup.2#0 from equivalence set
debug: Found equivalence set: tup.3#0, item#4, item#9
debug: selected tup.3#0 from equivalence set
debug: Found equivalence set: tmp%2#0, iteration_count#4
debug: selected iteration_count#4 from equivalence set
debug: Found equivalence set: tmp%3#0, item_concat#4
debug: selected item_concat#4 from equivalence set
debug: Found equivalence set: tmp%4#0, index_sum#2
debug: selected index_sum#2 from equivalence set
debug: Copy propagation made 13 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable loop_counter%1#0
debug: Removing unused variable loop_counter%1#1
debug: Removing unused variable loop_counter%1#2
debug: Removing unused variable loop_counter%1#3
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2 with block@1 in block@3
debug: Replaced predecessor block@2 with block@1 in block@4
debug: Replaced predecessor block@2 with block@1 in block@5
debug: Replaced predecessor block@2 with block@1 in block@6
debug: Merged linear block@2 into block@1
debug: Replaced predecessor block@8 with block@7 in block@9
debug: Replaced predecessor block@8 with block@7 in block@10
debug: Replaced predecessor block@8 with block@7 in block@11
debug: Replaced predecessor block@8 with block@7 in block@12
debug: Merged linear block@8 into block@7
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_bytes
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: bytes_length%0#0, reverse_index_internal%0#0
debug: selected bytes_length%0#0 from equivalence set
debug: Found equivalence set: tmp%0#0, iteration_count#2
debug: selected iteration_count#2 from equivalence set
debug: Found equivalence set: tmp%1#0, item_concat#2
debug: selected item_concat#2 from equivalence set
debug: Found equivalence set: bytes_length%1#0, reverse_index_internal%1#0
debug: selected bytes_length%1#0 from equivalence set
debug: Found equivalence set: item_index_internal%1#1, index#0
debug: selected index#0 from equivalence set
debug: Found equivalence set: tmp%2#0, iteration_count#4
debug: selected iteration_count#4 from equivalence set
debug: Found equivalence set: tmp%3#0, item_concat#4
debug: selected item_concat#4 from equivalence set
debug: Found equivalence set: tmp%4#0, index_sum#2
debug: selected index_sum#2 from equivalence set
debug: Copy propagation made 9 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3 with block@2 in block@1
debug: Merged linear block@3 into block@2
debug: Replaced predecessor block@7 with block@6 in block@5
debug: Merged linear block@7 into block@6
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let bytes_length%1#0: uint64 = (len bytes_#0) with copy of existing registers [Register(source_location=enumeration/contract.py:73, ir_type=uint64, name='bytes_length%0', version=0)]
debug: Found equivalence set: bytes_length%0#0, bytes_length%1#0
debug: selected bytes_length%0#0 from equivalence set
debug: Copy propagation made 1 modifications
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine test_cases.enumeration.contract.enumerate_urange
debug: removing unused subroutine test_cases.enumeration.contract.enumerate_tuple
debug: removing unused subroutine test_cases.enumeration.contract.enumerate_bytes
debug: Unused subroutines removed
debug: Output IR to enumeration/out/EnumerationContract.ir/EnumerationContract.approval.001.ssa.opt.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable bytes_length%0#0
debug: Removing unused variable bytes_length%1#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Output IR to enumeration/out/EnumerationContract.ir/EnumerationContract.approval.002.ssa.opt.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 3, ending loop
debug: optimizing clear program of test_cases.enumeration.contract.EnumerationContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.enumeration.contract.EnumerationContract
debug: Output IR to enumeration/out/EnumerationContract.ir/EnumerationContract.approval.100.ssa.array.ir
debug: lowering array IR nodes in clear program of test_cases.enumeration.contract.EnumerationContract
debug: Output IR to enumeration/out/EnumerationContract.ir/EnumerationContract.clear.100.ssa.array.ir
debug: optimizing approval program of test_cases.enumeration.contract.EnumerationContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.enumeration.contract.EnumerationContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.enumeration.contract.EnumerationContract
enumeration/contract.py:5 debug: auto reserving slots in test_cases.enumeration.contract.EnumerationContract.approval_program, []
debug: Slot allocation not required
debug: Output IR to enumeration/out/EnumerationContract.ir/EnumerationContract.approval.300.ssa.slot.ir
debug: removing local static slots in clear program of test_cases.enumeration.contract.EnumerationContract
enumeration/contract.py:28 debug: auto reserving slots in test_cases.enumeration.contract.EnumerationContract.clear_state_program, []
debug: Slot allocation not required
debug: Output IR to enumeration/out/EnumerationContract.ir/EnumerationContract.clear.300.ssa.slot.ir
debug: Performing SSA IR destructuring for test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.enumeration.contract.EnumerationContract.approval_program using strategy 'root_operand'
debug: Coalescing iteration_count#3 with [iteration_count#20, iteration_count#4, iteration_count#5, iteration_count#23, iteration_count#6, iteration_count#7, iteration_count#8, iteration_count#28, iteration_count#9, iteration_count#10, iteration_count#33, iteration_count#11, iteration_count#12, iteration_count#13, iteration_count#36, iteration_count#14, iteration_count#15, iteration_count#39, iteration_count#16, iteration_count#17]
debug: Coalescing item_sum#1 with [item_sum#8, item_sum#2, item_sum#3, item_sum#11, item_sum#4, item_sum#5]
debug: Coalescing index_sum#3 with [index_sum#14, index_sum#4, index_sum#5, index_sum#6, index_sum#19, index_sum#7, index_sum#8, index_sum#9, index_sum#22, index_sum#10, index_sum#11]
debug: Coalescing item#0 with [item#20, item#1, item#2, item#3, item#23, item#4, item#5]
debug: Coalescing continue_looping%0#0 with [continue_looping%0#1]
debug: Coalescing index#0 with [index#11, index#1, index#2, index#3, index#16, index#4, index#5, index#6, index#7, index#17, index#8]
debug: Coalescing continue_looping%1#0 with [continue_looping%1#1]
debug: Coalescing item_concat#2 with [item_concat#16, item_concat#3, item_concat#4, item_concat#21, item_concat#5, item_concat#6, item_concat#7, item_concat#24, item_concat#8, item_concat#9, item_concat#27, item_concat#10, item_concat#11]
debug: Coalescing loop_counter%0#0 with [loop_counter%0#9, loop_counter%0#1, loop_counter%0#2, loop_counter%0#3, loop_counter%0#4]
debug: Coalescing item#6 with [item#28, item#7, item#8, item#9, item#10, item#11, item#33, item#12, item#13, item#14, item#15, item#16, item#17]
debug: Coalescing item_index_internal%0#0 with [item_index_internal%0#5, item_index_internal%0#1, item_index_internal%0#2]
debug: Coalescing item_index_internal%1#0 with [item_index_internal%1#2]
debug: Coalescing resulted in 262 replacement/s
debug: Sequentializing parallel copies in test_cases.enumeration.contract.EnumerationContract.approval_program
debug: loc: {index#0=None, item_index_internal%1#0=item_index_internal%1#0}
debug: pred: {index#0=item_index_internal%1#0}
debug: ready: index#0
debug: to_do: index#0
debug: * avail index#0
debug: * avail item_index_internal%1#0
debug: * to_do index#0
debug: loc: {index#0=None, item_index_internal%1#0=item_index_internal%1#0}
debug: pred: {index#0=item_index_internal%1#0}
debug: ready: index#0
debug: to_do: index#0
debug: * avail index#0
debug: * avail item_index_internal%1#0
debug: * to_do index#0
debug: Performing post-SSA optimizations at level 1
debug: Output IR to enumeration/out/EnumerationContract.ir/EnumerationContract.approval.400.destructured.ir
debug: Performing SSA IR destructuring for test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.enumeration.contract.EnumerationContract.clear_state_program using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Performing post-SSA optimizations at level 1
debug: Output IR to enumeration/out/EnumerationContract.ir/EnumerationContract.clear.400.destructured.ir
debug: Inserted main_for_header@2.ops[3]: 'l-store-copy continue_looping%0#0 0'
debug: Replaced main_for_header@2.ops[5]: 'v-load continue_looping%0#0' with 'l-load continue_looping%0#0'
debug: Inserted main_for_body@3.ops[6]: 'l-store-copy item#0 1'
debug: Replaced main_for_body@3.ops[9]: 'v-load item#0' with 'l-load item#0'
debug: Inserted main_for_header@6.ops[3]: 'l-store-copy continue_looping%1#0 0'
debug: Replaced main_for_header@6.ops[5]: 'v-load continue_looping%1#0' with 'l-load continue_looping%1#0'
debug: Inserted main_for_body@7.ops[6]: 'l-store-copy item#0 1'
debug: Replaced main_for_body@7.ops[13]: 'v-load item#0' with 'l-load item#0'
debug: Inserted main_for_body@7.ops[11]: 'l-store-copy index#0 2'
debug: Replaced main_for_body@7.ops[18]: 'v-load index#0' with 'l-load index#0'
debug: Inserted main_after_for@9.ops[3]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_after_for@9.ops[5]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_after_for@9.ops[10]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_after_for@9.ops[12]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_after_for@9.ops[17]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_after_for@9.ops[19]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_for_body@18.ops[10]: 'l-store-copy index#0 1'
debug: Replaced main_for_body@18.ops[13]: 'v-load index#0' with 'l-load index#0'
debug: Inserted main_after_for@23.ops[3]: 'l-store-copy tmp%9#0 0'
debug: Replaced main_after_for@23.ops[5]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main_after_for@23.ops[10]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_after_for@23.ops[12]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_after_for@23.ops[17]: 'l-store-copy tmp%11#0 0'
debug: Replaced main_after_for@23.ops[19]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted main_for_header@26.ops[3]: 'l-store-copy continue_looping%0#0 0'
debug: Replaced main_for_header@26.ops[5]: 'v-load continue_looping%0#0' with 'l-load continue_looping%0#0'
debug: Inserted main_for_body@27.ops[4]: 'l-store-copy item#6 0'
debug: Replaced main_for_body@27.ops[11]: 'v-load item#6' with 'l-load item#6'
debug: Inserted main_for_body@27.ops[2]: 'l-store-copy item_index_internal%0#0 1'
debug: Replaced main_for_body@27.ops[15]: 'v-load item_index_internal%0#0' with 'l-load item_index_internal%0#0'
debug: Inserted main_after_for@29.ops[1]: 'l-store-copy item_index_internal%1#0 0'
debug: Replaced main_after_for@29.ops[3]: 'v-load item_index_internal%1#0' with 'l-load item_index_internal%1#0'
debug: Inserted main_for_header@30.ops[3]: 'l-store-copy continue_looping%1#0 0'
debug: Replaced main_for_header@30.ops[5]: 'v-load continue_looping%1#0' with 'l-load continue_looping%1#0'
debug: Inserted main_for_body@31.ops[20]: 'l-store-copy item_index_internal%1#0 0'
debug: Replaced main_for_body@31.ops[22]: 'v-load item_index_internal%1#0' with 'l-load item_index_internal%1#0'
debug: Inserted main_for_body@31.ops[15]: 'l-store-copy index#0 1'
debug: Replaced main_for_body@31.ops[18]: 'v-load index#0' with 'l-load index#0'
debug: Inserted main_for_body@31.ops[4]: 'l-store-copy item#6 0'
debug: Replaced main_for_body@31.ops[11]: 'v-load item#6' with 'l-load item#6'
debug: Inserted main_for_body@31.ops[2]: 'l-store-copy index#0 1'
debug: Replaced main_for_body@31.ops[16]: 'v-load index#0' with 'l-load index#0'
debug: Inserted main_after_for@33.ops[3]: 'l-store-copy tmp%15#0 0'
debug: Replaced main_after_for@33.ops[5]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted main_after_for@33.ops[10]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_after_for@33.ops[12]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_after_for@33.ops[17]: 'l-store-copy tmp%17#0 0'
debug: Replaced main_after_for@33.ops[19]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Found 12 edge set/s for test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Allocated 2 variable/s to x-stack: item#6, loop_counter%0#0
debug: shared x-stack for main_after_for@9 -> main_for_body@12: item#6, loop_counter%0#0
debug: shared x-stack for main_for_header_1@14 -> main_for_body@12: item#6, loop_counter%0#0
debug: shared x-stack for main_for_header_2@15 -> main_for_body@12: item#6, loop_counter%0#0
debug: shared x-stack for main_for_header_3@16 -> main_for_body@12: item#6, loop_counter%0#0
debug: shared x-stack for main_after_for@17 -> main_for_body@18: item#6
debug: shared x-stack for main_for_header_1@20 -> main_for_body@18: item#6
debug: shared x-stack for main_for_header_2@21 -> main_for_body@18: item#6
debug: shared x-stack for main_for_header_3@22 -> main_for_body@18: item#6
debug: test_cases.enumeration.contract.EnumerationContract.approval_program f-stack entry: ['item_concat#2', 'index#0', 'item_index_internal%0#0']
debug: test_cases.enumeration.contract.EnumerationContract.approval_program f-stack on first store: ['iteration_count#3', 'item_sum#1', 'index_sum#3', 'item#0']
enumeration/contract.py:5 debug: optimizing TEAL subroutine ops test_cases.enumeration.contract.EnumerationContract.approval_program() -> uint64:
enumeration/contract.py:5 debug: optimizing TEAL subroutine blocks test_cases.enumeration.contract.EnumerationContract.approval_program() -> uint64:
debug: inlining single reference block main_block@0 into main
debug: inlining single reference block main_for_body@3 into main_for_header@2
debug: inlining single reference block main_for_body@7 into main_for_header@6
debug: inlining single reference block main_after_for@17 into main_for_body@12
debug: inlining single reference block main_after_for@23 into main_for_body@18
debug: inlining single reference block main_for_body@27 into main_for_header@26
debug: inlining single reference block main_for_body@31 into main_for_header@30
debug: removing explicit jump to fall-through block main_for_header@2
debug: removing explicit jump to fall-through block main_for_header@6
debug: removing explicit jump to fall-through block main_for_body@12
debug: removing explicit jump to fall-through block main_for_body@18
debug: removing explicit jump to fall-through block main_for_header@26
debug: removing explicit jump to fall-through block main_for_header@30
enumeration/contract.py:28 debug: optimizing TEAL subroutine ops test_cases.enumeration.contract.EnumerationContract.clear_state_program() -> uint64:
enumeration/contract.py:28 debug: optimizing TEAL subroutine blocks test_cases.enumeration.contract.EnumerationContract.clear_state_program() -> uint64:
debug: inlining single reference block main_block@0 into main
info: Writing enumeration/out/EnumerationContract.approval.teal
info: Writing enumeration/out/EnumerationContract.clear.teal
info: Writing enumeration/out/EnumerationContract.approval.bin
info: Writing enumeration/out/EnumerationContract.clear.bin
info: Writing enumeration/out/EnumerationContract.approval.stats.txt
info: Writing enumeration/out/EnumerationContract.clear.stats.txt
info: Writing enumeration/out/EnumerationContract.approval.puya.map
info: Writing enumeration/out/EnumerationContract.clear.puya.map