debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=True, output_arc56=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, debug_level=1, optimization_level=1, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, paths=['enumeration'], output_awst=True, output_awst_json=False, output_client=True, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
info: writing enumeration/out/module.awst
debug: Sealing block@0: // L12
debug: Terminated block@0: // L12
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@2: // while_body_L21
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L21
debug: Sealing block@3: // switch_case_0_L28
debug: Terminated block@3: // switch_case_0_L28
debug: Sealing block@4: // switch_case_1_L30
debug: Terminated block@4: // switch_case_1_L30
debug: Sealing block@5: // switch_case_default_L26
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L12
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L12
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@2: // while_body_L12
debug: Terminated block@2: // while_body_L12
debug: Sealing block@3: // if_body_L13
debug: Terminated block@3: // if_body_L13
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Sealing block@2: // for_body_L111
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Terminated block@2: // for_body_L111
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@1: // for_header_L110
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L92
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L110
debug: Sealing block@4: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@1: // if_body_L147
debug: Terminated block@1: // if_body_L147
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3: // for_header_L150
debug: Terminated block@3: // for_header_L150
debug: Sealing block@4: // for_body_L151
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3: // for_header_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3: // for_header_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3: // for_header_L150
debug: Terminated block@4: // for_body_L151
debug: Sealing block@5: // for_footer_L150
debug: Terminated block@5: // for_footer_L150
debug: Sealing block@3: // for_header_L150
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2: // after_if_else_L146
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@2, i#2 <- block@5) in block@5: // for_footer_L150
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L147
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2: // after_if_else_L146
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@5) in block@5: // for_footer_L150
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2: // after_if_else_L146
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@5) in block@5: // for_footer_L150
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2: // after_if_else_L146
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) in block@5: // for_footer_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@6: // after_for_L150
debug: Terminated block@6: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Sealing block@2: // for_body_L200
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Terminated block@2: // for_body_L200
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@1: // for_header_L199
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L189
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L199
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5: // for_header_L204
debug: Terminated block@5: // for_header_L204
debug: Sealing block@6: // for_body_L205
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5: // for_header_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5: // for_header_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5: // for_header_L204
debug: Terminated block@6: // for_body_L205
debug: Sealing block@7: // for_footer_L204
debug: Terminated block@7: // for_footer_L204
debug: Sealing block@5: // for_header_L204
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4: // after_for_L199
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7: // for_footer_L204
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4: // after_for_L199
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7: // for_footer_L204
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4: // after_for_L199
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Sealing block@2: // for_body_L270
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Terminated block@2: // for_body_L270
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@1: // for_header_L269
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L252
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L269
debug: Terminated block@4: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Sealing block@2: // for_body_L328
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Terminated block@2: // for_body_L328
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@1: // for_header_L327
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L306
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3: // for_footer_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3: // for_footer_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3: // for_footer_L327
debug: Sealing block@4: // after_for_L327
debug: Terminated block@4: // after_for_L327
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Sealing block@1: // abi_routing_L4
debug: Terminated block@1: // abi_routing_L4
debug: Sealing block@2: // bare_routing_L4
debug: Terminated block@2: // bare_routing_L4
debug: Sealing block@3: // after_if_else_L4
debug: Terminated block@3: // after_if_else_L4
debug: Sealing block@0: // L32
debug: Terminated block@0: // L32
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // for_header_L38
debug: Created Phi assignment: let item#1: uint64 = undefined while trying to resolve 'item' in block@1: // for_header_L38
debug: Terminated block@1: // for_header_L38
debug: Sealing block@2: // for_body_L39
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@1: // for_header_L38
debug: Created Phi assignment: let iteration_count#1: uint64 = undefined while trying to resolve 'iteration_count' in block@1: // for_header_L38
debug: Looking for 'item_sum' in an unsealed block creating an incomplete Phi: block@1: // for_header_L38
debug: Created Phi assignment: let item_sum#1: uint64 = undefined while trying to resolve 'item_sum' in block@1: // for_header_L38
debug: Terminated block@2: // for_body_L39
debug: Sealing block@3: // for_footer_L38
debug: Terminated block@3: // for_footer_L38
debug: Sealing block@1: // for_header_L38
debug: Added item#0 to Phi node: let item#1: uint64 = φ(item#0 <- block@0) in block@0: // L32
debug: Added item#2 to Phi node: let item#1: uint64 = φ(item#0 <- block@0, item#2 <- block@3) in block@3: // for_footer_L38
debug: Added iteration_count#0 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0) in block@0: // L32
debug: Added iteration_count#2 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3) in block@3: // for_footer_L38
debug: Added item_sum#0 to Phi node: let item_sum#1: uint64 = φ(item_sum#0 <- block@0) in block@0: // L32
debug: Added item_sum#2 to Phi node: let item_sum#1: uint64 = φ(item_sum#0 <- block@0, item_sum#2 <- block@3) in block@3: // for_footer_L38
debug: Sealing block@4: // after_for_L38
debug: Created Phi assignment: let step#1: uint64 = undefined while trying to resolve 'step' in block@1: // for_header_L38
debug: Added step#0 to Phi node: let step#1: uint64 = φ(step#0 <- block@0) in block@0: // L32
debug: Added step#1 to Phi node: let step#1: uint64 = φ(step#0 <- block@0, step#1 <- block@3) in block@3: // for_footer_L38
debug: Replacing trivial Phi node: let step#1: uint64 = φ(step#0 <- block@0, step#1 <- block@3) (step#1) with step#0
debug: Deleting Phi assignment: let step#1: uint64 = φ(step#0 <- block@0, step#1 <- block@3)
debug: Replaced trivial Phi node: let step#1: uint64 = φ(step#0 <- block@0, step#1 <- block@3) (step#1) with step#0 in current definition for 3 blocks
debug: Created Phi assignment: let stop#1: uint64 = undefined while trying to resolve 'stop' in block@1: // for_header_L38
debug: Added stop#0 to Phi node: let stop#1: uint64 = φ(stop#0 <- block@0) in block@0: // L32
debug: Added stop#1 to Phi node: let stop#1: uint64 = φ(stop#0 <- block@0, stop#1 <- block@3) in block@3: // for_footer_L38
debug: Replacing trivial Phi node: let stop#1: uint64 = φ(stop#0 <- block@0, stop#1 <- block@3) (stop#1) with stop#0
debug: Deleting Phi assignment: let stop#1: uint64 = φ(stop#0 <- block@0, stop#1 <- block@3)
debug: Replaced trivial Phi node: let stop#1: uint64 = φ(stop#0 <- block@0, stop#1 <- block@3) (stop#1) with stop#0 in current definition for 3 blocks
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // for_header_L38
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L32
debug: Added start#1 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#1 <- block@3) in block@3: // for_footer_L38
debug: Replacing trivial Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#1 <- block@3) (start#1) with start#0
debug: Deleting Phi assignment: let start#1: uint64 = φ(start#0 <- block@0, start#1 <- block@3)
debug: Replaced trivial Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#1 <- block@3) (start#1) with start#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L38
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@5: // for_header_L42
debug: Created Phi assignment: let item#4: uint64 = undefined while trying to resolve 'item' in block@5: // for_header_L42
debug: Looking for 'index' in an unsealed block creating an incomplete Phi: block@5: // for_header_L42
debug: Created Phi assignment: let index#1: uint64 = undefined while trying to resolve 'index' in block@5: // for_header_L42
debug: Terminated block@5: // for_header_L42
debug: Sealing block@6: // for_body_L43
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@5: // for_header_L42
debug: Created Phi assignment: let iteration_count#3: uint64 = undefined while trying to resolve 'iteration_count' in block@5: // for_header_L42
debug: Looking for 'item_sum' in an unsealed block creating an incomplete Phi: block@5: // for_header_L42
debug: Created Phi assignment: let item_sum#3: uint64 = undefined while trying to resolve 'item_sum' in block@5: // for_header_L42
debug: Looking for 'index_sum' in an unsealed block creating an incomplete Phi: block@5: // for_header_L42
debug: Created Phi assignment: let index_sum#1: uint64 = undefined while trying to resolve 'index_sum' in block@5: // for_header_L42
debug: Terminated block@6: // for_body_L43
debug: Sealing block@7: // for_footer_L42
debug: Terminated block@7: // for_footer_L42
debug: Sealing block@5: // for_header_L42
debug: Added item#3 to Phi node: let item#4: uint64 = φ(item#3 <- block@4) in block@4: // after_for_L38
debug: Added item#5 to Phi node: let item#4: uint64 = φ(item#3 <- block@4, item#5 <- block@7) in block@7: // for_footer_L42
debug: Added index#0 to Phi node: let index#1: uint64 = φ(index#0 <- block@4) in block@4: // after_for_L38
debug: Added index#2 to Phi node: let index#1: uint64 = φ(index#0 <- block@4, index#2 <- block@7) in block@7: // for_footer_L42
debug: Added iteration_count#1 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#1 <- block@4) in block@4: // after_for_L38
debug: Added iteration_count#4 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#1 <- block@4, iteration_count#4 <- block@7) in block@7: // for_footer_L42
debug: Added item_sum#1 to Phi node: let item_sum#3: uint64 = φ(item_sum#1 <- block@4) in block@4: // after_for_L38
debug: Added item_sum#4 to Phi node: let item_sum#3: uint64 = φ(item_sum#1 <- block@4, item_sum#4 <- block@7) in block@7: // for_footer_L42
debug: Created Phi assignment: let index_sum#3: uint64 = undefined while trying to resolve 'index_sum' in block@1: // for_header_L38
debug: Added index_sum#0 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0) in block@0: // L32
debug: Added index_sum#3 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) in block@3: // for_footer_L38
debug: Replacing trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) (index_sum#3) with index_sum#0
debug: Deleting Phi assignment: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3)
debug: Replaced trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) (index_sum#3) with index_sum#0 in current definition for 3 blocks
debug: Added index_sum#0 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@4) in block@4: // after_for_L38
debug: Added index_sum#2 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@4, index_sum#2 <- block@7) in block@7: // for_footer_L42
debug: Sealing block@8: // after_for_L42
debug: Terminated block@8: // after_for_L42
debug: Sealing block@0: // L50
debug: Terminated block@0: // L50
debug: Looking for 'loop_counter%0' in an unsealed block creating an incomplete Phi: block@1: // for_body_L57
debug: Created Phi assignment: let loop_counter%0#1: uint64 = undefined while trying to resolve 'loop_counter%0' in block@1: // for_body_L57
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@1: // for_body_L57
debug: Created Phi assignment: let iteration_count#1: uint64 = undefined while trying to resolve 'iteration_count' in block@1: // for_body_L57
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@1: // for_body_L57
debug: Created Phi assignment: let item_concat#1: bytes = undefined while trying to resolve 'item_concat' in block@1: // for_body_L57
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // for_body_L57
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // for_body_L57
debug: Terminated block@1: // for_body_L57
debug: Sealing block@2: // for_footer_L56
debug: Terminated block@2: // for_footer_L56
debug: Sealing block@3: // for_header_1_L56
debug: Terminated block@3: // for_header_1_L56
debug: Sealing block@4: // for_header_2_L56
debug: Terminated block@4: // for_header_2_L56
debug: Sealing block@5: // for_header_3_L56
debug: Terminated block@5: // for_header_3_L56
debug: Sealing block@1: // for_body_L57
debug: Added loop_counter%0#0 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0) in block@0: // L50
debug: Added loop_counter%0#2 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3) in block@3: // for_header_1_L56
debug: Added loop_counter%0#3 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4) in block@4: // for_header_2_L56
debug: Added loop_counter%0#4 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4, loop_counter%0#4 <- block@5) in block@5: // for_header_3_L56
debug: Added iteration_count#0 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0) in block@0: // L50
debug: Added iteration_count#2 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3) in block@3: // for_header_1_L56
debug: Added iteration_count#2 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3, iteration_count#2 <- block@4) in block@4: // for_header_2_L56
debug: Added iteration_count#2 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3, iteration_count#2 <- block@4, iteration_count#2 <- block@5) in block@5: // for_header_3_L56
debug: Added item_concat#0 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0) in block@0: // L50
debug: Added item_concat#2 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0, item_concat#2 <- block@3) in block@3: // for_header_1_L56
debug: Added item_concat#2 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0, item_concat#2 <- block@3, item_concat#2 <- block@4) in block@4: // for_header_2_L56
debug: Added item_concat#2 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0, item_concat#2 <- block@3, item_concat#2 <- block@4, item_concat#2 <- block@5) in block@5: // for_header_3_L56
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L50
debug: Added item#2 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#2 <- block@3) in block@3: // for_header_1_L56
debug: Added item#3 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#2 <- block@3, item#3 <- block@4) in block@4: // for_header_2_L56
debug: Added item#4 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#2 <- block@3, item#3 <- block@4, item#4 <- block@5) in block@5: // for_header_3_L56
debug: Sealing block@6: // after_for_L56
debug: Created Phi assignment: let tup.0#1: bytes = undefined while trying to resolve 'tup.0' in block@1: // for_body_L57
debug: Added tup.0#0 to Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@0) in block@0: // L50
debug: Added tup.0#1 to Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@0, tup.0#1 <- block@3) in block@3: // for_header_1_L56
debug: Added tup.0#1 to Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@0, tup.0#1 <- block@3, tup.0#1 <- block@4) in block@4: // for_header_2_L56
debug: Added tup.0#1 to Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@0, tup.0#1 <- block@3, tup.0#1 <- block@4, tup.0#1 <- block@5) in block@5: // for_header_3_L56
debug: Replacing trivial Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@0, tup.0#1 <- block@3, tup.0#1 <- block@4, tup.0#1 <- block@5) (tup.0#1) with tup.0#0
debug: Deleting Phi assignment: let tup.0#1: bytes = φ(tup.0#0 <- block@0, tup.0#1 <- block@3, tup.0#1 <- block@4, tup.0#1 <- block@5)
debug: Replaced trivial Phi node: let tup.0#1: bytes = φ(tup.0#0 <- block@0, tup.0#1 <- block@3, tup.0#1 <- block@4, tup.0#1 <- block@5) (tup.0#1) with tup.0#0 in current definition for 5 blocks
debug: Created Phi assignment: let tup.1#1: bytes = undefined while trying to resolve 'tup.1' in block@1: // for_body_L57
debug: Added tup.1#0 to Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@0) in block@0: // L50
debug: Added tup.1#1 to Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@0, tup.1#1 <- block@3) in block@3: // for_header_1_L56
debug: Added tup.1#1 to Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@0, tup.1#1 <- block@3, tup.1#1 <- block@4) in block@4: // for_header_2_L56
debug: Added tup.1#1 to Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@0, tup.1#1 <- block@3, tup.1#1 <- block@4, tup.1#1 <- block@5) in block@5: // for_header_3_L56
debug: Replacing trivial Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@0, tup.1#1 <- block@3, tup.1#1 <- block@4, tup.1#1 <- block@5) (tup.1#1) with tup.1#0
debug: Deleting Phi assignment: let tup.1#1: bytes = φ(tup.1#0 <- block@0, tup.1#1 <- block@3, tup.1#1 <- block@4, tup.1#1 <- block@5)
debug: Replaced trivial Phi node: let tup.1#1: bytes = φ(tup.1#0 <- block@0, tup.1#1 <- block@3, tup.1#1 <- block@4, tup.1#1 <- block@5) (tup.1#1) with tup.1#0 in current definition for 5 blocks
debug: Created Phi assignment: let tup.2#1: bytes = undefined while trying to resolve 'tup.2' in block@1: // for_body_L57
debug: Added tup.2#0 to Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@0) in block@0: // L50
debug: Added tup.2#1 to Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@0, tup.2#1 <- block@3) in block@3: // for_header_1_L56
debug: Added tup.2#1 to Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@0, tup.2#1 <- block@3, tup.2#1 <- block@4) in block@4: // for_header_2_L56
debug: Added tup.2#1 to Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@0, tup.2#1 <- block@3, tup.2#1 <- block@4, tup.2#1 <- block@5) in block@5: // for_header_3_L56
debug: Replacing trivial Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@0, tup.2#1 <- block@3, tup.2#1 <- block@4, tup.2#1 <- block@5) (tup.2#1) with tup.2#0
debug: Deleting Phi assignment: let tup.2#1: bytes = φ(tup.2#0 <- block@0, tup.2#1 <- block@3, tup.2#1 <- block@4, tup.2#1 <- block@5)
debug: Replaced trivial Phi node: let tup.2#1: bytes = φ(tup.2#0 <- block@0, tup.2#1 <- block@3, tup.2#1 <- block@4, tup.2#1 <- block@5) (tup.2#1) with tup.2#0 in current definition for 5 blocks
debug: Created Phi assignment: let tup.3#1: bytes = undefined while trying to resolve 'tup.3' in block@1: // for_body_L57
debug: Added tup.3#0 to Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@0) in block@0: // L50
debug: Added tup.3#1 to Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@0, tup.3#1 <- block@3) in block@3: // for_header_1_L56
debug: Added tup.3#1 to Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@0, tup.3#1 <- block@3, tup.3#1 <- block@4) in block@4: // for_header_2_L56
debug: Added tup.3#1 to Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@0, tup.3#1 <- block@3, tup.3#1 <- block@4, tup.3#1 <- block@5) in block@5: // for_header_3_L56
debug: Replacing trivial Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@0, tup.3#1 <- block@3, tup.3#1 <- block@4, tup.3#1 <- block@5) (tup.3#1) with tup.3#0
debug: Deleting Phi assignment: let tup.3#1: bytes = φ(tup.3#0 <- block@0, tup.3#1 <- block@3, tup.3#1 <- block@4, tup.3#1 <- block@5)
debug: Replaced trivial Phi node: let tup.3#1: bytes = φ(tup.3#0 <- block@0, tup.3#1 <- block@3, tup.3#1 <- block@4, tup.3#1 <- block@5) (tup.3#1) with tup.3#0 in current definition for 5 blocks
debug: Terminated block@6: // after_for_L56
debug: Looking for 'index' in an unsealed block creating an incomplete Phi: block@7: // for_body_L60
debug: Created Phi assignment: let index#1: uint64 = undefined while trying to resolve 'index' in block@7: // for_body_L60
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@7: // for_body_L60
debug: Created Phi assignment: let iteration_count#3: uint64 = undefined while trying to resolve 'iteration_count' in block@7: // for_body_L60
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@7: // for_body_L60
debug: Created Phi assignment: let item_concat#3: bytes = undefined while trying to resolve 'item_concat' in block@7: // for_body_L60
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@7: // for_body_L60
debug: Created Phi assignment: let item#6: bytes = undefined while trying to resolve 'item' in block@7: // for_body_L60
debug: Looking for 'index_sum' in an unsealed block creating an incomplete Phi: block@7: // for_body_L60
debug: Created Phi assignment: let index_sum#1: uint64 = undefined while trying to resolve 'index_sum' in block@7: // for_body_L60
debug: Terminated block@7: // for_body_L60
debug: Sealing block@8: // for_footer_L59
debug: Terminated block@8: // for_footer_L59
debug: Sealing block@9: // for_header_1_L59
debug: Terminated block@9: // for_header_1_L59
debug: Sealing block@10: // for_header_2_L59
debug: Terminated block@10: // for_header_2_L59
debug: Sealing block@11: // for_header_3_L59
debug: Terminated block@11: // for_header_3_L59
debug: Sealing block@7: // for_body_L60
debug: Added index#0 to Phi node: let index#1: uint64 = φ(index#0 <- block@6) in block@6: // after_for_L56
debug: Added index#2 to Phi node: let index#1: uint64 = φ(index#0 <- block@6, index#2 <- block@9) in block@9: // for_header_1_L59
debug: Added index#3 to Phi node: let index#1: uint64 = φ(index#0 <- block@6, index#2 <- block@9, index#3 <- block@10) in block@10: // for_header_2_L59
debug: Added index#4 to Phi node: let index#1: uint64 = φ(index#0 <- block@6, index#2 <- block@9, index#3 <- block@10, index#4 <- block@11) in block@11: // for_header_3_L59
debug: Added iteration_count#2 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#2 <- block@6) in block@6: // after_for_L56
debug: Added iteration_count#4 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#2 <- block@6, iteration_count#4 <- block@9) in block@9: // for_header_1_L59
debug: Added iteration_count#4 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#2 <- block@6, iteration_count#4 <- block@9, iteration_count#4 <- block@10) in block@10: // for_header_2_L59
debug: Added iteration_count#4 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#2 <- block@6, iteration_count#4 <- block@9, iteration_count#4 <- block@10, iteration_count#4 <- block@11) in block@11: // for_header_3_L59
debug: Added item_concat#2 to Phi node: let item_concat#3: bytes = φ(item_concat#2 <- block@6) in block@6: // after_for_L56
debug: Added item_concat#4 to Phi node: let item_concat#3: bytes = φ(item_concat#2 <- block@6, item_concat#4 <- block@9) in block@9: // for_header_1_L59
debug: Added item_concat#4 to Phi node: let item_concat#3: bytes = φ(item_concat#2 <- block@6, item_concat#4 <- block@9, item_concat#4 <- block@10) in block@10: // for_header_2_L59
debug: Added item_concat#4 to Phi node: let item_concat#3: bytes = φ(item_concat#2 <- block@6, item_concat#4 <- block@9, item_concat#4 <- block@10, item_concat#4 <- block@11) in block@11: // for_header_3_L59
debug: Added item#5 to Phi node: let item#6: bytes = φ(item#5 <- block@6) in block@6: // after_for_L56
debug: Added item#7 to Phi node: let item#6: bytes = φ(item#5 <- block@6, item#7 <- block@9) in block@9: // for_header_1_L59
debug: Added item#8 to Phi node: let item#6: bytes = φ(item#5 <- block@6, item#7 <- block@9, item#8 <- block@10) in block@10: // for_header_2_L59
debug: Added item#9 to Phi node: let item#6: bytes = φ(item#5 <- block@6, item#7 <- block@9, item#8 <- block@10, item#9 <- block@11) in block@11: // for_header_3_L59
debug: Created Phi assignment: let index_sum#3: uint64 = undefined while trying to resolve 'index_sum' in block@1: // for_body_L57
debug: Added index_sum#0 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0) in block@0: // L50
debug: Added index_sum#3 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) in block@3: // for_header_1_L56
debug: Added index_sum#3 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3, index_sum#3 <- block@4) in block@4: // for_header_2_L56
debug: Added index_sum#3 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3, index_sum#3 <- block@4, index_sum#3 <- block@5) in block@5: // for_header_3_L56
debug: Replacing trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3, index_sum#3 <- block@4, index_sum#3 <- block@5) (index_sum#3) with index_sum#0
debug: Deleting Phi assignment: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3, index_sum#3 <- block@4, index_sum#3 <- block@5)
debug: Replaced trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3, index_sum#3 <- block@4, index_sum#3 <- block@5) (index_sum#3) with index_sum#0 in current definition for 5 blocks
debug: Added index_sum#0 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@6) in block@6: // after_for_L56
debug: Added index_sum#2 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@6, index_sum#2 <- block@9) in block@9: // for_header_1_L59
debug: Added index_sum#2 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@6, index_sum#2 <- block@9, index_sum#2 <- block@10) in block@10: // for_header_2_L59
debug: Added index_sum#2 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@6, index_sum#2 <- block@9, index_sum#2 <- block@10, index_sum#2 <- block@11) in block@11: // for_header_3_L59
debug: Sealing block@12: // after_for_L59
debug: Terminated block@12: // after_for_L59
debug: Sealing block@0: // L67
debug: Terminated block@0: // L67
debug: Looking for 'item_index_internal%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L73
debug: Created Phi assignment: let item_index_internal%0#1: uint64 = undefined while trying to resolve 'item_index_internal%0' in block@1: // for_header_L73
debug: Terminated block@1: // for_header_L73
debug: Sealing block@2: // for_body_L74
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@1: // for_header_L73
debug: Created Phi assignment: let iteration_count#1: uint64 = undefined while trying to resolve 'iteration_count' in block@1: // for_header_L73
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@1: // for_header_L73
debug: Created Phi assignment: let item_concat#1: bytes = undefined while trying to resolve 'item_concat' in block@1: // for_header_L73
debug: Terminated block@2: // for_body_L74
debug: Sealing block@3: // for_footer_L73
debug: Terminated block@3: // for_footer_L73
debug: Sealing block@1: // for_header_L73
debug: Added item_index_internal%0#0 to Phi node: let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0) in block@0: // L67
debug: Added item_index_internal%0#2 to Phi node: let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3) in block@3: // for_footer_L73
debug: Added iteration_count#0 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0) in block@0: // L67
debug: Added iteration_count#2 to Phi node: let iteration_count#1: uint64 = φ(iteration_count#0 <- block@0, iteration_count#2 <- block@3) in block@3: // for_footer_L73
debug: Added item_concat#0 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0) in block@0: // L67
debug: Added item_concat#2 to Phi node: let item_concat#1: bytes = φ(item_concat#0 <- block@0, item_concat#2 <- block@3) in block@3: // for_footer_L73
debug: Sealing block@4: // after_for_L73
debug: Created Phi assignment: let bytes_#1: bytes = undefined while trying to resolve 'bytes_' in block@1: // for_header_L73
debug: Added bytes_#0 to Phi node: let bytes_#1: bytes = φ(bytes_#0 <- block@0) in block@0: // L67
debug: Added bytes_#1 to Phi node: let bytes_#1: bytes = φ(bytes_#0 <- block@0, bytes_#1 <- block@3) in block@3: // for_footer_L73
debug: Replacing trivial Phi node: let bytes_#1: bytes = φ(bytes_#0 <- block@0, bytes_#1 <- block@3) (bytes_#1) with bytes_#0
debug: Deleting Phi assignment: let bytes_#1: bytes = φ(bytes_#0 <- block@0, bytes_#1 <- block@3)
debug: Replaced trivial Phi node: let bytes_#1: bytes = φ(bytes_#0 <- block@0, bytes_#1 <- block@3) (bytes_#1) with bytes_#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L73
debug: Looking for 'item_index_internal%1' in an unsealed block creating an incomplete Phi: block@5: // for_header_L76
debug: Created Phi assignment: let item_index_internal%1#1: uint64 = undefined while trying to resolve 'item_index_internal%1' in block@5: // for_header_L76
debug: Terminated block@5: // for_header_L76
debug: Sealing block@6: // for_body_L77
debug: Looking for 'iteration_count' in an unsealed block creating an incomplete Phi: block@5: // for_header_L76
debug: Created Phi assignment: let iteration_count#3: uint64 = undefined while trying to resolve 'iteration_count' in block@5: // for_header_L76
debug: Looking for 'item_concat' in an unsealed block creating an incomplete Phi: block@5: // for_header_L76
debug: Created Phi assignment: let item_concat#3: bytes = undefined while trying to resolve 'item_concat' in block@5: // for_header_L76
debug: Looking for 'index_sum' in an unsealed block creating an incomplete Phi: block@5: // for_header_L76
debug: Created Phi assignment: let index_sum#1: uint64 = undefined while trying to resolve 'index_sum' in block@5: // for_header_L76
debug: Terminated block@6: // for_body_L77
debug: Sealing block@7: // for_footer_L76
debug: Terminated block@7: // for_footer_L76
debug: Sealing block@5: // for_header_L76
debug: Added item_index_internal%1#0 to Phi node: let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4) in block@4: // after_for_L73
debug: Added item_index_internal%1#2 to Phi node: let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@7) in block@7: // for_footer_L76
debug: Added iteration_count#1 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#1 <- block@4) in block@4: // after_for_L73
debug: Added iteration_count#4 to Phi node: let iteration_count#3: uint64 = φ(iteration_count#1 <- block@4, iteration_count#4 <- block@7) in block@7: // for_footer_L76
debug: Added item_concat#1 to Phi node: let item_concat#3: bytes = φ(item_concat#1 <- block@4) in block@4: // after_for_L73
debug: Added item_concat#4 to Phi node: let item_concat#3: bytes = φ(item_concat#1 <- block@4, item_concat#4 <- block@7) in block@7: // for_footer_L76
debug: Created Phi assignment: let index_sum#3: uint64 = undefined while trying to resolve 'index_sum' in block@1: // for_header_L73
debug: Added index_sum#0 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0) in block@0: // L67
debug: Added index_sum#3 to Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) in block@3: // for_footer_L73
debug: Replacing trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) (index_sum#3) with index_sum#0
debug: Deleting Phi assignment: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3)
debug: Replaced trivial Phi node: let index_sum#3: uint64 = φ(index_sum#0 <- block@0, index_sum#3 <- block@3) (index_sum#3) with index_sum#0 in current definition for 3 blocks
debug: Added index_sum#0 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@4) in block@4: // after_for_L73
debug: Added index_sum#2 to Phi node: let index_sum#1: uint64 = φ(index_sum#0 <- block@4, index_sum#2 <- block@7) in block@7: // for_footer_L76
debug: Sealing block@8: // after_for_L76
debug: Terminated block@8: // after_for_L76
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L28
debug: Terminated block@0: // L28
debug: Output IR to enumeration/out/EnumerationContract.ssa.ir
info: optimizing test_cases.enumeration.contract.EnumerationContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%0#0, iteration_count#0
debug: Replacing {tuple_assignment%0#0} with iteration_count#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%1#0, item_sum#0
debug: Replacing {tuple_assignment%1#0} with item_sum#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%2#0, index_sum#0
debug: Replacing {tuple_assignment%2#0} with index_sum#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%3#0, iteration_count#1
debug: Replacing {tuple_assignment%3#0} with iteration_count#1 made 1 modifications
debug: Found equivalence set: tuple_assignment%4#0, item_concat#0
debug: Replacing {tuple_assignment%4#0} with item_concat#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%5#0, index_sum#1
debug: Replacing {tuple_assignment%5#0} with index_sum#1 made 1 modifications
debug: Found equivalence set: tuple_assignment%6#0, iteration_count#2
debug: Replacing {tuple_assignment%6#0} with iteration_count#2 made 1 modifications
debug: Found equivalence set: tuple_assignment%7#0, item_concat#1
debug: Replacing {tuple_assignment%7#0} with item_concat#1 made 1 modifications
debug: Found equivalence set: tuple_assignment%8#0, index_sum#2
debug: Replacing {tuple_assignment%8#0} with index_sum#2 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_urange
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: start#0, item#0, item#3
debug: Replacing {item#0, item#3} with start#0 made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // for_footer_L38 with block@2: // for_body_L39 in block@1: // for_header_L38
debug: Merged linear block@3: // for_footer_L38 into block@2: // for_body_L39
debug: Replaced predecessor block@7: // for_footer_L42 with block@6: // for_body_L43 in block@5: // for_header_L42
debug: Merged linear block@7: // for_footer_L42 into block@6: // for_body_L43
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Removing redundant assert of step#0
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_tuple
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tup.0#0, item#0, item#5
debug: Replacing {item#0, item#5} with tup.0#0 made 2 modifications
debug: Found equivalence set: tup.1#0, item#2, item#7
debug: Replacing {item#2, item#7} with tup.1#0 made 2 modifications
debug: Found equivalence set: tup.2#0, item#3, item#8
debug: Replacing {item#3, item#8} with tup.2#0 made 2 modifications
debug: Found equivalence set: tup.3#0, item#4, item#9
debug: Replacing {item#4, item#9} with tup.3#0 made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable loop_counter%1#0
debug: Removing unused variable loop_counter%1#1
debug: Removing unused variable loop_counter%1#2
debug: Removing unused variable loop_counter%1#3
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: inlining the default target of a switch/goto nth
debug: simplified terminator of block@8: // for_footer_L59 from goto_nth [block@9, block@10, block@11][index#1] else goto block@12 to goto_nth [block@9, block@10, block@11][index#1] else return iteration_count#4 item_concat#4 index_sum#2
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // for_footer_L56 with block@1: // for_body_L57 in block@3: // for_header_1_L56
debug: Replaced predecessor block@2: // for_footer_L56 with block@1: // for_body_L57 in block@4: // for_header_2_L56
debug: Replaced predecessor block@2: // for_footer_L56 with block@1: // for_body_L57 in block@5: // for_header_3_L56
debug: Replaced predecessor block@2: // for_footer_L56 with block@1: // for_body_L57 in block@6: // after_for_L56
debug: Merged linear block@2: // for_footer_L56 into block@1: // for_body_L57
debug: Replaced predecessor block@8: // for_footer_L59 with block@7: // for_body_L60 in block@9: // for_header_1_L59
debug: Replaced predecessor block@8: // for_footer_L59 with block@7: // for_body_L60 in block@10: // for_header_2_L59
debug: Replaced predecessor block@8: // for_footer_L59 with block@7: // for_body_L60 in block@11: // for_header_3_L59
debug: Merged linear block@8: // for_footer_L59 into block@7: // for_body_L60
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@12: // after_for_L59
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_bytes
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: bytes_length%0#0, reverse_index_internal%0#0
debug: Found equivalence set: bytes_length%1#0, reverse_index_internal%1#0
debug: Found equivalence set: item_index_internal%1#1, index#0
debug: Replacing {item_index_internal%1#1} with index#0 made 4 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // for_footer_L73 with block@2: // for_body_L74 in block@1: // for_header_L73
debug: Merged linear block@3: // for_footer_L73 into block@2: // for_body_L74
debug: Replaced predecessor block@7: // for_footer_L76 with block@6: // for_body_L77 in block@5: // for_header_L76
debug: Merged linear block@7: // for_footer_L76 into block@6: // for_body_L77
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let bytes_length%1#0: uint64 = (len bytes_#0) with copy of existing registers (Register(source_location=enumeration/contract.py:73, ir_type=uint64, name='bytes_length%0', version=0),)
debug: Found equivalence set: bytes_length%0#0, bytes_length%1#0
debug: Replacing {bytes_length%1#0} with bytes_length%0#0 made 1 modifications
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to enumeration/out/EnumerationContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_urange
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_tuple
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.enumeration.contract.enumerate_bytes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: No optimizations performed in pass 2, ending loop
debug: Removing Phis from test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Removing Phis from test_cases.enumeration.contract.enumerate_urange
debug: Removing Phis from test_cases.enumeration.contract.enumerate_tuple
debug: Removing Phis from test_cases.enumeration.contract.enumerate_bytes
debug: Removing Phis from test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Coalescing local variables in test_cases.enumeration.contract.EnumerationContract.approval_program using strategy RootOperandGrouping
debug: Coalescing iteration_count#0 with [iteration_count#1, iteration_count#2]
debug: Coalescing index_sum#0 with [index_sum#1, index_sum#2]
debug: Coalescing item_concat#0 with [item_concat#1]
debug: Coalescing resulted in 10 replacement/s
debug: Coalescing local variables in test_cases.enumeration.contract.enumerate_urange using strategy RootOperandGrouping
debug: Coalescing iteration_count#0 with [iteration_count#7, iteration_count#1, iteration_count#2, iteration_count#10, iteration_count#3, iteration_count#4]
debug: Coalescing item_sum#0 with [item_sum#7, item_sum#1, item_sum#2, item_sum#10, item_sum#3, item_sum#4]
debug: Coalescing index_sum#0 with [index_sum#5, index_sum#1, index_sum#2]
debug: Coalescing item#1 with [item#7, item#2, item#9, item#4, item#5]
debug: Coalescing index#0 with [index#5, index#1, index#2]
debug: Coalescing resulted in 62 replacement/s
debug: Coalescing local variables in test_cases.enumeration.contract.enumerate_tuple using strategy RootOperandGrouping
debug: Coalescing iteration_count#0 with [iteration_count#9, iteration_count#1, iteration_count#2, iteration_count#14, iteration_count#3, iteration_count#4]
debug: Coalescing item_concat#0 with [item_concat#9, item_concat#1, item_concat#2, item_concat#14, item_concat#3, item_concat#4]
debug: Coalescing index_sum#0 with [index_sum#7, index_sum#1, index_sum#2]
debug: Coalescing loop_counter%0#0 with [loop_counter%0#9, loop_counter%0#1, loop_counter%0#2, loop_counter%0#3, loop_counter%0#4]
debug: Coalescing item#1 with [item#7, item#8, item#6]
debug: Coalescing index#0 with [index#9, index#1, index#2, index#3, index#4]
debug: Coalescing resulted in 99 replacement/s
debug: Coalescing local variables in test_cases.enumeration.contract.enumerate_bytes using strategy RootOperandGrouping
debug: Coalescing iteration_count#0 with [iteration_count#7, iteration_count#1, iteration_count#2, iteration_count#10, iteration_count#3, iteration_count#4]
debug: Coalescing item_concat#0 with [item_concat#7, item_concat#1, item_concat#2, item_concat#10, item_concat#3, item_concat#4]
debug: Coalescing index_sum#0 with [index_sum#5, index_sum#1, index_sum#2]
debug: Coalescing item_index_internal%0#0 with [item_index_internal%0#5, item_index_internal%0#1, item_index_internal%0#2]
debug: Coalescing item#0 with [item#1]
debug: Coalescing item_index_internal%1#0 with [item_index_internal%1#2]
debug: Coalescing index#0 with [index#1]
debug: Coalescing resulted in 56 replacement/s
debug: Coalescing local variables in test_cases.enumeration.contract.EnumerationContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.enumeration.contract.EnumerationContract.approval_program
debug: Sequentializing parallel copies in test_cases.enumeration.contract.enumerate_urange
debug: loc: {item#1=None, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, start#0=start#0}
debug: pred: {item#1=start#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0}
debug: ready: item#1
debug: to_do: item#1, iteration_count#0, item_sum#0
debug: * avail item#1
debug: * avail start#0
debug: * to_do item_sum#0
debug: * to_do iteration_count#0
debug: * to_do item#1
debug: loc: {item#1=item#1, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0}
debug: pred: {item#1=item#1, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0}
debug: ready: 
debug: to_do: item#1, iteration_count#0, item_sum#0
debug: * to_do item_sum#0
debug: * to_do iteration_count#0
debug: * to_do item#1
debug: loc: {item#1=item#1, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0}
debug: pred: {item#1=item#1, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0}
debug: ready: 
debug: to_do: item#1, iteration_count#0, item_sum#0
debug: * to_do item_sum#0
debug: * to_do iteration_count#0
debug: * to_do item#1
debug: loc: {item#1=None, index#0=index#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, index_sum#0=index_sum#0, start#0=start#0}
debug: pred: {item#1=start#0, index#0=index#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, index_sum#0=index_sum#0}
debug: ready: item#1
debug: to_do: item#1, index#0, iteration_count#0, item_sum#0, index_sum#0
debug: * avail item#1
debug: * avail start#0
debug: * to_do index_sum#0
debug: * to_do item_sum#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: * to_do item#1
debug: loc: {item#1=item#1, index#0=index#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, index_sum#0=index_sum#0}
debug: pred: {item#1=item#1, index#0=index#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, index_sum#0=index_sum#0}
debug: ready: 
debug: to_do: item#1, index#0, iteration_count#0, item_sum#0, index_sum#0
debug: * to_do index_sum#0
debug: * to_do item_sum#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: * to_do item#1
debug: loc: {item#1=item#1, index#0=index#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, index_sum#0=index_sum#0}
debug: pred: {item#1=item#1, index#0=index#0, iteration_count#0=iteration_count#0, item_sum#0=item_sum#0, index_sum#0=index_sum#0}
debug: ready: 
debug: to_do: item#1, index#0, iteration_count#0, item_sum#0, index_sum#0
debug: * to_do index_sum#0
debug: * to_do item_sum#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: * to_do item#1
debug: Sequentializing parallel copies in test_cases.enumeration.contract.enumerate_tuple
debug: loc: {loop_counter%0#0=loop_counter%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=None, tup.0#0=tup.0#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=tup.0#0}
debug: ready: item#1
debug: to_do: loop_counter%0#0, iteration_count#0, item_concat#0, item#1
debug: * avail item#1
debug: * avail tup.0#0
debug: * to_do item#1
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=item#1}
debug: pred: {loop_counter%0#0=loop_counter%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=item#1}
debug: ready: 
debug: to_do: loop_counter%0#0, iteration_count#0, item_concat#0, item#1
debug: * to_do item#1
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=None, tup.1#0=tup.1#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=tup.1#0}
debug: ready: item#1
debug: to_do: loop_counter%0#0, iteration_count#0, item_concat#0, item#1
debug: * avail item#1
debug: * avail tup.1#0
debug: * to_do item#1
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=None, tup.2#0=tup.2#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=tup.2#0}
debug: ready: item#1
debug: to_do: loop_counter%0#0, iteration_count#0, item_concat#0, item#1
debug: * avail item#1
debug: * avail tup.2#0
debug: * to_do item#1
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do loop_counter%0#0
debug: loc: {loop_counter%0#0=loop_counter%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=None, tup.3#0=tup.3#0}
debug: pred: {loop_counter%0#0=loop_counter%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=tup.3#0}
debug: ready: item#1
debug: to_do: loop_counter%0#0, iteration_count#0, item_concat#0, item#1
debug: * avail item#1
debug: * avail tup.3#0
debug: * to_do item#1
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do loop_counter%0#0
debug: loc: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=None, index_sum#0=index_sum#0, tup.0#0=tup.0#0}
debug: pred: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=tup.0#0, index_sum#0=index_sum#0}
debug: ready: item#1
debug: to_do: index#0, iteration_count#0, item_concat#0, item#1, index_sum#0
debug: * avail item#1
debug: * avail tup.0#0
debug: * to_do index_sum#0
debug: * to_do item#1
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: loc: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=item#1, index_sum#0=index_sum#0}
debug: pred: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=item#1, index_sum#0=index_sum#0}
debug: ready: 
debug: to_do: index#0, iteration_count#0, item_concat#0, item#1, index_sum#0
debug: * to_do index_sum#0
debug: * to_do item#1
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: loc: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=None, index_sum#0=index_sum#0, tup.1#0=tup.1#0}
debug: pred: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=tup.1#0, index_sum#0=index_sum#0}
debug: ready: item#1
debug: to_do: index#0, iteration_count#0, item_concat#0, item#1, index_sum#0
debug: * avail item#1
debug: * avail tup.1#0
debug: * to_do index_sum#0
debug: * to_do item#1
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: loc: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=None, index_sum#0=index_sum#0, tup.2#0=tup.2#0}
debug: pred: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=tup.2#0, index_sum#0=index_sum#0}
debug: ready: item#1
debug: to_do: index#0, iteration_count#0, item_concat#0, item#1, index_sum#0
debug: * avail item#1
debug: * avail tup.2#0
debug: * to_do index_sum#0
debug: * to_do item#1
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: loc: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=None, index_sum#0=index_sum#0, tup.3#0=tup.3#0}
debug: pred: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, item#1=tup.3#0, index_sum#0=index_sum#0}
debug: ready: item#1
debug: to_do: index#0, iteration_count#0, item_concat#0, item#1, index_sum#0
debug: * avail item#1
debug: * avail tup.3#0
debug: * to_do index_sum#0
debug: * to_do item#1
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: Sequentializing parallel copies in test_cases.enumeration.contract.enumerate_bytes
debug: loc: {item_index_internal%0#0=item_index_internal%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0}
debug: pred: {item_index_internal%0#0=item_index_internal%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0}
debug: ready: 
debug: to_do: item_index_internal%0#0, iteration_count#0, item_concat#0
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do item_index_internal%0#0
debug: loc: {item_index_internal%0#0=item_index_internal%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0}
debug: pred: {item_index_internal%0#0=item_index_internal%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0}
debug: ready: 
debug: to_do: item_index_internal%0#0, iteration_count#0, item_concat#0
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do item_index_internal%0#0
debug: loc: {item_index_internal%0#0=item_index_internal%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0}
debug: pred: {item_index_internal%0#0=item_index_internal%0#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0}
debug: ready: 
debug: to_do: item_index_internal%0#0, iteration_count#0, item_concat#0
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do item_index_internal%0#0
debug: loc: {index#0=None, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, index_sum#0=index_sum#0, item_index_internal%1#0=item_index_internal%1#0}
debug: pred: {index#0=item_index_internal%1#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, index_sum#0=index_sum#0}
debug: ready: index#0
debug: to_do: index#0, iteration_count#0, item_concat#0, index_sum#0
debug: * avail index#0
debug: * avail item_index_internal%1#0
debug: * to_do index_sum#0
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: loc: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, index_sum#0=index_sum#0}
debug: pred: {index#0=index#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, index_sum#0=index_sum#0}
debug: ready: 
debug: to_do: index#0, iteration_count#0, item_concat#0, index_sum#0
debug: * to_do index_sum#0
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: loc: {index#0=None, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, index_sum#0=index_sum#0, item_index_internal%1#0=item_index_internal%1#0}
debug: pred: {index#0=item_index_internal%1#0, iteration_count#0=iteration_count#0, item_concat#0=item_concat#0, index_sum#0=index_sum#0}
debug: ready: index#0
debug: to_do: index#0, iteration_count#0, item_concat#0, index_sum#0
debug: * avail index#0
debug: * avail item_index_internal%1#0
debug: * to_do index_sum#0
debug: * to_do item_concat#0
debug: * to_do iteration_count#0
debug: * to_do index#0
debug: Sequentializing parallel copies in test_cases.enumeration.contract.EnumerationContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to enumeration/out/EnumerationContract.destructured.ir
debug: Inserted main_block@0.ops[6]: 'l-store-copy iteration_count#0 0'
debug: Replaced main_block@0.ops[8]: 'v-load iteration_count#0' with 'l-load iteration_count#0'
debug: Inserted main_block@0.ops[11]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_block@0.ops[13]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_block@0.ops[18]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_block@0.ops[20]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_block@0.ops[25]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_block@0.ops[27]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_block@0.ops[36]: 'l-store-copy iteration_count#0 0'
debug: Replaced main_block@0.ops[38]: 'v-load iteration_count#0' with 'l-load iteration_count#0'
debug: Inserted main_block@0.ops[41]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_block@0.ops[43]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_block@0.ops[48]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_block@0.ops[50]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_block@0.ops[55]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_block@0.ops[57]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_block@0.ops[63]: 'l-store-copy iteration_count#0 0'
debug: Replaced main_block@0.ops[65]: 'v-load iteration_count#0' with 'l-load iteration_count#0'
debug: Inserted main_block@0.ops[68]: 'l-store-copy tmp%6#0 0'
debug: Replaced main_block@0.ops[70]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main_block@0.ops[75]: 'l-store-copy tmp%7#0 0'
debug: Replaced main_block@0.ops[77]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main_block@0.ops[82]: 'l-store-copy tmp%8#0 0'
debug: Replaced main_block@0.ops[84]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main_block@0.ops[5]: 'l-store-copy item_sum#0 1'
debug: Replaced main_block@0.ops[16]: 'v-load item_sum#0' with 'l-load item_sum#0'
debug: Inserted main_block@0.ops[36]: 'l-store-copy item_concat#0 1'
debug: Replaced main_block@0.ops[47]: 'v-load item_concat#0' with 'l-load item_concat#0'
debug: Inserted main_block@0.ops[64]: 'l-store-copy item_concat#0 1'
debug: Replaced main_block@0.ops[75]: 'v-load item_concat#0' with 'l-load item_concat#0'
debug: Inserted main_block@0.ops[4]: 'l-store-copy index_sum#0 2'
debug: Replaced main_block@0.ops[24]: 'v-load index_sum#0' with 'l-load index_sum#0'
debug: Inserted main_block@0.ops[36]: 'l-store-copy index_sum#0 2'
debug: Replaced main_block@0.ops[56]: 'v-load index_sum#0' with 'l-load index_sum#0'
debug: Inserted main_block@0.ops[65]: 'l-store-copy index_sum#0 2'
debug: Replaced main_block@0.ops[85]: 'v-load index_sum#0' with 'l-load index_sum#0'
debug: Inserted enumerate_urange_for_header@1.ops[3]: 'l-store-copy continue_looping%0#0 0'
debug: Replaced enumerate_urange_for_header@1.ops[5]: 'v-load continue_looping%0#0' with 'l-load continue_looping%0#0'
debug: Inserted enumerate_urange_for_body@2.ops[6]: 'l-store-copy item#1 1'
debug: Replaced enumerate_urange_for_body@2.ops[9]: 'v-load item#1' with 'l-load item#1'
debug: Inserted enumerate_urange_for_header@5.ops[3]: 'l-store-copy continue_looping%1#0 0'
debug: Replaced enumerate_urange_for_header@5.ops[5]: 'v-load continue_looping%1#0' with 'l-load continue_looping%1#0'
debug: Inserted enumerate_urange_for_body@6.ops[6]: 'l-store-copy item#1 1'
debug: Replaced enumerate_urange_for_body@6.ops[13]: 'v-load item#1' with 'l-load item#1'
debug: Inserted enumerate_urange_for_body@6.ops[11]: 'l-store-copy index#0 2'
debug: Replaced enumerate_urange_for_body@6.ops[18]: 'v-load index#0' with 'l-load index#0'
debug: Inserted enumerate_tuple_for_body@7.ops[10]: 'l-store-copy index#0 1'
debug: Replaced enumerate_tuple_for_body@7.ops[13]: 'v-load index#0' with 'l-load index#0'
debug: Inserted enumerate_tuple_for_body@7.ops[12]: 'l-store-copy index_sum#0 1'
debug: Replaced enumerate_tuple_for_body@7.ops[18]: 'v-load index_sum#0' with 'l-load index_sum#0'
debug: Inserted enumerate_tuple_for_body@7.ops[7]: 'l-store-copy item_concat#0 0'
debug: Replaced enumerate_tuple_for_body@7.ops[18]: 'v-load item_concat#0' with 'l-load item_concat#0'
debug: Inserted enumerate_tuple_for_body@7.ops[3]: 'l-store-copy iteration_count#0 0'
debug: Replaced enumerate_tuple_for_body@7.ops[18]: 'v-load iteration_count#0' with 'l-load iteration_count#0'
debug: Inserted enumerate_bytes_for_header@1.ops[3]: 'l-store-copy continue_looping%0#0 0'
debug: Replaced enumerate_bytes_for_header@1.ops[5]: 'v-load continue_looping%0#0' with 'l-load continue_looping%0#0'
debug: Inserted enumerate_bytes_for_body@2.ops[4]: 'l-store-copy item#0 0'
debug: Replaced enumerate_bytes_for_body@2.ops[11]: 'v-load item#0' with 'l-load item#0'
debug: Inserted enumerate_bytes_for_body@2.ops[2]: 'l-store-copy item_index_internal%0#0 1'
debug: Replaced enumerate_bytes_for_body@2.ops[15]: 'v-load item_index_internal%0#0' with 'l-load item_index_internal%0#0'
debug: Inserted enumerate_bytes_after_for@4.ops[1]: 'l-store-copy item_index_internal%1#0 0'
debug: Replaced enumerate_bytes_after_for@4.ops[3]: 'v-load item_index_internal%1#0' with 'l-load item_index_internal%1#0'
debug: Inserted enumerate_bytes_for_header@5.ops[3]: 'l-store-copy continue_looping%1#0 0'
debug: Replaced enumerate_bytes_for_header@5.ops[5]: 'v-load continue_looping%1#0' with 'l-load continue_looping%1#0'
debug: Inserted enumerate_bytes_for_body@6.ops[20]: 'l-store-copy item_index_internal%1#0 0'
debug: Replaced enumerate_bytes_for_body@6.ops[22]: 'v-load item_index_internal%1#0' with 'l-load item_index_internal%1#0'
debug: Inserted enumerate_bytes_for_body@6.ops[15]: 'l-store-copy index#0 1'
debug: Replaced enumerate_bytes_for_body@6.ops[18]: 'v-load index#0' with 'l-load index#0'
debug: Inserted enumerate_bytes_for_body@6.ops[4]: 'l-store-copy item#0 0'
debug: Replaced enumerate_bytes_for_body@6.ops[11]: 'v-load item#0' with 'l-load item#0'
debug: Inserted enumerate_bytes_for_body@6.ops[2]: 'l-store-copy index#0 1'
debug: Replaced enumerate_bytes_for_body@6.ops[16]: 'v-load index#0' with 'l-load index#0'
debug: Found 4 edge set/s for test_cases.enumeration.contract.enumerate_urange
debug: Found 4 edge set/s for test_cases.enumeration.contract.enumerate_tuple
debug: Allocated 3 variable/s to x-stack: index#0, item#1, loop_counter%0#0
debug: shared x-stack for enumerate_tuple_block@0 -> enumerate_tuple_for_body@1: item#1, loop_counter%0#0
debug: shared x-stack for enumerate_tuple_for_header_1@3 -> enumerate_tuple_for_body@1: item#1, loop_counter%0#0
debug: shared x-stack for enumerate_tuple_for_header_2@4 -> enumerate_tuple_for_body@1: item#1, loop_counter%0#0
debug: shared x-stack for enumerate_tuple_for_header_3@5 -> enumerate_tuple_for_body@1: item#1, loop_counter%0#0
debug: shared x-stack for enumerate_tuple_after_for@6 -> enumerate_tuple_for_body@7: item#1, index#0
debug: shared x-stack for enumerate_tuple_for_header_1@9 -> enumerate_tuple_for_body@7: item#1, index#0
debug: shared x-stack for enumerate_tuple_for_header_2@10 -> enumerate_tuple_for_body@7: item#1, index#0
debug: shared x-stack for enumerate_tuple_for_header_3@11 -> enumerate_tuple_for_body@7: item#1, index#0
debug: Found 4 edge set/s for test_cases.enumeration.contract.enumerate_bytes
debug: test_cases.enumeration.contract.enumerate_urange f-stack entry: ['index#0']
debug: test_cases.enumeration.contract.enumerate_urange f-stack on first store: ['iteration_count#0', 'item_sum#0', 'index_sum#0', 'item#1']
debug: test_cases.enumeration.contract.enumerate_tuple f-stack entry: []
debug: test_cases.enumeration.contract.enumerate_tuple f-stack on first store: ['iteration_count#0', 'item_concat#0', 'index_sum#0']
debug: test_cases.enumeration.contract.enumerate_bytes f-stack entry: ['index#0']
debug: test_cases.enumeration.contract.enumerate_bytes f-stack on first store: ['iteration_count#0', 'item_concat#0', 'index_sum#0', 'bytes_length%0#0', 'item_index_internal%0#0']
info: Writing enumeration/out/EnumerationContract.approval.teal
info: Writing enumeration/out/EnumerationContract.clear.teal
info: Writing enumeration/out/EnumerationContract.approval.bin
info: Writing enumeration/out/EnumerationContract.clear.bin
info: Writing enumeration/out/EnumerationContract.approval.puya.map
info: Writing enumeration/out/EnumerationContract.clear.puya.map