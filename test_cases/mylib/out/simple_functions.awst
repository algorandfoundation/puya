ONE = 1
HELLO = b'\xf0\x9f\x91\x8b'

subroutine three(): uint64
{
  a: uint64 = 1u + 1u
  b: uint64 = a + 1u
  return b
}

subroutine hello_world(): bytes
{
  hello: bytes = hex<"F09F918B">
  comma: bytes = b64<"4aCI">
  world: bytes = hex<"20776F726C64">
  return hello + comma + world
}

subroutine safe_add(x: uint64, y: uint64): tuple<uint64,bool>
{
  (hi, lo): tuple<uint64,uint64> = addw(x, y)
  did_overflow: bool = hi > 0u
  return (lo, did_overflow)
}

subroutine safe_six(): tuple<uint64,bool>
{
  return test_cases.mylib.simple_functions::safe_add(test_cases.mylib.simple_functions::three(), test_cases.mylib.simple_functions::three())
}

subroutine itoa(i: uint64): bytes
{
  digits: bytes = hex<"30313233343536373839">
  radix: uint64 = len(digits)
  if (i < radix) {
    return digits[i]
  }
  return test_cases.mylib.simple_functions::itoa(i // radix) + digits[i % radix]
}

subroutine itoa_loop(num: uint64): bytes
{
  digits: bytes = hex<"30313233343536373839">
  result: bytes = hex<"">
  while (num >= 10u) {
    result: bytes = digits[num % 10u] + result
    num //= 10u
  }
  result: bytes = digits[num] + result
  return result
}

subroutine inefficient_multiply(a: uint64, b: uint64): uint64
{
  if (a == 0u or b == 0u) {
    return a
  }
  if (a < b) {
    smaller: uint64 = a
    bigger: uint64 = b
  } else {
    smaller: uint64 = b
    bigger: uint64 = a
  }
  result: uint64 = 0u
  for _i in range(0u, smaller, 1u) {
    result += bigger
  }
  return result
}

subroutine test_and_uint64(): uint64
{
  return (!(reinterpret_cast<bool>(1u))) ? (1u) : (2u)
}