#pragma version 10

test_cases.string_ops.contract.MyContract.approval_program:
    // string_ops/contract.py:6
    // assert Bytes(b"brown fox") in Bytes(b"The quick brown fox jumped over the lazy dog")
    pushbytes 0x62726f776e20666f78
    pushbytes 0x54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67
    callsub is_substring
    assert
    // string_ops/contract.py:7
    // assert b"brown fox" in Bytes(b"The quick brown fox jumped over the lazy dog")
    pushbytes 0x62726f776e20666f78
    pushbytes 0x54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67
    callsub is_substring
    assert
    // string_ops/contract.py:8
    // assert Bytes(b"red fox") not in Bytes(b"The quick brown fox jumped over the lazy dog")
    pushbytes 0x72656420666f78
    pushbytes 0x54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67
    callsub is_substring
    !
    assert
    // string_ops/contract.py:9
    // assert b"red fox" not in Bytes(b"The quick brown fox jumped over the lazy dog")
    pushbytes 0x72656420666f78
    pushbytes 0x54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67
    callsub is_substring
    !
    assert
    // string_ops/contract.py:11
    // return True
    pushint 1 // 1
    return


// _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:
    proto 2 1
    pushint 0 // 0

is_substring_while_top@1:
    frame_dig -2
    len
    frame_dig 0
    uncover 1
    +
    frame_dig -1
    len
    <=
    bz is_substring_after_while@5
    frame_dig -2
    len
    frame_dig 0
    dup
    cover 2
    uncover 1
    +
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -2
    uncover 1
    ==
    bz is_substring_after_if_else@4
    pushint 1 // 1
    uncover 1
    retsub

is_substring_after_if_else@4:
    frame_dig 0
    pushint 1 // 1
    +
    frame_bury 0
    b is_substring_while_top@1

is_substring_after_while@5:
    pushint 0 // 0
    uncover 1
    retsub
