#pragma version 10

test_cases.string_ops.contract.MyContract.approval_program:
    // string_ops/contract.py:7
    // Bytes(b"brown fox"), Bytes(b"The quick brown fox jumped over the lazy dog")
    byte "brown fox"
    byte "The quick brown fox jumped over the lazy dog"
    // string_ops/contract.py:6-8
    // assert is_in_str(
    //     Bytes(b"brown fox"), Bytes(b"The quick brown fox jumped over the lazy dog")
    // )
    callsub is_in_str
    assert
    // string_ops/contract.py:10
    // Bytes(b"red fox"), Bytes(b"The quick brown fox jumped over the lazy dog")
    byte "red fox"
    byte "The quick brown fox jumped over the lazy dog"
    // string_ops/contract.py:9-11
    // assert not is_in_str(
    //     Bytes(b"red fox"), Bytes(b"The quick brown fox jumped over the lazy dog")
    // )
    callsub is_in_str
    !
    assert
    // string_ops/contract.py:13
    // return True
    int 1
    return


// test_cases.string_ops.contract.is_in_str(a: bytes, b: bytes) -> uint64:
is_in_str:
    // string_ops/contract.py:19-20
    // @subroutine
    // def is_in_str(a: Bytes, b: Bytes) -> bool:
    proto 2 1
    // string_ops/contract.py:21
    // return a in b
    frame_dig -2
    frame_dig -1
    callsub is_substring
    retsub


// algopy_lib_bytes.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:
    // <algopy>/algopy_lib_bytes.py:4-5
    proto 2 1
    // <algopy>/algopy_lib_bytes.py:10
    int 0

is_substring_while_top@1:
    // <algopy>/algopy_lib_bytes.py:11
    frame_dig -2
    len
    frame_dig 0
    uncover 1
    +
    frame_dig -1
    len
    <=
    bz is_substring_after_while@5
    // <algopy>/algopy_lib_bytes.py:12
    frame_dig -2
    len
    frame_dig 0
    dup
    cover 2
    uncover 1
    +
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -2
    uncover 1
    ==
    bz is_substring_after_if_else@4
    // <algopy>/algopy_lib_bytes.py:13
    int 1
    uncover 1
    retsub

is_substring_after_if_else@4:
    // <algopy>/algopy_lib_bytes.py:14
    frame_dig 0
    int 1
    +
    frame_bury 0
    b is_substring_while_top@1

is_substring_after_while@5:
    // <algopy>/algopy_lib_bytes.py:15
    int 0
    uncover 1
    retsub
