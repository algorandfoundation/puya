contract test_cases.string_ops.contract.MyContract:
    program approval:
        subroutine test_cases.string_ops.contract.MyContract.approval_program() -> bool:
            block@0: // L5
                let tmp%0#0: bool = test_cases.string_ops.contract.is_in_str(0x62726f776e20666f78, 0x54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67)
                (assert tmp%0#0)
                let tmp%1#0: bool = test_cases.string_ops.contract.is_in_str(0x72656420666f78, 0x54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67)
                let tmp%2#0: bool = (! tmp%1#0)
                (assert tmp%2#0)
                return 1u
        
        subroutine test_cases.string_ops.contract.is_in_str(a: bytes, b: bytes) -> bool:
            block@0: // L19
                let tmp%0#0: bool = algopy_lib_bytes.is_substring(a#0, b#0)
                return tmp%0#0
        
        subroutine algopy_lib_bytes.is_substring(item: bytes, sequence: bytes) -> bool:
            block@0: // L4
                let start#0: uint64 = 0u
                goto block@1
            block@1: // while_top_L11
                let tmp%0#0: uint64 = (len item#0)
                let tmp%1#0: uint64 = (+ start#0 tmp%0#0)
                let tmp%2#0: uint64 = (len sequence#0)
                let tmp%3#0: bool = (<= tmp%1#0 tmp%2#0)
                goto tmp%3#0 ? block@2 : block@5
            block@2: // while_body_L11
                let tmp%6#0: bytes = (substring3 sequence#0 start#0 tmp%1#0)
                let tmp%7#0: bool = (== item#0 tmp%6#0)
                goto tmp%7#0 ? block@3 : block@4
            block@3: // if_body_L12
                return 1u
            block@4: // after_if_else_L12
                let start#0: uint64 = (+ start#0 1u)
                goto block@1
            block@5: // after_while_L11
                return 0u
    
    program clear-state:
        subroutine test_cases.string_ops.contract.MyContract.clear_state_program() -> bool:
            block@0: // L15
                return 1u