main test_cases.string_ops.contract.MyContract.approval_program:
    block@0: // L5
        let tmp%0#0: bool = _puya_lib.bytes_.is_substring(0x62726f776e20666f78, 0x54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67)
        (assert tmp%0#0)
        let tmp%1#0: bool = _puya_lib.bytes_.is_substring(0x62726f776e20666f78, 0x54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67)
        (assert tmp%1#0)
        let tmp%2#0: bool = _puya_lib.bytes_.is_substring(0x72656420666f78, 0x54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0)
        let tmp%4#0: bool = _puya_lib.bytes_.is_substring(0x72656420666f78, 0x54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67)
        let tmp%5#0: bool = (! tmp%4#0)
        (assert tmp%5#0)
        return 1u

subroutine _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> bool:
    block@0: // L4
        let start#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L11
        let start#1: uint64 = Ï†(start#0 <- block@0, start#2 <- block@4)
        let tmp%0#0: uint64 = (len item#0)
        let tmp%1#0: uint64 = (+ start#1 tmp%0#0)
        let tmp%2#0: uint64 = (len sequence#0)
        let tmp%3#0: bool = (<= tmp%1#0 tmp%2#0)
        goto tmp%3#0 ? block@2 : block@5
    block@2: // while_body_L12
        let tmp%4#0: uint64 = (len item#0)
        let tmp%5#0: uint64 = (+ start#1 tmp%4#0)
        let tmp%6#0: bytes = (substring3 sequence#0 start#1 tmp%5#0)
        let tmp%7#0: bool = (== item#0 tmp%6#0)
        goto tmp%7#0 ? block@3 : block@4
    block@3: // if_body_L13
        return 1u
    block@4: // after_if_else_L12
        let tmp%8#0: uint64 = (+ start#1 1u)
        let start#2: uint64 = tmp%8#0
        goto block@1
    block@5: // after_while_L11
        return 0u