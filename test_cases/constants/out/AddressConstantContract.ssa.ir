contract test_cases.constants.address_constant.AddressConstantContract:
    program approval:
        subroutine test_cases.constants.address_constant.AddressConstantContract.approval_program() -> uint64:
            block@0: // L5
                let some_address#0: bytes = (global ZeroAddress)
                let tmp%0#0: bytes = (global ZeroAddress)
                let tmp%1#0: uint64 = (== some_address#0 tmp%0#0)
                (assert tmp%1#0)
                let some_address#1: bytes = addr VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA
                let tmp%2#0: bytes = (global ZeroAddress)
                let tmp%3#0: uint64 = (!= some_address#1 tmp%2#0)
                (assert tmp%3#0)
                let some_address#2: bytes = some_address#1
                let awst_tmp%0#0: bytes = some_address#2
                let tmp%4#0: uint64 = (len awst_tmp%0#0)
                let tmp%5#0: uint64 = (== 32u tmp%4#0)
                let (value%0#0: bytes, check%0#0: uint64) = (awst_tmp%0#0, tmp%5#0)
                (assert check%0#0) // Address length is 32 bytes
                let some_address#3: bytes = value%0#0
                let sender#0: bytes = (txn Sender)
                let sender_bytes#0: bytes = sender#0
                (log sender_bytes#0)
                let tmp%6#0: bytes = (txn Sender)
                let is_some_address#0: uint64 = (== tmp%6#0 some_address#3)
                let tmp%7#0: uint64 = (! is_some_address#0)
                return tmp%7#0
    
    program clear-state:
        subroutine test_cases.constants.address_constant.AddressConstantContract.clear_state_program() -> uint64:
            block@0: // L20
                return 1u