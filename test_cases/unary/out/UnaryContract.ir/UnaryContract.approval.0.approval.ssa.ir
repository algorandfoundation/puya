main test_cases.unary.contract.UnaryContract.approval_program:
    block@0: // L14
        test_cases.unary.contract.uint_unary()
        test_cases.unary.contract.biguint_unary()
        test_cases.unary.contract.bytes_unary()
        return 1u

subroutine test_cases.unary.contract.uint_unary() -> void:
    block@0: // L25
        let tmp%0#0: bool = (== 0u 0u)
        (assert tmp%0#0) // not uint
        let loop_counter%0#0: uint64 = 0u
        let i#0: uint64 = 1u
        goto block@1
    block@1: // for_body_L32
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4, loop_counter%0#4 <- block@5)
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3, i#3 <- block@4, i#4 <- block@5)
        let tmp%1#0: uint64 = (- 18446744073709551615u i#1)
        let tmp%2#0: uint64 = (~ tmp%1#0)
        let tmp%3#0: bool = (== tmp%2#0 i#1)
        (assert tmp%3#0) // ~ uint
        goto block@2
    block@2: // for_footer_L31
        goto_nth [block@3, block@4, block@5][loop_counter%0#1] else goto block@6
    block@3: // for_header_1_L31
        let loop_counter%0#2: uint64 = 1u
        let i#2: uint64 = 2u
        goto block@1
    block@4: // for_header_2_L31
        let loop_counter%0#3: uint64 = 2u
        let i#3: uint64 = 150u
        goto block@1
    block@5: // for_header_3_L31
        let loop_counter%0#4: uint64 = 3u
        let i#4: uint64 = 18446744073709551615u
        goto block@1
    block@6: // after_for_L31
        return 

subroutine test_cases.unary.contract.biguint_unary() -> void:
    block@0: // L35
        let tmp%0#0: bool = (b== 0b 0b)
        (assert tmp%0#0) // not biguint
        return 

subroutine test_cases.unary.contract.bytes_unary() -> void:
    block@0: // L41
        let tmp%0#0: uint64 = (len 0x)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0) // not bytes
        let tmp%2#0: bytes = (b~ 0xff)
        let tmp%3#0: bool = (== tmp%2#0 0x00)
        (assert tmp%3#0) // ~ bytes
        let tmp%4#0: bytes = (b~ 0x0000)
        let tmp%5#0: bool = (== tmp%4#0 0xffff)
        (assert tmp%5#0) // ~ bytes
        return 