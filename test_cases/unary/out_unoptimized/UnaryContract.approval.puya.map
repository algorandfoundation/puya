{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAcQ;;;AACA;;;AACA;;;AAEO;AAAP;AAMP;;;;;;AAGc;AAAJ;AAAA;AAAP;;AAGU;;;;AACG;AAAA;;AAAA;AAAA;;AAAA;AAAF;AAAA;AAAP;;;;AADR;;AAAA;;;;;;;;AAAA;;;;;;;;AAAiD;AAAzC;;;;;;;;AAA4B;;;AAA5B;;;;;;;;AAAiB;AAAjB;;;;;;;;AAOO;;AAAJ;;AAAA;AAAP;;;;;AAMW;;AAAJ;AAAA;AAAA;AAAP;AAGQ;;;AAAD;AAAyB;;;AAAzB;AAAP;AACQ;;;;AAAD;AAA2B;;;;AAA3B;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.unary.contract.UnaryContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 18446744073709551615 2"
    },
    "16": {
      "op": "b main_block@0"
    },
    "19": {
      "block": "main_block@0",
      "stack_in": [],
      "callsub": "test_cases.unary.contract.uint_unary",
      "op": "callsub uint_unary"
    },
    "22": {
      "callsub": "test_cases.unary.contract.biguint_unary",
      "op": "callsub biguint_unary"
    },
    "25": {
      "callsub": "test_cases.unary.contract.bytes_unary",
      "op": "callsub bytes_unary"
    },
    "28": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "29": {
      "op": "return",
      "stack_out": []
    },
    "30": {
      "subroutine": "test_cases.unary.contract.uint_unary",
      "params": {},
      "block": "uint_unary",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "33": {
      "op": "b uint_unary_block@0"
    },
    "36": {
      "block": "uint_unary_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "37": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "38": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "39": {
      "error": "not uint",
      "op": "assert // not uint",
      "stack_out": []
    },
    "40": {
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0"
      ]
    },
    "41": {
      "op": "intc_1 // 1",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0",
        "i#0"
      ]
    },
    "42": {
      "op": "b uint_unary_for_body@1"
    },
    "45": {
      "block": "uint_unary_for_body@1",
      "stack_in": [
        "loop_counter%0#0",
        "i#0"
      ],
      "op": "intc_2 // 18446744073709551615",
      "defined_out": [
        "18446744073709551615"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "18446744073709551615"
      ]
    },
    "46": {
      "op": "frame_dig 1",
      "defined_out": [
        "18446744073709551615",
        "i#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "18446744073709551615",
        "i#0"
      ]
    },
    "48": {
      "op": "dup",
      "defined_out": [
        "18446744073709551615",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "18446744073709551615",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "49": {
      "op": "cover 2",
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "i#0",
        "18446744073709551615",
        "i#0 (copy)"
      ]
    },
    "51": {
      "op": "-",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "52": {
      "op": "~",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "53": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "54": {
      "error": "~ uint",
      "op": "assert // ~ uint",
      "stack_out": [
        "loop_counter%0#0",
        "i#0"
      ]
    },
    "55": {
      "op": "b uint_unary_for_footer@2"
    },
    "58": {
      "block": "uint_unary_for_footer@2",
      "stack_in": [
        "loop_counter%0#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "loop_counter%0#0"
      ]
    },
    "60": {
      "op": "switch uint_unary_for_header_1@3 uint_unary_for_header_2@4 uint_unary_for_header_3@5",
      "stack_out": [
        "loop_counter%0#0",
        "i#0"
      ]
    },
    "68": {
      "op": "b uint_unary_after_for@6"
    },
    "71": {
      "block": "uint_unary_after_for@6",
      "stack_in": [
        "loop_counter%0#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "72": {
      "block": "uint_unary_for_header_3@5",
      "stack_in": [
        "loop_counter%0#0",
        "i#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "3"
      ]
    },
    "74": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0",
        "i#0"
      ]
    },
    "76": {
      "op": "intc_2 // 18446744073709551615",
      "defined_out": [
        "18446744073709551615"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "18446744073709551615"
      ]
    },
    "77": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0",
        "i#0"
      ]
    },
    "79": {
      "op": "b uint_unary_for_body@1"
    },
    "82": {
      "block": "uint_unary_for_header_2@4",
      "stack_in": [
        "loop_counter%0#0",
        "i#0"
      ],
      "op": "intc_3 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "2"
      ]
    },
    "83": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0",
        "i#0"
      ]
    },
    "85": {
      "op": "pushint 150 // 150",
      "defined_out": [
        "150"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "150"
      ]
    },
    "88": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0",
        "i#0"
      ]
    },
    "90": {
      "op": "b uint_unary_for_body@1"
    },
    "93": {
      "block": "uint_unary_for_header_1@3",
      "stack_in": [
        "loop_counter%0#0",
        "i#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "1"
      ]
    },
    "94": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0",
        "i#0"
      ]
    },
    "96": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "i#0",
        "2"
      ]
    },
    "97": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0",
        "i#0"
      ]
    },
    "99": {
      "op": "b uint_unary_for_body@1"
    },
    "102": {
      "subroutine": "test_cases.unary.contract.biguint_unary",
      "params": {},
      "block": "biguint_unary",
      "stack_in": [],
      "op": "b biguint_unary_block@0"
    },
    "105": {
      "block": "biguint_unary_block@0",
      "stack_in": [],
      "op": "pushbytes 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "107": {
      "op": "pushbytes 0x",
      "stack_out": [
        "0x",
        "0x"
      ]
    },
    "109": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "110": {
      "error": "not biguint",
      "op": "assert // not biguint",
      "stack_out": []
    },
    "111": {
      "retsub": true,
      "op": "retsub"
    },
    "112": {
      "subroutine": "test_cases.unary.contract.bytes_unary",
      "params": {},
      "block": "bytes_unary",
      "stack_in": [],
      "op": "b bytes_unary_block@0"
    },
    "115": {
      "block": "bytes_unary_block@0",
      "stack_in": [],
      "op": "pushbytes 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "117": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "118": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "119": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "120": {
      "error": "not bytes",
      "op": "assert // not bytes",
      "stack_out": []
    },
    "121": {
      "op": "pushbytes 0xff",
      "defined_out": [
        "0xff"
      ],
      "stack_out": [
        "0xff"
      ]
    },
    "124": {
      "op": "b~",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "125": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x00"
      ]
    },
    "128": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "129": {
      "error": "~ bytes",
      "op": "assert // ~ bytes",
      "stack_out": []
    },
    "130": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "134": {
      "op": "b~",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "135": {
      "op": "pushbytes 0xffff",
      "defined_out": [
        "0xffff",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0xffff"
      ]
    },
    "139": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "140": {
      "error": "~ bytes",
      "op": "assert // ~ bytes",
      "stack_out": []
    },
    "141": {
      "retsub": true,
      "op": "retsub"
    }
  }
}