contract test_cases.unary.contract.UnaryContract:
    program approval:
        subroutine test_cases.unary.contract.UnaryContract.approval_program() -> bool:
            block@0: // L14
                test_cases.unary.contract.uint_unary()
                test_cases.unary.contract.biguint_unary()
                test_cases.unary.contract.bytes_unary()
                return 1u
        
        subroutine test_cases.unary.contract.uint_unary() -> void:
            block@0: // L25
                let loop_counter%0#0: uint64 = 0u
                let i#0: uint64 = 1u
                goto block@1
            block@1: // for_body_L32
                let tmp%1#0: uint64 = (- 18446744073709551615u i#0)
                let tmp%2#0: uint64 = (~ tmp%1#0)
                let tmp%3#0: bool = (== tmp%2#0 i#0)
                (assert tmp%3#0) // ~ uint
                goto_nth [block@3, block@4, block@5][loop_counter%0#0] else return 
            block@3: // for_header_1_L30
                let loop_counter%0#0: uint64 = 1u
                let i#0: uint64 = 2u
                goto block@1
            block@4: // for_header_2_L30
                let loop_counter%0#0: uint64 = 2u
                let i#0: uint64 = 150u
                goto block@1
            block@5: // for_header_3_L30
                let loop_counter%0#0: uint64 = 3u
                let i#0: uint64 = 18446744073709551615u
                goto block@1
        
        subroutine test_cases.unary.contract.biguint_unary() -> void:
            block@0: // L35
                return 
        
        subroutine test_cases.unary.contract.bytes_unary() -> void:
            block@0: // L41
                return 
    
    program clear-state:
        subroutine test_cases.unary.contract.UnaryContract.clear_state_program() -> bool:
            block@0: // L21
                return 1u