{
  "version": 3,
  "sources": [
    "../base2.py",
    "../gp.py"
  ],
  "mappings": ";;;;;;AAOY;;;;;;;;;;;;;;;;AAAJ;ACAI;;;;;;;;;;;;;AAAJ;ADFR;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;ACKK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;ADAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;AAAL;;;AAEY;;;;;;;;;;;;;;AAAJ;ACII;;;;;;;;;;;AAAJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.diamond_mro.base2.Base2.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "6": {
      "op": "pushbytes \"base2.__init__\""
    },
    "22": {
      "op": "log"
    },
    "23": {
      "op": "pushbytes \"gp.__init__\""
    },
    "36": {
      "op": "log"
    },
    "37": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "39": {
      "op": "bz main_after_if_else@7",
      "stack_out": []
    },
    "42": {
      "op": "pushbytess 0x4f045d84 0x4c5c61ba // method \"method()void\", method \"create()void\""
    },
    "54": {
      "op": "txna ApplicationArgs 0"
    },
    "57": {
      "op": "match main_method_route@5 main_create_route@6"
    },
    "63": {
      "block": "main_after_if_else@7",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "65": {
      "op": "return"
    },
    "66": {
      "block": "main_create_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "68": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "69": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "70": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "72": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "73": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "74": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "76": {
      "op": "return"
    },
    "77": {
      "block": "main_method_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "79": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "80": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "81": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "83": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "84": {
      "callsub": "test_cases.diamond_mro.base2.Base2.method",
      "op": "callsub method"
    },
    "87": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "89": {
      "op": "return"
    },
    "90": {
      "subroutine": "test_cases.diamond_mro.base2.Base2.method",
      "params": {},
      "block": "method",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "93": {
      "op": "pushbytes \"base2.method\"",
      "defined_out": [
        "\"base2.method\""
      ],
      "stack_out": [
        "\"base2.method\""
      ]
    },
    "107": {
      "op": "log",
      "stack_out": []
    },
    "108": {
      "op": "pushbytes \"gp.method\"",
      "defined_out": [
        "\"gp.method\""
      ],
      "stack_out": [
        "\"gp.method\""
      ]
    },
    "119": {
      "op": "log",
      "stack_out": []
    },
    "120": {
      "retsub": true,
      "op": "retsub"
    }
  }
}