contract test_cases.diamond_mro.base2.Base2:
    program approval:
        subroutine test_cases.diamond_mro.base2.Base2.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = (txn ApplicationID)
                goto tmp%0#0 ? block@2 : block@1
            block@1: // call __init___L1
                test_cases.diamond_mro.base2.Base2.__init__()
                goto block@2
            block@2: // after_if_else_L1
                let tmp%1#0: bool = test_cases.diamond_mro.base2.Base2.__puya_arc4_router__()
                return tmp%1#0
        
        subroutine test_cases.diamond_mro.base2.Base2.__init__() -> void:
            block@0: // L7
                (log "base2.__init__")
                test_cases.diamond_mro.gp.GP.__init__()
                return 
        
        subroutine test_cases.diamond_mro.gp.GP.__init__() -> void:
            block@0: // L7
                (log "gp.__init__")
                return 
        
        subroutine test_cases.diamond_mro.base2.Base2.__puya_arc4_router__() -> bool:
            block@0: // L6
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@7
            block@1: // abi_routing_L6
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "method()void" => block@2, method "create()void" => block@3, * => return 0u}
            block@2: // method_route_L11
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                test_cases.diamond_mro.base2.Base2.method()
                return 1u
            block@3: // create_route_L11
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (! tmp%7#0)
                (assert tmp%8#0) // OnCompletion is NoOp
                let tmp%9#0: uint64 = (txn ApplicationID)
                let tmp%10#0: bool = (! tmp%9#0)
                (assert tmp%10#0) // is creating
                return 1u
            block@7: // after_if_else_L6
                return 0u
        
        subroutine test_cases.diamond_mro.base2.Base2.method() -> void:
            block@0: // L11
                (log "base2.method")
                test_cases.diamond_mro.gp.GP.method()
                return 
        
        subroutine test_cases.diamond_mro.gp.GP.method() -> void:
            block@0: // L15
                (log "gp.method")
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u