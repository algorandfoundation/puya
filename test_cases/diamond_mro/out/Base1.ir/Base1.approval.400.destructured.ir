main test_cases.diamond_mro.base1.Base1.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (log "base1.__init__")
        (log "gp.__init__")
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@7
    block@4: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "method()void" => block@5, method "create()void" => block@6, * => block@7}
    block@5: // method_route_L11
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.diamond_mro.base1.Base1.method()
        let test_cases.diamond_mro.base1.Base1.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.diamond_mro.base1.Base1.__puya_arc4_router__%0#0
        goto block@8
    block@6: // create_route_L11
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // can only call when creating
        let test_cases.diamond_mro.base1.Base1.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.diamond_mro.base1.Base1.__puya_arc4_router__%0#0
        goto block@8
    block@7: // after_if_else_L6
        let test_cases.diamond_mro.base1.Base1.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.diamond_mro.base1.Base1.__puya_arc4_router__%0#0
        goto block@8
    block@8: // after_inlined_test_cases.diamond_mro.base1.Base1.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.diamond_mro.base1.Base1.method() -> void:
    block@0: // L11
        (log "base1.method")
        (log "gp.method")
        return 