contract GP
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  
  subroutine test_cases.diamond_mro.gp.GP.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.diamond_mro.gp.GP.__init__(): void
  {
    log('gp.__init__')
    void
  }
  
  abimethod test_cases.diamond_mro.gp.GP.create(): void
  {
  }
  
  abimethod test_cases.diamond_mro.gp.GP.method(): void
  {
    log('gp.method')
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
}

contract Base2
{
  method_resolution_order: (
    test_cases.diamond_mro.gp.GP,
    algopy.arc4.ARC4Contract,
  )
  
  subroutine test_cases.diamond_mro.base2.Base2.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.diamond_mro.base2.Base2.__init__(): void
  {
    log('base2.__init__')
    super::__init__()
  }
  
  abimethod test_cases.diamond_mro.base2.Base2.method(): void
  {
    log('base2.method')
    super::method()
  }
  
  subroutine test_cases.diamond_mro.gp.GP.__init__(): void
  {
    log('gp.__init__')
    void
  }
  
  abimethod test_cases.diamond_mro.gp.GP.create(): void
  {
  }
  
  abimethod test_cases.diamond_mro.gp.GP.method(): void
  {
    log('gp.method')
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
}

contract Base1
{
  method_resolution_order: (
    test_cases.diamond_mro.gp.GP,
    algopy.arc4.ARC4Contract,
  )
  
  subroutine test_cases.diamond_mro.base1.Base1.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.diamond_mro.base1.Base1.__init__(): void
  {
    log('base1.__init__')
    super::__init__()
  }
  
  abimethod test_cases.diamond_mro.base1.Base1.method(): void
  {
    log('base1.method')
    super::method()
  }
  
  subroutine test_cases.diamond_mro.gp.GP.__init__(): void
  {
    log('gp.__init__')
    void
  }
  
  abimethod test_cases.diamond_mro.gp.GP.create(): void
  {
  }
  
  abimethod test_cases.diamond_mro.gp.GP.method(): void
  {
    log('gp.method')
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
}

contract Derived
{
  method_resolution_order: (
    test_cases.diamond_mro.base1.Base1,
    test_cases.diamond_mro.base2.Base2,
    test_cases.diamond_mro.gp.GP,
    algopy.arc4.ARC4Contract,
  )
  
  subroutine test_cases.diamond_mro.derived.Derived.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.diamond_mro.derived.Derived.__init__(): void
  {
    log('derived.__init__')
    super::__init__()
  }
  
  abimethod test_cases.diamond_mro.derived.Derived.method(): void
  {
    log('derived.method')
    super::method()
  }
  
  subroutine test_cases.diamond_mro.base1.Base1.__init__(): void
  {
    log('base1.__init__')
    super::__init__()
  }
  
  abimethod test_cases.diamond_mro.base1.Base1.method(): void
  {
    log('base1.method')
    super::method()
  }
  
  subroutine test_cases.diamond_mro.base2.Base2.__init__(): void
  {
    log('base2.__init__')
    super::__init__()
  }
  
  abimethod test_cases.diamond_mro.base2.Base2.method(): void
  {
    log('base2.method')
    super::method()
  }
  
  subroutine test_cases.diamond_mro.gp.GP.__init__(): void
  {
    log('gp.__init__')
    void
  }
  
  abimethod test_cases.diamond_mro.gp.GP.create(): void
  {
  }
  
  abimethod test_cases.diamond_mro.gp.GP.method(): void
  {
    log('gp.method')
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
}