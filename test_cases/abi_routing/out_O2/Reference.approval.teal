#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 123 2
    bytecblock 0x151f7c75 "asa" "local_uint" "local_bytes"
    txn ApplicationID
    bnz main_after_if_else@2
    bytec_1 // "asa"
    intc_2 // 123
    app_global_put
    pushbytes "an_int"
    intc_3 // 2
    app_global_put
    pushbytess "some_bytes" 0x070809 // "some_bytes", 0x070809
    app_global_put
    pushbytes "creator"
    txn Sender
    app_global_put
    pushbytes "app"
    intc_2 // 123
    app_global_put

main_after_if_else@2:
    txn NumAppArgs
    bz main_bare_abi_config@25
    pushbytess 0x01040023 0x3a5353fc 0xd2f2f53c // method "opt_in(uint64,byte[])void", method "all_the_things(uint64)uint8", method "mixed_oca(uint64)uint8"
    txna ApplicationArgs 0
    match main_opt_in_route@5 main_all_the_things_route@6 main_mixed_oca_route@7
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xd78db35b 0xd8f62d9a 0xb8431119 0xc416372d 0x7fad9780 0x2fdf95a4 0x1399826c 0xa1300821 0x6137dc37 0x5732195a 0xf6096c82 0x9023bb19 // method "noop_with_uint64(uint64)uint8", method "opt_into_asset(uint64)void", method "with_transactions(uint64,uint64,pay,uint64)void", method "compare_assets(uint64,uint64)void", method "get_address()address", method "get_asset()uint64", method "get_application()uint64", method "get_an_int()uint64", method "method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void", method "method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[]", method "method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64", method "hello_with_algopy_string(string)string"
    txna ApplicationArgs 0
    match main_noop_with_uint64_route@10 main_opt_into_asset_route@11 main_with_transactions_route@12 main_compare_assets_route@13 main_get_address_route@14 main_get_asset_route@15 main_get_asset_route@15 main_get_an_int_route@17 main_method_with_default_args_route@18 main_method_with_15_args_route@19 main_method_with_more_than_15_args_route@20 main_hello_with_algopy_string_route@21
    err

main_hello_with_algopy_string_route@21:
    txna ApplicationArgs 1
    extract 2 0
    pushbytes "Hello "
    swap
    concat
    pushbytes "!"
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_method_with_more_than_15_args_route@20:
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txn GroupIndex
    intc_3 // 2
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    txna ApplicationArgs 13
    txna ApplicationArgs 14
    txna ApplicationArgs 15
    dupn 2
    pushint 16 // 16
    extract_uint64
    txna ApplicationArgs 15
    dupn 3
    pushint 40 // 40
    extract_uint16
    dig 1
    pushint 42 // 42
    extract_uint16
    substring3
    extract 2 0
    txna ApplicationArgs 15
    dup
    pushint 42 // 42
    extract_uint16
    dig 1
    len
    substring3
    extract 2 0
    txna ApplicationArgs 15
    pushint 44 // 44
    extract_uint64
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 15
    dup
    txn NumAppArgs
    pushint 16 // 16
    ==
    assert
    uncover 18
    gtxns Amount
    pushint 100000 // 100000
    ==
    assert
    uncover 2
    gtxns Amount
    pushint 200000 // 200000
    ==
    assert
    uncover 19
    assert
    uncover 2
    assert
    uncover 3
    uncover 3
    concat
    log
    uncover 19
    btoi
    uncover 19
    btoi
    +
    uncover 18
    btoi
    +
    uncover 17
    +
    uncover 16
    btoi
    +
    uncover 15
    btoi
    +
    uncover 14
    btoi
    +
    uncover 13
    btoi
    +
    uncover 12
    btoi
    +
    uncover 11
    btoi
    +
    uncover 10
    btoi
    +
    uncover 9
    btoi
    +
    uncover 8
    btoi
    +
    uncover 7
    intc_1 // 0
    extract_uint64
    +
    uncover 6
    pushint 8 // 8
    extract_uint64
    +
    uncover 5
    +
    uncover 4
    pushint 24 // 24
    extract_uint64
    +
    uncover 3
    pushint 32 // 32
    extract_uint64
    +
    uncover 2
    pushint 52 // 52
    extract_uint64
    +
    swap
    pushint 60 // 60
    extract_uint64
    +
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_method_with_15_args_route@19:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txna ApplicationArgs 7
    btoi
    txna ApplicationArgs 8
    btoi
    txna ApplicationArgs 9
    btoi
    txna ApplicationArgs 10
    btoi
    txna ApplicationArgs 11
    btoi
    txna ApplicationArgs 12
    btoi
    txna ApplicationArgs 13
    btoi
    txna ApplicationArgs 14
    btoi
    txna ApplicationArgs 15
    uncover 14
    uncover 14
    +
    uncover 13
    +
    uncover 12
    +
    uncover 11
    +
    uncover 10
    +
    uncover 9
    +
    uncover 8
    +
    uncover 7
    +
    uncover 6
    +
    uncover 5
    +
    uncover 4
    +
    uncover 3
    +
    uncover 2
    +
    assert
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_method_with_default_args_route@18:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    btoi
    txna ApplicationArgs 13
    extract 2 0
    uncover 12
    intc_2 // 123
    ==
    assert // wrong asset from storage
    uncover 11
    pushint 456 // 456
    ==
    assert // wrong asset from function
    global CreatorAddress
    uncover 11
    ==
    assert // wrong account from storage
    global ZeroAddress
    uncover 10
    ==
    assert // wrong account from function
    uncover 8
    intc_2 // 123
    ==
    assert // wrong application from storage
    uncover 7
    pushint 456 // 456
    ==
    assert // wrong application from function
    dig 6
    extract 0 1 // on error: index access is out of bounds
    pushbytes 0x07
    b==
    assert // wrong 0th byte from storage
    dig 6
    extract 1 1 // on error: index access is out of bounds
    pushbytes 0x08
    b==
    assert // wrong 1st byte from storage
    uncover 6
    extract 2 1 // on error: index access is out of bounds
    pushbytes 0x09
    b==
    assert // wrong 2nd byte from storage
    uncover 5
    btoi
    intc_3 // 2
    ==
    assert // wrong int from storage
    uncover 4
    btoi
    pushint 3 // 3
    ==
    assert // wrong int from function
    uncover 3
    pushbytes 0x0000007b
    b==
    assert
    uncover 2
    pushbytes 0x0003616263
    ==
    assert
    txn Sender
    intc_1 // 0
    bytec_2 // "local_uint"
    app_local_get_ex
    assert // check self.local_uint exists for account
    uncover 2
    ==
    assert
    txn Sender
    intc_1 // 0
    bytec_3 // "local_bytes"
    app_local_get_ex
    assert // check self.local_bytes exists for account
    ==
    return

main_get_an_int_route@17:
    pushbytes 0x151f7c750000000000000003
    log
    intc_0 // 1
    return

main_get_asset_route@15:
    pushbytes 0x151f7c7500000000000001c8
    log
    intc_0 // 1
    return

main_get_address_route@14:
    pushbytes base32(CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
    log
    intc_0 // 1
    return

main_compare_assets_route@13:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    ==
    return // on error: asset a == b

main_with_transactions_route@12:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 3
    intc_1 // 0
    bytec_1 // "asa"
    app_global_get_ex
    assert // check self.asa exists
    uncover 4
    ==
    assert // is correct asset
    uncover 2
    btoi
    intc_0 // 1
    ==
    assert // is correct int
    swap
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // is payment to app
    btoi
    intc_3 // 2
    ==
    return // on error: is correct int

main_opt_into_asset_route@11:
    txna ApplicationArgs 1
    btoi
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    intc_1 // 0
    bytec_1 // "asa"
    app_global_get_ex
    assert // check self.asa exists
    !
    assert // ASA already opted in
    bytec_1 // "asa"
    dig 1
    app_global_put
    itxn_begin
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    itxn_field XferAsset
    itxn_submit
    intc_0 // 1
    return

main_noop_with_uint64_route@10:
    txna ApplicationArgs 1
    btoi
    intc_0 // 1
    +
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_mixed_oca_route@7:
    intc_0 // 1
    txn OnCompletion
    shl
    pushint 37 // 37
    &
    txn ApplicationID
    &&
    assert // OnCompletion must be one of NoOp, CloseOut, DeleteApplication && can only call when not creating
    txna ApplicationArgs 1
    btoi
    intc_0 // 1
    +
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_all_the_things_route@6:
    txna ApplicationArgs 1
    btoi
    intc_0 // 1
    +
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_opt_in_route@5:
    txn OnCompletion
    intc_0 // OptIn
    ==
    txn ApplicationID
    &&
    assert // OnCompletion must be OptIn && can only call when not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    txn Sender
    bytec_2 // "local_uint"
    uncover 3
    app_local_put
    txn Sender
    bytec_3 // "local_bytes"
    uncover 2
    app_local_put
    intc_0 // 1
    return

main_bare_abi_config@25:
    txn ApplicationID
    !
    assert // can only call when creating
    pushbytes "Hello World"
    log
    intc_0 // 1
    return
