#pragma version 10

test_cases.abi_routing.contract.Reference.approval_program:
    intcblock 1 0 123 2
    bytecblock 0x151f7c75 "asa" 0x00000000000001c8
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// test_cases.abi_routing.contract.Reference.__init__() -> void:
__init__:
    proto 0 0
    bytec_1 // "asa"
    intc_2 // 123
    app_global_put
    pushbytes "an_int"
    intc_3 // 2
    app_global_put
    pushbytess "some_bytes" 0x070809 // "some_bytes", 0x070809
    app_global_put
    pushbytes "creator"
    txn Sender
    app_global_put
    pushbytes "app"
    intc_2 // 123
    app_global_put
    pushbytes 0x189392c5 // method "get(uint64,byte[])byte[]"
    len
    assert // has method selector
    retsub


// test_cases.abi_routing.contract.Reference.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@18
    pushbytess 0xd78db35b 0x3a5353fc 0xd2f2f53c 0x2826b202 0x6f8e94cd 0x17dc68f0 0x7fad9780 0x2fdf95a4 0x1399826c 0xa1300821 0x65f4cb9b 0x5732195a 0xd17552fb 0x9023bb19 // method "noop_with_uint64(uint64)uint8", method "all_the_things(uint64)uint8", method "mixed_oca(uint64)uint8", method "opt_into_asset(asset)void", method "with_transactions(asset,uint64,pay,uint64)void", method "compare_assets(asset,asset)void", method "get_address()address", method "get_asset()uint64", method "get_application()uint64", method "get_an_int()uint64", method "method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64)void", method "method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[]", method "method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64", method "hello_with_algopy_string(string)string"
    txna ApplicationArgs 0
    match __puya_arc4_router___noop_with_uint64_route@2 __puya_arc4_router___all_the_things_route@3 __puya_arc4_router___mixed_oca_route@4 __puya_arc4_router___opt_into_asset_route@5 __puya_arc4_router___with_transactions_route@6 __puya_arc4_router___compare_assets_route@7 __puya_arc4_router___get_address_route@8 __puya_arc4_router___get_asset_route@9 __puya_arc4_router___get_application_route@10 __puya_arc4_router___get_an_int_route@11 __puya_arc4_router___method_with_default_args_route@12 __puya_arc4_router___method_with_15_args_route@13 __puya_arc4_router___method_with_more_than_15_args_route@14 __puya_arc4_router___hello_with_algopy_string_route@15
    intc_1 // 0
    retsub

__puya_arc4_router___noop_with_uint64_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    callsub noop_with_uint64
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___all_the_things_route@3:
    txna ApplicationArgs 1
    callsub full_abi_config
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___mixed_oca_route@4:
    intc_0 // 1
    txn OnCompletion
    shl
    pushint 37 // 37
    &
    assert // OnCompletion is not one of NoOp, CloseOut, DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    callsub mixed_oca
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___opt_into_asset_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Assets
    callsub opt_into_asset
    intc_0 // 1
    retsub

__puya_arc4_router___with_transactions_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 3
    callsub with_transactions
    intc_0 // 1
    retsub

__puya_arc4_router___compare_assets_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    callsub compare_assets
    intc_0 // 1
    retsub

__puya_arc4_router___get_address_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_address
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___get_asset_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_asset
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___get_application_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_app
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___get_an_int_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_a_int
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___method_with_default_args_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    txna ApplicationArgs 4
    btoi
    txnas Accounts
    txna ApplicationArgs 5
    btoi
    txnas Applications
    txna ApplicationArgs 6
    btoi
    txnas Applications
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    callsub method_with_default_args
    intc_0 // 1
    retsub

__puya_arc4_router___method_with_15_args_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txna ApplicationArgs 7
    btoi
    txna ApplicationArgs 8
    btoi
    txna ApplicationArgs 9
    btoi
    txna ApplicationArgs 10
    btoi
    txna ApplicationArgs 11
    btoi
    txna ApplicationArgs 12
    btoi
    txna ApplicationArgs 13
    btoi
    txna ApplicationArgs 14
    btoi
    txna ApplicationArgs 15
    extract 2 0
    callsub method_with_15_args
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___method_with_more_than_15_args_route@14:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txnas Assets
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txn GroupIndex
    intc_3 // 2
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    txna ApplicationArgs 13
    txna ApplicationArgs 14
    txna ApplicationArgs 15
    extract 0 8 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 8 8 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 16 8 // on error: Index access is out of bounds
    btoi
    txna ApplicationArgs 15
    extract 24 8 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 32 8 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    dup
    pushint 40 // 40
    extract_uint16
    dig 1
    pushint 42 // 42
    extract_uint16
    substring3
    extract 2 0
    txna ApplicationArgs 15
    dup
    pushint 42 // 42
    extract_uint16
    dig 1
    len
    substring3
    extract 2 0
    txna ApplicationArgs 15
    extract 44 1 // on error: Index access is out of bounds
    btoi
    txnas Assets
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 15
    extract 45 8 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 53 8 // on error: Index access is out of bounds
    callsub method_with_more_than_15_args
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___hello_with_algopy_string_route@15:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    extract 2 0
    callsub hello_with_algopy_string
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___bare_routing@18:
    txn OnCompletion
    switch __puya_arc4_router___bare_abi_config@19 __puya_arc4_router___bare_abi_config@19 __puya_arc4_router___bare_abi_config@19 __puya_arc4_router___after_if_else@22 __puya_arc4_router___bare_abi_config@19 __puya_arc4_router___bare_abi_config@19
    intc_1 // 0
    retsub

__puya_arc4_router___bare_abi_config@19:
    txn ApplicationID
    !
    assert // can only call when creating
    callsub bare_abi_config
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@22:
    intc_1 // 0
    retsub


// test_cases.abi_routing.contract.Reference.noop_with_uint64(a: bytes) -> bytes:
noop_with_uint64:
    proto 1 1
    frame_dig -1
    btoi
    intc_0 // 1
    +
    itob
    extract 7 1
    retsub


// test_cases.abi_routing.contract.Reference.full_abi_config(a: bytes) -> bytes:
full_abi_config:
    proto 1 1
    frame_dig -1
    btoi
    intc_0 // 1
    +
    itob
    extract 7 1
    retsub


// test_cases.abi_routing.contract.Reference.mixed_oca(a: bytes) -> bytes:
mixed_oca:
    proto 1 1
    frame_dig -1
    btoi
    intc_0 // 1
    +
    itob
    extract 7 1
    retsub


// test_cases.abi_routing.contract.Reference.opt_into_asset(asset: uint64) -> void:
opt_into_asset:
    proto 1 0
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    intc_1 // 0
    bytec_1 // "asa"
    app_global_get_ex
    assert // check self.asa exists
    !
    assert // ASA already opted in
    bytec_1 // "asa"
    frame_dig -1
    app_global_put
    itxn_begin
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field XferAsset
    itxn_submit
    retsub


// test_cases.abi_routing.contract.Reference.with_transactions(asset: uint64, an_int: bytes, pay: uint64, another_int: bytes) -> void:
with_transactions:
    proto 4 0
    intc_1 // 0
    bytec_1 // "asa"
    app_global_get_ex
    assert // check self.asa exists
    frame_dig -4
    ==
    assert // is correct asset
    frame_dig -3
    btoi
    intc_0 // 1
    ==
    assert // is correct int
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // is payment to app
    frame_dig -1
    btoi
    intc_3 // 2
    ==
    assert // is correct int
    retsub


// test_cases.abi_routing.contract.Reference.compare_assets(asset_a: uint64, asset_b: uint64) -> void:
compare_assets:
    proto 2 0
    frame_dig -2
    frame_dig -1
    ==
    assert // asset a == b
    retsub


// test_cases.abi_routing.contract.Reference.get_address() -> bytes:
get_address:
    proto 0 1
    global ZeroAddress
    retsub


// test_cases.abi_routing.contract.Reference.get_asset() -> bytes:
get_asset:
    proto 0 1
    bytec_2 // 0x00000000000001c8
    retsub


// test_cases.abi_routing.contract.Reference.get_app() -> bytes:
get_app:
    proto 0 1
    bytec_2 // 0x00000000000001c8
    retsub


// test_cases.abi_routing.contract.Reference.get_a_int() -> bytes:
get_a_int:
    proto 0 1
    pushbytes 0x0000000000000003
    retsub


// test_cases.abi_routing.contract.Reference.method_with_default_args(asset_from_storage: uint64, asset_from_function: uint64, account_from_storage: bytes, account_from_function: bytes, application_from_storage: uint64, application_from_function: uint64, bytes_from_storage: bytes, int_from_storage: bytes, int_from_function: bytes) -> void:
method_with_default_args:
    proto 9 0
    frame_dig -9
    intc_2 // 123
    ==
    assert // wrong asset from storage
    frame_dig -8
    pushint 456 // 456
    ==
    assert // wrong asset from function
    frame_dig -7
    global CreatorAddress
    ==
    assert // wrong account from storage
    frame_dig -6
    global ZeroAddress
    ==
    assert // wrong account from function
    frame_dig -5
    intc_2 // 123
    ==
    assert // wrong application from storage
    frame_dig -4
    pushint 456 // 456
    ==
    assert // wrong application from function
    frame_dig -3
    extract 0 1 // on error: Index access is out of bounds
    pushbytes 0x07
    b==
    assert // wrong 0th byte from storage
    frame_dig -3
    extract 1 1 // on error: Index access is out of bounds
    pushbytes 0x08
    b==
    assert // wrong 1st byte from storage
    frame_dig -3
    extract 2 1 // on error: Index access is out of bounds
    pushbytes 0x09
    b==
    assert // wrong 2nd byte from storage
    frame_dig -2
    btoi
    intc_3 // 2
    ==
    assert // wrong int from storage
    frame_dig -1
    btoi
    pushint 3 // 3
    ==
    assert // wrong int from function
    retsub


// test_cases.abi_routing.contract.Reference.method_with_15_args(one: uint64, two: uint64, three: uint64, four: uint64, five: uint64, six: uint64, seven: uint64, eight: uint64, nine: uint64, ten: uint64, eleven: uint64, twelve: uint64, thirteen: uint64, fourteen: uint64, fifteen: bytes) -> bytes:
method_with_15_args:
    proto 15 1
    frame_dig -15
    frame_dig -14
    +
    frame_dig -13
    +
    frame_dig -12
    +
    frame_dig -11
    +
    frame_dig -10
    +
    frame_dig -9
    +
    frame_dig -8
    +
    frame_dig -7
    +
    frame_dig -6
    +
    frame_dig -5
    +
    frame_dig -4
    +
    frame_dig -3
    +
    frame_dig -2
    +
    assert
    frame_dig -1
    retsub


// test_cases.abi_routing.contract.Reference.method_with_more_than_15_args(a: bytes, b: bytes, c: bytes, d: uint64, asset: uint64, e: bytes, f: bytes, pay: uint64, g: bytes, h: bytes, i: bytes, j: bytes, k: bytes, l: bytes, m: bytes, n: bytes, o: bytes, p: uint64, q: bytes, r: bytes, s: bytes, t: bytes, asset2: uint64, pay2: uint64, u: bytes, v: bytes) -> bytes:
method_with_more_than_15_args:
    proto 26 1
    txn NumAppArgs
    pushint 16 // 16
    ==
    assert
    frame_dig -19
    gtxns Amount
    pushint 100000 // 100000
    ==
    assert
    frame_dig -3
    gtxns Amount
    pushint 200000 // 200000
    ==
    assert
    frame_dig -22
    assert
    frame_dig -4
    assert
    frame_dig -6
    frame_dig -5
    concat
    log
    frame_dig -26
    btoi
    frame_dig -25
    btoi
    +
    frame_dig -24
    btoi
    +
    frame_dig -23
    +
    frame_dig -21
    btoi
    +
    frame_dig -20
    btoi
    +
    frame_dig -18
    btoi
    +
    frame_dig -17
    btoi
    +
    frame_dig -16
    btoi
    +
    frame_dig -15
    btoi
    +
    frame_dig -14
    btoi
    +
    frame_dig -13
    btoi
    +
    frame_dig -12
    btoi
    +
    frame_dig -11
    btoi
    +
    frame_dig -10
    btoi
    +
    frame_dig -9
    +
    frame_dig -8
    btoi
    +
    frame_dig -7
    btoi
    +
    frame_dig -2
    btoi
    +
    frame_dig -1
    btoi
    +
    itob
    retsub


// test_cases.abi_routing.contract.Reference.hello_with_algopy_string(name: bytes) -> bytes:
hello_with_algopy_string:
    proto 1 1
    pushbytes "Hello "
    frame_dig -1
    concat
    pushbytes "!"
    concat
    retsub


// test_cases.abi_routing.contract.Reference.bare_abi_config() -> void:
bare_abi_config:
    proto 0 0
    pushbytes "Hello World"
    log
    retsub
