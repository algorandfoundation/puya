#pragma version 10

test_cases.abi_routing.contract.Reference.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    txn NumAppArgs
    bz main_bare_routing@19
    method "noop_with_uint64(uint64)uint8"
    method "all_the_things(uint64)uint8"
    method "mixed_oca(uint64)uint8"
    method "opt_into_asset(asset)void"
    method "with_transactions(asset,uint64,pay,uint64)void"
    method "compare_assets(asset,asset)void"
    method "get_address()address"
    method "get_asset()uint64"
    method "get_application()uint64"
    method "get_an_int()uint64"
    method "method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64)void"
    method "method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64"
    method "hello_with_algopy_string(string)string"
    txna ApplicationArgs 0
    match main_noop_with_uint64_route@4 main_all_the_things_route@5 main_mixed_oca_route@6 main_opt_into_asset_route@7 main_with_transactions_route@8 main_compare_assets_route@9 main_get_address_route@10 main_get_asset_route@11 main_get_application_route@12 main_get_an_int_route@13 main_method_with_default_args_route@14 main_method_with_more_than_15_args_route@15 main_hello_with_algopy_string_route@16
    err // reject transaction

main_noop_with_uint64_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub noop_with_uint64
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_all_the_things_route@5:
    txna ApplicationArgs 1
    callsub full_abi_config
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_mixed_oca_route@6:
    int 1
    txn OnCompletion
    shl
    int 37
    &
    assert // OnCompletion is one of NoOp, CloseOut, DeleteApplication
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub mixed_oca
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_opt_into_asset_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Assets
    callsub opt_into_asset
    int 1
    return

main_with_transactions_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 3
    callsub with_transactions
    int 1
    return

main_compare_assets_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    callsub compare_assets
    int 1
    return

main_get_address_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_address
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_get_asset_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_asset
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_get_application_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_app
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_get_an_int_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_a_int
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_method_with_default_args_route@14:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    txna ApplicationArgs 4
    btoi
    txnas Accounts
    txna ApplicationArgs 5
    btoi
    txnas Applications
    txna ApplicationArgs 6
    btoi
    txnas Applications
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    callsub method_with_default_args
    int 1
    return

main_method_with_more_than_15_args_route@15:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txnas Assets
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txn GroupIndex
    int 2
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    txna ApplicationArgs 13
    txna ApplicationArgs 14
    txna ApplicationArgs 15
    extract 0 8 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 8 8 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 16 8 // on error: Index access is out of bounds
    btoi
    txna ApplicationArgs 15
    extract 24 8 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 32 8 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    dup
    int 40
    extract_uint16
    swap
    dup
    int 42
    extract_uint16
    swap
    cover 2
    substring3
    extract 2 0
    txna ApplicationArgs 15
    dup
    int 42
    extract_uint16
    swap
    dup
    len
    swap
    cover 2
    substring3
    extract 2 0
    txna ApplicationArgs 15
    extract 44 1 // on error: Index access is out of bounds
    btoi
    txnas Assets
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 15
    extract 45 8 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    extract 53 8 // on error: Index access is out of bounds
    callsub method_with_more_than_15_args
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_hello_with_algopy_string_route@16:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    extract 2 0
    callsub hello_with_algopy_string
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@19:
    txn OnCompletion
    switch main_bare_abi_config@20 main_bare_abi_config@20 main_bare_abi_config@20 main_reject_bare_on_completion@21 main_bare_abi_config@20 main_bare_abi_config@20
    err // reject transaction

main_bare_abi_config@20:
    txn ApplicationID
    !
    assert // is creating
    callsub bare_abi_config
    int 1
    return

main_reject_bare_on_completion@21:
    err // reject transaction


// test_cases.abi_routing.contract.Reference.noop_with_uint64(a: bytes) -> bytes:
noop_with_uint64:
    proto 1 1
    frame_dig -1
    btoi
    int 1
    +
    itob
    extract 7 1
    retsub


// test_cases.abi_routing.contract.Reference.full_abi_config(a: bytes) -> bytes:
full_abi_config:
    proto 1 1
    frame_dig -1
    btoi
    int 1
    +
    itob
    extract 7 1
    retsub


// test_cases.abi_routing.contract.Reference.mixed_oca(a: bytes) -> bytes:
mixed_oca:
    proto 1 1
    frame_dig -1
    btoi
    int 1
    +
    itob
    extract 7 1
    retsub


// test_cases.abi_routing.contract.Reference.opt_into_asset(asset: uint64) -> void:
opt_into_asset:
    proto 1 0
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    int 0
    byte "asa"
    app_global_get_ex
    assert // check asa exists
    !
    assert // ASA already opted in
    byte "asa"
    frame_dig -1
    app_global_put
    itxn_begin
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field XferAsset
    itxn_submit
    retsub


// test_cases.abi_routing.contract.Reference.with_transactions(asset: uint64, an_int: bytes, pay: uint64, another_int: bytes) -> void:
with_transactions:
    proto 4 0
    int 0
    byte "asa"
    app_global_get_ex
    assert // check asa exists
    frame_dig -4
    ==
    assert // is correct asset
    frame_dig -3
    btoi
    int 1
    ==
    assert // is correct int
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // is payment to app
    frame_dig -1
    btoi
    int 2
    ==
    assert // is correct int
    retsub


// test_cases.abi_routing.contract.Reference.compare_assets(asset_a: uint64, asset_b: uint64) -> void:
compare_assets:
    proto 2 0
    frame_dig -2
    frame_dig -1
    ==
    assert // asset a == b
    retsub


// test_cases.abi_routing.contract.Reference.get_address() -> bytes:
get_address:
    proto 0 1
    global ZeroAddress
    retsub


// test_cases.abi_routing.contract.Reference.get_asset() -> bytes:
get_asset:
    proto 0 1
    byte 0x00000000000001c8
    retsub


// test_cases.abi_routing.contract.Reference.get_app() -> bytes:
get_app:
    proto 0 1
    byte 0x00000000000001c8
    retsub


// test_cases.abi_routing.contract.Reference.get_a_int() -> bytes:
get_a_int:
    proto 0 1
    byte 0x0000000000000003
    retsub


// test_cases.abi_routing.contract.Reference.method_with_default_args(asset_from_storage: uint64, asset_from_function: uint64, account_from_storage: bytes, account_from_function: bytes, application_from_storage: uint64, application_from_function: uint64, bytes_from_storage: bytes, int_from_storage: bytes, int_from_function: bytes) -> void:
method_with_default_args:
    proto 9 0
    frame_dig -9
    int 123
    ==
    assert // wrong asset from storage
    frame_dig -8
    int 456
    ==
    assert // wrong asset from function
    frame_dig -7
    global CreatorAddress
    ==
    assert // wrong account from storage
    frame_dig -6
    global ZeroAddress
    ==
    assert // wrong account from function
    frame_dig -5
    int 123
    ==
    assert // wrong application from storage
    frame_dig -4
    int 456
    ==
    assert // wrong application from function
    frame_dig -3
    extract 0 1 // on error: Index access is out of bounds
    byte 0x07
    b==
    assert // wrong 0th byte from storage
    frame_dig -3
    extract 1 1 // on error: Index access is out of bounds
    byte 0x08
    b==
    assert // wrong 1st byte from storage
    frame_dig -3
    extract 2 1 // on error: Index access is out of bounds
    byte 0x09
    b==
    assert // wrong 2nd byte from storage
    frame_dig -2
    btoi
    int 2
    ==
    assert // wrong int from storage
    frame_dig -1
    btoi
    int 3
    ==
    assert // wrong int from function
    retsub


// test_cases.abi_routing.contract.Reference.method_with_more_than_15_args(a: bytes, b: bytes, c: bytes, d: uint64, asset: uint64, e: bytes, f: bytes, pay: uint64, g: bytes, h: bytes, i: bytes, j: bytes, k: bytes, l: bytes, m: bytes, n: bytes, o: bytes, p: uint64, q: bytes, r: bytes, s: bytes, t: bytes, asset2: uint64, pay2: uint64, u: bytes, v: bytes) -> bytes:
method_with_more_than_15_args:
    proto 26 1
    txn NumAppArgs
    int 16
    ==
    assert
    frame_dig -19
    gtxns Amount
    int 100000
    ==
    assert
    frame_dig -3
    gtxns Amount
    int 200000
    ==
    assert
    frame_dig -22
    assert
    frame_dig -4
    assert
    frame_dig -6
    frame_dig -5
    concat
    log
    frame_dig -26
    btoi
    frame_dig -25
    btoi
    +
    frame_dig -24
    btoi
    +
    frame_dig -23
    +
    frame_dig -21
    btoi
    +
    frame_dig -20
    btoi
    +
    frame_dig -18
    btoi
    +
    frame_dig -17
    btoi
    +
    frame_dig -16
    btoi
    +
    frame_dig -15
    btoi
    +
    frame_dig -14
    btoi
    +
    frame_dig -13
    btoi
    +
    frame_dig -12
    btoi
    +
    frame_dig -11
    btoi
    +
    frame_dig -10
    btoi
    +
    frame_dig -9
    +
    frame_dig -8
    btoi
    +
    frame_dig -7
    btoi
    +
    frame_dig -2
    btoi
    +
    frame_dig -1
    btoi
    +
    itob
    retsub


// test_cases.abi_routing.contract.Reference.hello_with_algopy_string(name: bytes) -> bytes:
hello_with_algopy_string:
    proto 1 1
    byte "Hello "
    frame_dig -1
    concat
    byte "!"
    concat
    retsub


// test_cases.abi_routing.contract.Reference.bare_abi_config() -> void:
bare_abi_config:
    proto 0 0
    byte "Hello World"
    log
    retsub


// test_cases.abi_routing.contract.Reference.__init__() -> void:
__init__:
    proto 0 0
    byte "asa"
    int 123
    app_global_put
    byte "an_int"
    int 2
    app_global_put
    byte "some_bytes"
    byte 0x070809
    app_global_put
    byte "creator"
    txn Sender
    app_global_put
    byte "app"
    int 123
    app_global_put
    method "get(uint64,byte[])byte[]"
    len
    assert // has method selector
    retsub
