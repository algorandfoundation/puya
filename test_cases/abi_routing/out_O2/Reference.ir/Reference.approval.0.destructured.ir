main test_cases.abi_routing.contract.Reference.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "asa" 123u)
        (app_global_put "an_int" 2u)
        (app_global_put "some_bytes" 0x070809)
        let new_state_value%0#0: bytes[32] = (txn Sender)
        (app_global_put "creator" new_state_value%0#0)
        (app_global_put "app" 123u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#3: uint64 = (txn NumAppArgs)
        goto tmp%0#3 ? block@4 : block@19
    block@4: // abi_routing_L22
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "noop_with_uint64(uint64)uint8" => block@5, method "all_the_things(uint64)uint8" => block@6, method "mixed_oca(uint64)uint8" => block@7, method "opt_into_asset(asset)void" => block@8, method "with_transactions(asset,uint64,pay,uint64)void" => block@9, method "compare_assets(asset,asset)void" => block@10, method "get_address()address" => block@11, method "get_asset()uint64" => block@12, method "get_application()uint64" => block@13, method "get_an_int()uint64" => block@14, method "method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string)void" => block@15, method "method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[]" => block@16, method "method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64" => block@17, method "hello_with_algopy_string(string)string" => block@18, * => block@21}
    block@5: // noop_with_uint64_route_L32
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let a#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%0#3: uint64 = (btoi a#0)
        let result#0: uint64 = (+ 1u tmp%0#3)
        let val_as_bytes%0#0: bytes[8] = (itob result#0)
        let tmp%1#3: bytes = ((extract 7 1) val_as_bytes%0#0)
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%1#3)
        (log tmp%8#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@6: // all_the_things_route_L37
        let a#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%0#3: uint64 = (btoi a#0)
        let result#0: uint64 = (+ 1u tmp%0#3)
        let val_as_bytes%0#0: bytes[8] = (itob result#0)
        let tmp%1#3: bytes = ((extract 7 1) val_as_bytes%0#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%1#3)
        (log tmp%10#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@7: // mixed_oca_route_L53
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: uint64 = (shl 1u tmp%11#0)
        let tmp%13#0: uint64 = (& tmp%12#0 37u)
        (assert tmp%13#0) // OnCompletion is not one of NoOp, CloseOut, DeleteApplication
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let a#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%0#3: uint64 = (btoi a#0)
        let result#0: uint64 = (+ 1u tmp%0#3)
        let val_as_bytes%0#0: bytes[8] = (itob result#0)
        let tmp%1#3: bytes = ((extract 7 1) val_as_bytes%0#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 tmp%1#3)
        (log tmp%17#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@8: // opt_into_asset_route_L79
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%22#0: uint64 = (btoi reinterpret_bytes[1]%0#0)
        let asset#0: uint64 = ((txnas Assets) tmp%22#0)
        let tmp%0#11: bytes[32] = (txn Sender)
        let tmp%1#8: bytes[32] = (global CreatorAddress)
        let tmp%2#4: bool = (== tmp%0#11 tmp%1#8)
        (assert tmp%2#4) // Only creator can opt in to ASA
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%3#1: bool = (! maybe_value%0#0)
        (assert tmp%3#1) // ASA already opted in
        (app_global_put "asa" asset#0)
        itxn_begin
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        let tmp%4#3: bytes[32] = (global CurrentApplicationAddress)
        ((itxn_field AssetReceiver) tmp%4#3)
        ((itxn_field XferAsset) asset#0)
        itxn_submit
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@9: // with_transactions_route_L96
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        let reinterpret_bytes[1]%1#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%28#0: uint64 = (btoi reinterpret_bytes[1]%1#0)
        let asset#0: uint64 = ((txnas Assets) tmp%28#0)
        let an_int#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%30#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%30#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let another_int#0: bytes[8] = (txna ApplicationArgs 3)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%0#0: bool = (== maybe_value%0#0 asset#0)
        (assert tmp%0#0) // is correct asset
        let tmp%1#5: uint64 = (btoi an_int#0)
        let tmp%2#4: bool = (== tmp%1#5 1u)
        (assert tmp%2#4) // is correct int
        let tmp%3#4: bytes[32] = ((gtxns Receiver) pay#0)
        let tmp%4#3: bytes[32] = (global CurrentApplicationAddress)
        let tmp%5#1: bool = (== tmp%3#4 tmp%4#3)
        (assert tmp%5#1) // is payment to app
        let tmp%6#2: uint64 = (btoi another_int#0)
        let tmp%7#3: bool = (== tmp%6#2 2u)
        (assert tmp%7#3) // is correct int
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@10: // compare_assets_route_L109
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        let reinterpret_bytes[1]%2#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%35#0: uint64 = (btoi reinterpret_bytes[1]%2#0)
        let asset_a#0: uint64 = ((txnas Assets) tmp%35#0)
        let reinterpret_bytes[1]%3#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%37#0: uint64 = (btoi reinterpret_bytes[1]%3#0)
        let asset_b#0: uint64 = ((txnas Assets) tmp%37#0)
        let tmp%0#0: bool = (== asset_a#0 asset_b#0)
        (assert tmp%0#0) // asset a == b
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@11: // get_address_route_L113
        let tmp%39#0: uint64 = (txn OnCompletion)
        let tmp%40#0: bool = (! tmp%39#0)
        (assert tmp%40#0) // OnCompletion is not NoOp
        let tmp%41#0: uint64 = (txn ApplicationID)
        (assert tmp%41#0) // can only call when not creating
        (log CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@12: // get_asset_route_L117
        let tmp%45#0: uint64 = (txn OnCompletion)
        let tmp%46#0: bool = (! tmp%45#0)
        (assert tmp%46#0) // OnCompletion is not NoOp
        let tmp%47#0: uint64 = (txn ApplicationID)
        (assert tmp%47#0) // can only call when not creating
        (log 0x151f7c7500000000000001c8)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@13: // get_application_route_L121
        let tmp%51#0: uint64 = (txn OnCompletion)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0) // OnCompletion is not NoOp
        let tmp%53#0: uint64 = (txn ApplicationID)
        (assert tmp%53#0) // can only call when not creating
        (log 0x151f7c7500000000000001c8)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@14: // get_an_int_route_L125
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        (assert tmp%59#0) // can only call when not creating
        (log 0x151f7c750000000000000003)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@15: // method_with_default_args_route_L129
        let tmp%63#0: uint64 = (txn OnCompletion)
        let tmp%64#0: bool = (! tmp%63#0)
        (assert tmp%64#0) // OnCompletion is not NoOp
        let tmp%65#0: uint64 = (txn ApplicationID)
        (assert tmp%65#0) // can only call when not creating
        let reinterpret_bytes[1]%4#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%67#0: uint64 = (btoi reinterpret_bytes[1]%4#0)
        let asset_from_storage#0: uint64 = ((txnas Assets) tmp%67#0)
        let reinterpret_bytes[1]%5#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%69#0: uint64 = (btoi reinterpret_bytes[1]%5#0)
        let asset_from_function#0: uint64 = ((txnas Assets) tmp%69#0)
        let reinterpret_bytes[1]%6#0: bytes[1] = (txna ApplicationArgs 3)
        let tmp%71#0: uint64 = (btoi reinterpret_bytes[1]%6#0)
        let account_from_storage#0: bytes[32] = ((txnas Accounts) tmp%71#0)
        let reinterpret_bytes[1]%7#0: bytes[1] = (txna ApplicationArgs 4)
        let tmp%73#0: uint64 = (btoi reinterpret_bytes[1]%7#0)
        let account_from_function#0: bytes[32] = ((txnas Accounts) tmp%73#0)
        let reinterpret_bytes[1]%8#0: bytes[1] = (txna ApplicationArgs 5)
        let tmp%75#0: uint64 = (btoi reinterpret_bytes[1]%8#0)
        let application_from_storage#0: uint64 = ((txnas Applications) tmp%75#0)
        let reinterpret_bytes[1]%9#0: bytes[1] = (txna ApplicationArgs 6)
        let tmp%77#0: uint64 = (btoi reinterpret_bytes[1]%9#0)
        let application_from_function#0: uint64 = ((txnas Applications) tmp%77#0)
        let bytes_from_storage#0: bytes[3] = (txna ApplicationArgs 7)
        let int_from_storage#0: bytes[8] = (txna ApplicationArgs 8)
        let int_from_function#0: bytes[8] = (txna ApplicationArgs 9)
        let int_from_const#0: bytes[4] = (txna ApplicationArgs 10)
        let str_from_const#0: bytes = (txna ApplicationArgs 11)
        let tmp%0#0: bool = (== asset_from_storage#0 123u)
        (assert tmp%0#0) // wrong asset from storage
        let tmp%1#4: bool = (== asset_from_function#0 456u)
        (assert tmp%1#4) // wrong asset from function
        let tmp%2#3: bytes[32] = (global CreatorAddress)
        let tmp%3#1: bool = (== account_from_storage#0 tmp%2#3)
        (assert tmp%3#1) // wrong account from storage
        let tmp%4#3: bytes[32] = (global ZeroAddress)
        let tmp%5#1: bool = (== account_from_function#0 tmp%4#3)
        (assert tmp%5#1) // wrong account from function
        let tmp%6#3: bool = (== application_from_storage#0 123u)
        (assert tmp%6#3) // wrong application from storage
        let tmp%7#3: bool = (== application_from_function#0 456u)
        (assert tmp%7#3) // wrong application from function
        let reinterpret_biguint%0#0: biguint = ((extract 0 1) bytes_from_storage#0) // on error: Index access is out of bounds
        let tmp%8#3: bool = (b== reinterpret_biguint%0#0 0x07)
        (assert tmp%8#3) // wrong 0th byte from storage
        let reinterpret_biguint%2#0: biguint = ((extract 1 1) bytes_from_storage#0) // on error: Index access is out of bounds
        let tmp%9#3: bool = (b== reinterpret_biguint%2#0 0x08)
        (assert tmp%9#3) // wrong 1st byte from storage
        let reinterpret_biguint%4#0: biguint = ((extract 2 1) bytes_from_storage#0) // on error: Index access is out of bounds
        let tmp%10#3: bool = (b== reinterpret_biguint%4#0 0x09)
        (assert tmp%10#3) // wrong 2nd byte from storage
        let tmp%11#0: uint64 = (btoi int_from_storage#0)
        let tmp%12#3: bool = (== tmp%11#0 2u)
        (assert tmp%12#3) // wrong int from storage
        let tmp%13#0: uint64 = (btoi int_from_function#0)
        let tmp%14#2: bool = (== tmp%13#0 3u)
        (assert tmp%14#2) // wrong int from function
        let tmp%15#2: bool = (b== int_from_const#0 0x0000007b)
        (assert tmp%15#2)
        let tmp%16#2: bool = (== str_from_const#0 0x0003616263)
        (assert tmp%16#2)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@16: // method_with_15_args_route_L172
        let tmp%80#0: uint64 = (txn OnCompletion)
        let tmp%81#0: bool = (! tmp%80#0)
        (assert tmp%81#0) // OnCompletion is not NoOp
        let tmp%82#0: uint64 = (txn ApplicationID)
        (assert tmp%82#0) // can only call when not creating
        let reinterpret_bytes[8]%7#0: bytes[8] = (txna ApplicationArgs 1)
        let one#0: uint64 = (btoi reinterpret_bytes[8]%7#0)
        let reinterpret_bytes[8]%8#0: bytes[8] = (txna ApplicationArgs 2)
        let two#0: uint64 = (btoi reinterpret_bytes[8]%8#0)
        let reinterpret_bytes[8]%9#0: bytes[8] = (txna ApplicationArgs 3)
        let three#0: uint64 = (btoi reinterpret_bytes[8]%9#0)
        let reinterpret_bytes[8]%10#0: bytes[8] = (txna ApplicationArgs 4)
        let four#0: uint64 = (btoi reinterpret_bytes[8]%10#0)
        let reinterpret_bytes[8]%11#0: bytes[8] = (txna ApplicationArgs 5)
        let five#0: uint64 = (btoi reinterpret_bytes[8]%11#0)
        let reinterpret_bytes[8]%12#0: bytes[8] = (txna ApplicationArgs 6)
        let six#0: uint64 = (btoi reinterpret_bytes[8]%12#0)
        let reinterpret_bytes[8]%13#0: bytes[8] = (txna ApplicationArgs 7)
        let seven#0: uint64 = (btoi reinterpret_bytes[8]%13#0)
        let reinterpret_bytes[8]%14#0: bytes[8] = (txna ApplicationArgs 8)
        let eight#0: uint64 = (btoi reinterpret_bytes[8]%14#0)
        let reinterpret_bytes[8]%15#0: bytes[8] = (txna ApplicationArgs 9)
        let nine#0: uint64 = (btoi reinterpret_bytes[8]%15#0)
        let reinterpret_bytes[8]%16#0: bytes[8] = (txna ApplicationArgs 10)
        let ten#0: uint64 = (btoi reinterpret_bytes[8]%16#0)
        let reinterpret_bytes[8]%17#0: bytes[8] = (txna ApplicationArgs 11)
        let eleven#0: uint64 = (btoi reinterpret_bytes[8]%17#0)
        let reinterpret_bytes[8]%18#0: bytes[8] = (txna ApplicationArgs 12)
        let twelve#0: uint64 = (btoi reinterpret_bytes[8]%18#0)
        let reinterpret_bytes[8]%19#0: bytes[8] = (txna ApplicationArgs 13)
        let thirteen#0: uint64 = (btoi reinterpret_bytes[8]%19#0)
        let reinterpret_bytes[8]%20#0: bytes[8] = (txna ApplicationArgs 14)
        let fourteen#0: uint64 = (btoi reinterpret_bytes[8]%20#0)
        let tmp%98#0: bytes = (txna ApplicationArgs 15)
        let fifteen#0: bytes = ((extract 2 0) tmp%98#0)
        let tmp%0#3: uint64 = (+ one#0 two#0)
        let tmp%1#5: uint64 = (+ tmp%0#3 three#0)
        let tmp%2#1: uint64 = (+ tmp%1#5 four#0)
        let tmp%3#0: uint64 = (+ tmp%2#1 five#0)
        let tmp%4#1: uint64 = (+ tmp%3#0 six#0)
        let tmp%5#0: uint64 = (+ tmp%4#1 seven#0)
        let tmp%6#2: uint64 = (+ tmp%5#0 eight#0)
        let tmp%7#2: uint64 = (+ tmp%6#2 nine#0)
        let tmp%8#2: uint64 = (+ tmp%7#2 ten#0)
        let tmp%9#1: uint64 = (+ tmp%8#2 eleven#0)
        let tmp%10#1: uint64 = (+ tmp%9#1 twelve#0)
        let tmp%11#0: uint64 = (+ tmp%10#1 thirteen#0)
        let tmp%12#0: uint64 = (+ tmp%11#0 fourteen#0)
        (assert tmp%12#0)
        let length%0#0: uint64 = (len fifteen#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 fifteen#0)
        let tmp%100#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%100#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@17: // method_with_more_than_15_args_route_L210
        let tmp%101#0: uint64 = (txn OnCompletion)
        let tmp%102#0: bool = (! tmp%101#0)
        (assert tmp%102#0) // OnCompletion is not NoOp
        let tmp%103#0: uint64 = (txn ApplicationID)
        (assert tmp%103#0) // can only call when not creating
        let a#0: bytes[8] = (txna ApplicationArgs 1)
        let b#0: bytes[8] = (txna ApplicationArgs 2)
        let c#0: bytes[8] = (txna ApplicationArgs 3)
        let reinterpret_bytes[8]%24#0: bytes[8] = (txna ApplicationArgs 4)
        let d#0: uint64 = (btoi reinterpret_bytes[8]%24#0)
        let reinterpret_bytes[1]%10#0: bytes[1] = (txna ApplicationArgs 5)
        let tmp%106#0: uint64 = (btoi reinterpret_bytes[1]%10#0)
        let asset#0: uint64 = ((txnas Assets) tmp%106#0)
        let e#0: bytes[8] = (txna ApplicationArgs 6)
        let f#0: bytes[8] = (txna ApplicationArgs 7)
        let tmp%108#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%108#0 2u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let g#0: bytes[8] = (txna ApplicationArgs 8)
        let h#0: bytes[8] = (txna ApplicationArgs 9)
        let i#0: bytes[8] = (txna ApplicationArgs 10)
        let j#0: bytes[8] = (txna ApplicationArgs 11)
        let k#0: bytes[8] = (txna ApplicationArgs 12)
        let l#0: bytes[8] = (txna ApplicationArgs 13)
        let m#0: bytes[8] = (txna ApplicationArgs 14)
        let tmp%109#0: bytes = (txna ApplicationArgs 15)
        let tmp%111#0: bytes = (txna ApplicationArgs 15)
        let tmp%113#0: bytes = (txna ApplicationArgs 15)
        let p#0: uint64 = (extract_uint64 tmp%113#0 16u)
        let tmp%116#0: bytes = (txna ApplicationArgs 15)
        let tmp%118#0: bytes = (txna ApplicationArgs 15)
        let tmp%120#0: bytes = (txna ApplicationArgs 15)
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%120#0 40u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%120#0 42u)
        let tmp%121#0: bytes = (substring3 tmp%120#0 item_start_offset%0#0 item_end_offset%0#0)
        let s#0: bytes = ((extract 2 0) tmp%121#0)
        let tmp%123#0: bytes = (txna ApplicationArgs 15)
        let item_start_offset%1#0: uint64 = (extract_uint16 tmp%123#0 42u)
        let item_end_offset%1#0: uint64 = (len tmp%123#0)
        let tmp%124#0: bytes = (substring3 tmp%123#0 item_start_offset%1#0 item_end_offset%1#0)
        let t#0: bytes = ((extract 2 0) tmp%124#0)
        let tmp%126#0: bytes = (txna ApplicationArgs 15)
        let tmp%128#0: uint64 = (getbyte tmp%126#0 44u)
        let asset2#0: uint64 = ((txnas Assets) tmp%128#0)
        let tmp%130#0: uint64 = (txn GroupIndex)
        let pay2#0: uint64 = (- tmp%130#0 1u)
        let gtxn_type%2#0: uint64 = ((gtxns TypeEnum) pay2#0)
        let gtxn_type_matches%2#0: bool = (== gtxn_type%2#0 pay)
        (assert gtxn_type_matches%2#0) // transaction type is pay
        let tmp%131#0: bytes = (txna ApplicationArgs 15)
        let tmp%133#0: bytes = (txna ApplicationArgs 15)
        let tmp%0#3: uint64 = (txn NumAppArgs)
        let tmp%1#4: bool = (== tmp%0#3 16u)
        (assert tmp%1#4)
        let tmp%2#1: uint64 = ((gtxns Amount) pay#0)
        let tmp%3#1: bool = (== tmp%2#1 100000u)
        (assert tmp%3#1)
        let tmp%4#1: uint64 = ((gtxns Amount) pay2#0)
        let tmp%5#1: bool = (== tmp%4#1 200000u)
        (assert tmp%5#1)
        (assert asset#0)
        (assert asset2#0)
        let tmp%8#0: bytes = (concat s#0 t#0)
        (log tmp%8#0)
        let tmp%9#1: uint64 = (btoi a#0)
        let tmp%10#1: uint64 = (btoi b#0)
        let tmp%11#0: uint64 = (+ tmp%9#1 tmp%10#1)
        let tmp%12#0: uint64 = (btoi c#0)
        let tmp%13#0: uint64 = (+ tmp%11#0 tmp%12#0)
        let tmp%14#0: uint64 = (+ tmp%13#0 d#0)
        let tmp%15#1: uint64 = (btoi e#0)
        let tmp%16#1: uint64 = (+ tmp%14#0 tmp%15#1)
        let tmp%17#1: uint64 = (btoi f#0)
        let tmp%18#0: uint64 = (+ tmp%16#1 tmp%17#1)
        let tmp%19#1: uint64 = (btoi g#0)
        let tmp%20#0: uint64 = (+ tmp%18#0 tmp%19#1)
        let tmp%21#1: uint64 = (btoi h#0)
        let tmp%22#0: uint64 = (+ tmp%20#0 tmp%21#1)
        let tmp%23#1: uint64 = (btoi i#0)
        let tmp%24#0: uint64 = (+ tmp%22#0 tmp%23#1)
        let tmp%25#1: uint64 = (btoi j#0)
        let tmp%26#0: uint64 = (+ tmp%24#0 tmp%25#1)
        let tmp%27#1: uint64 = (btoi k#0)
        let tmp%28#0: uint64 = (+ tmp%26#0 tmp%27#1)
        let tmp%29#1: uint64 = (btoi l#0)
        let tmp%30#0: uint64 = (+ tmp%28#0 tmp%29#1)
        let tmp%31#0: uint64 = (btoi m#0)
        let tmp%32#1: uint64 = (+ tmp%30#0 tmp%31#0)
        let tmp%33#0: uint64 = (extract_uint64 tmp%109#0 0u)
        let tmp%34#1: uint64 = (+ tmp%32#1 tmp%33#0)
        let tmp%35#0: uint64 = (extract_uint64 tmp%111#0 8u)
        let tmp%36#1: uint64 = (+ tmp%34#1 tmp%35#0)
        let tmp%37#0: uint64 = (+ tmp%36#1 p#0)
        let tmp%38#1: uint64 = (extract_uint64 tmp%116#0 24u)
        let tmp%39#0: uint64 = (+ tmp%37#0 tmp%38#1)
        let tmp%40#1: uint64 = (extract_uint64 tmp%118#0 32u)
        let tmp%41#0: uint64 = (+ tmp%39#0 tmp%40#1)
        let tmp%42#1: uint64 = (extract_uint64 tmp%131#0 45u)
        let tmp%43#1: uint64 = (+ tmp%41#0 tmp%42#1)
        let tmp%44#1: uint64 = (extract_uint64 tmp%133#0 53u)
        let to_encode%0#1: uint64 = (+ tmp%43#1 tmp%44#1)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#1)
        let tmp%136#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%136#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@18: // hello_with_algopy_string_route_L276
        let tmp%137#0: uint64 = (txn OnCompletion)
        let tmp%138#0: bool = (! tmp%137#0)
        (assert tmp%138#0) // OnCompletion is not NoOp
        let tmp%139#0: uint64 = (txn ApplicationID)
        (assert tmp%139#0) // can only call when not creating
        let tmp%141#0: bytes = (txna ApplicationArgs 1)
        let name#0: bytes = ((extract 2 0) tmp%141#0)
        let tmp%0#4: bytes = (concat "Hello " name#0)
        let tmp%1#3: bytes = (concat tmp%0#4 "!")
        let length%1#0: uint64 = (len tmp%1#3)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 tmp%1#3)
        let tmp%143#0: bytes = (concat 0x151f7c75 encoded_value%1#0)
        (log tmp%143#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@19: // bare_routing_L22
        let tmp%144#0: uint64 = (txn OnCompletion)
        goto_nth [block@20, block@20, block@20, block@21, block@20, block@20][tmp%144#0] else goto block@21
    block@20: // bare_abi_config_L66
        let tmp%145#0: uint64 = (txn ApplicationID)
        let tmp%146#0: bool = (! tmp%145#0)
        (assert tmp%146#0) // can only call when creating
        (log "Hello World")
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@21: // after_if_else_L22
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@22
    block@22: // after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router___L1
        return tmp%0#0