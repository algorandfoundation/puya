main test_cases.abi_routing.contract.Reference.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "asa" 123u)
        (app_global_put "an_int" 2u)
        (app_global_put "some_bytes" 0x070809)
        let new_state_value%0#0: bytes = (txn Sender)
        (app_global_put "creator" new_state_value%0#0)
        (app_global_put "app" 123u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@20
    block@4: // abi_routing_L24
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "noop_with_uint64(uint64)uint8" => block@5, method "opt_in(uint64,byte[])void" => block@6, method "all_the_things(uint64)uint8" => block@7, method "mixed_oca(uint64)uint8" => block@8, method "opt_into_asset(asset)void" => block@9, method "with_transactions(asset,uint64,pay,uint64)void" => block@10, method "compare_assets(asset,asset)void" => block@11, method "get_address()address" => block@12, method "get_asset()uint64" => block@13, method "get_application()uint64" => block@14, method "get_an_int()uint64" => block@15, method "method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string,uint64,byte[])void" => block@16, method "method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[]" => block@17, method "method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64" => block@18, method "hello_with_algopy_string(string)string" => block@19, * => block@22}
    block@5: // noop_with_uint64_route_L36
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let a#0: bytes = (txna ApplicationArgs 1)
        let tmp%0#2: uint64 = (btoi a#0)
        let result#0: uint64 = (+ 1u tmp%0#2)
        let val_as_bytes%0#0: bytes = (itob result#0)
        let tmp%1#1: bytes = ((extract 7 1) val_as_bytes%0#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%1#1)
        (log tmp%9#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@6: // opt_in_route_L41
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 OptIn)
        (assert tmp%11#0) // OnCompletion is not OptIn
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let tmp%14#0: bytes = (txna ApplicationArgs 1)
        let uint#0: uint64 = (btoi tmp%14#0)
        let tmp%16#0: bytes = (txna ApplicationArgs 2)
        let bites#0: bytes = ((extract 2 0) tmp%16#0)
        let tmp%0#3: bytes = (txn Sender)
        (app_local_put tmp%0#3 "local_uint" uint#0)
        let tmp%1#1: bytes = (txn Sender)
        (app_local_put tmp%1#1 "local_bytes" bites#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@7: // all_the_things_route_L46
        let a#0: bytes = (txna ApplicationArgs 1)
        let tmp%0#2: uint64 = (btoi a#0)
        let result#0: uint64 = (+ 1u tmp%0#2)
        let val_as_bytes%0#0: bytes = (itob result#0)
        let tmp%1#1: bytes = ((extract 7 1) val_as_bytes%0#0)
        let tmp%20#0: bytes = (concat 0x151f7c75 tmp%1#1)
        (log tmp%20#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@8: // mixed_oca_route_L62
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: uint64 = (shl 1u tmp%21#0)
        let tmp%23#0: uint64 = (& tmp%22#0 37u)
        (assert tmp%23#0) // OnCompletion is not one of NoOp, CloseOut, DeleteApplication
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        let a#0: bytes = (txna ApplicationArgs 1)
        let tmp%0#2: uint64 = (btoi a#0)
        let result#0: uint64 = (+ 1u tmp%0#2)
        let val_as_bytes%0#0: bytes = (itob result#0)
        let tmp%1#1: bytes = ((extract 7 1) val_as_bytes%0#0)
        let tmp%28#0: bytes = (concat 0x151f7c75 tmp%1#1)
        (log tmp%28#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@9: // opt_into_asset_route_L88
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let tmp%33#0: bytes = (txna ApplicationArgs 1)
        let tmp%34#0: uint64 = (btoi tmp%33#0)
        let asset#0: uint64 = ((txnas Assets) tmp%34#0)
        let tmp%0#3: bytes = (txn Sender)
        let tmp%1#1: bytes = (global CreatorAddress)
        let tmp%2#4: bool = (== tmp%0#3 tmp%1#1)
        (assert tmp%2#4) // Only creator can opt in to ASA
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%3#1: bool = (! maybe_value%0#0)
        (assert tmp%3#1) // ASA already opted in
        (app_global_put "asa" asset#0)
        itxn_begin
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        let tmp%4#3: bytes = (global CurrentApplicationAddress)
        ((itxn_field AssetReceiver) tmp%4#3)
        ((itxn_field XferAsset) asset#0)
        itxn_submit
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@10: // with_transactions_route_L105
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        (assert tmp%38#0) // can only call when not creating
        let tmp%40#0: bytes = (txna ApplicationArgs 1)
        let tmp%41#0: uint64 = (btoi tmp%40#0)
        let asset#0: uint64 = ((txnas Assets) tmp%41#0)
        let an_int#0: bytes = (txna ApplicationArgs 2)
        let tmp%44#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%44#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let another_int#0: bytes = (txna ApplicationArgs 3)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%0#0: bool = (== maybe_value%0#0 asset#0)
        (assert tmp%0#0) // is correct asset
        let tmp%1#3: uint64 = (btoi an_int#0)
        let tmp%2#4: bool = (== tmp%1#3 1u)
        (assert tmp%2#4) // is correct int
        let tmp%3#4: bytes = ((gtxns Receiver) pay#0)
        let tmp%4#3: bytes = (global CurrentApplicationAddress)
        let tmp%5#1: bool = (== tmp%3#4 tmp%4#3)
        (assert tmp%5#1) // is payment to app
        let tmp%6#2: uint64 = (btoi another_int#0)
        let tmp%7#3: bool = (== tmp%6#2 2u)
        (assert tmp%7#3) // is correct int
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@11: // compare_assets_route_L118
        let tmp%46#0: uint64 = (txn OnCompletion)
        let tmp%47#0: bool = (! tmp%46#0)
        (assert tmp%47#0) // OnCompletion is not NoOp
        let tmp%48#0: uint64 = (txn ApplicationID)
        (assert tmp%48#0) // can only call when not creating
        let tmp%50#0: bytes = (txna ApplicationArgs 1)
        let tmp%51#0: uint64 = (btoi tmp%50#0)
        let asset_a#0: uint64 = ((txnas Assets) tmp%51#0)
        let tmp%53#0: bytes = (txna ApplicationArgs 2)
        let tmp%54#0: uint64 = (btoi tmp%53#0)
        let asset_b#0: uint64 = ((txnas Assets) tmp%54#0)
        let tmp%0#0: bool = (== asset_a#0 asset_b#0)
        (assert tmp%0#0) // asset a == b
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@12: // get_address_route_L122
        let tmp%56#0: uint64 = (txn OnCompletion)
        let tmp%57#0: bool = (! tmp%56#0)
        (assert tmp%57#0) // OnCompletion is not NoOp
        let tmp%58#0: uint64 = (txn ApplicationID)
        (assert tmp%58#0) // can only call when not creating
        (log CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@13: // get_asset_route_L126
        let tmp%62#0: uint64 = (txn OnCompletion)
        let tmp%63#0: bool = (! tmp%62#0)
        (assert tmp%63#0) // OnCompletion is not NoOp
        let tmp%64#0: uint64 = (txn ApplicationID)
        (assert tmp%64#0) // can only call when not creating
        (log 0x151f7c7500000000000001c8)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@14: // get_application_route_L130
        let tmp%68#0: uint64 = (txn OnCompletion)
        let tmp%69#0: bool = (! tmp%68#0)
        (assert tmp%69#0) // OnCompletion is not NoOp
        let tmp%70#0: uint64 = (txn ApplicationID)
        (assert tmp%70#0) // can only call when not creating
        (log 0x151f7c7500000000000001c8)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@15: // get_an_int_route_L134
        let tmp%74#0: uint64 = (txn OnCompletion)
        let tmp%75#0: bool = (! tmp%74#0)
        (assert tmp%75#0) // OnCompletion is not NoOp
        let tmp%76#0: uint64 = (txn ApplicationID)
        (assert tmp%76#0) // can only call when not creating
        (log 0x151f7c750000000000000003)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@16: // method_with_default_args_route_L138
        let tmp%80#0: uint64 = (txn OnCompletion)
        let tmp%81#0: bool = (! tmp%80#0)
        (assert tmp%81#0) // OnCompletion is not NoOp
        let tmp%82#0: uint64 = (txn ApplicationID)
        (assert tmp%82#0) // can only call when not creating
        let tmp%84#0: bytes = (txna ApplicationArgs 1)
        let tmp%85#0: uint64 = (btoi tmp%84#0)
        let asset_from_storage#0: uint64 = ((txnas Assets) tmp%85#0)
        let tmp%87#0: bytes = (txna ApplicationArgs 2)
        let tmp%88#0: uint64 = (btoi tmp%87#0)
        let asset_from_function#0: uint64 = ((txnas Assets) tmp%88#0)
        let tmp%90#0: bytes = (txna ApplicationArgs 3)
        let tmp%91#0: uint64 = (btoi tmp%90#0)
        let account_from_storage#0: bytes = ((txnas Accounts) tmp%91#0)
        let tmp%93#0: bytes = (txna ApplicationArgs 4)
        let tmp%94#0: uint64 = (btoi tmp%93#0)
        let account_from_function#0: bytes = ((txnas Accounts) tmp%94#0)
        let tmp%96#0: bytes = (txna ApplicationArgs 5)
        let tmp%97#0: uint64 = (btoi tmp%96#0)
        let application_from_storage#0: uint64 = ((txnas Applications) tmp%97#0)
        let tmp%99#0: bytes = (txna ApplicationArgs 6)
        let tmp%100#0: uint64 = (btoi tmp%99#0)
        let application_from_function#0: uint64 = ((txnas Applications) tmp%100#0)
        let bytes_from_storage#0: bytes = (txna ApplicationArgs 7)
        let int_from_storage#0: bytes = (txna ApplicationArgs 8)
        let int_from_function#0: bytes = (txna ApplicationArgs 9)
        let int_from_const#0: bytes = (txna ApplicationArgs 10)
        let str_from_const#0: bytes = (txna ApplicationArgs 11)
        let tmp%107#0: bytes = (txna ApplicationArgs 12)
        let int_from_local#0: uint64 = (btoi tmp%107#0)
        let tmp%109#0: bytes = (txna ApplicationArgs 13)
        let bytes_from_local#0: bytes = ((extract 2 0) tmp%109#0)
        let tmp%0#0: bool = (== asset_from_storage#0 123u)
        (assert tmp%0#0) // wrong asset from storage
        let tmp%1#2: bool = (== asset_from_function#0 456u)
        (assert tmp%1#2) // wrong asset from function
        let tmp%2#0: bytes = (global CreatorAddress)
        let tmp%3#1: bool = (== account_from_storage#0 tmp%2#0)
        (assert tmp%3#1) // wrong account from storage
        let tmp%4#3: bytes = (global ZeroAddress)
        let tmp%5#1: bool = (== account_from_function#0 tmp%4#3)
        (assert tmp%5#1) // wrong account from function
        let tmp%6#3: bool = (== application_from_storage#0 123u)
        (assert tmp%6#3) // wrong application from storage
        let tmp%7#3: bool = (== application_from_function#0 456u)
        (assert tmp%7#3) // wrong application from function
        let reinterpret_biguint%0#0: biguint = ((extract 0 1) bytes_from_storage#0) // on error: Index access is out of bounds
        let tmp%8#3: bool = (b== reinterpret_biguint%0#0 0x07)
        (assert tmp%8#3) // wrong 0th byte from storage
        let reinterpret_biguint%2#0: biguint = ((extract 1 1) bytes_from_storage#0) // on error: Index access is out of bounds
        let tmp%9#3: bool = (b== reinterpret_biguint%2#0 0x08)
        (assert tmp%9#3) // wrong 1st byte from storage
        let reinterpret_biguint%4#0: biguint = ((extract 2 1) bytes_from_storage#0) // on error: Index access is out of bounds
        let tmp%10#3: bool = (b== reinterpret_biguint%4#0 0x09)
        (assert tmp%10#3) // wrong 2nd byte from storage
        let tmp%11#1: uint64 = (btoi int_from_storage#0)
        let tmp%12#3: bool = (== tmp%11#1 2u)
        (assert tmp%12#3) // wrong int from storage
        let tmp%13#1: uint64 = (btoi int_from_function#0)
        let tmp%14#2: bool = (== tmp%13#1 3u)
        (assert tmp%14#2) // wrong int from function
        let tmp%15#2: bool = (b== int_from_const#0 0x0000007b)
        (assert tmp%15#2)
        let tmp%16#2: bool = (== str_from_const#0 0x0003616263)
        (assert tmp%16#2)
        let tmp%17#2: bytes = (txn Sender)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%17#2 0u "local_uint")
        (assert maybe_exists%0#0) // check self.local_uint exists for account
        let tmp%18#2: bool = (== int_from_local#0 maybe_value%0#0)
        (assert tmp%18#2)
        let tmp%19#2: bytes = (txn Sender)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex tmp%19#2 0u "local_bytes")
        (assert maybe_exists%1#0) // check self.local_bytes exists for account
        let tmp%20#2: bool = (== bytes_from_local#0 maybe_value%1#0)
        (assert tmp%20#2)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@17: // method_with_15_args_route_L187
        let tmp%111#0: uint64 = (txn OnCompletion)
        let tmp%112#0: bool = (! tmp%111#0)
        (assert tmp%112#0) // OnCompletion is not NoOp
        let tmp%113#0: uint64 = (txn ApplicationID)
        (assert tmp%113#0) // can only call when not creating
        let tmp%115#0: bytes = (txna ApplicationArgs 1)
        let one#0: uint64 = (btoi tmp%115#0)
        let tmp%117#0: bytes = (txna ApplicationArgs 2)
        let two#0: uint64 = (btoi tmp%117#0)
        let tmp%119#0: bytes = (txna ApplicationArgs 3)
        let three#0: uint64 = (btoi tmp%119#0)
        let tmp%121#0: bytes = (txna ApplicationArgs 4)
        let four#0: uint64 = (btoi tmp%121#0)
        let tmp%123#0: bytes = (txna ApplicationArgs 5)
        let five#0: uint64 = (btoi tmp%123#0)
        let tmp%125#0: bytes = (txna ApplicationArgs 6)
        let six#0: uint64 = (btoi tmp%125#0)
        let tmp%127#0: bytes = (txna ApplicationArgs 7)
        let seven#0: uint64 = (btoi tmp%127#0)
        let tmp%129#0: bytes = (txna ApplicationArgs 8)
        let eight#0: uint64 = (btoi tmp%129#0)
        let tmp%131#0: bytes = (txna ApplicationArgs 9)
        let nine#0: uint64 = (btoi tmp%131#0)
        let tmp%133#0: bytes = (txna ApplicationArgs 10)
        let ten#0: uint64 = (btoi tmp%133#0)
        let tmp%135#0: bytes = (txna ApplicationArgs 11)
        let eleven#0: uint64 = (btoi tmp%135#0)
        let tmp%137#0: bytes = (txna ApplicationArgs 12)
        let twelve#0: uint64 = (btoi tmp%137#0)
        let tmp%139#0: bytes = (txna ApplicationArgs 13)
        let thirteen#0: uint64 = (btoi tmp%139#0)
        let tmp%141#0: bytes = (txna ApplicationArgs 14)
        let fourteen#0: uint64 = (btoi tmp%141#0)
        let tmp%143#0: bytes = (txna ApplicationArgs 15)
        let fifteen#0: bytes = ((extract 2 0) tmp%143#0)
        let tmp%0#2: uint64 = (+ one#0 two#0)
        let tmp%1#3: uint64 = (+ tmp%0#2 three#0)
        let tmp%2#1: uint64 = (+ tmp%1#3 four#0)
        let tmp%3#0: uint64 = (+ tmp%2#1 five#0)
        let tmp%4#1: uint64 = (+ tmp%3#0 six#0)
        let tmp%5#0: uint64 = (+ tmp%4#1 seven#0)
        let tmp%6#2: uint64 = (+ tmp%5#0 eight#0)
        let tmp%7#2: uint64 = (+ tmp%6#2 nine#0)
        let tmp%8#2: uint64 = (+ tmp%7#2 ten#0)
        let tmp%9#1: uint64 = (+ tmp%8#2 eleven#0)
        let tmp%10#0: uint64 = (+ tmp%9#1 twelve#0)
        let tmp%11#1: uint64 = (+ tmp%10#0 thirteen#0)
        let tmp%12#0: uint64 = (+ tmp%11#1 fourteen#0)
        (assert tmp%12#0)
        let length%0#0: uint64 = (len fifteen#0)
        let as_bytes%0#0: bytes = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 fifteen#0)
        let tmp%145#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%145#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@18: // method_with_more_than_15_args_route_L225
        let tmp%146#0: uint64 = (txn OnCompletion)
        let tmp%147#0: bool = (! tmp%146#0)
        (assert tmp%147#0) // OnCompletion is not NoOp
        let tmp%148#0: uint64 = (txn ApplicationID)
        (assert tmp%148#0) // can only call when not creating
        let a#0: bytes = (txna ApplicationArgs 1)
        let b#0: bytes = (txna ApplicationArgs 2)
        let c#0: bytes = (txna ApplicationArgs 3)
        let tmp%153#0: bytes = (txna ApplicationArgs 4)
        let d#0: uint64 = (btoi tmp%153#0)
        let tmp%155#0: bytes = (txna ApplicationArgs 5)
        let tmp%156#0: uint64 = (btoi tmp%155#0)
        let asset#0: uint64 = ((txnas Assets) tmp%156#0)
        let e#0: bytes = (txna ApplicationArgs 6)
        let f#0: bytes = (txna ApplicationArgs 7)
        let tmp%160#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%160#0 2u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let g#0: bytes = (txna ApplicationArgs 8)
        let h#0: bytes = (txna ApplicationArgs 9)
        let i#0: bytes = (txna ApplicationArgs 10)
        let j#0: bytes = (txna ApplicationArgs 11)
        let k#0: bytes = (txna ApplicationArgs 12)
        let l#0: bytes = (txna ApplicationArgs 13)
        let m#0: bytes = (txna ApplicationArgs 14)
        let tmp%168#0: bytes = (txna ApplicationArgs 15)
        let n#0: bytes = ((extract 0 8) tmp%168#0) // on error: Index access is out of bounds
        let tmp%170#0: bytes = (txna ApplicationArgs 15)
        let o#0: bytes = ((extract 8 8) tmp%170#0) // on error: Index access is out of bounds
        let tmp%172#0: bytes = (txna ApplicationArgs 15)
        let tmp%173#0: bytes = ((extract 16 8) tmp%172#0) // on error: Index access is out of bounds
        let p#0: uint64 = (btoi tmp%173#0)
        let tmp%175#0: bytes = (txna ApplicationArgs 15)
        let q#0: bytes = ((extract 24 8) tmp%175#0) // on error: Index access is out of bounds
        let tmp%177#0: bytes = (txna ApplicationArgs 15)
        let r#0: bytes = ((extract 32 8) tmp%177#0) // on error: Index access is out of bounds
        let tmp%179#0: bytes = (txna ApplicationArgs 15)
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%179#0 40u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%179#0 42u)
        let tmp%180#0: bytes = (substring3 tmp%179#0 item_start_offset%0#0 item_end_offset%0#0)
        let s#0: bytes = ((extract 2 0) tmp%180#0)
        let tmp%182#0: bytes = (txna ApplicationArgs 15)
        let item_start_offset%1#0: uint64 = (extract_uint16 tmp%182#0 42u)
        let item_end_offset%1#0: uint64 = (len tmp%182#0)
        let tmp%183#0: bytes = (substring3 tmp%182#0 item_start_offset%1#0 item_end_offset%1#0)
        let t#0: bytes = ((extract 2 0) tmp%183#0)
        let tmp%185#0: bytes = (txna ApplicationArgs 15)
        let tmp%186#0: bytes = ((extract 44 1) tmp%185#0) // on error: Index access is out of bounds
        let tmp%187#0: uint64 = (btoi tmp%186#0)
        let asset2#0: uint64 = ((txnas Assets) tmp%187#0)
        let tmp%189#0: uint64 = (txn GroupIndex)
        let pay2#0: uint64 = (- tmp%189#0 1u)
        let gtxn_type%2#0: uint64 = ((gtxns TypeEnum) pay2#0)
        let gtxn_type_matches%2#0: bool = (== gtxn_type%2#0 pay)
        (assert gtxn_type_matches%2#0) // transaction type is pay
        let tmp%190#0: bytes = (txna ApplicationArgs 15)
        let u#0: bytes = ((extract 45 8) tmp%190#0) // on error: Index access is out of bounds
        let tmp%192#0: bytes = (txna ApplicationArgs 15)
        let v#0: bytes = ((extract 53 8) tmp%192#0) // on error: Index access is out of bounds
        let tmp%0#2: uint64 = (txn NumAppArgs)
        let tmp%1#2: bool = (== tmp%0#2 16u)
        (assert tmp%1#2)
        let tmp%2#1: uint64 = ((gtxns Amount) pay#0)
        let tmp%3#1: bool = (== tmp%2#1 100000u)
        (assert tmp%3#1)
        let tmp%4#1: uint64 = ((gtxns Amount) pay2#0)
        let tmp%5#1: bool = (== tmp%4#1 200000u)
        (assert tmp%5#1)
        (assert asset#0)
        (assert asset2#0)
        let tmp%8#1: bytes = (concat s#0 t#0)
        (log tmp%8#1)
        let tmp%9#1: uint64 = (btoi a#0)
        let tmp%10#0: uint64 = (btoi b#0)
        let tmp%11#1: uint64 = (+ tmp%9#1 tmp%10#0)
        let tmp%12#0: uint64 = (btoi c#0)
        let tmp%13#1: uint64 = (+ tmp%11#1 tmp%12#0)
        let tmp%14#1: uint64 = (+ tmp%13#1 d#0)
        let tmp%15#1: uint64 = (btoi e#0)
        let tmp%16#1: uint64 = (+ tmp%14#1 tmp%15#1)
        let tmp%17#1: uint64 = (btoi f#0)
        let tmp%18#1: uint64 = (+ tmp%16#1 tmp%17#1)
        let tmp%19#1: uint64 = (btoi g#0)
        let tmp%20#1: uint64 = (+ tmp%18#1 tmp%19#1)
        let tmp%21#0: uint64 = (btoi h#0)
        let tmp%22#0: uint64 = (+ tmp%20#1 tmp%21#0)
        let tmp%23#0: uint64 = (btoi i#0)
        let tmp%24#0: uint64 = (+ tmp%22#0 tmp%23#0)
        let tmp%25#1: uint64 = (btoi j#0)
        let tmp%26#1: uint64 = (+ tmp%24#0 tmp%25#1)
        let tmp%27#1: uint64 = (btoi k#0)
        let tmp%28#1: uint64 = (+ tmp%26#1 tmp%27#1)
        let tmp%29#0: uint64 = (btoi l#0)
        let tmp%30#1: uint64 = (+ tmp%28#1 tmp%29#0)
        let tmp%31#0: uint64 = (btoi m#0)
        let tmp%32#1: uint64 = (+ tmp%30#1 tmp%31#0)
        let tmp%33#1: uint64 = (btoi n#0)
        let tmp%34#0: uint64 = (+ tmp%32#1 tmp%33#1)
        let tmp%35#1: uint64 = (btoi o#0)
        let tmp%36#0: uint64 = (+ tmp%34#0 tmp%35#1)
        let tmp%37#1: uint64 = (+ tmp%36#0 p#0)
        let tmp%38#0: uint64 = (btoi q#0)
        let tmp%39#1: uint64 = (+ tmp%37#1 tmp%38#0)
        let tmp%40#1: uint64 = (btoi r#0)
        let tmp%41#0: uint64 = (+ tmp%39#1 tmp%40#1)
        let tmp%42#1: uint64 = (btoi u#0)
        let tmp%43#1: uint64 = (+ tmp%41#0 tmp%42#1)
        let tmp%44#0: uint64 = (btoi v#0)
        let to_encode%0#1: uint64 = (+ tmp%43#1 tmp%44#0)
        let val_as_bytes%0#0: bytes = (itob to_encode%0#1)
        let tmp%195#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%195#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@19: // hello_with_algopy_string_route_L291
        let tmp%196#0: uint64 = (txn OnCompletion)
        let tmp%197#0: bool = (! tmp%196#0)
        (assert tmp%197#0) // OnCompletion is not NoOp
        let tmp%198#0: uint64 = (txn ApplicationID)
        (assert tmp%198#0) // can only call when not creating
        let tmp%200#0: bytes = (txna ApplicationArgs 1)
        let name#0: bytes = ((extract 2 0) tmp%200#0)
        let tmp%0#3: bytes = (concat "Hello " name#0)
        let tmp%1#1: bytes = (concat tmp%0#3 "!")
        let length%1#0: uint64 = (len tmp%1#1)
        let as_bytes%1#0: bytes = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 tmp%1#1)
        let tmp%202#0: bytes = (concat 0x151f7c75 encoded_value%1#0)
        (log tmp%202#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@20: // bare_routing_L24
        let tmp%203#0: uint64 = (txn OnCompletion)
        goto_nth [block@21, block@21, block@21, block@22, block@21, block@21][tmp%203#0] else goto block@22
    block@21: // bare_abi_config_L75
        let tmp%204#0: uint64 = (txn ApplicationID)
        let tmp%205#0: bool = (! tmp%204#0)
        (assert tmp%205#0) // can only call when creating
        (log "Hello World")
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@22: // after_if_else_L24
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0
        goto block@23
    block@23: // after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router___L1
        return tmp%0#0