{
  "version": 3,
  "sources": [
    "../custom_approval.py"
  ],
  "mappings": ";;;;;;AAQe;;AAAA;AAAP;AAIG;;AAAoB;;AAApB;AAAA;;;AAA0B;;;AAAmC;;AAAR;AAA3B;AAA1B;;;AACK;;;;;;;;;;;;;;AAAJ;AARZ;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAiBK;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;AAAA;;;AAAA;AAEc;;AAAJ;AAFV;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.abi_routing.custom_approval.CustomApproval.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3": {
      "op": "bnz after_if_else@2",
      "stack_out": []
    },
    "6": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "8": {
      "op": "!",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "9": {
      "error": "nonsense assert just to generate an init method",
      "op": "assert // nonsense assert just to generate an init method",
      "stack_out": []
    },
    "10": {
      "block": "after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "12": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "2"
      ]
    },
    "14": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "15": {
      "op": "bz after_if_else@6",
      "stack_out": []
    },
    "18": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "21": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "42"
      ]
    },
    "23": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "24": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "25": {
      "op": "bz after_if_else@6",
      "stack_out": []
    },
    "28": {
      "op": "pushbytes \"\\xf0\\x9f\\x8e\\x89\\xf0\\x9f\\x8e\\x89\\xf0\\x9f\\x8e\\x89\"",
      "defined_out": [
        "\"\\xf0\\x9f\\x8e\\x89\\xf0\\x9f\\x8e\\x89\\xf0\\x9f\\x8e\\x89\""
      ],
      "stack_out": [
        "\"\\xf0\\x9f\\x8e\\x89\\xf0\\x9f\\x8e\\x89\\xf0\\x9f\\x8e\\x89\""
      ]
    },
    "42": {
      "op": "log",
      "stack_out": []
    },
    "43": {
      "block": "after_if_else@6",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "45": {
      "op": "bz __algopy_default_create@13",
      "stack_out": []
    },
    "48": {
      "op": "pushbytes 0x03b5c0af // method \"add_one(uint64)uint64\"",
      "defined_out": [
        "Method(add_one(uint64)uint64)"
      ],
      "stack_out": [
        "Method(add_one(uint64)uint64)"
      ]
    },
    "54": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_one(uint64)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(add_one(uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "57": {
      "op": "match add_one_route@11",
      "stack_out": []
    },
    "61": {
      "op": "err"
    },
    "62": {
      "block": "add_one_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "64": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "65": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "67": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "68": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "69": {
      "op": "b add_one"
    },
    "72": {
      "block": "__algopy_default_create@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "74": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "75": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "77": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "78": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "79": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "80": {
      "subroutine": "test_cases.abi_routing.custom_approval.CustomApproval.add_one[routing]",
      "params": {},
      "block": "add_one",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "83": {
      "op": "btoi",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "84": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "1"
      ]
    },
    "86": {
      "op": "+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "87": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "88": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "94": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "95": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "96": {
      "op": "log",
      "stack_out": []
    },
    "97": {
      "op": "pushint 1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "99": {
      "op": "return",
      "stack_out": []
    }
  }
}