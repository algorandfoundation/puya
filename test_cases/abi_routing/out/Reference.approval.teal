#pragma version 10

test_cases.abi_routing.contract.Reference.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // abi_routing/contract.py:21
    // class Reference(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@18
    method "noop_with_uint64(uint64)uint8"
    method "all_the_things(uint64)uint8"
    method "mixed_oca(uint64)uint8"
    method "opt_into_asset(asset)void"
    method "with_transactions(asset,uint64,pay,uint64)void"
    method "compare_assets(asset,asset)void"
    method "get_address()address"
    method "get_asset()uint64"
    method "get_application()uint64"
    method "get_an_int()uint64"
    method "method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64)void"
    method "method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64"
    txna ApplicationArgs 0
    match main_noop_with_uint64_route@4 main_all_the_things_route@5 main_mixed_oca_route@6 main_opt_into_asset_route@7 main_with_transactions_route@8 main_compare_assets_route@9 main_get_address_route@10 main_get_asset_route@11 main_get_application_route@12 main_get_an_int_route@13 main_method_with_default_args_route@14 main_method_with_more_than_15_args_route@15
    err // reject transaction

main_noop_with_uint64_route@4:
    // abi_routing/contract.py:31
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:21
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    // abi_routing/contract.py:31
    // @arc4.abimethod
    callsub noop_with_uint64
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_all_the_things_route@5:
    // abi_routing/contract.py:21
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    // abi_routing/contract.py:36-47
    // @arc4.abimethod(
    //     allow_actions=[
    //         "NoOp",
    //         OnCompleteAction.OptIn,
    //         "CloseOut",
    //         OnCompleteAction.UpdateApplication,
    //         OnCompleteAction.DeleteApplication,
    //     ],
    //     name="all_the_things",
    //     create="allow",
    //     readonly=True,
    // )
    callsub full_abi_config
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_mixed_oca_route@6:
    // abi_routing/contract.py:52-60
    // @arc4.abimethod(
    //     allow_actions=[
    //         "NoOp",
    //         "CloseOut",
    //         "DeleteApplication",
    //     ],
    //     create=False,
    //     readonly=True,
    // )
    int 1
    txn OnCompletion
    shl
    int 37
    &
    assert // OnCompletion is one of NoOp, CloseOut, DeleteApplication
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:21
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    // abi_routing/contract.py:52-60
    // @arc4.abimethod(
    //     allow_actions=[
    //         "NoOp",
    //         "CloseOut",
    //         "DeleteApplication",
    //     ],
    //     create=False,
    //     readonly=True,
    // )
    callsub mixed_oca
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_opt_into_asset_route@7:
    // abi_routing/contract.py:78
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:21
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // abi_routing/contract.py:78
    // @arc4.abimethod
    callsub opt_into_asset
    int 1
    return

main_with_transactions_route@8:
    // abi_routing/contract.py:95
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:21
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 3
    // abi_routing/contract.py:95
    // @arc4.abimethod
    callsub with_transactions
    int 1
    return

main_compare_assets_route@9:
    // abi_routing/contract.py:108
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:21
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // abi_routing/contract.py:108
    // @arc4.abimethod
    callsub compare_assets
    int 1
    return

main_get_address_route@10:
    // abi_routing/contract.py:112
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_address
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_get_asset_route@11:
    // abi_routing/contract.py:116
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_asset
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_get_application_route@12:
    // abi_routing/contract.py:120
    // @arc4.abimethod(readonly=True, name="get_application")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_app
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_get_an_int_route@13:
    // abi_routing/contract.py:124
    // @arc4.abimethod(readonly=True, name="get_an_int")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_a_int
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_method_with_default_args_route@14:
    // abi_routing/contract.py:128-140
    // @arc4.abimethod(
    //     default_args={
    //         "asset_from_storage": "asa",
    //         "asset_from_function": get_asset,
    //         "account_from_storage": "creator",
    //         "account_from_function": "get_address",
    //         "application_from_storage": "app",
    //         "application_from_function": get_app,
    //         "bytes_from_storage": "some_bytes",
    //         "int_from_storage": "an_int",
    //         "int_from_function": "get_a_int",
    //     }
    // )
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:21
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    txna ApplicationArgs 4
    btoi
    txnas Accounts
    txna ApplicationArgs 5
    btoi
    txnas Applications
    txna ApplicationArgs 6
    btoi
    txnas Applications
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    // abi_routing/contract.py:128-140
    // @arc4.abimethod(
    //     default_args={
    //         "asset_from_storage": "asa",
    //         "asset_from_function": get_asset,
    //         "account_from_storage": "creator",
    //         "account_from_function": "get_address",
    //         "application_from_storage": "app",
    //         "application_from_function": get_app,
    //         "bytes_from_storage": "some_bytes",
    //         "int_from_storage": "an_int",
    //         "int_from_function": "get_a_int",
    //     }
    // )
    callsub method_with_default_args
    int 1
    return

main_method_with_more_than_15_args_route@15:
    // abi_routing/contract.py:165
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:21
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txnas Assets
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txn GroupIndex
    int 2
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    txna ApplicationArgs 13
    txna ApplicationArgs 14
    txna ApplicationArgs 15
    extract 0 8
    txna ApplicationArgs 15
    extract 8 8
    txna ApplicationArgs 15
    extract 16 8
    btoi
    txna ApplicationArgs 15
    extract 24 8
    txna ApplicationArgs 15
    extract 32 8
    txna ApplicationArgs 15
    dup
    int 40
    extract_uint16
    dup2
    extract_uint16
    int 2
    +
    extract3
    extract 2 0
    txna ApplicationArgs 15
    dup
    int 42
    extract_uint16
    dup2
    extract_uint16
    int 2
    +
    extract3
    extract 2 0
    txna ApplicationArgs 15
    extract 44 1
    btoi
    txnas Assets
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 15
    extract 45 8
    txna ApplicationArgs 15
    extract 53 8
    // abi_routing/contract.py:165
    // @arc4.abimethod
    callsub method_with_more_than_15_args
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@18:
    // abi_routing/contract.py:21
    // class Reference(ARC4Contract):
    txn OnCompletion
    switch main_bare_abi_config@19 main_bare_abi_config@19 main_bare_abi_config@19 main_reject_bare_on_completion@20 main_bare_abi_config@19 main_bare_abi_config@19
    err // reject transaction

main_bare_abi_config@19:
    // abi_routing/contract.py:65-74
    // @arc4.baremethod(
    //     allow_actions=[
    //         "NoOp",
    //         "OptIn",
    //         "CloseOut",
    //         "UpdateApplication",
    //         "DeleteApplication",
    //     ],
    //     create=True,
    // )
    txn ApplicationID
    !
    assert // is creating
    // abi_routing/contract.py:65-75
    // @arc4.baremethod(
    //     allow_actions=[
    //         "NoOp",
    //         "OptIn",
    //         "CloseOut",
    //         "UpdateApplication",
    //         "DeleteApplication",
    //     ],
    //     create=True,
    // )
    // def bare_abi_config(self) -> None:
    callsub bare_abi_config
    int 1
    return

main_reject_bare_on_completion@20:
    // abi_routing/contract.py:21
    // class Reference(ARC4Contract):
    err // reject transaction


// test_cases.abi_routing.contract.Reference.noop_with_uint64(a: bytes) -> bytes:
noop_with_uint64:
    // abi_routing/contract.py:31-32
    // @arc4.abimethod
    // def noop_with_uint64(self, a: arc4.UInt64) -> arc4.UInt8:
    proto 1 1
    // abi_routing/contract.py:33
    // result = 1 + a.decode()
    frame_dig -1
    btoi
    int 1
    +
    // abi_routing/contract.py:34
    // return arc4.UInt8(result)
    itob
    extract 7 1
    retsub


// test_cases.abi_routing.contract.Reference.full_abi_config(a: bytes) -> bytes:
full_abi_config:
    // abi_routing/contract.py:36-48
    // @arc4.abimethod(
    //     allow_actions=[
    //         "NoOp",
    //         OnCompleteAction.OptIn,
    //         "CloseOut",
    //         OnCompleteAction.UpdateApplication,
    //         OnCompleteAction.DeleteApplication,
    //     ],
    //     name="all_the_things",
    //     create="allow",
    //     readonly=True,
    // )
    // def full_abi_config(self, a: arc4.UInt64) -> arc4.UInt8:
    proto 1 1
    // abi_routing/contract.py:49
    // result = UInt64(1) + a.decode()
    frame_dig -1
    btoi
    int 1
    +
    // abi_routing/contract.py:50
    // return arc4.UInt8(result)
    itob
    extract 7 1
    retsub


// test_cases.abi_routing.contract.Reference.mixed_oca(a: bytes) -> bytes:
mixed_oca:
    // abi_routing/contract.py:52-61
    // @arc4.abimethod(
    //     allow_actions=[
    //         "NoOp",
    //         "CloseOut",
    //         "DeleteApplication",
    //     ],
    //     create=False,
    //     readonly=True,
    // )
    // def mixed_oca(self, a: arc4.UInt64) -> arc4.UInt8:
    proto 1 1
    // abi_routing/contract.py:62
    // result = UInt64(1) + a.decode()
    frame_dig -1
    btoi
    int 1
    +
    // abi_routing/contract.py:63
    // return arc4.UInt8(result)
    itob
    extract 7 1
    retsub


// test_cases.abi_routing.contract.Reference.opt_into_asset(asset: uint64) -> void:
opt_into_asset:
    // abi_routing/contract.py:78-79
    // @arc4.abimethod
    // def opt_into_asset(self, asset: Asset) -> None:
    proto 1 0
    // abi_routing/contract.py:80-81
    // # Only allow app creator to opt the app account into a ASA
    // assert op.Txn.sender == op.Global.creator_address, "Only creator can opt in to ASA"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    // abi_routing/contract.py:82-83
    // # Verify a ASA hasn't already been opted into
    // assert not self.asa, "ASA already opted in"
    int 0
    byte "asa"
    app_global_get_ex
    assert // check asa exists
    !
    assert // ASA already opted in
    // abi_routing/contract.py:84-85
    // # Save ASA ID in global state
    // self.asa = asset
    byte "asa"
    frame_dig -1
    app_global_put
    // abi_routing/contract.py:87-88
    // # Submit opt-in transaction: 0 asset transfer to self
    // op.ITxnCreate.begin()
    itxn_begin
    // abi_routing/contract.py:89
    // op.ITxnCreate.set_type_enum(TransactionType.AssetTransfer)
    int axfer
    itxn_field TypeEnum
    // abi_routing/contract.py:90
    // op.ITxnCreate.set_fee(UInt64(0))  # cover fee with outer txn
    int 0
    itxn_field Fee
    // abi_routing/contract.py:91
    // op.ITxnCreate.set_asset_receiver(op.Global.current_application_address)
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    // abi_routing/contract.py:92
    // op.ITxnCreate.set_xfer_asset(asset.asset_id)
    frame_dig -1
    itxn_field XferAsset
    // abi_routing/contract.py:93
    // op.ITxnCreate.submit()
    itxn_submit
    retsub


// test_cases.abi_routing.contract.Reference.with_transactions(asset: uint64, an_int: bytes, pay: uint64, another_int: bytes) -> void:
with_transactions:
    // abi_routing/contract.py:95-102
    // @arc4.abimethod
    // def with_transactions(
    //     self,
    //     asset: Asset,
    //     an_int: arc4.UInt64,
    //     pay: gtxn.PaymentTransaction,
    //     another_int: arc4.UInt64,
    // ) -> None:
    proto 4 0
    // abi_routing/contract.py:103
    // assert self.asa == asset, "is correct asset"
    int 0
    byte "asa"
    app_global_get_ex
    assert // check asa exists
    frame_dig -4
    ==
    assert // is correct asset
    // abi_routing/contract.py:104
    // assert an_int.decode() == 1, "is correct int"
    frame_dig -3
    btoi
    int 1
    ==
    assert // is correct int
    // abi_routing/contract.py:105
    // assert pay.receiver == op.Global.current_application_address, "is payment to app"
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // is payment to app
    // abi_routing/contract.py:106
    // assert another_int.decode() == 2, "is correct int"
    frame_dig -1
    btoi
    int 2
    ==
    assert // is correct int
    retsub


// test_cases.abi_routing.contract.Reference.compare_assets(asset_a: uint64, asset_b: uint64) -> void:
compare_assets:
    // abi_routing/contract.py:108-109
    // @arc4.abimethod
    // def compare_assets(self, asset_a: Asset, asset_b: Asset) -> None:
    proto 2 0
    // abi_routing/contract.py:110
    // assert asset_a == asset_b, "asset a == b"
    frame_dig -2
    frame_dig -1
    ==
    assert // asset a == b
    retsub


// test_cases.abi_routing.contract.Reference.get_address() -> bytes:
get_address:
    // abi_routing/contract.py:112-113
    // @arc4.abimethod(readonly=True)
    // def get_address(self) -> arc4.Address:
    proto 0 1
    // abi_routing/contract.py:114
    // return arc4.Address.from_bytes(op.Global.zero_address.bytes)
    global ZeroAddress
    retsub


// test_cases.abi_routing.contract.Reference.get_asset() -> bytes:
get_asset:
    // abi_routing/contract.py:116-117
    // @arc4.abimethod(readonly=True)
    // def get_asset(self) -> arc4.UInt64:
    proto 0 1
    // abi_routing/contract.py:118
    // return arc4.UInt64(456)
    byte 0x00000000000001c8
    retsub


// test_cases.abi_routing.contract.Reference.get_app() -> bytes:
get_app:
    // abi_routing/contract.py:120-121
    // @arc4.abimethod(readonly=True, name="get_application")
    // def get_app(self) -> arc4.UInt64:
    proto 0 1
    // abi_routing/contract.py:122
    // return arc4.UInt64(456)
    byte 0x00000000000001c8
    retsub


// test_cases.abi_routing.contract.Reference.get_a_int() -> bytes:
get_a_int:
    // abi_routing/contract.py:124-125
    // @arc4.abimethod(readonly=True, name="get_an_int")
    // def get_a_int(self) -> arc4.UInt64:
    proto 0 1
    // abi_routing/contract.py:126
    // return arc4.UInt64(3)
    byte 0x0000000000000003
    retsub


// test_cases.abi_routing.contract.Reference.method_with_default_args(asset_from_storage: uint64, asset_from_function: uint64, account_from_storage: bytes, account_from_function: bytes, application_from_storage: uint64, application_from_function: uint64, bytes_from_storage: bytes, int_from_storage: bytes, int_from_function: bytes) -> void:
method_with_default_args:
    // abi_routing/contract.py:128-152
    // @arc4.abimethod(
    //     default_args={
    //         "asset_from_storage": "asa",
    //         "asset_from_function": get_asset,
    //         "account_from_storage": "creator",
    //         "account_from_function": "get_address",
    //         "application_from_storage": "app",
    //         "application_from_function": get_app,
    //         "bytes_from_storage": "some_bytes",
    //         "int_from_storage": "an_int",
    //         "int_from_function": "get_a_int",
    //     }
    // )
    // def method_with_default_args(
    //     self,
    //     asset_from_storage: Asset,
    //     asset_from_function: Asset,
    //     account_from_storage: Account,
    //     account_from_function: Account,
    //     application_from_storage: Application,
    //     application_from_function: Application,
    //     bytes_from_storage: Bytes3,
    //     int_from_storage: arc4.UInt64,
    //     int_from_function: arc4.UInt64,
    // ) -> None:
    proto 9 0
    // abi_routing/contract.py:153
    // assert asset_from_storage == Asset(123), "wrong asset from storage"
    frame_dig -9
    int 123
    ==
    assert // wrong asset from storage
    // abi_routing/contract.py:154
    // assert asset_from_function == Asset(456), "wrong asset from function"
    frame_dig -8
    int 456
    ==
    assert // wrong asset from function
    // abi_routing/contract.py:155
    // assert account_from_storage == op.Global.creator_address, "wrong account from storage"
    frame_dig -7
    global CreatorAddress
    ==
    assert // wrong account from storage
    // abi_routing/contract.py:156
    // assert account_from_function == op.Global.zero_address, "wrong account from function"
    frame_dig -6
    global ZeroAddress
    ==
    assert // wrong account from function
    // abi_routing/contract.py:157
    // assert application_from_storage == Application(123), "wrong application from storage"
    frame_dig -5
    int 123
    ==
    assert // wrong application from storage
    // abi_routing/contract.py:158
    // assert application_from_function == Application(456), "wrong application from function"
    frame_dig -4
    int 456
    ==
    assert // wrong application from function
    // abi_routing/contract.py:159
    // assert bytes_from_storage[0] == arc4.Byte(7), "wrong 0th byte from storage"
    frame_dig -3
    extract 0 1
    byte 0x07
    b==
    assert // wrong 0th byte from storage
    // abi_routing/contract.py:160
    // assert bytes_from_storage[1] == arc4.Byte(8), "wrong 1st byte from storage"
    frame_dig -3
    extract 1 1
    byte 0x08
    b==
    assert // wrong 1st byte from storage
    // abi_routing/contract.py:161
    // assert bytes_from_storage[2] == arc4.Byte(9), "wrong 2nd byte from storage"
    frame_dig -3
    extract 2 1
    byte 0x09
    b==
    assert // wrong 2nd byte from storage
    // abi_routing/contract.py:162
    // assert int_from_storage.decode() == 2, "wrong int from storage"
    frame_dig -2
    btoi
    int 2
    ==
    assert // wrong int from storage
    // abi_routing/contract.py:163
    // assert int_from_function.decode() == 3, "wrong int from function"
    frame_dig -1
    btoi
    int 3
    ==
    assert // wrong int from function
    retsub


// test_cases.abi_routing.contract.Reference.method_with_more_than_15_args(a: bytes, b: bytes, c: bytes, d: uint64, asset: uint64, e: bytes, f: bytes, pay: uint64, g: bytes, h: bytes, i: bytes, j: bytes, k: bytes, l: bytes, m: bytes, n: bytes, o: bytes, p: uint64, q: bytes, r: bytes, s: bytes, t: bytes, asset2: uint64, pay2: uint64, u: bytes, v: bytes) -> bytes:
method_with_more_than_15_args:
    // abi_routing/contract.py:165-195
    // @arc4.abimethod
    // def method_with_more_than_15_args(
    //     self,
    //     a: arc4.UInt64,
    //     b: arc4.UInt64,
    //     c: arc4.UInt64,
    //     d: UInt64,
    //     asset: Asset,
    //     e: arc4.UInt64,
    //     f: arc4.UInt64,
    //     pay: gtxn.PaymentTransaction,
    //     g: arc4.UInt64,
    //     h: arc4.UInt64,
    //     i: arc4.UInt64,
    //     j: arc4.UInt64,
    //     k: arc4.UInt64,
    //     # ruff: noqa: E741
    //     l: arc4.UInt64,
    //     m: arc4.UInt64,
    //     n: arc4.UInt64,
    //     o: arc4.UInt64,
    //     p: UInt64,
    //     q: arc4.UInt64,
    //     r: arc4.UInt64,
    //     s: Bytes,
    //     t: Bytes,
    //     asset2: Asset,
    //     pay2: gtxn.PaymentTransaction,
    //     u: arc4.UInt64,
    //     v: arc4.UInt64,
    // ) -> arc4.UInt64:
    proto 26 1
    // abi_routing/contract.py:200
    // assert op.Txn.num_app_args == 16
    txn NumAppArgs
    int 16
    ==
    assert
    // abi_routing/contract.py:201
    // assert pay.amount == 100000
    frame_dig -19
    gtxns Amount
    int 100000
    ==
    assert
    // abi_routing/contract.py:202
    // assert pay2.amount == 200000
    frame_dig -3
    gtxns Amount
    int 200000
    ==
    assert
    // abi_routing/contract.py:203
    // assert asset.asset_id
    frame_dig -22
    assert
    // abi_routing/contract.py:204
    // assert asset2.asset_id
    frame_dig -4
    assert
    // abi_routing/contract.py:206
    // log(s + t)
    frame_dig -6
    frame_dig -5
    concat
    log
    // abi_routing/contract.py:209
    // a.decode()
    frame_dig -26
    btoi
    // abi_routing/contract.py:210
    // + b.decode()
    frame_dig -25
    btoi
    // abi_routing/contract.py:209-210
    // a.decode()
    // + b.decode()
    +
    // abi_routing/contract.py:211
    // + c.decode()
    frame_dig -24
    btoi
    // abi_routing/contract.py:209-211
    // a.decode()
    // + b.decode()
    // + c.decode()
    +
    // abi_routing/contract.py:209-212
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    frame_dig -23
    +
    // abi_routing/contract.py:213
    // + e.decode()
    frame_dig -21
    btoi
    // abi_routing/contract.py:209-213
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    +
    // abi_routing/contract.py:214
    // + f.decode()
    frame_dig -20
    btoi
    // abi_routing/contract.py:209-214
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    +
    // abi_routing/contract.py:215
    // + g.decode()
    frame_dig -18
    btoi
    // abi_routing/contract.py:209-215
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    +
    // abi_routing/contract.py:216
    // + h.decode()
    frame_dig -17
    btoi
    // abi_routing/contract.py:209-216
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    +
    // abi_routing/contract.py:217
    // + i.decode()
    frame_dig -16
    btoi
    // abi_routing/contract.py:209-217
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    // + i.decode()
    +
    // abi_routing/contract.py:218
    // + j.decode()
    frame_dig -15
    btoi
    // abi_routing/contract.py:209-218
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    // + i.decode()
    // + j.decode()
    +
    // abi_routing/contract.py:219
    // + k.decode()
    frame_dig -14
    btoi
    // abi_routing/contract.py:209-219
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    // + i.decode()
    // + j.decode()
    // + k.decode()
    +
    // abi_routing/contract.py:220
    // + l.decode()
    frame_dig -13
    btoi
    // abi_routing/contract.py:209-220
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    // + i.decode()
    // + j.decode()
    // + k.decode()
    // + l.decode()
    +
    // abi_routing/contract.py:221
    // + m.decode()
    frame_dig -12
    btoi
    // abi_routing/contract.py:209-221
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    // + i.decode()
    // + j.decode()
    // + k.decode()
    // + l.decode()
    // + m.decode()
    +
    // abi_routing/contract.py:222
    // + n.decode()
    frame_dig -11
    btoi
    // abi_routing/contract.py:209-222
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    // + i.decode()
    // + j.decode()
    // + k.decode()
    // + l.decode()
    // + m.decode()
    // + n.decode()
    +
    // abi_routing/contract.py:223
    // + o.decode()
    frame_dig -10
    btoi
    // abi_routing/contract.py:209-223
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    // + i.decode()
    // + j.decode()
    // + k.decode()
    // + l.decode()
    // + m.decode()
    // + n.decode()
    // + o.decode()
    +
    // abi_routing/contract.py:209-224
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    // + i.decode()
    // + j.decode()
    // + k.decode()
    // + l.decode()
    // + m.decode()
    // + n.decode()
    // + o.decode()
    // + p
    frame_dig -9
    +
    // abi_routing/contract.py:225
    // + q.decode()
    frame_dig -8
    btoi
    // abi_routing/contract.py:209-225
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    // + i.decode()
    // + j.decode()
    // + k.decode()
    // + l.decode()
    // + m.decode()
    // + n.decode()
    // + o.decode()
    // + p
    // + q.decode()
    +
    // abi_routing/contract.py:226
    // + r.decode()
    frame_dig -7
    btoi
    // abi_routing/contract.py:209-226
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    // + i.decode()
    // + j.decode()
    // + k.decode()
    // + l.decode()
    // + m.decode()
    // + n.decode()
    // + o.decode()
    // + p
    // + q.decode()
    // + r.decode()
    +
    // abi_routing/contract.py:227
    // + u.decode()
    frame_dig -2
    btoi
    // abi_routing/contract.py:209-227
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    // + i.decode()
    // + j.decode()
    // + k.decode()
    // + l.decode()
    // + m.decode()
    // + n.decode()
    // + o.decode()
    // + p
    // + q.decode()
    // + r.decode()
    // + u.decode()
    +
    // abi_routing/contract.py:228
    // + v.decode()
    frame_dig -1
    btoi
    // abi_routing/contract.py:209-228
    // a.decode()
    // + b.decode()
    // + c.decode()
    // + d
    // + e.decode()
    // + f.decode()
    // + g.decode()
    // + h.decode()
    // + i.decode()
    // + j.decode()
    // + k.decode()
    // + l.decode()
    // + m.decode()
    // + n.decode()
    // + o.decode()
    // + p
    // + q.decode()
    // + r.decode()
    // + u.decode()
    // + v.decode()
    +
    // abi_routing/contract.py:208-229
    // return arc4.UInt64(
    //     a.decode()
    //     + b.decode()
    //     + c.decode()
    //     + d
    //     + e.decode()
    //     + f.decode()
    //     + g.decode()
    //     + h.decode()
    //     + i.decode()
    //     + j.decode()
    //     + k.decode()
    //     + l.decode()
    //     + m.decode()
    //     + n.decode()
    //     + o.decode()
    //     + p
    //     + q.decode()
    //     + r.decode()
    //     + u.decode()
    //     + v.decode()
    // )
    itob
    retsub


// test_cases.abi_routing.contract.Reference.bare_abi_config() -> void:
bare_abi_config:
    // abi_routing/contract.py:65-75
    // @arc4.baremethod(
    //     allow_actions=[
    //         "NoOp",
    //         "OptIn",
    //         "CloseOut",
    //         "UpdateApplication",
    //         "DeleteApplication",
    //     ],
    //     create=True,
    // )
    // def bare_abi_config(self) -> None:
    proto 0 0
    // abi_routing/contract.py:76
    // log(b"Hello World")
    byte "Hello World"
    log
    retsub


// test_cases.abi_routing.contract.Reference.__init__() -> void:
__init__:
    // abi_routing/contract.py:22
    // def __init__(self) -> None:
    proto 0 0
    // abi_routing/contract.py:23
    // self.asa = Asset(123)
    byte "asa"
    int 123
    app_global_put
    // abi_routing/contract.py:24
    // self.an_int = UInt64(2)
    byte "an_int"
    int 2
    app_global_put
    // abi_routing/contract.py:25
    // self.some_bytes = Bytes3(arc4.Byte(7), arc4.Byte(8), arc4.Byte(9))
    byte "some_bytes"
    byte 0x070809
    app_global_put
    // abi_routing/contract.py:26
    // self.creator = op.Txn.sender
    byte "creator"
    txn Sender
    app_global_put
    // abi_routing/contract.py:27
    // self.app = Application(123)
    byte "app"
    int 123
    app_global_put
    // abi_routing/contract.py:29
    // assert arc4.arc4_signature("get(uint64,byte[])byte[]"), "has method selector"
    method "get(uint64,byte[])byte[]"
    len
    assert // has method selector
    retsub
