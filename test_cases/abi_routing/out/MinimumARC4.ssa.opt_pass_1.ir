contract test_cases.abi_routing.minimal.MinimumARC4:
    program approval:
        subroutine test_cases.abi_routing.minimal.MinimumARC4.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = (txn ApplicationID)
                goto tmp%0#0 ? block@2 : block@1
            block@1: // call __init___L1
                test_cases.abi_routing.minimal.MinimumARC4.__init__()
                goto block@2
            block@2: // after_if_else_L1
                let tmp%1#0: bool = test_cases.abi_routing.minimal.MinimumARC4.__puya_arc4_router__()
                return tmp%1#0
        
        subroutine test_cases.abi_routing.minimal.MinimumARC4.__init__() -> void:
            block@0: // L5
                (app_global_put "gvalue" 4u)
                return 
        
        subroutine test_cases.abi_routing.minimal.MinimumARC4.__puya_arc4_router__() -> bool:
            block@0: // L4
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@6 : block@2
            block@2: // bare_routing_L4
                let tmp%2#0: uint64 = (txn OnCompletion)
                goto tmp%2#0 ? block@6 : block@3
            block@3: // __algopy_default_create_L1
                let tmp%3#0: uint64 = (txn ApplicationID)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // can only call when creating
                return 1u
            block@6: // after_if_else_L4
                return 0u
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u