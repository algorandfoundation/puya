{
    "name": "CustomApproval",
    "structs": {},
    "methods": [
        {
            "name": "add_one",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        209
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        191
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        225
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        12
                    ],
                    "errorMessage": "nonsense assert just to generate an init method"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyB0ZXN0X2Nhc2VzLmFiaV9yb3V0aW5nLmN1c3RvbV9hcHByb3ZhbC5DdXN0b21BcHByb3ZhbC5hcHByb3ZhbF9wcm9ncmFtKCkgLT4gdWludDY0OgptYWluOgogICAgcHVzaGJ5dGVzICIiCiAgICBkdXAKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIGFiaV9yb3V0aW5nL2N1c3RvbV9hcHByb3ZhbC5weTo5CiAgICAvLyBhc3NlcnQgVHhuLmFwcGxpY2F0aW9uX2lkID09IDAsICJub25zZW5zZSBhc3NlcnQganVzdCB0byBnZW5lcmF0ZSBhbiBpbml0IG1ldGhvZCIKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gbm9uc2Vuc2UgYXNzZXJ0IGp1c3QgdG8gZ2VuZXJhdGUgYW4gaW5pdCBtZXRob2QKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gYWJpX3JvdXRpbmcvY3VzdG9tX2FwcHJvdmFsLnB5OjEzCiAgICAvLyBpZiBUeG4ubnVtX2FwcF9hcmdzID09IDIgYW5kIFR4bi5hcHBsaWNhdGlvbl9hcmdzKDEpID09IG9wLml0b2IoNDIpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIHB1c2hpbnQgMiAvLyAyCiAgICA9PQogICAgYnogbWFpbl9hZnRlcl9pZl9lbHNlQDUKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHB1c2hpbnQgNDIgLy8gNDIKICAgIGl0b2IKICAgID09CiAgICBieiBtYWluX2FmdGVyX2lmX2Vsc2VANQogICAgLy8gYWJpX3JvdXRpbmcvY3VzdG9tX2FwcHJvdmFsLnB5OjE0CiAgICAvLyBsb2coIvCfjonwn46J8J+OiSIpCiAgICBwdXNoYnl0ZXMgIlx4ZjBceDlmXHg4ZVx4ODlceGYwXHg5Zlx4OGVceDg5XHhmMFx4OWZceDhlXHg4OSIKICAgIGxvZwoKbWFpbl9hZnRlcl9pZl9lbHNlQDU6CiAgICAvLyBhYmlfcm91dGluZy9jdXN0b21fYXBwcm92YWwucHk6NgogICAgLy8gY2xhc3MgQ3VzdG9tQXBwcm92YWwoQVJDNENvbnRyYWN0KToKICAgIHB1c2hpbnQgMCAvLyAwCiAgICBidXJ5IDIKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX19fYWxnb3B5X2RlZmF1bHRfY3JlYXRlQDEyCiAgICBwdXNoYnl0ZXMgMHgwM2I1YzBhZiAvLyBtZXRob2QgImFkZF9vbmUodWludDY0KXVpbnQ2NCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fYWRkX29uZV9yb3V0ZUAxMAoKbWFpbl9zd2l0Y2hfY2FzZV9uZXh0QDExOgogICAgZGlnIDEKICAgIGJ1cnkgMQoKbWFpbl9hZnRlcl9pZl9lbHNlQDEzOgogICAgLy8gYWJpX3JvdXRpbmcvY3VzdG9tX2FwcHJvdmFsLnB5OjE2CiAgICAvLyBpZiBub3QgcmVzdWx0OgogICAgZHVwCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDcKICAgIC8vIGFiaV9yb3V0aW5nL2N1c3RvbV9hcHByb3ZhbC5weToxOC0xOQogICAgLy8gInRoaXMgd2lsbCBuZXZlciBiZSBzZWVuIHVubGVzcyB5b3UncmUgcnVubmluZyBpbiBzaW11bGF0aW9uIG1vZGUgYW55d2F5IgogICAgLy8gIiBzbyBJIGNhbiBzYXkgd2hhdGV2ZXIgSSB3YW50IGhlcmUiCiAgICBwdXNoYnl0ZXMgInRoaXMgd2lsbCBuZXZlciBiZSBzZWVuIHVubGVzcyB5b3UncmUgcnVubmluZyBpbiBzaW11bGF0aW9uIG1vZGUgYW55d2F5IHNvIEkgY2FuIHNheSB3aGF0ZXZlciBJIHdhbnQgaGVyZSIKICAgIC8vIGFiaV9yb3V0aW5nL2N1c3RvbV9hcHByb3ZhbC5weToxNy0yMAogICAgLy8gbG9nKAogICAgLy8gICAgICJ0aGlzIHdpbGwgbmV2ZXIgYmUgc2VlbiB1bmxlc3MgeW91J3JlIHJ1bm5pbmcgaW4gc2ltdWxhdGlvbiBtb2RlIGFueXdheSIKICAgIC8vICAgICAiIHNvIEkgY2FuIHNheSB3aGF0ZXZlciBJIHdhbnQgaGVyZSIKICAgIC8vICkKICAgIGxvZwoKbWFpbl9hZnRlcl9pZl9lbHNlQDc6CiAgICAvLyBhYmlfcm91dGluZy9jdXN0b21fYXBwcm92YWwucHk6MjEKICAgIC8vIHJldHVybiByZXN1bHQKICAgIHJldHVybgoKbWFpbl9hZGRfb25lX3JvdXRlQDEwOgogICAgLy8gYWJpX3JvdXRpbmcvY3VzdG9tX2FwcHJvdmFsLnB5OjIzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAmJgogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBtdXN0IGJlIE5vT3AgJiYgY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhZGRfb25lCiAgICBwdXNoaW50IDEgLy8gMQogICAgYnVyeSAyCiAgICBiIG1haW5fc3dpdGNoX2Nhc2VfbmV4dEAxMQoKbWFpbl9fX2FsZ29weV9kZWZhdWx0X2NyZWF0ZUAxMjoKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICAmJgogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBtdXN0IGJlIE5vT3AgJiYgY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBwdXNoaW50IDEgLy8gMQogICAgYnVyeSAxCiAgICBiIG1haW5fYWZ0ZXJfaWZfZWxzZUAxMwoKCi8vIHRlc3RfY2FzZXMuYWJpX3JvdXRpbmcuY3VzdG9tX2FwcHJvdmFsLkN1c3RvbUFwcHJvdmFsLmFkZF9vbmVbcm91dGluZ10oKSAtPiB2b2lkOgphZGRfb25lOgogICAgLy8gYWJpX3JvdXRpbmcvY3VzdG9tX2FwcHJvdmFsLnB5OjIzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgdWludDY0CiAgICBidG9pCiAgICAvLyBhYmlfcm91dGluZy9jdXN0b21fYXBwcm92YWwucHk6MjUKICAgIC8vIHJldHVybiB4ICsgMQogICAgcHVzaGludCAxIC8vIDEKICAgICsKICAgIC8vIGFiaV9yb3V0aW5nL2N1c3RvbV9hcHByb3ZhbC5weToyMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBpdG9iCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "C4AASTEYQAAEMRgURDEbgQISQQAZNhoBgSoWEkEAD4AM8J+OifCfjonwn46JsIEARQIxG0EAk4AEA7XArzYaAI4BAHVLAUUBSUAAbIBpdGhpcyB3aWxsIG5ldmVyIGJlIHNlZW4gdW5sZXNzIHlvdSdyZSBydW5uaW5nIGluIHNpbXVsYXRpb24gbW9kZSBhbnl3YXkgc28gSSBjYW4gc2F5IHdoYXRldmVyIEkgd2FudCBoZXJlsEMxGRQxGBBEiAAWgQFFAkL/ejEZFDEYFBBEgQFFAUL/bzYaAUkVgQgSRBeBAQgWgAQVH3x1TFCwiQ==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}