main test_cases.abi_routing.custom_approval.CustomApproval.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        let tmp%0#1: uint64 = (txn ApplicationID)
        let tmp%1#1: bool = (! tmp%0#1)
        (assert tmp%1#1) // nonsense assert just to generate an init method
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (== tmp%0#1 2u)
        goto tmp%1#1 ? block@4 : block@6
    block@4: // and_contd_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 1)
        let tmp%3#0: bytes = (itob 42u)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        goto tmp%4#0 ? block@5 : block@6
    block@5: // if_body_L14
        (log "\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89")
        goto block@6
    block@6: // after_if_else_L13
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@10 : block@12
    block@10: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "add_one(uint64)uint64" => block@11, * => block@14}
    block@11: // add_one_route_L23
        let tmp%3#1: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#1)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%8#0: uint64 = test_cases.abi_routing.custom_approval.CustomApproval.add_one(tmp%7#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%8#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%10#0)
        let test_cases.abi_routing.custom_approval.CustomApproval.__puya_arc4_router__%0#0: bool = 1u
        let result#0: bool = test_cases.abi_routing.custom_approval.CustomApproval.__puya_arc4_router__%0#0
        goto block@15
    block@12: // bare_routing_L6
        let tmp%11#0: uint64 = (txn OnCompletion)
        goto tmp%11#0 ? block@14 : block@13
    block@13: // __algopy_default_create_L1
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // can only call when creating
        let test_cases.abi_routing.custom_approval.CustomApproval.__puya_arc4_router__%0#0: bool = 1u
        let result#0: bool = test_cases.abi_routing.custom_approval.CustomApproval.__puya_arc4_router__%0#0
        goto block@15
    block@14: // after_if_else_L6
        let test_cases.abi_routing.custom_approval.CustomApproval.__puya_arc4_router__%0#0: bool = 0u
        let result#0: bool = test_cases.abi_routing.custom_approval.CustomApproval.__puya_arc4_router__%0#0
        goto block@15
    block@15: // after_inlined_test_cases.abi_routing.custom_approval.CustomApproval.__puya_arc4_router___L1
        goto result#0 ? block@8 : block@7
    block@7: // if_body_L17
        (log "this will never be seen unless you're running in simulation mode anyway so I can say whatever I want here")
        goto block@8
    block@8: // after_if_else_L16
        return result#0

subroutine test_cases.abi_routing.custom_approval.CustomApproval.add_one(x: uint64) -> uint64:
    block@0: // L23
        let tmp%0#0: uint64 = (+ x#0 1u)
        return tmp%0#0