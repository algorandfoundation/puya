main test_cases.abi_routing.custom_approval.CustomApproval.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        let tmp%0#2: uint64 = (txn ApplicationID)
        let tmp%1#2: bool = (! tmp%0#2)
        (assert tmp%1#2) // nonsense assert just to generate an init method
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (== tmp%0#1 2u)
        goto tmp%1#1 ? block@4 : block@6
    block@4: // and_contd_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 1)
        let tmp%3#0: bytes = (itob 42u)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        goto tmp%4#0 ? block@5 : block@6
    block@5: // if_body_L14
        (log "\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89")
        goto block@6
    block@6: // after_if_else_L13
        let tmp%0#4: uint64 = (txn NumAppArgs)
        goto tmp%0#4 ? block@10 : block@11
    block@10: // abi_routing_L6
        let tmp%2#1: bytes = (txna ApplicationArgs 0)
        let eq%tmp%2#0: bool = (== tmp%2#1 method "add_one(uint64)uint64")
        (assert eq%tmp%2#0)
        let tmp%3#1: uint64 = (txn OnCompletion)
        let tmp%4#1: bool = (! tmp%3#1)
        (assert tmp%4#1) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.abi_routing.custom_approval.CustomApproval.add_one[routing]()
        fail
    block@11: // bare_routing_L6
        let tmp%7#0: uint64 = (txn OnCompletion)
        let not%tmp%7#0: bool = (! tmp%7#0)
        (assert not%tmp%7#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        exit 1u

subroutine test_cases.abi_routing.custom_approval.CustomApproval.add_one[routing]() -> void:
    block@0: // L23
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let x#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%0#1: uint64 = (+ x#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#1)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%2#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u