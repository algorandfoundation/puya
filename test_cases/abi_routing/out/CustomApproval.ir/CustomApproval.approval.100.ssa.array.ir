main test_cases.abi_routing.custom_approval.CustomApproval.approval_program:
    block@0: // L11
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        let tmp%0#2: uint64 = (txn ApplicationID)
        let tmp%1#1: bool = (! tmp%0#2)
        (assert tmp%1#1) // nonsense assert just to generate an init method
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: bool = (== tmp%1#0 2u)
        goto tmp%2#0 ? block@3 : block@5
    block@3: // and_contd_L13
        let tmp%3#0: bytes = (txna ApplicationArgs 1)
        let tmp%4#0: bytes = (itob 42u)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        goto tmp%5#0 ? block@4 : block@5
    block@4: // if_body_L14
        (log "\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89")
        goto block@5
    block@5: // after_if_else_L13
        let %did_match_routing#0: bool = 0u
        let tmp%0#3: uint64 = (txn NumAppArgs)
        goto tmp%0#3 ? block@9 : block@12
    block@9: // abi_routing_L6
        let tmp%2#1: bytes = (txna ApplicationArgs 0)
        switch tmp%2#1 {method "add_one(uint64)uint64" => block@10, * => block@11}
    block@10: // add_one_route_L23
        let tmp%3#1: uint64 = (txn OnCompletion)
        let tmp%4#1: bool = (! tmp%3#1)
        let tmp%5#1: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#1 tmp%5#1)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.abi_routing.custom_approval.CustomApproval.add_one[routing]()
        let %did_match_routing#1: bool = 1u
        goto block@11
    block@11: // switch_case_next_L6
        let %did_match_routing#4: bool = φ(%did_match_routing#0 <- block@9, %did_match_routing#1 <- block@10)
        goto block@13
    block@12: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        let %did_match_routing#2: bool = 1u
        goto block@13
    block@13: // after_if_else_L6
        let result#0: bool = φ(%did_match_routing#4 <- block@11, %did_match_routing#2 <- block@12)
        goto result#0 ? block@7 : block@6
    block@6: // if_body_L17
        (log "this will never be seen unless you're running in simulation mode anyway so I can say whatever I want here")
        goto block@7
    block@7: // after_if_else_L16
        return result#0

subroutine test_cases.abi_routing.custom_approval.CustomApproval.add_one[routing]() -> void:
    block@0: // L23
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let x#0: uint64 = (btoi tmp%0#0)
        let tmp%0#1: uint64 = (+ x#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#1)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        return 