main test_cases.abi_routing.custom_approval.CustomApproval.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        algopy._contract.Contract.__init__()
        let tmp%0#2: uint64 = (txn ApplicationID)
        let tmp%1#2: bool = (! tmp%0#2)
        (assert tmp%1#2) // nonsense assert just to generate an init method
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (== tmp%0#1 2u)
        goto tmp%1#1 ? block@4 : block@6
    block@4: // and_contd_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 1)
        let tmp%3#0: bytes = (itob 42u)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        goto tmp%4#0 ? block@5 : block@6
    block@5: // if_body_L14
        (log "\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89")
        goto block@6
    block@6: // after_if_else_L13
        let result#0: bool = algopy.arc4.ARC4Contract.approval_program()
        goto result#0 ? block@8 : block@7
    block@7: // if_body_L17
        (log "this will never be seen unless you're running in simulation mode anyway so I can say whatever I want here")
        goto block@8
    block@8: // after_if_else_L16
        return result#0

subroutine test_cases.abi_routing.custom_approval.CustomApproval.add_one[routing]() -> void:
    block@0: // L23
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let x#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let tmp%0#1: uint64 = (+ x#0 1u)
        let tmp%2#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#1)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L6
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "add_one(uint64)uint64" => block@3, * => block@4}
    block@3: // add_one_route_L23
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.abi_routing.custom_approval.CustomApproval.add_one[routing]()
        goto block@4
    block@4: // switch_case_next_L6
        fail
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine algopy._contract.Contract.__init__() -> void:
    block@0: // L1
        return 