{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBQ;AAAW;AAAX;AACA;;;;;;;;AAAc;AAAd;AACA;;;;;;;;;;;;;;;;;AAAA;AACA;;;;;;;;;AAAe;;AAAf;AACA;;;;;AAAW;AAAX;AANR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA+QK;;AAAA;AAAA;AAAA;;AAAA;AA/QL;;;AAAA;;;AA+QK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlEA;;AAAA;AAAA;AAAA;;AAAA;AA7ML;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA6MK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtCA;;AAAA;AAAA;AAAA;;AAAA;AAvKL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAuKK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjDA;;AAAA;AAAA;AAAA;;AAAA;AAtHL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAsHK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlGL;;;AAAA;AAAA;;;AAAA;AAkGK;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AArFL;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAqFK;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AApEL;;;AAAA;AAoEK;;;AAAA;;AA1BA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA1CL;;;AA0CK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1CL;;;AA0BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AArBL;;;AAAA;AAAA;;;AAAA;;;AAqBK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAhBL;;;AAgBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBL;;AAAA;;;;;;;;;;;;;;AAAA;;;AAuDK;;AAAA;AAAA;AAAA;;;AAAA;;AAvCL;;;AAEqB;;AAAA;AAAJ;AAAA;AACF;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAP;AAER;;;AAEwB;;AAAhB;AAAA;;AAAA;AACiB;;AAAjB;;AAAA;;AAAA;;AAER;;;AAa6B;;AAAA;AAAZ;AAAA;AACF;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAP;AAER;;;AAU6B;;AAAA;AAAZ;AAAA;AACF;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAP;AAaI;;;;;;;;;;;;;AAAJ;;AAER;;;AAGe;;AAAiB;;AAAjB;AAAP;AAEW;AAAA;AAAA;AAAA;AAAJ;AAAP;AAEA;AAAA;;AAAA;AAGA;AAC4B;;AAA5B;;AACsB;AAAtB;;AACiC;;AAAjC;;AACA;;AAAA;;AACA;;AAER;;;AAQe;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAiB;AAAjB;AAAP;AACO;;AAAA;;AAAgB;;AAAhB;AAAP;AACO;;AAAA;AAAsB;AAAtB;AAAP;;AAER;;;AAEe;;AAAA;;AAAA;AAAP;;AAIO;;AAAP;AAcR;;;AAiCe;;AAAsB;AAAtB;AAAP;AACO;;AAAuB;;;AAAvB;AAAP;AACO;;AAAwB;;AAAxB;AAAP;AACO;;AAAyB;;AAAzB;AAAP;AACO;;AAA4B;AAA5B;AAAP;AACO;;AAA6B;;;AAA7B;AAAP;AACO;;AAAA;;;AAAyB;;;AAAzB;AAAP;AACO;;AAAA;;;AAAyB;;;AAAzB;AAAP;AACO;;AAAA;;;AAAyB;;;AAAzB;AAAP;AACO;;AAAA;AAA2B;AAA3B;AAAP;AACO;;AAAA;AAA4B;;AAA5B;AAAP;AACO;;AAAkB;;;;;;AAAlB;AAAP;AACO;;AAAkB;;;;;;;AAAlB;AAAP;AACyC;;AAAhB;AAAA;AAAA;AAAA;AAAlB;;AAAA;AAAP;AAC4C;;AAAjB;AAAA;;AAAA;AAAA;AAApB;;AAAA;AAAP;;AAER;;;AAqBY;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AADJ;AAgBA;;AAAA;AAER;;;AAmCe;;AAAuB;;AAAvB;AAAP;AACO;;AAAA;;AAAc;;;;AAAd;AAAP;AACO;;AAAA;;AAAe;;;;AAAf;AAAP;AACA;;AAAA;AACA;;AAAA;AAEI;;AAAA;;AAAA;AAAJ;AAGI;;AAAA;AACE;;AAAA;AADF;AAEE;;AAAA;AAFF;AAAA;;AAAA;AAIE;;AAAA;AAJF;AAKE;;AAAA;AALF;AAME;;AAAA;AANF;AAOE;;AAAA;AAPF;AAQE;;AAAA;AARF;AASE;;AAAA;AATF;AAUE;;AAAA;AAVF;AAWE;;AAAA;AAXF;AAYE;;AAAA;AAZF;AAaE;;AAAA;AAbF;AAcE;;AAAA;AAdF;AAAA;;AAAA;AAgBE;;AAAA;AAhBF;AAiBE;;AAAA;AAjBF;AAkBE;;AAAA;AAlBF;AAmBE;;AAAA;AAnBF;AADG;AAAP;AAuBR;;;AAEe;;;;;;;;AAAA;;AAAA;AAAkB;;;AAAlB;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.abi_routing.contract.Reference.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 123 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"asa\" 0x151f7c7500000000000001c8 \"local_uint\" \"local_bytes\""
    },
    "54": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "56": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "59": {
      "op": "bytec_1 // \"asa\"",
      "defined_out": [
        "\"asa\""
      ],
      "stack_out": [
        "\"asa\""
      ]
    },
    "60": {
      "op": "intc_2 // 123",
      "defined_out": [
        "\"asa\"",
        "123"
      ],
      "stack_out": [
        "\"asa\"",
        "123"
      ]
    },
    "61": {
      "op": "app_global_put",
      "stack_out": []
    },
    "62": {
      "op": "pushbytes \"an_int\"",
      "defined_out": [
        "\"an_int\""
      ],
      "stack_out": [
        "\"an_int\""
      ]
    },
    "70": {
      "op": "intc_3 // 2",
      "defined_out": [
        "\"an_int\"",
        "2"
      ],
      "stack_out": [
        "\"an_int\"",
        "2"
      ]
    },
    "71": {
      "op": "app_global_put",
      "stack_out": []
    },
    "72": {
      "op": "pushbytess \"some_bytes\" 0x070809 // \"some_bytes\", 0x070809",
      "defined_out": [
        "\"some_bytes\"",
        "0x070809"
      ],
      "stack_out": [
        "\"some_bytes\"",
        "0x070809"
      ]
    },
    "89": {
      "op": "app_global_put",
      "stack_out": []
    },
    "90": {
      "op": "pushbytes \"creator\"",
      "defined_out": [
        "\"creator\""
      ],
      "stack_out": [
        "\"creator\""
      ]
    },
    "99": {
      "op": "txn Sender",
      "defined_out": [
        "\"creator\"",
        "tmp%0#2"
      ],
      "stack_out": [
        "\"creator\"",
        "tmp%0#2"
      ]
    },
    "101": {
      "op": "app_global_put",
      "stack_out": []
    },
    "102": {
      "op": "pushbytes \"app\"",
      "defined_out": [
        "\"app\""
      ],
      "stack_out": [
        "\"app\""
      ]
    },
    "107": {
      "op": "intc_2 // 123",
      "stack_out": [
        "\"app\"",
        "123"
      ]
    },
    "108": {
      "op": "app_global_put",
      "stack_out": []
    },
    "109": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "111": {
      "op": "bz main_bare_routing@20",
      "stack_out": []
    },
    "114": {
      "op": "pushbytess 0xd78db35b 0x01040023 0x3a5353fc 0xd2f2f53c 0xd8f62d9a 0xb8431119 0xc416372d 0x7fad9780 0x2fdf95a4 0x1399826c 0xa1300821 0x6137dc37 0x5732195a 0xf6096c82 0x9023bb19 // method \"noop_with_uint64(uint64)uint8\", method \"opt_in(uint64,byte[])void\", method \"all_the_things(uint64)uint8\", method \"mixed_oca(uint64)uint8\", method \"opt_into_asset(uint64)void\", method \"with_transactions(uint64,uint64,pay,uint64)void\", method \"compare_assets(uint64,uint64)void\", method \"get_address()address\", method \"get_asset()uint64\", method \"get_application()uint64\", method \"get_an_int()uint64\", method \"method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void\", method \"method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[]\", method \"method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64\", method \"hello_with_algopy_string(string)string\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(hello_with_algopy_string(string)string)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)"
      ],
      "stack_out": [
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)",
        "Method(hello_with_algopy_string(string)string)"
      ]
    },
    "191": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(hello_with_algopy_string(string)string)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "tmp%2#1"
      ],
      "stack_out": [
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)",
        "Method(hello_with_algopy_string(string)string)",
        "tmp%2#1"
      ]
    },
    "194": {
      "op": "match main_noop_with_uint64_route@5 main_opt_in_route@6 main_all_the_things_route@7 main_mixed_oca_route@8 main_opt_into_asset_route@9 main_with_transactions_route@10 main_compare_assets_route@11 main_get_address_route@12 main_get_asset_route@13 main_get_application_route@14 main_get_an_int_route@15 main_method_with_default_args_route@16 main_method_with_15_args_route@17 main_method_with_more_than_15_args_route@18 main_hello_with_algopy_string_route@19",
      "stack_out": []
    },
    "226": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "227": {
      "op": "return",
      "stack_out": []
    },
    "228": {
      "block": "main_hello_with_algopy_string_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "230": {
      "op": "!",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "231": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "232": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "234": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "235": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "238": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "241": {
      "callsub": "test_cases.abi_routing.contract.Reference.hello_with_algopy_string",
      "op": "callsub hello_with_algopy_string",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "244": {
      "op": "dup",
      "defined_out": [
        "tmp%118#0",
        "tmp%118#0 (copy)"
      ],
      "stack_out": [
        "tmp%118#0",
        "tmp%118#0 (copy)"
      ]
    },
    "245": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0",
        "aggregate%length%1#0"
      ]
    },
    "246": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "247": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "250": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "tmp%118#0"
      ]
    },
    "251": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0"
      ]
    },
    "252": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "253": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ]
    },
    "254": {
      "op": "concat",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "255": {
      "op": "log",
      "stack_out": []
    },
    "256": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "257": {
      "op": "return",
      "stack_out": []
    },
    "258": {
      "block": "main_method_with_more_than_15_args_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "260": {
      "op": "!",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "261": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "262": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "264": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "265": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%31#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0"
      ]
    },
    "268": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0"
      ]
    },
    "271": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0"
      ]
    },
    "274": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%34#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%34#0"
      ]
    },
    "277": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0"
      ]
    },
    "278": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%35#0",
        "tmp%103#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "reinterpret_Encoded(uint64)%35#0"
      ]
    },
    "281": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0"
      ]
    },
    "282": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0"
      ]
    },
    "285": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0"
      ]
    },
    "288": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "tmp%105#0"
      ]
    },
    "290": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "tmp%105#0",
        "2"
      ]
    },
    "291": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0"
      ]
    },
    "292": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "293": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "295": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "296": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "297": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0"
      ]
    },
    "298": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0"
      ]
    },
    "301": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0"
      ]
    },
    "304": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0"
      ]
    },
    "307": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0"
      ]
    },
    "310": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0"
      ]
    },
    "313": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0"
      ]
    },
    "316": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0"
      ]
    },
    "319": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%0#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%0#0"
      ]
    },
    "322": {
      "op": "extract 0 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0"
      ]
    },
    "325": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "aggregate%extract%0#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%1#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%1#0"
      ]
    },
    "328": {
      "op": "extract 8 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "331": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0"
      ]
    },
    "334": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0",
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0",
        "16"
      ]
    },
    "336": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0"
      ]
    },
    "337": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%3#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%3#0"
      ]
    },
    "340": {
      "op": "extract 24 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0"
      ]
    },
    "343": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%4#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%4#0"
      ]
    },
    "346": {
      "op": "extract 32 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0"
      ]
    },
    "349": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0"
      ]
    },
    "352": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)"
      ]
    },
    "353": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)",
        "40"
      ]
    },
    "355": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "aggregate%extract_uint16%0#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "356": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)"
      ]
    },
    "358": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "aggregate%extract_uint16%0#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)",
        "42"
      ]
    },
    "360": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "361": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "aggregate%substring3%0#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "aggregate%substring3%0#0"
      ]
    },
    "362": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0"
      ]
    },
    "365": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0"
      ]
    },
    "368": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0 (copy)",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0 (copy)"
      ]
    },
    "369": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0 (copy)",
        "42"
      ]
    },
    "371": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "aggregate%extract_uint16%2#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "372": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "aggregate%extract_uint16%2#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0 (copy)"
      ]
    },
    "374": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "375": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "aggregate%substring3%1#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "aggregate%substring3%1#0"
      ]
    },
    "376": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0"
      ]
    },
    "379": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0"
      ]
    },
    "382": {
      "op": "pushint 44 // 44",
      "defined_out": [
        "44",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0",
        "44"
      ]
    },
    "384": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ]
    },
    "385": {
      "op": "txn GroupIndex",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ]
    },
    "387": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0",
        "1"
      ]
    },
    "388": {
      "op": "-",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "gtxn_idx%2#0"
      ]
    },
    "389": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "390": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "392": {
      "op": "intc_0 // pay",
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "393": {
      "op": "==",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "394": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "gtxn_idx%2#0"
      ]
    },
    "395": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%8#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "gtxn_idx%2#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%8#0"
      ]
    },
    "398": {
      "op": "extract 52 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "aggregate%extract%6#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "gtxn_idx%2#0",
        "aggregate%extract%6#0"
      ]
    },
    "401": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "aggregate%extract%6#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%9#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "gtxn_idx%2#0",
        "aggregate%extract%6#0",
        "reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%9#0"
      ]
    },
    "404": {
      "op": "extract 60 8",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "aggregate%extract%6#0",
        "aggregate%extract%7#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%31#0",
        "reinterpret_Encoded(uint64)%32#0",
        "reinterpret_Encoded(uint64)%33#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%36#0",
        "reinterpret_Encoded(uint64)%37#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint64)%38#0",
        "reinterpret_Encoded(uint64)%39#0",
        "reinterpret_Encoded(uint64)%40#0",
        "reinterpret_Encoded(uint64)%41#0",
        "reinterpret_Encoded(uint64)%42#0",
        "reinterpret_Encoded(uint64)%43#0",
        "reinterpret_Encoded(uint64)%44#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "tmp%106#0",
        "aggregate%extract%3#0",
        "aggregate%extract%4#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "gtxn_idx%2#0",
        "aggregate%extract%6#0",
        "aggregate%extract%7#0"
      ]
    },
    "407": {
      "callsub": "test_cases.abi_routing.contract.Reference.method_with_more_than_15_args",
      "op": "callsub method_with_more_than_15_args",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "410": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "0x151f7c75"
      ]
    },
    "411": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%111#0"
      ]
    },
    "412": {
      "op": "concat",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "413": {
      "op": "log",
      "stack_out": []
    },
    "414": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "415": {
      "op": "return",
      "stack_out": []
    },
    "416": {
      "block": "main_method_with_15_args_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "418": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "419": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "420": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "422": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "423": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%17#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%17#0"
      ]
    },
    "426": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "427": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%18#0",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "reinterpret_Encoded(uint64)%18#0"
      ]
    },
    "430": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0"
      ]
    },
    "431": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%19#0",
        "tmp%81#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "reinterpret_Encoded(uint64)%19#0"
      ]
    },
    "434": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0"
      ]
    },
    "435": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint64)%20#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "reinterpret_Encoded(uint64)%20#0"
      ]
    },
    "438": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0"
      ]
    },
    "439": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(uint64)%21#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "reinterpret_Encoded(uint64)%21#0"
      ]
    },
    "442": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0"
      ]
    },
    "443": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_Encoded(uint64)%22#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "reinterpret_Encoded(uint64)%22#0"
      ]
    },
    "446": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0"
      ]
    },
    "447": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_Encoded(uint64)%23#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "reinterpret_Encoded(uint64)%23#0"
      ]
    },
    "450": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0"
      ]
    },
    "451": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_Encoded(uint64)%24#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "reinterpret_Encoded(uint64)%24#0"
      ]
    },
    "454": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0"
      ]
    },
    "455": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_Encoded(uint64)%25#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "reinterpret_Encoded(uint64)%25#0"
      ]
    },
    "458": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0"
      ]
    },
    "459": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_Encoded(uint64)%26#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "reinterpret_Encoded(uint64)%26#0"
      ]
    },
    "462": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0"
      ]
    },
    "463": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_Encoded(uint64)%27#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "reinterpret_Encoded(uint64)%27#0"
      ]
    },
    "466": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0"
      ]
    },
    "467": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_Encoded(uint64)%28#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "reinterpret_Encoded(uint64)%28#0"
      ]
    },
    "470": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0"
      ]
    },
    "471": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "reinterpret_Encoded(uint64)%29#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0",
        "reinterpret_Encoded(uint64)%29#0"
      ]
    },
    "474": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0"
      ]
    },
    "475": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "reinterpret_Encoded(uint64)%30#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "reinterpret_Encoded(uint64)%30#0"
      ]
    },
    "478": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "tmp%94#0"
      ]
    },
    "479": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "tmp%94#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "482": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "tmp%94#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0",
        "tmp%83#0",
        "tmp%84#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0",
        "tmp%89#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0",
        "tmp%93#0",
        "tmp%94#0",
        "tmp%95#0"
      ]
    },
    "485": {
      "callsub": "test_cases.abi_routing.contract.Reference.method_with_15_args",
      "op": "callsub method_with_15_args",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "488": {
      "op": "dup",
      "defined_out": [
        "tmp%96#0",
        "tmp%96#0 (copy)"
      ],
      "stack_out": [
        "tmp%96#0",
        "tmp%96#0 (copy)"
      ]
    },
    "489": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0",
        "aggregate%length%0#0"
      ]
    },
    "490": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "491": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "494": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%96#0"
      ]
    },
    "495": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "496": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "497": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "498": {
      "op": "concat",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "499": {
      "op": "log",
      "stack_out": []
    },
    "500": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "501": {
      "op": "return",
      "stack_out": []
    },
    "502": {
      "block": "main_method_with_default_args_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "504": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "505": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "506": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "508": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "509": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "512": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "513": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%11#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "reinterpret_Encoded(uint64)%11#0"
      ]
    },
    "516": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0"
      ]
    },
    "517": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "520": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0"
      ]
    },
    "523": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "reinterpret_Encoded(uint64)%12#0"
      ]
    },
    "526": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%73#0"
      ]
    },
    "527": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%73#0",
        "reinterpret_Encoded(uint64)%13#0"
      ]
    },
    "530": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%73#0",
        "tmp%74#0"
      ]
    },
    "531": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%73#0",
        "tmp%74#0",
        "reinterpret_Encoded(uint8[3])%0#0"
      ]
    },
    "534": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%73#0",
        "tmp%74#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "reinterpret_Encoded(uint64)%14#0"
      ]
    },
    "537": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%73#0",
        "tmp%74#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0"
      ]
    },
    "540": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_Encoded(uint32)%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%73#0",
        "tmp%74#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint32)%0#0"
      ]
    },
    "543": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint32)%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%73#0",
        "tmp%74#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint32)%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "546": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint32)%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%73#0",
        "tmp%74#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint32)%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%16#0"
      ]
    },
    "549": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint32)%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%73#0",
        "tmp%74#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%73#0",
        "tmp%74#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint32)%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%75#0"
      ]
    },
    "550": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint32)%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%73#0",
        "tmp%74#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%73#0",
        "tmp%74#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint32)%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%75#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "553": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint32)%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%73#0",
        "tmp%74#0",
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%73#0",
        "tmp%74#0",
        "reinterpret_Encoded(uint8[3])%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint32)%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%75#0",
        "tmp%76#0"
      ]
    },
    "556": {
      "callsub": "test_cases.abi_routing.contract.Reference.method_with_default_args",
      "op": "callsub method_with_default_args",
      "stack_out": []
    },
    "559": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "560": {
      "op": "return",
      "stack_out": []
    },
    "561": {
      "block": "main_get_an_int_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "563": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "564": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "565": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "567": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "568": {
      "op": "pushbytes 0x151f7c750000000000000003",
      "defined_out": [
        "0x151f7c750000000000000003"
      ],
      "stack_out": [
        "0x151f7c750000000000000003"
      ]
    },
    "582": {
      "op": "log",
      "stack_out": []
    },
    "583": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "584": {
      "op": "return",
      "stack_out": []
    },
    "585": {
      "block": "main_get_application_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "587": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "588": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "589": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "591": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "592": {
      "op": "bytec_2 // 0x151f7c7500000000000001c8",
      "defined_out": [
        "0x151f7c7500000000000001c8"
      ],
      "stack_out": [
        "0x151f7c7500000000000001c8"
      ]
    },
    "593": {
      "op": "log",
      "stack_out": []
    },
    "594": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "595": {
      "op": "return",
      "stack_out": []
    },
    "596": {
      "block": "main_get_asset_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "598": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "599": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "600": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "602": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "603": {
      "op": "bytec_2 // 0x151f7c7500000000000001c8",
      "defined_out": [
        "0x151f7c7500000000000001c8"
      ],
      "stack_out": [
        "0x151f7c7500000000000001c8"
      ]
    },
    "604": {
      "op": "log",
      "stack_out": []
    },
    "605": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "606": {
      "op": "return",
      "stack_out": []
    },
    "607": {
      "block": "main_get_address_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "609": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "610": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "611": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "613": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "614": {
      "callsub": "test_cases.abi_routing.contract.Reference.get_address",
      "op": "callsub get_address",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "617": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "0x151f7c75"
      ]
    },
    "618": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%45#0"
      ]
    },
    "619": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "620": {
      "op": "log",
      "stack_out": []
    },
    "621": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "622": {
      "op": "return",
      "stack_out": []
    },
    "623": {
      "block": "main_compare_assets_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "625": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "626": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "627": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "629": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "630": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%8#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "633": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "634": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "637": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "638": {
      "callsub": "test_cases.abi_routing.contract.Reference.compare_assets",
      "op": "callsub compare_assets",
      "stack_out": []
    },
    "641": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "642": {
      "op": "return",
      "stack_out": []
    },
    "643": {
      "block": "main_with_transactions_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "645": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "646": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "647": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "649": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "650": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "653": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "654": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "657": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%34#0"
      ]
    },
    "659": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%34#0",
        "1"
      ]
    },
    "660": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_Encoded(uint64)%6#0",
        "gtxn_idx%0#0"
      ]
    },
    "661": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "662": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "664": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "665": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "666": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%33#0",
        "reinterpret_Encoded(uint64)%6#0",
        "gtxn_idx%0#0"
      ]
    },
    "667": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "670": {
      "callsub": "test_cases.abi_routing.contract.Reference.with_transactions",
      "op": "callsub with_transactions",
      "stack_out": []
    },
    "673": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "674": {
      "op": "return",
      "stack_out": []
    },
    "675": {
      "block": "main_opt_into_asset_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "677": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "678": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "679": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "681": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "682": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "685": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "686": {
      "callsub": "test_cases.abi_routing.contract.Reference.opt_into_asset",
      "op": "callsub opt_into_asset",
      "stack_out": []
    },
    "689": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "690": {
      "op": "return",
      "stack_out": []
    },
    "691": {
      "block": "main_mixed_oca_route@8",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "692": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%17#0"
      ],
      "stack_out": [
        "1",
        "tmp%17#0"
      ]
    },
    "694": {
      "op": "shl",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "695": {
      "op": "pushint 37 // 37",
      "defined_out": [
        "37",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "37"
      ]
    },
    "697": {
      "op": "&",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "698": {
      "error": "OnCompletion is not one of NoOp, CloseOut, DeleteApplication",
      "op": "assert // OnCompletion is not one of NoOp, CloseOut, DeleteApplication",
      "stack_out": []
    },
    "699": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "701": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "702": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "705": {
      "callsub": "test_cases.abi_routing.contract.Reference.mixed_oca",
      "op": "callsub mixed_oca",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "708": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "709": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%22#0"
      ]
    },
    "710": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "711": {
      "op": "log",
      "stack_out": []
    },
    "712": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "713": {
      "op": "return",
      "stack_out": []
    },
    "714": {
      "block": "main_all_the_things_route@7",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "717": {
      "callsub": "test_cases.abi_routing.contract.Reference.full_abi_config",
      "op": "callsub full_abi_config",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "720": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0x151f7c75"
      ]
    },
    "721": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%15#0"
      ]
    },
    "722": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "723": {
      "op": "log",
      "stack_out": []
    },
    "724": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "725": {
      "op": "return",
      "stack_out": []
    },
    "726": {
      "block": "main_opt_in_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "728": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "OptIn"
      ]
    },
    "729": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "730": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "731": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "733": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "734": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "737": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "738": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "741": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "744": {
      "callsub": "test_cases.abi_routing.contract.Reference.opt_in",
      "op": "callsub opt_in",
      "stack_out": []
    },
    "747": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "748": {
      "op": "return",
      "stack_out": []
    },
    "749": {
      "block": "main_noop_with_uint64_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "751": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "752": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "753": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "755": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "756": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "759": {
      "callsub": "test_cases.abi_routing.contract.Reference.noop_with_uint64",
      "op": "callsub noop_with_uint64",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "762": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "763": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%7#0"
      ]
    },
    "764": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "765": {
      "op": "log",
      "stack_out": []
    },
    "766": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "767": {
      "op": "return",
      "stack_out": []
    },
    "768": {
      "block": "main_bare_routing@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "770": {
      "op": "switch main_bare_abi_config@21 main_bare_abi_config@21 main_bare_abi_config@21 main_after_if_else@22 main_bare_abi_config@21 main_bare_abi_config@21",
      "stack_out": []
    },
    "784": {
      "op": "b main_after_if_else@22"
    },
    "787": {
      "block": "main_bare_abi_config@21",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "789": {
      "op": "!",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "790": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "791": {
      "callsub": "test_cases.abi_routing.contract.Reference.bare_abi_config",
      "op": "callsub bare_abi_config"
    },
    "794": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "795": {
      "op": "return",
      "stack_out": []
    },
    "796": {
      "subroutine": "test_cases.abi_routing.contract.Reference.noop_with_uint64",
      "params": {
        "a#0": "bytes"
      },
      "block": "noop_with_uint64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "799": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "801": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "802": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "803": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "804": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "805": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "806": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "807": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "8"
      ]
    },
    "809": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "810": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "811": {
      "op": "extract 7 1",
      "defined_out": [
        "aggregate%uint8%0#0"
      ],
      "stack_out": [
        "aggregate%uint8%0#0"
      ]
    },
    "814": {
      "retsub": true,
      "op": "retsub"
    },
    "815": {
      "subroutine": "test_cases.abi_routing.contract.Reference.opt_in",
      "params": {
        "uint#0": "uint64",
        "bites#0": "bytes"
      },
      "block": "opt_in",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "818": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "820": {
      "op": "bytec_3 // \"local_uint\"",
      "defined_out": [
        "\"local_uint\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"local_uint\""
      ]
    },
    "821": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"local_uint\"",
        "tmp%0#0",
        "uint#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"local_uint\"",
        "uint#0 (copy)"
      ]
    },
    "823": {
      "op": "app_local_put",
      "stack_out": []
    },
    "824": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "826": {
      "op": "bytec 4 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"local_bytes\""
      ]
    },
    "828": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"local_bytes\"",
        "bites#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"local_bytes\"",
        "bites#0 (copy)"
      ]
    },
    "830": {
      "op": "app_local_put",
      "stack_out": []
    },
    "831": {
      "retsub": true,
      "op": "retsub"
    },
    "832": {
      "subroutine": "test_cases.abi_routing.contract.Reference.full_abi_config",
      "params": {
        "a#0": "bytes"
      },
      "block": "full_abi_config",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "835": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "837": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "838": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "839": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "840": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "841": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "842": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "843": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "8"
      ]
    },
    "845": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "846": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "847": {
      "op": "extract 7 1",
      "defined_out": [
        "aggregate%uint8%0#0"
      ],
      "stack_out": [
        "aggregate%uint8%0#0"
      ]
    },
    "850": {
      "retsub": true,
      "op": "retsub"
    },
    "851": {
      "subroutine": "test_cases.abi_routing.contract.Reference.mixed_oca",
      "params": {
        "a#0": "bytes"
      },
      "block": "mixed_oca",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "854": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "856": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "857": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "858": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "859": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "860": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "861": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "862": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "8"
      ]
    },
    "864": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "865": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "866": {
      "op": "extract 7 1",
      "defined_out": [
        "aggregate%uint8%0#0"
      ],
      "stack_out": [
        "aggregate%uint8%0#0"
      ]
    },
    "869": {
      "retsub": true,
      "op": "retsub"
    },
    "870": {
      "subroutine": "test_cases.abi_routing.contract.Reference.bare_abi_config",
      "params": {},
      "block": "bare_abi_config",
      "stack_in": [],
      "op": "pushbytes \"Hello World\"",
      "defined_out": [
        "\"Hello World\""
      ],
      "stack_out": [
        "\"Hello World\""
      ]
    },
    "883": {
      "op": "log",
      "stack_out": []
    },
    "884": {
      "retsub": true,
      "op": "retsub"
    },
    "885": {
      "subroutine": "test_cases.abi_routing.contract.Reference.opt_into_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "opt_into_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "888": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "890": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "892": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "893": {
      "error": "Only creator can opt in to ASA",
      "op": "assert // Only creator can opt in to ASA",
      "stack_out": []
    },
    "894": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "895": {
      "op": "bytec_1 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa\""
      ]
    },
    "896": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "897": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "898": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "899": {
      "error": "ASA already opted in",
      "op": "assert // ASA already opted in",
      "stack_out": []
    },
    "900": {
      "op": "bytec_1 // \"asa\"",
      "stack_out": [
        "\"asa\""
      ]
    },
    "901": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ]
    },
    "903": {
      "op": "app_global_put",
      "stack_out": []
    },
    "904": {
      "op": "itxn_begin"
    },
    "905": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "907": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "909": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "910": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "912": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "914": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "916": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "918": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "920": {
      "op": "itxn_submit"
    },
    "921": {
      "retsub": true,
      "op": "retsub"
    },
    "922": {
      "subroutine": "test_cases.abi_routing.contract.Reference.with_transactions",
      "params": {
        "asset#0": "uint64",
        "an_int#0": "bytes",
        "pay#0": "uint64",
        "another_int#0": "bytes"
      },
      "block": "with_transactions",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "925": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "926": {
      "op": "bytec_1 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa\""
      ]
    },
    "927": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "928": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "929": {
      "op": "frame_dig -4",
      "defined_out": [
        "asset#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "asset#0 (copy)"
      ]
    },
    "931": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "932": {
      "error": "is correct asset",
      "op": "assert // is correct asset",
      "stack_out": []
    },
    "933": {
      "op": "frame_dig -3",
      "defined_out": [
        "an_int#0 (copy)"
      ],
      "stack_out": [
        "an_int#0 (copy)"
      ]
    },
    "935": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "936": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "937": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "938": {
      "error": "is correct int",
      "op": "assert // is correct int",
      "stack_out": []
    },
    "939": {
      "op": "frame_dig -2",
      "defined_out": [
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "941": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "943": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "945": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "946": {
      "error": "is payment to app",
      "op": "assert // is payment to app",
      "stack_out": []
    },
    "947": {
      "op": "frame_dig -1",
      "defined_out": [
        "another_int#0 (copy)"
      ],
      "stack_out": [
        "another_int#0 (copy)"
      ]
    },
    "949": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "950": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "2"
      ]
    },
    "951": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "952": {
      "error": "is correct int",
      "op": "assert // is correct int",
      "stack_out": []
    },
    "953": {
      "retsub": true,
      "op": "retsub"
    },
    "954": {
      "subroutine": "test_cases.abi_routing.contract.Reference.compare_assets",
      "params": {
        "asset_a#0": "uint64",
        "asset_b#0": "uint64"
      },
      "block": "compare_assets",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "957": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_a#0 (copy)"
      ],
      "stack_out": [
        "asset_a#0 (copy)"
      ]
    },
    "959": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_a#0 (copy)",
        "asset_b#0 (copy)"
      ],
      "stack_out": [
        "asset_a#0 (copy)",
        "asset_b#0 (copy)"
      ]
    },
    "961": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "962": {
      "error": "asset a == b",
      "op": "assert // asset a == b",
      "stack_out": []
    },
    "963": {
      "retsub": true,
      "op": "retsub"
    },
    "964": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_address",
      "params": {},
      "block": "get_address",
      "stack_in": [],
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "966": {
      "retsub": true,
      "op": "retsub"
    },
    "967": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_default_args",
      "params": {
        "asset_from_storage#0": "uint64",
        "asset_from_function#0": "uint64",
        "account_from_storage#0": "bytes",
        "account_from_function#0": "bytes",
        "application_from_storage#0": "uint64",
        "application_from_function#0": "uint64",
        "bytes_from_storage#0": "bytes",
        "int_from_storage#0": "bytes",
        "int_from_function#0": "bytes",
        "int_from_const#0": "bytes",
        "str_from_const#0": "bytes",
        "int_from_local#0": "uint64",
        "bytes_from_local#0": "bytes"
      },
      "block": "method_with_default_args",
      "stack_in": [],
      "op": "proto 13 0"
    },
    "970": {
      "op": "frame_dig -13",
      "defined_out": [
        "asset_from_storage#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0 (copy)"
      ]
    },
    "972": {
      "op": "intc_2 // 123",
      "defined_out": [
        "123",
        "asset_from_storage#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0 (copy)",
        "123"
      ]
    },
    "973": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "974": {
      "error": "wrong asset from storage",
      "op": "assert // wrong asset from storage",
      "stack_out": []
    },
    "975": {
      "op": "frame_dig -12",
      "defined_out": [
        "asset_from_function#0 (copy)"
      ],
      "stack_out": [
        "asset_from_function#0 (copy)"
      ]
    },
    "977": {
      "op": "pushint 456 // 456",
      "defined_out": [
        "456",
        "asset_from_function#0 (copy)"
      ],
      "stack_out": [
        "asset_from_function#0 (copy)",
        "456"
      ]
    },
    "980": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "981": {
      "error": "wrong asset from function",
      "op": "assert // wrong asset from function",
      "stack_out": []
    },
    "982": {
      "op": "frame_dig -11",
      "defined_out": [
        "account_from_storage#0 (copy)"
      ],
      "stack_out": [
        "account_from_storage#0 (copy)"
      ]
    },
    "984": {
      "op": "global CreatorAddress",
      "defined_out": [
        "account_from_storage#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "account_from_storage#0 (copy)",
        "tmp%2#0"
      ]
    },
    "986": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "987": {
      "error": "wrong account from storage",
      "op": "assert // wrong account from storage",
      "stack_out": []
    },
    "988": {
      "op": "frame_dig -10",
      "defined_out": [
        "account_from_function#0 (copy)"
      ],
      "stack_out": [
        "account_from_function#0 (copy)"
      ]
    },
    "990": {
      "op": "global ZeroAddress",
      "defined_out": [
        "account_from_function#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "account_from_function#0 (copy)",
        "tmp%4#0"
      ]
    },
    "992": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "993": {
      "error": "wrong account from function",
      "op": "assert // wrong account from function",
      "stack_out": []
    },
    "994": {
      "op": "frame_dig -9",
      "defined_out": [
        "application_from_storage#0 (copy)"
      ],
      "stack_out": [
        "application_from_storage#0 (copy)"
      ]
    },
    "996": {
      "op": "intc_2 // 123",
      "stack_out": [
        "application_from_storage#0 (copy)",
        "123"
      ]
    },
    "997": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "998": {
      "error": "wrong application from storage",
      "op": "assert // wrong application from storage",
      "stack_out": []
    },
    "999": {
      "op": "frame_dig -8",
      "defined_out": [
        "application_from_function#0 (copy)"
      ],
      "stack_out": [
        "application_from_function#0 (copy)"
      ]
    },
    "1001": {
      "op": "pushint 456 // 456",
      "stack_out": [
        "application_from_function#0 (copy)",
        "456"
      ]
    },
    "1004": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1005": {
      "error": "wrong application from function",
      "op": "assert // wrong application from function",
      "stack_out": []
    },
    "1006": {
      "op": "frame_dig -7",
      "defined_out": [
        "bytes_from_storage#0 (copy)"
      ],
      "stack_out": [
        "bytes_from_storage#0 (copy)"
      ]
    },
    "1008": {
      "error": "index access is out of bounds",
      "op": "extract 0 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0"
      ]
    },
    "1011": {
      "op": "pushbytes 0x07",
      "defined_out": [
        "0x07",
        "aggregate%encoded_element%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "0x07"
      ]
    },
    "1014": {
      "op": "b==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1015": {
      "error": "wrong 0th byte from storage",
      "op": "assert // wrong 0th byte from storage",
      "stack_out": []
    },
    "1016": {
      "op": "frame_dig -7",
      "stack_out": [
        "bytes_from_storage#0 (copy)"
      ]
    },
    "1018": {
      "error": "index access is out of bounds",
      "op": "extract 1 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%1#0"
      ]
    },
    "1021": {
      "op": "pushbytes 0x08",
      "defined_out": [
        "0x08",
        "aggregate%encoded_element%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%1#0",
        "0x08"
      ]
    },
    "1024": {
      "op": "b==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1025": {
      "error": "wrong 1st byte from storage",
      "op": "assert // wrong 1st byte from storage",
      "stack_out": []
    },
    "1026": {
      "op": "frame_dig -7",
      "stack_out": [
        "bytes_from_storage#0 (copy)"
      ]
    },
    "1028": {
      "error": "index access is out of bounds",
      "op": "extract 2 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%2#0"
      ]
    },
    "1031": {
      "op": "pushbytes 0x09",
      "defined_out": [
        "0x09",
        "aggregate%encoded_element%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%2#0",
        "0x09"
      ]
    },
    "1034": {
      "op": "b==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1035": {
      "error": "wrong 2nd byte from storage",
      "op": "assert // wrong 2nd byte from storage",
      "stack_out": []
    },
    "1036": {
      "op": "frame_dig -6",
      "defined_out": [
        "int_from_storage#0 (copy)"
      ],
      "stack_out": [
        "int_from_storage#0 (copy)"
      ]
    },
    "1038": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1039": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "2"
      ]
    },
    "1040": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1041": {
      "error": "wrong int from storage",
      "op": "assert // wrong int from storage",
      "stack_out": []
    },
    "1042": {
      "op": "frame_dig -5",
      "defined_out": [
        "int_from_function#0 (copy)"
      ],
      "stack_out": [
        "int_from_function#0 (copy)"
      ]
    },
    "1044": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1045": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "3"
      ]
    },
    "1047": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1048": {
      "error": "wrong int from function",
      "op": "assert // wrong int from function",
      "stack_out": []
    },
    "1049": {
      "op": "frame_dig -4",
      "defined_out": [
        "int_from_const#0 (copy)"
      ],
      "stack_out": [
        "int_from_const#0 (copy)"
      ]
    },
    "1051": {
      "op": "pushbytes 0x0000007b",
      "defined_out": [
        "0x0000007b",
        "int_from_const#0 (copy)"
      ],
      "stack_out": [
        "int_from_const#0 (copy)",
        "0x0000007b"
      ]
    },
    "1057": {
      "op": "b==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1058": {
      "op": "assert",
      "stack_out": []
    },
    "1059": {
      "op": "frame_dig -3",
      "defined_out": [
        "str_from_const#0 (copy)"
      ],
      "stack_out": [
        "str_from_const#0 (copy)"
      ]
    },
    "1061": {
      "op": "pushbytes 0x0003616263",
      "defined_out": [
        "0x0003616263",
        "str_from_const#0 (copy)"
      ],
      "stack_out": [
        "str_from_const#0 (copy)",
        "0x0003616263"
      ]
    },
    "1068": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1069": {
      "op": "assert",
      "stack_out": []
    },
    "1070": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1072": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0"
      ]
    },
    "1073": {
      "op": "bytec_3 // \"local_uint\"",
      "defined_out": [
        "\"local_uint\"",
        "0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0",
        "\"local_uint\""
      ]
    },
    "1074": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1075": {
      "error": "check self.local_uint exists for account",
      "op": "assert // check self.local_uint exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1076": {
      "op": "frame_dig -2",
      "defined_out": [
        "int_from_local#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "int_from_local#0 (copy)"
      ]
    },
    "1078": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1079": {
      "op": "assert",
      "stack_out": []
    },
    "1080": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1082": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "1083": {
      "op": "bytec 4 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0",
        "\"local_bytes\""
      ]
    },
    "1085": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1086": {
      "error": "check self.local_bytes exists for account",
      "op": "assert // check self.local_bytes exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1087": {
      "op": "frame_dig -1",
      "defined_out": [
        "bytes_from_local#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "bytes_from_local#0 (copy)"
      ]
    },
    "1089": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1090": {
      "op": "assert",
      "stack_out": []
    },
    "1091": {
      "retsub": true,
      "op": "retsub"
    },
    "1092": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_15_args",
      "params": {
        "one#0": "uint64",
        "two#0": "uint64",
        "three#0": "uint64",
        "four#0": "uint64",
        "five#0": "uint64",
        "six#0": "uint64",
        "seven#0": "uint64",
        "eight#0": "uint64",
        "nine#0": "uint64",
        "ten#0": "uint64",
        "eleven#0": "uint64",
        "twelve#0": "uint64",
        "thirteen#0": "uint64",
        "fourteen#0": "uint64",
        "fifteen#0": "bytes"
      },
      "block": "method_with_15_args",
      "stack_in": [],
      "op": "proto 15 1"
    },
    "1095": {
      "op": "frame_dig -15",
      "defined_out": [
        "one#0 (copy)"
      ],
      "stack_out": [
        "one#0 (copy)"
      ]
    },
    "1097": {
      "op": "frame_dig -14",
      "defined_out": [
        "one#0 (copy)",
        "two#0 (copy)"
      ],
      "stack_out": [
        "one#0 (copy)",
        "two#0 (copy)"
      ]
    },
    "1099": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1100": {
      "op": "frame_dig -13",
      "defined_out": [
        "three#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "three#0 (copy)"
      ]
    },
    "1102": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1103": {
      "op": "frame_dig -12",
      "defined_out": [
        "four#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "four#0 (copy)"
      ]
    },
    "1105": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1106": {
      "op": "frame_dig -11",
      "defined_out": [
        "five#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "five#0 (copy)"
      ]
    },
    "1108": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1109": {
      "op": "frame_dig -10",
      "defined_out": [
        "six#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "six#0 (copy)"
      ]
    },
    "1111": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1112": {
      "op": "frame_dig -9",
      "defined_out": [
        "seven#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "seven#0 (copy)"
      ]
    },
    "1114": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1115": {
      "op": "frame_dig -8",
      "defined_out": [
        "eight#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "eight#0 (copy)"
      ]
    },
    "1117": {
      "op": "+",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1118": {
      "op": "frame_dig -7",
      "defined_out": [
        "nine#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "nine#0 (copy)"
      ]
    },
    "1120": {
      "op": "+",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1121": {
      "op": "frame_dig -6",
      "defined_out": [
        "ten#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "ten#0 (copy)"
      ]
    },
    "1123": {
      "op": "+",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1124": {
      "op": "frame_dig -5",
      "defined_out": [
        "eleven#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "eleven#0 (copy)"
      ]
    },
    "1126": {
      "op": "+",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1127": {
      "op": "frame_dig -4",
      "defined_out": [
        "tmp%9#0",
        "twelve#0 (copy)"
      ],
      "stack_out": [
        "tmp%9#0",
        "twelve#0 (copy)"
      ]
    },
    "1129": {
      "op": "+",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1130": {
      "op": "frame_dig -3",
      "defined_out": [
        "thirteen#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "thirteen#0 (copy)"
      ]
    },
    "1132": {
      "op": "+",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1133": {
      "op": "frame_dig -2",
      "defined_out": [
        "fourteen#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "fourteen#0 (copy)"
      ]
    },
    "1135": {
      "op": "+",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1136": {
      "op": "assert",
      "stack_out": []
    },
    "1137": {
      "op": "frame_dig -1",
      "defined_out": [
        "fifteen#0 (copy)"
      ],
      "stack_out": [
        "fifteen#0 (copy)"
      ]
    },
    "1139": {
      "retsub": true,
      "op": "retsub"
    },
    "1140": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_more_than_15_args",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "uint64",
        "asset#0": "uint64",
        "e#0": "bytes",
        "f#0": "bytes",
        "pay#0": "uint64",
        "g#0": "bytes",
        "h#0": "bytes",
        "i#0": "bytes",
        "j#0": "bytes",
        "k#0": "bytes",
        "l#0": "bytes",
        "m#0": "bytes",
        "n#0": "bytes",
        "o#0": "bytes",
        "p#0": "uint64",
        "q#0": "bytes",
        "r#0": "bytes",
        "s#0": "bytes",
        "t#0": "bytes",
        "asset2#0": "uint64",
        "pay2#0": "uint64",
        "u#0": "bytes",
        "v#0": "bytes"
      },
      "block": "method_with_more_than_15_args",
      "stack_in": [],
      "op": "proto 26 1"
    },
    "1143": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1145": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "16"
      ]
    },
    "1147": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1148": {
      "op": "assert",
      "stack_out": []
    },
    "1149": {
      "op": "frame_dig -19",
      "defined_out": [
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "1151": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1153": {
      "op": "pushint 100000 // 100000",
      "defined_out": [
        "100000",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "100000"
      ]
    },
    "1157": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1158": {
      "op": "assert",
      "stack_out": []
    },
    "1159": {
      "op": "frame_dig -3",
      "defined_out": [
        "pay2#0 (copy)"
      ],
      "stack_out": [
        "pay2#0 (copy)"
      ]
    },
    "1161": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1163": {
      "op": "pushint 200000 // 200000",
      "defined_out": [
        "200000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "200000"
      ]
    },
    "1167": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1168": {
      "op": "assert",
      "stack_out": []
    },
    "1169": {
      "op": "frame_dig -22",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1171": {
      "op": "assert",
      "stack_out": []
    },
    "1172": {
      "op": "frame_dig -4",
      "defined_out": [
        "asset2#0 (copy)"
      ],
      "stack_out": [
        "asset2#0 (copy)"
      ]
    },
    "1174": {
      "op": "assert",
      "stack_out": []
    },
    "1175": {
      "op": "frame_dig -6",
      "defined_out": [
        "s#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)"
      ]
    },
    "1177": {
      "op": "frame_dig -5",
      "defined_out": [
        "s#0 (copy)",
        "t#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)",
        "t#0 (copy)"
      ]
    },
    "1179": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1180": {
      "op": "log",
      "stack_out": []
    },
    "1181": {
      "op": "frame_dig -26",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1183": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1184": {
      "op": "frame_dig -25",
      "defined_out": [
        "b#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "b#0 (copy)"
      ]
    },
    "1186": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1187": {
      "op": "+",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1188": {
      "op": "frame_dig -24",
      "defined_out": [
        "c#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "c#0 (copy)"
      ]
    },
    "1190": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1191": {
      "op": "+",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1192": {
      "op": "frame_dig -23",
      "defined_out": [
        "d#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "d#0 (copy)"
      ]
    },
    "1194": {
      "op": "+",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1195": {
      "op": "frame_dig -21",
      "defined_out": [
        "e#0 (copy)",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "e#0 (copy)"
      ]
    },
    "1197": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "1198": {
      "op": "+",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1199": {
      "op": "frame_dig -20",
      "defined_out": [
        "f#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "f#0 (copy)"
      ]
    },
    "1201": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1202": {
      "op": "+",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1203": {
      "op": "frame_dig -18",
      "defined_out": [
        "g#0 (copy)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "g#0 (copy)"
      ]
    },
    "1205": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1206": {
      "op": "+",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1207": {
      "op": "frame_dig -17",
      "defined_out": [
        "h#0 (copy)",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "h#0 (copy)"
      ]
    },
    "1209": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "1210": {
      "op": "+",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1211": {
      "op": "frame_dig -16",
      "defined_out": [
        "i#0 (copy)",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "i#0 (copy)"
      ]
    },
    "1213": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "1214": {
      "op": "+",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1215": {
      "op": "frame_dig -15",
      "defined_out": [
        "j#0 (copy)",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "j#0 (copy)"
      ]
    },
    "1217": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "1218": {
      "op": "+",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1219": {
      "op": "frame_dig -14",
      "defined_out": [
        "k#0 (copy)",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "k#0 (copy)"
      ]
    },
    "1221": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "1222": {
      "op": "+",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1223": {
      "op": "frame_dig -13",
      "defined_out": [
        "l#0 (copy)",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "l#0 (copy)"
      ]
    },
    "1225": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "1226": {
      "op": "+",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1227": {
      "op": "frame_dig -12",
      "defined_out": [
        "m#0 (copy)",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "m#0 (copy)"
      ]
    },
    "1229": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1230": {
      "op": "+",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1231": {
      "op": "frame_dig -11",
      "defined_out": [
        "n#0 (copy)",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "n#0 (copy)"
      ]
    },
    "1233": {
      "op": "btoi",
      "defined_out": [
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1234": {
      "op": "+",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1235": {
      "op": "frame_dig -10",
      "defined_out": [
        "o#0 (copy)",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "o#0 (copy)"
      ]
    },
    "1237": {
      "op": "btoi",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1238": {
      "op": "+",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1239": {
      "op": "frame_dig -9",
      "defined_out": [
        "p#0 (copy)",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "p#0 (copy)"
      ]
    },
    "1241": {
      "op": "+",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1242": {
      "op": "frame_dig -8",
      "defined_out": [
        "q#0 (copy)",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "q#0 (copy)"
      ]
    },
    "1244": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1245": {
      "op": "+",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1246": {
      "op": "frame_dig -7",
      "defined_out": [
        "r#0 (copy)",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "r#0 (copy)"
      ]
    },
    "1248": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "1249": {
      "op": "+",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1250": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%41#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%41#0",
        "u#0 (copy)"
      ]
    },
    "1252": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0"
      ]
    },
    "1253": {
      "op": "+",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1254": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%43#0",
        "v#0 (copy)"
      ],
      "stack_out": [
        "tmp%43#0",
        "v#0 (copy)"
      ]
    },
    "1256": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "1257": {
      "op": "+",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1258": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1259": {
      "retsub": true,
      "op": "retsub"
    },
    "1260": {
      "subroutine": "test_cases.abi_routing.contract.Reference.hello_with_algopy_string",
      "params": {
        "name#0": "bytes"
      },
      "block": "hello_with_algopy_string",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1263": {
      "op": "pushbytes \"Hello \"",
      "defined_out": [
        "\"Hello \""
      ],
      "stack_out": [
        "\"Hello \""
      ]
    },
    "1271": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Hello \"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"Hello \"",
        "name#0 (copy)"
      ]
    },
    "1273": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1274": {
      "op": "pushbytes \"!\"",
      "defined_out": [
        "\"!\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"!\""
      ]
    },
    "1277": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1278": {
      "retsub": true,
      "op": "retsub"
    }
  }
}