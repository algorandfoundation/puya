{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBQ;AAAW;;AAAX;AACA;;;;;;;;AAAc;AAAd;AACA;;;;;;;;;;;;;;;;;AAAA;AACA;;;;;;;;;AAAe;;AAAf;AACA;;;;;AAAW;;AAAX;AANR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAkHK;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AA5DA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAkCA;;AAAA;AAAA;AAWO;;;;;;;;;;;;;AAAJ;AAXH;AAAA;AAvCA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEgB;AAAJ;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEmB;;AAAhB;AAAA;;AAAA;AACiB;;AAAjB;;AAAA;;AAAA;AAHH;AAAA;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAawB;AAAZ;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAdV;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUwB;AAAZ;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAXV;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGU;;AAAiB;;AAAjB;AAAP;AAEW;AAAA;AAAA;AAAA;AAAJ;AAAP;AAEA;AAAA;;AAAA;AAGA;AAC4B;;AAA5B;;AACsB;AAAtB;;AACiC;;AAAjC;;AACA;;AACA;AAfH;AAAA;AAiBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQU;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAsB;AAAtB;AAAP;AACO;AAAA;;AAAgB;;AAAhB;AAAP;AACO;AAA2B;AAA3B;AAAP;AAXH;AAAA;AAaA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEU;AAAP;AAFH;AAAA;AAoBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAiCU;;AAAsB;;AAAtB;AAAP;AACO;;AAAuB;;;AAAvB;AAAP;AAC+B;;AAAxB;;AAAA;AAAP;AACgC;;AAAzB;;AAAA;AAAP;AACO;;AAA4B;;AAA5B;AAAP;AACO;;AAA6B;;;AAA7B;AAAP;AACO;;AAAA;;;AAAyB;;;AAAzB;AAAP;AACO;;AAAA;;;AAAyB;;;AAAzB;AAAP;AACO;;AAAA;;;AAAyB;;;AAAzB;AAAP;AACO;;AAAA;AAAgC;AAAhC;AAAP;AACO;;AAAA;AAAiC;;AAAjC;AAAP;AACO;;AAAkB;;;;;;AAAlB;AAAP;AACO;;AAAkB;;;;;;;AAAlB;AAAP;AACyC;;AAAhB;AAAA;AAAA;AAAA;AAAlB;;AAAA;AAAP;AAC4C;;AAAjB;AAAA;;AAAA;AAAA;AAApB;AA/CV;AAiqBO;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AADJ;AApBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAsmCU;;AAAuB;;AAAvB;AAAP;AACO;;AAAA;;AAAc;;;;AAAd;AAAP;AACO;;AAAA;;AAAe;;;;AAAf;AAAP;AACA;;AAAA;AACA;;AAAA;AAEI;;AAAA;;AAAA;AAAJ;AAGI;;AAAA;AACE;;AAAA;AADF;AAEE;;AAAA;AAFF;AAAA;;AAAA;AAIE;;AAAA;AAJF;AAKE;;AAAA;AALF;AAME;;AAAA;AANF;AAOE;;AAAA;AAPF;AAQE;;AAAA;AARF;AASE;;AAAA;AATF;AAUE;;AAAA;AAVF;AAWE;;AAAA;AAXF;AAYE;;AAAA;AAZF;AAaE;;AAzDT;AAyDS;AAbF;AAcE;;AA1DT;AA0DS;AAdF;AAAA;;AAAA;AAgBE;;AA5DT;;AA4DS;AAhBF;AAiBE;;AA7DT;;AA6DS;AAjBF;AAkBE;;AA9DT;;AA8DS;AAlBF;AAmBE;AA/DT;;AA+DS;AAnBF;AADG;AA3CV;AAAA;AAAA;AAAA;AAAA;AAAA;AAkEA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEU;;;;;;;;AAAA;AAAA;AAAkB;;;AAAlB;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 8 1 0 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"asa\" 0x151f7c7500000000000001c8 \"local_uint\" \"local_bytes\""
    },
    "54": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "56": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "59": {
      "op": "bytec_1 // \"asa\"",
      "defined_out": [
        "\"asa\""
      ],
      "stack_out": [
        "\"asa\""
      ]
    },
    "60": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "\"asa\"",
        "123"
      ],
      "stack_out": [
        "\"asa\"",
        "123"
      ]
    },
    "62": {
      "op": "app_global_put",
      "stack_out": []
    },
    "63": {
      "op": "pushbytes \"an_int\"",
      "defined_out": [
        "\"an_int\""
      ],
      "stack_out": [
        "\"an_int\""
      ]
    },
    "71": {
      "op": "intc_3 // 2",
      "defined_out": [
        "\"an_int\"",
        "2"
      ],
      "stack_out": [
        "\"an_int\"",
        "2"
      ]
    },
    "72": {
      "op": "app_global_put",
      "stack_out": []
    },
    "73": {
      "op": "pushbytess \"some_bytes\" 0x070809 // \"some_bytes\", 0x070809",
      "defined_out": [
        "\"some_bytes\"",
        "0x070809"
      ],
      "stack_out": [
        "\"some_bytes\"",
        "0x070809"
      ]
    },
    "90": {
      "op": "app_global_put",
      "stack_out": []
    },
    "91": {
      "op": "pushbytes \"creator\"",
      "defined_out": [
        "\"creator\""
      ],
      "stack_out": [
        "\"creator\""
      ]
    },
    "100": {
      "op": "txn Sender",
      "defined_out": [
        "\"creator\"",
        "tmp%0#2"
      ],
      "stack_out": [
        "\"creator\"",
        "tmp%0#2"
      ]
    },
    "102": {
      "op": "app_global_put",
      "stack_out": []
    },
    "103": {
      "op": "pushbytes \"app\"",
      "defined_out": [
        "\"app\""
      ],
      "stack_out": [
        "\"app\""
      ]
    },
    "108": {
      "op": "pushint 123 // 123",
      "stack_out": [
        "\"app\"",
        "123"
      ]
    },
    "110": {
      "op": "app_global_put",
      "stack_out": []
    },
    "111": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "113": {
      "op": "bz main_bare_abi_config@25",
      "stack_out": []
    },
    "116": {
      "op": "pushbytess 0x01040023 0x3a5353fc 0xd2f2f53c // method \"opt_in(uint64,byte[])void\", method \"all_the_things(uint64)uint8\", method \"mixed_oca(uint64)uint8\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)"
      ],
      "stack_out": [
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)"
      ]
    },
    "133": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "tmp%2#0"
      ]
    },
    "136": {
      "op": "match main_opt_in_route@5 full_abi_config main_mixed_oca_route@7",
      "stack_out": []
    },
    "144": {
      "block": "main_switch_case_next@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "146": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "147": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "148": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "150": {
      "op": "assert",
      "stack_out": []
    },
    "151": {
      "op": "pushbytess 0xd78db35b 0xd8f62d9a 0xb8431119 0xc416372d 0x7fad9780 0x2fdf95a4 0x1399826c 0xa1300821 0x6137dc37 0x5732195a 0xf6096c82 0x9023bb19 // method \"noop_with_uint64(uint64)uint8\", method \"opt_into_asset(uint64)void\", method \"with_transactions(uint64,uint64,pay,uint64)void\", method \"compare_assets(uint64,uint64)void\", method \"get_address()address\", method \"get_asset()uint64\", method \"get_application()uint64\", method \"get_an_int()uint64\", method \"method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void\", method \"method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[]\", method \"method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64\", method \"hello_with_algopy_string(string)string\"",
      "defined_out": [
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(hello_with_algopy_string(string)string)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)"
      ],
      "stack_out": [
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)",
        "Method(hello_with_algopy_string(string)string)"
      ]
    },
    "213": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(hello_with_algopy_string(string)string)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)",
        "Method(hello_with_algopy_string(string)string)",
        "tmp%18#0"
      ]
    },
    "216": {
      "op": "match noop_with_uint64 opt_into_asset with_transactions compare_assets main_get_address_route@14 main_get_asset_route@15 main_get_application_route@16 main_get_an_int_route@17 method_with_default_args method_with_15_args method_with_more_than_15_args hello_with_algopy_string",
      "stack_out": []
    },
    "242": {
      "op": "err"
    },
    "243": {
      "block": "main_get_an_int_route@17",
      "stack_in": [],
      "op": "pushbytes 0x151f7c750000000000000003",
      "defined_out": [
        "0x151f7c750000000000000003"
      ],
      "stack_out": [
        "0x151f7c750000000000000003"
      ]
    },
    "257": {
      "op": "log",
      "stack_out": []
    },
    "258": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "259": {
      "op": "return",
      "stack_out": []
    },
    "260": {
      "block": "main_get_application_route@16",
      "stack_in": [],
      "op": "bytec_2 // 0x151f7c7500000000000001c8",
      "defined_out": [
        "0x151f7c7500000000000001c8"
      ],
      "stack_out": [
        "0x151f7c7500000000000001c8"
      ]
    },
    "261": {
      "op": "log",
      "stack_out": []
    },
    "262": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "263": {
      "op": "return",
      "stack_out": []
    },
    "264": {
      "block": "main_get_asset_route@15",
      "stack_in": [],
      "op": "bytec_2 // 0x151f7c7500000000000001c8",
      "defined_out": [
        "0x151f7c7500000000000001c8"
      ],
      "stack_out": [
        "0x151f7c7500000000000001c8"
      ]
    },
    "265": {
      "op": "log",
      "stack_out": []
    },
    "266": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "267": {
      "op": "return",
      "stack_out": []
    },
    "268": {
      "block": "main_get_address_route@14",
      "stack_in": [],
      "op": "pushbytes base32(CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ],
      "stack_out": [
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "306": {
      "op": "log",
      "stack_out": []
    },
    "307": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "308": {
      "op": "return",
      "stack_out": []
    },
    "309": {
      "block": "main_mixed_oca_route@7",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "310": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%8#0"
      ],
      "stack_out": [
        "1",
        "tmp%8#0"
      ]
    },
    "312": {
      "op": "shl",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "313": {
      "op": "pushint 37 // 37",
      "defined_out": [
        "37",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "37"
      ]
    },
    "315": {
      "op": "&",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "316": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "318": {
      "op": "&&",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "319": {
      "error": "OnCompletion must be one of NoOp, CloseOut, DeleteApplication && can only call when not creating",
      "op": "assert // OnCompletion must be one of NoOp, CloseOut, DeleteApplication && can only call when not creating",
      "stack_out": []
    },
    "320": {
      "op": "b mixed_oca"
    },
    "323": {
      "block": "main_opt_in_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "325": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "OptIn"
      ]
    },
    "326": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "327": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "329": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "330": {
      "error": "OnCompletion must be OptIn && can only call when not creating",
      "op": "assert // OnCompletion must be OptIn && can only call when not creating",
      "stack_out": []
    },
    "331": {
      "op": "b opt_in"
    },
    "334": {
      "block": "main_bare_abi_config@25",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "336": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "337": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "338": {
      "op": "pushbytes \"Hello World\"",
      "defined_out": [
        "\"Hello World\""
      ],
      "stack_out": [
        "\"Hello World\""
      ]
    },
    "351": {
      "op": "log",
      "stack_out": []
    },
    "352": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "353": {
      "op": "return",
      "stack_out": []
    },
    "354": {
      "subroutine": "test_cases.abi_routing.contract.Reference.noop_with_uint64[routing]",
      "params": {},
      "block": "noop_with_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "357": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "358": {
      "op": "len",
      "defined_out": [
        "a#0",
        "len%0#0"
      ],
      "stack_out": [
        "a#0",
        "len%0#0"
      ]
    },
    "359": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "a#0",
        "len%0#0"
      ],
      "stack_out": [
        "a#0",
        "len%0#0",
        "8"
      ]
    },
    "360": {
      "op": "==",
      "defined_out": [
        "a#0",
        "eq%0#0"
      ],
      "stack_out": [
        "a#0",
        "eq%0#0"
      ]
    },
    "361": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0"
      ]
    },
    "362": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "363": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "1"
      ]
    },
    "364": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "365": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "366": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "367": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "368": {
      "op": "intc_0 // 8",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "8"
      ]
    },
    "369": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "370": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "371": {
      "op": "extract 7 1",
      "defined_out": [
        "aggregate%uint8%0#0"
      ],
      "stack_out": [
        "aggregate%uint8%0#0"
      ]
    },
    "374": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%uint8%0#0"
      ],
      "stack_out": [
        "aggregate%uint8%0#0",
        "0x151f7c75"
      ]
    },
    "375": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%uint8%0#0"
      ]
    },
    "376": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "377": {
      "op": "log",
      "stack_out": []
    },
    "378": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "379": {
      "op": "return",
      "stack_out": []
    },
    "380": {
      "subroutine": "test_cases.abi_routing.contract.Reference.opt_in[routing]",
      "params": {},
      "block": "opt_in",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "383": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "384": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "385": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "386": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "387": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "388": {
      "op": "btoi",
      "defined_out": [
        "uint#0"
      ],
      "stack_out": [
        "uint#0"
      ]
    },
    "389": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%2#0",
        "uint#0"
      ],
      "stack_out": [
        "uint#0",
        "tmp%2#0"
      ]
    },
    "392": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "uint#0"
      ],
      "stack_out": [
        "uint#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "393": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "uint#0"
      ],
      "stack_out": [
        "uint#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "394": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%2#0",
        "uint#0"
      ],
      "stack_out": [
        "uint#0",
        "tmp%2#0",
        "aggregate%array_length%0#0"
      ]
    },
    "395": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%2#0",
        "uint#0"
      ],
      "stack_out": [
        "uint#0",
        "tmp%2#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "396": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%2#0",
        "uint#0"
      ],
      "stack_out": [
        "uint#0",
        "tmp%2#0",
        "add%0#0"
      ]
    },
    "397": {
      "op": "dig 1",
      "stack_out": [
        "uint#0",
        "tmp%2#0",
        "add%0#0",
        "tmp%2#0 (copy)"
      ]
    },
    "399": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%1#0",
        "tmp%2#0",
        "uint#0"
      ],
      "stack_out": [
        "uint#0",
        "tmp%2#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "400": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%2#0",
        "uint#0"
      ],
      "stack_out": [
        "uint#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "401": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "uint#0",
        "tmp%2#0"
      ]
    },
    "402": {
      "op": "extract 2 0",
      "defined_out": [
        "bites#0",
        "uint#0"
      ],
      "stack_out": [
        "uint#0",
        "bites#0"
      ]
    },
    "405": {
      "op": "txn Sender",
      "defined_out": [
        "bites#0",
        "tmp%0#1",
        "uint#0"
      ],
      "stack_out": [
        "uint#0",
        "bites#0",
        "tmp%0#1"
      ]
    },
    "407": {
      "op": "bytec_3 // \"local_uint\"",
      "defined_out": [
        "\"local_uint\"",
        "bites#0",
        "tmp%0#1",
        "uint#0"
      ],
      "stack_out": [
        "uint#0",
        "bites#0",
        "tmp%0#1",
        "\"local_uint\""
      ]
    },
    "408": {
      "op": "uncover 3",
      "stack_out": [
        "bites#0",
        "tmp%0#1",
        "\"local_uint\"",
        "uint#0"
      ]
    },
    "410": {
      "op": "app_local_put",
      "stack_out": [
        "bites#0"
      ]
    },
    "411": {
      "op": "txn Sender",
      "defined_out": [
        "bites#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "bites#0",
        "tmp%1#1"
      ]
    },
    "413": {
      "op": "bytec 4 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "bites#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "bites#0",
        "tmp%1#1",
        "\"local_bytes\""
      ]
    },
    "415": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#1",
        "\"local_bytes\"",
        "bites#0"
      ]
    },
    "417": {
      "op": "app_local_put",
      "stack_out": []
    },
    "418": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "419": {
      "op": "return",
      "stack_out": []
    },
    "420": {
      "subroutine": "test_cases.abi_routing.contract.Reference.full_abi_config[routing]",
      "params": {},
      "block": "full_abi_config",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "423": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "424": {
      "op": "len",
      "defined_out": [
        "a#0",
        "len%0#0"
      ],
      "stack_out": [
        "a#0",
        "len%0#0"
      ]
    },
    "425": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "a#0",
        "len%0#0"
      ],
      "stack_out": [
        "a#0",
        "len%0#0",
        "8"
      ]
    },
    "426": {
      "op": "==",
      "defined_out": [
        "a#0",
        "eq%0#0"
      ],
      "stack_out": [
        "a#0",
        "eq%0#0"
      ]
    },
    "427": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0"
      ]
    },
    "428": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "429": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "1"
      ]
    },
    "430": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "431": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "432": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "433": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "434": {
      "op": "intc_0 // 8",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "8"
      ]
    },
    "435": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "436": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "437": {
      "op": "extract 7 1",
      "defined_out": [
        "aggregate%uint8%0#0"
      ],
      "stack_out": [
        "aggregate%uint8%0#0"
      ]
    },
    "440": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%uint8%0#0"
      ],
      "stack_out": [
        "aggregate%uint8%0#0",
        "0x151f7c75"
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%uint8%0#0"
      ]
    },
    "442": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "443": {
      "op": "log",
      "stack_out": []
    },
    "444": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "445": {
      "op": "return",
      "stack_out": []
    },
    "446": {
      "subroutine": "test_cases.abi_routing.contract.Reference.mixed_oca[routing]",
      "params": {},
      "block": "mixed_oca",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "449": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "450": {
      "op": "len",
      "defined_out": [
        "a#0",
        "len%0#0"
      ],
      "stack_out": [
        "a#0",
        "len%0#0"
      ]
    },
    "451": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "a#0",
        "len%0#0"
      ],
      "stack_out": [
        "a#0",
        "len%0#0",
        "8"
      ]
    },
    "452": {
      "op": "==",
      "defined_out": [
        "a#0",
        "eq%0#0"
      ],
      "stack_out": [
        "a#0",
        "eq%0#0"
      ]
    },
    "453": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0"
      ]
    },
    "454": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "455": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "1"
      ]
    },
    "456": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "457": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "458": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "459": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "460": {
      "op": "intc_0 // 8",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "8"
      ]
    },
    "461": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "462": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "463": {
      "op": "extract 7 1",
      "defined_out": [
        "aggregate%uint8%0#0"
      ],
      "stack_out": [
        "aggregate%uint8%0#0"
      ]
    },
    "466": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%uint8%0#0"
      ],
      "stack_out": [
        "aggregate%uint8%0#0",
        "0x151f7c75"
      ]
    },
    "467": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%uint8%0#0"
      ]
    },
    "468": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "469": {
      "op": "log",
      "stack_out": []
    },
    "470": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "471": {
      "op": "return",
      "stack_out": []
    },
    "472": {
      "subroutine": "test_cases.abi_routing.contract.Reference.opt_into_asset[routing]",
      "params": {},
      "block": "opt_into_asset",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "475": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "476": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "477": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "478": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "479": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "480": {
      "op": "btoi",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "481": {
      "op": "txn Sender",
      "defined_out": [
        "asset#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "asset#0",
        "tmp%0#1"
      ]
    },
    "483": {
      "op": "global CreatorAddress",
      "defined_out": [
        "asset#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "asset#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "485": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%2#0"
      ]
    },
    "486": {
      "error": "Only creator can opt in to ASA",
      "op": "assert // Only creator can opt in to ASA",
      "stack_out": [
        "asset#0"
      ]
    },
    "487": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "488": {
      "op": "bytec_1 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "0",
        "\"asa\""
      ]
    },
    "489": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "490": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "asset#0",
        "maybe_value%0#0"
      ]
    },
    "491": {
      "op": "!",
      "defined_out": [
        "asset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%3#0"
      ]
    },
    "492": {
      "error": "ASA already opted in",
      "op": "assert // ASA already opted in",
      "stack_out": [
        "asset#0"
      ]
    },
    "493": {
      "op": "bytec_1 // \"asa\"",
      "stack_out": [
        "asset#0",
        "\"asa\""
      ]
    },
    "494": {
      "op": "dig 1",
      "defined_out": [
        "\"asa\"",
        "asset#0",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "\"asa\"",
        "asset#0 (copy)"
      ]
    },
    "496": {
      "op": "app_global_put",
      "stack_out": [
        "asset#0"
      ]
    },
    "497": {
      "op": "itxn_begin"
    },
    "498": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "asset#0",
        "axfer"
      ],
      "stack_out": [
        "asset#0",
        "axfer"
      ]
    },
    "500": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "asset#0"
      ]
    },
    "502": {
      "op": "intc_2 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "503": {
      "op": "itxn_field Fee",
      "stack_out": [
        "asset#0"
      ]
    },
    "505": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%4#0"
      ]
    },
    "507": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "asset#0"
      ]
    },
    "509": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "511": {
      "op": "itxn_submit"
    },
    "512": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "513": {
      "op": "return",
      "stack_out": []
    },
    "514": {
      "subroutine": "test_cases.abi_routing.contract.Reference.with_transactions[routing]",
      "params": {},
      "block": "with_transactions",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "517": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "518": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "519": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "520": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "521": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "522": {
      "op": "btoi",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "523": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "an_int#0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0"
      ]
    },
    "526": {
      "op": "dup",
      "defined_out": [
        "an_int#0",
        "an_int#0 (copy)",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "an_int#0 (copy)"
      ]
    },
    "527": {
      "op": "len",
      "defined_out": [
        "an_int#0",
        "asset#0",
        "len%1#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "len%1#0"
      ]
    },
    "528": {
      "op": "intc_0 // 8",
      "stack_out": [
        "asset#0",
        "an_int#0",
        "len%1#0",
        "8"
      ]
    },
    "529": {
      "op": "==",
      "defined_out": [
        "an_int#0",
        "asset#0",
        "eq%1#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "eq%1#0"
      ]
    },
    "530": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset#0",
        "an_int#0"
      ]
    },
    "531": {
      "op": "txn GroupIndex",
      "defined_out": [
        "an_int#0",
        "asset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "tmp%3#0"
      ]
    },
    "533": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "an_int#0",
        "asset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "tmp%3#0",
        "1"
      ]
    },
    "534": {
      "op": "-",
      "defined_out": [
        "an_int#0",
        "asset#0",
        "pay#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0"
      ]
    },
    "535": {
      "op": "dup",
      "defined_out": [
        "an_int#0",
        "asset#0",
        "pay#0",
        "pay#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "pay#0 (copy)"
      ]
    },
    "536": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "an_int#0",
        "asset#0",
        "gtxn_type%0#0",
        "pay#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "gtxn_type%0#0"
      ]
    },
    "538": {
      "op": "intc_1 // pay",
      "defined_out": [
        "an_int#0",
        "asset#0",
        "gtxn_type%0#0",
        "pay",
        "pay#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "539": {
      "op": "==",
      "defined_out": [
        "an_int#0",
        "asset#0",
        "gtxn_type_matches%0#0",
        "pay#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "540": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0"
      ]
    },
    "541": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "an_int#0",
        "another_int#0",
        "asset#0",
        "pay#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "another_int#0"
      ]
    },
    "544": {
      "op": "dup",
      "defined_out": [
        "an_int#0",
        "another_int#0",
        "another_int#0 (copy)",
        "asset#0",
        "pay#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "another_int#0",
        "another_int#0 (copy)"
      ]
    },
    "545": {
      "op": "len",
      "defined_out": [
        "an_int#0",
        "another_int#0",
        "asset#0",
        "len%2#0",
        "pay#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "another_int#0",
        "len%2#0"
      ]
    },
    "546": {
      "op": "intc_0 // 8",
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "another_int#0",
        "len%2#0",
        "8"
      ]
    },
    "547": {
      "op": "==",
      "defined_out": [
        "an_int#0",
        "another_int#0",
        "asset#0",
        "eq%2#0",
        "pay#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "another_int#0",
        "eq%2#0"
      ]
    },
    "548": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "another_int#0"
      ]
    },
    "549": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "an_int#0",
        "another_int#0",
        "asset#0",
        "pay#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "another_int#0",
        "0"
      ]
    },
    "550": {
      "op": "bytec_1 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0",
        "an_int#0",
        "another_int#0",
        "asset#0",
        "pay#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "another_int#0",
        "0",
        "\"asa\""
      ]
    },
    "551": {
      "op": "app_global_get_ex",
      "defined_out": [
        "an_int#0",
        "another_int#0",
        "asset#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "pay#0"
      ],
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "another_int#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "552": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "asset#0",
        "an_int#0",
        "pay#0",
        "another_int#0",
        "maybe_value%0#0"
      ]
    },
    "553": {
      "op": "uncover 4",
      "stack_out": [
        "an_int#0",
        "pay#0",
        "another_int#0",
        "maybe_value%0#0",
        "asset#0"
      ]
    },
    "555": {
      "op": "==",
      "defined_out": [
        "an_int#0",
        "another_int#0",
        "pay#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "an_int#0",
        "pay#0",
        "another_int#0",
        "tmp%0#1"
      ]
    },
    "556": {
      "error": "is correct asset",
      "op": "assert // is correct asset",
      "stack_out": [
        "an_int#0",
        "pay#0",
        "another_int#0"
      ]
    },
    "557": {
      "op": "uncover 2",
      "stack_out": [
        "pay#0",
        "another_int#0",
        "an_int#0"
      ]
    },
    "559": {
      "op": "btoi",
      "defined_out": [
        "another_int#0",
        "pay#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "pay#0",
        "another_int#0",
        "tmp%1#1"
      ]
    },
    "560": {
      "op": "intc_1 // 1",
      "stack_out": [
        "pay#0",
        "another_int#0",
        "tmp%1#1",
        "1"
      ]
    },
    "561": {
      "op": "==",
      "defined_out": [
        "another_int#0",
        "pay#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "pay#0",
        "another_int#0",
        "tmp%2#1"
      ]
    },
    "562": {
      "error": "is correct int",
      "op": "assert // is correct int",
      "stack_out": [
        "pay#0",
        "another_int#0"
      ]
    },
    "563": {
      "op": "swap",
      "stack_out": [
        "another_int#0",
        "pay#0"
      ]
    },
    "564": {
      "op": "gtxns Receiver",
      "defined_out": [
        "another_int#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "another_int#0",
        "tmp%3#1"
      ]
    },
    "566": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "another_int#0",
        "tmp%3#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "another_int#0",
        "tmp%3#1",
        "tmp%4#1"
      ]
    },
    "568": {
      "op": "==",
      "defined_out": [
        "another_int#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "another_int#0",
        "tmp%5#0"
      ]
    },
    "569": {
      "error": "is payment to app",
      "op": "assert // is payment to app",
      "stack_out": [
        "another_int#0"
      ]
    },
    "570": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "571": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "2"
      ]
    },
    "572": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "573": {
      "error": "is correct int",
      "op": "assert // is correct int",
      "stack_out": []
    },
    "574": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "575": {
      "op": "return",
      "stack_out": []
    },
    "576": {
      "subroutine": "test_cases.abi_routing.contract.Reference.compare_assets[routing]",
      "params": {},
      "block": "compare_assets",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "579": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "580": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "581": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "582": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "583": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "584": {
      "op": "btoi",
      "defined_out": [
        "asset_a#0"
      ],
      "stack_out": [
        "asset_a#0"
      ]
    },
    "585": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "asset_a#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset_a#0",
        "tmp%2#0"
      ]
    },
    "588": {
      "op": "dup",
      "defined_out": [
        "asset_a#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "asset_a#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "589": {
      "op": "len",
      "defined_out": [
        "asset_a#0",
        "len%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset_a#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "590": {
      "op": "intc_0 // 8",
      "stack_out": [
        "asset_a#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "591": {
      "op": "==",
      "defined_out": [
        "asset_a#0",
        "eq%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset_a#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "592": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset_a#0",
        "tmp%2#0"
      ]
    },
    "593": {
      "op": "btoi",
      "defined_out": [
        "asset_a#0",
        "asset_b#0"
      ],
      "stack_out": [
        "asset_a#0",
        "asset_b#0"
      ]
    },
    "594": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "595": {
      "error": "asset a == b",
      "op": "assert // asset a == b",
      "stack_out": []
    },
    "596": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "597": {
      "op": "return",
      "stack_out": []
    },
    "598": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_default_args[routing]",
      "params": {},
      "block": "method_with_default_args",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "601": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "602": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "603": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "604": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "605": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "606": {
      "op": "btoi",
      "defined_out": [
        "asset_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0"
      ]
    },
    "607": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "asset_from_storage#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "tmp%2#0"
      ]
    },
    "610": {
      "op": "dup",
      "defined_out": [
        "asset_from_storage#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "611": {
      "op": "len",
      "defined_out": [
        "asset_from_storage#0",
        "len%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "612": {
      "op": "intc_0 // 8",
      "stack_out": [
        "asset_from_storage#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "613": {
      "op": "==",
      "defined_out": [
        "asset_from_storage#0",
        "eq%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "614": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset_from_storage#0",
        "tmp%2#0"
      ]
    },
    "615": {
      "op": "btoi",
      "defined_out": [
        "asset_from_function#0",
        "asset_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0"
      ]
    },
    "616": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "account_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0"
      ]
    },
    "619": {
      "op": "dup",
      "defined_out": [
        "account_from_storage#0",
        "account_from_storage#0 (copy)",
        "asset_from_function#0",
        "asset_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_storage#0 (copy)"
      ]
    },
    "620": {
      "op": "len",
      "defined_out": [
        "account_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "len%2#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "len%2#0"
      ]
    },
    "621": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "account_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "len%2#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "len%2#0",
        "32"
      ]
    },
    "623": {
      "op": "==",
      "defined_out": [
        "account_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "eq%2#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "eq%2#0"
      ]
    },
    "624": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0"
      ]
    },
    "625": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0"
      ]
    },
    "628": {
      "op": "dup",
      "defined_out": [
        "account_from_function#0",
        "account_from_function#0 (copy)",
        "account_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "account_from_function#0 (copy)"
      ]
    },
    "629": {
      "op": "len",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "len%3#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "len%3#0"
      ]
    },
    "630": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "len%3#0",
        "32"
      ]
    },
    "632": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "eq%3#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "eq%3#0"
      ]
    },
    "633": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0"
      ]
    },
    "634": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "tmp%8#0"
      ]
    },
    "637": {
      "op": "dup",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "638": {
      "op": "len",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "len%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "tmp%8#0",
        "len%4#0"
      ]
    },
    "639": {
      "op": "intc_0 // 8",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "tmp%8#0",
        "len%4#0",
        "8"
      ]
    },
    "640": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "eq%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "tmp%8#0",
        "eq%4#0"
      ]
    },
    "641": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "tmp%8#0"
      ]
    },
    "642": {
      "op": "btoi",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0"
      ]
    },
    "643": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "tmp%10#0"
      ]
    },
    "646": {
      "op": "dup",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "647": {
      "op": "len",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "len%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "tmp%10#0",
        "len%5#0"
      ]
    },
    "648": {
      "op": "intc_0 // 8",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "tmp%10#0",
        "len%5#0",
        "8"
      ]
    },
    "649": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "eq%5#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "tmp%10#0",
        "eq%5#0"
      ]
    },
    "650": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "tmp%10#0"
      ]
    },
    "651": {
      "op": "btoi",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0"
      ]
    },
    "652": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0"
      ]
    },
    "655": {
      "op": "dup",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "bytes_from_storage#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "bytes_from_storage#0 (copy)"
      ]
    },
    "656": {
      "op": "len",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "len%6#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "len%6#0"
      ]
    },
    "657": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "len%6#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "len%6#0",
        "3"
      ]
    },
    "659": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "eq%6#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "eq%6#0"
      ]
    },
    "660": {
      "error": "invalid number of bytes for uint8[3]",
      "op": "assert // invalid number of bytes for uint8[3]",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0"
      ]
    },
    "661": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0"
      ]
    },
    "664": {
      "op": "dup",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_storage#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_storage#0 (copy)"
      ]
    },
    "665": {
      "op": "len",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "len%7#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "len%7#0"
      ]
    },
    "666": {
      "op": "intc_0 // 8",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "len%7#0",
        "8"
      ]
    },
    "667": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "eq%7#0",
        "int_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "eq%7#0"
      ]
    },
    "668": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0"
      ]
    },
    "669": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_function#0",
        "int_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0"
      ]
    },
    "672": {
      "op": "dup",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_function#0",
        "int_from_function#0 (copy)",
        "int_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_function#0 (copy)"
      ]
    },
    "673": {
      "op": "len",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_function#0",
        "int_from_storage#0",
        "len%8#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "len%8#0"
      ]
    },
    "674": {
      "op": "intc_0 // 8",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "len%8#0",
        "8"
      ]
    },
    "675": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "eq%8#0",
        "int_from_function#0",
        "int_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "eq%8#0"
      ]
    },
    "676": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0"
      ]
    },
    "677": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0"
      ]
    },
    "680": {
      "op": "dup",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_const#0 (copy)",
        "int_from_function#0",
        "int_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "int_from_const#0 (copy)"
      ]
    },
    "681": {
      "op": "len",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "len%9#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "len%9#0"
      ]
    },
    "682": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "len%9#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "len%9#0",
        "4"
      ]
    },
    "684": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "eq%9#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "eq%9#0"
      ]
    },
    "685": {
      "error": "invalid number of bytes for uint32",
      "op": "assert // invalid number of bytes for uint32",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0"
      ]
    },
    "686": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0"
      ]
    },
    "689": {
      "op": "dup",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "str_from_const#0",
        "str_from_const#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "str_from_const#0 (copy)"
      ]
    },
    "690": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "str_from_const#0",
        "str_from_const#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "str_from_const#0 (copy)",
        "0"
      ]
    },
    "691": {
      "op": "extract_uint16",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "aggregate%array_length%0#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "aggregate%array_length%0#0"
      ]
    },
    "692": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "account_from_function#0",
        "account_from_storage#0",
        "aggregate%array_length%0#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "693": {
      "op": "+",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "add%0#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "add%0#0"
      ]
    },
    "694": {
      "op": "dig 1",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "add%0#0",
        "str_from_const#0 (copy)"
      ]
    },
    "696": {
      "op": "len",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "add%0#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "len%10#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "add%0#0",
        "len%10#0"
      ]
    },
    "697": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "eq%10#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "eq%10#0"
      ]
    },
    "698": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0"
      ]
    },
    "699": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "tmp%17#0"
      ]
    },
    "702": {
      "op": "dup",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "703": {
      "op": "len",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "len%11#0",
        "str_from_const#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "tmp%17#0",
        "len%11#0"
      ]
    },
    "704": {
      "op": "intc_0 // 8",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "tmp%17#0",
        "len%11#0",
        "8"
      ]
    },
    "705": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "eq%11#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "tmp%17#0",
        "eq%11#0"
      ]
    },
    "706": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "tmp%17#0"
      ]
    },
    "707": {
      "op": "btoi",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0"
      ]
    },
    "708": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "tmp%19#0"
      ]
    },
    "711": {
      "op": "dup",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "712": {
      "op": "intc_2 // 0",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "0"
      ]
    },
    "713": {
      "op": "extract_uint16",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "aggregate%array_length%1#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "tmp%19#0",
        "aggregate%array_length%1#0"
      ]
    },
    "714": {
      "op": "intc_3 // 2",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "tmp%19#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "715": {
      "op": "+",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "add%1#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "tmp%19#0",
        "add%1#0"
      ]
    },
    "716": {
      "op": "dig 1",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "tmp%19#0",
        "add%1#0",
        "tmp%19#0 (copy)"
      ]
    },
    "718": {
      "op": "len",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "add%1#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "len%12#0",
        "str_from_const#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "tmp%19#0",
        "add%1#0",
        "len%12#0"
      ]
    },
    "719": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_storage#0",
        "eq%12#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "tmp%19#0",
        "eq%12#0"
      ]
    },
    "720": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "tmp%19#0"
      ]
    },
    "721": {
      "op": "extract 2 0",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "asset_from_storage#0",
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "724": {
      "op": "uncover 12",
      "stack_out": [
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "asset_from_storage#0"
      ]
    },
    "726": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "123",
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "asset_from_storage#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "asset_from_storage#0",
        "123"
      ]
    },
    "728": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%0#1"
      ]
    },
    "729": {
      "error": "wrong asset from storage",
      "op": "assert // wrong asset from storage",
      "stack_out": [
        "asset_from_function#0",
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "730": {
      "op": "uncover 11",
      "stack_out": [
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "asset_from_function#0"
      ]
    },
    "732": {
      "op": "pushint 456 // 456",
      "defined_out": [
        "456",
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "asset_from_function#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "asset_from_function#0",
        "456"
      ]
    },
    "735": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%1#1"
      ]
    },
    "736": {
      "error": "wrong asset from function",
      "op": "assert // wrong asset from function",
      "stack_out": [
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "737": {
      "op": "global CreatorAddress",
      "defined_out": [
        "account_from_function#0",
        "account_from_storage#0",
        "application_from_function#0",
        "application_from_storage#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "account_from_storage#0",
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%2#1"
      ]
    },
    "739": {
      "op": "uncover 11",
      "stack_out": [
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%2#1",
        "account_from_storage#0"
      ]
    },
    "741": {
      "op": "==",
      "defined_out": [
        "account_from_function#0",
        "application_from_function#0",
        "application_from_storage#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%3#1"
      ]
    },
    "742": {
      "error": "wrong account from storage",
      "op": "assert // wrong account from storage",
      "stack_out": [
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "743": {
      "op": "global ZeroAddress",
      "defined_out": [
        "account_from_function#0",
        "application_from_function#0",
        "application_from_storage#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "account_from_function#0",
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%4#1"
      ]
    },
    "745": {
      "op": "uncover 10",
      "stack_out": [
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%4#1",
        "account_from_function#0"
      ]
    },
    "747": {
      "op": "==",
      "defined_out": [
        "application_from_function#0",
        "application_from_storage#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%5#1"
      ]
    },
    "748": {
      "error": "wrong account from function",
      "op": "assert // wrong account from function",
      "stack_out": [
        "application_from_storage#0",
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "749": {
      "op": "uncover 8",
      "stack_out": [
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "application_from_storage#0"
      ]
    },
    "751": {
      "op": "pushint 123 // 123",
      "stack_out": [
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "application_from_storage#0",
        "123"
      ]
    },
    "753": {
      "op": "==",
      "defined_out": [
        "application_from_function#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%6#1"
      ]
    },
    "754": {
      "error": "wrong application from storage",
      "op": "assert // wrong application from storage",
      "stack_out": [
        "application_from_function#0",
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "755": {
      "op": "uncover 7",
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "application_from_function#0"
      ]
    },
    "757": {
      "op": "pushint 456 // 456",
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "application_from_function#0",
        "456"
      ]
    },
    "760": {
      "op": "==",
      "defined_out": [
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%7#1"
      ],
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%7#1"
      ]
    },
    "761": {
      "error": "wrong application from function",
      "op": "assert // wrong application from function",
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "762": {
      "op": "dig 6",
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "bytes_from_storage#0 (copy)"
      ]
    },
    "764": {
      "error": "index access is out of bounds",
      "op": "extract 0 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "767": {
      "op": "pushbytes 0x07",
      "defined_out": [
        "0x07",
        "aggregate%encoded_element%0#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "aggregate%encoded_element%0#0",
        "0x07"
      ]
    },
    "770": {
      "op": "b==",
      "defined_out": [
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%8#1"
      ]
    },
    "771": {
      "error": "wrong 0th byte from storage",
      "op": "assert // wrong 0th byte from storage",
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "772": {
      "op": "dig 6",
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "bytes_from_storage#0 (copy)"
      ]
    },
    "774": {
      "error": "index access is out of bounds",
      "op": "extract 1 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%1#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "aggregate%encoded_element%1#0"
      ]
    },
    "777": {
      "op": "pushbytes 0x08",
      "defined_out": [
        "0x08",
        "aggregate%encoded_element%1#0",
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "aggregate%encoded_element%1#0",
        "0x08"
      ]
    },
    "780": {
      "op": "b==",
      "defined_out": [
        "bytes_from_local#0",
        "bytes_from_storage#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%9#1"
      ]
    },
    "781": {
      "error": "wrong 1st byte from storage",
      "op": "assert // wrong 1st byte from storage",
      "stack_out": [
        "bytes_from_storage#0",
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "782": {
      "op": "uncover 6",
      "stack_out": [
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "bytes_from_storage#0"
      ]
    },
    "784": {
      "error": "index access is out of bounds",
      "op": "extract 2 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%2#0",
        "bytes_from_local#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "aggregate%encoded_element%2#0"
      ]
    },
    "787": {
      "op": "pushbytes 0x09",
      "defined_out": [
        "0x09",
        "aggregate%encoded_element%2#0",
        "bytes_from_local#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "aggregate%encoded_element%2#0",
        "0x09"
      ]
    },
    "790": {
      "op": "b==",
      "defined_out": [
        "bytes_from_local#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "int_from_storage#0",
        "str_from_const#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%10#1"
      ]
    },
    "791": {
      "error": "wrong 2nd byte from storage",
      "op": "assert // wrong 2nd byte from storage",
      "stack_out": [
        "int_from_storage#0",
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "792": {
      "op": "uncover 5",
      "stack_out": [
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "int_from_storage#0"
      ]
    },
    "794": {
      "op": "btoi",
      "defined_out": [
        "bytes_from_local#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "str_from_const#0",
        "tmp%11#1"
      ],
      "stack_out": [
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%11#1"
      ]
    },
    "795": {
      "op": "intc_3 // 2",
      "stack_out": [
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%11#1",
        "2"
      ]
    },
    "796": {
      "op": "==",
      "defined_out": [
        "bytes_from_local#0",
        "int_from_const#0",
        "int_from_function#0",
        "int_from_local#0",
        "str_from_const#0",
        "tmp%12#1"
      ],
      "stack_out": [
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%12#1"
      ]
    },
    "797": {
      "error": "wrong int from storage",
      "op": "assert // wrong int from storage",
      "stack_out": [
        "int_from_function#0",
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "798": {
      "op": "uncover 4",
      "stack_out": [
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "int_from_function#0"
      ]
    },
    "800": {
      "op": "btoi",
      "defined_out": [
        "bytes_from_local#0",
        "int_from_const#0",
        "int_from_local#0",
        "str_from_const#0",
        "tmp%13#1"
      ],
      "stack_out": [
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%13#1"
      ]
    },
    "801": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%13#1",
        "3"
      ]
    },
    "803": {
      "op": "==",
      "defined_out": [
        "bytes_from_local#0",
        "int_from_const#0",
        "int_from_local#0",
        "str_from_const#0",
        "tmp%14#1"
      ],
      "stack_out": [
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%14#1"
      ]
    },
    "804": {
      "error": "wrong int from function",
      "op": "assert // wrong int from function",
      "stack_out": [
        "int_from_const#0",
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "805": {
      "op": "uncover 3",
      "stack_out": [
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "int_from_const#0"
      ]
    },
    "807": {
      "op": "pushbytes 0x0000007b",
      "defined_out": [
        "0x0000007b",
        "bytes_from_local#0",
        "int_from_const#0",
        "int_from_local#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "int_from_const#0",
        "0x0000007b"
      ]
    },
    "813": {
      "op": "b==",
      "defined_out": [
        "bytes_from_local#0",
        "int_from_local#0",
        "str_from_const#0",
        "tmp%15#1"
      ],
      "stack_out": [
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%15#1"
      ]
    },
    "814": {
      "op": "assert",
      "stack_out": [
        "str_from_const#0",
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "815": {
      "op": "uncover 2",
      "stack_out": [
        "int_from_local#0",
        "bytes_from_local#0",
        "str_from_const#0"
      ]
    },
    "817": {
      "op": "pushbytes 0x0003616263",
      "defined_out": [
        "0x0003616263",
        "bytes_from_local#0",
        "int_from_local#0",
        "str_from_const#0"
      ],
      "stack_out": [
        "int_from_local#0",
        "bytes_from_local#0",
        "str_from_const#0",
        "0x0003616263"
      ]
    },
    "824": {
      "op": "==",
      "defined_out": [
        "bytes_from_local#0",
        "int_from_local#0",
        "tmp%17#1"
      ],
      "stack_out": [
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%17#1"
      ]
    },
    "825": {
      "op": "assert",
      "stack_out": [
        "int_from_local#0",
        "bytes_from_local#0"
      ]
    },
    "826": {
      "op": "txn Sender",
      "defined_out": [
        "bytes_from_local#0",
        "int_from_local#0",
        "tmp%18#1"
      ],
      "stack_out": [
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%18#1"
      ]
    },
    "828": {
      "op": "intc_2 // 0",
      "stack_out": [
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%18#1",
        "0"
      ]
    },
    "829": {
      "op": "bytec_3 // \"local_uint\"",
      "defined_out": [
        "\"local_uint\"",
        "0",
        "bytes_from_local#0",
        "int_from_local#0",
        "tmp%18#1"
      ],
      "stack_out": [
        "int_from_local#0",
        "bytes_from_local#0",
        "tmp%18#1",
        "0",
        "\"local_uint\""
      ]
    },
    "830": {
      "op": "app_local_get_ex",
      "defined_out": [
        "bytes_from_local#0",
        "int_from_local#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "int_from_local#0",
        "bytes_from_local#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "831": {
      "error": "check self.local_uint exists for account",
      "op": "assert // check self.local_uint exists for account",
      "stack_out": [
        "int_from_local#0",
        "bytes_from_local#0",
        "maybe_value%0#0"
      ]
    },
    "832": {
      "op": "uncover 2",
      "stack_out": [
        "bytes_from_local#0",
        "maybe_value%0#0",
        "int_from_local#0"
      ]
    },
    "834": {
      "op": "==",
      "defined_out": [
        "bytes_from_local#0",
        "tmp%19#1"
      ],
      "stack_out": [
        "bytes_from_local#0",
        "tmp%19#1"
      ]
    },
    "835": {
      "op": "assert",
      "stack_out": [
        "bytes_from_local#0"
      ]
    },
    "836": {
      "op": "txn Sender",
      "defined_out": [
        "bytes_from_local#0",
        "tmp%20#1"
      ],
      "stack_out": [
        "bytes_from_local#0",
        "tmp%20#1"
      ]
    },
    "838": {
      "op": "intc_2 // 0",
      "stack_out": [
        "bytes_from_local#0",
        "tmp%20#1",
        "0"
      ]
    },
    "839": {
      "op": "bytec 4 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "0",
        "bytes_from_local#0",
        "tmp%20#1"
      ],
      "stack_out": [
        "bytes_from_local#0",
        "tmp%20#1",
        "0",
        "\"local_bytes\""
      ]
    },
    "841": {
      "op": "app_local_get_ex",
      "defined_out": [
        "bytes_from_local#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "bytes_from_local#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "842": {
      "error": "check self.local_bytes exists for account",
      "op": "assert // check self.local_bytes exists for account",
      "stack_out": [
        "bytes_from_local#0",
        "maybe_value%1#0"
      ]
    },
    "843": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "844": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "845": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_15_args[routing]",
      "params": {},
      "block": "method_with_15_args",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "848": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "849": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "850": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "851": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "852": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "853": {
      "op": "btoi",
      "defined_out": [
        "one#0"
      ],
      "stack_out": [
        "one#0"
      ]
    },
    "854": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "one#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%2#0"
      ]
    },
    "857": {
      "op": "dup",
      "defined_out": [
        "one#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "one#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "858": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "one#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "859": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "860": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "one#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "861": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "tmp%2#0"
      ]
    },
    "862": {
      "op": "btoi",
      "defined_out": [
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0"
      ]
    },
    "863": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "one#0",
        "tmp%4#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%4#0"
      ]
    },
    "866": {
      "op": "dup",
      "defined_out": [
        "one#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "867": {
      "op": "len",
      "defined_out": [
        "len%2#0",
        "one#0",
        "tmp%4#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "868": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "869": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "one#0",
        "tmp%4#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "870": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%4#0"
      ]
    },
    "871": {
      "op": "btoi",
      "defined_out": [
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0"
      ]
    },
    "872": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%6#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%6#0"
      ]
    },
    "875": {
      "op": "dup",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "876": {
      "op": "len",
      "defined_out": [
        "len%3#0",
        "one#0",
        "three#0",
        "tmp%6#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%6#0",
        "len%3#0"
      ]
    },
    "877": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%6#0",
        "len%3#0",
        "8"
      ]
    },
    "878": {
      "op": "==",
      "defined_out": [
        "eq%3#0",
        "one#0",
        "three#0",
        "tmp%6#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%6#0",
        "eq%3#0"
      ]
    },
    "879": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%6#0"
      ]
    },
    "880": {
      "op": "btoi",
      "defined_out": [
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0"
      ]
    },
    "881": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "four#0",
        "one#0",
        "three#0",
        "tmp%8#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%8#0"
      ]
    },
    "884": {
      "op": "dup",
      "defined_out": [
        "four#0",
        "one#0",
        "three#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "885": {
      "op": "len",
      "defined_out": [
        "four#0",
        "len%4#0",
        "one#0",
        "three#0",
        "tmp%8#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%8#0",
        "len%4#0"
      ]
    },
    "886": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%8#0",
        "len%4#0",
        "8"
      ]
    },
    "887": {
      "op": "==",
      "defined_out": [
        "eq%4#0",
        "four#0",
        "one#0",
        "three#0",
        "tmp%8#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%8#0",
        "eq%4#0"
      ]
    },
    "888": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%8#0"
      ]
    },
    "889": {
      "op": "btoi",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0"
      ]
    },
    "890": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "tmp%10#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%10#0"
      ]
    },
    "893": {
      "op": "dup",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "894": {
      "op": "len",
      "defined_out": [
        "five#0",
        "four#0",
        "len%5#0",
        "one#0",
        "three#0",
        "tmp%10#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%10#0",
        "len%5#0"
      ]
    },
    "895": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%10#0",
        "len%5#0",
        "8"
      ]
    },
    "896": {
      "op": "==",
      "defined_out": [
        "eq%5#0",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "tmp%10#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%10#0",
        "eq%5#0"
      ]
    },
    "897": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%10#0"
      ]
    },
    "898": {
      "op": "btoi",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "six#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0"
      ]
    },
    "899": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "six#0",
        "three#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "tmp%12#0"
      ]
    },
    "902": {
      "op": "dup",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "six#0",
        "three#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "903": {
      "op": "len",
      "defined_out": [
        "five#0",
        "four#0",
        "len%6#0",
        "one#0",
        "six#0",
        "three#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "tmp%12#0",
        "len%6#0"
      ]
    },
    "904": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "tmp%12#0",
        "len%6#0",
        "8"
      ]
    },
    "905": {
      "op": "==",
      "defined_out": [
        "eq%6#0",
        "five#0",
        "four#0",
        "one#0",
        "six#0",
        "three#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "tmp%12#0",
        "eq%6#0"
      ]
    },
    "906": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "tmp%12#0"
      ]
    },
    "907": {
      "op": "btoi",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0"
      ]
    },
    "908": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "tmp%14#0"
      ]
    },
    "911": {
      "op": "dup",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "912": {
      "op": "len",
      "defined_out": [
        "five#0",
        "four#0",
        "len%7#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "tmp%14#0",
        "len%7#0"
      ]
    },
    "913": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "tmp%14#0",
        "len%7#0",
        "8"
      ]
    },
    "914": {
      "op": "==",
      "defined_out": [
        "eq%7#0",
        "five#0",
        "four#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "tmp%14#0",
        "eq%7#0"
      ]
    },
    "915": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "tmp%14#0"
      ]
    },
    "916": {
      "op": "btoi",
      "defined_out": [
        "eight#0",
        "five#0",
        "four#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0"
      ]
    },
    "917": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "eight#0",
        "five#0",
        "four#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "tmp%16#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "tmp%16#0"
      ]
    },
    "920": {
      "op": "dup",
      "defined_out": [
        "eight#0",
        "five#0",
        "four#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "921": {
      "op": "len",
      "defined_out": [
        "eight#0",
        "five#0",
        "four#0",
        "len%8#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "tmp%16#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "tmp%16#0",
        "len%8#0"
      ]
    },
    "922": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "tmp%16#0",
        "len%8#0",
        "8"
      ]
    },
    "923": {
      "op": "==",
      "defined_out": [
        "eight#0",
        "eq%8#0",
        "five#0",
        "four#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "tmp%16#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "tmp%16#0",
        "eq%8#0"
      ]
    },
    "924": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "tmp%16#0"
      ]
    },
    "925": {
      "op": "btoi",
      "defined_out": [
        "eight#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0"
      ]
    },
    "926": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "eight#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "tmp%18#0"
      ]
    },
    "929": {
      "op": "dup",
      "defined_out": [
        "eight#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "930": {
      "op": "len",
      "defined_out": [
        "eight#0",
        "five#0",
        "four#0",
        "len%9#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "tmp%18#0",
        "len%9#0"
      ]
    },
    "931": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "tmp%18#0",
        "len%9#0",
        "8"
      ]
    },
    "932": {
      "op": "==",
      "defined_out": [
        "eight#0",
        "eq%9#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "three#0",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "tmp%18#0",
        "eq%9#0"
      ]
    },
    "933": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "tmp%18#0"
      ]
    },
    "934": {
      "op": "btoi",
      "defined_out": [
        "eight#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0"
      ]
    },
    "935": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "eight#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "tmp%20#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "tmp%20#0"
      ]
    },
    "938": {
      "op": "dup",
      "defined_out": [
        "eight#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "939": {
      "op": "len",
      "defined_out": [
        "eight#0",
        "five#0",
        "four#0",
        "len%10#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "tmp%20#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "tmp%20#0",
        "len%10#0"
      ]
    },
    "940": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "tmp%20#0",
        "len%10#0",
        "8"
      ]
    },
    "941": {
      "op": "==",
      "defined_out": [
        "eight#0",
        "eq%10#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "tmp%20#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "tmp%20#0",
        "eq%10#0"
      ]
    },
    "942": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "tmp%20#0"
      ]
    },
    "943": {
      "op": "btoi",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0"
      ]
    },
    "944": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "tmp%22#0"
      ]
    },
    "947": {
      "op": "dup",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "tmp%22#0",
        "tmp%22#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ]
    },
    "948": {
      "op": "len",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "len%11#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "tmp%22#0",
        "len%11#0"
      ]
    },
    "949": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "tmp%22#0",
        "len%11#0",
        "8"
      ]
    },
    "950": {
      "op": "==",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "eq%11#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "tmp%22#0",
        "eq%11#0"
      ]
    },
    "951": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "tmp%22#0"
      ]
    },
    "952": {
      "op": "btoi",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0"
      ]
    },
    "953": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "tmp%24#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "tmp%24#0"
      ]
    },
    "956": {
      "op": "dup",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ]
    },
    "957": {
      "op": "len",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "len%12#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "tmp%24#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "tmp%24#0",
        "len%12#0"
      ]
    },
    "958": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "tmp%24#0",
        "len%12#0",
        "8"
      ]
    },
    "959": {
      "op": "==",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "eq%12#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "three#0",
        "tmp%24#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "tmp%24#0",
        "eq%12#0"
      ]
    },
    "960": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "tmp%24#0"
      ]
    },
    "961": {
      "op": "btoi",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0"
      ]
    },
    "962": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%26#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "tmp%26#0"
      ]
    },
    "965": {
      "op": "dup",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%26#0",
        "tmp%26#0 (copy)",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ]
    },
    "966": {
      "op": "len",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "len%13#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%26#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "tmp%26#0",
        "len%13#0"
      ]
    },
    "967": {
      "op": "intc_0 // 8",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "tmp%26#0",
        "len%13#0",
        "8"
      ]
    },
    "968": {
      "op": "==",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "eq%13#0",
        "five#0",
        "four#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%26#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "tmp%26#0",
        "eq%13#0"
      ]
    },
    "969": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "tmp%26#0"
      ]
    },
    "970": {
      "op": "btoi",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "fourteen#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0"
      ]
    },
    "971": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "fourteen#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%28#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0"
      ]
    },
    "974": {
      "op": "dup",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "fourteen#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "975": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "fourteen#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "0"
      ]
    },
    "976": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "fourteen#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%28#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "aggregate%array_length%0#0"
      ]
    },
    "977": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "fourteen#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%28#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "978": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "fourteen#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%28#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "add%0#0"
      ]
    },
    "979": {
      "op": "dig 1",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "add%0#0",
        "tmp%28#0 (copy)"
      ]
    },
    "981": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "fourteen#0",
        "len%14#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%28#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "add%0#0",
        "len%14#0"
      ]
    },
    "982": {
      "op": "==",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "eq%14#0",
        "five#0",
        "four#0",
        "fourteen#0",
        "nine#0",
        "one#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%28#0",
        "twelve#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "eq%14#0"
      ]
    },
    "983": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0"
      ]
    },
    "984": {
      "op": "uncover 14",
      "stack_out": [
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "one#0"
      ]
    },
    "986": {
      "op": "uncover 14",
      "stack_out": [
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "one#0",
        "two#0"
      ]
    },
    "988": {
      "op": "+",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "fourteen#0",
        "nine#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "three#0",
        "tmp%0#1",
        "tmp%28#0",
        "twelve#0"
      ],
      "stack_out": [
        "three#0",
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%0#1"
      ]
    },
    "989": {
      "op": "uncover 13",
      "stack_out": [
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%0#1",
        "three#0"
      ]
    },
    "991": {
      "op": "+",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "four#0",
        "fourteen#0",
        "nine#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "tmp%1#1",
        "tmp%28#0",
        "twelve#0"
      ],
      "stack_out": [
        "four#0",
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%1#1"
      ]
    },
    "992": {
      "op": "uncover 12",
      "stack_out": [
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%1#1",
        "four#0"
      ]
    },
    "994": {
      "op": "+",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "five#0",
        "fourteen#0",
        "nine#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "tmp%2#1",
        "tmp%28#0",
        "twelve#0"
      ],
      "stack_out": [
        "five#0",
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%2#1"
      ]
    },
    "995": {
      "op": "uncover 11",
      "stack_out": [
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%2#1",
        "five#0"
      ]
    },
    "997": {
      "op": "+",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "fourteen#0",
        "nine#0",
        "seven#0",
        "six#0",
        "ten#0",
        "thirteen#0",
        "tmp%28#0",
        "tmp%3#1",
        "twelve#0"
      ],
      "stack_out": [
        "six#0",
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%3#1"
      ]
    },
    "998": {
      "op": "uncover 10",
      "stack_out": [
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%3#1",
        "six#0"
      ]
    },
    "1000": {
      "op": "+",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "fourteen#0",
        "nine#0",
        "seven#0",
        "ten#0",
        "thirteen#0",
        "tmp%28#0",
        "tmp%4#1",
        "twelve#0"
      ],
      "stack_out": [
        "seven#0",
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%4#1"
      ]
    },
    "1001": {
      "op": "uncover 9",
      "stack_out": [
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%4#1",
        "seven#0"
      ]
    },
    "1003": {
      "op": "+",
      "defined_out": [
        "eight#0",
        "eleven#0",
        "fourteen#0",
        "nine#0",
        "ten#0",
        "thirteen#0",
        "tmp%28#0",
        "tmp%5#1",
        "twelve#0"
      ],
      "stack_out": [
        "eight#0",
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%5#1"
      ]
    },
    "1004": {
      "op": "uncover 8",
      "stack_out": [
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%5#1",
        "eight#0"
      ]
    },
    "1006": {
      "op": "+",
      "defined_out": [
        "eleven#0",
        "fourteen#0",
        "nine#0",
        "ten#0",
        "thirteen#0",
        "tmp%28#0",
        "tmp%6#1",
        "twelve#0"
      ],
      "stack_out": [
        "nine#0",
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%6#1"
      ]
    },
    "1007": {
      "op": "uncover 7",
      "stack_out": [
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%6#1",
        "nine#0"
      ]
    },
    "1009": {
      "op": "+",
      "defined_out": [
        "eleven#0",
        "fourteen#0",
        "ten#0",
        "thirteen#0",
        "tmp%28#0",
        "tmp%7#1",
        "twelve#0"
      ],
      "stack_out": [
        "ten#0",
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%7#1"
      ]
    },
    "1010": {
      "op": "uncover 6",
      "stack_out": [
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%7#1",
        "ten#0"
      ]
    },
    "1012": {
      "op": "+",
      "defined_out": [
        "eleven#0",
        "fourteen#0",
        "thirteen#0",
        "tmp%28#0",
        "tmp%8#1",
        "twelve#0"
      ],
      "stack_out": [
        "eleven#0",
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%8#1"
      ]
    },
    "1013": {
      "op": "uncover 5",
      "stack_out": [
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%8#1",
        "eleven#0"
      ]
    },
    "1015": {
      "op": "+",
      "defined_out": [
        "fourteen#0",
        "thirteen#0",
        "tmp%28#0",
        "tmp%9#1",
        "twelve#0"
      ],
      "stack_out": [
        "twelve#0",
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%9#1"
      ]
    },
    "1016": {
      "op": "uncover 4",
      "stack_out": [
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%9#1",
        "twelve#0"
      ]
    },
    "1018": {
      "op": "+",
      "defined_out": [
        "fourteen#0",
        "thirteen#0",
        "tmp%10#1",
        "tmp%28#0"
      ],
      "stack_out": [
        "thirteen#0",
        "fourteen#0",
        "tmp%28#0",
        "tmp%10#1"
      ]
    },
    "1019": {
      "op": "uncover 3",
      "stack_out": [
        "fourteen#0",
        "tmp%28#0",
        "tmp%10#1",
        "thirteen#0"
      ]
    },
    "1021": {
      "op": "+",
      "defined_out": [
        "fourteen#0",
        "tmp%11#1",
        "tmp%28#0"
      ],
      "stack_out": [
        "fourteen#0",
        "tmp%28#0",
        "tmp%11#1"
      ]
    },
    "1022": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%28#0",
        "tmp%11#1",
        "fourteen#0"
      ]
    },
    "1024": {
      "op": "+",
      "defined_out": [
        "tmp%12#1",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%12#1"
      ]
    },
    "1025": {
      "op": "assert",
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1026": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "1027": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%28#0"
      ]
    },
    "1028": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1029": {
      "op": "log",
      "stack_out": []
    },
    "1030": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1031": {
      "op": "return",
      "stack_out": []
    },
    "1032": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_more_than_15_args[routing]",
      "params": {},
      "block": "method_with_more_than_15_args",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1035": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1036": {
      "op": "len",
      "defined_out": [
        "a#0",
        "len%0#0"
      ],
      "stack_out": [
        "a#0",
        "len%0#0"
      ]
    },
    "1037": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "a#0",
        "len%0#0"
      ],
      "stack_out": [
        "a#0",
        "len%0#0",
        "8"
      ]
    },
    "1038": {
      "op": "==",
      "defined_out": [
        "a#0",
        "eq%0#0"
      ],
      "stack_out": [
        "a#0",
        "eq%0#0"
      ]
    },
    "1039": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0"
      ]
    },
    "1040": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "1043": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0 (copy)"
      ]
    },
    "1044": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "len%1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0"
      ]
    },
    "1045": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "8"
      ]
    },
    "1046": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "eq%1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "eq%1#0"
      ]
    },
    "1047": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "1048": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "1051": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "c#0 (copy)"
      ]
    },
    "1052": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "len%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "len%2#0"
      ]
    },
    "1053": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "len%2#0",
        "8"
      ]
    },
    "1054": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "eq%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "eq%2#0"
      ]
    },
    "1055": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "1056": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%3#0"
      ]
    },
    "1059": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1060": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "len%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%3#0",
        "len%3#0"
      ]
    },
    "1061": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%3#0",
        "len%3#0",
        "8"
      ]
    },
    "1062": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "eq%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%3#0",
        "eq%3#0"
      ]
    },
    "1063": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%3#0"
      ]
    },
    "1064": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "1065": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%5#0"
      ]
    },
    "1068": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1069": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "len%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%5#0",
        "len%4#0"
      ]
    },
    "1070": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%5#0",
        "len%4#0",
        "8"
      ]
    },
    "1071": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "eq%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%5#0",
        "eq%4#0"
      ]
    },
    "1072": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%5#0"
      ]
    },
    "1073": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0"
      ]
    },
    "1074": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0"
      ]
    },
    "1077": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "e#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "e#0 (copy)"
      ]
    },
    "1078": {
      "op": "len",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "len%5#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "len%5#0"
      ]
    },
    "1079": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "len%5#0",
        "8"
      ]
    },
    "1080": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "eq%5#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "eq%5#0"
      ]
    },
    "1081": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0"
      ]
    },
    "1082": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0"
      ]
    },
    "1085": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "f#0 (copy)"
      ]
    },
    "1086": {
      "op": "len",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "len%6#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "len%6#0"
      ]
    },
    "1087": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "len%6#0",
        "8"
      ]
    },
    "1088": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "eq%6#0",
        "f#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "eq%6#0"
      ]
    },
    "1089": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0"
      ]
    },
    "1090": {
      "op": "txn GroupIndex",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "tmp%9#0"
      ]
    },
    "1092": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "tmp%9#0",
        "2"
      ]
    },
    "1093": {
      "op": "-",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0"
      ]
    },
    "1094": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "pay#0",
        "pay#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "pay#0 (copy)"
      ]
    },
    "1095": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "gtxn_type%0#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "gtxn_type%0#0"
      ]
    },
    "1097": {
      "op": "intc_1 // pay",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "gtxn_type%0#0",
        "pay",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1098": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "gtxn_type_matches%0#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1099": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0"
      ]
    },
    "1100": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0"
      ]
    },
    "1103": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "g#0 (copy)",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "g#0 (copy)"
      ]
    },
    "1104": {
      "op": "len",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "len%7#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "len%7#0"
      ]
    },
    "1105": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "len%7#0",
        "8"
      ]
    },
    "1106": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "eq%7#0",
        "f#0",
        "g#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "eq%7#0"
      ]
    },
    "1107": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0"
      ]
    },
    "1108": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0"
      ]
    },
    "1111": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "h#0 (copy)",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "h#0 (copy)"
      ]
    },
    "1112": {
      "op": "len",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "len%8#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "len%8#0"
      ]
    },
    "1113": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "len%8#0",
        "8"
      ]
    },
    "1114": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "eq%8#0",
        "f#0",
        "g#0",
        "h#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "eq%8#0"
      ]
    },
    "1115": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0"
      ]
    },
    "1116": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "1119": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "i#0 (copy)",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "1120": {
      "op": "len",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "len%9#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "len%9#0"
      ]
    },
    "1121": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "len%9#0",
        "8"
      ]
    },
    "1122": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "eq%9#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "eq%9#0"
      ]
    },
    "1123": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "1124": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0"
      ]
    },
    "1127": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "j#0 (copy)",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "j#0 (copy)"
      ]
    },
    "1128": {
      "op": "len",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "len%10#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "len%10#0"
      ]
    },
    "1129": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "len%10#0",
        "8"
      ]
    },
    "1130": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "eq%10#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "eq%10#0"
      ]
    },
    "1131": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0"
      ]
    },
    "1132": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "1135": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "k#0 (copy)",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "k#0 (copy)"
      ]
    },
    "1136": {
      "op": "len",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "len%11#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "len%11#0"
      ]
    },
    "1137": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "len%11#0",
        "8"
      ]
    },
    "1138": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "eq%11#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "eq%11#0"
      ]
    },
    "1139": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0"
      ]
    },
    "1140": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0"
      ]
    },
    "1143": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "l#0 (copy)",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "l#0 (copy)"
      ]
    },
    "1144": {
      "op": "len",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "len%12#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "len%12#0"
      ]
    },
    "1145": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "len%12#0",
        "8"
      ]
    },
    "1146": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "eq%12#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "eq%12#0"
      ]
    },
    "1147": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0"
      ]
    },
    "1148": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0"
      ]
    },
    "1151": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "m#0 (copy)",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "1152": {
      "op": "len",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "len%13#0",
        "m#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "len%13#0"
      ]
    },
    "1153": {
      "op": "intc_0 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "len%13#0",
        "8"
      ]
    },
    "1154": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "eq%13#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "pay#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "eq%13#0"
      ]
    },
    "1155": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0"
      ]
    },
    "1156": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "pay#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0"
      ]
    },
    "1159": {
      "op": "dupn 2",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "pay#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1161": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "pay#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "16"
      ]
    },
    "1163": {
      "op": "extract_uint64",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0"
      ]
    },
    "1164": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0"
      ]
    },
    "1167": {
      "op": "dupn 3",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ]
    },
    "1169": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%23#0 (copy)",
        "40"
      ]
    },
    "1171": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "aggregate%extract_uint16%0#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1172": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "aggregate%extract_uint16%0#0",
        "tmp%23#0 (copy)"
      ]
    },
    "1174": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "a#0",
        "aggregate%extract_uint16%0#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "aggregate%extract_uint16%0#0",
        "tmp%23#0 (copy)",
        "42"
      ]
    },
    "1176": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1177": {
      "op": "substring3",
      "defined_out": [
        "a#0",
        "aggregate%substring3%0#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "aggregate%substring3%0#0"
      ]
    },
    "1178": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "s#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0"
      ]
    },
    "1181": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "s#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "tmp%25#0"
      ]
    },
    "1184": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "s#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%25#0",
        "tmp%25#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "tmp%25#0",
        "tmp%25#0 (copy)"
      ]
    },
    "1185": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "tmp%25#0",
        "tmp%25#0 (copy)",
        "42"
      ]
    },
    "1187": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "aggregate%extract_uint16%2#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "s#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "tmp%25#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "1188": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "tmp%25#0",
        "aggregate%extract_uint16%2#0",
        "tmp%25#0 (copy)"
      ]
    },
    "1190": {
      "op": "len",
      "defined_out": [
        "a#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "s#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "tmp%25#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "1191": {
      "op": "substring3",
      "defined_out": [
        "a#0",
        "aggregate%substring3%1#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "s#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "aggregate%substring3%1#0"
      ]
    },
    "1192": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0"
      ]
    },
    "1195": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "tmp%27#0"
      ]
    },
    "1198": {
      "op": "pushint 44 // 44",
      "defined_out": [
        "44",
        "a#0",
        "asset#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "tmp%27#0",
        "44"
      ]
    },
    "1200": {
      "op": "extract_uint64",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0"
      ]
    },
    "1201": {
      "op": "txn GroupIndex",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "tmp%29#0"
      ]
    },
    "1203": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "tmp%29#0",
        "1"
      ]
    },
    "1204": {
      "op": "-",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "pay2#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0"
      ]
    },
    "1205": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "pay2#0",
        "pay2#0 (copy)",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "pay2#0 (copy)"
      ]
    },
    "1206": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "gtxn_type%1#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "pay2#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "gtxn_type%1#0"
      ]
    },
    "1208": {
      "op": "intc_1 // pay",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "1209": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "gtxn_type_matches%1#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "pay2#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "1210": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0"
      ]
    },
    "1211": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "pay2#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "tmp%30#0"
      ]
    },
    "1214": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "pay2#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1215": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "pay2#0",
        "s#0",
        "t#0",
        "tmp%0#1",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%0#1"
      ]
    },
    "1217": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%0#1",
        "16"
      ]
    },
    "1219": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay#0",
        "pay2#0",
        "s#0",
        "t#0",
        "tmp%1#1",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%1#1"
      ]
    },
    "1220": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "pay#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1221": {
      "op": "uncover 18",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "tmp%30#0",
        "tmp%31#0",
        "pay#0"
      ]
    },
    "1223": {
      "op": "gtxns Amount",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay2#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%2#1",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%2#1"
      ]
    },
    "1225": {
      "op": "pushint 100000 // 100000",
      "defined_out": [
        "100000",
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay2#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%2#1",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%2#1",
        "100000"
      ]
    },
    "1229": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "pay2#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%3#1",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%3#1"
      ]
    },
    "1230": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "pay2#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1231": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "tmp%30#0",
        "tmp%31#0",
        "pay2#0"
      ]
    },
    "1233": {
      "op": "gtxns Amount",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%4#1"
      ]
    },
    "1235": {
      "op": "pushint 200000 // 200000",
      "defined_out": [
        "200000",
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%4#1",
        "200000"
      ]
    },
    "1239": {
      "op": "==",
      "defined_out": [
        "a#0",
        "asset#0",
        "asset2#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "s#0",
        "t#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%5#1"
      ]
    },
    "1240": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "asset#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1241": {
      "op": "uncover 19",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "tmp%30#0",
        "tmp%31#0",
        "asset#0"
      ]
    },
    "1243": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "asset2#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1244": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "tmp%30#0",
        "tmp%31#0",
        "asset2#0"
      ]
    },
    "1246": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "s#0",
        "t#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1247": {
      "op": "uncover 3",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "t#0",
        "tmp%30#0",
        "tmp%31#0",
        "s#0"
      ]
    },
    "1249": {
      "op": "uncover 3",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "s#0",
        "t#0"
      ]
    },
    "1251": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%8#1"
      ]
    },
    "1252": {
      "op": "log",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1253": {
      "op": "uncover 19",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "a#0"
      ]
    },
    "1255": {
      "op": "btoi",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%9#0"
      ]
    },
    "1256": {
      "op": "uncover 19",
      "stack_out": [
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%9#0",
        "b#0"
      ]
    },
    "1258": {
      "op": "btoi",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%10#1",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%9#0",
        "tmp%10#1"
      ]
    },
    "1259": {
      "op": "+",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%11#1",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%11#1"
      ]
    },
    "1260": {
      "op": "uncover 18",
      "stack_out": [
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%11#1",
        "c#0"
      ]
    },
    "1262": {
      "op": "btoi",
      "defined_out": [
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%11#1",
        "tmp%12#1",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%11#1",
        "tmp%12#1"
      ]
    },
    "1263": {
      "op": "+",
      "defined_out": [
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%13#1",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "d#0",
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%13#1"
      ]
    },
    "1264": {
      "op": "uncover 17",
      "stack_out": [
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%13#1",
        "d#0"
      ]
    },
    "1266": {
      "op": "+",
      "defined_out": [
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%14#1",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "e#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%14#1"
      ]
    },
    "1267": {
      "op": "uncover 16",
      "stack_out": [
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%14#1",
        "e#0"
      ]
    },
    "1269": {
      "op": "btoi",
      "defined_out": [
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%14#1",
        "tmp%15#1",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%14#1",
        "tmp%15#1"
      ]
    },
    "1270": {
      "op": "+",
      "defined_out": [
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%16#1",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%16#1"
      ]
    },
    "1271": {
      "op": "uncover 15",
      "stack_out": [
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%16#1",
        "f#0"
      ]
    },
    "1273": {
      "op": "btoi",
      "defined_out": [
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%16#1",
        "tmp%17#0",
        "tmp%17#1",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%16#1",
        "tmp%17#1"
      ]
    },
    "1274": {
      "op": "+",
      "defined_out": [
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%18#1",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "g#0",
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%18#1"
      ]
    },
    "1275": {
      "op": "uncover 14",
      "stack_out": [
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%18#1",
        "g#0"
      ]
    },
    "1277": {
      "op": "btoi",
      "defined_out": [
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%18#1",
        "tmp%19#1",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%18#1",
        "tmp%19#1"
      ]
    },
    "1278": {
      "op": "+",
      "defined_out": [
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%20#1",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "h#0",
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%20#1"
      ]
    },
    "1279": {
      "op": "uncover 13",
      "stack_out": [
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%20#1",
        "h#0"
      ]
    },
    "1281": {
      "op": "btoi",
      "defined_out": [
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%20#1",
        "tmp%21#0",
        "tmp%21#1",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%20#1",
        "tmp%21#1"
      ]
    },
    "1282": {
      "op": "+",
      "defined_out": [
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%22#1",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "i#0",
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%22#1"
      ]
    },
    "1283": {
      "op": "uncover 12",
      "stack_out": [
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%22#1",
        "i#0"
      ]
    },
    "1285": {
      "op": "btoi",
      "defined_out": [
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%22#1",
        "tmp%23#1",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%22#1",
        "tmp%23#1"
      ]
    },
    "1286": {
      "op": "+",
      "defined_out": [
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#1",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "j#0",
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%24#1"
      ]
    },
    "1287": {
      "op": "uncover 11",
      "stack_out": [
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%24#1",
        "j#0"
      ]
    },
    "1289": {
      "op": "btoi",
      "defined_out": [
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#1",
        "tmp%25#1",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%24#1",
        "tmp%25#1"
      ]
    },
    "1290": {
      "op": "+",
      "defined_out": [
        "k#0",
        "l#0",
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%26#1",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "k#0",
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%26#1"
      ]
    },
    "1291": {
      "op": "uncover 10",
      "stack_out": [
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%26#1",
        "k#0"
      ]
    },
    "1293": {
      "op": "btoi",
      "defined_out": [
        "l#0",
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%26#1",
        "tmp%27#1",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%26#1",
        "tmp%27#1"
      ]
    },
    "1294": {
      "op": "+",
      "defined_out": [
        "l#0",
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%28#1",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "l#0",
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%28#1"
      ]
    },
    "1295": {
      "op": "uncover 9",
      "stack_out": [
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%28#1",
        "l#0"
      ]
    },
    "1297": {
      "op": "btoi",
      "stack_out": [
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%28#1",
        "tmp%29#0"
      ]
    },
    "1298": {
      "op": "+",
      "defined_out": [
        "m#0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%30#1",
        "tmp%31#0"
      ],
      "stack_out": [
        "m#0",
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%30#1"
      ]
    },
    "1299": {
      "op": "uncover 8",
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%30#1",
        "m#0"
      ]
    },
    "1301": {
      "op": "btoi",
      "defined_out": [
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%30#1",
        "tmp%31#0",
        "tmp%31#1"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%30#1",
        "tmp%31#1"
      ]
    },
    "1302": {
      "op": "+",
      "defined_out": [
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#1"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#1"
      ]
    },
    "1303": {
      "op": "uncover 7",
      "stack_out": [
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#1",
        "tmp%17#0"
      ]
    },
    "1305": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "p#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#1"
      ],
      "stack_out": [
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#1",
        "tmp%17#0",
        "0"
      ]
    },
    "1306": {
      "op": "extract_uint64",
      "defined_out": [
        "p#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#1",
        "tmp%33#1"
      ],
      "stack_out": [
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#1",
        "tmp%33#1"
      ]
    },
    "1307": {
      "op": "+",
      "defined_out": [
        "p#0",
        "tmp%18#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%34#0"
      ]
    },
    "1308": {
      "op": "uncover 6",
      "stack_out": [
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%34#0",
        "tmp%18#0"
      ]
    },
    "1310": {
      "op": "intc_0 // 8",
      "stack_out": [
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%34#0",
        "tmp%18#0",
        "8"
      ]
    },
    "1311": {
      "op": "extract_uint64",
      "defined_out": [
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1312": {
      "op": "+",
      "defined_out": [
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "p#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%36#0"
      ]
    },
    "1313": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%36#0",
        "p#0"
      ]
    },
    "1315": {
      "op": "+",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%37#0"
      ]
    },
    "1316": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%37#0",
        "tmp%21#0"
      ]
    },
    "1318": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%37#0",
        "tmp%21#0",
        "24"
      ]
    },
    "1320": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1321": {
      "op": "+",
      "defined_out": [
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%39#0"
      ]
    },
    "1322": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%39#0",
        "tmp%22#0"
      ]
    },
    "1324": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "tmp%22#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%39#0",
        "tmp%22#0",
        "32"
      ]
    },
    "1326": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "1327": {
      "op": "+",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%41#0"
      ]
    },
    "1328": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%31#0",
        "tmp%41#0",
        "tmp%30#0"
      ]
    },
    "1330": {
      "op": "pushint 52 // 52",
      "defined_out": [
        "52",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%41#0",
        "tmp%30#0",
        "52"
      ]
    },
    "1332": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%31#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%41#0",
        "tmp%42#0"
      ]
    },
    "1333": {
      "op": "+",
      "defined_out": [
        "tmp%31#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%43#0"
      ]
    },
    "1334": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "tmp%31#0"
      ]
    },
    "1335": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "60",
        "tmp%31#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%31#0",
        "60"
      ]
    },
    "1337": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "1338": {
      "op": "+",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1339": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1340": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1341": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1342": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1343": {
      "op": "log",
      "stack_out": []
    },
    "1344": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1345": {
      "op": "return",
      "stack_out": []
    },
    "1346": {
      "subroutine": "test_cases.abi_routing.contract.Reference.hello_with_algopy_string[routing]",
      "params": {},
      "block": "hello_with_algopy_string",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1349": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1350": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "1351": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "1352": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "1353": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "1354": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1356": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "1357": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1358": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1359": {
      "op": "extract 2 0",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0"
      ]
    },
    "1362": {
      "op": "pushbytes \"Hello \"",
      "defined_out": [
        "\"Hello \"",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "\"Hello \""
      ]
    },
    "1370": {
      "op": "swap",
      "stack_out": [
        "\"Hello \"",
        "name#0"
      ]
    },
    "1371": {
      "op": "concat",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1372": {
      "op": "pushbytes \"!\"",
      "defined_out": [
        "\"!\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"!\""
      ]
    },
    "1375": {
      "op": "concat",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "1376": {
      "op": "dup",
      "defined_out": [
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%1#1 (copy)"
      ]
    },
    "1377": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "aggregate%length%0#0"
      ]
    },
    "1378": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1379": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1382": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#1"
      ]
    },
    "1383": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "1384": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "1385": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "1386": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1387": {
      "op": "log",
      "stack_out": []
    },
    "1388": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1389": {
      "op": "return",
      "stack_out": []
    }
  }
}