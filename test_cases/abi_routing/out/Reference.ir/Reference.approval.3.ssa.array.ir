main test_cases.abi_routing.contract.Reference.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "asa" 123u)
        (app_global_put "an_int" 2u)
        (app_global_put "some_bytes" 0x070809)
        let new_state_value%0#0: bytes[32] = (txn Sender)
        (app_global_put "creator" new_state_value%0#0)
        (app_global_put "app" 123u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#3: uint64 = (txn NumAppArgs)
        goto tmp%0#3 ? block@4 : block@19
    block@4: // abi_routing_L22
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "noop_with_uint64(uint64)uint8" => block@5, method "all_the_things(uint64)uint8" => block@6, method "mixed_oca(uint64)uint8" => block@7, method "opt_into_asset(asset)void" => block@8, method "with_transactions(asset,uint64,pay,uint64)void" => block@9, method "compare_assets(asset,asset)void" => block@10, method "get_address()address" => block@11, method "get_asset()uint64" => block@12, method "get_application()uint64" => block@13, method "get_an_int()uint64" => block@14, method "method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string)void" => block@15, method "method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[]" => block@16, method "method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64" => block@17, method "hello_with_algopy_string(string)string" => block@18, * => block@21}
    block@5: // noop_with_uint64_route_L32
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%7#0: bytes[1] = test_cases.abi_routing.contract.Reference.noop_with_uint64(reinterpret_bytes[8]%0#0)
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0: bool = 1u
        goto block@22
    block@6: // all_the_things_route_L37
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%9#0: bytes[1] = test_cases.abi_routing.contract.Reference.full_abi_config(reinterpret_bytes[8]%1#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#1: bool = 1u
        goto block@22
    block@7: // mixed_oca_route_L53
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: uint64 = (shl 1u tmp%11#0)
        let tmp%13#0: uint64 = (& tmp%12#0 37u)
        (assert tmp%13#0) // OnCompletion is not one of NoOp, CloseOut, DeleteApplication
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%16#0: bytes[1] = test_cases.abi_routing.contract.Reference.mixed_oca(reinterpret_bytes[8]%2#0)
        let tmp%17#0: bytes = (concat 0x151f7c75 tmp%16#0)
        (log tmp%17#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#2: bool = 1u
        goto block@22
    block@8: // opt_into_asset_route_L79
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%22#0: uint64 = (btoi reinterpret_bytes[1]%0#0)
        let tmp%23#0: uint64 = ((txnas Assets) tmp%22#0)
        test_cases.abi_routing.contract.Reference.opt_into_asset(tmp%23#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#3: bool = 1u
        goto block@22
    block@9: // with_transactions_route_L96
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        let reinterpret_bytes[1]%1#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%28#0: uint64 = (btoi reinterpret_bytes[1]%1#0)
        let tmp%29#0: uint64 = ((txnas Assets) tmp%28#0)
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%30#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%30#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_bytes[8]%4#0: bytes[8] = (txna ApplicationArgs 3)
        test_cases.abi_routing.contract.Reference.with_transactions(tmp%29#0, reinterpret_bytes[8]%3#0, gtxn_idx%0#0, reinterpret_bytes[8]%4#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#4: bool = 1u
        goto block@22
    block@10: // compare_assets_route_L109
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        let reinterpret_bytes[1]%2#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%35#0: uint64 = (btoi reinterpret_bytes[1]%2#0)
        let tmp%36#0: uint64 = ((txnas Assets) tmp%35#0)
        let reinterpret_bytes[1]%3#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%37#0: uint64 = (btoi reinterpret_bytes[1]%3#0)
        let tmp%38#0: uint64 = ((txnas Assets) tmp%37#0)
        test_cases.abi_routing.contract.Reference.compare_assets(tmp%36#0, tmp%38#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#5: bool = 1u
        goto block@22
    block@11: // get_address_route_L113
        let tmp%39#0: uint64 = (txn OnCompletion)
        let tmp%40#0: bool = (! tmp%39#0)
        (assert tmp%40#0) // OnCompletion is not NoOp
        let tmp%41#0: uint64 = (txn ApplicationID)
        (assert tmp%41#0) // can only call when not creating
        let tmp%43#0: bytes[32] = test_cases.abi_routing.contract.Reference.get_address()
        let tmp%44#0: bytes = (concat 0x151f7c75 tmp%43#0)
        (log tmp%44#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#6: bool = 1u
        goto block@22
    block@12: // get_asset_route_L117
        let tmp%45#0: uint64 = (txn OnCompletion)
        let tmp%46#0: bool = (! tmp%45#0)
        (assert tmp%46#0) // OnCompletion is not NoOp
        let tmp%47#0: uint64 = (txn ApplicationID)
        (assert tmp%47#0) // can only call when not creating
        (log 0x151f7c7500000000000001c8)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#7: bool = 1u
        goto block@22
    block@13: // get_application_route_L121
        let tmp%51#0: uint64 = (txn OnCompletion)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0) // OnCompletion is not NoOp
        let tmp%53#0: uint64 = (txn ApplicationID)
        (assert tmp%53#0) // can only call when not creating
        (log 0x151f7c7500000000000001c8)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#8: bool = 1u
        goto block@22
    block@14: // get_an_int_route_L125
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        (assert tmp%59#0) // can only call when not creating
        (log 0x151f7c750000000000000003)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#9: bool = 1u
        goto block@22
    block@15: // method_with_default_args_route_L129
        let tmp%63#0: uint64 = (txn OnCompletion)
        let tmp%64#0: bool = (! tmp%63#0)
        (assert tmp%64#0) // OnCompletion is not NoOp
        let tmp%65#0: uint64 = (txn ApplicationID)
        (assert tmp%65#0) // can only call when not creating
        let reinterpret_bytes[1]%4#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%67#0: uint64 = (btoi reinterpret_bytes[1]%4#0)
        let tmp%68#0: uint64 = ((txnas Assets) tmp%67#0)
        let reinterpret_bytes[1]%5#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%69#0: uint64 = (btoi reinterpret_bytes[1]%5#0)
        let tmp%70#0: uint64 = ((txnas Assets) tmp%69#0)
        let reinterpret_bytes[1]%6#0: bytes[1] = (txna ApplicationArgs 3)
        let tmp%71#0: uint64 = (btoi reinterpret_bytes[1]%6#0)
        let tmp%72#0: bytes[32] = ((txnas Accounts) tmp%71#0)
        let reinterpret_bytes[1]%7#0: bytes[1] = (txna ApplicationArgs 4)
        let tmp%73#0: uint64 = (btoi reinterpret_bytes[1]%7#0)
        let tmp%74#0: bytes[32] = ((txnas Accounts) tmp%73#0)
        let reinterpret_bytes[1]%8#0: bytes[1] = (txna ApplicationArgs 5)
        let tmp%75#0: uint64 = (btoi reinterpret_bytes[1]%8#0)
        let tmp%76#0: uint64 = ((txnas Applications) tmp%75#0)
        let reinterpret_bytes[1]%9#0: bytes[1] = (txna ApplicationArgs 6)
        let tmp%77#0: uint64 = (btoi reinterpret_bytes[1]%9#0)
        let tmp%78#0: uint64 = ((txnas Applications) tmp%77#0)
        let reinterpret_bytes[3]%0#0: bytes[3] = (txna ApplicationArgs 7)
        let reinterpret_bytes[8]%5#0: bytes[8] = (txna ApplicationArgs 8)
        let reinterpret_bytes[8]%6#0: bytes[8] = (txna ApplicationArgs 9)
        let reinterpret_bytes[4]%0#0: bytes[4] = (txna ApplicationArgs 10)
        let tmp%79#0: bytes = (txna ApplicationArgs 11)
        test_cases.abi_routing.contract.Reference.method_with_default_args(tmp%68#0, tmp%70#0, tmp%72#0, tmp%74#0, tmp%76#0, tmp%78#0, reinterpret_bytes[3]%0#0, reinterpret_bytes[8]%5#0, reinterpret_bytes[8]%6#0, reinterpret_bytes[4]%0#0, tmp%79#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#10: bool = 1u
        goto block@22
    block@16: // method_with_15_args_route_L172
        let tmp%80#0: uint64 = (txn OnCompletion)
        let tmp%81#0: bool = (! tmp%80#0)
        (assert tmp%81#0) // OnCompletion is not NoOp
        let tmp%82#0: uint64 = (txn ApplicationID)
        (assert tmp%82#0) // can only call when not creating
        let reinterpret_bytes[8]%7#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%84#0: uint64 = (btoi reinterpret_bytes[8]%7#0)
        let reinterpret_bytes[8]%8#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%85#0: uint64 = (btoi reinterpret_bytes[8]%8#0)
        let reinterpret_bytes[8]%9#0: bytes[8] = (txna ApplicationArgs 3)
        let tmp%86#0: uint64 = (btoi reinterpret_bytes[8]%9#0)
        let reinterpret_bytes[8]%10#0: bytes[8] = (txna ApplicationArgs 4)
        let tmp%87#0: uint64 = (btoi reinterpret_bytes[8]%10#0)
        let reinterpret_bytes[8]%11#0: bytes[8] = (txna ApplicationArgs 5)
        let tmp%88#0: uint64 = (btoi reinterpret_bytes[8]%11#0)
        let reinterpret_bytes[8]%12#0: bytes[8] = (txna ApplicationArgs 6)
        let tmp%89#0: uint64 = (btoi reinterpret_bytes[8]%12#0)
        let reinterpret_bytes[8]%13#0: bytes[8] = (txna ApplicationArgs 7)
        let tmp%90#0: uint64 = (btoi reinterpret_bytes[8]%13#0)
        let reinterpret_bytes[8]%14#0: bytes[8] = (txna ApplicationArgs 8)
        let tmp%91#0: uint64 = (btoi reinterpret_bytes[8]%14#0)
        let reinterpret_bytes[8]%15#0: bytes[8] = (txna ApplicationArgs 9)
        let tmp%92#0: uint64 = (btoi reinterpret_bytes[8]%15#0)
        let reinterpret_bytes[8]%16#0: bytes[8] = (txna ApplicationArgs 10)
        let tmp%93#0: uint64 = (btoi reinterpret_bytes[8]%16#0)
        let reinterpret_bytes[8]%17#0: bytes[8] = (txna ApplicationArgs 11)
        let tmp%94#0: uint64 = (btoi reinterpret_bytes[8]%17#0)
        let reinterpret_bytes[8]%18#0: bytes[8] = (txna ApplicationArgs 12)
        let tmp%95#0: uint64 = (btoi reinterpret_bytes[8]%18#0)
        let reinterpret_bytes[8]%19#0: bytes[8] = (txna ApplicationArgs 13)
        let tmp%96#0: uint64 = (btoi reinterpret_bytes[8]%19#0)
        let reinterpret_bytes[8]%20#0: bytes[8] = (txna ApplicationArgs 14)
        let tmp%97#0: uint64 = (btoi reinterpret_bytes[8]%20#0)
        let tmp%98#0: bytes = (txna ApplicationArgs 15)
        let tmp%99#0: bytes = ((extract 2 0) tmp%98#0)
        let to_encode%0#0: bytes = test_cases.abi_routing.contract.Reference.method_with_15_args(tmp%84#0, tmp%85#0, tmp%86#0, tmp%87#0, tmp%88#0, tmp%89#0, tmp%90#0, tmp%91#0, tmp%92#0, tmp%93#0, tmp%94#0, tmp%95#0, tmp%96#0, tmp%97#0, tmp%99#0)
        let length%0#0: uint64 = (len to_encode%0#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%0#0)
        let tmp%100#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%100#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#11: bool = 1u
        goto block@22
    block@17: // method_with_more_than_15_args_route_L210
        let tmp%101#0: uint64 = (txn OnCompletion)
        let tmp%102#0: bool = (! tmp%101#0)
        (assert tmp%102#0) // OnCompletion is not NoOp
        let tmp%103#0: uint64 = (txn ApplicationID)
        (assert tmp%103#0) // can only call when not creating
        let reinterpret_bytes[8]%21#0: bytes[8] = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%22#0: bytes[8] = (txna ApplicationArgs 2)
        let reinterpret_bytes[8]%23#0: bytes[8] = (txna ApplicationArgs 3)
        let reinterpret_bytes[8]%24#0: bytes[8] = (txna ApplicationArgs 4)
        let tmp%105#0: uint64 = (btoi reinterpret_bytes[8]%24#0)
        let reinterpret_bytes[1]%10#0: bytes[1] = (txna ApplicationArgs 5)
        let tmp%106#0: uint64 = (btoi reinterpret_bytes[1]%10#0)
        let tmp%107#0: uint64 = ((txnas Assets) tmp%106#0)
        let reinterpret_bytes[8]%25#0: bytes[8] = (txna ApplicationArgs 6)
        let reinterpret_bytes[8]%26#0: bytes[8] = (txna ApplicationArgs 7)
        let tmp%108#0: uint64 = (txn GroupIndex)
        let gtxn_idx%1#0: uint64 = (- tmp%108#0 2u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let reinterpret_bytes[8]%27#0: bytes[8] = (txna ApplicationArgs 8)
        let reinterpret_bytes[8]%28#0: bytes[8] = (txna ApplicationArgs 9)
        let reinterpret_bytes[8]%29#0: bytes[8] = (txna ApplicationArgs 10)
        let reinterpret_bytes[8]%30#0: bytes[8] = (txna ApplicationArgs 11)
        let reinterpret_bytes[8]%31#0: bytes[8] = (txna ApplicationArgs 12)
        let reinterpret_bytes[8]%32#0: bytes[8] = (txna ApplicationArgs 13)
        let reinterpret_bytes[8]%33#0: bytes[8] = (txna ApplicationArgs 14)
        let tmp%109#0: bytes = (txna ApplicationArgs 15)
        let tmp%110#0: bytes = ((extract 0 8) tmp%109#0) // on error: Index access is out of bounds
        let tmp%111#0: bytes = (txna ApplicationArgs 15)
        let tmp%112#0: bytes = ((extract 8 8) tmp%111#0) // on error: Index access is out of bounds
        let tmp%113#0: bytes = (txna ApplicationArgs 15)
        let tmp%115#0: uint64 = (extract_uint64 tmp%113#0 16u)
        let tmp%116#0: bytes = (txna ApplicationArgs 15)
        let tmp%117#0: bytes = ((extract 24 8) tmp%116#0) // on error: Index access is out of bounds
        let tmp%118#0: bytes = (txna ApplicationArgs 15)
        let tmp%119#0: bytes = ((extract 32 8) tmp%118#0) // on error: Index access is out of bounds
        let tmp%120#0: bytes = (txna ApplicationArgs 15)
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%120#0 40u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%120#0 42u)
        let tmp%121#0: bytes = (substring3 tmp%120#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%122#0: bytes = ((extract 2 0) tmp%121#0)
        let tmp%123#0: bytes = (txna ApplicationArgs 15)
        let item_start_offset%1#0: uint64 = (extract_uint16 tmp%123#0 42u)
        let item_end_offset%1#0: uint64 = (len tmp%123#0)
        let tmp%124#0: bytes = (substring3 tmp%123#0 item_start_offset%1#0 item_end_offset%1#0)
        let tmp%125#0: bytes = ((extract 2 0) tmp%124#0)
        let tmp%126#0: bytes = (txna ApplicationArgs 15)
        let tmp%128#0: uint64 = (getbyte tmp%126#0 44u)
        let tmp%129#0: uint64 = ((txnas Assets) tmp%128#0)
        let tmp%130#0: uint64 = (txn GroupIndex)
        let gtxn_idx%2#0: uint64 = (- tmp%130#0 1u)
        let gtxn_type%2#0: uint64 = ((gtxns TypeEnum) gtxn_idx%2#0)
        let gtxn_type_matches%2#0: bool = (== gtxn_type%2#0 pay)
        (assert gtxn_type_matches%2#0) // transaction type is pay
        let tmp%131#0: bytes = (txna ApplicationArgs 15)
        let tmp%132#0: bytes = ((extract 45 8) tmp%131#0) // on error: Index access is out of bounds
        let tmp%133#0: bytes = (txna ApplicationArgs 15)
        let tmp%134#0: bytes = ((extract 53 8) tmp%133#0) // on error: Index access is out of bounds
        let tmp%135#0: bytes[8] = test_cases.abi_routing.contract.Reference.method_with_more_than_15_args(reinterpret_bytes[8]%21#0, reinterpret_bytes[8]%22#0, reinterpret_bytes[8]%23#0, tmp%105#0, tmp%107#0, reinterpret_bytes[8]%25#0, reinterpret_bytes[8]%26#0, gtxn_idx%1#0, reinterpret_bytes[8]%27#0, reinterpret_bytes[8]%28#0, reinterpret_bytes[8]%29#0, reinterpret_bytes[8]%30#0, reinterpret_bytes[8]%31#0, reinterpret_bytes[8]%32#0, reinterpret_bytes[8]%33#0, tmp%110#0, tmp%112#0, tmp%115#0, tmp%117#0, tmp%119#0, tmp%122#0, tmp%125#0, tmp%129#0, gtxn_idx%2#0, tmp%132#0, tmp%134#0)
        let tmp%136#0: bytes = (concat 0x151f7c75 tmp%135#0)
        (log tmp%136#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#12: bool = 1u
        goto block@22
    block@18: // hello_with_algopy_string_route_L276
        let tmp%137#0: uint64 = (txn OnCompletion)
        let tmp%138#0: bool = (! tmp%137#0)
        (assert tmp%138#0) // OnCompletion is not NoOp
        let tmp%139#0: uint64 = (txn ApplicationID)
        (assert tmp%139#0) // can only call when not creating
        let tmp%141#0: bytes = (txna ApplicationArgs 1)
        let tmp%142#0: bytes = ((extract 2 0) tmp%141#0)
        let to_encode%1#0: bytes = test_cases.abi_routing.contract.Reference.hello_with_algopy_string(tmp%142#0)
        let length%1#0: uint64 = (len to_encode%1#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%1#0)
        let tmp%143#0: bytes = (concat 0x151f7c75 encoded_value%1#0)
        (log tmp%143#0)
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#13: bool = 1u
        goto block@22
    block@19: // bare_routing_L22
        let tmp%144#0: uint64 = (txn OnCompletion)
        goto_nth [block@20, block@20, block@20, block@21, block@20, block@20][tmp%144#0] else goto block@21
    block@20: // bare_abi_config_L66
        let tmp%145#0: uint64 = (txn ApplicationID)
        let tmp%146#0: bool = (! tmp%145#0)
        (assert tmp%146#0) // can only call when creating
        test_cases.abi_routing.contract.Reference.bare_abi_config()
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#14: bool = 1u
        goto block@22
    block@21: // after_if_else_L22
        let test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#15: bool = 0u
        goto block@22
    block@22: // after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router___L1
        let tmp%0#1: bool = φ(test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#0 <- block@5, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#1 <- block@6, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#2 <- block@7, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#3 <- block@8, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#4 <- block@9, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#5 <- block@10, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#6 <- block@11, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#7 <- block@12, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#8 <- block@13, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#9 <- block@14, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#10 <- block@15, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#11 <- block@16, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#12 <- block@17, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#13 <- block@18, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#14 <- block@20, test_cases.abi_routing.contract.Reference.__puya_arc4_router__%0#15 <- block@21)
        return tmp%0#1

subroutine test_cases.abi_routing.contract.Reference.noop_with_uint64(a: bytes[8]) -> bytes[1]:
    block@0: // L32
        let tmp%0#0: uint64 = (btoi a#0)
        let result#0: uint64 = (+ 1u tmp%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob result#0)
        let tmp%1#0: bytes = ((extract 7 1) val_as_bytes%0#0)
        return tmp%1#0

subroutine test_cases.abi_routing.contract.Reference.full_abi_config(a: bytes[8]) -> bytes[1]:
    block@0: // L37
        let tmp%0#0: uint64 = (btoi a#0)
        let result#0: uint64 = (+ 1u tmp%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob result#0)
        let tmp%1#0: bytes = ((extract 7 1) val_as_bytes%0#0)
        return tmp%1#0

subroutine test_cases.abi_routing.contract.Reference.mixed_oca(a: bytes[8]) -> bytes[1]:
    block@0: // L53
        let tmp%0#0: uint64 = (btoi a#0)
        let result#0: uint64 = (+ 1u tmp%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob result#0)
        let tmp%1#0: bytes = ((extract 7 1) val_as_bytes%0#0)
        return tmp%1#0

subroutine test_cases.abi_routing.contract.Reference.bare_abi_config() -> void:
    block@0: // L66
        (log "Hello World")
        return 

subroutine test_cases.abi_routing.contract.Reference.opt_into_asset(asset: uint64) -> void:
    block@0: // L79
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bytes[32] = (global CreatorAddress)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // Only creator can opt in to ASA
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%3#0: bool = (! maybe_value%0#0)
        (assert tmp%3#0) // ASA already opted in
        (app_global_put "asa" asset#0)
        itxn_begin
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        let tmp%4#0: bytes[32] = (global CurrentApplicationAddress)
        ((itxn_field AssetReceiver) tmp%4#0)
        ((itxn_field XferAsset) asset#0)
        itxn_submit
        return 

subroutine test_cases.abi_routing.contract.Reference.with_transactions(asset: uint64, an_int: bytes[8], pay: uint64, another_int: bytes[8]) -> void:
    block@0: // L96
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%0#0: bool = (== maybe_value%0#0 asset#0)
        (assert tmp%0#0) // is correct asset
        let tmp%1#0: uint64 = (btoi an_int#0)
        let tmp%2#0: bool = (== tmp%1#0 1u)
        (assert tmp%2#0) // is correct int
        let tmp%3#0: bytes[32] = ((gtxns Receiver) pay#0)
        let tmp%4#0: bytes[32] = (global CurrentApplicationAddress)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // is payment to app
        let tmp%6#0: uint64 = (btoi another_int#0)
        let tmp%7#0: bool = (== tmp%6#0 2u)
        (assert tmp%7#0) // is correct int
        return 

subroutine test_cases.abi_routing.contract.Reference.compare_assets(asset_a: uint64, asset_b: uint64) -> void:
    block@0: // L109
        let tmp%0#0: bool = (== asset_a#0 asset_b#0)
        (assert tmp%0#0) // asset a == b
        return 

subroutine test_cases.abi_routing.contract.Reference.get_address() -> bytes[32]:
    block@0: // L113
        let tmp%0#0: bytes[32] = (global ZeroAddress)
        return tmp%0#0

subroutine test_cases.abi_routing.contract.Reference.method_with_default_args(asset_from_storage: uint64, asset_from_function: uint64, account_from_storage: bytes[32], account_from_function: bytes[32], application_from_storage: uint64, application_from_function: uint64, bytes_from_storage: bytes[3], int_from_storage: bytes[8], int_from_function: bytes[8], int_from_const: bytes[4], str_from_const: bytes) -> void:
    block@0: // L129
        let tmp%0#0: bool = (== asset_from_storage#0 123u)
        (assert tmp%0#0) // wrong asset from storage
        let tmp%1#0: bool = (== asset_from_function#0 456u)
        (assert tmp%1#0) // wrong asset from function
        let tmp%2#0: bytes[32] = (global CreatorAddress)
        let tmp%3#0: bool = (== account_from_storage#0 tmp%2#0)
        (assert tmp%3#0) // wrong account from storage
        let tmp%4#0: bytes[32] = (global ZeroAddress)
        let tmp%5#0: bool = (== account_from_function#0 tmp%4#0)
        (assert tmp%5#0) // wrong account from function
        let tmp%6#0: bool = (== application_from_storage#0 123u)
        (assert tmp%6#0) // wrong application from storage
        let tmp%7#0: bool = (== application_from_function#0 456u)
        (assert tmp%7#0) // wrong application from function
        let reinterpret_biguint%0#0: biguint = ((extract 0 1) bytes_from_storage#0) // on error: Index access is out of bounds
        let tmp%8#0: bool = (b== reinterpret_biguint%0#0 0x07)
        (assert tmp%8#0) // wrong 0th byte from storage
        let reinterpret_biguint%2#0: biguint = ((extract 1 1) bytes_from_storage#0) // on error: Index access is out of bounds
        let tmp%9#0: bool = (b== reinterpret_biguint%2#0 0x08)
        (assert tmp%9#0) // wrong 1st byte from storage
        let reinterpret_biguint%4#0: biguint = ((extract 2 1) bytes_from_storage#0) // on error: Index access is out of bounds
        let tmp%10#0: bool = (b== reinterpret_biguint%4#0 0x09)
        (assert tmp%10#0) // wrong 2nd byte from storage
        let tmp%11#0: uint64 = (btoi int_from_storage#0)
        let tmp%12#0: bool = (== tmp%11#0 2u)
        (assert tmp%12#0) // wrong int from storage
        let tmp%13#0: uint64 = (btoi int_from_function#0)
        let tmp%14#0: bool = (== tmp%13#0 3u)
        (assert tmp%14#0) // wrong int from function
        let tmp%15#0: bool = (b== int_from_const#0 0x0000007b)
        (assert tmp%15#0)
        let tmp%16#0: bool = (== str_from_const#0 0x0003616263)
        (assert tmp%16#0)
        return 

subroutine test_cases.abi_routing.contract.Reference.method_with_15_args(one: uint64, two: uint64, three: uint64, four: uint64, five: uint64, six: uint64, seven: uint64, eight: uint64, nine: uint64, ten: uint64, eleven: uint64, twelve: uint64, thirteen: uint64, fourteen: uint64, fifteen: bytes) -> bytes:
    block@0: // L172
        let tmp%0#0: uint64 = (+ one#0 two#0)
        let tmp%1#0: uint64 = (+ tmp%0#0 three#0)
        let tmp%2#0: uint64 = (+ tmp%1#0 four#0)
        let tmp%3#0: uint64 = (+ tmp%2#0 five#0)
        let tmp%4#0: uint64 = (+ tmp%3#0 six#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 seven#0)
        let tmp%6#0: uint64 = (+ tmp%5#0 eight#0)
        let tmp%7#0: uint64 = (+ tmp%6#0 nine#0)
        let tmp%8#0: uint64 = (+ tmp%7#0 ten#0)
        let tmp%9#0: uint64 = (+ tmp%8#0 eleven#0)
        let tmp%10#0: uint64 = (+ tmp%9#0 twelve#0)
        let tmp%11#0: uint64 = (+ tmp%10#0 thirteen#0)
        let tmp%12#0: uint64 = (+ tmp%11#0 fourteen#0)
        (assert tmp%12#0)
        return fifteen#0

subroutine test_cases.abi_routing.contract.Reference.method_with_more_than_15_args(a: bytes[8], b: bytes[8], c: bytes[8], d: uint64, asset: uint64, e: bytes[8], f: bytes[8], pay: uint64, g: bytes[8], h: bytes[8], i: bytes[8], j: bytes[8], k: bytes[8], l: bytes[8], m: bytes[8], n: bytes[8], o: bytes[8], p: uint64, q: bytes[8], r: bytes[8], s: bytes, t: bytes, asset2: uint64, pay2: uint64, u: bytes[8], v: bytes[8]) -> bytes[8]:
    block@0: // L210
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (== tmp%0#0 16u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = ((gtxns Amount) pay#0)
        let tmp%3#0: bool = (== tmp%2#0 100000u)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = ((gtxns Amount) pay2#0)
        let tmp%5#0: bool = (== tmp%4#0 200000u)
        (assert tmp%5#0)
        (assert asset#0)
        (assert asset2#0)
        let tmp%8#0: bytes = (concat s#0 t#0)
        (log tmp%8#0)
        let tmp%9#0: uint64 = (btoi a#0)
        let tmp%10#0: uint64 = (btoi b#0)
        let tmp%11#0: uint64 = (+ tmp%9#0 tmp%10#0)
        let tmp%12#0: uint64 = (btoi c#0)
        let tmp%13#0: uint64 = (+ tmp%11#0 tmp%12#0)
        let tmp%14#0: uint64 = (+ tmp%13#0 d#0)
        let tmp%15#0: uint64 = (btoi e#0)
        let tmp%16#0: uint64 = (+ tmp%14#0 tmp%15#0)
        let tmp%17#0: uint64 = (btoi f#0)
        let tmp%18#0: uint64 = (+ tmp%16#0 tmp%17#0)
        let tmp%19#0: uint64 = (btoi g#0)
        let tmp%20#0: uint64 = (+ tmp%18#0 tmp%19#0)
        let tmp%21#0: uint64 = (btoi h#0)
        let tmp%22#0: uint64 = (+ tmp%20#0 tmp%21#0)
        let tmp%23#0: uint64 = (btoi i#0)
        let tmp%24#0: uint64 = (+ tmp%22#0 tmp%23#0)
        let tmp%25#0: uint64 = (btoi j#0)
        let tmp%26#0: uint64 = (+ tmp%24#0 tmp%25#0)
        let tmp%27#0: uint64 = (btoi k#0)
        let tmp%28#0: uint64 = (+ tmp%26#0 tmp%27#0)
        let tmp%29#0: uint64 = (btoi l#0)
        let tmp%30#0: uint64 = (+ tmp%28#0 tmp%29#0)
        let tmp%31#0: uint64 = (btoi m#0)
        let tmp%32#0: uint64 = (+ tmp%30#0 tmp%31#0)
        let tmp%33#0: uint64 = (btoi n#0)
        let tmp%34#0: uint64 = (+ tmp%32#0 tmp%33#0)
        let tmp%35#0: uint64 = (btoi o#0)
        let tmp%36#0: uint64 = (+ tmp%34#0 tmp%35#0)
        let tmp%37#0: uint64 = (+ tmp%36#0 p#0)
        let tmp%38#0: uint64 = (btoi q#0)
        let tmp%39#0: uint64 = (+ tmp%37#0 tmp%38#0)
        let tmp%40#0: uint64 = (btoi r#0)
        let tmp%41#0: uint64 = (+ tmp%39#0 tmp%40#0)
        let tmp%42#0: uint64 = (btoi u#0)
        let tmp%43#0: uint64 = (+ tmp%41#0 tmp%42#0)
        let tmp%44#0: uint64 = (btoi v#0)
        let to_encode%0#0: uint64 = (+ tmp%43#0 tmp%44#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        return val_as_bytes%0#0

subroutine test_cases.abi_routing.contract.Reference.hello_with_algopy_string(name: bytes) -> bytes:
    block@0: // L276
        let tmp%0#0: bytes = (concat "Hello " name#0)
        let tmp%1#0: bytes = (concat tmp%0#0 "!")
        return tmp%1#0