main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "asa" 123u)
        (app_global_put "an_int" 2u)
        let encoded_array%0#0: Encoded(uint8[3]) = bytes_encode<uint8[3]>(0x07, 0x08, 0x09)
        (app_global_put "some_bytes" encoded_array%0#0)
        let tmp%0#2: account = (txn Sender)
        (app_global_put "creator" tmp%0#2)
        (app_global_put "app" 123u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@4 : block@25
    block@4: // abi_routing_L24
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "opt_in(uint64,byte[])void" => block@5, method "all_the_things(uint64)uint8" => block@6, method "mixed_oca(uint64)uint8" => block@7, * => block@8}
    block@5: // opt_in_route_L45
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 OptIn)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be OptIn && can only call when not creating
        test_cases.abi_routing.contract.Reference.opt_in[routing]()
        goto block@8
    block@6: // all_the_things_route_L50
        test_cases.abi_routing.contract.Reference.full_abi_config[routing]()
        goto block@8
    block@7: // mixed_oca_route_L66
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: uint64 = (shl 1u tmp%8#0)
        let tmp%10#0: uint64 = (& tmp%9#0 37u)
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (&& tmp%10#0 tmp%11#0)
        (assert tmp%13#0) // OnCompletion must be one of NoOp, CloseOut, DeleteApplication && can only call when not creating
        test_cases.abi_routing.contract.Reference.mixed_oca[routing]()
        goto block@8
    block@8: // switch_case_next_L24
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // OnCompletion must be NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        (assert tmp%16#0)
        let tmp%18#0: bytes = (txna ApplicationArgs 0)
        switch tmp%18#0 {method "noop_with_uint64(uint64)uint8" => block@10, method "opt_into_asset(uint64)void" => block@11, method "with_transactions(uint64,uint64,pay,uint64)void" => block@12, method "compare_assets(uint64,uint64)void" => block@13, method "get_address()address" => block@14, method "get_asset()uint64" => block@15, method "get_application()uint64" => block@16, method "get_an_int()uint64" => block@17, method "method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void" => block@18, method "method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[]" => block@19, method "method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64" => block@20, method "hello_with_algopy_string(string)string" => block@21, * => block@24}
    block@10: // noop_with_uint64_route_L40
        test_cases.abi_routing.contract.Reference.noop_with_uint64[routing]()
        goto block@24
    block@11: // opt_into_asset_route_L92
        test_cases.abi_routing.contract.Reference.opt_into_asset[routing]()
        goto block@24
    block@12: // with_transactions_route_L109
        test_cases.abi_routing.contract.Reference.with_transactions[routing]()
        goto block@24
    block@13: // compare_assets_route_L122
        test_cases.abi_routing.contract.Reference.compare_assets[routing]()
        goto block@24
    block@14: // get_address_route_L126
        (log CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
        exit 1u
    block@15: // get_asset_route_L130
        (log 0x151f7c7500000000000001c8)
        exit 1u
    block@16: // get_application_route_L134
        (log 0x151f7c7500000000000001c8)
        exit 1u
    block@17: // get_an_int_route_L138
        (log 0x151f7c750000000000000003)
        exit 1u
    block@18: // method_with_default_args_route_L142
        test_cases.abi_routing.contract.Reference.method_with_default_args[routing]()
        goto block@24
    block@19: // method_with_15_args_route_L191
        test_cases.abi_routing.contract.Reference.method_with_15_args[routing]()
        goto block@24
    block@20: // method_with_more_than_15_args_route_L229
        test_cases.abi_routing.contract.Reference.method_with_more_than_15_args[routing]()
        goto block@24
    block@21: // hello_with_algopy_string_route_L295
        test_cases.abi_routing.contract.Reference.hello_with_algopy_string[routing]()
        goto block@24
    block@24: // after_if_else_L24
        fail
    block@25: // bare_abi_config_L79
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // can only call when creating
        (log "Hello World")
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.noop_with_uint64[routing]() -> void:
    block@0: // L40
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len a#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let tmp%0#1: uint64 = decode_bytes<uint64>(a#0)
        let result#0: uint64 = (+ 1u tmp%0#1)
        let tmp%2#1: Encoded(uint8) = bytes_encode<uint8>(result#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%2#1)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.opt_in[routing]() -> void:
    block@0: // L45
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let uint#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let length%0#0: uint64 = array_len(tmp%2#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%0#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let bites#0: bytes = decode_bytes<bytes>(tmp%2#0)
        let tmp%0#1: account = (txn Sender)
        (app_local_put tmp%0#1 "local_uint" uint#0)
        let tmp%1#1: account = (txn Sender)
        (app_local_put tmp%1#1 "local_bytes" bites#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.full_abi_config[routing]() -> void:
    block@0: // L50
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len a#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let tmp%0#1: uint64 = decode_bytes<uint64>(a#0)
        let result#0: uint64 = (+ 1u tmp%0#1)
        let tmp%2#1: Encoded(uint8) = bytes_encode<uint8>(result#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%2#1)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.mixed_oca[routing]() -> void:
    block@0: // L66
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len a#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let tmp%0#1: uint64 = decode_bytes<uint64>(a#0)
        let result#0: uint64 = (+ 1u tmp%0#1)
        let tmp%2#1: Encoded(uint8) = bytes_encode<uint8>(result#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%2#1)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.opt_into_asset[routing]() -> void:
    block@0: // L92
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let asset#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%0#1: account = (txn Sender)
        let tmp%1#1: account = (global CreatorAddress)
        let tmp%2#0: bool = (== tmp%0#1 tmp%1#1)
        (assert tmp%2#0) // Only creator can opt in to ASA
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%3#0: bool = (! maybe_value%0#0)
        (assert tmp%3#0) // ASA already opted in
        (app_global_put "asa" asset#0)
        itxn_begin
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        let tmp%4#0: account = (global CurrentApplicationAddress)
        ((itxn_field AssetReceiver) tmp%4#0)
        ((itxn_field XferAsset) asset#0)
        itxn_submit
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.with_transactions[routing]() -> void:
    block@0: // L109
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let asset#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let an_int#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len an_int#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let tmp%3#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%3#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let another_int#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len another_int#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%0#1: bool = (== maybe_value%0#0 asset#0)
        (assert tmp%0#1) // is correct asset
        let tmp%1#1: uint64 = decode_bytes<uint64>(an_int#0)
        let tmp%2#1: bool = (== tmp%1#1 1u)
        (assert tmp%2#1) // is correct int
        let tmp%3#1: account = ((gtxns Receiver) pay#0)
        let tmp%4#1: account = (global CurrentApplicationAddress)
        let tmp%5#0: bool = (== tmp%3#1 tmp%4#1)
        (assert tmp%5#0) // is payment to app
        let tmp%6#0: uint64 = decode_bytes<uint64>(another_int#0)
        let tmp%7#0: bool = (== tmp%6#0 2u)
        (assert tmp%7#0) // is correct int
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.compare_assets[routing]() -> void:
    block@0: // L122
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let asset_a#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let asset_b#0: uint64 = decode_bytes<uint64>(tmp%2#0)
        let tmp%0#1: bool = (== asset_a#0 asset_b#0)
        (assert tmp%0#1) // asset a == b
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.method_with_default_args[routing]() -> void:
    block@0: // L142
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let asset_from_storage#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let asset_from_function#0: uint64 = decode_bytes<uint64>(tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 32u)
        (assert eq%2#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let account_from_storage#0: account = decode_bytes<account>(tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 4)
        let len%3#0: uint64 = (len tmp%6#0)
        let eq%3#0: bool = (== len%3#0 32u)
        (assert eq%3#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let account_from_function#0: account = decode_bytes<account>(tmp%6#0)
        let tmp%8#0: bytes = (txna ApplicationArgs 5)
        let len%4#0: uint64 = (len tmp%8#0)
        let eq%4#0: bool = (== len%4#0 8u)
        (assert eq%4#0) // invalid number of bytes for arc4.uint64
        let application_from_storage#0: uint64 = decode_bytes<uint64>(tmp%8#0)
        let tmp%10#0: bytes = (txna ApplicationArgs 6)
        let len%5#0: uint64 = (len tmp%10#0)
        let eq%5#0: bool = (== len%5#0 8u)
        (assert eq%5#0) // invalid number of bytes for arc4.uint64
        let application_from_function#0: uint64 = decode_bytes<uint64>(tmp%10#0)
        let bytes_from_storage#0: Encoded(uint8[3]) = (txna ApplicationArgs 7)
        let len%6#0: uint64 = (len bytes_from_storage#0)
        let eq%6#0: bool = (== len%6#0 3u)
        (assert eq%6#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 3>
        let int_from_storage#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let len%7#0: uint64 = (len int_from_storage#0)
        let eq%7#0: bool = (== len%7#0 8u)
        (assert eq%7#0) // invalid number of bytes for arc4.uint64
        let int_from_function#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let len%8#0: uint64 = (len int_from_function#0)
        let eq%8#0: bool = (== len%8#0 8u)
        (assert eq%8#0) // invalid number of bytes for arc4.uint64
        let int_from_const#0: Encoded(uint32) = (txna ApplicationArgs 10)
        let len%9#0: uint64 = (len int_from_const#0)
        let eq%9#0: bool = (== len%9#0 4u)
        (assert eq%9#0) // invalid number of bytes for arc4.uint32
        let str_from_const#0: Encoded(len+utf8[]) = (txna ApplicationArgs 11)
        let length%0#0: uint64 = array_len(str_from_const#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%10#0: uint64 = (len str_from_const#0)
        let eq%10#0: bool = (== len%10#0 add%0#0)
        (assert eq%10#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%17#0: bytes = (txna ApplicationArgs 12)
        let len%11#0: uint64 = (len tmp%17#0)
        let eq%11#0: bool = (== len%11#0 8u)
        (assert eq%11#0) // invalid number of bytes for arc4.uint64
        let int_from_local#0: uint64 = decode_bytes<uint64>(tmp%17#0)
        let tmp%19#0: bytes = (txna ApplicationArgs 13)
        let length%1#0: uint64 = array_len(tmp%19#0)
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%12#0: uint64 = (len tmp%19#0)
        let eq%12#0: bool = (== len%12#0 add%1#0)
        (assert eq%12#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let bytes_from_local#0: bytes = decode_bytes<bytes>(tmp%19#0)
        let tmp%0#1: bool = (== asset_from_storage#0 123u)
        (assert tmp%0#1) // wrong asset from storage
        let tmp%1#1: bool = (== asset_from_function#0 456u)
        (assert tmp%1#1) // wrong asset from function
        let tmp%2#1: account = (global CreatorAddress)
        let tmp%3#1: bool = (== account_from_storage#0 tmp%2#1)
        (assert tmp%3#1) // wrong account from storage
        let tmp%4#1: account = (global ZeroAddress)
        let tmp%5#1: bool = (== account_from_function#0 tmp%4#1)
        (assert tmp%5#1) // wrong account from function
        let tmp%6#1: bool = (== application_from_storage#0 123u)
        (assert tmp%6#1) // wrong application from storage
        let tmp%7#1: bool = (== application_from_function#0 456u)
        (assert tmp%7#1) // wrong application from function
        let array_item%0#0: Encoded(uint8) = extract_value(bytes_from_storage#0, 0u)
        let tmp%8#1: bool = (b== array_item%0#0 0x07)
        (assert tmp%8#1) // wrong 0th byte from storage
        let array_item%1#0: Encoded(uint8) = extract_value(bytes_from_storage#0, 1u)
        let tmp%9#1: bool = (b== array_item%1#0 0x08)
        (assert tmp%9#1) // wrong 1st byte from storage
        let array_item%2#0: Encoded(uint8) = extract_value(bytes_from_storage#0, 2u)
        let tmp%10#1: bool = (b== array_item%2#0 0x09)
        (assert tmp%10#1) // wrong 2nd byte from storage
        let tmp%11#1: uint64 = decode_bytes<uint64>(int_from_storage#0)
        let tmp%12#1: bool = (== tmp%11#1 2u)
        (assert tmp%12#1) // wrong int from storage
        let tmp%13#1: uint64 = decode_bytes<uint64>(int_from_function#0)
        let tmp%14#1: bool = (== tmp%13#1 3u)
        (assert tmp%14#1) // wrong int from function
        let tmp%15#1: bool = (b== int_from_const#0 0x0000007b)
        (assert tmp%15#1)
        let tmp%16#1: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("abc")
        let tmp%17#1: bool = (== str_from_const#0 tmp%16#1)
        (assert tmp%17#1)
        let tmp%18#1: account = (txn Sender)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%18#1 0u "local_uint")
        (assert maybe_exists%0#0) // check self.local_uint exists for account
        let tmp%19#1: bool = (== int_from_local#0 maybe_value%0#0)
        (assert tmp%19#1)
        let tmp%20#1: account = (txn Sender)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex tmp%20#1 0u "local_bytes")
        (assert maybe_exists%1#0) // check self.local_bytes exists for account
        let tmp%21#0: bool = (== bytes_from_local#0 maybe_value%1#0)
        (assert tmp%21#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.method_with_15_args[routing]() -> void:
    block@0: // L191
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let one#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let two#0: uint64 = decode_bytes<uint64>(tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let three#0: uint64 = decode_bytes<uint64>(tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 4)
        let len%3#0: uint64 = (len tmp%6#0)
        let eq%3#0: bool = (== len%3#0 8u)
        (assert eq%3#0) // invalid number of bytes for arc4.uint64
        let four#0: uint64 = decode_bytes<uint64>(tmp%6#0)
        let tmp%8#0: bytes = (txna ApplicationArgs 5)
        let len%4#0: uint64 = (len tmp%8#0)
        let eq%4#0: bool = (== len%4#0 8u)
        (assert eq%4#0) // invalid number of bytes for arc4.uint64
        let five#0: uint64 = decode_bytes<uint64>(tmp%8#0)
        let tmp%10#0: bytes = (txna ApplicationArgs 6)
        let len%5#0: uint64 = (len tmp%10#0)
        let eq%5#0: bool = (== len%5#0 8u)
        (assert eq%5#0) // invalid number of bytes for arc4.uint64
        let six#0: uint64 = decode_bytes<uint64>(tmp%10#0)
        let tmp%12#0: bytes = (txna ApplicationArgs 7)
        let len%6#0: uint64 = (len tmp%12#0)
        let eq%6#0: bool = (== len%6#0 8u)
        (assert eq%6#0) // invalid number of bytes for arc4.uint64
        let seven#0: uint64 = decode_bytes<uint64>(tmp%12#0)
        let tmp%14#0: bytes = (txna ApplicationArgs 8)
        let len%7#0: uint64 = (len tmp%14#0)
        let eq%7#0: bool = (== len%7#0 8u)
        (assert eq%7#0) // invalid number of bytes for arc4.uint64
        let eight#0: uint64 = decode_bytes<uint64>(tmp%14#0)
        let tmp%16#0: bytes = (txna ApplicationArgs 9)
        let len%8#0: uint64 = (len tmp%16#0)
        let eq%8#0: bool = (== len%8#0 8u)
        (assert eq%8#0) // invalid number of bytes for arc4.uint64
        let nine#0: uint64 = decode_bytes<uint64>(tmp%16#0)
        let tmp%18#0: bytes = (txna ApplicationArgs 10)
        let len%9#0: uint64 = (len tmp%18#0)
        let eq%9#0: bool = (== len%9#0 8u)
        (assert eq%9#0) // invalid number of bytes for arc4.uint64
        let ten#0: uint64 = decode_bytes<uint64>(tmp%18#0)
        let tmp%20#0: bytes = (txna ApplicationArgs 11)
        let len%10#0: uint64 = (len tmp%20#0)
        let eq%10#0: bool = (== len%10#0 8u)
        (assert eq%10#0) // invalid number of bytes for arc4.uint64
        let eleven#0: uint64 = decode_bytes<uint64>(tmp%20#0)
        let tmp%22#0: bytes = (txna ApplicationArgs 12)
        let len%11#0: uint64 = (len tmp%22#0)
        let eq%11#0: bool = (== len%11#0 8u)
        (assert eq%11#0) // invalid number of bytes for arc4.uint64
        let twelve#0: uint64 = decode_bytes<uint64>(tmp%22#0)
        let tmp%24#0: bytes = (txna ApplicationArgs 13)
        let len%12#0: uint64 = (len tmp%24#0)
        let eq%12#0: bool = (== len%12#0 8u)
        (assert eq%12#0) // invalid number of bytes for arc4.uint64
        let thirteen#0: uint64 = decode_bytes<uint64>(tmp%24#0)
        let tmp%26#0: bytes = (txna ApplicationArgs 14)
        let len%13#0: uint64 = (len tmp%26#0)
        let eq%13#0: bool = (== len%13#0 8u)
        (assert eq%13#0) // invalid number of bytes for arc4.uint64
        let fourteen#0: uint64 = decode_bytes<uint64>(tmp%26#0)
        let tmp%28#0: bytes = (txna ApplicationArgs 15)
        let length%0#0: uint64 = array_len(tmp%28#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%14#0: uint64 = (len tmp%28#0)
        let eq%14#0: bool = (== len%14#0 add%0#0)
        (assert eq%14#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let tmp%0#1: uint64 = (+ one#0 two#0)
        let tmp%1#1: uint64 = (+ tmp%0#1 three#0)
        let tmp%2#1: uint64 = (+ tmp%1#1 four#0)
        let tmp%3#1: uint64 = (+ tmp%2#1 five#0)
        let tmp%4#1: uint64 = (+ tmp%3#1 six#0)
        let tmp%5#1: uint64 = (+ tmp%4#1 seven#0)
        let tmp%6#1: uint64 = (+ tmp%5#1 eight#0)
        let tmp%7#1: uint64 = (+ tmp%6#1 nine#0)
        let tmp%8#1: uint64 = (+ tmp%7#1 ten#0)
        let tmp%9#1: uint64 = (+ tmp%8#1 eleven#0)
        let tmp%10#1: uint64 = (+ tmp%9#1 twelve#0)
        let tmp%11#1: uint64 = (+ tmp%10#1 thirteen#0)
        let tmp%12#1: uint64 = (+ tmp%11#1 fourteen#0)
        (assert tmp%12#1)
        let tmp%32#0: bytes = (concat 0x151f7c75 tmp%28#0)
        (log tmp%32#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.method_with_more_than_15_args[routing]() -> void:
    block@0: // L229
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len a#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let b#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len b#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let c#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len c#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let tmp%3#0: bytes = (txna ApplicationArgs 4)
        let len%3#0: uint64 = (len tmp%3#0)
        let eq%3#0: bool = (== len%3#0 8u)
        (assert eq%3#0) // invalid number of bytes for arc4.uint64
        let d#0: uint64 = decode_bytes<uint64>(tmp%3#0)
        let tmp%5#0: bytes = (txna ApplicationArgs 5)
        let len%4#0: uint64 = (len tmp%5#0)
        let eq%4#0: bool = (== len%4#0 8u)
        (assert eq%4#0) // invalid number of bytes for arc4.uint64
        let asset#0: uint64 = decode_bytes<uint64>(tmp%5#0)
        let e#0: Encoded(uint64) = (txna ApplicationArgs 6)
        let len%5#0: uint64 = (len e#0)
        let eq%5#0: bool = (== len%5#0 8u)
        (assert eq%5#0) // invalid number of bytes for arc4.uint64
        let f#0: Encoded(uint64) = (txna ApplicationArgs 7)
        let len%6#0: uint64 = (len f#0)
        let eq%6#0: bool = (== len%6#0 8u)
        (assert eq%6#0) // invalid number of bytes for arc4.uint64
        let tmp%9#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%9#0 2u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let g#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let len%7#0: uint64 = (len g#0)
        let eq%7#0: bool = (== len%7#0 8u)
        (assert eq%7#0) // invalid number of bytes for arc4.uint64
        let h#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let len%8#0: uint64 = (len h#0)
        let eq%8#0: bool = (== len%8#0 8u)
        (assert eq%8#0) // invalid number of bytes for arc4.uint64
        let i#0: Encoded(uint64) = (txna ApplicationArgs 10)
        let len%9#0: uint64 = (len i#0)
        let eq%9#0: bool = (== len%9#0 8u)
        (assert eq%9#0) // invalid number of bytes for arc4.uint64
        let j#0: Encoded(uint64) = (txna ApplicationArgs 11)
        let len%10#0: uint64 = (len j#0)
        let eq%10#0: bool = (== len%10#0 8u)
        (assert eq%10#0) // invalid number of bytes for arc4.uint64
        let k#0: Encoded(uint64) = (txna ApplicationArgs 12)
        let len%11#0: uint64 = (len k#0)
        let eq%11#0: bool = (== len%11#0 8u)
        (assert eq%11#0) // invalid number of bytes for arc4.uint64
        let l#0: Encoded(uint64) = (txna ApplicationArgs 13)
        let len%12#0: uint64 = (len l#0)
        let eq%12#0: bool = (== len%12#0 8u)
        (assert eq%12#0) // invalid number of bytes for arc4.uint64
        let m#0: Encoded(uint64) = (txna ApplicationArgs 14)
        let len%13#0: uint64 = (len m#0)
        let eq%13#0: bool = (== len%13#0 8u)
        (assert eq%13#0) // invalid number of bytes for arc4.uint64
        let tmp%17#0: bytes = (txna ApplicationArgs 15)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%17#0 40u) // on error: invalid tuple encoding
        let eq%14#0: bool = (== extract_uint16%0#0 68u)
        (assert eq%14#0) // invalid tail pointer at index 5 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%18#0: Encoded(len+uint8[]) = extract_value(tmp%17#0, 5)
        let length%0#0: uint64 = array_len(tmp%18#0)
        let add%1#0: uint64 = (+ length%0#0 70u)
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%17#0 42u) // on error: invalid tuple encoding
        let eq%15#0: bool = (== extract_uint16%1#0 add%1#0)
        (assert eq%15#0) // invalid tail pointer at index 6 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%19#0: Encoded(len+uint8[]) = extract_value(tmp%17#0, 6)
        let length%1#0: uint64 = array_len(tmp%19#0)
        let add%2#0: uint64 = (+ length%1#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let len%14#0: uint64 = (len tmp%17#0)
        let eq%16#0: bool = (== len%14#0 add%3#0)
        (assert eq%16#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint64,arc4.uint64>
        let n#0: Encoded(uint64) = extract_value(tmp%17#0, 0)
        let tmp%20#0: bytes = (txna ApplicationArgs 15)
        let extract_uint16%2#0: uint64 = (extract_uint16 tmp%20#0 40u) // on error: invalid tuple encoding
        let eq%17#0: bool = (== extract_uint16%2#0 68u)
        (assert eq%17#0) // invalid tail pointer at index 5 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%21#0: Encoded(len+uint8[]) = extract_value(tmp%20#0, 5)
        let length%2#0: uint64 = array_len(tmp%21#0)
        let add%5#0: uint64 = (+ length%2#0 70u)
        let extract_uint16%3#0: uint64 = (extract_uint16 tmp%20#0 42u) // on error: invalid tuple encoding
        let eq%18#0: bool = (== extract_uint16%3#0 add%5#0)
        (assert eq%18#0) // invalid tail pointer at index 6 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%22#0: Encoded(len+uint8[]) = extract_value(tmp%20#0, 6)
        let length%3#0: uint64 = array_len(tmp%22#0)
        let add%6#0: uint64 = (+ length%3#0 2u)
        let add%7#0: uint64 = (+ add%5#0 add%6#0)
        let len%15#0: uint64 = (len tmp%20#0)
        let eq%19#0: bool = (== len%15#0 add%7#0)
        (assert eq%19#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint64,arc4.uint64>
        let o#0: Encoded(uint64) = extract_value(tmp%20#0, 1)
        let tmp%23#0: bytes = (txna ApplicationArgs 15)
        let extract_uint16%4#0: uint64 = (extract_uint16 tmp%23#0 40u) // on error: invalid tuple encoding
        let eq%20#0: bool = (== extract_uint16%4#0 68u)
        (assert eq%20#0) // invalid tail pointer at index 5 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%24#0: Encoded(len+uint8[]) = extract_value(tmp%23#0, 5)
        let length%4#0: uint64 = array_len(tmp%24#0)
        let add%9#0: uint64 = (+ length%4#0 70u)
        let extract_uint16%5#0: uint64 = (extract_uint16 tmp%23#0 42u) // on error: invalid tuple encoding
        let eq%21#0: bool = (== extract_uint16%5#0 add%9#0)
        (assert eq%21#0) // invalid tail pointer at index 6 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%25#0: Encoded(len+uint8[]) = extract_value(tmp%23#0, 6)
        let length%5#0: uint64 = array_len(tmp%25#0)
        let add%10#0: uint64 = (+ length%5#0 2u)
        let add%11#0: uint64 = (+ add%9#0 add%10#0)
        let len%16#0: uint64 = (len tmp%23#0)
        let eq%22#0: bool = (== len%16#0 add%11#0)
        (assert eq%22#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint64,arc4.uint64>
        let tuple_item%2#0: Encoded(uint64) = extract_value(tmp%23#0, 2)
        let p#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let tmp%27#0: bytes = (txna ApplicationArgs 15)
        let extract_uint16%6#0: uint64 = (extract_uint16 tmp%27#0 40u) // on error: invalid tuple encoding
        let eq%23#0: bool = (== extract_uint16%6#0 68u)
        (assert eq%23#0) // invalid tail pointer at index 5 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%28#0: Encoded(len+uint8[]) = extract_value(tmp%27#0, 5)
        let length%6#0: uint64 = array_len(tmp%28#0)
        let add%13#0: uint64 = (+ length%6#0 70u)
        let extract_uint16%7#0: uint64 = (extract_uint16 tmp%27#0 42u) // on error: invalid tuple encoding
        let eq%24#0: bool = (== extract_uint16%7#0 add%13#0)
        (assert eq%24#0) // invalid tail pointer at index 6 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%29#0: Encoded(len+uint8[]) = extract_value(tmp%27#0, 6)
        let length%7#0: uint64 = array_len(tmp%29#0)
        let add%14#0: uint64 = (+ length%7#0 2u)
        let add%15#0: uint64 = (+ add%13#0 add%14#0)
        let len%17#0: uint64 = (len tmp%27#0)
        let eq%25#0: bool = (== len%17#0 add%15#0)
        (assert eq%25#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint64,arc4.uint64>
        let q#0: Encoded(uint64) = extract_value(tmp%27#0, 3)
        let tmp%30#0: bytes = (txna ApplicationArgs 15)
        let extract_uint16%8#0: uint64 = (extract_uint16 tmp%30#0 40u) // on error: invalid tuple encoding
        let eq%26#0: bool = (== extract_uint16%8#0 68u)
        (assert eq%26#0) // invalid tail pointer at index 5 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%31#0: Encoded(len+uint8[]) = extract_value(tmp%30#0, 5)
        let length%8#0: uint64 = array_len(tmp%31#0)
        let add%17#0: uint64 = (+ length%8#0 70u)
        let extract_uint16%9#0: uint64 = (extract_uint16 tmp%30#0 42u) // on error: invalid tuple encoding
        let eq%27#0: bool = (== extract_uint16%9#0 add%17#0)
        (assert eq%27#0) // invalid tail pointer at index 6 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%32#0: Encoded(len+uint8[]) = extract_value(tmp%30#0, 6)
        let length%9#0: uint64 = array_len(tmp%32#0)
        let add%18#0: uint64 = (+ length%9#0 2u)
        let add%19#0: uint64 = (+ add%17#0 add%18#0)
        let len%18#0: uint64 = (len tmp%30#0)
        let eq%28#0: bool = (== len%18#0 add%19#0)
        (assert eq%28#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint64,arc4.uint64>
        let r#0: Encoded(uint64) = extract_value(tmp%30#0, 4)
        let tmp%33#0: bytes = (txna ApplicationArgs 15)
        let extract_uint16%10#0: uint64 = (extract_uint16 tmp%33#0 40u) // on error: invalid tuple encoding
        let eq%29#0: bool = (== extract_uint16%10#0 68u)
        (assert eq%29#0) // invalid tail pointer at index 5 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%34#0: Encoded(len+uint8[]) = extract_value(tmp%33#0, 5)
        let length%10#0: uint64 = array_len(tmp%34#0)
        let add%21#0: uint64 = (+ length%10#0 70u)
        let extract_uint16%11#0: uint64 = (extract_uint16 tmp%33#0 42u) // on error: invalid tuple encoding
        let eq%30#0: bool = (== extract_uint16%11#0 add%21#0)
        (assert eq%30#0) // invalid tail pointer at index 6 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%35#0: Encoded(len+uint8[]) = extract_value(tmp%33#0, 6)
        let length%11#0: uint64 = array_len(tmp%35#0)
        let add%22#0: uint64 = (+ length%11#0 2u)
        let add%23#0: uint64 = (+ add%21#0 add%22#0)
        let len%19#0: uint64 = (len tmp%33#0)
        let eq%31#0: bool = (== len%19#0 add%23#0)
        (assert eq%31#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint64,arc4.uint64>
        let tuple_item%5#0: Encoded(len+uint8[]) = extract_value(tmp%33#0, 5)
        let s#0: bytes = decode_bytes<bytes>(tuple_item%5#0)
        let tmp%37#0: bytes = (txna ApplicationArgs 15)
        let extract_uint16%12#0: uint64 = (extract_uint16 tmp%37#0 40u) // on error: invalid tuple encoding
        let eq%32#0: bool = (== extract_uint16%12#0 68u)
        (assert eq%32#0) // invalid tail pointer at index 5 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%38#0: Encoded(len+uint8[]) = extract_value(tmp%37#0, 5)
        let length%12#0: uint64 = array_len(tmp%38#0)
        let add%25#0: uint64 = (+ length%12#0 70u)
        let extract_uint16%13#0: uint64 = (extract_uint16 tmp%37#0 42u) // on error: invalid tuple encoding
        let eq%33#0: bool = (== extract_uint16%13#0 add%25#0)
        (assert eq%33#0) // invalid tail pointer at index 6 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%39#0: Encoded(len+uint8[]) = extract_value(tmp%37#0, 6)
        let length%13#0: uint64 = array_len(tmp%39#0)
        let add%26#0: uint64 = (+ length%13#0 2u)
        let add%27#0: uint64 = (+ add%25#0 add%26#0)
        let len%20#0: uint64 = (len tmp%37#0)
        let eq%34#0: bool = (== len%20#0 add%27#0)
        (assert eq%34#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint64,arc4.uint64>
        let tuple_item%6#0: Encoded(len+uint8[]) = extract_value(tmp%37#0, 6)
        let t#0: bytes = decode_bytes<bytes>(tuple_item%6#0)
        let tmp%41#0: bytes = (txna ApplicationArgs 15)
        let extract_uint16%14#0: uint64 = (extract_uint16 tmp%41#0 40u) // on error: invalid tuple encoding
        let eq%35#0: bool = (== extract_uint16%14#0 68u)
        (assert eq%35#0) // invalid tail pointer at index 5 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%42#0: Encoded(len+uint8[]) = extract_value(tmp%41#0, 5)
        let length%14#0: uint64 = array_len(tmp%42#0)
        let add%29#0: uint64 = (+ length%14#0 70u)
        let extract_uint16%15#0: uint64 = (extract_uint16 tmp%41#0 42u) // on error: invalid tuple encoding
        let eq%36#0: bool = (== extract_uint16%15#0 add%29#0)
        (assert eq%36#0) // invalid tail pointer at index 6 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%43#0: Encoded(len+uint8[]) = extract_value(tmp%41#0, 6)
        let length%15#0: uint64 = array_len(tmp%43#0)
        let add%30#0: uint64 = (+ length%15#0 2u)
        let add%31#0: uint64 = (+ add%29#0 add%30#0)
        let len%21#0: uint64 = (len tmp%41#0)
        let eq%37#0: bool = (== len%21#0 add%31#0)
        (assert eq%37#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint64,arc4.uint64>
        let tuple_item%7#0: Encoded(uint64) = extract_value(tmp%41#0, 7)
        let asset2#0: uint64 = decode_bytes<uint64>(tuple_item%7#0)
        let tmp%45#0: uint64 = (txn GroupIndex)
        let pay2#0: uint64 = (- tmp%45#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) pay2#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let tmp%46#0: bytes = (txna ApplicationArgs 15)
        let extract_uint16%16#0: uint64 = (extract_uint16 tmp%46#0 40u) // on error: invalid tuple encoding
        let eq%38#0: bool = (== extract_uint16%16#0 68u)
        (assert eq%38#0) // invalid tail pointer at index 5 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%47#0: Encoded(len+uint8[]) = extract_value(tmp%46#0, 5)
        let length%16#0: uint64 = array_len(tmp%47#0)
        let add%33#0: uint64 = (+ length%16#0 70u)
        let extract_uint16%17#0: uint64 = (extract_uint16 tmp%46#0 42u) // on error: invalid tuple encoding
        let eq%39#0: bool = (== extract_uint16%17#0 add%33#0)
        (assert eq%39#0) // invalid tail pointer at index 6 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%48#0: Encoded(len+uint8[]) = extract_value(tmp%46#0, 6)
        let length%17#0: uint64 = array_len(tmp%48#0)
        let add%34#0: uint64 = (+ length%17#0 2u)
        let add%35#0: uint64 = (+ add%33#0 add%34#0)
        let len%22#0: uint64 = (len tmp%46#0)
        let eq%40#0: bool = (== len%22#0 add%35#0)
        (assert eq%40#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint64,arc4.uint64>
        let u#0: Encoded(uint64) = extract_value(tmp%46#0, 8)
        let tmp%49#0: bytes = (txna ApplicationArgs 15)
        let extract_uint16%18#0: uint64 = (extract_uint16 tmp%49#0 40u) // on error: invalid tuple encoding
        let eq%41#0: bool = (== extract_uint16%18#0 68u)
        (assert eq%41#0) // invalid tail pointer at index 5 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%50#0: Encoded(len+uint8[]) = extract_value(tmp%49#0, 5)
        let length%18#0: uint64 = array_len(tmp%50#0)
        let add%37#0: uint64 = (+ length%18#0 70u)
        let extract_uint16%19#0: uint64 = (extract_uint16 tmp%49#0 42u) // on error: invalid tuple encoding
        let eq%42#0: bool = (== extract_uint16%19#0 add%37#0)
        (assert eq%42#0) // invalid tail pointer at index 6 of (uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)
        let tmp%51#0: Encoded(len+uint8[]) = extract_value(tmp%49#0, 6)
        let length%19#0: uint64 = array_len(tmp%51#0)
        let add%38#0: uint64 = (+ length%19#0 2u)
        let add%39#0: uint64 = (+ add%37#0 add%38#0)
        let len%23#0: uint64 = (len tmp%49#0)
        let eq%43#0: bool = (== len%23#0 add%39#0)
        (assert eq%43#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint64,arc4.uint64>
        let v#0: Encoded(uint64) = extract_value(tmp%49#0, 9)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (== tmp%0#1 16u)
        (assert tmp%1#1)
        let tmp%2#1: uint64 = ((gtxns Amount) pay#0)
        let tmp%3#1: bool = (== tmp%2#1 100000u)
        (assert tmp%3#1)
        let tmp%4#1: uint64 = ((gtxns Amount) pay2#0)
        let tmp%5#1: bool = (== tmp%4#1 200000u)
        (assert tmp%5#1)
        (assert asset#0)
        (assert asset2#0)
        let tmp%8#1: bytes = (concat s#0 t#0)
        (log tmp%8#1)
        let tmp%9#1: uint64 = decode_bytes<uint64>(a#0)
        let tmp%10#1: uint64 = decode_bytes<uint64>(b#0)
        let tmp%11#1: uint64 = (+ tmp%9#1 tmp%10#1)
        let tmp%12#1: uint64 = decode_bytes<uint64>(c#0)
        let tmp%13#1: uint64 = (+ tmp%11#1 tmp%12#1)
        let tmp%14#1: uint64 = (+ tmp%13#1 d#0)
        let tmp%15#1: uint64 = decode_bytes<uint64>(e#0)
        let tmp%16#1: uint64 = (+ tmp%14#1 tmp%15#1)
        let tmp%17#1: uint64 = decode_bytes<uint64>(f#0)
        let tmp%18#1: uint64 = (+ tmp%16#1 tmp%17#1)
        let tmp%19#1: uint64 = decode_bytes<uint64>(g#0)
        let tmp%20#1: uint64 = (+ tmp%18#1 tmp%19#1)
        let tmp%21#1: uint64 = decode_bytes<uint64>(h#0)
        let tmp%22#1: uint64 = (+ tmp%20#1 tmp%21#1)
        let tmp%23#1: uint64 = decode_bytes<uint64>(i#0)
        let tmp%24#1: uint64 = (+ tmp%22#1 tmp%23#1)
        let tmp%25#1: uint64 = decode_bytes<uint64>(j#0)
        let tmp%26#1: uint64 = (+ tmp%24#1 tmp%25#1)
        let tmp%27#1: uint64 = decode_bytes<uint64>(k#0)
        let tmp%28#1: uint64 = (+ tmp%26#1 tmp%27#1)
        let tmp%29#1: uint64 = decode_bytes<uint64>(l#0)
        let tmp%30#1: uint64 = (+ tmp%28#1 tmp%29#1)
        let tmp%31#1: uint64 = decode_bytes<uint64>(m#0)
        let tmp%32#1: uint64 = (+ tmp%30#1 tmp%31#1)
        let tmp%33#1: uint64 = decode_bytes<uint64>(n#0)
        let tmp%34#1: uint64 = (+ tmp%32#1 tmp%33#1)
        let tmp%35#1: uint64 = decode_bytes<uint64>(o#0)
        let tmp%36#1: uint64 = (+ tmp%34#1 tmp%35#1)
        let tmp%37#1: uint64 = (+ tmp%36#1 p#0)
        let tmp%38#1: uint64 = decode_bytes<uint64>(q#0)
        let tmp%39#1: uint64 = (+ tmp%37#1 tmp%38#1)
        let tmp%40#1: uint64 = decode_bytes<uint64>(r#0)
        let tmp%41#1: uint64 = (+ tmp%39#1 tmp%40#1)
        let tmp%42#1: uint64 = decode_bytes<uint64>(u#0)
        let tmp%43#1: uint64 = (+ tmp%41#1 tmp%42#1)
        let tmp%44#1: uint64 = decode_bytes<uint64>(v#0)
        let tmp%45#1: uint64 = (+ tmp%43#1 tmp%44#1)
        let tmp%46#1: Encoded(uint64) = bytes_encode<uint64>(tmp%45#1)
        let tmp%53#0: bytes = (concat 0x151f7c75 tmp%46#1)
        (log tmp%53#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.hello_with_algopy_string[routing]() -> void:
    block@0: // L295
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let name#0: string = decode_bytes<string>(tmp%0#0)
        let tmp%0#1: bytes = (concat "Hello " name#0)
        let tmp%1#1: bytes = (concat tmp%0#1 "!")
        let tmp%3#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%1#1)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u