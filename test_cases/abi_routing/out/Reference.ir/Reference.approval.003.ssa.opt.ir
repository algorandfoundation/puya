main test_cases.abi_routing.contract.Reference.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "asa" 123u)
        (app_global_put "an_int" 2u)
        let encoded_array%0#0: Encoded(uint8[3]) = bytes_encode<uint8[3]>(0x07, 0x08, 0x09)
        (app_global_put "some_bytes" encoded_array%0#0)
        let tmp%0#2: account = (txn Sender)
        (app_global_put "creator" tmp%0#2)
        (app_global_put "app" 123u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#3: bool = (txn ApplicationID)
        let tmp%1#2: bool = (! tmp%0#3)
        let tmp%2#1: uint64 = (txn OnCompletion)
        let tmp%3#1: uint64 = (shl tmp%2#1 1u)
        let tmp%4#0: uint64 = (+ tmp%1#2 tmp%3#1)
        goto_nth [block@4, block@20, block@25, block@29, block@34, block@38, block@60, block@60, block@43, block@46, block@51, block@55][tmp%4#0] else goto block@60
    block@4: // switch_case_0_L24
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "noop_with_uint64(uint64)uint8" => block@5, method "all_the_things(uint64)uint8" => block@6, method "mixed_oca(uint64)uint8" => block@7, method "opt_into_asset(uint64)void" => block@8, method "with_transactions(uint64,uint64,pay,uint64)void" => block@9, method "compare_assets(uint64,uint64)void" => block@10, method "get_address()address" => block@11, method "get_asset()uint64" => block@12, method "get_application()uint64" => block@13, method "get_an_int()uint64" => block@14, method "method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void" => block@15, method "method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[]" => block@16, method "method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64" => block@17, method "hello_with_algopy_string(string)string" => block@18, * => block@19}
    block@5: // noop_with_uint64_route_L40
        test_cases.abi_routing.contract.Reference.noop_with_uint64[routing]()
        goto block@19
    block@6: // all_the_things_route_L50
        test_cases.abi_routing.contract.Reference.full_abi_config[routing]()
        goto block@19
    block@7: // mixed_oca_route_L66
        test_cases.abi_routing.contract.Reference.mixed_oca[routing]()
        goto block@19
    block@8: // opt_into_asset_route_L92
        test_cases.abi_routing.contract.Reference.opt_into_asset[routing]()
        goto block@19
    block@9: // with_transactions_route_L109
        test_cases.abi_routing.contract.Reference.with_transactions[routing]()
        goto block@19
    block@10: // compare_assets_route_L122
        test_cases.abi_routing.contract.Reference.compare_assets[routing]()
        goto block@19
    block@11: // get_address_route_L126
        (log CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)
        exit 1u
    block@12: // get_asset_route_L130
        (log 0x151f7c7500000000000001c8)
        exit 1u
    block@13: // get_application_route_L134
        (log 0x151f7c7500000000000001c8)
        exit 1u
    block@14: // get_an_int_route_L138
        (log 0x151f7c750000000000000003)
        exit 1u
    block@15: // method_with_default_args_route_L142
        test_cases.abi_routing.contract.Reference.method_with_default_args[routing]()
        goto block@19
    block@16: // method_with_15_args_route_L191
        test_cases.abi_routing.contract.Reference.method_with_15_args[routing]()
        goto block@19
    block@17: // method_with_more_than_15_args_route_L229
        test_cases.abi_routing.contract.Reference.method_with_more_than_15_args[routing]()
        goto block@19
    block@18: // hello_with_algopy_string_route_L295
        test_cases.abi_routing.contract.Reference.hello_with_algopy_string[routing]()
        goto block@19
    block@19: // switch_case_next_L24
        fail // this contract does not implement the given ABI method for call NoOp
    block@20: // switch_case_1_L24
        let tmp%6#0: uint64 = (txn NumAppArgs)
        goto tmp%6#0 ? block@22 : block@21
    block@21: // bare_abi_config_L79
        (log "Hello World")
        exit 1u
    block@22: // else_body_L24
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {method "all_the_things(uint64)uint8" => block@23, * => block@24}
    block@23: // all_the_things_route_L50
        test_cases.abi_routing.contract.Reference.full_abi_config[routing]()
        goto block@24
    block@24: // switch_case_next_L24
        fail // this contract does not implement the given ABI method for create NoOp
    block@25: // switch_case_2_L24
        let tmp%9#0: bytes = (txna ApplicationArgs 0)
        switch tmp%9#0 {method "opt_in(uint64,byte[])void" => block@26, method "all_the_things(uint64)uint8" => block@27, * => block@28}
    block@26: // opt_in_route_L45
        test_cases.abi_routing.contract.Reference.opt_in[routing]()
        goto block@28
    block@27: // all_the_things_route_L50
        test_cases.abi_routing.contract.Reference.full_abi_config[routing]()
        goto block@28
    block@28: // switch_case_next_L24
        fail // this contract does not implement the given ABI method for call OptIn
    block@29: // switch_case_3_L24
        let tmp%10#0: uint64 = (txn NumAppArgs)
        goto tmp%10#0 ? block@31 : block@30
    block@30: // bare_abi_config_L79
        (log "Hello World")
        exit 1u
    block@31: // else_body_L24
        let tmp%12#0: bytes = (txna ApplicationArgs 0)
        switch tmp%12#0 {method "all_the_things(uint64)uint8" => block@32, * => block@33}
    block@32: // all_the_things_route_L50
        test_cases.abi_routing.contract.Reference.full_abi_config[routing]()
        goto block@33
    block@33: // switch_case_next_L24
        fail // this contract does not implement the given ABI method for create OptIn
    block@34: // switch_case_4_L24
        let tmp%13#0: bytes = (txna ApplicationArgs 0)
        switch tmp%13#0 {method "all_the_things(uint64)uint8" => block@35, method "mixed_oca(uint64)uint8" => block@36, * => block@37}
    block@35: // all_the_things_route_L50
        test_cases.abi_routing.contract.Reference.full_abi_config[routing]()
        goto block@37
    block@36: // mixed_oca_route_L66
        test_cases.abi_routing.contract.Reference.mixed_oca[routing]()
        goto block@37
    block@37: // switch_case_next_L24
        fail // this contract does not implement the given ABI method for call CloseOut
    block@38: // switch_case_5_L24
        let tmp%14#0: uint64 = (txn NumAppArgs)
        goto tmp%14#0 ? block@40 : block@39
    block@39: // bare_abi_config_L79
        (log "Hello World")
        exit 1u
    block@40: // else_body_L24
        let tmp%16#0: bytes = (txna ApplicationArgs 0)
        switch tmp%16#0 {method "all_the_things(uint64)uint8" => block@41, * => block@42}
    block@41: // all_the_things_route_L50
        test_cases.abi_routing.contract.Reference.full_abi_config[routing]()
        goto block@42
    block@42: // switch_case_next_L24
        fail // this contract does not implement the given ABI method for create CloseOut
    block@43: // switch_case_8_L24
        let tmp%17#0: bytes = (txna ApplicationArgs 0)
        switch tmp%17#0 {method "all_the_things(uint64)uint8" => block@44, * => block@45}
    block@44: // all_the_things_route_L50
        test_cases.abi_routing.contract.Reference.full_abi_config[routing]()
        goto block@45
    block@45: // switch_case_next_L24
        fail // this contract does not implement the given ABI method for call UpdateApplication
    block@46: // switch_case_9_L24
        let tmp%18#0: uint64 = (txn NumAppArgs)
        goto tmp%18#0 ? block@48 : block@47
    block@47: // bare_abi_config_L79
        (log "Hello World")
        exit 1u
    block@48: // else_body_L24
        let tmp%20#0: bytes = (txna ApplicationArgs 0)
        switch tmp%20#0 {method "all_the_things(uint64)uint8" => block@49, * => block@50}
    block@49: // all_the_things_route_L50
        test_cases.abi_routing.contract.Reference.full_abi_config[routing]()
        goto block@50
    block@50: // switch_case_next_L24
        fail // this contract does not implement the given ABI method for create UpdateApplication
    block@51: // switch_case_10_L24
        let tmp%21#0: bytes = (txna ApplicationArgs 0)
        switch tmp%21#0 {method "all_the_things(uint64)uint8" => block@52, method "mixed_oca(uint64)uint8" => block@53, * => block@54}
    block@52: // all_the_things_route_L50
        test_cases.abi_routing.contract.Reference.full_abi_config[routing]()
        goto block@54
    block@53: // mixed_oca_route_L66
        test_cases.abi_routing.contract.Reference.mixed_oca[routing]()
        goto block@54
    block@54: // switch_case_next_L24
        fail // this contract does not implement the given ABI method for call DeleteApplication
    block@55: // switch_case_11_L24
        let tmp%22#0: uint64 = (txn NumAppArgs)
        goto tmp%22#0 ? block@57 : block@56
    block@56: // bare_abi_config_L79
        (log "Hello World")
        exit 1u
    block@57: // else_body_L24
        let tmp%24#0: bytes = (txna ApplicationArgs 0)
        switch tmp%24#0 {method "all_the_things(uint64)uint8" => block@58, * => block@59}
    block@58: // all_the_things_route_L50
        test_cases.abi_routing.contract.Reference.full_abi_config[routing]()
        goto block@59
    block@59: // switch_case_next_L24
        fail // this contract does not implement the given ABI method for create DeleteApplication
    block@60: // switch_case_default_L24
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.abi_routing.contract.Reference.noop_with_uint64[routing]() -> void:
    block@0: // L40
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#1: uint64 = decode_bytes<uint64>(a#0)
        let result#0: uint64 = (+ 1u tmp%0#1)
        let tmp%2#0: Encoded(uint8) = bytes_encode<uint8>(result#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.opt_in[routing]() -> void:
    block@0: // L45
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let uint#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let bites#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%0#1: account = (txn Sender)
        (app_local_put tmp%0#1 "local_uint" uint#0)
        let tmp%1#1: account = (txn Sender)
        (app_local_put tmp%1#1 "local_bytes" bites#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.full_abi_config[routing]() -> void:
    block@0: // L50
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#1: uint64 = decode_bytes<uint64>(a#0)
        let result#0: uint64 = (+ 1u tmp%0#1)
        let tmp%2#0: Encoded(uint8) = bytes_encode<uint8>(result#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.mixed_oca[routing]() -> void:
    block@0: // L66
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#1: uint64 = decode_bytes<uint64>(a#0)
        let result#0: uint64 = (+ 1u tmp%0#1)
        let tmp%2#0: Encoded(uint8) = bytes_encode<uint8>(result#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.opt_into_asset[routing]() -> void:
    block@0: // L92
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let tmp%0#1: account = (txn Sender)
        let tmp%1#0: account = (global CreatorAddress)
        let tmp%2#0: bool = (== tmp%0#1 tmp%1#0)
        (assert tmp%2#0) // Only creator can opt in to ASA
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%3#0: bool = (! maybe_value%0#0)
        (assert tmp%3#0) // ASA already opted in
        (app_global_put "asa" asset#0)
        itxn_begin
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        let tmp%4#0: account = (global CurrentApplicationAddress)
        ((itxn_field AssetReceiver) tmp%4#0)
        ((itxn_field XferAsset) asset#0)
        itxn_submit
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.with_transactions[routing]() -> void:
    block@0: // L109
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let an_int#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let another_int#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%0#1: bool = (== maybe_value%0#0 asset#0)
        (assert tmp%0#1) // is correct asset
        let tmp%1#1: uint64 = decode_bytes<uint64>(an_int#0)
        let tmp%2#0: bool = (== tmp%1#1 1u)
        (assert tmp%2#0) // is correct int
        let tmp%3#0: account = ((gtxns Receiver) pay#0)
        let tmp%4#0: account = (global CurrentApplicationAddress)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // is payment to app
        let tmp%6#0: uint64 = decode_bytes<uint64>(another_int#0)
        let tmp%7#0: bool = (== tmp%6#0 2u)
        (assert tmp%7#0) // is correct int
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.compare_assets[routing]() -> void:
    block@0: // L122
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset_a#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let asset_b#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let tmp%0#1: bool = (== asset_a#0 asset_b#0)
        (assert tmp%0#1) // asset a == b
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.method_with_default_args[routing]() -> void:
    block@0: // L142
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset_from_storage#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let asset_from_function#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 3)
        let account_from_storage#0: account = decode_bytes<account>(reinterpret_Encoded(uint8[32])%0#0)
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txna ApplicationArgs 4)
        let account_from_function#0: account = decode_bytes<account>(reinterpret_Encoded(uint8[32])%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let application_from_storage#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 6)
        let application_from_function#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%3#0)
        let bytes_from_storage#0: Encoded(uint8[3]) = (txna ApplicationArgs 7)
        let int_from_storage#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let int_from_function#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let int_from_const#0: Encoded(uint32) = (txna ApplicationArgs 10)
        let str_from_const#0: Encoded(len+utf8[]) = (txna ApplicationArgs 11)
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 12)
        let int_from_local#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%6#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 13)
        let bytes_from_local#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%0#1: bool = (== asset_from_storage#0 123u)
        (assert tmp%0#1) // wrong asset from storage
        let tmp%1#1: bool = (== asset_from_function#0 456u)
        (assert tmp%1#1) // wrong asset from function
        let tmp%2#1: account = (global CreatorAddress)
        let tmp%3#1: bool = (== account_from_storage#0 tmp%2#1)
        (assert tmp%3#1) // wrong account from storage
        let tmp%4#1: account = (global ZeroAddress)
        let tmp%5#1: bool = (== account_from_function#0 tmp%4#1)
        (assert tmp%5#1) // wrong account from function
        let tmp%6#1: bool = (== application_from_storage#0 123u)
        (assert tmp%6#1) // wrong application from storage
        let tmp%7#1: bool = (== application_from_function#0 456u)
        (assert tmp%7#1) // wrong application from function
        let array_item%0#0: Encoded(uint8) = extract_value(bytes_from_storage#0, 0u)
        let tmp%8#0: bool = (b== array_item%0#0 0x07)
        (assert tmp%8#0) // wrong 0th byte from storage
        let array_item%1#0: Encoded(uint8) = extract_value(bytes_from_storage#0, 1u)
        let tmp%9#0: bool = (b== array_item%1#0 0x08)
        (assert tmp%9#0) // wrong 1st byte from storage
        let array_item%2#0: Encoded(uint8) = extract_value(bytes_from_storage#0, 2u)
        let tmp%10#0: bool = (b== array_item%2#0 0x09)
        (assert tmp%10#0) // wrong 2nd byte from storage
        let tmp%11#0: uint64 = decode_bytes<uint64>(int_from_storage#0)
        let tmp%12#0: bool = (== tmp%11#0 2u)
        (assert tmp%12#0) // wrong int from storage
        let tmp%13#0: uint64 = decode_bytes<uint64>(int_from_function#0)
        let tmp%14#0: bool = (== tmp%13#0 3u)
        (assert tmp%14#0) // wrong int from function
        let tmp%15#0: bool = (b== int_from_const#0 0x0000007b)
        (assert tmp%15#0)
        let tmp%16#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("abc")
        let tmp%17#0: bool = (== str_from_const#0 tmp%16#0)
        (assert tmp%17#0)
        let tmp%18#0: account = (txn Sender)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%18#0 0u "local_uint")
        (assert maybe_exists%0#0) // check self.local_uint exists for account
        let tmp%19#0: bool = (== int_from_local#0 maybe_value%0#0)
        (assert tmp%19#0)
        let tmp%20#0: account = (txn Sender)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex tmp%20#0 0u "local_bytes")
        (assert maybe_exists%1#0) // check self.local_bytes exists for account
        let tmp%21#0: bool = (== bytes_from_local#0 maybe_value%1#0)
        (assert tmp%21#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.method_with_15_args[routing]() -> void:
    block@0: // L191
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let one#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let two#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let three#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let four#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%3#0)
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let five#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%4#0)
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 6)
        let six#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%5#0)
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 7)
        let seven#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%6#0)
        let reinterpret_Encoded(uint64)%7#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let eight#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%7#0)
        let reinterpret_Encoded(uint64)%8#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let nine#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%8#0)
        let reinterpret_Encoded(uint64)%9#0: Encoded(uint64) = (txna ApplicationArgs 10)
        let ten#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%9#0)
        let reinterpret_Encoded(uint64)%10#0: Encoded(uint64) = (txna ApplicationArgs 11)
        let eleven#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%10#0)
        let reinterpret_Encoded(uint64)%11#0: Encoded(uint64) = (txna ApplicationArgs 12)
        let twelve#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%11#0)
        let reinterpret_Encoded(uint64)%12#0: Encoded(uint64) = (txna ApplicationArgs 13)
        let thirteen#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%12#0)
        let reinterpret_Encoded(uint64)%13#0: Encoded(uint64) = (txna ApplicationArgs 14)
        let fourteen#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%13#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 15)
        let tmp%0#1: uint64 = (+ one#0 two#0)
        let tmp%1#1: uint64 = (+ tmp%0#1 three#0)
        let tmp%2#1: uint64 = (+ tmp%1#1 four#0)
        let tmp%3#1: uint64 = (+ tmp%2#1 five#0)
        let tmp%4#1: uint64 = (+ tmp%3#1 six#0)
        let tmp%5#1: uint64 = (+ tmp%4#1 seven#0)
        let tmp%6#1: uint64 = (+ tmp%5#1 eight#0)
        let tmp%7#1: uint64 = (+ tmp%6#1 nine#0)
        let tmp%8#1: uint64 = (+ tmp%7#1 ten#0)
        let tmp%9#1: uint64 = (+ tmp%8#1 eleven#0)
        let tmp%10#1: uint64 = (+ tmp%9#1 twelve#0)
        let tmp%11#1: uint64 = (+ tmp%10#1 thirteen#0)
        let tmp%12#1: uint64 = (+ tmp%11#1 fourteen#0)
        (assert tmp%12#1)
        let tmp%17#0: bytes = (concat 0x151f7c75 reinterpret_Encoded(len+uint8[])%0#0)
        (log tmp%17#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.method_with_more_than_15_args[routing]() -> void:
    block@0: // L229
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let b#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let c#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let d#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%3#0)
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let asset#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%4#0)
        let e#0: Encoded(uint64) = (txna ApplicationArgs 6)
        let f#0: Encoded(uint64) = (txna ApplicationArgs 7)
        let tmp%2#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%2#0 2u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let g#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let h#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let i#0: Encoded(uint64) = (txna ApplicationArgs 10)
        let j#0: Encoded(uint64) = (txna ApplicationArgs 11)
        let k#0: Encoded(uint64) = (txna ApplicationArgs 12)
        let l#0: Encoded(uint64) = (txna ApplicationArgs 13)
        let m#0: Encoded(uint64) = (txna ApplicationArgs 14)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let n#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%0#0, 0)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%1#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let o#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%1#0, 1)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%2#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0, 2)
        let p#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%3#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let q#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%3#0, 3)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%4#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let r#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%4#0, 4)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%5#0: Encoded(len+uint8[]) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0, 5)
        let s#0: bytes = decode_bytes<bytes>(tuple_item%5#0)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%6#0: Encoded(len+uint8[]) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0, 6)
        let t#0: bytes = decode_bytes<bytes>(tuple_item%6#0)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%7#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0, 7)
        let asset2#0: uint64 = decode_bytes<uint64>(tuple_item%7#0)
        let tmp%7#0: uint64 = (txn GroupIndex)
        let pay2#0: uint64 = (- tmp%7#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) pay2#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%8#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let u#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%8#0, 8)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%9#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let v#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%9#0, 9)
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (== tmp%0#1 16u)
        (assert tmp%1#1)
        let tmp%2#1: uint64 = ((gtxns Amount) pay#0)
        let tmp%3#1: bool = (== tmp%2#1 100000u)
        (assert tmp%3#1)
        let tmp%4#1: uint64 = ((gtxns Amount) pay2#0)
        let tmp%5#1: bool = (== tmp%4#1 200000u)
        (assert tmp%5#1)
        (assert asset#0)
        (assert asset2#0)
        let tmp%8#1: bytes = (concat s#0 t#0)
        (log tmp%8#1)
        let tmp%9#1: uint64 = decode_bytes<uint64>(a#0)
        let tmp%10#0: uint64 = decode_bytes<uint64>(b#0)
        let tmp%11#0: uint64 = (+ tmp%9#1 tmp%10#0)
        let tmp%12#0: uint64 = decode_bytes<uint64>(c#0)
        let tmp%13#0: uint64 = (+ tmp%11#0 tmp%12#0)
        let tmp%14#0: uint64 = (+ tmp%13#0 d#0)
        let tmp%15#0: uint64 = decode_bytes<uint64>(e#0)
        let tmp%16#0: uint64 = (+ tmp%14#0 tmp%15#0)
        let tmp%17#0: uint64 = decode_bytes<uint64>(f#0)
        let tmp%18#0: uint64 = (+ tmp%16#0 tmp%17#0)
        let tmp%19#0: uint64 = decode_bytes<uint64>(g#0)
        let tmp%20#0: uint64 = (+ tmp%18#0 tmp%19#0)
        let tmp%21#0: uint64 = decode_bytes<uint64>(h#0)
        let tmp%22#0: uint64 = (+ tmp%20#0 tmp%21#0)
        let tmp%23#0: uint64 = decode_bytes<uint64>(i#0)
        let tmp%24#0: uint64 = (+ tmp%22#0 tmp%23#0)
        let tmp%25#0: uint64 = decode_bytes<uint64>(j#0)
        let tmp%26#0: uint64 = (+ tmp%24#0 tmp%25#0)
        let tmp%27#0: uint64 = decode_bytes<uint64>(k#0)
        let tmp%28#0: uint64 = (+ tmp%26#0 tmp%27#0)
        let tmp%29#0: uint64 = decode_bytes<uint64>(l#0)
        let tmp%30#0: uint64 = (+ tmp%28#0 tmp%29#0)
        let tmp%31#0: uint64 = decode_bytes<uint64>(m#0)
        let tmp%32#0: uint64 = (+ tmp%30#0 tmp%31#0)
        let tmp%33#0: uint64 = decode_bytes<uint64>(n#0)
        let tmp%34#0: uint64 = (+ tmp%32#0 tmp%33#0)
        let tmp%35#0: uint64 = decode_bytes<uint64>(o#0)
        let tmp%36#0: uint64 = (+ tmp%34#0 tmp%35#0)
        let tmp%37#0: uint64 = (+ tmp%36#0 p#0)
        let tmp%38#0: uint64 = decode_bytes<uint64>(q#0)
        let tmp%39#0: uint64 = (+ tmp%37#0 tmp%38#0)
        let tmp%40#0: uint64 = decode_bytes<uint64>(r#0)
        let tmp%41#0: uint64 = (+ tmp%39#0 tmp%40#0)
        let tmp%42#0: uint64 = decode_bytes<uint64>(u#0)
        let tmp%43#0: uint64 = (+ tmp%41#0 tmp%42#0)
        let tmp%44#0: uint64 = decode_bytes<uint64>(v#0)
        let tmp%45#0: uint64 = (+ tmp%43#0 tmp%44#0)
        let tmp%46#0: Encoded(uint64) = bytes_encode<uint64>(tmp%45#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%46#0)
        (log tmp%9#0)
        exit 1u

subroutine test_cases.abi_routing.contract.Reference.hello_with_algopy_string[routing]() -> void:
    block@0: // L295
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let name#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%0#1: bytes = (concat "Hello " name#0)
        let tmp%1#1: bytes = (concat tmp%0#1 "!")
        let tmp%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%1#1)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u