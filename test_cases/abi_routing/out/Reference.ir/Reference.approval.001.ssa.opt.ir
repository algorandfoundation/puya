main test_cases.abi_routing.contract.Reference.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "asa" 123u)
        (app_global_put "an_int" 2u)
        let encoded_array%0#0: Encoded(uint8[3]) = bytes_encode<uint8[3]>(0x07, 0x08, 0x09)
        (app_global_put "some_bytes" encoded_array%0#0)
        let tmp%0#2: account = (txn Sender)
        (app_global_put "creator" tmp%0#2)
        (app_global_put "app" 123u)
        let tmp%1#1: uint64 = 4u
        let tmp%2#0: bool = 1u
        let tmp%3#0: bool = 1u
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bool = test_cases.abi_routing.contract.Reference.__puya_arc4_router__()
        return tmp%0#1

subroutine test_cases.abi_routing.contract.Reference.__puya_arc4_router__() -> bool:
    block@0: // L24
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%0#0 ? block@1 : block@19
    block@1: // abi_routing_L24
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "noop_with_uint64(uint64)uint8" => block@2, method "opt_in(uint64,byte[])void" => block@3, method "all_the_things(uint64)uint8" => block@4, method "mixed_oca(uint64)uint8" => block@5, method "opt_into_asset(uint64)void" => block@6, method "with_transactions(uint64,uint64,pay,uint64)void" => block@7, method "compare_assets(uint64,uint64)void" => block@8, method "get_address()address" => block@9, method "get_asset()uint64" => block@10, method "get_application()uint64" => block@11, method "get_an_int()uint64" => block@12, method "method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void" => block@13, method "method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[]" => block@14, method "method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64" => block@15, method "hello_with_algopy_string(string)string" => block@16, * => block@23}
    block@2: // noop_with_uint64_route_L40
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: Encoded(uint8) = test_cases.abi_routing.contract.Reference.noop_with_uint64(reinterpret_Encoded(uint64)%0#0)
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        return 1u
    block@3: // opt_in_route_L45
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (== tmp%9#0 OptIn)
        (assert tmp%10#0) // OnCompletion is not OptIn
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%13#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%14#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        test_cases.abi_routing.contract.Reference.opt_in(tmp%13#0, tmp%14#0)
        return 1u
    block@4: // all_the_things_route_L50
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%15#0: Encoded(uint8) = test_cases.abi_routing.contract.Reference.full_abi_config(reinterpret_Encoded(uint64)%2#0)
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        return 1u
    block@5: // mixed_oca_route_L66
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: uint64 = (shl 1u tmp%17#0)
        let tmp%19#0: uint64 = (& tmp%18#0 37u)
        (assert tmp%19#0) // OnCompletion is not one of NoOp, CloseOut, DeleteApplication
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%22#0: Encoded(uint8) = test_cases.abi_routing.contract.Reference.mixed_oca(reinterpret_Encoded(uint64)%3#0)
        let tmp%23#0: bytes = (concat 0x151f7c75 tmp%22#0)
        (log tmp%23#0)
        return 1u
    block@6: // opt_into_asset_route_L92
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        let tmp%27#0: bool = (!= tmp%26#0 0u)
        (assert tmp%26#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%28#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%4#0)
        test_cases.abi_routing.contract.Reference.opt_into_asset(tmp%28#0)
        return 1u
    block@7: // with_transactions_route_L109
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%31#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%33#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%5#0)
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%34#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%34#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%7#0: Encoded(uint64) = (txna ApplicationArgs 3)
        test_cases.abi_routing.contract.Reference.with_transactions(tmp%33#0, reinterpret_Encoded(uint64)%6#0, gtxn_idx%0#0, reinterpret_Encoded(uint64)%7#0)
        return 1u
    block@8: // compare_assets_route_L122
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (! tmp%35#0)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        let tmp%38#0: bool = (!= tmp%37#0 0u)
        (assert tmp%37#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%8#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%39#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%8#0)
        let reinterpret_Encoded(uint64)%9#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%40#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%9#0)
        test_cases.abi_routing.contract.Reference.compare_assets(tmp%39#0, tmp%40#0)
        return 1u
    block@9: // get_address_route_L126
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        let tmp%44#0: bool = (!= tmp%43#0 0u)
        (assert tmp%43#0) // can only call when not creating
        let tmp%45#0: Encoded(uint8[32]) = test_cases.abi_routing.contract.Reference.get_address()
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        return 1u
    block@10: // get_asset_route_L130
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (!= tmp%49#0 0u)
        (assert tmp%49#0) // can only call when not creating
        let tmp%52#0: bytes = 0x151f7c7500000000000001c8
        (log 0x151f7c7500000000000001c8)
        return 1u
    block@11: // get_application_route_L134
        let tmp%53#0: uint64 = (txn OnCompletion)
        let tmp%54#0: bool = (! tmp%53#0)
        (assert tmp%54#0) // OnCompletion is not NoOp
        let tmp%55#0: uint64 = (txn ApplicationID)
        let tmp%56#0: bool = (!= tmp%55#0 0u)
        (assert tmp%55#0) // can only call when not creating
        let tmp%58#0: bytes = 0x151f7c7500000000000001c8
        (log 0x151f7c7500000000000001c8)
        return 1u
    block@12: // get_an_int_route_L138
        let tmp%59#0: uint64 = (txn OnCompletion)
        let tmp%60#0: bool = (! tmp%59#0)
        (assert tmp%60#0) // OnCompletion is not NoOp
        let tmp%61#0: uint64 = (txn ApplicationID)
        let tmp%62#0: bool = (!= tmp%61#0 0u)
        (assert tmp%61#0) // can only call when not creating
        let tmp%64#0: bytes = 0x151f7c750000000000000003
        (log 0x151f7c750000000000000003)
        return 1u
    block@13: // method_with_default_args_route_L142
        let tmp%65#0: uint64 = (txn OnCompletion)
        let tmp%66#0: bool = (! tmp%65#0)
        (assert tmp%66#0) // OnCompletion is not NoOp
        let tmp%67#0: uint64 = (txn ApplicationID)
        let tmp%68#0: bool = (!= tmp%67#0 0u)
        (assert tmp%67#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%10#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%69#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%10#0)
        let reinterpret_Encoded(uint64)%11#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%70#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%11#0)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 3)
        let tmp%71#0: account = decode_bytes<account>(reinterpret_Encoded(uint8[32])%0#0)
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txna ApplicationArgs 4)
        let tmp%72#0: account = decode_bytes<account>(reinterpret_Encoded(uint8[32])%1#0)
        let reinterpret_Encoded(uint64)%12#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let tmp%73#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%12#0)
        let reinterpret_Encoded(uint64)%13#0: Encoded(uint64) = (txna ApplicationArgs 6)
        let tmp%74#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%13#0)
        let reinterpret_Encoded(uint8[3])%0#0: Encoded(uint8[3]) = (txna ApplicationArgs 7)
        let reinterpret_Encoded(uint64)%14#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let reinterpret_Encoded(uint64)%15#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let reinterpret_Encoded(uint32)%0#0: Encoded(uint32) = (txna ApplicationArgs 10)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 11)
        let reinterpret_Encoded(uint64)%16#0: Encoded(uint64) = (txna ApplicationArgs 12)
        let tmp%75#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%16#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 13)
        let tmp%76#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        test_cases.abi_routing.contract.Reference.method_with_default_args(tmp%69#0, tmp%70#0, tmp%71#0, tmp%72#0, tmp%73#0, tmp%74#0, reinterpret_Encoded(uint8[3])%0#0, reinterpret_Encoded(uint64)%14#0, reinterpret_Encoded(uint64)%15#0, reinterpret_Encoded(uint32)%0#0, reinterpret_Encoded(len+utf8[])%0#0, tmp%75#0, tmp%76#0)
        return 1u
    block@14: // method_with_15_args_route_L191
        let tmp%77#0: uint64 = (txn OnCompletion)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0) // OnCompletion is not NoOp
        let tmp%79#0: uint64 = (txn ApplicationID)
        let tmp%80#0: bool = (!= tmp%79#0 0u)
        (assert tmp%79#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%17#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%81#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%17#0)
        let reinterpret_Encoded(uint64)%18#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%82#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%18#0)
        let reinterpret_Encoded(uint64)%19#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%83#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%19#0)
        let reinterpret_Encoded(uint64)%20#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let tmp%84#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%20#0)
        let reinterpret_Encoded(uint64)%21#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let tmp%85#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%21#0)
        let reinterpret_Encoded(uint64)%22#0: Encoded(uint64) = (txna ApplicationArgs 6)
        let tmp%86#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%22#0)
        let reinterpret_Encoded(uint64)%23#0: Encoded(uint64) = (txna ApplicationArgs 7)
        let tmp%87#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%23#0)
        let reinterpret_Encoded(uint64)%24#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let tmp%88#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%24#0)
        let reinterpret_Encoded(uint64)%25#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let tmp%89#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%25#0)
        let reinterpret_Encoded(uint64)%26#0: Encoded(uint64) = (txna ApplicationArgs 10)
        let tmp%90#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%26#0)
        let reinterpret_Encoded(uint64)%27#0: Encoded(uint64) = (txna ApplicationArgs 11)
        let tmp%91#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%27#0)
        let reinterpret_Encoded(uint64)%28#0: Encoded(uint64) = (txna ApplicationArgs 12)
        let tmp%92#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%28#0)
        let reinterpret_Encoded(uint64)%29#0: Encoded(uint64) = (txna ApplicationArgs 13)
        let tmp%93#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%29#0)
        let reinterpret_Encoded(uint64)%30#0: Encoded(uint64) = (txna ApplicationArgs 14)
        let tmp%94#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%30#0)
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 15)
        let tmp%95#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%2#0)
        let tmp%96#0: bytes = test_cases.abi_routing.contract.Reference.method_with_15_args(tmp%81#0, tmp%82#0, tmp%83#0, tmp%84#0, tmp%85#0, tmp%86#0, tmp%87#0, tmp%88#0, tmp%89#0, tmp%90#0, tmp%91#0, tmp%92#0, tmp%93#0, tmp%94#0, tmp%95#0)
        let tmp%97#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%96#0)
        let tmp%98#0: bytes = (concat 0x151f7c75 tmp%97#0)
        (log tmp%98#0)
        return 1u
    block@15: // method_with_more_than_15_args_route_L229
        let tmp%99#0: uint64 = (txn OnCompletion)
        let tmp%100#0: bool = (! tmp%99#0)
        (assert tmp%100#0) // OnCompletion is not NoOp
        let tmp%101#0: uint64 = (txn ApplicationID)
        let tmp%102#0: bool = (!= tmp%101#0 0u)
        (assert tmp%101#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%31#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%32#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%33#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(uint64)%34#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let tmp%103#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%34#0)
        let reinterpret_Encoded(uint64)%35#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let tmp%104#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%35#0)
        let reinterpret_Encoded(uint64)%36#0: Encoded(uint64) = (txna ApplicationArgs 6)
        let reinterpret_Encoded(uint64)%37#0: Encoded(uint64) = (txna ApplicationArgs 7)
        let tmp%105#0: uint64 = (txn GroupIndex)
        let gtxn_idx%1#0: uint64 = (- tmp%105#0 2u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%38#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let reinterpret_Encoded(uint64)%39#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let reinterpret_Encoded(uint64)%40#0: Encoded(uint64) = (txna ApplicationArgs 10)
        let reinterpret_Encoded(uint64)%41#0: Encoded(uint64) = (txna ApplicationArgs 11)
        let reinterpret_Encoded(uint64)%42#0: Encoded(uint64) = (txna ApplicationArgs 12)
        let reinterpret_Encoded(uint64)%43#0: Encoded(uint64) = (txna ApplicationArgs 13)
        let reinterpret_Encoded(uint64)%44#0: Encoded(uint64) = (txna ApplicationArgs 14)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%0#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%0#0, 0)
        let values%0#0: Encoded(uint64) = decode_bytes<Encoded(uint64)>(tuple_item%0#0)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%1#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%1#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%1#0, 1)
        let values%1#0: Encoded(uint64) = decode_bytes<Encoded(uint64)>(tuple_item%1#0)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%2#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0, 2)
        let values%2#0: Encoded(uint64) = decode_bytes<Encoded(uint64)>(tuple_item%2#0)
        let tmp%106#0: uint64 = decode_bytes<uint64>(values%2#0)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%3#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%3#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%3#0, 3)
        let values%3#0: Encoded(uint64) = decode_bytes<Encoded(uint64)>(tuple_item%3#0)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%4#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%4#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%4#0, 4)
        let values%4#0: Encoded(uint64) = decode_bytes<Encoded(uint64)>(tuple_item%4#0)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%5#0: Encoded(len+uint8[]) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0, 5)
        let values%5#0: Encoded(len+uint8[]) = decode_bytes<Encoded(len+uint8[])>(tuple_item%5#0)
        let tmp%107#0: bytes = decode_bytes<bytes>(values%5#0)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%6#0: Encoded(len+uint8[]) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0, 6)
        let values%6#0: Encoded(len+uint8[]) = decode_bytes<Encoded(len+uint8[])>(tuple_item%6#0)
        let tmp%108#0: bytes = decode_bytes<bytes>(values%6#0)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%7#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0, 7)
        let values%7#0: Encoded(uint64) = decode_bytes<Encoded(uint64)>(tuple_item%7#0)
        let tmp%109#0: uint64 = decode_bytes<uint64>(values%7#0)
        let tmp%110#0: uint64 = (txn GroupIndex)
        let gtxn_idx%2#0: uint64 = (- tmp%110#0 1u)
        let gtxn_type%2#0: uint64 = ((gtxns TypeEnum) gtxn_idx%2#0)
        let gtxn_type_matches%2#0: bool = (== gtxn_type%2#0 pay)
        (assert gtxn_type_matches%2#0) // transaction type is pay
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%8#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%8#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%8#0, 8)
        let values%8#0: Encoded(uint64) = decode_bytes<Encoded(uint64)>(tuple_item%8#0)
        let reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%9#0: Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64) = (txna ApplicationArgs 15)
        let tuple_item%9#0: Encoded(uint64) = extract_value(reinterpret_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%9#0, 9)
        let values%9#0: Encoded(uint64) = decode_bytes<Encoded(uint64)>(tuple_item%9#0)
        let tmp%111#0: Encoded(uint64) = test_cases.abi_routing.contract.Reference.method_with_more_than_15_args(reinterpret_Encoded(uint64)%31#0, reinterpret_Encoded(uint64)%32#0, reinterpret_Encoded(uint64)%33#0, tmp%103#0, tmp%104#0, reinterpret_Encoded(uint64)%36#0, reinterpret_Encoded(uint64)%37#0, gtxn_idx%1#0, reinterpret_Encoded(uint64)%38#0, reinterpret_Encoded(uint64)%39#0, reinterpret_Encoded(uint64)%40#0, reinterpret_Encoded(uint64)%41#0, reinterpret_Encoded(uint64)%42#0, reinterpret_Encoded(uint64)%43#0, reinterpret_Encoded(uint64)%44#0, values%0#0, values%1#0, tmp%106#0, values%3#0, values%4#0, tmp%107#0, tmp%108#0, tmp%109#0, gtxn_idx%2#0, values%8#0, values%9#0)
        let tmp%112#0: bytes = (concat 0x151f7c75 tmp%111#0)
        (log tmp%112#0)
        return 1u
    block@16: // hello_with_algopy_string_route_L295
        let tmp%113#0: uint64 = (txn OnCompletion)
        let tmp%114#0: bool = (! tmp%113#0)
        (assert tmp%114#0) // OnCompletion is not NoOp
        let tmp%115#0: uint64 = (txn ApplicationID)
        let tmp%116#0: bool = (!= tmp%115#0 0u)
        (assert tmp%115#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%117#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%1#0)
        let tmp%118#0: string = test_cases.abi_routing.contract.Reference.hello_with_algopy_string(tmp%117#0)
        let tmp%119#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%118#0)
        let tmp%120#0: bytes = (concat 0x151f7c75 tmp%119#0)
        (log tmp%120#0)
        return 1u
    block@19: // bare_routing_L24
        let tmp%121#0: uint64 = (txn OnCompletion)
        goto_nth [block@20, block@20, block@20, block@23, block@20, block@20][tmp%121#0] else goto block@23
    block@20: // bare_abi_config_L79
        let tmp%122#0: uint64 = (txn ApplicationID)
        let tmp%123#0: bool = (! tmp%122#0)
        (assert tmp%123#0) // can only call when creating
        test_cases.abi_routing.contract.Reference.bare_abi_config()
        return 1u
    block@23: // after_if_else_L24
        return 0u

subroutine test_cases.abi_routing.contract.Reference.noop_with_uint64(a: Encoded(uint64)) -> Encoded(uint8):
    block@0: // L40
        let tmp%0#0: uint64 = decode_bytes<uint64>(a#0)
        let result#0: uint64 = (+ 1u tmp%0#0)
        let tmp%2#0: Encoded(uint8) = bytes_encode<uint8>(result#0)
        return tmp%2#0

subroutine test_cases.abi_routing.contract.Reference.opt_in(uint: uint64, bites: bytes) -> void:
    block@0: // L45
        let tmp%0#0: account = (txn Sender)
        (app_local_put tmp%0#0 "local_uint" uint#0)
        let tmp%1#0: account = (txn Sender)
        (app_local_put tmp%1#0 "local_bytes" bites#0)
        return 

subroutine test_cases.abi_routing.contract.Reference.full_abi_config(a: Encoded(uint64)) -> Encoded(uint8):
    block@0: // L50
        let tmp%0#0: uint64 = decode_bytes<uint64>(a#0)
        let result#0: uint64 = (+ 1u tmp%0#0)
        let tmp%2#0: Encoded(uint8) = bytes_encode<uint8>(result#0)
        return tmp%2#0

subroutine test_cases.abi_routing.contract.Reference.mixed_oca(a: Encoded(uint64)) -> Encoded(uint8):
    block@0: // L66
        let tmp%0#0: uint64 = decode_bytes<uint64>(a#0)
        let result#0: uint64 = (+ 1u tmp%0#0)
        let tmp%2#0: Encoded(uint8) = bytes_encode<uint8>(result#0)
        return tmp%2#0

subroutine test_cases.abi_routing.contract.Reference.bare_abi_config() -> void:
    block@0: // L79
        (log "Hello World")
        return 

subroutine test_cases.abi_routing.contract.Reference.opt_into_asset(asset: uint64) -> void:
    block@0: // L92
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: account = (global CreatorAddress)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // Only creator can opt in to ASA
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%3#0: bool = (! maybe_value%0#0)
        (assert tmp%3#0) // ASA already opted in
        (app_global_put "asa" asset#0)
        itxn_begin
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        let tmp%4#0: account = (global CurrentApplicationAddress)
        ((itxn_field AssetReceiver) tmp%4#0)
        ((itxn_field XferAsset) asset#0)
        itxn_submit
        return 

subroutine test_cases.abi_routing.contract.Reference.with_transactions(asset: uint64, an_int: Encoded(uint64), pay: uint64, another_int: Encoded(uint64)) -> void:
    block@0: // L109
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%0#0: bool = (== maybe_value%0#0 asset#0)
        (assert tmp%0#0) // is correct asset
        let tmp%1#0: uint64 = decode_bytes<uint64>(an_int#0)
        let tmp%2#0: bool = (== tmp%1#0 1u)
        (assert tmp%2#0) // is correct int
        let tmp%3#0: account = ((gtxns Receiver) pay#0)
        let tmp%4#0: account = (global CurrentApplicationAddress)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // is payment to app
        let tmp%6#0: uint64 = decode_bytes<uint64>(another_int#0)
        let tmp%7#0: bool = (== tmp%6#0 2u)
        (assert tmp%7#0) // is correct int
        return 

subroutine test_cases.abi_routing.contract.Reference.compare_assets(asset_a: uint64, asset_b: uint64) -> void:
    block@0: // L122
        let tmp%0#0: bool = (== asset_a#0 asset_b#0)
        (assert tmp%0#0) // asset a == b
        return 

subroutine test_cases.abi_routing.contract.Reference.get_address() -> Encoded(uint8[32]):
    block@0: // L126
        let tmp%0#0: Encoded(uint8[32]) = (global ZeroAddress)
        return tmp%0#0

subroutine test_cases.abi_routing.contract.Reference.method_with_default_args(asset_from_storage: uint64, asset_from_function: uint64, account_from_storage: account, account_from_function: account, application_from_storage: uint64, application_from_function: uint64, bytes_from_storage: Encoded(uint8[3]), int_from_storage: Encoded(uint64), int_from_function: Encoded(uint64), int_from_const: Encoded(uint32), str_from_const: Encoded(len+utf8[]), int_from_local: uint64, bytes_from_local: bytes) -> void:
    block@0: // L142
        let tmp%0#0: bool = (== asset_from_storage#0 123u)
        (assert tmp%0#0) // wrong asset from storage
        let tmp%1#0: bool = (== asset_from_function#0 456u)
        (assert tmp%1#0) // wrong asset from function
        let tmp%2#0: account = (global CreatorAddress)
        let tmp%3#0: bool = (== account_from_storage#0 tmp%2#0)
        (assert tmp%3#0) // wrong account from storage
        let tmp%4#0: account = (global ZeroAddress)
        let tmp%5#0: bool = (== account_from_function#0 tmp%4#0)
        (assert tmp%5#0) // wrong account from function
        let tmp%6#0: bool = (== application_from_storage#0 123u)
        (assert tmp%6#0) // wrong application from storage
        let tmp%7#0: bool = (== application_from_function#0 456u)
        (assert tmp%7#0) // wrong application from function
        let array_item%0#0: Encoded(uint8) = extract_value(bytes_from_storage#0, 0u)
        let values%0#0: Encoded(uint8) = decode_bytes<Encoded(uint8)>(array_item%0#0)
        let tmp%8#0: bool = (b== values%0#0 0x07)
        (assert tmp%8#0) // wrong 0th byte from storage
        let array_item%1#0: Encoded(uint8) = extract_value(bytes_from_storage#0, 1u)
        let values%1#0: Encoded(uint8) = decode_bytes<Encoded(uint8)>(array_item%1#0)
        let tmp%9#0: bool = (b== values%1#0 0x08)
        (assert tmp%9#0) // wrong 1st byte from storage
        let array_item%2#0: Encoded(uint8) = extract_value(bytes_from_storage#0, 2u)
        let values%2#0: Encoded(uint8) = decode_bytes<Encoded(uint8)>(array_item%2#0)
        let tmp%10#0: bool = (b== values%2#0 0x09)
        (assert tmp%10#0) // wrong 2nd byte from storage
        let tmp%11#0: uint64 = decode_bytes<uint64>(int_from_storage#0)
        let tmp%12#0: bool = (== tmp%11#0 2u)
        (assert tmp%12#0) // wrong int from storage
        let tmp%13#0: uint64 = decode_bytes<uint64>(int_from_function#0)
        let tmp%14#0: bool = (== tmp%13#0 3u)
        (assert tmp%14#0) // wrong int from function
        let tmp%15#0: bool = (b== int_from_const#0 0x0000007b)
        (assert tmp%15#0)
        let tmp%16#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("abc")
        let tmp%17#0: bool = (== str_from_const#0 tmp%16#0)
        (assert tmp%17#0)
        let tmp%18#0: account = (txn Sender)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%18#0 0u "local_uint")
        (assert maybe_exists%0#0) // check self.local_uint exists for account
        let tmp%19#0: bool = (== int_from_local#0 maybe_value%0#0)
        (assert tmp%19#0)
        let tmp%20#0: account = (txn Sender)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_local_get_ex tmp%20#0 0u "local_bytes")
        (assert maybe_exists%1#0) // check self.local_bytes exists for account
        let tmp%21#0: bool = (== bytes_from_local#0 maybe_value%1#0)
        (assert tmp%21#0)
        return 

subroutine test_cases.abi_routing.contract.Reference.method_with_15_args(one: uint64, two: uint64, three: uint64, four: uint64, five: uint64, six: uint64, seven: uint64, eight: uint64, nine: uint64, ten: uint64, eleven: uint64, twelve: uint64, thirteen: uint64, fourteen: uint64, fifteen: bytes) -> bytes:
    block@0: // L191
        let tmp%0#0: uint64 = (+ one#0 two#0)
        let tmp%1#0: uint64 = (+ tmp%0#0 three#0)
        let tmp%2#0: uint64 = (+ tmp%1#0 four#0)
        let tmp%3#0: uint64 = (+ tmp%2#0 five#0)
        let tmp%4#0: uint64 = (+ tmp%3#0 six#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 seven#0)
        let tmp%6#0: uint64 = (+ tmp%5#0 eight#0)
        let tmp%7#0: uint64 = (+ tmp%6#0 nine#0)
        let tmp%8#0: uint64 = (+ tmp%7#0 ten#0)
        let tmp%9#0: uint64 = (+ tmp%8#0 eleven#0)
        let tmp%10#0: uint64 = (+ tmp%9#0 twelve#0)
        let tmp%11#0: uint64 = (+ tmp%10#0 thirteen#0)
        let tmp%12#0: uint64 = (+ tmp%11#0 fourteen#0)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%12#0)
        return fifteen#0

subroutine test_cases.abi_routing.contract.Reference.method_with_more_than_15_args(a: Encoded(uint64), b: Encoded(uint64), c: Encoded(uint64), d: uint64, asset: uint64, e: Encoded(uint64), f: Encoded(uint64), pay: uint64, g: Encoded(uint64), h: Encoded(uint64), i: Encoded(uint64), j: Encoded(uint64), k: Encoded(uint64), l: Encoded(uint64), m: Encoded(uint64), n: Encoded(uint64), o: Encoded(uint64), p: uint64, q: Encoded(uint64), r: Encoded(uint64), s: bytes, t: bytes, asset2: uint64, pay2: uint64, u: Encoded(uint64), v: Encoded(uint64)) -> Encoded(uint64):
    block@0: // L229
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (== tmp%0#0 16u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = ((gtxns Amount) pay#0)
        let tmp%3#0: bool = (== tmp%2#0 100000u)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = ((gtxns Amount) pay2#0)
        let tmp%5#0: bool = (== tmp%4#0 200000u)
        (assert tmp%5#0)
        let tmp%6#0: bool = (!= asset#0 0u)
        (assert asset#0)
        let tmp%7#0: bool = (!= asset2#0 0u)
        (assert asset2#0)
        let tmp%8#0: bytes = (concat s#0 t#0)
        (log tmp%8#0)
        let tmp%9#0: uint64 = decode_bytes<uint64>(a#0)
        let tmp%10#0: uint64 = decode_bytes<uint64>(b#0)
        let tmp%11#0: uint64 = (+ tmp%9#0 tmp%10#0)
        let tmp%12#0: uint64 = decode_bytes<uint64>(c#0)
        let tmp%13#0: uint64 = (+ tmp%11#0 tmp%12#0)
        let tmp%14#0: uint64 = (+ tmp%13#0 d#0)
        let tmp%15#0: uint64 = decode_bytes<uint64>(e#0)
        let tmp%16#0: uint64 = (+ tmp%14#0 tmp%15#0)
        let tmp%17#0: uint64 = decode_bytes<uint64>(f#0)
        let tmp%18#0: uint64 = (+ tmp%16#0 tmp%17#0)
        let tmp%19#0: uint64 = decode_bytes<uint64>(g#0)
        let tmp%20#0: uint64 = (+ tmp%18#0 tmp%19#0)
        let tmp%21#0: uint64 = decode_bytes<uint64>(h#0)
        let tmp%22#0: uint64 = (+ tmp%20#0 tmp%21#0)
        let tmp%23#0: uint64 = decode_bytes<uint64>(i#0)
        let tmp%24#0: uint64 = (+ tmp%22#0 tmp%23#0)
        let tmp%25#0: uint64 = decode_bytes<uint64>(j#0)
        let tmp%26#0: uint64 = (+ tmp%24#0 tmp%25#0)
        let tmp%27#0: uint64 = decode_bytes<uint64>(k#0)
        let tmp%28#0: uint64 = (+ tmp%26#0 tmp%27#0)
        let tmp%29#0: uint64 = decode_bytes<uint64>(l#0)
        let tmp%30#0: uint64 = (+ tmp%28#0 tmp%29#0)
        let tmp%31#0: uint64 = decode_bytes<uint64>(m#0)
        let tmp%32#0: uint64 = (+ tmp%30#0 tmp%31#0)
        let tmp%33#0: uint64 = decode_bytes<uint64>(n#0)
        let tmp%34#0: uint64 = (+ tmp%32#0 tmp%33#0)
        let tmp%35#0: uint64 = decode_bytes<uint64>(o#0)
        let tmp%36#0: uint64 = (+ tmp%34#0 tmp%35#0)
        let tmp%37#0: uint64 = (+ tmp%36#0 p#0)
        let tmp%38#0: uint64 = decode_bytes<uint64>(q#0)
        let tmp%39#0: uint64 = (+ tmp%37#0 tmp%38#0)
        let tmp%40#0: uint64 = decode_bytes<uint64>(r#0)
        let tmp%41#0: uint64 = (+ tmp%39#0 tmp%40#0)
        let tmp%42#0: uint64 = decode_bytes<uint64>(u#0)
        let tmp%43#0: uint64 = (+ tmp%41#0 tmp%42#0)
        let tmp%44#0: uint64 = decode_bytes<uint64>(v#0)
        let tmp%45#0: uint64 = (+ tmp%43#0 tmp%44#0)
        let tmp%46#0: Encoded(uint64) = bytes_encode<uint64>(tmp%45#0)
        return tmp%46#0

subroutine test_cases.abi_routing.contract.Reference.hello_with_algopy_string(name: string) -> string:
    block@0: // L295
        let tmp%0#0: bytes = (concat "Hello " name#0)
        let tmp%1#0: bytes = (concat tmp%0#0 "!")
        return tmp%1#0