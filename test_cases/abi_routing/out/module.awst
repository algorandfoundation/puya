contract MinimumARC4
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
    algopy._contract.Contract,
  )
  globals {
    ['gvalue']: uint64
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.abi_routing.minimal.MinimumARC4.__init__(): void
  {
    GlobalState['gvalue']: uint64 = 4u
  }
  
  baremethod test_cases.abi_routing.minimal.MinimumARC4.__algopy_default_create(): void
  {
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}

contract CustomApproval
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
    algopy._contract.Contract,
  )
  
  subroutine test_cases.abi_routing.custom_approval.CustomApproval.approval_program(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    if (txn<NumAppArgs>() == 2u and txna<ApplicationArgs, 1>() == itob(42u)) {
      log('\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89')
    }
    result: bool = super::approval_program()
    if (!(result)) {
      log("this will never be seen unless you're running in simulation mode anyway so I can say whatever I want here")
    }
    return result
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.abi_routing.custom_approval.CustomApproval.__init__(): void
  {
    super::__init__()
    assert(txn<ApplicationID>() == reinterpret_cast<application>(0u), comment="nonsense assert just to generate an init method")
  }
  
  abimethod test_cases.abi_routing.custom_approval.CustomApproval.add_one(x: uint64): uint64
  {
    return x + 1u
  }
  
  baremethod test_cases.abi_routing.custom_approval.CustomApproval.__algopy_default_create(): void
  {
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}

contract CustomApproval2
{
  method_resolution_order: (
    test_cases.abi_routing.custom_approval.CustomApproval,
    algopy.arc4.ARC4Contract,
    algopy._contract.Contract,
  )
  
  subroutine test_cases.abi_routing.custom_approval.CustomApproval2.approval_program(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return false
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  baremethod test_cases.abi_routing.custom_approval.CustomApproval2.__algopy_default_create(): void
  {
  }
  
  subroutine test_cases.abi_routing.custom_approval.CustomApproval.__init__(): void
  {
    super::__init__()
    assert(txn<ApplicationID>() == reinterpret_cast<application>(0u), comment="nonsense assert just to generate an init method")
  }
  
  subroutine test_cases.abi_routing.custom_approval.CustomApproval.approval_program(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    if (txn<NumAppArgs>() == 2u and txna<ApplicationArgs, 1>() == itob(42u)) {
      log('\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89')
    }
    result: bool = super::approval_program()
    if (!(result)) {
      log("this will never be seen unless you're running in simulation mode anyway so I can say whatever I want here")
    }
    return result
  }
  
  abimethod test_cases.abi_routing.custom_approval.CustomApproval.add_one(x: uint64): uint64
  {
    return x + 1u
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}

contract CustomApproval3
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
    algopy._contract.Contract,
  )
  
  subroutine test_cases.abi_routing.custom_approval.CustomApproval3.approval_program(): bool
  {
    return false
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.abi_routing.custom_approval.CustomApproval3.unused(): void
  {
    return
  }
  
  baremethod test_cases.abi_routing.custom_approval.CustomApproval3.__algopy_default_create(): void
  {
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}

contract Reference
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
    algopy._contract.Contract,
  )
  globals {
    ['asa']: asset
    ['an_int']: uint64
    ['some_bytes']: arc4.static_array<arc4.uint8, 3>
    ['creator']: account
    ['app']: application
  }
  locals {
    ['local_bytes']: bytes
    ['local_uint']: uint64
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.abi_routing.contract.Reference.__init__(): void
  {
    GlobalState['asa']: asset = reinterpret_cast<asset>(123u)
    GlobalState['an_int']: uint64 = 2u
    GlobalState['some_bytes']: arc4.static_array<arc4.uint8, 3> = new arc4.static_array<arc4.uint8, 3>(7_arc4u8, 8_arc4u8, 9_arc4u8)
    GlobalState['creator']: account = txn<Sender>()
    GlobalState['app']: application = reinterpret_cast<application>(123u)
    assert(len(Method("get(uint64,byte[])byte[]")) != 0u, comment="has method selector")
    assert(Method("opt_in(uint64,byte[])void") == Method("opt_in(uint64,byte[])void"), comment="has method selector for method reference")
  }
  
  abimethod test_cases.abi_routing.contract.Reference.noop_with_uint64(a: arc4.uint64): arc4.uint8
  {
    result: uint64 = 1u + arc4_decode(a, uint64)
    return arc4_encode(result, arc4.uint8)
  }
  
  abimethod test_cases.abi_routing.contract.Reference.opt_in(uint: uint64, bites: bytes): void
  {
    LocalState['local_uint', txn<Sender>()]: uint64 = uint
    LocalState['local_bytes', txn<Sender>()]: bytes = bites
  }
  
  abimethod[name_override=all_the_things] test_cases.abi_routing.contract.Reference.full_abi_config(a: arc4.uint64): arc4.uint8
  {
    result: uint64 = 1u + arc4_decode(a, uint64)
    return arc4_encode(result, arc4.uint8)
  }
  
  abimethod test_cases.abi_routing.contract.Reference.mixed_oca(a: arc4.uint64): arc4.uint8
  {
    result: uint64 = 1u + arc4_decode(a, uint64)
    return arc4_encode(result, arc4.uint8)
  }
  
  baremethod test_cases.abi_routing.contract.Reference.bare_abi_config(): void
  {
    log('Hello World')
  }
  
  abimethod test_cases.abi_routing.contract.Reference.opt_into_asset(asset: asset): void
  {
    assert(txn<Sender>() == global<CreatorAddress>(), comment="Only creator can opt in to ASA")
    assert(reinterpret_cast<uint64>(GlobalState['asa']) == 0u, comment="ASA already opted in")
    GlobalState['asa']: asset = asset
    itxn_begin()
    itxn_field<TypeEnum>(axfer)
    itxn_field<Fee>(0u)
    itxn_field<AssetReceiver>(global<CurrentApplicationAddress>())
    itxn_field<XferAsset>(asset)
    itxn_submit()
  }
  
  abimethod test_cases.abi_routing.contract.Reference.with_transactions(asset: asset, an_int: arc4.uint64, pay: group_transaction_pay, another_int: arc4.uint64): void
  {
    assert(GlobalState['asa'] == asset, comment="is correct asset")
    assert(arc4_decode(an_int, uint64) == 1u, comment="is correct int")
    assert(gtxns<Receiver>(pay) == global<CurrentApplicationAddress>(), comment="is payment to app")
    assert(arc4_decode(another_int, uint64) == 2u, comment="is correct int")
  }
  
  abimethod test_cases.abi_routing.contract.Reference.compare_assets(asset_a: asset, asset_b: asset): void
  {
    assert(asset_a == asset_b, comment="asset a == b")
  }
  
  abimethod test_cases.abi_routing.contract.Reference.get_address(): arc4.static_array<arc4.uint8, 32>
  {
    return global<ZeroAddress>()
  }
  
  abimethod test_cases.abi_routing.contract.Reference.get_asset(): arc4.uint64
  {
    return 456_arc4u64
  }
  
  abimethod[name_override=get_application] test_cases.abi_routing.contract.Reference.get_app(): arc4.uint64
  {
    return 456_arc4u64
  }
  
  abimethod[name_override=get_an_int] test_cases.abi_routing.contract.Reference.get_a_int(): arc4.uint64
  {
    return 3_arc4u64
  }
  
  abimethod test_cases.abi_routing.contract.Reference.method_with_default_args(asset_from_storage: asset, asset_from_function: asset, account_from_storage: account, account_from_function: account, application_from_storage: application, application_from_function: application, bytes_from_storage: arc4.static_array<arc4.uint8, 3>, int_from_storage: arc4.uint64, int_from_function: arc4.uint64, int_from_const: arc4.uint32, str_from_const: arc4.dynamic_array<arc4.uint8>, int_from_local: uint64, bytes_from_local: bytes): void
  {
    assert(asset_from_storage == reinterpret_cast<asset>(123u), comment="wrong asset from storage")
    assert(asset_from_function == reinterpret_cast<asset>(456u), comment="wrong asset from function")
    assert(account_from_storage == global<CreatorAddress>(), comment="wrong account from storage")
    assert(account_from_function == global<ZeroAddress>(), comment="wrong account from function")
    assert(application_from_storage == reinterpret_cast<application>(123u), comment="wrong application from storage")
    assert(application_from_function == reinterpret_cast<application>(456u), comment="wrong application from function")
    assert(reinterpret_cast<biguint>(bytes_from_storage[0u]) == reinterpret_cast<biguint>(7_arc4u8), comment="wrong 0th byte from storage")
    assert(reinterpret_cast<biguint>(bytes_from_storage[1u]) == reinterpret_cast<biguint>(8_arc4u8), comment="wrong 1st byte from storage")
    assert(reinterpret_cast<biguint>(bytes_from_storage[2u]) == reinterpret_cast<biguint>(9_arc4u8), comment="wrong 2nd byte from storage")
    assert(arc4_decode(int_from_storage, uint64) == 2u, comment="wrong int from storage")
    assert(arc4_decode(int_from_function, uint64) == 3u, comment="wrong int from function")
    assert(reinterpret_cast<biguint>(int_from_const) == reinterpret_cast<biguint>(123_arc4u32))
    assert(str_from_const == 'abc')
    assert(int_from_local == LocalState['local_uint', txn<Sender>()])
    assert(bytes_from_local == LocalState['local_bytes', txn<Sender>()])
  }
  
  abimethod test_cases.abi_routing.contract.Reference.method_with_15_args(one: uint64, two: uint64, three: uint64, four: uint64, five: uint64, six: uint64, seven: uint64, eight: uint64, nine: uint64, ten: uint64, eleven: uint64, twelve: uint64, thirteen: uint64, fourteen: uint64, fifteen: bytes): bytes
  {
    assert(one + two + three + four + five + six + seven + eight + nine + ten + eleven + twelve + thirteen + fourteen != 0u)
    return fifteen
  }
  
  abimethod test_cases.abi_routing.contract.Reference.method_with_more_than_15_args(a: arc4.uint64, b: arc4.uint64, c: arc4.uint64, d: uint64, asset: asset, e: arc4.uint64, f: arc4.uint64, pay: group_transaction_pay, g: arc4.uint64, h: arc4.uint64, i: arc4.uint64, j: arc4.uint64, k: arc4.uint64, l: arc4.uint64, m: arc4.uint64, n: arc4.uint64, o: arc4.uint64, p: uint64, q: arc4.uint64, r: arc4.uint64, s: bytes, t: bytes, asset2: asset, pay2: group_transaction_pay, u: arc4.uint64, v: arc4.uint64): arc4.uint64
  {
    assert(txn<NumAppArgs>() == 16u)
    assert(gtxns<Amount>(pay) == 100000u)
    assert(gtxns<Amount>(pay2) == 200000u)
    assert(reinterpret_cast<uint64>(asset) != 0u)
    assert(reinterpret_cast<uint64>(asset2) != 0u)
    log(s + t)
    return arc4_encode(arc4_decode(a, uint64) + arc4_decode(b, uint64) + arc4_decode(c, uint64) + d + arc4_decode(e, uint64) + arc4_decode(f, uint64) + arc4_decode(g, uint64) + arc4_decode(h, uint64) + arc4_decode(i, uint64) + arc4_decode(j, uint64) + arc4_decode(k, uint64) + arc4_decode(l, uint64) + arc4_decode(m, uint64) + arc4_decode(n, uint64) + arc4_decode(o, uint64) + p + arc4_decode(q, uint64) + arc4_decode(r, uint64) + arc4_decode(u, uint64) + arc4_decode(v, uint64), arc4.uint64)
  }
  
  abimethod test_cases.abi_routing.contract.Reference.hello_with_algopy_string(name: string): string
  {
    return 'Hello ' + name + '!'
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}