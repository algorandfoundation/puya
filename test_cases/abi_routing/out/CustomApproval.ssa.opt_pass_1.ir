contract test_cases.abi_routing.custom_approval.CustomApproval:
    program approval:
        subroutine test_cases.abi_routing.custom_approval.CustomApproval.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = (txn ApplicationID)
                goto tmp%0#0 ? block@2 : block@1
            block@1: // call __init___L1
                test_cases.abi_routing.custom_approval.CustomApproval.__init__()
                goto block@2
            block@2: // after_if_else_L1
                let tmp%1#0: uint64 = (txn NumAppArgs)
                let tmp%2#0: bool = (== tmp%1#0 2u)
                goto tmp%2#0 ? block@3 : block@5
            block@3: // and_contd_L13
                let tmp%3#0: bytes = (txna ApplicationArgs 1)
                let tmp%4#0: bytes = (itob 42u)
                let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
                goto tmp%5#0 ? block@4 : block@5
            block@4: // if_body_L14
                (log "\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89")
                goto block@5
            block@5: // after_if_else_L13
                let result#0: bool = algopy.arc4.ARC4Contract.approval_program()
                goto result#0 ? block@7 : block@6
            block@6: // if_body_L17
                (log "this will never be seen unless you're running in simulation mode anyway so I can say whatever I want here")
                goto block@7
            block@7: // after_if_else_L16
                return result#0
        
        subroutine test_cases.abi_routing.custom_approval.CustomApproval.__init__() -> void:
            block@0: // L7
                let tmp%0#0: uint64 = (txn ApplicationID)
                let tmp%1#0: bool = (! tmp%0#0)
                (assert tmp%1#0) // nonsense assert just to generate an init method
                return 
        
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.abi_routing.custom_approval.CustomApproval.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.abi_routing.custom_approval.CustomApproval.__puya_arc4_router__() -> bool:
            block@0: // L6
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@5
            block@1: // abi_routing_L6
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "add_one(uint64)uint64" => block@2, * => return 0u}
            block@2: // add_one_route_L23
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: uint64 = (btoi tmp%7#0)
                let to_encode%0#0: uint64 = test_cases.abi_routing.custom_approval.CustomApproval.add_one(tmp%8#0)
                let val_as_bytes%0#0: bytes = (itob to_encode%0#0)
                let tmp%9#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
                (log tmp%9#0)
                return 1u
            block@5: // bare_routing_L6
                let tmp%10#0: uint64 = (txn OnCompletion)
                goto tmp%10#0 ? block@9 : block@6
            block@6: // __algopy_default_create_L1
                let tmp%11#0: uint64 = (txn ApplicationID)
                let tmp%12#0: bool = (! tmp%11#0)
                (assert tmp%12#0) // is creating
                return 1u
            block@9: // after_if_else_L6
                return 0u
        
        subroutine test_cases.abi_routing.custom_approval.CustomApproval.add_one(x: uint64) -> uint64:
            block@0: // L23
                let tmp%0#0: uint64 = (+ x#0 1u)
                return tmp%0#0
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u