{
    "name": "Reference",
    "structs": {},
    "methods": [
        {
            "name": "noop_with_uint64",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_in",
            "args": [
                {
                    "type": "uint64",
                    "name": "uint"
                },
                {
                    "type": "byte[]",
                    "name": "bites"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "all_the_things",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [
                    "NoOp",
                    "OptIn",
                    "DeleteApplication"
                ],
                "call": [
                    "NoOp",
                    "OptIn",
                    "CloseOut",
                    "UpdateApplication",
                    "DeleteApplication"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mixed_oca",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "CloseOut",
                    "DeleteApplication"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_into_asset",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "with_transactions",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "an_int"
                },
                {
                    "type": "pay",
                    "name": "pay"
                },
                {
                    "type": "uint64",
                    "name": "another_int"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "compare_assets",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_a"
                },
                {
                    "type": "uint64",
                    "name": "asset_b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_address",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_application",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_an_int",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "method_with_default_args",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_from_storage",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNh",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "uint64",
                    "name": "asset_from_function",
                    "defaultValue": {
                        "source": "method",
                        "data": "get_asset()uint64"
                    }
                },
                {
                    "type": "address",
                    "name": "account_from_storage",
                    "defaultValue": {
                        "source": "global",
                        "data": "Y3JlYXRvcg==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "address",
                    "name": "account_from_function",
                    "defaultValue": {
                        "source": "method",
                        "data": "get_address()address"
                    }
                },
                {
                    "type": "uint64",
                    "name": "application_from_storage",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXBw",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "uint64",
                    "name": "application_from_function",
                    "defaultValue": {
                        "source": "method",
                        "data": "get_application()uint64"
                    }
                },
                {
                    "type": "byte[3]",
                    "name": "bytes_from_storage",
                    "defaultValue": {
                        "source": "global",
                        "data": "c29tZV9ieXRlcw==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "uint64",
                    "name": "int_from_storage",
                    "defaultValue": {
                        "source": "global",
                        "data": "YW5faW50",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "uint64",
                    "name": "int_from_function",
                    "defaultValue": {
                        "source": "method",
                        "data": "get_an_int()uint64"
                    }
                },
                {
                    "type": "uint32",
                    "name": "int_from_const",
                    "defaultValue": {
                        "source": "literal",
                        "data": "AAAAew==",
                        "type": "uint32"
                    }
                },
                {
                    "type": "string",
                    "name": "str_from_const",
                    "defaultValue": {
                        "source": "literal",
                        "data": "AANhYmM=",
                        "type": "string"
                    }
                },
                {
                    "type": "uint64",
                    "name": "int_from_local",
                    "defaultValue": {
                        "source": "local",
                        "data": "bG9jYWxfdWludA==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "byte[]",
                    "name": "bytes_from_local",
                    "defaultValue": {
                        "source": "local",
                        "data": "bG9jYWxfYnl0ZXM=",
                        "type": "AVMString"
                    }
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "method_with_15_args",
            "args": [
                {
                    "type": "uint64",
                    "name": "one"
                },
                {
                    "type": "uint64",
                    "name": "two"
                },
                {
                    "type": "uint64",
                    "name": "three"
                },
                {
                    "type": "uint64",
                    "name": "four"
                },
                {
                    "type": "uint64",
                    "name": "five"
                },
                {
                    "type": "uint64",
                    "name": "six"
                },
                {
                    "type": "uint64",
                    "name": "seven"
                },
                {
                    "type": "uint64",
                    "name": "eight"
                },
                {
                    "type": "uint64",
                    "name": "nine"
                },
                {
                    "type": "uint64",
                    "name": "ten"
                },
                {
                    "type": "uint64",
                    "name": "eleven"
                },
                {
                    "type": "uint64",
                    "name": "twelve"
                },
                {
                    "type": "uint64",
                    "name": "thirteen"
                },
                {
                    "type": "uint64",
                    "name": "fourteen"
                },
                {
                    "type": "byte[]",
                    "name": "fifteen"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Fifteen args should not encode the last argument as a tuple",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "method_with_more_than_15_args",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "c"
                },
                {
                    "type": "uint64",
                    "name": "d"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "e"
                },
                {
                    "type": "uint64",
                    "name": "f"
                },
                {
                    "type": "pay",
                    "name": "pay"
                },
                {
                    "type": "uint64",
                    "name": "g"
                },
                {
                    "type": "uint64",
                    "name": "h"
                },
                {
                    "type": "uint64",
                    "name": "i"
                },
                {
                    "type": "uint64",
                    "name": "j"
                },
                {
                    "type": "uint64",
                    "name": "k"
                },
                {
                    "type": "uint64",
                    "name": "l"
                },
                {
                    "type": "uint64",
                    "name": "m"
                },
                {
                    "type": "uint64",
                    "name": "n"
                },
                {
                    "type": "uint64",
                    "name": "o"
                },
                {
                    "type": "uint64",
                    "name": "p"
                },
                {
                    "type": "uint64",
                    "name": "q"
                },
                {
                    "type": "uint64",
                    "name": "r"
                },
                {
                    "type": "byte[]",
                    "name": "s"
                },
                {
                    "type": "byte[]",
                    "name": "t"
                },
                {
                    "type": "uint64",
                    "name": "asset2"
                },
                {
                    "type": "pay",
                    "name": "pay2"
                },
                {
                    "type": "uint64",
                    "name": "u"
                },
                {
                    "type": "uint64",
                    "name": "v"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Application calls only support 16 args, and arc4 calls utilise the first arg for the method\nselector. Args beyond this number are packed into a tuple and placed in the 16th slot.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "hello_with_algopy_string",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 2
            },
            "local": {
                "ints": 1,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "asa": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNh"
                },
                "an_int": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YW5faW50"
                },
                "some_bytes": {
                    "keyType": "AVMString",
                    "valueType": "byte[3]",
                    "key": "c29tZV9ieXRlcw=="
                },
                "creator": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Y3JlYXRvcg=="
                },
                "app": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXBw"
                }
            },
            "local": {
                "local_bytes": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bG9jYWxfYnl0ZXM="
                },
                "local_uint": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bG9jYWxfdWludA=="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "DeleteApplication",
            "NoOp",
            "OptIn"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        894
                    ],
                    "errorMessage": "ASA already opted in"
                },
                {
                    "pc": [
                        230,
                        260,
                        418,
                        504,
                        563,
                        587,
                        598,
                        609,
                        625,
                        645,
                        677,
                        751
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        729
                    ],
                    "errorMessage": "OnCompletion is not OptIn"
                },
                {
                    "pc": [
                        697
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, CloseOut, DeleteApplication"
                },
                {
                    "pc": [
                        888
                    ],
                    "errorMessage": "Only creator can opt in to ASA"
                },
                {
                    "pc": [
                        957
                    ],
                    "errorMessage": "asset a == b"
                },
                {
                    "pc": [
                        789
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        233,
                        263,
                        421,
                        507,
                        566,
                        590,
                        601,
                        612,
                        628,
                        648,
                        680,
                        700,
                        732,
                        754
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        892,
                        923
                    ],
                    "errorMessage": "check self.asa exists"
                },
                {
                    "pc": [
                        1081
                    ],
                    "errorMessage": "check self.local_bytes exists for account"
                },
                {
                    "pc": [
                        1070
                    ],
                    "errorMessage": "check self.local_uint exists for account"
                },
                {
                    "pc": [
                        1003,
                        1013,
                        1023
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        927
                    ],
                    "errorMessage": "is correct asset"
                },
                {
                    "pc": [
                        933,
                        947
                    ],
                    "errorMessage": "is correct int"
                },
                {
                    "pc": [
                        941
                    ],
                    "errorMessage": "is payment to app"
                },
                {
                    "pc": [
                        820,
                        856,
                        875
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        296,
                        393,
                        665
                    ],
                    "errorMessage": "transaction type is pay"
                },
                {
                    "pc": [
                        1010
                    ],
                    "errorMessage": "wrong 0th byte from storage"
                },
                {
                    "pc": [
                        1020
                    ],
                    "errorMessage": "wrong 1st byte from storage"
                },
                {
                    "pc": [
                        1030
                    ],
                    "errorMessage": "wrong 2nd byte from storage"
                },
                {
                    "pc": [
                        988
                    ],
                    "errorMessage": "wrong account from function"
                },
                {
                    "pc": [
                        982
                    ],
                    "errorMessage": "wrong account from storage"
                },
                {
                    "pc": [
                        1000
                    ],
                    "errorMessage": "wrong application from function"
                },
                {
                    "pc": [
                        993
                    ],
                    "errorMessage": "wrong application from storage"
                },
                {
                    "pc": [
                        976
                    ],
                    "errorMessage": "wrong asset from function"
                },
                {
                    "pc": [
                        969
                    ],
                    "errorMessage": "wrong asset from storage"
                },
                {
                    "pc": [
                        1043
                    ],
                    "errorMessage": "wrong int from function"
                },
                {
                    "pc": [
                        1036
                    ],
                    "errorMessage": "wrong int from storage"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQB7AiYFBBUffHUDYXNhDBUffHUAAAAAAAAByApsb2NhbF91aW50C2xvY2FsX2J5dGVzMRhAADIpJGeABmFuX2ludCVnggIKc29tZV9ieXRlcwMHCAlngAdjcmVhdG9yMQBngANhcHAkZzEbQQKNgg8E142zWwQBBAAjBDpTU/wE0vL1PATY9i2aBLhDERkExBY3LQR/rZeABC/flaQEE5mCbAShMAghBGE33DcEVzIZWgT2CWyCBJAjuxk2GgCODwIKAfMB5wHQAcABoAGMAXwBcQFmAU4BEwC9AB8AAQAxGRREMRhENhoBVwIAiAP0SRUWVwYCTFAoTFCwIkMxGRREMRhENhoBNhoCNhoDNhoEFzYaBRc2GgY2GgcxFiUJSTgQIhJENhoINhoJNhoKNhoLNhoMNhoNNhoONhoPVwAINhoPVwgINhoPgRBbNhoPVxgINhoPVyAINhoPSYEoWUsBgSpZUlcCADYaD0mBKllLARVSVwIANhoPgSxbMRYiCUk4ECISRDYaD1c0CDYaD1c8CIgC1ihMULAiQzEZFEQxGEQ2GgEXNhoCFzYaAxc2GgQXNhoFFzYaBhc2GgcXNhoIFzYaCRc2GgoXNhoLFzYaDBc2Gg0XNhoOFzYaD1cCAIgCWEkVFlcGAkxQKExQsCJDMRkURDEYRDYaARc2GgIXNhoDNhoENhoFFzYaBhc2Ggc2Ggg2Ggk2Ggo2Ggs2GgwXNhoNVwIAiAGUIkMxGRREMRhEgAwVH3x1AAAAAAAAAAOwIkMxGRREMRhEKrAiQzEZFEQxGEQqsCJDMRkURDEYRIgBVyhMULAiQzEZFEQxGEQ2GgEXNhoCF4gBNSJDMRkURDEYRDYaARc2GgIxFiIJSTgQIhJENhoDiAD1IkMxGRREMRhENhoBF4gAwCJDIjEZkIElGkQxGEQ2GgGIAJooTFCwIkM2GgGIAHsoTFCwIkMxGSISRDEYRDYaARc2GgJXAgCIAE8iQzEZFEQxGEQ2GgGIAC0oTFCwIkMxGY0GAAMAAwAD/dMAAwADQv3QMRgURIALSGVsbG8gV29ybGSwIkOKAQGL/xciCBZJk4EIDkRXBwGJigIAMQAri/5mMQAnBIv/ZomKAQGL/xciCBZJk4EIDkRXBwGJigEBi/8XIggWSZOBCA5EVwcBiYoBADEAMgkSRCMpZUQURCmL/2exgQSyECOyATIKshSL/7IRs4mKBAAjKWVEi/wSRIv9FyISRIv+OAcyChJEi/8XJRJEiYoCAIv+i/8SRIkyA4mKDQCL8yQSRIv0gcgDEkSL9TIJEkSL9jIDEkSL9yQSRIv4gcgDEkSL+VcAAYABB6hEi/lXAQGAAQioRIv5VwIBgAEJqESL+hclEkSL+xeBAxJEi/yABAAAAHuoRIv9gAUAA2FiYxJEMQAjK2NEi/4SRDEAIycEY0SL/xJEiYoPAYvxi/IIi/MIi/QIi/UIi/YIi/cIi/gIi/kIi/oIi/sIi/wIi/0Ii/4IRIv/iYoaATEbgRASRIvtOAiBoI0GEkSL/TgIgcCaDBJEi+pEi/xEi/qL+1Cwi+YXi+cXCIvoFwiL6QiL6xcIi+wXCIvuFwiL7xcIi/AXCIvxFwiL8hcIi/MXCIv0FwiL9RcIi/YXCIv3CIv4FwiL+RcIi/4XCIv/FwgWiYoBAYAGSGVsbG8gi/9QgAEhUIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}