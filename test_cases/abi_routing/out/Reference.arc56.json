{
    "name": "Reference",
    "structs": {},
    "methods": [
        {
            "name": "noop_with_uint64",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "all_the_things",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [
                    "NoOp",
                    "OptIn",
                    "DeleteApplication"
                ],
                "call": [
                    "NoOp",
                    "OptIn",
                    "CloseOut",
                    "UpdateApplication",
                    "DeleteApplication"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mixed_oca",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp",
                    "CloseOut",
                    "DeleteApplication"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_into_asset",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "with_transactions",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "an_int"
                },
                {
                    "type": "pay",
                    "name": "pay"
                },
                {
                    "type": "uint64",
                    "name": "another_int"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "compare_assets",
            "args": [
                {
                    "type": "asset",
                    "name": "asset_a"
                },
                {
                    "type": "asset",
                    "name": "asset_b"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_address",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_application",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_an_int",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "method_with_default_args",
            "args": [
                {
                    "type": "asset",
                    "name": "asset_from_storage",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNh",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "asset",
                    "name": "asset_from_function",
                    "defaultValue": {
                        "source": "method",
                        "data": "get_asset()uint64"
                    }
                },
                {
                    "type": "account",
                    "name": "account_from_storage",
                    "defaultValue": {
                        "source": "global",
                        "data": "Y3JlYXRvcg==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "account",
                    "name": "account_from_function",
                    "defaultValue": {
                        "source": "method",
                        "data": "get_address()address"
                    }
                },
                {
                    "type": "application",
                    "name": "application_from_storage",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXBw",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "application",
                    "name": "application_from_function",
                    "defaultValue": {
                        "source": "method",
                        "data": "get_application()uint64"
                    }
                },
                {
                    "type": "byte[3]",
                    "name": "bytes_from_storage",
                    "defaultValue": {
                        "source": "global",
                        "data": "c29tZV9ieXRlcw==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "uint64",
                    "name": "int_from_storage",
                    "defaultValue": {
                        "source": "global",
                        "data": "YW5faW50",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "uint64",
                    "name": "int_from_function",
                    "defaultValue": {
                        "source": "method",
                        "data": "get_an_int()uint64"
                    }
                },
                {
                    "type": "uint32",
                    "name": "int_from_const",
                    "defaultValue": {
                        "source": "literal",
                        "data": "AAAAew==",
                        "type": "uint32"
                    }
                },
                {
                    "type": "string",
                    "name": "str_from_const",
                    "defaultValue": {
                        "source": "literal",
                        "data": "AANhYmM=",
                        "type": "string"
                    }
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "method_with_15_args",
            "args": [
                {
                    "type": "uint64",
                    "name": "one"
                },
                {
                    "type": "uint64",
                    "name": "two"
                },
                {
                    "type": "uint64",
                    "name": "three"
                },
                {
                    "type": "uint64",
                    "name": "four"
                },
                {
                    "type": "uint64",
                    "name": "five"
                },
                {
                    "type": "uint64",
                    "name": "six"
                },
                {
                    "type": "uint64",
                    "name": "seven"
                },
                {
                    "type": "uint64",
                    "name": "eight"
                },
                {
                    "type": "uint64",
                    "name": "nine"
                },
                {
                    "type": "uint64",
                    "name": "ten"
                },
                {
                    "type": "uint64",
                    "name": "eleven"
                },
                {
                    "type": "uint64",
                    "name": "twelve"
                },
                {
                    "type": "uint64",
                    "name": "thirteen"
                },
                {
                    "type": "uint64",
                    "name": "fourteen"
                },
                {
                    "type": "byte[]",
                    "name": "fifteen"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Fifteen args should not encode the last argument as a tuple",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "method_with_more_than_15_args",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "c"
                },
                {
                    "type": "uint64",
                    "name": "d"
                },
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "e"
                },
                {
                    "type": "uint64",
                    "name": "f"
                },
                {
                    "type": "pay",
                    "name": "pay"
                },
                {
                    "type": "uint64",
                    "name": "g"
                },
                {
                    "type": "uint64",
                    "name": "h"
                },
                {
                    "type": "uint64",
                    "name": "i"
                },
                {
                    "type": "uint64",
                    "name": "j"
                },
                {
                    "type": "uint64",
                    "name": "k"
                },
                {
                    "type": "uint64",
                    "name": "l"
                },
                {
                    "type": "uint64",
                    "name": "m"
                },
                {
                    "type": "uint64",
                    "name": "n"
                },
                {
                    "type": "uint64",
                    "name": "o"
                },
                {
                    "type": "uint64",
                    "name": "p"
                },
                {
                    "type": "uint64",
                    "name": "q"
                },
                {
                    "type": "uint64",
                    "name": "r"
                },
                {
                    "type": "byte[]",
                    "name": "s"
                },
                {
                    "type": "byte[]",
                    "name": "t"
                },
                {
                    "type": "asset",
                    "name": "asset2"
                },
                {
                    "type": "pay",
                    "name": "pay2"
                },
                {
                    "type": "uint64",
                    "name": "u"
                },
                {
                    "type": "uint64",
                    "name": "v"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Application calls only support 16 args, and arc4 calls utilise the first arg for the method\nselector. Args beyond this number are packed into a tuple and placed in the 16th slot.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "hello_with_algopy_string",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asa": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNh"
                },
                "an_int": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YW5faW50"
                },
                "some_bytes": {
                    "keyType": "AVMString",
                    "valueType": "byte[3]",
                    "key": "c29tZV9ieXRlcw=="
                },
                "creator": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Y3JlYXRvcg=="
                },
                "app": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXBw"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "DeleteApplication",
            "NoOp",
            "OptIn"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        832
                    ],
                    "errorMessage": "ASA already opted in"
                },
                {
                    "pc": [
                        294,
                        300,
                        306,
                        313,
                        319,
                        355,
                        374,
                        380,
                        944,
                        954,
                        964
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        201,
                        231,
                        395,
                        481,
                        544,
                        568,
                        579,
                        590,
                        606,
                        630,
                        664,
                        717
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        686
                    ],
                    "errorMessage": "OnCompletion is not one of NoOp, CloseOut, DeleteApplication"
                },
                {
                    "pc": [
                        826
                    ],
                    "errorMessage": "Only creator can opt in to ASA"
                },
                {
                    "pc": [
                        895
                    ],
                    "errorMessage": "asset a == b"
                },
                {
                    "pc": [
                        755
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        204,
                        234,
                        398,
                        484,
                        547,
                        571,
                        582,
                        593,
                        609,
                        633,
                        667,
                        689,
                        720
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        830,
                        861
                    ],
                    "errorMessage": "check self.asa exists"
                },
                {
                    "pc": [
                        865
                    ],
                    "errorMessage": "is correct asset"
                },
                {
                    "pc": [
                        871,
                        885
                    ],
                    "errorMessage": "is correct int"
                },
                {
                    "pc": [
                        879
                    ],
                    "errorMessage": "is payment to app"
                },
                {
                    "pc": [
                        269,
                        370,
                        652
                    ],
                    "errorMessage": "transaction type is pay"
                },
                {
                    "pc": [
                        951
                    ],
                    "errorMessage": "wrong 0th byte from storage"
                },
                {
                    "pc": [
                        961
                    ],
                    "errorMessage": "wrong 1st byte from storage"
                },
                {
                    "pc": [
                        971
                    ],
                    "errorMessage": "wrong 2nd byte from storage"
                },
                {
                    "pc": [
                        929
                    ],
                    "errorMessage": "wrong account from function"
                },
                {
                    "pc": [
                        923
                    ],
                    "errorMessage": "wrong account from storage"
                },
                {
                    "pc": [
                        941
                    ],
                    "errorMessage": "wrong application from function"
                },
                {
                    "pc": [
                        934
                    ],
                    "errorMessage": "wrong application from storage"
                },
                {
                    "pc": [
                        917
                    ],
                    "errorMessage": "wrong asset from function"
                },
                {
                    "pc": [
                        910
                    ],
                    "errorMessage": "wrong asset from storage"
                },
                {
                    "pc": [
                        984
                    ],
                    "errorMessage": "wrong int from function"
                },
                {
                    "pc": [
                        977
                    ],
                    "errorMessage": "wrong int from storage"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAXsCACYDBBUffHUDYXNhDBUffHUAAAAAAAAByDEYQAAyKSNngAZhbl9pbnQkZ4ICCnNvbWVfYnl0ZXMDBwgJZ4AHY3JlYXRvcjEAZ4ADYXBwI2cxG0ECgoIOBNeNs1sEOlNT/ATS8vU8BCgmsgIEb46UzQQX3GjwBH+tl4AEL9+VpAQTmYJsBKEwCCEEsFVZugRXMhlaBNF1UvsEkCO7GTYaAI4OAgYB+gHjAdEBrwGXAYcBfAFxAVkBGgDEACAAAiVDMRkURDEYRDYaAVcCAIgDwUkVFlcGAkxQKExQsCJDMRkURDEYRDYaATYaAjYaAzYaBBc2GgUXwDA2GgY2GgcxFiQJSTgQIhJENhoINhoJNhoKNhoLNhoMNhoNNhoONhoPVwAINhoPVwgINhoPVxAIFzYaD1cYCDYaD1cgCDYaD0mBKFlLAYEqWVJXAgA2Gg9JgSpZSwEVUlcCADYaD1csARfAMDEWIglJOBAiEkQ2Gg9XLQg2Gg9XNQiIAp0oTFCwIkMxGRREMRhENhoBFzYaAhc2GgMXNhoEFzYaBRc2GgYXNhoHFzYaCBc2GgkXNhoKFzYaCxc2GgwXNhoNFzYaDhc2Gg9XAgCIAh9JFRZXBgJMUChMULAiQzEZFEQxGEQ2GgEXwDA2GgIXwDA2GgMXwBw2GgQXwBw2GgUXwDI2GgYXwDI2Ggc2Ggg2Ggk2Ggo2GguIAWwiQzEZFEQxGESADBUffHUAAAAAAAAAA7AiQzEZFEQxGEQqsCJDMRkURDEYRCqwIkMxGRREMRhEiAEsKExQsCJDMRkURDEYRDYaARfAMDYaAhfAMIgBBiJDMRkURDEYRDYaARfAMDYaAjEWIglJOBAiEkQ2GgOIAMQiQzEZFEQxGEQ2GgEXwDCIAI0iQyIxGZCBJRpEMRhENhoBiABbKExQsCJDNhoBiABCKExQsCJDMRkURDEYRDYaAYgAIihMULAiQzEZjQYAAwADAAP91wADAANC/dQxGBREiAApIkOKAQGL/xciCBZXBwGJigEBi/8XIggWVwcBiYoBAYv/FyIIFlcHAYmKAACAC0hlbGxvIFdvcmxksImKAQAxADIJEkQlKWVEFEQpi/9nsYEEshAlsgEyCrIUi/+yEbOJigQAJSllRIv8EkSL/RciEkSL/jgHMgoSRIv/FyQSRImKAgCL/ov/EkSJigABMgOJigsAi/UjEkSL9oHIAxJEi/cyCRJEi/gyAxJEi/kjEkSL+oHIAxJEi/tXAAGAAQeoRIv7VwEBgAEIqESL+1cCAYABCahEi/wXJBJEi/0XgQMSRIv+gAQAAAB7qESL/4AFAANhYmMSRImKDwGL8YvyCIvzCIv0CIv1CIv2CIv3CIv4CIv5CIv6CIv7CIv8CIv9CIv+CESL/4mKGgExG4EQEkSL7TgIgaCNBhJEi/04CIHAmgwSRIvqRIv8RIv6i/tQsIvmF4vnFwiL6BcIi+kIi+sXCIvsFwiL7hcIi+8XCIvwFwiL8RcIi/IXCIvzFwiL9BcIi/UXCIv2FwiL9wiL+BcIi/kXCIv+FwiL/xcIFomKAQGABkhlbGxvIIv/UIABIVCJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}