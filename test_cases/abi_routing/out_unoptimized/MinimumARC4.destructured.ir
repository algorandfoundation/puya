contract test_cases.abi_routing.minimal.MinimumARC4:
    program approval:
        subroutine test_cases.abi_routing.minimal.MinimumARC4.approval_program() -> bool:
            block@0: // L4
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L5
                test_cases.abi_routing.minimal.MinimumARC4.__init__()
                goto block@2
            block@2: // entrypoint_L5
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@3 : block@4
            block@3: // reject_abi_methods_L4
                fail // reject transaction
            block@4: // bare_routing_L4
                let tmp%1#0: uint64 = (txn OnCompletion)
                switch tmp%1#0 {0u => block@5, * => block@6}
            block@5: // create_L4
                let tmp%2#0: bool = (txn ApplicationID)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // is creating
                return 1u
            block@6: // reject_bare_on_completion_L4
                fail // reject transaction
        
        subroutine test_cases.abi_routing.minimal.MinimumARC4.__init__() -> void:
            block@0: // L5
                (app_global_put "gvalue" 4u)
                return 
    
    program clear-state:
        subroutine test_cases.abi_routing.minimal.MinimumARC4.clear_state_program() -> bool:
            block@0: // L4
                return 1u