{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBQ;AAAW;;AAAX;AACA;;;;;;;;AAAc;AAAd;AACkB;AAAO;AAAP;AAAqB;;;AAArB;AAAmC;;;AAAnC;AAAA;AAAA;AAAA;AAAlB;;;;;;;;;;;;AAAA;AAAA;AACe;;AAAf;;;;;;;;;AAAA;AAAA;AACA;;;;;AAAW;;AAAX;AAIO;;;;;;AAAA;AAAA;AAAA;AAAP;AAEO;;AAAyC;AAAzC;AAAP;;AAIR;;;AAEqB;;AAAA;AAAJ;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAER;;;AAEwB;;AAAhB;;AAAA;;AAAA;AACiB;;AAAjB;;AAAA;;AAAA;;AAER;;;AAa6B;;AAAA;AAAZ;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAER;;;AAU6B;;AAAA;AAAZ;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAaI;;;;;;;;;;;;;AAAJ;;AAER;;;AAGe;;AAAiB;;AAAjB;AAAP;AAEW;AAAA;AAAA;AAAA;AAAJ;AAAP;AAEA;AAAA;;AAAA;AAGA;AAC4B;;AAA5B;;AACsB;AAAtB;;AACiC;;AAAjC;;AACA;;AAAA;;AACA;;AAER;;;AAQe;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAiB;AAAjB;AAAP;AACO;;AAAA;;AAAgB;;AAAhB;AAAP;AACO;;AAAA;AAAsB;AAAtB;AAAP;;AAER;;;AAEe;;AAAA;;AAAA;AAAP;;AAIO;;AAAP;AAIO;;AAAP;AAIO;;AAAP;AAIO;;;;;;;;;;AAAP;AAER;;;AAiCe;;AAAsB;;AAAtB;AAAP;AACO;;AAAuB;;;AAAvB;AAAP;AAC+B;;AAAxB;;AAAA;AAAP;AACgC;;AAAzB;;AAAA;AAAP;AACO;;AAA4B;;AAA5B;AAAP;AACO;;AAA6B;;;AAA7B;AAAP;AACO;;AAAmB;AAAnB;AAAA;AAAA;AAAA;AAAyB;AAAzB;AAAP;AACO;;AAAmB;AAAnB;AAAA;AAAA;AAAA;AAAyB;;;AAAzB;AAAP;AACO;;AAAmB;AAAnB;AAAA;AAAA;AAAA;AAAyB;;;AAAzB;AAAP;AACO;;AAAA;AAA2B;AAA3B;AAAP;AACO;;AAAA;AAA4B;;AAA5B;AAAP;AACO;;AAAkB;;;;;;AAAlB;AAAP;AACO;;AAAkB;;;;;;;AAAlB;AAAP;AACyC;;AAAhB;AAAA;;AAAA;AAAA;AAAlB;;AAAA;AAAP;AAC4C;;AAAjB;AAAA;;AAAA;AAAA;AAApB;;AAAA;AAAP;;AAER;;;AAqBY;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AADJ;AAgBA;;AAAA;AAER;;;AAmCe;;AAAuB;;AAAvB;AAAP;AACO;;AAAA;;AAAc;;;;AAAd;AAAP;AACO;;AAAA;;AAAe;;;;AAAf;AAAP;AACO;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAP;AAEI;;AAAA;;AAAA;AAAJ;AAGI;;AAAA;AACE;;AAAA;AADF;AAEE;;AAAA;AAFF;AAAA;;AAAA;AAIE;;AAAA;AAJF;AAKE;;AAAA;AALF;AAME;;AAAA;AANF;AAOE;;AAAA;AAPF;AAQE;;AAAA;AARF;AASE;;AAAA;AATF;AAUE;;AAAA;AAVF;AAWE;;AAAA;AAXF;AAYE;;AAAA;AAZF;AAaE;;AAAA;AAbF;AAcE;;AAAA;AAdF;AAAA;;AAAA;AAgBE;;AAAA;AAhBF;AAiBE;;AAAA;AAjBF;AAkBE;;AAAA;AAlBF;AAmBE;;AAAA;AAnBF;AADG;AAAP;AAuBR;;;AAEe;;;;;;;;AAAA;;AAAA;AAAkB;;;AAAlB;AAAP;AAjRR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA+QK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA/QL;;;AAAA;;;AA+QK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAltCA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvKL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAuKK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAjDA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtHL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAsHK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlGL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAkGK;;;AAAA;;;;AAbA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArFL;;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAqFK;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAjBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApEL;;;AAAA;AAAA;;AAoEK;;;AAAA;;;;AA1BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1CL;;;AA0CK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA1CL;;;AA0BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArBL;;;AAAA;AAAA;;;AAAA;;;AAqBK;;;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAhBL;;;AAgBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAhBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;AAuDK;;AAAA;AAAA;AAAA;AAAA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.abi_routing.contract.Reference.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"asa\" 0x 0x07 0x01040023 \"local_uint\" \"local_bytes\" 0x00000000000001c8"
    },
    "58": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "60": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "63": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.__init__",
      "op": "callsub __init__"
    },
    "66": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "69": {
      "op": "return",
      "stack_out": []
    },
    "70": {
      "subroutine": "test_cases.abi_routing.contract.Reference.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "op": "bytec_1 // \"asa\"",
      "defined_out": [
        "\"asa\""
      ],
      "stack_out": [
        "\"asa\""
      ]
    },
    "71": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "\"asa\"",
        "123"
      ],
      "stack_out": [
        "\"asa\"",
        "123"
      ]
    },
    "73": {
      "op": "app_global_put",
      "stack_out": []
    },
    "74": {
      "op": "pushbytes \"an_int\"",
      "defined_out": [
        "\"an_int\""
      ],
      "stack_out": [
        "\"an_int\""
      ]
    },
    "82": {
      "op": "intc_3 // 2",
      "defined_out": [
        "\"an_int\"",
        "2"
      ],
      "stack_out": [
        "\"an_int\"",
        "2"
      ]
    },
    "83": {
      "op": "app_global_put",
      "stack_out": []
    },
    "84": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "85": {
      "op": "bytec_3 // 0x07",
      "defined_out": [
        "0x",
        "0x07"
      ],
      "stack_out": [
        "0x",
        "0x07"
      ]
    },
    "86": {
      "op": "concat",
      "defined_out": [
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0"
      ]
    },
    "87": {
      "op": "pushbytes 0x08",
      "defined_out": [
        "0x08",
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0",
        "0x08"
      ]
    },
    "90": {
      "op": "concat",
      "defined_out": [
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0"
      ]
    },
    "91": {
      "op": "pushbytes 0x09",
      "defined_out": [
        "0x09",
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0",
        "0x09"
      ]
    },
    "94": {
      "op": "concat",
      "defined_out": [
        "result%2#0"
      ],
      "stack_out": [
        "result%2#0"
      ]
    },
    "95": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "result%2#0",
        "0x"
      ]
    },
    "96": {
      "op": "swap",
      "stack_out": [
        "0x",
        "result%2#0"
      ]
    },
    "97": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "98": {
      "op": "pushbytes \"some_bytes\"",
      "defined_out": [
        "\"some_bytes\"",
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "\"some_bytes\""
      ]
    },
    "110": {
      "op": "swap",
      "stack_out": [
        "\"some_bytes\"",
        "array_data%0#0"
      ]
    },
    "111": {
      "op": "app_global_put",
      "stack_out": []
    },
    "112": {
      "op": "txn Sender",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "114": {
      "op": "pushbytes \"creator\"",
      "defined_out": [
        "\"creator\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"creator\""
      ]
    },
    "123": {
      "op": "swap",
      "stack_out": [
        "\"creator\"",
        "materialized_values%0#0"
      ]
    },
    "124": {
      "op": "app_global_put",
      "stack_out": []
    },
    "125": {
      "op": "pushbytes \"app\"",
      "defined_out": [
        "\"app\""
      ],
      "stack_out": [
        "\"app\""
      ]
    },
    "130": {
      "op": "pushint 123 // 123",
      "stack_out": [
        "\"app\"",
        "123"
      ]
    },
    "132": {
      "op": "app_global_put",
      "stack_out": []
    },
    "133": {
      "op": "pushbytes 0x189392c5 // method \"get(uint64,byte[])byte[]\"",
      "defined_out": [
        "Method(get(uint64,byte[])byte[])"
      ],
      "stack_out": [
        "Method(get(uint64,byte[])byte[])"
      ]
    },
    "139": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "140": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "141": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "142": {
      "error": "has method selector",
      "op": "assert // has method selector",
      "stack_out": []
    },
    "143": {
      "op": "bytec 4 // method \"opt_in(uint64,byte[])void\"",
      "defined_out": [
        "Method(opt_in(uint64,byte[])void)"
      ],
      "stack_out": [
        "Method(opt_in(uint64,byte[])void)"
      ]
    },
    "145": {
      "op": "dup",
      "stack_out": [
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_in(uint64,byte[])void)"
      ]
    },
    "146": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "147": {
      "error": "has method selector for method reference",
      "op": "assert // has method selector for method reference",
      "stack_out": []
    },
    "148": {
      "retsub": true,
      "op": "retsub"
    },
    "149": {
      "subroutine": "test_cases.abi_routing.contract.Reference.noop_with_uint64",
      "params": {
        "a#0": "bytes"
      },
      "block": "noop_with_uint64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "152": {
      "block": "noop_with_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "154": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "155": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "156": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "157": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "158": {
      "op": "dup",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "159": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "160": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "161": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "162": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "163": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "7"
      ]
    },
    "165": {
      "op": "intc_1 // 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "7",
        "1"
      ]
    },
    "166": {
      "op": "extract3",
      "defined_out": [
        "uint8%0#0"
      ],
      "stack_out": [
        "uint8%0#0"
      ]
    },
    "167": {
      "retsub": true,
      "op": "retsub"
    },
    "168": {
      "subroutine": "test_cases.abi_routing.contract.Reference.opt_in",
      "params": {
        "uint#0": "uint64",
        "bites#0": "bytes"
      },
      "block": "opt_in",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "171": {
      "block": "opt_in_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "173": {
      "op": "bytec 5 // \"local_uint\"",
      "defined_out": [
        "\"local_uint\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"local_uint\""
      ]
    },
    "175": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"local_uint\"",
        "tmp%0#0",
        "uint#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"local_uint\"",
        "uint#0 (copy)"
      ]
    },
    "177": {
      "op": "app_local_put",
      "stack_out": []
    },
    "178": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "180": {
      "op": "bytec 6 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"local_bytes\""
      ]
    },
    "182": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"local_bytes\"",
        "bites#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"local_bytes\"",
        "bites#0 (copy)"
      ]
    },
    "184": {
      "op": "app_local_put",
      "stack_out": []
    },
    "185": {
      "retsub": true,
      "op": "retsub"
    },
    "186": {
      "subroutine": "test_cases.abi_routing.contract.Reference.full_abi_config",
      "params": {
        "a#0": "bytes"
      },
      "block": "full_abi_config",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "189": {
      "block": "full_abi_config_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "191": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "193": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "194": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "195": {
      "op": "dup",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "196": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "197": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "198": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "199": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "200": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "7"
      ]
    },
    "202": {
      "op": "intc_1 // 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "7",
        "1"
      ]
    },
    "203": {
      "op": "extract3",
      "defined_out": [
        "uint8%0#0"
      ],
      "stack_out": [
        "uint8%0#0"
      ]
    },
    "204": {
      "retsub": true,
      "op": "retsub"
    },
    "205": {
      "subroutine": "test_cases.abi_routing.contract.Reference.mixed_oca",
      "params": {
        "a#0": "bytes"
      },
      "block": "mixed_oca",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "208": {
      "block": "mixed_oca_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "210": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "211": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "212": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "213": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "214": {
      "op": "dup",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "215": {
      "op": "bitlen",
      "defined_out": [
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0"
      ]
    },
    "216": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "bitlen%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "bitlen%0#0",
        "8"
      ]
    },
    "217": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "218": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "219": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "7"
      ]
    },
    "221": {
      "op": "intc_1 // 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "7",
        "1"
      ]
    },
    "222": {
      "op": "extract3",
      "defined_out": [
        "uint8%0#0"
      ],
      "stack_out": [
        "uint8%0#0"
      ]
    },
    "223": {
      "retsub": true,
      "op": "retsub"
    },
    "224": {
      "subroutine": "test_cases.abi_routing.contract.Reference.bare_abi_config",
      "params": {},
      "block": "bare_abi_config_block@0",
      "stack_in": [],
      "op": "pushbytes \"Hello World\"",
      "defined_out": [
        "\"Hello World\""
      ],
      "stack_out": [
        "\"Hello World\""
      ]
    },
    "237": {
      "op": "log",
      "stack_out": []
    },
    "238": {
      "retsub": true,
      "op": "retsub"
    },
    "239": {
      "subroutine": "test_cases.abi_routing.contract.Reference.opt_into_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "opt_into_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "242": {
      "block": "opt_into_asset_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "244": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "246": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "247": {
      "error": "Only creator can opt in to ASA",
      "op": "assert // Only creator can opt in to ASA",
      "stack_out": []
    },
    "248": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "249": {
      "op": "bytec_1 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa\""
      ]
    },
    "250": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "251": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "252": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "253": {
      "error": "ASA already opted in",
      "op": "assert // ASA already opted in",
      "stack_out": []
    },
    "254": {
      "op": "bytec_1 // \"asa\"",
      "stack_out": [
        "\"asa\""
      ]
    },
    "255": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ]
    },
    "257": {
      "op": "app_global_put",
      "stack_out": []
    },
    "258": {
      "op": "itxn_begin"
    },
    "259": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "261": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "263": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "264": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "266": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "268": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "270": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "272": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "274": {
      "op": "itxn_submit"
    },
    "275": {
      "retsub": true,
      "op": "retsub"
    },
    "276": {
      "subroutine": "test_cases.abi_routing.contract.Reference.with_transactions",
      "params": {
        "asset#0": "uint64",
        "an_int#0": "bytes",
        "pay#0": "uint64",
        "another_int#0": "bytes"
      },
      "block": "with_transactions",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "279": {
      "block": "with_transactions_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "280": {
      "op": "bytec_1 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa\""
      ]
    },
    "281": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "282": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "283": {
      "op": "frame_dig -4",
      "defined_out": [
        "asset#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "asset#0 (copy)"
      ]
    },
    "285": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "286": {
      "error": "is correct asset",
      "op": "assert // is correct asset",
      "stack_out": []
    },
    "287": {
      "op": "frame_dig -3",
      "defined_out": [
        "an_int#0 (copy)"
      ],
      "stack_out": [
        "an_int#0 (copy)"
      ]
    },
    "289": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "290": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "291": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "292": {
      "error": "is correct int",
      "op": "assert // is correct int",
      "stack_out": []
    },
    "293": {
      "op": "frame_dig -2",
      "defined_out": [
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "295": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "297": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "299": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "300": {
      "error": "is payment to app",
      "op": "assert // is payment to app",
      "stack_out": []
    },
    "301": {
      "op": "frame_dig -1",
      "defined_out": [
        "another_int#0 (copy)"
      ],
      "stack_out": [
        "another_int#0 (copy)"
      ]
    },
    "303": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "304": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "2"
      ]
    },
    "305": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "306": {
      "error": "is correct int",
      "op": "assert // is correct int",
      "stack_out": []
    },
    "307": {
      "retsub": true,
      "op": "retsub"
    },
    "308": {
      "subroutine": "test_cases.abi_routing.contract.Reference.compare_assets",
      "params": {
        "asset_a#0": "uint64",
        "asset_b#0": "uint64"
      },
      "block": "compare_assets",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "311": {
      "block": "compare_assets_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "asset_a#0 (copy)"
      ],
      "stack_out": [
        "asset_a#0 (copy)"
      ]
    },
    "313": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_a#0 (copy)",
        "asset_b#0 (copy)"
      ],
      "stack_out": [
        "asset_a#0 (copy)",
        "asset_b#0 (copy)"
      ]
    },
    "315": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "316": {
      "error": "asset a == b",
      "op": "assert // asset a == b",
      "stack_out": []
    },
    "317": {
      "retsub": true,
      "op": "retsub"
    },
    "318": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_address",
      "params": {},
      "block": "get_address_block@0",
      "stack_in": [],
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "320": {
      "retsub": true,
      "op": "retsub"
    },
    "321": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_asset",
      "params": {},
      "block": "get_asset_block@0",
      "stack_in": [],
      "op": "bytec 7 // 0x00000000000001c8",
      "defined_out": [
        "0x00000000000001c8"
      ],
      "stack_out": [
        "0x00000000000001c8"
      ]
    },
    "323": {
      "retsub": true,
      "op": "retsub"
    },
    "324": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_app",
      "params": {},
      "block": "get_app_block@0",
      "stack_in": [],
      "op": "bytec 7 // 0x00000000000001c8",
      "defined_out": [
        "0x00000000000001c8"
      ],
      "stack_out": [
        "0x00000000000001c8"
      ]
    },
    "326": {
      "retsub": true,
      "op": "retsub"
    },
    "327": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_a_int",
      "params": {},
      "block": "get_a_int_block@0",
      "stack_in": [],
      "op": "pushbytes 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003"
      ],
      "stack_out": [
        "0x0000000000000003"
      ]
    },
    "337": {
      "retsub": true,
      "op": "retsub"
    },
    "338": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_default_args",
      "params": {
        "asset_from_storage#0": "uint64",
        "asset_from_function#0": "uint64",
        "account_from_storage#0": "bytes",
        "account_from_function#0": "bytes",
        "application_from_storage#0": "uint64",
        "application_from_function#0": "uint64",
        "bytes_from_storage#0": "bytes",
        "int_from_storage#0": "bytes",
        "int_from_function#0": "bytes",
        "int_from_const#0": "bytes",
        "str_from_const#0": "bytes",
        "int_from_local#0": "uint64",
        "bytes_from_local#0": "bytes"
      },
      "block": "method_with_default_args",
      "stack_in": [],
      "op": "proto 13 0"
    },
    "341": {
      "block": "method_with_default_args_block@0",
      "stack_in": [],
      "op": "frame_dig -13",
      "defined_out": [
        "asset_from_storage#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0 (copy)"
      ]
    },
    "343": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "123",
        "asset_from_storage#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0 (copy)",
        "123"
      ]
    },
    "345": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "346": {
      "error": "wrong asset from storage",
      "op": "assert // wrong asset from storage",
      "stack_out": []
    },
    "347": {
      "op": "frame_dig -12",
      "defined_out": [
        "asset_from_function#0 (copy)"
      ],
      "stack_out": [
        "asset_from_function#0 (copy)"
      ]
    },
    "349": {
      "op": "pushint 456 // 456",
      "defined_out": [
        "456",
        "asset_from_function#0 (copy)"
      ],
      "stack_out": [
        "asset_from_function#0 (copy)",
        "456"
      ]
    },
    "352": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "353": {
      "error": "wrong asset from function",
      "op": "assert // wrong asset from function",
      "stack_out": []
    },
    "354": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "356": {
      "op": "frame_dig -11",
      "defined_out": [
        "account_from_storage#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "account_from_storage#0 (copy)"
      ]
    },
    "358": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "359": {
      "error": "wrong account from storage",
      "op": "assert // wrong account from storage",
      "stack_out": []
    },
    "360": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "362": {
      "op": "frame_dig -10",
      "defined_out": [
        "account_from_function#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "account_from_function#0 (copy)"
      ]
    },
    "364": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "365": {
      "error": "wrong account from function",
      "op": "assert // wrong account from function",
      "stack_out": []
    },
    "366": {
      "op": "frame_dig -9",
      "defined_out": [
        "application_from_storage#0 (copy)"
      ],
      "stack_out": [
        "application_from_storage#0 (copy)"
      ]
    },
    "368": {
      "op": "pushint 123 // 123",
      "stack_out": [
        "application_from_storage#0 (copy)",
        "123"
      ]
    },
    "370": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "371": {
      "error": "wrong application from storage",
      "op": "assert // wrong application from storage",
      "stack_out": []
    },
    "372": {
      "op": "frame_dig -8",
      "defined_out": [
        "application_from_function#0 (copy)"
      ],
      "stack_out": [
        "application_from_function#0 (copy)"
      ]
    },
    "374": {
      "op": "pushint 456 // 456",
      "stack_out": [
        "application_from_function#0 (copy)",
        "456"
      ]
    },
    "377": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "378": {
      "error": "wrong application from function",
      "op": "assert // wrong application from function",
      "stack_out": []
    },
    "379": {
      "op": "frame_dig -7",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "381": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "382": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "0",
        "1"
      ]
    },
    "383": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "384": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "1"
      ]
    },
    "385": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "386": {
      "op": "bytec_3 // 0x07",
      "defined_out": [
        "0x07",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x07"
      ]
    },
    "387": {
      "op": "b==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "388": {
      "error": "wrong 0th byte from storage",
      "op": "assert // wrong 0th byte from storage",
      "stack_out": []
    },
    "389": {
      "op": "frame_dig -7",
      "defined_out": [
        "array_head_and_tail%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0"
      ]
    },
    "391": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%1#0",
        "1"
      ]
    },
    "392": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%1#0",
        "1",
        "1"
      ]
    },
    "393": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "394": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "1"
      ]
    },
    "395": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "396": {
      "op": "pushbytes 0x08",
      "defined_out": [
        "0x08",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "0x08"
      ]
    },
    "399": {
      "op": "b==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "400": {
      "error": "wrong 1st byte from storage",
      "op": "assert // wrong 1st byte from storage",
      "stack_out": []
    },
    "401": {
      "op": "frame_dig -7",
      "defined_out": [
        "array_head_and_tail%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%2#0"
      ]
    },
    "403": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%2#0",
        "2"
      ]
    },
    "404": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%2#0",
        "2",
        "1"
      ]
    },
    "405": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ]
    },
    "406": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "1"
      ]
    },
    "407": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "reinterpret_biguint%4#0"
      ]
    },
    "408": {
      "op": "pushbytes 0x09",
      "defined_out": [
        "0x09",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "reinterpret_biguint%4#0",
        "0x09"
      ]
    },
    "411": {
      "op": "b==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "412": {
      "error": "wrong 2nd byte from storage",
      "op": "assert // wrong 2nd byte from storage",
      "stack_out": []
    },
    "413": {
      "op": "frame_dig -6",
      "defined_out": [
        "int_from_storage#0 (copy)"
      ],
      "stack_out": [
        "int_from_storage#0 (copy)"
      ]
    },
    "415": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "416": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%11#0",
        "2"
      ]
    },
    "417": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "418": {
      "error": "wrong int from storage",
      "op": "assert // wrong int from storage",
      "stack_out": []
    },
    "419": {
      "op": "frame_dig -5",
      "defined_out": [
        "int_from_function#0 (copy)"
      ],
      "stack_out": [
        "int_from_function#0 (copy)"
      ]
    },
    "421": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "422": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "3"
      ]
    },
    "424": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "425": {
      "error": "wrong int from function",
      "op": "assert // wrong int from function",
      "stack_out": []
    },
    "426": {
      "op": "frame_dig -4",
      "defined_out": [
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "reinterpret_biguint%6#0"
      ]
    },
    "428": {
      "op": "pushbytes 0x0000007b",
      "defined_out": [
        "0x0000007b",
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "reinterpret_biguint%6#0",
        "0x0000007b"
      ]
    },
    "434": {
      "op": "b==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "435": {
      "op": "assert",
      "stack_out": []
    },
    "436": {
      "op": "frame_dig -3",
      "defined_out": [
        "str_from_const#0 (copy)"
      ],
      "stack_out": [
        "str_from_const#0 (copy)"
      ]
    },
    "438": {
      "op": "pushbytes 0x0003616263",
      "defined_out": [
        "0x0003616263",
        "str_from_const#0 (copy)"
      ],
      "stack_out": [
        "str_from_const#0 (copy)",
        "0x0003616263"
      ]
    },
    "445": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "446": {
      "op": "assert",
      "stack_out": []
    },
    "447": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "449": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%17#0",
        "0"
      ]
    },
    "450": {
      "op": "bytec 5 // \"local_uint\"",
      "defined_out": [
        "\"local_uint\"",
        "0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0",
        "\"local_uint\""
      ]
    },
    "452": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "453": {
      "error": "check self.local_uint exists for account",
      "op": "assert // check self.local_uint exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "454": {
      "op": "frame_dig -2",
      "defined_out": [
        "int_from_local#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "int_from_local#0 (copy)"
      ]
    },
    "456": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "457": {
      "op": "assert",
      "stack_out": []
    },
    "458": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "460": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "461": {
      "op": "bytec 6 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0",
        "\"local_bytes\""
      ]
    },
    "463": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "464": {
      "error": "check self.local_bytes exists for account",
      "op": "assert // check self.local_bytes exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "465": {
      "op": "frame_dig -1",
      "defined_out": [
        "bytes_from_local#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "bytes_from_local#0 (copy)"
      ]
    },
    "467": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "468": {
      "op": "assert",
      "stack_out": []
    },
    "469": {
      "retsub": true,
      "op": "retsub"
    },
    "470": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_15_args",
      "params": {
        "one#0": "uint64",
        "two#0": "uint64",
        "three#0": "uint64",
        "four#0": "uint64",
        "five#0": "uint64",
        "six#0": "uint64",
        "seven#0": "uint64",
        "eight#0": "uint64",
        "nine#0": "uint64",
        "ten#0": "uint64",
        "eleven#0": "uint64",
        "twelve#0": "uint64",
        "thirteen#0": "uint64",
        "fourteen#0": "uint64",
        "fifteen#0": "bytes"
      },
      "block": "method_with_15_args",
      "stack_in": [],
      "op": "proto 15 1"
    },
    "473": {
      "block": "method_with_15_args_block@0",
      "stack_in": [],
      "op": "frame_dig -15",
      "defined_out": [
        "one#0 (copy)"
      ],
      "stack_out": [
        "one#0 (copy)"
      ]
    },
    "475": {
      "op": "frame_dig -14",
      "defined_out": [
        "one#0 (copy)",
        "two#0 (copy)"
      ],
      "stack_out": [
        "one#0 (copy)",
        "two#0 (copy)"
      ]
    },
    "477": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "478": {
      "op": "frame_dig -13",
      "defined_out": [
        "three#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "three#0 (copy)"
      ]
    },
    "480": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "481": {
      "op": "frame_dig -12",
      "defined_out": [
        "four#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "four#0 (copy)"
      ]
    },
    "483": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "484": {
      "op": "frame_dig -11",
      "defined_out": [
        "five#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "five#0 (copy)"
      ]
    },
    "486": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "487": {
      "op": "frame_dig -10",
      "defined_out": [
        "six#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "six#0 (copy)"
      ]
    },
    "489": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "490": {
      "op": "frame_dig -9",
      "defined_out": [
        "seven#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "seven#0 (copy)"
      ]
    },
    "492": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "493": {
      "op": "frame_dig -8",
      "defined_out": [
        "eight#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "eight#0 (copy)"
      ]
    },
    "495": {
      "op": "+",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "496": {
      "op": "frame_dig -7",
      "defined_out": [
        "nine#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "nine#0 (copy)"
      ]
    },
    "498": {
      "op": "+",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "499": {
      "op": "frame_dig -6",
      "defined_out": [
        "ten#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "ten#0 (copy)"
      ]
    },
    "501": {
      "op": "+",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "502": {
      "op": "frame_dig -5",
      "defined_out": [
        "eleven#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "eleven#0 (copy)"
      ]
    },
    "504": {
      "op": "+",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "505": {
      "op": "frame_dig -4",
      "defined_out": [
        "tmp%9#0",
        "twelve#0 (copy)"
      ],
      "stack_out": [
        "tmp%9#0",
        "twelve#0 (copy)"
      ]
    },
    "507": {
      "op": "+",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "508": {
      "op": "frame_dig -3",
      "defined_out": [
        "thirteen#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "thirteen#0 (copy)"
      ]
    },
    "510": {
      "op": "+",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "511": {
      "op": "frame_dig -2",
      "defined_out": [
        "fourteen#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "fourteen#0 (copy)"
      ]
    },
    "513": {
      "op": "+",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "514": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "0"
      ]
    },
    "515": {
      "op": "!=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "516": {
      "op": "assert",
      "stack_out": []
    },
    "517": {
      "op": "frame_dig -1",
      "defined_out": [
        "fifteen#0 (copy)"
      ],
      "stack_out": [
        "fifteen#0 (copy)"
      ]
    },
    "519": {
      "retsub": true,
      "op": "retsub"
    },
    "520": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_more_than_15_args",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "uint64",
        "asset#0": "uint64",
        "e#0": "bytes",
        "f#0": "bytes",
        "pay#0": "uint64",
        "g#0": "bytes",
        "h#0": "bytes",
        "i#0": "bytes",
        "j#0": "bytes",
        "k#0": "bytes",
        "l#0": "bytes",
        "m#0": "bytes",
        "n#0": "bytes",
        "o#0": "bytes",
        "p#0": "uint64",
        "q#0": "bytes",
        "r#0": "bytes",
        "s#0": "bytes",
        "t#0": "bytes",
        "asset2#0": "uint64",
        "pay2#0": "uint64",
        "u#0": "bytes",
        "v#0": "bytes"
      },
      "block": "method_with_more_than_15_args",
      "stack_in": [],
      "op": "proto 26 1"
    },
    "523": {
      "block": "method_with_more_than_15_args_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "525": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "16"
      ]
    },
    "527": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "528": {
      "op": "assert",
      "stack_out": []
    },
    "529": {
      "op": "frame_dig -19",
      "defined_out": [
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "531": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "533": {
      "op": "pushint 100000 // 100000",
      "defined_out": [
        "100000",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "100000"
      ]
    },
    "537": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "538": {
      "op": "assert",
      "stack_out": []
    },
    "539": {
      "op": "frame_dig -3",
      "defined_out": [
        "pay2#0 (copy)"
      ],
      "stack_out": [
        "pay2#0 (copy)"
      ]
    },
    "541": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "543": {
      "op": "pushint 200000 // 200000",
      "defined_out": [
        "200000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "200000"
      ]
    },
    "547": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "548": {
      "op": "assert",
      "stack_out": []
    },
    "549": {
      "op": "frame_dig -22",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "551": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)",
        "0"
      ]
    },
    "552": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "553": {
      "op": "assert",
      "stack_out": []
    },
    "554": {
      "op": "frame_dig -4",
      "defined_out": [
        "asset2#0 (copy)"
      ],
      "stack_out": [
        "asset2#0 (copy)"
      ]
    },
    "556": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset2#0 (copy)",
        "0"
      ]
    },
    "557": {
      "op": "!=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "558": {
      "op": "assert",
      "stack_out": []
    },
    "559": {
      "op": "frame_dig -6",
      "defined_out": [
        "s#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)"
      ]
    },
    "561": {
      "op": "frame_dig -5",
      "defined_out": [
        "s#0 (copy)",
        "t#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)",
        "t#0 (copy)"
      ]
    },
    "563": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "564": {
      "op": "log",
      "stack_out": []
    },
    "565": {
      "op": "frame_dig -26",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "567": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "568": {
      "op": "frame_dig -25",
      "defined_out": [
        "b#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "b#0 (copy)"
      ]
    },
    "570": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "571": {
      "op": "+",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "572": {
      "op": "frame_dig -24",
      "defined_out": [
        "c#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "c#0 (copy)"
      ]
    },
    "574": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "575": {
      "op": "+",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "576": {
      "op": "frame_dig -23",
      "defined_out": [
        "d#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "d#0 (copy)"
      ]
    },
    "578": {
      "op": "+",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "579": {
      "op": "frame_dig -21",
      "defined_out": [
        "e#0 (copy)",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "e#0 (copy)"
      ]
    },
    "581": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "582": {
      "op": "+",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "583": {
      "op": "frame_dig -20",
      "defined_out": [
        "f#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "f#0 (copy)"
      ]
    },
    "585": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "586": {
      "op": "+",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "587": {
      "op": "frame_dig -18",
      "defined_out": [
        "g#0 (copy)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "g#0 (copy)"
      ]
    },
    "589": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "590": {
      "op": "+",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "591": {
      "op": "frame_dig -17",
      "defined_out": [
        "h#0 (copy)",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "h#0 (copy)"
      ]
    },
    "593": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "594": {
      "op": "+",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "595": {
      "op": "frame_dig -16",
      "defined_out": [
        "i#0 (copy)",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "i#0 (copy)"
      ]
    },
    "597": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "598": {
      "op": "+",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "599": {
      "op": "frame_dig -15",
      "defined_out": [
        "j#0 (copy)",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "j#0 (copy)"
      ]
    },
    "601": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "602": {
      "op": "+",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "603": {
      "op": "frame_dig -14",
      "defined_out": [
        "k#0 (copy)",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "k#0 (copy)"
      ]
    },
    "605": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "606": {
      "op": "+",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "607": {
      "op": "frame_dig -13",
      "defined_out": [
        "l#0 (copy)",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "l#0 (copy)"
      ]
    },
    "609": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "610": {
      "op": "+",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "611": {
      "op": "frame_dig -12",
      "defined_out": [
        "m#0 (copy)",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "m#0 (copy)"
      ]
    },
    "613": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "614": {
      "op": "+",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "615": {
      "op": "frame_dig -11",
      "defined_out": [
        "n#0 (copy)",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "n#0 (copy)"
      ]
    },
    "617": {
      "op": "btoi",
      "defined_out": [
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "618": {
      "op": "+",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "619": {
      "op": "frame_dig -10",
      "defined_out": [
        "o#0 (copy)",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "o#0 (copy)"
      ]
    },
    "621": {
      "op": "btoi",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "622": {
      "op": "+",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "623": {
      "op": "frame_dig -9",
      "defined_out": [
        "p#0 (copy)",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "p#0 (copy)"
      ]
    },
    "625": {
      "op": "+",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "626": {
      "op": "frame_dig -8",
      "defined_out": [
        "q#0 (copy)",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "q#0 (copy)"
      ]
    },
    "628": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "629": {
      "op": "+",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "630": {
      "op": "frame_dig -7",
      "defined_out": [
        "r#0 (copy)",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "r#0 (copy)"
      ]
    },
    "632": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "633": {
      "op": "+",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "634": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%41#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%41#0",
        "u#0 (copy)"
      ]
    },
    "636": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0"
      ]
    },
    "637": {
      "op": "+",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "638": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%43#0",
        "v#0 (copy)"
      ],
      "stack_out": [
        "tmp%43#0",
        "v#0 (copy)"
      ]
    },
    "640": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "641": {
      "op": "+",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "642": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "643": {
      "retsub": true,
      "op": "retsub"
    },
    "644": {
      "subroutine": "test_cases.abi_routing.contract.Reference.hello_with_algopy_string",
      "params": {
        "name#0": "bytes"
      },
      "block": "hello_with_algopy_string",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "647": {
      "block": "hello_with_algopy_string_block@0",
      "stack_in": [],
      "op": "pushbytes \"Hello \"",
      "defined_out": [
        "\"Hello \""
      ],
      "stack_out": [
        "\"Hello \""
      ]
    },
    "655": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Hello \"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"Hello \"",
        "name#0 (copy)"
      ]
    },
    "657": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "658": {
      "op": "pushbytes \"!\"",
      "defined_out": [
        "\"!\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"!\""
      ]
    },
    "661": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "662": {
      "retsub": true,
      "op": "retsub"
    },
    "663": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "665": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "666": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "667": {
      "op": "bz approval_program_bare_routing@20",
      "stack_out": []
    },
    "670": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "673": {
      "op": "pushbytes 0xd78db35b // method \"noop_with_uint64(uint64)uint8\"",
      "defined_out": [
        "Method(noop_with_uint64(uint64)uint8)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)"
      ]
    },
    "679": {
      "op": "bytec 4 // method \"opt_in(uint64,byte[])void\"",
      "defined_out": [
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)"
      ]
    },
    "681": {
      "op": "pushbytes 0x3a5353fc // method \"all_the_things(uint64)uint8\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)"
      ]
    },
    "687": {
      "op": "pushbytes 0xd2f2f53c // method \"mixed_oca(uint64)uint8\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)"
      ]
    },
    "693": {
      "op": "pushbytes 0x2826b202 // method \"opt_into_asset(asset)void\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(asset)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(asset)void)"
      ]
    },
    "699": {
      "op": "pushbytes 0x6f8e94cd // method \"with_transactions(asset,uint64,pay,uint64)void\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)"
      ]
    },
    "705": {
      "op": "pushbytes 0x17dc68f0 // method \"compare_assets(asset,asset)void\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(compare_assets(asset,asset)void)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "Method(compare_assets(asset,asset)void)"
      ]
    },
    "711": {
      "op": "pushbytes 0x7fad9780 // method \"get_address()address\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)"
      ]
    },
    "717": {
      "op": "pushbytes 0x2fdf95a4 // method \"get_asset()uint64\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)"
      ]
    },
    "723": {
      "op": "pushbytes 0x1399826c // method \"get_application()uint64\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)"
      ]
    },
    "729": {
      "op": "pushbytes 0xa1300821 // method \"get_an_int()uint64\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)"
      ]
    },
    "735": {
      "op": "pushbytes 0x670dc055 // method \"method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string,uint64,byte[])void\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)"
      ]
    },
    "741": {
      "op": "pushbytes 0x5732195a // method \"method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[]\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])"
      ]
    },
    "747": {
      "op": "pushbytes 0xd17552fb // method \"method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64)"
      ]
    },
    "753": {
      "op": "pushbytes 0x9023bb19 // method \"hello_with_algopy_string(string)string\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(hello_with_algopy_string(string)string)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64)",
        "Method(hello_with_algopy_string(string)string)"
      ]
    },
    "759": {
      "op": "uncover 15",
      "stack_out": [
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_into_asset(asset)void)",
        "Method(with_transactions(asset,uint64,pay,uint64)void)",
        "Method(compare_assets(asset,asset)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64)",
        "Method(hello_with_algopy_string(string)string)",
        "tmp%2#0"
      ]
    },
    "761": {
      "op": "match approval_program_noop_with_uint64_route@3 approval_program_opt_in_route@4 approval_program_all_the_things_route@5 approval_program_mixed_oca_route@6 approval_program_opt_into_asset_route@7 approval_program_with_transactions_route@8 approval_program_compare_assets_route@9 approval_program_get_address_route@10 approval_program_get_asset_route@11 approval_program_get_application_route@12 approval_program_get_an_int_route@13 approval_program_method_with_default_args_route@14 approval_program_method_with_15_args_route@15 approval_program_method_with_more_than_15_args_route@16 approval_program_hello_with_algopy_string_route@17",
      "stack_out": []
    },
    "793": {
      "block": "approval_program_after_if_else@24",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "794": {
      "block": "approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "795": {
      "block": "approval_program_hello_with_algopy_string_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "797": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0",
        "NoOp"
      ]
    },
    "798": {
      "op": "==",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "799": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "800": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "802": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "0"
      ]
    },
    "803": {
      "op": "!=",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "804": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "805": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "808": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "811": {
      "callsub": "test_cases.abi_routing.contract.Reference.hello_with_algopy_string",
      "op": "callsub hello_with_algopy_string",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "814": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "815": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "816": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "817": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "820": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "821": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "822": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "823": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "824": {
      "op": "concat",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "825": {
      "op": "log",
      "stack_out": []
    },
    "826": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "827": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "830": {
      "block": "approval_program_method_with_more_than_15_args_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "832": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "NoOp"
      ]
    },
    "833": {
      "op": "==",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "834": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "835": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "837": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0",
        "0"
      ]
    },
    "838": {
      "op": "!=",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "839": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "840": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0"
      ]
    },
    "843": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0"
      ]
    },
    "846": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ]
    },
    "849": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%26#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%26#0"
      ]
    },
    "852": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0"
      ]
    },
    "853": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[1]%10#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "856": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%116#0"
      ]
    },
    "857": {
      "op": "txnas Assets",
      "defined_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0"
      ]
    },
    "859": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0"
      ]
    },
    "862": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0"
      ]
    },
    "865": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%118#0"
      ]
    },
    "867": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%118#0",
        "2"
      ]
    },
    "868": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0"
      ]
    },
    "869": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "870": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "872": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "873": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "874": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0"
      ]
    },
    "875": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0"
      ]
    },
    "878": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0"
      ]
    },
    "881": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0"
      ]
    },
    "884": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0"
      ]
    },
    "887": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0"
      ]
    },
    "890": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0"
      ]
    },
    "893": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0"
      ]
    },
    "896": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%119#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%119#0"
      ]
    },
    "899": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%119#0",
        "0"
      ]
    },
    "900": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%119#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%119#0",
        "0",
        "8"
      ]
    },
    "901": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0"
      ]
    },
    "902": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%121#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%121#0"
      ]
    },
    "905": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%121#0",
        "8"
      ]
    },
    "906": {
      "op": "dup",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%121#0",
        "8",
        "8"
      ]
    },
    "907": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0"
      ]
    },
    "908": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%123#0"
      ]
    },
    "911": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%123#0",
        "16"
      ]
    },
    "913": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%123#0",
        "16",
        "8"
      ]
    },
    "914": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%124#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%124#0"
      ]
    },
    "915": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0"
      ]
    },
    "916": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%126#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%126#0"
      ]
    },
    "919": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%126#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%126#0",
        "24"
      ]
    },
    "921": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%126#0",
        "24",
        "8"
      ]
    },
    "922": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0"
      ]
    },
    "923": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%128#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%128#0"
      ]
    },
    "926": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%128#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%128#0",
        "32"
      ]
    },
    "928": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%128#0",
        "32",
        "8"
      ]
    },
    "929": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0"
      ]
    },
    "930": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%130#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%130#0"
      ]
    },
    "933": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%130#0",
        "tmp%130#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%130#0",
        "tmp%130#0 (copy)"
      ]
    },
    "934": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%130#0",
        "tmp%130#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%130#0",
        "tmp%130#0 (copy)",
        "40"
      ]
    },
    "936": {
      "op": "extract_uint16",
      "defined_out": [
        "gtxn_idx%1#0",
        "item_start_offset%0#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%130#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%130#0",
        "item_start_offset%0#0"
      ]
    },
    "937": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "item_start_offset%0#0",
        "tmp%130#0"
      ]
    },
    "938": {
      "op": "dup",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "item_start_offset%0#0",
        "tmp%130#0",
        "tmp%130#0 (copy)"
      ]
    },
    "939": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "gtxn_idx%1#0",
        "item_start_offset%0#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%130#0",
        "tmp%130#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "item_start_offset%0#0",
        "tmp%130#0",
        "tmp%130#0 (copy)",
        "42"
      ]
    },
    "941": {
      "op": "extract_uint16",
      "defined_out": [
        "gtxn_idx%1#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%130#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "item_start_offset%0#0",
        "tmp%130#0",
        "item_end_offset%0#0"
      ]
    },
    "942": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tmp%130#0"
      ]
    },
    "943": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "item_end_offset%0#0",
        "tmp%130#0",
        "item_start_offset%0#0"
      ]
    },
    "945": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%130#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "947": {
      "op": "substring3",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%131#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%131#0"
      ]
    },
    "948": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0"
      ]
    },
    "951": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%133#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%133#0"
      ]
    },
    "954": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%133#0",
        "tmp%133#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%133#0",
        "tmp%133#0 (copy)"
      ]
    },
    "955": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%133#0",
        "tmp%133#0 (copy)",
        "42"
      ]
    },
    "957": {
      "op": "extract_uint16",
      "defined_out": [
        "gtxn_idx%1#0",
        "item_start_offset%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%133#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%133#0",
        "item_start_offset%1#0"
      ]
    },
    "958": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "item_start_offset%1#0",
        "tmp%133#0"
      ]
    },
    "959": {
      "op": "dup",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "item_start_offset%1#0",
        "tmp%133#0",
        "tmp%133#0 (copy)"
      ]
    },
    "960": {
      "op": "len",
      "defined_out": [
        "gtxn_idx%1#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%133#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "item_start_offset%1#0",
        "tmp%133#0",
        "item_end_offset%1#0"
      ]
    },
    "961": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "tmp%133#0"
      ]
    },
    "962": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "item_end_offset%1#0",
        "tmp%133#0",
        "item_start_offset%1#0"
      ]
    },
    "964": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%133#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "966": {
      "op": "substring3",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%134#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%134#0"
      ]
    },
    "967": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0"
      ]
    },
    "970": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%136#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%136#0"
      ]
    },
    "973": {
      "op": "pushint 44 // 44",
      "defined_out": [
        "44",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%136#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%136#0",
        "44"
      ]
    },
    "975": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "44",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%136#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%136#0",
        "44",
        "1"
      ]
    },
    "976": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%137#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%137#0"
      ]
    },
    "977": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%138#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%138#0"
      ]
    },
    "978": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0"
      ]
    },
    "980": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "tmp%140#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "tmp%140#0"
      ]
    },
    "982": {
      "op": "intc_1 // 1",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "tmp%140#0",
        "1"
      ]
    },
    "983": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0"
      ]
    },
    "984": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "985": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "987": {
      "op": "intc_1 // pay",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "988": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "989": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0"
      ]
    },
    "990": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "tmp%141#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%141#0"
      ]
    },
    "993": {
      "op": "pushint 45 // 45",
      "defined_out": [
        "45",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "tmp%141#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%141#0",
        "45"
      ]
    },
    "995": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%141#0",
        "45",
        "8"
      ]
    },
    "996": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "tmp%142#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0"
      ]
    },
    "997": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "tmp%142#0",
        "tmp%143#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%143#0"
      ]
    },
    "1000": {
      "op": "pushint 53 // 53",
      "defined_out": [
        "53",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "tmp%142#0",
        "tmp%143#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%143#0",
        "53"
      ]
    },
    "1002": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%143#0",
        "53",
        "8"
      ]
    },
    "1003": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%115#0",
        "tmp%117#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "tmp%142#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0"
      ]
    },
    "1004": {
      "op": "uncover 25",
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0"
      ]
    },
    "1006": {
      "op": "uncover 25",
      "stack_out": [
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0"
      ]
    },
    "1008": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ]
    },
    "1010": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0"
      ]
    },
    "1012": {
      "op": "uncover 25",
      "stack_out": [
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0"
      ]
    },
    "1014": {
      "op": "uncover 25",
      "stack_out": [
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0"
      ]
    },
    "1016": {
      "op": "uncover 25",
      "stack_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0"
      ]
    },
    "1018": {
      "op": "uncover 25",
      "stack_out": [
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0"
      ]
    },
    "1020": {
      "op": "uncover 25",
      "stack_out": [
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0"
      ]
    },
    "1022": {
      "op": "uncover 25",
      "stack_out": [
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0"
      ]
    },
    "1024": {
      "op": "uncover 25",
      "stack_out": [
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0"
      ]
    },
    "1026": {
      "op": "uncover 25",
      "stack_out": [
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0"
      ]
    },
    "1028": {
      "op": "uncover 25",
      "stack_out": [
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0"
      ]
    },
    "1030": {
      "op": "uncover 25",
      "stack_out": [
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0"
      ]
    },
    "1032": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0"
      ]
    },
    "1034": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0"
      ]
    },
    "1036": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0"
      ]
    },
    "1038": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0"
      ]
    },
    "1040": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0"
      ]
    },
    "1042": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0"
      ]
    },
    "1044": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0"
      ]
    },
    "1046": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0"
      ]
    },
    "1048": {
      "op": "uncover 25",
      "stack_out": [
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0"
      ]
    },
    "1050": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%142#0",
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0"
      ]
    },
    "1052": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%144#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0"
      ]
    },
    "1054": {
      "op": "uncover 25",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%115#0",
        "tmp%117#0",
        "reinterpret_bytes[8]%27#0",
        "reinterpret_bytes[8]%28#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%29#0",
        "reinterpret_bytes[8]%30#0",
        "reinterpret_bytes[8]%31#0",
        "reinterpret_bytes[8]%32#0",
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%120#0",
        "tmp%122#0",
        "tmp%125#0",
        "tmp%127#0",
        "tmp%129#0",
        "tmp%132#0",
        "tmp%135#0",
        "tmp%139#0",
        "gtxn_idx%2#0",
        "tmp%142#0",
        "tmp%144#0"
      ]
    },
    "1056": {
      "callsub": "test_cases.abi_routing.contract.Reference.method_with_more_than_15_args",
      "op": "callsub method_with_more_than_15_args",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "1059": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "0x151f7c75"
      ]
    },
    "1060": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%145#0"
      ]
    },
    "1061": {
      "op": "concat",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1062": {
      "op": "log",
      "stack_out": []
    },
    "1063": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1064": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1067": {
      "block": "approval_program_method_with_15_args_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "1069": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0",
        "NoOp"
      ]
    },
    "1070": {
      "op": "==",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "1071": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1072": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "1074": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0",
        "0"
      ]
    },
    "1075": {
      "op": "!=",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "1076": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1077": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1080": {
      "op": "btoi",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "1081": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "1084": {
      "op": "btoi",
      "defined_out": [
        "tmp%94#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0"
      ]
    },
    "1085": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%94#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "1088": {
      "op": "btoi",
      "defined_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0"
      ]
    },
    "1089": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "1092": {
      "op": "btoi",
      "defined_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0"
      ]
    },
    "1093": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%13#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "1096": {
      "op": "btoi",
      "defined_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0"
      ]
    },
    "1097": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "1100": {
      "op": "btoi",
      "defined_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ]
    },
    "1101": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%15#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "1104": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0"
      ]
    },
    "1105": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%100#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "1108": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0"
      ]
    },
    "1109": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[8]%17#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "1112": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ]
    },
    "1113": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "1116": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0"
      ]
    },
    "1117": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[8]%19#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "1120": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0"
      ]
    },
    "1121": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_bytes[8]%20#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "1124": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0"
      ]
    },
    "1125": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "reinterpret_bytes[8]%21#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "1128": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0"
      ]
    },
    "1129": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "reinterpret_bytes[8]%22#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "1132": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0"
      ]
    },
    "1133": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0"
      ]
    },
    "1136": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0"
      ]
    },
    "1139": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0"
      ]
    },
    "1141": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0"
      ]
    },
    "1143": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0"
      ]
    },
    "1145": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0"
      ]
    },
    "1147": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0"
      ]
    },
    "1149": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0"
      ]
    },
    "1151": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0"
      ]
    },
    "1153": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0"
      ]
    },
    "1155": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ]
    },
    "1157": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0"
      ]
    },
    "1159": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0"
      ]
    },
    "1161": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0"
      ]
    },
    "1163": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%107#0",
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0"
      ]
    },
    "1165": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%109#0",
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0"
      ]
    },
    "1167": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%109#0"
      ]
    },
    "1169": {
      "callsub": "test_cases.abi_routing.contract.Reference.method_with_15_args",
      "op": "callsub method_with_15_args",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1172": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1173": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "1174": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "1175": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "1178": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "1179": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1180": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "1181": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "1182": {
      "op": "concat",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "1183": {
      "op": "log",
      "stack_out": []
    },
    "1184": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1185": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1188": {
      "block": "approval_program_method_with_default_args_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1190": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "NoOp"
      ]
    },
    "1191": {
      "op": "==",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1192": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1193": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1195": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "0"
      ]
    },
    "1196": {
      "op": "!=",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "1197": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1198": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "1201": {
      "op": "btoi",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1202": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1204": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%5#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "1207": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0"
      ]
    },
    "1208": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0"
      ]
    },
    "1210": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%6#0",
        "tmp%75#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "1213": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%78#0"
      ]
    },
    "1214": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0"
      ]
    },
    "1216": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%7#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "1219": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%80#0"
      ]
    },
    "1220": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0"
      ]
    },
    "1222": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[1]%8#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "1225": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%82#0"
      ]
    },
    "1226": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0"
      ]
    },
    "1228": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[1]%9#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "1231": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%84#0"
      ]
    },
    "1232": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0"
      ]
    },
    "1234": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[3]%0#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0"
      ]
    },
    "1237": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1240": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1243": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0"
      ]
    },
    "1246": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0"
      ]
    },
    "1249": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1252": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0"
      ]
    },
    "1253": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%88#0"
      ]
    },
    "1256": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0"
      ]
    },
    "1259": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%75#0"
      ]
    },
    "1261": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%75#0",
        "tmp%77#0"
      ]
    },
    "1263": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0"
      ]
    },
    "1265": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0"
      ]
    },
    "1267": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0"
      ]
    },
    "1269": {
      "op": "uncover 12",
      "stack_out": [
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0"
      ]
    },
    "1271": {
      "op": "uncover 12",
      "stack_out": [
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0"
      ]
    },
    "1273": {
      "op": "uncover 12",
      "stack_out": [
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1275": {
      "op": "uncover 12",
      "stack_out": [
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1277": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0"
      ]
    },
    "1279": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%87#0",
        "tmp%89#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0"
      ]
    },
    "1281": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%89#0",
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0"
      ]
    },
    "1283": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0",
        "tmp%79#0",
        "tmp%81#0",
        "tmp%83#0",
        "tmp%85#0",
        "reinterpret_bytes[3]%0#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[4]%0#0",
        "tmp%86#0",
        "tmp%87#0",
        "tmp%89#0"
      ]
    },
    "1285": {
      "callsub": "test_cases.abi_routing.contract.Reference.method_with_default_args",
      "op": "callsub method_with_default_args",
      "stack_out": []
    },
    "1288": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1289": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1292": {
      "block": "approval_program_get_an_int_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1294": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0",
        "NoOp"
      ]
    },
    "1295": {
      "op": "==",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1296": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1297": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1299": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "0"
      ]
    },
    "1300": {
      "op": "!=",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1301": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1302": {
      "callsub": "test_cases.abi_routing.contract.Reference.get_a_int",
      "op": "callsub get_a_int",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1305": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "0x151f7c75"
      ]
    },
    "1306": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%68#0"
      ]
    },
    "1307": {
      "op": "concat",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1308": {
      "op": "log",
      "stack_out": []
    },
    "1309": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1310": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1313": {
      "block": "approval_program_get_application_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1315": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0",
        "NoOp"
      ]
    },
    "1316": {
      "op": "==",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1317": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1318": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1320": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "0"
      ]
    },
    "1321": {
      "op": "!=",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1322": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1323": {
      "callsub": "test_cases.abi_routing.contract.Reference.get_app",
      "op": "callsub get_app",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1326": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "0x151f7c75"
      ]
    },
    "1327": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%62#0"
      ]
    },
    "1328": {
      "op": "concat",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1329": {
      "op": "log",
      "stack_out": []
    },
    "1330": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1331": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1334": {
      "block": "approval_program_get_asset_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "1336": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "NoOp"
      ]
    },
    "1337": {
      "op": "==",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1338": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1339": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1341": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0"
      ]
    },
    "1342": {
      "op": "!=",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1343": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1344": {
      "callsub": "test_cases.abi_routing.contract.Reference.get_asset",
      "op": "callsub get_asset",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1347": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "0x151f7c75"
      ]
    },
    "1348": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%56#0"
      ]
    },
    "1349": {
      "op": "concat",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1350": {
      "op": "log",
      "stack_out": []
    },
    "1351": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1352": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1355": {
      "block": "approval_program_get_address_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1357": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "NoOp"
      ]
    },
    "1358": {
      "op": "==",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1359": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1360": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1362": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "0"
      ]
    },
    "1363": {
      "op": "!=",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1364": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1365": {
      "callsub": "test_cases.abi_routing.contract.Reference.get_address",
      "op": "callsub get_address",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1368": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "0x151f7c75"
      ]
    },
    "1369": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%50#0"
      ]
    },
    "1370": {
      "op": "concat",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1371": {
      "op": "log",
      "stack_out": []
    },
    "1372": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1373": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1376": {
      "block": "approval_program_compare_assets_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1378": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "NoOp"
      ]
    },
    "1379": {
      "op": "==",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1380": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1381": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1383": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "0"
      ]
    },
    "1384": {
      "op": "!=",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1385": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1386": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "1389": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1390": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1392": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "1395": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "1396": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%43#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%45#0"
      ]
    },
    "1398": {
      "callsub": "test_cases.abi_routing.contract.Reference.compare_assets",
      "op": "callsub compare_assets",
      "stack_out": []
    },
    "1401": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1402": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1405": {
      "block": "approval_program_with_transactions_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1407": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "NoOp"
      ]
    },
    "1408": {
      "op": "==",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1409": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1410": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1412": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "0"
      ]
    },
    "1413": {
      "op": "!=",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1414": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1415": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "1418": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1419": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1421": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1424": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%37#0"
      ]
    },
    "1426": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[8]%4#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%37#0",
        "1"
      ]
    },
    "1427": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0",
        "gtxn_idx%0#0"
      ]
    },
    "1428": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "reinterpret_bytes[8]%4#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "1429": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "1431": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "reinterpret_bytes[8]%4#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1432": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1433": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0",
        "gtxn_idx%0#0"
      ]
    },
    "1434": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0",
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1437": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_bytes[8]%4#0",
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%36#0"
      ]
    },
    "1439": {
      "op": "uncover 3",
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1441": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0",
        "gtxn_idx%0#0"
      ]
    },
    "1443": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0",
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1445": {
      "callsub": "test_cases.abi_routing.contract.Reference.with_transactions",
      "op": "callsub with_transactions",
      "stack_out": []
    },
    "1448": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1449": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1452": {
      "block": "approval_program_opt_into_asset_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1454": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "NoOp"
      ]
    },
    "1455": {
      "op": "==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1456": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1457": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1459": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0"
      ]
    },
    "1460": {
      "op": "!=",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1461": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1462": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "1465": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1466": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1468": {
      "callsub": "test_cases.abi_routing.contract.Reference.opt_into_asset",
      "op": "callsub opt_into_asset",
      "stack_out": []
    },
    "1471": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1472": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1475": {
      "block": "approval_program_mixed_oca_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1477": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "1"
      ]
    },
    "1478": {
      "op": "swap",
      "stack_out": [
        "1",
        "tmp%18#0"
      ]
    },
    "1479": {
      "op": "shl",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1480": {
      "op": "pushint 37 // 37",
      "defined_out": [
        "37",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "37"
      ]
    },
    "1482": {
      "op": "&",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1483": {
      "error": "OnCompletion is not one of NoOp, CloseOut, DeleteApplication",
      "op": "assert // OnCompletion is not one of NoOp, CloseOut, DeleteApplication",
      "stack_out": []
    },
    "1484": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1486": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0"
      ]
    },
    "1487": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1488": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1489": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1492": {
      "callsub": "test_cases.abi_routing.contract.Reference.mixed_oca",
      "op": "callsub mixed_oca",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1495": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "0x151f7c75"
      ]
    },
    "1496": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%23#0"
      ]
    },
    "1497": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1498": {
      "op": "log",
      "stack_out": []
    },
    "1499": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1500": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1503": {
      "block": "approval_program_all_the_things_route@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1506": {
      "callsub": "test_cases.abi_routing.contract.Reference.full_abi_config",
      "op": "callsub full_abi_config",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1509": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "1510": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%16#0"
      ]
    },
    "1511": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1512": {
      "op": "log",
      "stack_out": []
    },
    "1513": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1514": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1517": {
      "block": "approval_program_opt_in_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1519": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "OptIn"
      ]
    },
    "1520": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1521": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "1522": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1524": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0"
      ]
    },
    "1525": {
      "op": "!=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1526": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1527": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1530": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1531": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1534": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "1537": {
      "callsub": "test_cases.abi_routing.contract.Reference.opt_in",
      "op": "callsub opt_in",
      "stack_out": []
    },
    "1540": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1541": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1544": {
      "block": "approval_program_noop_with_uint64_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1546": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "1547": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1548": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1549": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1551": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1552": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1553": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1554": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1557": {
      "callsub": "test_cases.abi_routing.contract.Reference.noop_with_uint64",
      "op": "callsub noop_with_uint64",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1560": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "1561": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%7#0"
      ]
    },
    "1562": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1563": {
      "op": "log",
      "stack_out": []
    },
    "1564": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1565": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    },
    "1568": {
      "block": "approval_program_bare_routing@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "1570": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "0"
      ]
    },
    "1571": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "0",
        "1"
      ]
    },
    "1572": {
      "op": "intc_3 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "0",
        "1",
        "2"
      ]
    },
    "1573": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "4",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "0",
        "1",
        "2",
        "4"
      ]
    },
    "1575": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "4",
        "5",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "0",
        "1",
        "2",
        "4",
        "5"
      ]
    },
    "1577": {
      "op": "uncover 5",
      "stack_out": [
        "0",
        "1",
        "2",
        "4",
        "5",
        "tmp%154#0"
      ]
    },
    "1579": {
      "op": "match approval_program_bare_abi_config@21 approval_program_bare_abi_config@21 approval_program_bare_abi_config@21 approval_program_bare_abi_config@21 approval_program_bare_abi_config@21",
      "stack_out": []
    },
    "1591": {
      "block": "approval_program_switch_case_next@23",
      "stack_in": [],
      "op": "b approval_program_after_if_else@24"
    },
    "1594": {
      "block": "approval_program_bare_abi_config@21",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "1596": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0",
        "0"
      ]
    },
    "1597": {
      "op": "==",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "1598": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1599": {
      "callsub": "test_cases.abi_routing.contract.Reference.bare_abi_config",
      "op": "callsub bare_abi_config"
    },
    "1602": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1603": {
      "op": "b approval_program_after_inlined_test_cases.abi_routing.contract.Reference.__puya_arc4_router__@25"
    }
  }
}