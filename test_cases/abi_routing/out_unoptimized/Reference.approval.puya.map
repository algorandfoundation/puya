{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;AA+QK;;;;;;AAlEA;;;;;;AAtCA;;;;;;AAjDA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAbA;;;;;;AAjBA;;;;;;AApDA;;;;;;;;;AA0BA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAhBA;;;;;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAkCA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAvCA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAgBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AA0BA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAiBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAaiskEA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AA7QG;AAAW;;AAAX;AACA;;;;;;;;AAAc;AAAd;AACkB;;AAAO;AAAP;AAAqB;;;AAArB;AAAmC;;;AAAnC;AAAlB;;;;;;;;;;;;AAAA;;AAAA;AACe;;AAAf;;;;;;;;;AAAA;;AAAA;AACA;;;;;AAAW;;AAAX;AAIO;;;;;;AAAA;AAAA;AAAA;AAAP;AAEO;AAAyC;AAAzC;AAAP;;AAIH;;;;;;AAEgB;;AAAA;AAAJ;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEH;;;;;;AAEmB;;AAAhB;;AAAA;;AAAA;AACiB;;AAAjB;;AAAA;;AAAA;;AAEH;;;;;;AAawB;;AAAA;AAAZ;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEH;;;;;;AAUwB;;AAAA;AAAZ;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;;;;AAaI;;;;;;;;;;;;;AAAJ;;AAEH;;;;;;AAGU;;AAAiB;;AAAjB;AAAP;AAEW;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAP;AAEA;AAAA;;AAAA;AAGA;AAC4B;;AAA5B;;AACsB;AAAtB;;AACiC;;AAAjC;;AACA;;AAAA;;AACA;;AAEH;;;;;;AAQU;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAsB;AAAtB;AAAP;AACO;;AAAA;;AAAgB;;AAAhB;AAAP;AACO;;AAAA;AAA2B;AAA3B;AAAP;;AAEH;;;;;;AAEU;;AAAA;;AAAA;AAAP;;;;;AAIO;;AAAP;;;;AAIO;;AAAP;;;;AAIO;;AAAP;;;;AAIO;;;;;;;;;;AAAP;AAEH;;;;;;AAiCU;;AAAsB;;AAAtB;AAAP;AACO;;AAAuB;;;AAAvB;AAAP;AAC+B;;AAAxB;;AAAA;AAAP;AACgC;;AAAzB;;AAAA;AAAP;AACO;;AAA4B;;AAA5B;AAAP;AACO;;AAA6B;;;AAA7B;AAAP;AAC0B;AAAnB;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAyB;AAAzB;AAAP;AAC0B;AAAnB;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAyB;;;AAAzB;AAAP;AAC0B;AAAnB;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAyB;;;AAAzB;AAAP;AACO;;AAAA;AAAgC;AAAhC;AAAP;AACO;;AAAA;AAAiC;;AAAjC;AAAP;AACO;;AAAkB;;;;;;AAAlB;AAAP;AACyB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAlB;;AAAA;AAAP;AACyC;;AAAhB;AAAA;;AAAA;AAAA;AAAlB;;AAAA;AAAP;AAC4C;;AAAjB;AAAA;;AAAA;AAAA;AAApB;;AAAA;AAAP;;AAEH;;;;;;AAqBO;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AADJ;AAgBA;;AAAA;AAEH;;;;;;AAmCU;;AAAuB;;AAAvB;AAAP;AACO;;AAAA;;AAAc;;;;AAAd;AAAP;AACO;;AAAA;;AAAe;;;;AAAf;AAAP;AACO;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAP;AAEI;;AAAA;;AAAA;AAAJ;AAGI;;AAAA;AACE;;AAAA;AADF;AAEE;;AAAA;AAFF;AAAA;;AAAA;AAIE;;AAAA;AAJF;AAKE;;AAAA;AALF;AAME;;AAAA;AANF;AAOE;;AAAA;AAPF;AAQE;;AAAA;AARF;AASE;;AAAA;AATF;AAUE;;AAAA;AAVF;AAWE;;AAAA;AAXF;AAYE;;AAAA;AAZF;AAaE;;AAAA;AAbF;AAcE;;AAAA;AAdF;AAAA;;AAAA;AAgBE;;AAAA;AAhBF;AAiBE;;AAAA;AAjBF;AAkBE;;AAAA;AAlBF;AAmBE;;AAAA;AAnBF;AADG;AAAP;AAuBH;;;;;;AAEU;;;;;;;;AAAA;;AAAA;AAAkB;;;AAAlB;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 8 1 0 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"asa\" 0x01040023 0x07 \"local_uint\" \"local_bytes\" 0x00000000000001c8 \"abc\""
    },
    "61": {
      "op": "b main_block@0"
    },
    "64": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "66": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "69": {
      "op": "b main_call___init__@1"
    },
    "72": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.__init__",
      "op": "callsub __init__"
    },
    "75": {
      "op": "b main_after_if_else@2"
    },
    "78": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "b main_block@3"
    },
    "81": {
      "block": "main_block@3",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "83": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "84": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "85": {
      "op": "bz main_bare_abi_config@25",
      "stack_out": []
    },
    "88": {
      "op": "b main_abi_routing@4"
    },
    "91": {
      "block": "main_abi_routing@4",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "94": {
      "op": "bytec_2 // method \"opt_in(uint64,byte[])void\"",
      "defined_out": [
        "Method(opt_in(uint64,byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(opt_in(uint64,byte[])void)"
      ]
    },
    "95": {
      "op": "pushbytes 0x3a5353fc // method \"all_the_things(uint64)uint8\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)"
      ]
    },
    "101": {
      "op": "pushbytes 0xd2f2f53c // method \"mixed_oca(uint64)uint8\"",
      "defined_out": [
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "Method(opt_in(uint64,byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)"
      ]
    },
    "107": {
      "op": "uncover 3",
      "stack_out": [
        "Method(opt_in(uint64,byte[])void)",
        "Method(all_the_things(uint64)uint8)",
        "Method(mixed_oca(uint64)uint8)",
        "tmp%2#0"
      ]
    },
    "109": {
      "op": "match main_opt_in_route@5 main_all_the_things_route@6 main_mixed_oca_route@7",
      "stack_out": []
    },
    "117": {
      "op": "b main_switch_case_next@8"
    },
    "120": {
      "block": "main_switch_case_next@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "122": {
      "op": "intc_2 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "NoOp"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "124": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "127": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0"
      ]
    },
    "128": {
      "op": "!=",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "129": {
      "op": "bz main_create_NoOp@23",
      "stack_out": []
    },
    "132": {
      "op": "b main_call_NoOp@9"
    },
    "135": {
      "block": "main_call_NoOp@9",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "138": {
      "op": "pushbytes 0xd78db35b // method \"noop_with_uint64(uint64)uint8\"",
      "defined_out": [
        "Method(noop_with_uint64(uint64)uint8)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(noop_with_uint64(uint64)uint8)"
      ]
    },
    "144": {
      "op": "pushbytes 0xd8f62d9a // method \"opt_into_asset(uint64)void\"",
      "defined_out": [
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)"
      ]
    },
    "150": {
      "op": "pushbytes 0xb8431119 // method \"with_transactions(uint64,uint64,pay,uint64)void\"",
      "defined_out": [
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)"
      ]
    },
    "156": {
      "op": "pushbytes 0xc416372d // method \"compare_assets(uint64,uint64)void\"",
      "defined_out": [
        "Method(compare_assets(uint64,uint64)void)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)"
      ]
    },
    "162": {
      "op": "pushbytes 0x7fad9780 // method \"get_address()address\"",
      "defined_out": [
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)"
      ]
    },
    "168": {
      "op": "pushbytes 0x2fdf95a4 // method \"get_asset()uint64\"",
      "defined_out": [
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)"
      ]
    },
    "174": {
      "op": "pushbytes 0x1399826c // method \"get_application()uint64\"",
      "defined_out": [
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)"
      ]
    },
    "180": {
      "op": "pushbytes 0xa1300821 // method \"get_an_int()uint64\"",
      "defined_out": [
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)"
      ]
    },
    "186": {
      "op": "pushbytes 0x6137dc37 // method \"method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void\"",
      "defined_out": [
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)"
      ]
    },
    "192": {
      "op": "pushbytes 0x5732195a // method \"method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[]\"",
      "defined_out": [
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])"
      ]
    },
    "198": {
      "op": "pushbytes 0xf6096c82 // method \"method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64\"",
      "defined_out": [
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)"
      ]
    },
    "204": {
      "op": "pushbytes 0x9023bb19 // method \"hello_with_algopy_string(string)string\"",
      "defined_out": [
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_an_int()uint64)",
        "Method(get_application()uint64)",
        "Method(get_asset()uint64)",
        "Method(hello_with_algopy_string(string)string)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)",
        "Method(hello_with_algopy_string(string)string)"
      ]
    },
    "210": {
      "op": "uncover 12",
      "stack_out": [
        "Method(noop_with_uint64(uint64)uint8)",
        "Method(opt_into_asset(uint64)void)",
        "Method(with_transactions(uint64,uint64,pay,uint64)void)",
        "Method(compare_assets(uint64,uint64)void)",
        "Method(get_address()address)",
        "Method(get_asset()uint64)",
        "Method(get_application()uint64)",
        "Method(get_an_int()uint64)",
        "Method(method_with_default_args(uint64,uint64,address,address,uint64,uint64,byte[3],uint64,uint64,uint32,string,uint64,byte[])void)",
        "Method(method_with_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[])byte[])",
        "Method(method_with_more_than_15_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],uint64,pay,uint64,uint64)uint64)",
        "Method(hello_with_algopy_string(string)string)",
        "tmp%18#0"
      ]
    },
    "212": {
      "op": "match main_noop_with_uint64_route@10 main_opt_into_asset_route@11 main_with_transactions_route@12 main_compare_assets_route@13 main_get_address_route@14 main_get_asset_route@15 main_get_application_route@16 main_get_an_int_route@17 main_method_with_default_args_route@18 main_method_with_15_args_route@19 main_method_with_more_than_15_args_route@20 main_hello_with_algopy_string_route@21",
      "stack_out": []
    },
    "238": {
      "op": "b main_switch_case_next@22"
    },
    "241": {
      "block": "main_switch_case_next@22",
      "stack_in": [],
      "op": "b main_after_if_else@24"
    },
    "244": {
      "block": "main_after_if_else@24",
      "stack_in": [],
      "op": "b main_after_if_else@26"
    },
    "247": {
      "block": "main_after_if_else@26",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "248": {
      "block": "main_hello_with_algopy_string_route@21",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.hello_with_algopy_string[routing]",
      "op": "callsub hello_with_algopy_string"
    },
    "251": {
      "op": "b main_switch_case_next@22"
    },
    "254": {
      "block": "main_method_with_more_than_15_args_route@20",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.method_with_more_than_15_args[routing]",
      "op": "callsub method_with_more_than_15_args"
    },
    "257": {
      "op": "b main_switch_case_next@22"
    },
    "260": {
      "block": "main_method_with_15_args_route@19",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.method_with_15_args[routing]",
      "op": "callsub method_with_15_args"
    },
    "263": {
      "op": "b main_switch_case_next@22"
    },
    "266": {
      "block": "main_method_with_default_args_route@18",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.method_with_default_args[routing]",
      "op": "callsub method_with_default_args"
    },
    "269": {
      "op": "b main_switch_case_next@22"
    },
    "272": {
      "block": "main_get_an_int_route@17",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.get_a_int[routing]",
      "op": "callsub get_a_int"
    },
    "275": {
      "op": "b main_switch_case_next@22"
    },
    "278": {
      "block": "main_get_application_route@16",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.get_app[routing]",
      "op": "callsub get_app"
    },
    "281": {
      "op": "b main_switch_case_next@22"
    },
    "284": {
      "block": "main_get_asset_route@15",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.get_asset[routing]",
      "op": "callsub get_asset"
    },
    "287": {
      "op": "b main_switch_case_next@22"
    },
    "290": {
      "block": "main_get_address_route@14",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.get_address[routing]",
      "op": "callsub get_address"
    },
    "293": {
      "op": "b main_switch_case_next@22"
    },
    "296": {
      "block": "main_compare_assets_route@13",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.compare_assets[routing]",
      "op": "callsub compare_assets"
    },
    "299": {
      "op": "b main_switch_case_next@22"
    },
    "302": {
      "block": "main_with_transactions_route@12",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.with_transactions[routing]",
      "op": "callsub with_transactions"
    },
    "305": {
      "op": "b main_switch_case_next@22"
    },
    "308": {
      "block": "main_opt_into_asset_route@11",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.opt_into_asset[routing]",
      "op": "callsub opt_into_asset"
    },
    "311": {
      "op": "b main_switch_case_next@22"
    },
    "314": {
      "block": "main_noop_with_uint64_route@10",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.noop_with_uint64[routing]",
      "op": "callsub noop_with_uint64"
    },
    "317": {
      "op": "b main_switch_case_next@22"
    },
    "320": {
      "block": "main_create_NoOp@23",
      "stack_in": [],
      "op": "b main_after_if_else@24"
    },
    "323": {
      "block": "main_mixed_oca_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "325": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "1"
      ]
    },
    "326": {
      "op": "uncover 1",
      "stack_out": [
        "1",
        "tmp%8#0"
      ]
    },
    "328": {
      "op": "shl",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "329": {
      "op": "pushint 37 // 37",
      "defined_out": [
        "37",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "37"
      ]
    },
    "331": {
      "op": "&",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "332": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "334": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0",
        "0"
      ]
    },
    "335": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "336": {
      "op": "&&",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "337": {
      "error": "OnCompletion must be one of NoOp, CloseOut, DeleteApplication && can only call when not creating",
      "op": "assert // OnCompletion must be one of NoOp, CloseOut, DeleteApplication && can only call when not creating",
      "stack_out": []
    },
    "338": {
      "callsub": "test_cases.abi_routing.contract.Reference.mixed_oca[routing]",
      "op": "callsub mixed_oca"
    },
    "341": {
      "op": "b main_switch_case_next@8"
    },
    "344": {
      "block": "main_all_the_things_route@6",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.full_abi_config[routing]",
      "op": "callsub full_abi_config"
    },
    "347": {
      "op": "b main_switch_case_next@8"
    },
    "350": {
      "block": "main_opt_in_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "352": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "OptIn"
      ]
    },
    "353": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "354": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "356": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "357": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "358": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "359": {
      "error": "OnCompletion must be OptIn && can only call when not creating",
      "op": "assert // OnCompletion must be OptIn && can only call when not creating",
      "stack_out": []
    },
    "360": {
      "callsub": "test_cases.abi_routing.contract.Reference.opt_in[routing]",
      "op": "callsub opt_in"
    },
    "363": {
      "op": "b main_switch_case_next@8"
    },
    "366": {
      "block": "main_bare_abi_config@25",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "368": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "369": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "370": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "371": {
      "callsub": "test_cases.abi_routing.contract.Reference.bare_abi_config",
      "op": "callsub bare_abi_config"
    },
    "374": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "375": {
      "op": "return",
      "stack_out": []
    },
    "376": {
      "subroutine": "test_cases.abi_routing.contract.Reference.noop_with_uint64[routing]",
      "params": {},
      "block": "noop_with_uint64",
      "stack_in": [],
      "op": "b noop_with_uint64_block@0"
    },
    "379": {
      "block": "noop_with_uint64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "382": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "383": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "384": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "385": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "386": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "387": {
      "callsub": "test_cases.abi_routing.contract.Reference.noop_with_uint64",
      "op": "callsub test_cases.abi_routing.contract.Reference.noop_with_uint64",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "390": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "391": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "393": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "394": {
      "op": "log",
      "stack_out": []
    },
    "395": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "396": {
      "op": "return",
      "stack_out": []
    },
    "397": {
      "subroutine": "test_cases.abi_routing.contract.Reference.opt_in[routing]",
      "params": {},
      "block": "opt_in",
      "stack_in": [],
      "op": "b opt_in_block@0"
    },
    "400": {
      "block": "opt_in_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "403": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "404": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "405": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "406": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "407": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "408": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "409": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "412": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "413": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "414": {
      "op": "extract_uint16",
      "defined_out": [
        "length%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "length%0#0"
      ]
    },
    "415": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "length%0#0",
        "1"
      ]
    },
    "416": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "mul%0#0"
      ]
    },
    "417": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "mul%0#0",
        "2"
      ]
    },
    "418": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "add%0#0"
      ]
    },
    "419": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "add%0#0",
        "tmp%2#0 (copy)"
      ]
    },
    "421": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "422": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "423": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "424": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "427": {
      "callsub": "test_cases.abi_routing.contract.Reference.opt_in",
      "op": "callsub test_cases.abi_routing.contract.Reference.opt_in",
      "stack_out": []
    },
    "430": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "431": {
      "op": "return",
      "stack_out": []
    },
    "432": {
      "subroutine": "test_cases.abi_routing.contract.Reference.full_abi_config[routing]",
      "params": {},
      "block": "full_abi_config",
      "stack_in": [],
      "op": "b full_abi_config_block@0"
    },
    "435": {
      "block": "full_abi_config_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "438": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "439": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "440": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "441": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "442": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "443": {
      "callsub": "test_cases.abi_routing.contract.Reference.full_abi_config",
      "op": "callsub test_cases.abi_routing.contract.Reference.full_abi_config",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "446": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "447": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "449": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "450": {
      "op": "log",
      "stack_out": []
    },
    "451": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "452": {
      "op": "return",
      "stack_out": []
    },
    "453": {
      "subroutine": "test_cases.abi_routing.contract.Reference.mixed_oca[routing]",
      "params": {},
      "block": "mixed_oca",
      "stack_in": [],
      "op": "b mixed_oca_block@0"
    },
    "456": {
      "block": "mixed_oca_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "459": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "460": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "461": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "462": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "463": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "464": {
      "callsub": "test_cases.abi_routing.contract.Reference.mixed_oca",
      "op": "callsub test_cases.abi_routing.contract.Reference.mixed_oca",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "467": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "468": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "470": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "471": {
      "op": "log",
      "stack_out": []
    },
    "472": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "473": {
      "op": "return",
      "stack_out": []
    },
    "474": {
      "subroutine": "test_cases.abi_routing.contract.Reference.opt_into_asset[routing]",
      "params": {},
      "block": "opt_into_asset",
      "stack_in": [],
      "op": "b opt_into_asset_block@0"
    },
    "477": {
      "block": "opt_into_asset_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "480": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "481": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "482": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "483": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "484": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "485": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "486": {
      "callsub": "test_cases.abi_routing.contract.Reference.opt_into_asset",
      "op": "callsub test_cases.abi_routing.contract.Reference.opt_into_asset",
      "stack_out": []
    },
    "489": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "490": {
      "op": "return",
      "stack_out": []
    },
    "491": {
      "subroutine": "test_cases.abi_routing.contract.Reference.with_transactions[routing]",
      "params": {},
      "block": "with_transactions",
      "stack_in": [],
      "op": "b with_transactions_block@0"
    },
    "494": {
      "block": "with_transactions_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "497": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "498": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "499": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "500": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "501": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "502": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "503": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "506": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "507": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "508": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "509": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "510": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "511": {
      "op": "txn GroupIndex",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "tmp%3#0"
      ]
    },
    "513": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "as_Encoded(uint64)%1#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "tmp%3#0",
        "1"
      ]
    },
    "514": {
      "op": "-",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0"
      ]
    },
    "515": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "516": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "518": {
      "op": "intc_1 // pay",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "519": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "520": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0"
      ]
    },
    "521": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "tmp%4#0"
      ]
    },
    "524": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "525": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "len%2#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "526": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "527": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "eq%2#0",
        "gtxn_idx%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "528": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%2#0"
      ]
    },
    "529": {
      "op": "uncover 3",
      "stack_out": [
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%2#0",
        "tmp%1#0"
      ]
    },
    "531": {
      "op": "uncover 3",
      "stack_out": [
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%2#0",
        "tmp%1#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "533": {
      "op": "uncover 3",
      "stack_out": [
        "as_Encoded(uint64)%2#0",
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0"
      ]
    },
    "535": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%2#0"
      ]
    },
    "537": {
      "callsub": "test_cases.abi_routing.contract.Reference.with_transactions",
      "op": "callsub test_cases.abi_routing.contract.Reference.with_transactions",
      "stack_out": []
    },
    "540": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "541": {
      "op": "return",
      "stack_out": []
    },
    "542": {
      "subroutine": "test_cases.abi_routing.contract.Reference.compare_assets[routing]",
      "params": {},
      "block": "compare_assets",
      "stack_in": [],
      "op": "b compare_assets_block@0"
    },
    "545": {
      "block": "compare_assets_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "548": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "549": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "550": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "551": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "552": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "553": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "554": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "557": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "558": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "559": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "560": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "561": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "562": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "563": {
      "callsub": "test_cases.abi_routing.contract.Reference.compare_assets",
      "op": "callsub test_cases.abi_routing.contract.Reference.compare_assets",
      "stack_out": []
    },
    "566": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "567": {
      "op": "return",
      "stack_out": []
    },
    "568": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_address[routing]",
      "params": {},
      "block": "get_address",
      "stack_in": [],
      "op": "b get_address_block@0"
    },
    "571": {
      "block": "get_address_block@0",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.get_address",
      "op": "callsub test_cases.abi_routing.contract.Reference.get_address",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "574": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "575": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "577": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "578": {
      "op": "log",
      "stack_out": []
    },
    "579": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "580": {
      "op": "return",
      "stack_out": []
    },
    "581": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_asset[routing]",
      "params": {},
      "block": "get_asset",
      "stack_in": [],
      "op": "b get_asset_block@0"
    },
    "584": {
      "block": "get_asset_block@0",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.get_asset",
      "op": "callsub test_cases.abi_routing.contract.Reference.get_asset",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "587": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "588": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "590": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "591": {
      "op": "log",
      "stack_out": []
    },
    "592": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "593": {
      "op": "return",
      "stack_out": []
    },
    "594": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_app[routing]",
      "params": {},
      "block": "get_app",
      "stack_in": [],
      "op": "b get_app_block@0"
    },
    "597": {
      "block": "get_app_block@0",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.get_app",
      "op": "callsub test_cases.abi_routing.contract.Reference.get_app",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "600": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "601": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "603": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "604": {
      "op": "log",
      "stack_out": []
    },
    "605": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "606": {
      "op": "return",
      "stack_out": []
    },
    "607": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_a_int[routing]",
      "params": {},
      "block": "get_a_int",
      "stack_in": [],
      "op": "b get_a_int_block@0"
    },
    "610": {
      "block": "get_a_int_block@0",
      "stack_in": [],
      "callsub": "test_cases.abi_routing.contract.Reference.get_a_int",
      "op": "callsub test_cases.abi_routing.contract.Reference.get_a_int",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "613": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "614": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "616": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "617": {
      "op": "log",
      "stack_out": []
    },
    "618": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "619": {
      "op": "return",
      "stack_out": []
    },
    "620": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_default_args[routing]",
      "params": {},
      "block": "method_with_default_args",
      "stack_in": [],
      "op": "b method_with_default_args_block@0"
    },
    "623": {
      "block": "method_with_default_args_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "626": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "627": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "628": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "629": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "630": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "631": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "632": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "635": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "636": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "637": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "638": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "639": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "640": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "641": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "644": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "645": {
      "op": "len",
      "defined_out": [
        "len%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "646": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "len%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "len%2#0",
        "32"
      ]
    },
    "648": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "649": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "650": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "653": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "654": {
      "op": "len",
      "defined_out": [
        "len%3#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "len%3#0"
      ]
    },
    "655": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "len%3#0",
        "32"
      ]
    },
    "657": {
      "op": "==",
      "defined_out": [
        "eq%3#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "eq%3#0"
      ]
    },
    "658": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "659": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "662": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "663": {
      "op": "len",
      "defined_out": [
        "len%4#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "len%4#0"
      ]
    },
    "664": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "len%4#0",
        "8"
      ]
    },
    "665": {
      "op": "==",
      "defined_out": [
        "eq%4#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "eq%4#0"
      ]
    },
    "666": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "as_Encoded(uint64)%2#0"
      ]
    },
    "667": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "668": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "671": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "672": {
      "op": "len",
      "defined_out": [
        "len%5#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "len%5#0"
      ]
    },
    "673": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "len%5#0",
        "8"
      ]
    },
    "674": {
      "op": "==",
      "defined_out": [
        "eq%5#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "eq%5#0"
      ]
    },
    "675": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%3#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "as_Encoded(uint64)%3#0"
      ]
    },
    "676": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "677": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "680": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "681": {
      "op": "len",
      "defined_out": [
        "len%6#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "len%6#0"
      ]
    },
    "682": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "len%6#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "len%6#0",
        "3"
      ]
    },
    "684": {
      "op": "==",
      "defined_out": [
        "eq%6#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "eq%6#0"
      ]
    },
    "685": {
      "error": "invalid number of bytes for uint8[3]",
      "op": "assert // invalid number of bytes for uint8[3]",
      "defined_out": [
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0"
      ]
    },
    "686": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%13#0"
      ]
    },
    "689": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "690": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint8[3])%0#0",
        "len%7#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%13#0",
        "len%7#0"
      ]
    },
    "691": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%13#0",
        "len%7#0",
        "8"
      ]
    },
    "692": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint8[3])%0#0",
        "eq%7#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%13#0",
        "eq%7#0"
      ]
    },
    "693": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0"
      ]
    },
    "694": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "tmp%14#0"
      ]
    },
    "697": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "698": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint8[3])%0#0",
        "len%8#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "tmp%14#0",
        "len%8#0"
      ]
    },
    "699": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "tmp%14#0",
        "len%8#0",
        "8"
      ]
    },
    "700": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint8[3])%0#0",
        "eq%8#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "tmp%14#0",
        "eq%8#0"
      ]
    },
    "701": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0"
      ]
    },
    "702": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "tmp%15#0"
      ]
    },
    "705": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "tmp%15#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ]
    },
    "706": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "len%9#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "tmp%15#0",
        "len%9#0"
      ]
    },
    "707": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "len%9#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "tmp%15#0",
        "len%9#0",
        "4"
      ]
    },
    "709": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "eq%9#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "tmp%15#0",
        "eq%9#0"
      ]
    },
    "710": {
      "error": "invalid number of bytes for uint32",
      "op": "assert // invalid number of bytes for uint32",
      "defined_out": [
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0"
      ]
    },
    "711": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "tmp%16#0"
      ]
    },
    "714": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "715": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "0"
      ]
    },
    "716": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "length%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "tmp%16#0",
        "length%0#0"
      ]
    },
    "717": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "length%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "tmp%16#0",
        "length%0#0",
        "1"
      ]
    },
    "718": {
      "op": "*",
      "defined_out": [
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "mul%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "tmp%16#0",
        "mul%0#0"
      ]
    },
    "719": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "mul%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "tmp%16#0",
        "mul%0#0",
        "2"
      ]
    },
    "720": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "tmp%16#0",
        "add%0#0"
      ]
    },
    "721": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "tmp%16#0",
        "add%0#0",
        "tmp%16#0 (copy)"
      ]
    },
    "723": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "len%10#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "tmp%16#0",
        "add%0#0",
        "len%10#0"
      ]
    },
    "724": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "eq%10#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "tmp%16#0",
        "eq%10#0"
      ]
    },
    "725": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "726": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%17#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%17#0"
      ]
    },
    "729": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "730": {
      "op": "len",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "len%11#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%17#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%17#0",
        "len%11#0"
      ]
    },
    "731": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%17#0",
        "len%11#0",
        "8"
      ]
    },
    "732": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "eq%11#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%17#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%17#0",
        "eq%11#0"
      ]
    },
    "733": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint64)%6#0"
      ]
    },
    "734": {
      "op": "btoi",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0"
      ]
    },
    "735": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "738": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "739": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "0"
      ]
    },
    "740": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "length%1#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%19#0",
        "length%1#0"
      ]
    },
    "741": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%19#0",
        "length%1#0",
        "1"
      ]
    },
    "742": {
      "op": "*",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "mul%1#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%19#0",
        "mul%1#0"
      ]
    },
    "743": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%19#0",
        "mul%1#0",
        "2"
      ]
    },
    "744": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%19#0",
        "add%1#0"
      ]
    },
    "745": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%19#0",
        "add%1#0",
        "tmp%19#0 (copy)"
      ]
    },
    "747": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "len%12#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%19#0",
        "add%1#0",
        "len%12#0"
      ]
    },
    "748": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "eq%12#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%19#0",
        "eq%12#0"
      ]
    },
    "749": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "750": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint8[3])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%18#0",
        "tmp%20#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%20#0"
      ]
    },
    "753": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%20#0",
        "tmp%1#0"
      ]
    },
    "755": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%20#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "757": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%20#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "759": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%20#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "761": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%20#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "763": {
      "op": "uncover 12",
      "stack_out": [
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%20#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "765": {
      "op": "uncover 12",
      "stack_out": [
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%20#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0"
      ]
    },
    "767": {
      "op": "uncover 12",
      "stack_out": [
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%20#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0"
      ]
    },
    "769": {
      "op": "uncover 12",
      "stack_out": [
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%20#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0"
      ]
    },
    "771": {
      "op": "uncover 12",
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%20#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0"
      ]
    },
    "773": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "775": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%20#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0"
      ]
    },
    "777": {
      "op": "uncover 12",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint8[3])%0#0",
        "as_Encoded(uint64)%4#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint32)%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%18#0",
        "tmp%20#0"
      ]
    },
    "779": {
      "callsub": "test_cases.abi_routing.contract.Reference.method_with_default_args",
      "op": "callsub test_cases.abi_routing.contract.Reference.method_with_default_args",
      "stack_out": []
    },
    "782": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "783": {
      "op": "return",
      "stack_out": []
    },
    "784": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_15_args[routing]",
      "params": {},
      "block": "method_with_15_args",
      "stack_in": [],
      "op": "b method_with_15_args_block@0"
    },
    "787": {
      "block": "method_with_15_args_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "790": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "791": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "792": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "793": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "794": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "795": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "796": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "799": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "800": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "801": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "802": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "803": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "804": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "805": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "808": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "809": {
      "op": "len",
      "defined_out": [
        "len%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "810": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "811": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "812": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%2#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "as_Encoded(uint64)%2#0"
      ]
    },
    "813": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "814": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "817": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "818": {
      "op": "len",
      "defined_out": [
        "len%3#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "len%3#0"
      ]
    },
    "819": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "len%3#0",
        "8"
      ]
    },
    "820": {
      "op": "==",
      "defined_out": [
        "eq%3#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "eq%3#0"
      ]
    },
    "821": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%3#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "as_Encoded(uint64)%3#0"
      ]
    },
    "822": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "823": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "826": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "827": {
      "op": "len",
      "defined_out": [
        "len%4#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "len%4#0"
      ]
    },
    "828": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "len%4#0",
        "8"
      ]
    },
    "829": {
      "op": "==",
      "defined_out": [
        "eq%4#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "eq%4#0"
      ]
    },
    "830": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%4#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "as_Encoded(uint64)%4#0"
      ]
    },
    "831": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "832": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "835": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "836": {
      "op": "len",
      "defined_out": [
        "len%5#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "len%5#0"
      ]
    },
    "837": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "len%5#0",
        "8"
      ]
    },
    "838": {
      "op": "==",
      "defined_out": [
        "eq%5#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "eq%5#0"
      ]
    },
    "839": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%5#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "as_Encoded(uint64)%5#0"
      ]
    },
    "840": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "841": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "844": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "845": {
      "op": "len",
      "defined_out": [
        "len%6#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "len%6#0"
      ]
    },
    "846": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "len%6#0",
        "8"
      ]
    },
    "847": {
      "op": "==",
      "defined_out": [
        "eq%6#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "eq%6#0"
      ]
    },
    "848": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%6#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "as_Encoded(uint64)%6#0"
      ]
    },
    "849": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "850": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "853": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "854": {
      "op": "len",
      "defined_out": [
        "len%7#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "len%7#0"
      ]
    },
    "855": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "len%7#0",
        "8"
      ]
    },
    "856": {
      "op": "==",
      "defined_out": [
        "eq%7#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "eq%7#0"
      ]
    },
    "857": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%7#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "as_Encoded(uint64)%7#0"
      ]
    },
    "858": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "859": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "862": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "863": {
      "op": "len",
      "defined_out": [
        "len%8#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "len%8#0"
      ]
    },
    "864": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "len%8#0",
        "8"
      ]
    },
    "865": {
      "op": "==",
      "defined_out": [
        "eq%8#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "eq%8#0"
      ]
    },
    "866": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%8#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "as_Encoded(uint64)%8#0"
      ]
    },
    "867": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "868": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "871": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "872": {
      "op": "len",
      "defined_out": [
        "len%9#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "len%9#0"
      ]
    },
    "873": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "len%9#0",
        "8"
      ]
    },
    "874": {
      "op": "==",
      "defined_out": [
        "eq%9#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "eq%9#0"
      ]
    },
    "875": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%9#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "as_Encoded(uint64)%9#0"
      ]
    },
    "876": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "877": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "880": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "881": {
      "op": "len",
      "defined_out": [
        "len%10#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "len%10#0"
      ]
    },
    "882": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "len%10#0",
        "8"
      ]
    },
    "883": {
      "op": "==",
      "defined_out": [
        "eq%10#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "eq%10#0"
      ]
    },
    "884": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%10#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "as_Encoded(uint64)%10#0"
      ]
    },
    "885": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "886": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "889": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%22#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ]
    },
    "890": {
      "op": "len",
      "defined_out": [
        "len%11#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "len%11#0"
      ]
    },
    "891": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "len%11#0",
        "8"
      ]
    },
    "892": {
      "op": "==",
      "defined_out": [
        "eq%11#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "eq%11#0"
      ]
    },
    "893": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%11#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "as_Encoded(uint64)%11#0"
      ]
    },
    "894": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "895": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "898": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ]
    },
    "899": {
      "op": "len",
      "defined_out": [
        "len%12#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0",
        "len%12#0"
      ]
    },
    "900": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0",
        "len%12#0",
        "8"
      ]
    },
    "901": {
      "op": "==",
      "defined_out": [
        "eq%12#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0",
        "eq%12#0"
      ]
    },
    "902": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%12#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "as_Encoded(uint64)%12#0"
      ]
    },
    "903": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "904": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "907": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%26#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ]
    },
    "908": {
      "op": "len",
      "defined_out": [
        "len%13#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0",
        "len%13#0"
      ]
    },
    "909": {
      "op": "intc_0 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0",
        "len%13#0",
        "8"
      ]
    },
    "910": {
      "op": "==",
      "defined_out": [
        "eq%13#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0",
        "eq%13#0"
      ]
    },
    "911": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%13#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "as_Encoded(uint64)%13#0"
      ]
    },
    "912": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "913": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "916": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "917": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "0"
      ]
    },
    "918": {
      "op": "extract_uint16",
      "defined_out": [
        "length%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "length%0#0"
      ]
    },
    "919": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "length%0#0",
        "1"
      ]
    },
    "920": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "mul%0#0"
      ]
    },
    "921": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "mul%0#0",
        "2"
      ]
    },
    "922": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "add%0#0"
      ]
    },
    "923": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "add%0#0",
        "tmp%28#0 (copy)"
      ]
    },
    "925": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%14#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "add%0#0",
        "len%14#0"
      ]
    },
    "926": {
      "op": "==",
      "defined_out": [
        "eq%14#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%28#0",
        "eq%14#0"
      ]
    },
    "927": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "928": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0"
      ]
    },
    "931": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0"
      ]
    },
    "933": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "935": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "937": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "939": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "941": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "943": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "945": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "947": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "949": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "951": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "953": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "955": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "957": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%29#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "959": {
      "op": "uncover 14",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0",
        "tmp%29#0"
      ]
    },
    "961": {
      "callsub": "test_cases.abi_routing.contract.Reference.method_with_15_args",
      "op": "callsub test_cases.abi_routing.contract.Reference.method_with_15_args",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "964": {
      "op": "dup",
      "defined_out": [
        "tmp%30#0",
        "tmp%30#0 (copy)"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%30#0 (copy)"
      ]
    },
    "965": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "aggregate%length%0#0"
      ]
    },
    "966": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "967": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "970": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%30#0"
      ]
    },
    "972": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "973": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "0x151f7c75"
      ]
    },
    "974": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%31#0"
      ]
    },
    "976": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "977": {
      "op": "log",
      "stack_out": []
    },
    "978": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "979": {
      "op": "return",
      "stack_out": []
    },
    "980": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_more_than_15_args[routing]",
      "params": {},
      "block": "method_with_more_than_15_args",
      "stack_in": [],
      "op": "b method_with_more_than_15_args_block@0"
    },
    "983": {
      "block": "method_with_more_than_15_args_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "986": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "987": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "988": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "989": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "990": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "991": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ]
    },
    "994": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "995": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "len%1#0"
      ]
    },
    "996": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "len%1#0",
        "8"
      ]
    },
    "997": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "998": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "999": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "tmp%2#0"
      ]
    },
    "1002": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1003": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "len%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "tmp%2#0",
        "len%2#0"
      ]
    },
    "1004": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "tmp%2#0",
        "len%2#0",
        "8"
      ]
    },
    "1005": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "eq%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "tmp%2#0",
        "eq%2#0"
      ]
    },
    "1006": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0"
      ]
    },
    "1007": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%3#0"
      ]
    },
    "1010": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1011": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "len%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%3#0",
        "len%3#0"
      ]
    },
    "1012": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%3#0",
        "len%3#0",
        "8"
      ]
    },
    "1013": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "eq%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%3#0",
        "eq%3#0"
      ]
    },
    "1014": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%3#0"
      ]
    },
    "1015": {
      "op": "btoi",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0"
      ]
    },
    "1016": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1019": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1020": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "len%4#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "len%4#0"
      ]
    },
    "1021": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "len%4#0",
        "8"
      ]
    },
    "1022": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "eq%4#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "eq%4#0"
      ]
    },
    "1023": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "as_Encoded(uint64)%4#0"
      ]
    },
    "1024": {
      "op": "btoi",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "1025": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1028": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "1029": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "len%5#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0",
        "len%5#0"
      ]
    },
    "1030": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0",
        "len%5#0",
        "8"
      ]
    },
    "1031": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "eq%5#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0",
        "eq%5#0"
      ]
    },
    "1032": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0"
      ]
    },
    "1033": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "tmp%8#0"
      ]
    },
    "1036": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "1037": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "len%6#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "tmp%8#0",
        "len%6#0"
      ]
    },
    "1038": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "tmp%8#0",
        "len%6#0",
        "8"
      ]
    },
    "1039": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "eq%6#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "tmp%8#0",
        "eq%6#0"
      ]
    },
    "1040": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0"
      ]
    },
    "1041": {
      "op": "txn GroupIndex",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "tmp%9#0"
      ]
    },
    "1043": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "tmp%9#0",
        "2"
      ]
    },
    "1044": {
      "op": "-",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0"
      ]
    },
    "1045": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "1046": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "1048": {
      "op": "intc_1 // pay",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1049": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1050": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0"
      ]
    },
    "1051": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "tmp%10#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "tmp%10#0"
      ]
    },
    "1054": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1055": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "len%7#0",
        "tmp%10#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "tmp%10#0",
        "len%7#0"
      ]
    },
    "1056": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "tmp%10#0",
        "len%7#0",
        "8"
      ]
    },
    "1057": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "eq%7#0",
        "gtxn_idx%0#0",
        "tmp%10#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "tmp%10#0",
        "eq%7#0"
      ]
    },
    "1058": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0"
      ]
    },
    "1059": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "tmp%11#0"
      ]
    },
    "1062": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "1063": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "gtxn_idx%0#0",
        "len%8#0",
        "tmp%11#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "tmp%11#0",
        "len%8#0"
      ]
    },
    "1064": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "tmp%11#0",
        "len%8#0",
        "8"
      ]
    },
    "1065": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "eq%8#0",
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "tmp%11#0",
        "eq%8#0"
      ]
    },
    "1066": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0"
      ]
    },
    "1067": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "gtxn_idx%0#0",
        "tmp%12#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "tmp%12#0"
      ]
    },
    "1070": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "gtxn_idx%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1071": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "gtxn_idx%0#0",
        "len%9#0",
        "tmp%12#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "tmp%12#0",
        "len%9#0"
      ]
    },
    "1072": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "tmp%12#0",
        "len%9#0",
        "8"
      ]
    },
    "1073": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "eq%9#0",
        "gtxn_idx%0#0",
        "tmp%12#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "tmp%12#0",
        "eq%9#0"
      ]
    },
    "1074": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0"
      ]
    },
    "1075": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "tmp%13#0"
      ]
    },
    "1078": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "1079": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "len%10#0",
        "tmp%13#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "tmp%13#0",
        "len%10#0"
      ]
    },
    "1080": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "tmp%13#0",
        "len%10#0",
        "8"
      ]
    },
    "1081": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "eq%10#0",
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "tmp%13#0",
        "eq%10#0"
      ]
    },
    "1082": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0"
      ]
    },
    "1083": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%14#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "tmp%14#0"
      ]
    },
    "1086": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "1087": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "len%11#0",
        "tmp%14#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "tmp%14#0",
        "len%11#0"
      ]
    },
    "1088": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "tmp%14#0",
        "len%11#0",
        "8"
      ]
    },
    "1089": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "eq%11#0",
        "gtxn_idx%0#0",
        "tmp%14#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "tmp%14#0",
        "eq%11#0"
      ]
    },
    "1090": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0"
      ]
    },
    "1091": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "tmp%15#0"
      ]
    },
    "1094": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%15#0 (copy)",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ]
    },
    "1095": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "len%12#0",
        "tmp%15#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "tmp%15#0",
        "len%12#0"
      ]
    },
    "1096": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "tmp%15#0",
        "len%12#0",
        "8"
      ]
    },
    "1097": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "eq%12#0",
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "tmp%15#0",
        "eq%12#0"
      ]
    },
    "1098": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0"
      ]
    },
    "1099": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%16#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "tmp%16#0"
      ]
    },
    "1102": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "1103": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "len%13#0",
        "tmp%16#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "tmp%16#0",
        "len%13#0"
      ]
    },
    "1104": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "tmp%16#0",
        "len%13#0",
        "8"
      ]
    },
    "1105": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "eq%13#0",
        "gtxn_idx%0#0",
        "tmp%16#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "tmp%16#0",
        "eq%13#0"
      ]
    },
    "1106": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0"
      ]
    },
    "1107": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%0#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%0#0"
      ]
    },
    "1110": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%0#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%0#0",
        "0"
      ]
    },
    "1111": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%0#0",
        "0",
        "8"
      ]
    },
    "1112": {
      "op": "extract3",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0"
      ]
    },
    "1113": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%1#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%1#0"
      ]
    },
    "1116": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%1#0",
        "8"
      ]
    },
    "1117": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%1#0",
        "8",
        "8"
      ]
    },
    "1118": {
      "op": "extract3",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ]
    },
    "1119": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0"
      ]
    },
    "1122": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0",
        "16"
      ]
    },
    "1124": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%2#0",
        "16",
        "8"
      ]
    },
    "1125": {
      "op": "extract3",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0"
      ]
    },
    "1126": {
      "op": "btoi",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0"
      ]
    },
    "1127": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%3#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%3#0"
      ]
    },
    "1130": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%3#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%3#0",
        "24"
      ]
    },
    "1132": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%3#0",
        "24",
        "8"
      ]
    },
    "1133": {
      "op": "extract3",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0"
      ]
    },
    "1134": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%4#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%4#0"
      ]
    },
    "1137": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%4#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%4#0",
        "32"
      ]
    },
    "1139": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%4#0",
        "32",
        "8"
      ]
    },
    "1140": {
      "op": "extract3",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ]
    },
    "1141": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0"
      ]
    },
    "1144": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)"
      ]
    },
    "1145": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)",
        "40"
      ]
    },
    "1147": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1148": {
      "op": "cover 1",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "aggregate%extract_uint16%0#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0"
      ]
    },
    "1150": {
      "op": "dup",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "aggregate%extract_uint16%0#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)"
      ]
    },
    "1151": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "aggregate%extract_uint16%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "aggregate%extract_uint16%0#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0 (copy)",
        "42"
      ]
    },
    "1153": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "aggregate%extract_uint16%0#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1154": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0"
      ]
    },
    "1156": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "aggregate%extract_uint16%1#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1158": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%5#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1160": {
      "op": "substring3",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0"
      ]
    },
    "1161": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0"
      ]
    },
    "1164": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0"
      ]
    },
    "1167": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0 (copy)",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0 (copy)"
      ]
    },
    "1168": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0 (copy)",
        "42"
      ]
    },
    "1170": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "1171": {
      "op": "cover 1",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "aggregate%extract_uint16%2#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0"
      ]
    },
    "1173": {
      "op": "dup",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "aggregate%extract_uint16%2#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0 (copy)"
      ]
    },
    "1174": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "aggregate%extract_uint16%2#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "aggregate%len%0#0"
      ]
    },
    "1175": {
      "op": "cover 1",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0"
      ]
    },
    "1177": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "aggregate%len%0#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "1179": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%6#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "1181": {
      "op": "substring3",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tuple_item%6#0"
      ]
    },
    "1182": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0"
      ]
    },
    "1185": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0"
      ]
    },
    "1188": {
      "op": "pushint 44 // 44",
      "defined_out": [
        "44",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0",
        "44"
      ]
    },
    "1190": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%7#0",
        "44",
        "8"
      ]
    },
    "1191": {
      "op": "extract3",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%7#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tuple_item%7#0"
      ]
    },
    "1192": {
      "op": "btoi",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0"
      ]
    },
    "1193": {
      "op": "txn GroupIndex",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "1195": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "1"
      ]
    },
    "1196": {
      "op": "-",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0"
      ]
    },
    "1197": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "1198": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "1200": {
      "op": "intc_1 // pay",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "1201": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "1202": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0"
      ]
    },
    "1203": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%8#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%8#0"
      ]
    },
    "1206": {
      "op": "pushint 52 // 52",
      "defined_out": [
        "52",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%8#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%8#0",
        "52"
      ]
    },
    "1208": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%8#0",
        "52",
        "8"
      ]
    },
    "1209": {
      "op": "extract3",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0"
      ]
    },
    "1210": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%9#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%9#0"
      ]
    },
    "1213": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "60",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%9#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%9#0",
        "60"
      ]
    },
    "1215": {
      "op": "intc_0 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "as_Encoded(uint64,uint64,uint64,uint64,uint64,(len+uint8[]),(len+uint8[]),uint64,uint64,uint64)%9#0",
        "60",
        "8"
      ]
    },
    "1216": {
      "op": "extract3",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%20#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%4#0",
        "tmp%6#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%8#0",
        "tuple_item%9#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0"
      ]
    },
    "1217": {
      "op": "uncover 25",
      "stack_out": [
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1219": {
      "op": "uncover 25",
      "stack_out": [
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "1221": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0"
      ]
    },
    "1223": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0"
      ]
    },
    "1225": {
      "op": "uncover 25",
      "stack_out": [
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "1227": {
      "op": "uncover 25",
      "stack_out": [
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0"
      ]
    },
    "1229": {
      "op": "uncover 25",
      "stack_out": [
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0"
      ]
    },
    "1231": {
      "op": "uncover 25",
      "stack_out": [
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0"
      ]
    },
    "1233": {
      "op": "uncover 25",
      "stack_out": [
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0"
      ]
    },
    "1235": {
      "op": "uncover 25",
      "stack_out": [
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0"
      ]
    },
    "1237": {
      "op": "uncover 25",
      "stack_out": [
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0"
      ]
    },
    "1239": {
      "op": "uncover 25",
      "stack_out": [
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0"
      ]
    },
    "1241": {
      "op": "uncover 25",
      "stack_out": [
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0"
      ]
    },
    "1243": {
      "op": "uncover 25",
      "stack_out": [
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0"
      ]
    },
    "1245": {
      "op": "uncover 25",
      "stack_out": [
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0"
      ]
    },
    "1247": {
      "op": "uncover 25",
      "stack_out": [
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0"
      ]
    },
    "1249": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ]
    },
    "1251": {
      "op": "uncover 25",
      "stack_out": [
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0"
      ]
    },
    "1253": {
      "op": "uncover 25",
      "stack_out": [
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0"
      ]
    },
    "1255": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ]
    },
    "1257": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0"
      ]
    },
    "1259": {
      "op": "uncover 25",
      "stack_out": [
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0"
      ]
    },
    "1261": {
      "op": "uncover 25",
      "stack_out": [
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0"
      ]
    },
    "1263": {
      "op": "uncover 25",
      "stack_out": [
        "tuple_item%8#0",
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0"
      ]
    },
    "1265": {
      "op": "uncover 25",
      "stack_out": [
        "tuple_item%9#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0"
      ]
    },
    "1267": {
      "op": "uncover 25",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "as_Encoded(uint64)%5#0",
        "as_Encoded(uint64)%6#0",
        "gtxn_idx%0#0",
        "as_Encoded(uint64)%7#0",
        "as_Encoded(uint64)%8#0",
        "as_Encoded(uint64)%9#0",
        "as_Encoded(uint64)%10#0",
        "as_Encoded(uint64)%11#0",
        "as_Encoded(uint64)%12#0",
        "as_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tmp%20#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "gtxn_idx%1#0",
        "tuple_item%8#0",
        "tuple_item%9#0"
      ]
    },
    "1269": {
      "callsub": "test_cases.abi_routing.contract.Reference.method_with_more_than_15_args",
      "op": "callsub test_cases.abi_routing.contract.Reference.method_with_more_than_15_args",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1272": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "0x151f7c75"
      ]
    },
    "1273": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%32#0"
      ]
    },
    "1275": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1276": {
      "op": "log",
      "stack_out": []
    },
    "1277": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1278": {
      "op": "return",
      "stack_out": []
    },
    "1279": {
      "subroutine": "test_cases.abi_routing.contract.Reference.hello_with_algopy_string[routing]",
      "params": {},
      "block": "hello_with_algopy_string",
      "stack_in": [],
      "op": "b hello_with_algopy_string_block@0"
    },
    "1282": {
      "block": "hello_with_algopy_string_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1285": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1286": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "1287": {
      "op": "extract_uint16",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "1288": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "1"
      ]
    },
    "1289": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "1290": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "1291": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "1292": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1294": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "1295": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1296": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1297": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1300": {
      "callsub": "test_cases.abi_routing.contract.Reference.hello_with_algopy_string",
      "op": "callsub test_cases.abi_routing.contract.Reference.hello_with_algopy_string",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1303": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1304": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%length%0#0"
      ]
    },
    "1305": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1306": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1309": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%2#0"
      ]
    },
    "1311": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1312": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "1313": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%3#0"
      ]
    },
    "1315": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1316": {
      "op": "log",
      "stack_out": []
    },
    "1317": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1318": {
      "op": "return",
      "stack_out": []
    },
    "1319": {
      "subroutine": "test_cases.abi_routing.contract.Reference.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "1322": {
      "block": "__init___block@0",
      "stack_in": [],
      "op": "bytec_1 // \"asa\"",
      "defined_out": [
        "\"asa\""
      ],
      "stack_out": [
        "\"asa\""
      ]
    },
    "1323": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "\"asa\"",
        "123"
      ],
      "stack_out": [
        "\"asa\"",
        "123"
      ]
    },
    "1325": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1326": {
      "op": "pushbytes \"an_int\"",
      "defined_out": [
        "\"an_int\""
      ],
      "stack_out": [
        "\"an_int\""
      ]
    },
    "1334": {
      "op": "intc_3 // 2",
      "defined_out": [
        "\"an_int\"",
        "2"
      ],
      "stack_out": [
        "\"an_int\"",
        "2"
      ]
    },
    "1335": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1336": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "1338": {
      "op": "bytec_3 // 0x07",
      "defined_out": [
        "0x",
        "0x07"
      ],
      "stack_out": [
        "0x",
        "0x07"
      ]
    },
    "1339": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "1340": {
      "op": "pushbytes 0x08",
      "defined_out": [
        "0x08",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "0x08"
      ]
    },
    "1343": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1344": {
      "op": "pushbytes 0x09",
      "defined_out": [
        "0x09",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "0x09"
      ]
    },
    "1347": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "1348": {
      "op": "pushbytes \"some_bytes\"",
      "defined_out": [
        "\"some_bytes\"",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "\"some_bytes\""
      ]
    },
    "1360": {
      "op": "uncover 1",
      "stack_out": [
        "\"some_bytes\"",
        "encoded_array%0#0"
      ]
    },
    "1362": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1363": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1365": {
      "op": "pushbytes \"creator\"",
      "defined_out": [
        "\"creator\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"creator\""
      ]
    },
    "1374": {
      "op": "uncover 1",
      "stack_out": [
        "\"creator\"",
        "tmp%0#0"
      ]
    },
    "1376": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1377": {
      "op": "pushbytes \"app\"",
      "defined_out": [
        "\"app\""
      ],
      "stack_out": [
        "\"app\""
      ]
    },
    "1382": {
      "op": "pushint 123 // 123",
      "stack_out": [
        "\"app\"",
        "123"
      ]
    },
    "1384": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1385": {
      "op": "pushbytes 0x189392c5 // method \"get(uint64,byte[])byte[]\"",
      "defined_out": [
        "Method(get(uint64,byte[])byte[])"
      ],
      "stack_out": [
        "Method(get(uint64,byte[])byte[])"
      ]
    },
    "1391": {
      "op": "len",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1392": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1393": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1394": {
      "error": "has method selector",
      "op": "assert // has method selector",
      "stack_out": []
    },
    "1395": {
      "op": "bytec_2 // method \"opt_in(uint64,byte[])void\"",
      "defined_out": [
        "Method(opt_in(uint64,byte[])void)"
      ],
      "stack_out": [
        "Method(opt_in(uint64,byte[])void)"
      ]
    },
    "1396": {
      "op": "bytec_2 // method \"opt_in(uint64,byte[])void\"",
      "stack_out": [
        "Method(opt_in(uint64,byte[])void)",
        "Method(opt_in(uint64,byte[])void)"
      ]
    },
    "1397": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1398": {
      "error": "has method selector for method reference",
      "op": "assert // has method selector for method reference",
      "stack_out": []
    },
    "1399": {
      "retsub": true,
      "op": "retsub"
    },
    "1400": {
      "subroutine": "test_cases.abi_routing.contract.Reference.noop_with_uint64",
      "params": {
        "a#0": "bytes"
      },
      "block": "test_cases.abi_routing.contract.Reference.noop_with_uint64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1403": {
      "op": "b test_cases.abi_routing.contract.Reference.noop_with_uint64_block@0"
    },
    "1406": {
      "block": "test_cases.abi_routing.contract.Reference.noop_with_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1408": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1409": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "1410": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1411": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1412": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "1413": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "1414": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "8"
      ]
    },
    "1415": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "1416": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1417": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "7"
      ]
    },
    "1419": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "7",
        "1"
      ]
    },
    "1420": {
      "op": "extract3",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1421": {
      "retsub": true,
      "op": "retsub"
    },
    "1422": {
      "subroutine": "test_cases.abi_routing.contract.Reference.opt_in",
      "params": {
        "uint#0": "uint64",
        "bites#0": "bytes"
      },
      "block": "test_cases.abi_routing.contract.Reference.opt_in",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1425": {
      "op": "b test_cases.abi_routing.contract.Reference.opt_in_block@0"
    },
    "1428": {
      "block": "test_cases.abi_routing.contract.Reference.opt_in_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1430": {
      "op": "bytec 4 // \"local_uint\"",
      "defined_out": [
        "\"local_uint\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"local_uint\""
      ]
    },
    "1432": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"local_uint\"",
        "tmp%0#0",
        "uint#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"local_uint\"",
        "uint#0 (copy)"
      ]
    },
    "1434": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1435": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1437": {
      "op": "bytec 5 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"local_bytes\""
      ]
    },
    "1439": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"local_bytes\"",
        "bites#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"local_bytes\"",
        "bites#0 (copy)"
      ]
    },
    "1441": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1442": {
      "retsub": true,
      "op": "retsub"
    },
    "1443": {
      "subroutine": "test_cases.abi_routing.contract.Reference.full_abi_config",
      "params": {
        "a#0": "bytes"
      },
      "block": "test_cases.abi_routing.contract.Reference.full_abi_config",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1446": {
      "op": "b test_cases.abi_routing.contract.Reference.full_abi_config_block@0"
    },
    "1449": {
      "block": "test_cases.abi_routing.contract.Reference.full_abi_config_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1451": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1452": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "1453": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1454": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1455": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "1456": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "1457": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "8"
      ]
    },
    "1458": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "1459": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1460": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "7"
      ]
    },
    "1462": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "7",
        "1"
      ]
    },
    "1463": {
      "op": "extract3",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1464": {
      "retsub": true,
      "op": "retsub"
    },
    "1465": {
      "subroutine": "test_cases.abi_routing.contract.Reference.mixed_oca",
      "params": {
        "a#0": "bytes"
      },
      "block": "test_cases.abi_routing.contract.Reference.mixed_oca",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1468": {
      "op": "b test_cases.abi_routing.contract.Reference.mixed_oca_block@0"
    },
    "1471": {
      "block": "test_cases.abi_routing.contract.Reference.mixed_oca_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1473": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1474": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "1475": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1476": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1477": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "1478": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "1479": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "8"
      ]
    },
    "1480": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "1481": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1482": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "7"
      ]
    },
    "1484": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "7",
        "1"
      ]
    },
    "1485": {
      "op": "extract3",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1486": {
      "retsub": true,
      "op": "retsub"
    },
    "1487": {
      "subroutine": "test_cases.abi_routing.contract.Reference.bare_abi_config",
      "params": {},
      "block": "bare_abi_config",
      "stack_in": [],
      "op": "b bare_abi_config_block@0"
    },
    "1490": {
      "block": "bare_abi_config_block@0",
      "stack_in": [],
      "op": "pushbytes \"Hello World\"",
      "defined_out": [
        "\"Hello World\""
      ],
      "stack_out": [
        "\"Hello World\""
      ]
    },
    "1503": {
      "op": "log",
      "stack_out": []
    },
    "1504": {
      "retsub": true,
      "op": "retsub"
    },
    "1505": {
      "subroutine": "test_cases.abi_routing.contract.Reference.opt_into_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "test_cases.abi_routing.contract.Reference.opt_into_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1508": {
      "op": "b test_cases.abi_routing.contract.Reference.opt_into_asset_block@0"
    },
    "1511": {
      "block": "test_cases.abi_routing.contract.Reference.opt_into_asset_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1513": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1515": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1516": {
      "error": "Only creator can opt in to ASA",
      "op": "assert // Only creator can opt in to ASA",
      "stack_out": []
    },
    "1517": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1518": {
      "op": "bytec_1 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa\""
      ]
    },
    "1519": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1520": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1521": {
      "op": "intc_2 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1522": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1523": {
      "error": "ASA already opted in",
      "op": "assert // ASA already opted in",
      "stack_out": []
    },
    "1524": {
      "op": "bytec_1 // \"asa\"",
      "stack_out": [
        "\"asa\""
      ]
    },
    "1525": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ]
    },
    "1527": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1528": {
      "op": "itxn_begin"
    },
    "1529": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "1531": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1533": {
      "op": "intc_2 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1534": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1536": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1538": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1540": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1542": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "1544": {
      "op": "itxn_submit"
    },
    "1545": {
      "retsub": true,
      "op": "retsub"
    },
    "1546": {
      "subroutine": "test_cases.abi_routing.contract.Reference.with_transactions",
      "params": {
        "asset#0": "uint64",
        "an_int#0": "bytes",
        "pay#0": "uint64",
        "another_int#0": "bytes"
      },
      "block": "test_cases.abi_routing.contract.Reference.with_transactions",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1549": {
      "op": "b test_cases.abi_routing.contract.Reference.with_transactions_block@0"
    },
    "1552": {
      "block": "test_cases.abi_routing.contract.Reference.with_transactions_block@0",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1553": {
      "op": "bytec_1 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa\""
      ]
    },
    "1554": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1555": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1556": {
      "op": "frame_dig -4",
      "defined_out": [
        "asset#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "asset#0 (copy)"
      ]
    },
    "1558": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1559": {
      "error": "is correct asset",
      "op": "assert // is correct asset",
      "stack_out": []
    },
    "1560": {
      "op": "frame_dig -3",
      "defined_out": [
        "an_int#0 (copy)"
      ],
      "stack_out": [
        "an_int#0 (copy)"
      ]
    },
    "1562": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1563": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "1564": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1565": {
      "error": "is correct int",
      "op": "assert // is correct int",
      "stack_out": []
    },
    "1566": {
      "op": "frame_dig -2",
      "defined_out": [
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "1568": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1570": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1572": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1573": {
      "error": "is payment to app",
      "op": "assert // is payment to app",
      "stack_out": []
    },
    "1574": {
      "op": "frame_dig -1",
      "defined_out": [
        "another_int#0 (copy)"
      ],
      "stack_out": [
        "another_int#0 (copy)"
      ]
    },
    "1576": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1577": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "2"
      ]
    },
    "1578": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1579": {
      "error": "is correct int",
      "op": "assert // is correct int",
      "stack_out": []
    },
    "1580": {
      "retsub": true,
      "op": "retsub"
    },
    "1581": {
      "subroutine": "test_cases.abi_routing.contract.Reference.compare_assets",
      "params": {
        "asset_a#0": "uint64",
        "asset_b#0": "uint64"
      },
      "block": "test_cases.abi_routing.contract.Reference.compare_assets",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1584": {
      "op": "b test_cases.abi_routing.contract.Reference.compare_assets_block@0"
    },
    "1587": {
      "block": "test_cases.abi_routing.contract.Reference.compare_assets_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "asset_a#0 (copy)"
      ],
      "stack_out": [
        "asset_a#0 (copy)"
      ]
    },
    "1589": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_a#0 (copy)",
        "asset_b#0 (copy)"
      ],
      "stack_out": [
        "asset_a#0 (copy)",
        "asset_b#0 (copy)"
      ]
    },
    "1591": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1592": {
      "error": "asset a == b",
      "op": "assert // asset a == b",
      "stack_out": []
    },
    "1593": {
      "retsub": true,
      "op": "retsub"
    },
    "1594": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_address",
      "params": {},
      "block": "test_cases.abi_routing.contract.Reference.get_address",
      "stack_in": [],
      "op": "b test_cases.abi_routing.contract.Reference.get_address_block@0"
    },
    "1597": {
      "block": "test_cases.abi_routing.contract.Reference.get_address_block@0",
      "stack_in": [],
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1599": {
      "retsub": true,
      "op": "retsub"
    },
    "1600": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_asset",
      "params": {},
      "block": "test_cases.abi_routing.contract.Reference.get_asset",
      "stack_in": [],
      "op": "b test_cases.abi_routing.contract.Reference.get_asset_block@0"
    },
    "1603": {
      "block": "test_cases.abi_routing.contract.Reference.get_asset_block@0",
      "stack_in": [],
      "op": "bytec 6 // 0x00000000000001c8",
      "defined_out": [
        "0x00000000000001c8"
      ],
      "stack_out": [
        "0x00000000000001c8"
      ]
    },
    "1605": {
      "retsub": true,
      "op": "retsub"
    },
    "1606": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_app",
      "params": {},
      "block": "test_cases.abi_routing.contract.Reference.get_app",
      "stack_in": [],
      "op": "b test_cases.abi_routing.contract.Reference.get_app_block@0"
    },
    "1609": {
      "block": "test_cases.abi_routing.contract.Reference.get_app_block@0",
      "stack_in": [],
      "op": "bytec 6 // 0x00000000000001c8",
      "defined_out": [
        "0x00000000000001c8"
      ],
      "stack_out": [
        "0x00000000000001c8"
      ]
    },
    "1611": {
      "retsub": true,
      "op": "retsub"
    },
    "1612": {
      "subroutine": "test_cases.abi_routing.contract.Reference.get_a_int",
      "params": {},
      "block": "test_cases.abi_routing.contract.Reference.get_a_int",
      "stack_in": [],
      "op": "b test_cases.abi_routing.contract.Reference.get_a_int_block@0"
    },
    "1615": {
      "block": "test_cases.abi_routing.contract.Reference.get_a_int_block@0",
      "stack_in": [],
      "op": "pushbytes 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003"
      ],
      "stack_out": [
        "0x0000000000000003"
      ]
    },
    "1625": {
      "retsub": true,
      "op": "retsub"
    },
    "1626": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_default_args",
      "params": {
        "asset_from_storage#0": "uint64",
        "asset_from_function#0": "uint64",
        "account_from_storage#0": "bytes",
        "account_from_function#0": "bytes",
        "application_from_storage#0": "uint64",
        "application_from_function#0": "uint64",
        "bytes_from_storage#0": "bytes",
        "int_from_storage#0": "bytes",
        "int_from_function#0": "bytes",
        "int_from_const#0": "bytes",
        "str_from_const#0": "bytes",
        "int_from_local#0": "uint64",
        "bytes_from_local#0": "bytes"
      },
      "block": "test_cases.abi_routing.contract.Reference.method_with_default_args",
      "stack_in": [],
      "op": "proto 13 0"
    },
    "1629": {
      "op": "b test_cases.abi_routing.contract.Reference.method_with_default_args_block@0"
    },
    "1632": {
      "block": "test_cases.abi_routing.contract.Reference.method_with_default_args_block@0",
      "stack_in": [],
      "op": "frame_dig -13",
      "defined_out": [
        "asset_from_storage#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0 (copy)"
      ]
    },
    "1634": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "123",
        "asset_from_storage#0 (copy)"
      ],
      "stack_out": [
        "asset_from_storage#0 (copy)",
        "123"
      ]
    },
    "1636": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1637": {
      "error": "wrong asset from storage",
      "op": "assert // wrong asset from storage",
      "stack_out": []
    },
    "1638": {
      "op": "frame_dig -12",
      "defined_out": [
        "asset_from_function#0 (copy)"
      ],
      "stack_out": [
        "asset_from_function#0 (copy)"
      ]
    },
    "1640": {
      "op": "pushint 456 // 456",
      "defined_out": [
        "456",
        "asset_from_function#0 (copy)"
      ],
      "stack_out": [
        "asset_from_function#0 (copy)",
        "456"
      ]
    },
    "1643": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1644": {
      "error": "wrong asset from function",
      "op": "assert // wrong asset from function",
      "stack_out": []
    },
    "1645": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1647": {
      "op": "frame_dig -11",
      "defined_out": [
        "account_from_storage#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "account_from_storage#0 (copy)"
      ]
    },
    "1649": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1650": {
      "error": "wrong account from storage",
      "op": "assert // wrong account from storage",
      "stack_out": []
    },
    "1651": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1653": {
      "op": "frame_dig -10",
      "defined_out": [
        "account_from_function#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "account_from_function#0 (copy)"
      ]
    },
    "1655": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1656": {
      "error": "wrong account from function",
      "op": "assert // wrong account from function",
      "stack_out": []
    },
    "1657": {
      "op": "frame_dig -9",
      "defined_out": [
        "application_from_storage#0 (copy)"
      ],
      "stack_out": [
        "application_from_storage#0 (copy)"
      ]
    },
    "1659": {
      "op": "pushint 123 // 123",
      "stack_out": [
        "application_from_storage#0 (copy)",
        "123"
      ]
    },
    "1661": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1662": {
      "error": "wrong application from storage",
      "op": "assert // wrong application from storage",
      "stack_out": []
    },
    "1663": {
      "op": "frame_dig -8",
      "defined_out": [
        "application_from_function#0 (copy)"
      ],
      "stack_out": [
        "application_from_function#0 (copy)"
      ]
    },
    "1665": {
      "op": "pushint 456 // 456",
      "stack_out": [
        "application_from_function#0 (copy)",
        "456"
      ]
    },
    "1668": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1669": {
      "error": "wrong application from function",
      "op": "assert // wrong application from function",
      "stack_out": []
    },
    "1670": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1671": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1"
      ],
      "stack_out": [
        "0",
        "1"
      ]
    },
    "1672": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0"
      ],
      "stack_out": [
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1673": {
      "op": "frame_dig -7",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "bytes_from_storage#0 (copy)"
      ],
      "stack_out": [
        "aggregate%bytes_offset%0#0",
        "bytes_from_storage#0 (copy)"
      ]
    },
    "1675": {
      "op": "uncover 1",
      "stack_out": [
        "bytes_from_storage#0 (copy)",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1677": {
      "op": "intc_1 // 1",
      "stack_out": [
        "bytes_from_storage#0 (copy)",
        "aggregate%bytes_offset%0#0",
        "1"
      ]
    },
    "1678": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "1679": {
      "op": "bytec_3 // 0x07",
      "defined_out": [
        "0x07",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x07"
      ]
    },
    "1680": {
      "op": "b==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1681": {
      "error": "wrong 0th byte from storage",
      "op": "assert // wrong 0th byte from storage",
      "stack_out": []
    },
    "1682": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1683": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "1684": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%1#0"
      ],
      "stack_out": [
        "aggregate%bytes_offset%1#0"
      ]
    },
    "1685": {
      "op": "frame_dig -7",
      "stack_out": [
        "aggregate%bytes_offset%1#0",
        "bytes_from_storage#0 (copy)"
      ]
    },
    "1687": {
      "op": "uncover 1",
      "stack_out": [
        "bytes_from_storage#0 (copy)",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "1689": {
      "op": "intc_1 // 1",
      "stack_out": [
        "bytes_from_storage#0 (copy)",
        "aggregate%bytes_offset%1#0",
        "1"
      ]
    },
    "1690": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1691": {
      "op": "pushbytes 0x08",
      "defined_out": [
        "0x08",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "0x08"
      ]
    },
    "1694": {
      "op": "b==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1695": {
      "error": "wrong 1st byte from storage",
      "op": "assert // wrong 1st byte from storage",
      "stack_out": []
    },
    "1696": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "1697": {
      "op": "intc_1 // 1",
      "stack_out": [
        "2",
        "1"
      ]
    },
    "1698": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%2#0"
      ],
      "stack_out": [
        "aggregate%bytes_offset%2#0"
      ]
    },
    "1699": {
      "op": "frame_dig -7",
      "stack_out": [
        "aggregate%bytes_offset%2#0",
        "bytes_from_storage#0 (copy)"
      ]
    },
    "1701": {
      "op": "uncover 1",
      "stack_out": [
        "bytes_from_storage#0 (copy)",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "1703": {
      "op": "intc_1 // 1",
      "stack_out": [
        "bytes_from_storage#0 (copy)",
        "aggregate%bytes_offset%2#0",
        "1"
      ]
    },
    "1704": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "reinterpret_biguint%4#0"
      ]
    },
    "1705": {
      "op": "pushbytes 0x09",
      "defined_out": [
        "0x09",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "reinterpret_biguint%4#0",
        "0x09"
      ]
    },
    "1708": {
      "op": "b==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1709": {
      "error": "wrong 2nd byte from storage",
      "op": "assert // wrong 2nd byte from storage",
      "stack_out": []
    },
    "1710": {
      "op": "frame_dig -6",
      "defined_out": [
        "int_from_storage#0 (copy)"
      ],
      "stack_out": [
        "int_from_storage#0 (copy)"
      ]
    },
    "1712": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1713": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%11#0",
        "2"
      ]
    },
    "1714": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1715": {
      "error": "wrong int from storage",
      "op": "assert // wrong int from storage",
      "stack_out": []
    },
    "1716": {
      "op": "frame_dig -5",
      "defined_out": [
        "int_from_function#0 (copy)"
      ],
      "stack_out": [
        "int_from_function#0 (copy)"
      ]
    },
    "1718": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1719": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "3"
      ]
    },
    "1721": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1722": {
      "error": "wrong int from function",
      "op": "assert // wrong int from function",
      "stack_out": []
    },
    "1723": {
      "op": "frame_dig -4",
      "defined_out": [
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "reinterpret_biguint%6#0"
      ]
    },
    "1725": {
      "op": "pushbytes 0x0000007b",
      "defined_out": [
        "0x0000007b",
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "reinterpret_biguint%6#0",
        "0x0000007b"
      ]
    },
    "1731": {
      "op": "b==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1732": {
      "op": "assert",
      "stack_out": []
    },
    "1733": {
      "op": "bytec 7 // \"abc\"",
      "defined_out": [
        "\"abc\""
      ],
      "stack_out": [
        "\"abc\""
      ]
    },
    "1735": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "1736": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "1737": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "1740": {
      "op": "bytec 7 // \"abc\"",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "\"abc\""
      ]
    },
    "1742": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1743": {
      "op": "frame_dig -3",
      "defined_out": [
        "str_from_const#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "str_from_const#0 (copy)"
      ]
    },
    "1745": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1746": {
      "op": "assert",
      "stack_out": []
    },
    "1747": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1749": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%18#0",
        "0"
      ]
    },
    "1750": {
      "op": "bytec 4 // \"local_uint\"",
      "defined_out": [
        "\"local_uint\"",
        "0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0",
        "\"local_uint\""
      ]
    },
    "1752": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1753": {
      "error": "check self.local_uint exists for account",
      "op": "assert // check self.local_uint exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1754": {
      "op": "frame_dig -2",
      "defined_out": [
        "int_from_local#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "int_from_local#0 (copy)"
      ]
    },
    "1756": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1757": {
      "op": "assert",
      "stack_out": []
    },
    "1758": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1760": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "1761": {
      "op": "bytec 5 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0",
        "\"local_bytes\""
      ]
    },
    "1763": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1764": {
      "error": "check self.local_bytes exists for account",
      "op": "assert // check self.local_bytes exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1765": {
      "op": "frame_dig -1",
      "defined_out": [
        "bytes_from_local#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "bytes_from_local#0 (copy)"
      ]
    },
    "1767": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1768": {
      "op": "assert",
      "stack_out": []
    },
    "1769": {
      "retsub": true,
      "op": "retsub"
    },
    "1770": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_15_args",
      "params": {
        "one#0": "uint64",
        "two#0": "uint64",
        "three#0": "uint64",
        "four#0": "uint64",
        "five#0": "uint64",
        "six#0": "uint64",
        "seven#0": "uint64",
        "eight#0": "uint64",
        "nine#0": "uint64",
        "ten#0": "uint64",
        "eleven#0": "uint64",
        "twelve#0": "uint64",
        "thirteen#0": "uint64",
        "fourteen#0": "uint64",
        "fifteen#0": "bytes"
      },
      "block": "test_cases.abi_routing.contract.Reference.method_with_15_args",
      "stack_in": [],
      "op": "proto 15 1"
    },
    "1773": {
      "op": "b test_cases.abi_routing.contract.Reference.method_with_15_args_block@0"
    },
    "1776": {
      "block": "test_cases.abi_routing.contract.Reference.method_with_15_args_block@0",
      "stack_in": [],
      "op": "frame_dig -15",
      "defined_out": [
        "one#0 (copy)"
      ],
      "stack_out": [
        "one#0 (copy)"
      ]
    },
    "1778": {
      "op": "frame_dig -14",
      "defined_out": [
        "one#0 (copy)",
        "two#0 (copy)"
      ],
      "stack_out": [
        "one#0 (copy)",
        "two#0 (copy)"
      ]
    },
    "1780": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1781": {
      "op": "frame_dig -13",
      "defined_out": [
        "three#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "three#0 (copy)"
      ]
    },
    "1783": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1784": {
      "op": "frame_dig -12",
      "defined_out": [
        "four#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "four#0 (copy)"
      ]
    },
    "1786": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1787": {
      "op": "frame_dig -11",
      "defined_out": [
        "five#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "five#0 (copy)"
      ]
    },
    "1789": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1790": {
      "op": "frame_dig -10",
      "defined_out": [
        "six#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "six#0 (copy)"
      ]
    },
    "1792": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1793": {
      "op": "frame_dig -9",
      "defined_out": [
        "seven#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "seven#0 (copy)"
      ]
    },
    "1795": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1796": {
      "op": "frame_dig -8",
      "defined_out": [
        "eight#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "eight#0 (copy)"
      ]
    },
    "1798": {
      "op": "+",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1799": {
      "op": "frame_dig -7",
      "defined_out": [
        "nine#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "nine#0 (copy)"
      ]
    },
    "1801": {
      "op": "+",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1802": {
      "op": "frame_dig -6",
      "defined_out": [
        "ten#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "ten#0 (copy)"
      ]
    },
    "1804": {
      "op": "+",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1805": {
      "op": "frame_dig -5",
      "defined_out": [
        "eleven#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "eleven#0 (copy)"
      ]
    },
    "1807": {
      "op": "+",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1808": {
      "op": "frame_dig -4",
      "defined_out": [
        "tmp%9#0",
        "twelve#0 (copy)"
      ],
      "stack_out": [
        "tmp%9#0",
        "twelve#0 (copy)"
      ]
    },
    "1810": {
      "op": "+",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1811": {
      "op": "frame_dig -3",
      "defined_out": [
        "thirteen#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "thirteen#0 (copy)"
      ]
    },
    "1813": {
      "op": "+",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1814": {
      "op": "frame_dig -2",
      "defined_out": [
        "fourteen#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "fourteen#0 (copy)"
      ]
    },
    "1816": {
      "op": "+",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1817": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "0"
      ]
    },
    "1818": {
      "op": "!=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1819": {
      "op": "assert",
      "stack_out": []
    },
    "1820": {
      "op": "frame_dig -1",
      "defined_out": [
        "fifteen#0 (copy)"
      ],
      "stack_out": [
        "fifteen#0 (copy)"
      ]
    },
    "1822": {
      "retsub": true,
      "op": "retsub"
    },
    "1823": {
      "subroutine": "test_cases.abi_routing.contract.Reference.method_with_more_than_15_args",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "uint64",
        "asset#0": "uint64",
        "e#0": "bytes",
        "f#0": "bytes",
        "pay#0": "uint64",
        "g#0": "bytes",
        "h#0": "bytes",
        "i#0": "bytes",
        "j#0": "bytes",
        "k#0": "bytes",
        "l#0": "bytes",
        "m#0": "bytes",
        "n#0": "bytes",
        "o#0": "bytes",
        "p#0": "uint64",
        "q#0": "bytes",
        "r#0": "bytes",
        "s#0": "bytes",
        "t#0": "bytes",
        "asset2#0": "uint64",
        "pay2#0": "uint64",
        "u#0": "bytes",
        "v#0": "bytes"
      },
      "block": "test_cases.abi_routing.contract.Reference.method_with_more_than_15_args",
      "stack_in": [],
      "op": "proto 26 1"
    },
    "1826": {
      "op": "b test_cases.abi_routing.contract.Reference.method_with_more_than_15_args_block@0"
    },
    "1829": {
      "block": "test_cases.abi_routing.contract.Reference.method_with_more_than_15_args_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1831": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "16"
      ]
    },
    "1833": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1834": {
      "op": "assert",
      "stack_out": []
    },
    "1835": {
      "op": "frame_dig -19",
      "defined_out": [
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "1837": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1839": {
      "op": "pushint 100000 // 100000",
      "defined_out": [
        "100000",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "100000"
      ]
    },
    "1843": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1844": {
      "op": "assert",
      "stack_out": []
    },
    "1845": {
      "op": "frame_dig -3",
      "defined_out": [
        "pay2#0 (copy)"
      ],
      "stack_out": [
        "pay2#0 (copy)"
      ]
    },
    "1847": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1849": {
      "op": "pushint 200000 // 200000",
      "defined_out": [
        "200000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "200000"
      ]
    },
    "1853": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1854": {
      "op": "assert",
      "stack_out": []
    },
    "1855": {
      "op": "frame_dig -22",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1857": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)",
        "0"
      ]
    },
    "1858": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1859": {
      "op": "assert",
      "stack_out": []
    },
    "1860": {
      "op": "frame_dig -4",
      "defined_out": [
        "asset2#0 (copy)"
      ],
      "stack_out": [
        "asset2#0 (copy)"
      ]
    },
    "1862": {
      "op": "intc_2 // 0",
      "stack_out": [
        "asset2#0 (copy)",
        "0"
      ]
    },
    "1863": {
      "op": "!=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1864": {
      "op": "assert",
      "stack_out": []
    },
    "1865": {
      "op": "frame_dig -6",
      "defined_out": [
        "s#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)"
      ]
    },
    "1867": {
      "op": "frame_dig -5",
      "defined_out": [
        "s#0 (copy)",
        "t#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)",
        "t#0 (copy)"
      ]
    },
    "1869": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1870": {
      "op": "log",
      "stack_out": []
    },
    "1871": {
      "op": "frame_dig -26",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1873": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1874": {
      "op": "frame_dig -25",
      "defined_out": [
        "b#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "b#0 (copy)"
      ]
    },
    "1876": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1877": {
      "op": "+",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1878": {
      "op": "frame_dig -24",
      "defined_out": [
        "c#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "c#0 (copy)"
      ]
    },
    "1880": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1881": {
      "op": "+",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1882": {
      "op": "frame_dig -23",
      "defined_out": [
        "d#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "d#0 (copy)"
      ]
    },
    "1884": {
      "op": "+",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1885": {
      "op": "frame_dig -21",
      "defined_out": [
        "e#0 (copy)",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "e#0 (copy)"
      ]
    },
    "1887": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "1888": {
      "op": "+",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1889": {
      "op": "frame_dig -20",
      "defined_out": [
        "f#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "f#0 (copy)"
      ]
    },
    "1891": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1892": {
      "op": "+",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1893": {
      "op": "frame_dig -18",
      "defined_out": [
        "g#0 (copy)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "g#0 (copy)"
      ]
    },
    "1895": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1896": {
      "op": "+",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1897": {
      "op": "frame_dig -17",
      "defined_out": [
        "h#0 (copy)",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "h#0 (copy)"
      ]
    },
    "1899": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "1900": {
      "op": "+",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1901": {
      "op": "frame_dig -16",
      "defined_out": [
        "i#0 (copy)",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "i#0 (copy)"
      ]
    },
    "1903": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "1904": {
      "op": "+",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1905": {
      "op": "frame_dig -15",
      "defined_out": [
        "j#0 (copy)",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "j#0 (copy)"
      ]
    },
    "1907": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "1908": {
      "op": "+",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1909": {
      "op": "frame_dig -14",
      "defined_out": [
        "k#0 (copy)",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "k#0 (copy)"
      ]
    },
    "1911": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "1912": {
      "op": "+",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1913": {
      "op": "frame_dig -13",
      "defined_out": [
        "l#0 (copy)",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "l#0 (copy)"
      ]
    },
    "1915": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "1916": {
      "op": "+",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1917": {
      "op": "frame_dig -12",
      "defined_out": [
        "m#0 (copy)",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "m#0 (copy)"
      ]
    },
    "1919": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1920": {
      "op": "+",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1921": {
      "op": "frame_dig -11",
      "defined_out": [
        "n#0 (copy)",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "n#0 (copy)"
      ]
    },
    "1923": {
      "op": "btoi",
      "defined_out": [
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1924": {
      "op": "+",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1925": {
      "op": "frame_dig -10",
      "defined_out": [
        "o#0 (copy)",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "o#0 (copy)"
      ]
    },
    "1927": {
      "op": "btoi",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1928": {
      "op": "+",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1929": {
      "op": "frame_dig -9",
      "defined_out": [
        "p#0 (copy)",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "p#0 (copy)"
      ]
    },
    "1931": {
      "op": "+",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1932": {
      "op": "frame_dig -8",
      "defined_out": [
        "q#0 (copy)",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "q#0 (copy)"
      ]
    },
    "1934": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1935": {
      "op": "+",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1936": {
      "op": "frame_dig -7",
      "defined_out": [
        "r#0 (copy)",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "r#0 (copy)"
      ]
    },
    "1938": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "1939": {
      "op": "+",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1940": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%41#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%41#0",
        "u#0 (copy)"
      ]
    },
    "1942": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0"
      ]
    },
    "1943": {
      "op": "+",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1944": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%43#0",
        "v#0 (copy)"
      ],
      "stack_out": [
        "tmp%43#0",
        "v#0 (copy)"
      ]
    },
    "1946": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "1947": {
      "op": "+",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1948": {
      "op": "itob",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1949": {
      "retsub": true,
      "op": "retsub"
    },
    "1950": {
      "subroutine": "test_cases.abi_routing.contract.Reference.hello_with_algopy_string",
      "params": {
        "name#0": "bytes"
      },
      "block": "test_cases.abi_routing.contract.Reference.hello_with_algopy_string",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1953": {
      "op": "b test_cases.abi_routing.contract.Reference.hello_with_algopy_string_block@0"
    },
    "1956": {
      "block": "test_cases.abi_routing.contract.Reference.hello_with_algopy_string_block@0",
      "stack_in": [],
      "op": "pushbytes \"Hello \"",
      "defined_out": [
        "\"Hello \""
      ],
      "stack_out": [
        "\"Hello \""
      ]
    },
    "1964": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Hello \"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"Hello \"",
        "name#0 (copy)"
      ]
    },
    "1966": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1967": {
      "op": "pushbytes \"!\"",
      "defined_out": [
        "\"!\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"!\""
      ]
    },
    "1970": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1971": {
      "retsub": true,
      "op": "retsub"
    }
  }
}