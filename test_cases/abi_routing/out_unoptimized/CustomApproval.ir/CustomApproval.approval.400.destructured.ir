main test_cases.abi_routing.custom_approval.CustomApproval.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.abi_routing.custom_approval.CustomApproval.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = test_cases.abi_routing.custom_approval.CustomApproval.approval_program()
        return tmp%1#0

subroutine test_cases.abi_routing.custom_approval.CustomApproval.add_one[routing]() -> void:
    block@0: // L23
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: uint64 = test_cases.abi_routing.custom_approval.CustomApproval.add_one(tmp%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%2#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.abi_routing.custom_approval.CustomApproval.__init__() -> void:
    block@0: // L7
        algopy._contract.Contract.__init__()
        let tmp%0#0: uint64 = (txn ApplicationID)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0) // nonsense assert just to generate an init method
        return 

subroutine test_cases.abi_routing.custom_approval.CustomApproval.approval_program() -> bool:
    block@0: // L11
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (== tmp%0#0 2u)
        goto tmp%1#0 ? block@1 : block@3
    block@1: // and_contd_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 1)
        let tmp%3#0: bytes = (itob 42u)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        goto tmp%4#0 ? block@2 : block@3
    block@2: // if_body_L14
        (log "\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89")
        goto block@3
    block@3: // after_if_else_L13
        let tmp%5#0: bool = algopy.arc4.ARC4Contract.approval_program()
        let result#0: bool = tmp%5#0
        goto result#0 ? block@5 : block@4
    block@4: // if_body_L17
        (log "this will never be seen unless you're running in simulation mode anyway so I can say whatever I want here")
        goto block@5
    block@5: // after_if_else_L16
        return result#0

subroutine test_cases.abi_routing.custom_approval.CustomApproval.add_one(x: uint64) -> uint64:
    block@0: // L23
        let tmp%0#0: uint64 = (+ x#0 1u)
        return tmp%0#0

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L6
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@6, 2u => block@11, 3u => block@12, 4u => block@13, 5u => block@14, 6u => block@15, 7u => block@16, 8u => block@17, 9u => block@18, 10u => block@19, 11u => block@20, * => block@21}
    block@2: // switch_case_0_L6
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "add_one(uint64)uint64" => block@3, * => block@4}
    block@3: // add_one_route_L23
        test_cases.abi_routing.custom_approval.CustomApproval.add_one[routing]()
        goto block@5
    block@4: // switch_case_default_L6
        goto block@5
    block@5: // switch_case_next_L6
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L6
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@7 : block@10
    block@7: // __algopy_default_create_L1
        goto block@8
    block@8: // L1
        goto block@9
    block@9: // after_inlined_test_cases.abi_routing.custom_approval.CustomApproval.__algopy_default_create_L1
        exit 1u
    block@10: // else_body_L6
        fail // this contract does not implement the given ABI method for create NoOp
    block@11: // switch_case_2_L6
        goto block@21
    block@12: // switch_case_3_L6
        goto block@21
    block@13: // switch_case_4_L6
        goto block@21
    block@14: // switch_case_5_L6
        goto block@21
    block@15: // switch_case_6_L6
        goto block@21
    block@16: // switch_case_7_L6
        goto block@21
    block@17: // switch_case_8_L6
        goto block@21
    block@18: // switch_case_9_L6
        goto block@21
    block@19: // switch_case_10_L6
        goto block@21
    block@20: // switch_case_11_L6
        goto block@21
    block@21: // switch_case_default_L6
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@22: // after_inlined_test_cases.abi_routing.custom_approval.CustomApproval.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine algopy._contract.Contract.__init__() -> void:
    block@0: // L1
        return 