#pragma version 10

test_cases.abi_routing.contract.Reference.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@19
    txna ApplicationArgs 0
    method "noop_with_uint64(uint64)uint8"
    method "all_the_things(uint64)uint8"
    method "mixed_oca(uint64)uint8"
    method "opt_into_asset(asset)void"
    method "with_transactions(asset,uint64,pay,uint64)void"
    method "compare_assets(asset,asset)void"
    method "get_address()address"
    method "get_asset()uint64"
    method "get_application()uint64"
    method "get_an_int()uint64"
    method "method_with_default_args(asset,asset,account,account,application,application,byte[3],uint64,uint64)void"
    method "method_with_more_than_15_args(uint64,uint64,uint64,uint64,asset,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[],byte[],asset,pay,uint64,uint64)uint64"
    method "hello_with_algopy_string(string)string"
    uncover 13
    match main_noop_with_uint64_route@4 main_all_the_things_route@5 main_mixed_oca_route@6 main_opt_into_asset_route@7 main_with_transactions_route@8 main_compare_assets_route@9 main_get_address_route@10 main_get_asset_route@11 main_get_application_route@12 main_get_an_int_route@13 main_method_with_default_args_route@14 main_method_with_more_than_15_args_route@15 main_hello_with_algopy_string_route@16
    b main_switch_case_default@17

main_noop_with_uint64_route@4:
    // abi_routing/contract.py:32
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    // abi_routing/contract.py:32
    // @arc4.abimethod
    callsub noop_with_uint64
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_all_the_things_route@5:
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    // abi_routing/contract.py:37-48
    // @arc4.abimethod(
    //     allow_actions=[
    //         "NoOp",
    //         OnCompleteAction.OptIn,
    //         "CloseOut",
    //         OnCompleteAction.UpdateApplication,
    //         OnCompleteAction.DeleteApplication,
    //     ],
    //     name="all_the_things",
    //     create="allow",
    //     readonly=True,
    // )
    callsub full_abi_config
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_mixed_oca_route@6:
    // abi_routing/contract.py:53-61
    // @arc4.abimethod(
    //     allow_actions=[
    //         "NoOp",
    //         "CloseOut",
    //         "DeleteApplication",
    //     ],
    //     create="disallow",
    //     readonly=True,
    // )
    txn OnCompletion
    int 1
    swap
    shl
    int 37
    &
    assert // OnCompletion is one of NoOp, CloseOut, DeleteApplication
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    // abi_routing/contract.py:53-61
    // @arc4.abimethod(
    //     allow_actions=[
    //         "NoOp",
    //         "CloseOut",
    //         "DeleteApplication",
    //     ],
    //     create="disallow",
    //     readonly=True,
    // )
    callsub mixed_oca
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_opt_into_asset_route@7:
    // abi_routing/contract.py:79
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // abi_routing/contract.py:79
    // @arc4.abimethod
    callsub opt_into_asset
    int 1
    return

main_with_transactions_route@8:
    // abi_routing/contract.py:96
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 3
    // abi_routing/contract.py:96
    // @arc4.abimethod
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub with_transactions
    int 1
    return

main_compare_assets_route@9:
    // abi_routing/contract.py:109
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // abi_routing/contract.py:109
    // @arc4.abimethod
    callsub compare_assets
    int 1
    return

main_get_address_route@10:
    // abi_routing/contract.py:113
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_address
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_get_asset_route@11:
    // abi_routing/contract.py:117
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_asset
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_get_application_route@12:
    // abi_routing/contract.py:121
    // @arc4.abimethod(readonly=True, name="get_application")
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_app
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_get_an_int_route@13:
    // abi_routing/contract.py:125
    // @arc4.abimethod(readonly=True, name="get_an_int")
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_a_int
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_method_with_default_args_route@14:
    // abi_routing/contract.py:129-141
    // @arc4.abimethod(
    //     default_args={
    //         "asset_from_storage": "asa",
    //         "asset_from_function": get_asset,
    //         "account_from_storage": "creator",
    //         "account_from_function": "get_address",
    //         "application_from_storage": "app",
    //         "application_from_function": get_app,
    //         "bytes_from_storage": "some_bytes",
    //         "int_from_storage": "an_int",
    //         "int_from_function": "get_a_int",
    //     }
    // )
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    txna ApplicationArgs 4
    btoi
    txnas Accounts
    txna ApplicationArgs 5
    btoi
    txnas Applications
    txna ApplicationArgs 6
    btoi
    txnas Applications
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    // abi_routing/contract.py:129-141
    // @arc4.abimethod(
    //     default_args={
    //         "asset_from_storage": "asa",
    //         "asset_from_function": get_asset,
    //         "account_from_storage": "creator",
    //         "account_from_function": "get_address",
    //         "application_from_storage": "app",
    //         "application_from_function": get_app,
    //         "bytes_from_storage": "some_bytes",
    //         "int_from_storage": "an_int",
    //         "int_from_function": "get_a_int",
    //     }
    // )
    uncover 8
    uncover 8
    uncover 8
    uncover 8
    uncover 8
    uncover 8
    uncover 8
    uncover 8
    uncover 8
    callsub method_with_default_args
    int 1
    return

main_method_with_more_than_15_args_route@15:
    // abi_routing/contract.py:166
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txnas Assets
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txn GroupIndex
    int 2
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    txna ApplicationArgs 13
    txna ApplicationArgs 14
    txna ApplicationArgs 15
    int 0
    int 8
    extract3 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    int 8
    int 8
    extract3 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    int 16
    int 8
    extract3 // on error: Index access is out of bounds
    btoi
    txna ApplicationArgs 15
    int 24
    int 8
    extract3 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    int 32
    int 8
    extract3 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    dup
    int 40
    extract_uint16
    swap
    dup
    int 42
    extract_uint16
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    txna ApplicationArgs 15
    dup
    int 42
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    txna ApplicationArgs 15
    int 44
    int 1
    extract3 // on error: Index access is out of bounds
    btoi
    txnas Assets
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 15
    int 45
    int 8
    extract3 // on error: Index access is out of bounds
    txna ApplicationArgs 15
    int 53
    int 8
    extract3 // on error: Index access is out of bounds
    // abi_routing/contract.py:166
    // @arc4.abimethod
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    uncover 25
    callsub method_with_more_than_15_args
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_hello_with_algopy_string_route@16:
    // abi_routing/contract.py:232
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // abi_routing/contract.py:232
    // @arc4.abimethod
    callsub hello_with_algopy_string
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_switch_case_default@17:
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    err // reject transaction

main_bare_routing@19:
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    txn OnCompletion
    int 0
    int 1
    int 2
    int 4
    int 5
    uncover 5
    match main_bare_abi_config@20 main_bare_abi_config@20 main_bare_abi_config@20 main_bare_abi_config@20 main_bare_abi_config@20
    b main_reject_bare_on_completion@21

main_bare_abi_config@20:
    // abi_routing/contract.py:66-75
    // @arc4.baremethod(
    //     allow_actions=[
    //         "NoOp",
    //         "OptIn",
    //         "CloseOut",
    //         "UpdateApplication",
    //         "DeleteApplication",
    //     ],
    //     create="require",
    // )
    txn ApplicationID
    !
    assert // is creating
    // abi_routing/contract.py:66-76
    // @arc4.baremethod(
    //     allow_actions=[
    //         "NoOp",
    //         "OptIn",
    //         "CloseOut",
    //         "UpdateApplication",
    //         "DeleteApplication",
    //     ],
    //     create="require",
    // )
    // def bare_abi_config(self) -> None:
    callsub bare_abi_config
    int 1
    return

main_reject_bare_on_completion@21:
    // abi_routing/contract.py:22
    // class Reference(ARC4Contract):
    err // reject transaction


// test_cases.abi_routing.contract.Reference.noop_with_uint64(a: bytes) -> bytes:
noop_with_uint64:
    // abi_routing/contract.py:32-33
    // @arc4.abimethod
    // def noop_with_uint64(self, a: arc4.UInt64) -> arc4.UInt8:
    proto 1 1
    // abi_routing/contract.py:34
    // result = 1 + a.native
    frame_dig -1
    btoi
    int 1
    swap
    +
    // abi_routing/contract.py:35
    // return arc4.UInt8(result)
    itob
    extract 7 1
    retsub


// test_cases.abi_routing.contract.Reference.full_abi_config(a: bytes) -> bytes:
full_abi_config:
    // abi_routing/contract.py:37-49
    // @arc4.abimethod(
    //     allow_actions=[
    //         "NoOp",
    //         OnCompleteAction.OptIn,
    //         "CloseOut",
    //         OnCompleteAction.UpdateApplication,
    //         OnCompleteAction.DeleteApplication,
    //     ],
    //     name="all_the_things",
    //     create="allow",
    //     readonly=True,
    // )
    // def full_abi_config(self, a: arc4.UInt64) -> arc4.UInt8:
    proto 1 1
    // abi_routing/contract.py:50
    // result = UInt64(1) + a.native
    frame_dig -1
    btoi
    int 1
    swap
    +
    // abi_routing/contract.py:51
    // return arc4.UInt8(result)
    itob
    extract 7 1
    retsub


// test_cases.abi_routing.contract.Reference.mixed_oca(a: bytes) -> bytes:
mixed_oca:
    // abi_routing/contract.py:53-62
    // @arc4.abimethod(
    //     allow_actions=[
    //         "NoOp",
    //         "CloseOut",
    //         "DeleteApplication",
    //     ],
    //     create="disallow",
    //     readonly=True,
    // )
    // def mixed_oca(self, a: arc4.UInt64) -> arc4.UInt8:
    proto 1 1
    // abi_routing/contract.py:63
    // result = UInt64(1) + a.native
    frame_dig -1
    btoi
    int 1
    swap
    +
    // abi_routing/contract.py:64
    // return arc4.UInt8(result)
    itob
    extract 7 1
    retsub


// test_cases.abi_routing.contract.Reference.opt_into_asset(asset: uint64) -> void:
opt_into_asset:
    // abi_routing/contract.py:79-80
    // @arc4.abimethod
    // def opt_into_asset(self, asset: Asset) -> None:
    proto 1 0
    // abi_routing/contract.py:81-82
    // # Only allow app creator to opt the app account into a ASA
    // assert op.Txn.sender == op.Global.creator_address, "Only creator can opt in to ASA"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    // abi_routing/contract.py:83-84
    // # Verify a ASA hasn't already been opted into
    // assert not self.asa, "ASA already opted in"
    int 0
    byte "asa"
    app_global_get_ex
    assert // check asa exists
    !
    assert // ASA already opted in
    // abi_routing/contract.py:85-86
    // # Save ASA ID in global state
    // self.asa = asset
    byte "asa"
    frame_dig -1
    app_global_put
    // abi_routing/contract.py:88-89
    // # Submit opt-in transaction: 0 asset transfer to self
    // op.ITxnCreate.begin()
    itxn_begin
    // abi_routing/contract.py:90
    // op.ITxnCreate.set_type_enum(TransactionType.AssetTransfer)
    int axfer
    itxn_field TypeEnum
    // abi_routing/contract.py:91
    // op.ITxnCreate.set_fee(UInt64(0))  # cover fee with outer txn
    int 0
    itxn_field Fee
    // abi_routing/contract.py:92
    // op.ITxnCreate.set_asset_receiver(op.Global.current_application_address)
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    // abi_routing/contract.py:93
    // op.ITxnCreate.set_xfer_asset(asset)
    frame_dig -1
    itxn_field XferAsset
    // abi_routing/contract.py:94
    // op.ITxnCreate.submit()
    itxn_submit
    retsub


// test_cases.abi_routing.contract.Reference.with_transactions(asset: uint64, an_int: bytes, pay: uint64, another_int: bytes) -> void:
with_transactions:
    // abi_routing/contract.py:96-103
    // @arc4.abimethod
    // def with_transactions(
    //     self,
    //     asset: Asset,
    //     an_int: arc4.UInt64,
    //     pay: gtxn.PaymentTransaction,
    //     another_int: arc4.UInt64,
    // ) -> None:
    proto 4 0
    // abi_routing/contract.py:104
    // assert self.asa == asset, "is correct asset"
    int 0
    byte "asa"
    app_global_get_ex
    assert // check asa exists
    frame_dig -4
    ==
    assert // is correct asset
    // abi_routing/contract.py:105
    // assert an_int.native == 1, "is correct int"
    frame_dig -3
    btoi
    int 1
    ==
    assert // is correct int
    // abi_routing/contract.py:106
    // assert pay.receiver == op.Global.current_application_address, "is payment to app"
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // is payment to app
    // abi_routing/contract.py:107
    // assert another_int.native == 2, "is correct int"
    frame_dig -1
    btoi
    int 2
    ==
    assert // is correct int
    retsub


// test_cases.abi_routing.contract.Reference.compare_assets(asset_a: uint64, asset_b: uint64) -> void:
compare_assets:
    // abi_routing/contract.py:109-110
    // @arc4.abimethod
    // def compare_assets(self, asset_a: Asset, asset_b: Asset) -> None:
    proto 2 0
    // abi_routing/contract.py:111
    // assert asset_a == asset_b, "asset a == b"
    frame_dig -2
    frame_dig -1
    ==
    assert // asset a == b
    retsub


// test_cases.abi_routing.contract.Reference.get_address() -> bytes:
get_address:
    // abi_routing/contract.py:113-114
    // @arc4.abimethod(readonly=True)
    // def get_address(self) -> arc4.Address:
    proto 0 1
    // abi_routing/contract.py:115
    // return arc4.Address()
    global ZeroAddress
    retsub


// test_cases.abi_routing.contract.Reference.get_asset() -> bytes:
get_asset:
    // abi_routing/contract.py:117-118
    // @arc4.abimethod(readonly=True)
    // def get_asset(self) -> arc4.UInt64:
    proto 0 1
    // abi_routing/contract.py:119
    // return arc4.UInt64(456)
    byte 0x00000000000001c8
    retsub


// test_cases.abi_routing.contract.Reference.get_app() -> bytes:
get_app:
    // abi_routing/contract.py:121-122
    // @arc4.abimethod(readonly=True, name="get_application")
    // def get_app(self) -> arc4.UInt64:
    proto 0 1
    // abi_routing/contract.py:123
    // return arc4.UInt64(456)
    byte 0x00000000000001c8
    retsub


// test_cases.abi_routing.contract.Reference.get_a_int() -> bytes:
get_a_int:
    // abi_routing/contract.py:125-126
    // @arc4.abimethod(readonly=True, name="get_an_int")
    // def get_a_int(self) -> arc4.UInt64:
    proto 0 1
    // abi_routing/contract.py:127
    // return arc4.UInt64(3)
    byte 0x0000000000000003
    retsub


// test_cases.abi_routing.contract.Reference.method_with_default_args(asset_from_storage: uint64, asset_from_function: uint64, account_from_storage: bytes, account_from_function: bytes, application_from_storage: uint64, application_from_function: uint64, bytes_from_storage: bytes, int_from_storage: bytes, int_from_function: bytes) -> void:
method_with_default_args:
    // abi_routing/contract.py:129-153
    // @arc4.abimethod(
    //     default_args={
    //         "asset_from_storage": "asa",
    //         "asset_from_function": get_asset,
    //         "account_from_storage": "creator",
    //         "account_from_function": "get_address",
    //         "application_from_storage": "app",
    //         "application_from_function": get_app,
    //         "bytes_from_storage": "some_bytes",
    //         "int_from_storage": "an_int",
    //         "int_from_function": "get_a_int",
    //     }
    // )
    // def method_with_default_args(
    //     self,
    //     asset_from_storage: Asset,
    //     asset_from_function: Asset,
    //     account_from_storage: Account,
    //     account_from_function: Account,
    //     application_from_storage: Application,
    //     application_from_function: Application,
    //     bytes_from_storage: Bytes3,
    //     int_from_storage: arc4.UInt64,
    //     int_from_function: arc4.UInt64,
    // ) -> None:
    proto 9 0
    // abi_routing/contract.py:154
    // assert asset_from_storage == Asset(123), "wrong asset from storage"
    frame_dig -9
    int 123
    ==
    assert // wrong asset from storage
    // abi_routing/contract.py:155
    // assert asset_from_function == Asset(456), "wrong asset from function"
    frame_dig -8
    int 456
    ==
    assert // wrong asset from function
    // abi_routing/contract.py:156
    // assert account_from_storage == op.Global.creator_address, "wrong account from storage"
    global CreatorAddress
    frame_dig -7
    swap
    ==
    assert // wrong account from storage
    // abi_routing/contract.py:157
    // assert account_from_function == op.Global.zero_address, "wrong account from function"
    global ZeroAddress
    frame_dig -6
    swap
    ==
    assert // wrong account from function
    // abi_routing/contract.py:158
    // assert application_from_storage == Application(123), "wrong application from storage"
    frame_dig -5
    int 123
    ==
    assert // wrong application from storage
    // abi_routing/contract.py:159
    // assert application_from_function == Application(456), "wrong application from function"
    frame_dig -4
    int 456
    ==
    assert // wrong application from function
    // abi_routing/contract.py:160
    // assert bytes_from_storage[0] == arc4.Byte(7), "wrong 0th byte from storage"
    frame_dig -3
    int 0
    int 1
    *
    int 1
    extract3 // on error: Index access is out of bounds
    byte 0x07
    b==
    assert // wrong 0th byte from storage
    // abi_routing/contract.py:161
    // assert bytes_from_storage[1] == arc4.Byte(8), "wrong 1st byte from storage"
    frame_dig -3
    int 1
    int 1
    *
    int 1
    extract3 // on error: Index access is out of bounds
    byte 0x08
    b==
    assert // wrong 1st byte from storage
    // abi_routing/contract.py:162
    // assert bytes_from_storage[2] == arc4.Byte(9), "wrong 2nd byte from storage"
    frame_dig -3
    int 2
    int 1
    *
    int 1
    extract3 // on error: Index access is out of bounds
    byte 0x09
    b==
    assert // wrong 2nd byte from storage
    // abi_routing/contract.py:163
    // assert int_from_storage.native == 2, "wrong int from storage"
    frame_dig -2
    btoi
    int 2
    ==
    assert // wrong int from storage
    // abi_routing/contract.py:164
    // assert int_from_function.native == 3, "wrong int from function"
    frame_dig -1
    btoi
    int 3
    ==
    assert // wrong int from function
    retsub


// test_cases.abi_routing.contract.Reference.method_with_more_than_15_args(a: bytes, b: bytes, c: bytes, d: uint64, asset: uint64, e: bytes, f: bytes, pay: uint64, g: bytes, h: bytes, i: bytes, j: bytes, k: bytes, l: bytes, m: bytes, n: bytes, o: bytes, p: uint64, q: bytes, r: bytes, s: bytes, t: bytes, asset2: uint64, pay2: uint64, u: bytes, v: bytes) -> bytes:
method_with_more_than_15_args:
    // abi_routing/contract.py:166-196
    // @arc4.abimethod
    // def method_with_more_than_15_args(
    //     self,
    //     a: arc4.UInt64,
    //     b: arc4.UInt64,
    //     c: arc4.UInt64,
    //     d: UInt64,
    //     asset: Asset,
    //     e: arc4.UInt64,
    //     f: arc4.UInt64,
    //     pay: gtxn.PaymentTransaction,
    //     g: arc4.UInt64,
    //     h: arc4.UInt64,
    //     i: arc4.UInt64,
    //     j: arc4.UInt64,
    //     k: arc4.UInt64,
    //     # ruff: noqa: E741
    //     l: arc4.UInt64,
    //     m: arc4.UInt64,
    //     n: arc4.UInt64,
    //     o: arc4.UInt64,
    //     p: UInt64,
    //     q: arc4.UInt64,
    //     r: arc4.UInt64,
    //     s: Bytes,
    //     t: Bytes,
    //     asset2: Asset,
    //     pay2: gtxn.PaymentTransaction,
    //     u: arc4.UInt64,
    //     v: arc4.UInt64,
    // ) -> arc4.UInt64:
    proto 26 1
    // abi_routing/contract.py:201
    // assert op.Txn.num_app_args == 16
    txn NumAppArgs
    int 16
    ==
    assert
    // abi_routing/contract.py:202
    // assert pay.amount == 100000
    frame_dig -19
    gtxns Amount
    int 100000
    ==
    assert
    // abi_routing/contract.py:203
    // assert pay2.amount == 200000
    frame_dig -3
    gtxns Amount
    int 200000
    ==
    assert
    // abi_routing/contract.py:204
    // assert asset.id
    frame_dig -22
    assert
    // abi_routing/contract.py:205
    // assert asset2.id
    frame_dig -4
    assert
    // abi_routing/contract.py:207
    // log(s + t)
    frame_dig -6
    frame_dig -5
    concat
    log
    // abi_routing/contract.py:210
    // a.native
    frame_dig -26
    btoi
    // abi_routing/contract.py:211
    // + b.native
    frame_dig -25
    btoi
    // abi_routing/contract.py:210-211
    // a.native
    // + b.native
    +
    // abi_routing/contract.py:212
    // + c.native
    frame_dig -24
    btoi
    // abi_routing/contract.py:210-212
    // a.native
    // + b.native
    // + c.native
    +
    // abi_routing/contract.py:210-213
    // a.native
    // + b.native
    // + c.native
    // + d
    frame_dig -23
    +
    // abi_routing/contract.py:214
    // + e.native
    frame_dig -21
    btoi
    // abi_routing/contract.py:210-214
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    +
    // abi_routing/contract.py:215
    // + f.native
    frame_dig -20
    btoi
    // abi_routing/contract.py:210-215
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    +
    // abi_routing/contract.py:216
    // + g.native
    frame_dig -18
    btoi
    // abi_routing/contract.py:210-216
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    +
    // abi_routing/contract.py:217
    // + h.native
    frame_dig -17
    btoi
    // abi_routing/contract.py:210-217
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    +
    // abi_routing/contract.py:218
    // + i.native
    frame_dig -16
    btoi
    // abi_routing/contract.py:210-218
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    // + i.native
    +
    // abi_routing/contract.py:219
    // + j.native
    frame_dig -15
    btoi
    // abi_routing/contract.py:210-219
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    // + i.native
    // + j.native
    +
    // abi_routing/contract.py:220
    // + k.native
    frame_dig -14
    btoi
    // abi_routing/contract.py:210-220
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    // + i.native
    // + j.native
    // + k.native
    +
    // abi_routing/contract.py:221
    // + l.native
    frame_dig -13
    btoi
    // abi_routing/contract.py:210-221
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    // + i.native
    // + j.native
    // + k.native
    // + l.native
    +
    // abi_routing/contract.py:222
    // + m.native
    frame_dig -12
    btoi
    // abi_routing/contract.py:210-222
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    // + i.native
    // + j.native
    // + k.native
    // + l.native
    // + m.native
    +
    // abi_routing/contract.py:223
    // + n.native
    frame_dig -11
    btoi
    // abi_routing/contract.py:210-223
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    // + i.native
    // + j.native
    // + k.native
    // + l.native
    // + m.native
    // + n.native
    +
    // abi_routing/contract.py:224
    // + o.native
    frame_dig -10
    btoi
    // abi_routing/contract.py:210-224
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    // + i.native
    // + j.native
    // + k.native
    // + l.native
    // + m.native
    // + n.native
    // + o.native
    +
    // abi_routing/contract.py:210-225
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    // + i.native
    // + j.native
    // + k.native
    // + l.native
    // + m.native
    // + n.native
    // + o.native
    // + p
    frame_dig -9
    +
    // abi_routing/contract.py:226
    // + q.native
    frame_dig -8
    btoi
    // abi_routing/contract.py:210-226
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    // + i.native
    // + j.native
    // + k.native
    // + l.native
    // + m.native
    // + n.native
    // + o.native
    // + p
    // + q.native
    +
    // abi_routing/contract.py:227
    // + r.native
    frame_dig -7
    btoi
    // abi_routing/contract.py:210-227
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    // + i.native
    // + j.native
    // + k.native
    // + l.native
    // + m.native
    // + n.native
    // + o.native
    // + p
    // + q.native
    // + r.native
    +
    // abi_routing/contract.py:228
    // + u.native
    frame_dig -2
    btoi
    // abi_routing/contract.py:210-228
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    // + i.native
    // + j.native
    // + k.native
    // + l.native
    // + m.native
    // + n.native
    // + o.native
    // + p
    // + q.native
    // + r.native
    // + u.native
    +
    // abi_routing/contract.py:229
    // + v.native
    frame_dig -1
    btoi
    // abi_routing/contract.py:210-229
    // a.native
    // + b.native
    // + c.native
    // + d
    // + e.native
    // + f.native
    // + g.native
    // + h.native
    // + i.native
    // + j.native
    // + k.native
    // + l.native
    // + m.native
    // + n.native
    // + o.native
    // + p
    // + q.native
    // + r.native
    // + u.native
    // + v.native
    +
    // abi_routing/contract.py:209-230
    // return arc4.UInt64(
    //     a.native
    //     + b.native
    //     + c.native
    //     + d
    //     + e.native
    //     + f.native
    //     + g.native
    //     + h.native
    //     + i.native
    //     + j.native
    //     + k.native
    //     + l.native
    //     + m.native
    //     + n.native
    //     + o.native
    //     + p
    //     + q.native
    //     + r.native
    //     + u.native
    //     + v.native
    // )
    itob
    retsub


// test_cases.abi_routing.contract.Reference.hello_with_algopy_string(name: bytes) -> bytes:
hello_with_algopy_string:
    // abi_routing/contract.py:232-233
    // @arc4.abimethod
    // def hello_with_algopy_string(self, name: String) -> String:
    proto 1 1
    // abi_routing/contract.py:234
    // return "Hello " + name + "!"
    byte "Hello "
    frame_dig -1
    concat
    byte "!"
    concat
    retsub


// test_cases.abi_routing.contract.Reference.bare_abi_config() -> void:
bare_abi_config:
    // abi_routing/contract.py:66-76
    // @arc4.baremethod(
    //     allow_actions=[
    //         "NoOp",
    //         "OptIn",
    //         "CloseOut",
    //         "UpdateApplication",
    //         "DeleteApplication",
    //     ],
    //     create="require",
    // )
    // def bare_abi_config(self) -> None:
    proto 0 0
    // abi_routing/contract.py:77
    // log(b"Hello World")
    byte "Hello World"
    log
    retsub


// test_cases.abi_routing.contract.Reference.__init__() -> void:
__init__:
    // abi_routing/contract.py:23
    // def __init__(self) -> None:
    proto 0 0
    // abi_routing/contract.py:24
    // self.asa = Asset(123)
    byte "asa"
    int 123
    app_global_put
    // abi_routing/contract.py:25
    // self.an_int = UInt64(2)
    byte "an_int"
    int 2
    app_global_put
    // abi_routing/contract.py:26
    // self.some_bytes = Bytes3(arc4.Byte(7), arc4.Byte(8), arc4.Byte(9))
    byte 0x
    byte 0x07
    concat
    byte 0x08
    concat
    byte 0x09
    concat
    byte "some_bytes"
    swap
    app_global_put
    // abi_routing/contract.py:27
    // self.creator = op.Txn.sender
    txn Sender
    byte "creator"
    swap
    app_global_put
    // abi_routing/contract.py:28
    // self.app = Application(123)
    byte "app"
    int 123
    app_global_put
    // abi_routing/contract.py:30
    // assert arc4.arc4_signature("get(uint64,byte[])byte[]"), "has method selector"
    method "get(uint64,byte[])byte[]"
    len
    assert // has method selector
    retsub
