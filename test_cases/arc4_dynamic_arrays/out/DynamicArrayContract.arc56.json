{
    "name": "DynamicArrayContract",
    "structs": {},
    "methods": [
        {
            "name": "test_static_elements",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_elements",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_mixed_single_dynamic_elements",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_mixed_multiple_dynamic_elements",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_struct_replacement",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_tuple_modification",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        263,
                        275,
                        284,
                        296,
                        308,
                        320
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        337
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        266,
                        278,
                        287,
                        299,
                        311,
                        323
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        818,
                        842,
                        865,
                        889,
                        955,
                        978,
                        1001,
                        1080,
                        1127,
                        1255,
                        1278
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1551
                    ],
                    "errorMessage": "tup1 does not match tup2"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAgEABCYKAAwABAAHAAFhAANiZWUVAAAAAAAAAAMAEgAABAAAAAAAAAFhFgACAAAAAAAAAAMEBQAABAAAAAAAKv8KAAAAAAAAAAMEBQoAAAQAAAAAACr/FAAEABEAC0hlbGxvIFdvcmxkAAFhGQACAAAEAAAAAAAAEgAAAAAAAAADAANiZWUXAAAEAAAAAAAAEgAAAAAAAAADAANiZWUrAAAEAAAAAAAAHAAAAAAAAAADACEAAAQAAAAAAAADYmVlAAQAAQACAAMABDEbQQB3ggYEVXFYJwRxPdbbBDcViqwEhXC+OwRRqoxJBCg6GG82GgCOBgA6AC4AIgAWAA0AAQAxGRREMRhEiAQ1I0MxGRREMRhEI0MxGRREMRhEiANXI0MxGRREMRhEiAJ0I0MxGRREMRhEiAG/I0MxGRREMRhEiAGVI0MxGUD/tTEYFEQjQ4oCAov+JFkjCRZXBgCL/kxcAEkVi/8JSov/WE8CJE8DUomKAQKL/yRZIwlJIgtJi/9XAgBJTgJJTwJZSU8CSRVMTgJSKCSLBosBDEEAG4sCiwZJTgJZIgkWVwYCiwVMUIwFIgiMBkL/3YsAFlcGAosFUIsBIgiLAkyLA1JQiwSMAIwBiYoEAShJi/4iC4v8IgskiwSLAwxBAByL/YsESU4CWYsCCBZXBgKLAUxQjAEiCIwEQv/ci/0VjAAkjASLBIsCDEEAHIv/iwRJTgJZiwAIFlcGAosBTFCMASIIjARC/9yL/Iv+CBZXBgKLAVCL/YsDiwBSUIv/FYv/iwJPAlJQjACJigMBi/1RAAJJF4v9VwIAi/8iC0sBTFmL/yMIIgtJTgRLAkxZSwIVSwSL/wkjCUsBTwNPAk1JSwMJTgWL/hVOBUsDJE8EUov+UE8DTwJPA1JQTCILiwGLBQxBACCLBEmLAUlOA1mLAwiLAgkWVwYCSwJMXYwEIgiMAUL/2IsAiwRQjACJK7AnBLAnBbArgQqI/mpMJwUSRIEKiP5gSCcEEkSJIoAcAAQAEAAEAAcAAWEAA2JlZQAEAAcAAWEAA2JlZSOADgACAAQABwABYQADYmVliP6rSSRZIw1EJwYjiP8fSbBJVwIASwEkWUsBJFlLASMJSwMVSwQiWUpPBE1LBU8ETwJSsEsCIglLBCVZSwNLAU8DTUsFTwNPAlKwTwKBAwlLA4EGWU8DTE8CTVKwiP3sTCkSREmwiP3jTCcGEkRJsIj92UwpEkSwiSQoIycHiP4tSSRZTFcCACMnB4j+IEkkWUQqJIj+l0mwSVcCAEsBJFlLASRZSwEjCUsDFUsEIllKTwRNSwVPBE8CUrBLAiIJSwQlWU8DTE8CTUsDTgJSsE8CiP13TCcIEkSI/W9IKhJESSISRElLAk8CTwOI/b9JJFlJJRJESSMJTwJXAgBLASILSwFMWU8CIwhLA0sBCUsDFU8CIgtLBExZSwFMTwNNSwNPA08CUicIEkRLAiIJSSILSwNMWUwjCE8ESwEJTCILSwRMWU8DTE8CTVIqEkSJgFQAAgAEACsAAAAAAAAAAwAcAAAEAAAAAAAAHwAAAAAAAAADAAFhAAP//wAAACoAAAAAAAAAAwAcAAAEAAAAAAAAHwAAAAAAAAADAAFhAAP//wAAAConCSOI/YJJsElXAgBLASRZSwEkWUsBIwlLAxVLBCJZSk8ETUsFTwRPAlKwTwIiCUsDJVlPA0xPAk1SsIj8aEwnCRJEiPxgSIAnAAAAAAAAAAMAHAAABAAAAAAAAB8AAAAAAAAAAwABYQAD//8AAAAqEkSJgAoABP//AAAAKgB7Ioj8AUUBgB8AAAAAAAAAAwAcAAAEAAAAAAAAHwAAAAAAAAADAAFhTFCAJgAAAAAAAAADBAUAGgAABAAAAAAABQQAJgBPAAQABwABYQADYmVlSwFQKVBMFYFPCIEpCRZXBgJcGIBZAAAAAAAAAAMEBQAaAAAEAAAAAAAFBAAmAE0ABAAHAAFhAANiZWUAAAAAAAAAAwAcAAAEAAAAAAAAHwAAAAAAAAADAAFhAAP//wAAACoABAAHAAFhAANiZWUSRIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}