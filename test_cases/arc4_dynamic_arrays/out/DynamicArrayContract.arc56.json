{
    "name": "DynamicArrayContract",
    "structs": {},
    "methods": [
        {
            "name": "test_static_elements",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_elements",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_mixed_single_dynamic_elements",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_mixed_multiple_dynamic_elements",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_struct_replacement",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_tuple_modification",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        253,
                        265,
                        274,
                        286,
                        298,
                        310
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        327
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        256,
                        268,
                        277,
                        289,
                        301,
                        313
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        754,
                        816,
                        840,
                        863,
                        887,
                        953,
                        976,
                        999,
                        1078,
                        1125,
                        1253,
                        1276
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1547
                    ],
                    "errorMessage": "tup1 does not match tup2"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}