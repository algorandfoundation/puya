{
    "name": "DynamicArrayContract",
    "structs": {},
    "methods": [
        {
            "name": "test_static_elements",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_elements",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_mixed_single_dynamic_elements",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_mixed_multiple_dynamic_elements",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_struct_replacement",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_tuple_modification",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        213
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        276
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        754,
                        778,
                        801,
                        825,
                        892,
                        915,
                        938,
                        1017,
                        1064,
                        1191,
                        1214
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1486
                    ],
                    "errorMessage": "tup1 does not match tup2"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAgABBCYKAAwABAAHAAFhAANiZWUVAAAAAAAAAAMAEgAABAAAAAAAAAFhFgACAAAAAAAAAAMEBQAABAAAAAAAKv8KAAAAAAAAAAMEBQoAAAQAAAAAACr/FAAEABEAC0hlbGxvIFdvcmxkAAFhGQACAAAEAAAAAAAAEgAAAAAAAAADAANiZWUXAAAEAAAAAAAAEgAAAAAAAAADAANiZWUrAAAEAAAAAAAAHAAAAAAAAAADACEAAAQAAAAAAAADYmVlAAQAAQACAAMABDEbQQA7MRkURDEYRIIGBFVxWCcEcT3W2wQ3FYqsBIVwvjsEUaqMSQQoOhhvNhoAjgYBkwGwAloDMAABA/gAJEMxGRQxGBQQQ4oCAov+I1kkCRZXBgCL/kxcAEkVi/8JSov/WE8CI08DUomKAQKL/yNZJAlJIgtJi/9XAgBJTgJJTwJZSU8CSRVMTgJSKCOLBosBDEEAG4sCiwZJTgJZIgkWVwYCiwVMUIwFIgiMBkL/3YsAFlcGAosFUIsBIgiLAkyLA1JQiwSMAIwBiYoEAShJi/4iC4v8IgsjiwSLAwxBAByL/YsESU4CWYsCCBZXBgKLAUxQjAEiCIwEQv/ci/0VjAAjjASLBIsCDEEAHIv/iwRJTgJZiwAIFlcGAosBTFCMASIIjARC/9yL/Iv+CBZXBgKLAVCL/YsDiwBSUIv/FYv/iwJPAlJQjACJigMBi/1RAAJJF4v9VwIAi/8iC0sBTFmL/yQIIgtJTgRLAkxZSwIVSwSL/wkkCUsBTwNPAk1JSwMJTgWL/hVOBUsDI08EUov+UE8DTwJPA1JQTCILiwGLBQxBACCLBEmLAUlOA1mLAwiLAgkWVwYCSwJMXYwEIgiMAUL/2IsAiwRQjACJK7AnBLAnBbArgQqI/mpMJwUSRIEKiP5gSCcEEkMigBwABAAQAAQABwABYQADYmVlAAQABwABYQADYmVlJIAOAAIABAAHAAFhAANiZWWI/qxJI1kkDUQnBiSI/yBJsElXAgBLASNZSwEjWUsBJAlLAxVLBCJZSk8ETUsFTwRPAlKwSwIiCUsEJVlLA0sBTwNNSwVPA08CUrBPAoEDCUsDgQZZTwNMTwJNUrCI/e1MKRJESbCI/eRMJwYSREmwiP3aTCkSRLAkQyMoJCcHiP4tSSNZTFcCACQnB4j+IEkjWUQqI4j+l0mwSVcCAEsBI1lLASNZSwEkCUsDFUsEIllKTwRNSwVPBE8CUrBLAiIJSwQlWU8DTE8CTUsDTgJSsE8CiP13TCcIEkSI/W9IKhJESSISRElLAk8CTwOI/b9JI1lJJRJESSQJTwJXAgBLASILSwFMWU8CJAhLA0sBCUsDFU8CIgtLBExZSwFMTwNNSwNPA08CUicIEkRLAiIJSSILSwNMWUwkCE8ESwEJTCILSwRMWU8DTE8CTVIqEkOAVAACAAQAKwAAAAAAAAADABwAAAQAAAAAAAAfAAAAAAAAAAMAAWEAA///AAAAKgAAAAAAAAADABwAAAQAAAAAAAAfAAAAAAAAAAMAAWEAA///AAAAKicJJIj9g0mwSVcCAEsBI1lLASNZSwEkCUsDFUsEIllKTwRNSwVPBE8CUrBPAiIJSwMlWU8DTE8CTVKwiPxpTCcJEkSI/GFIgCcAAAAAAAAAAwAcAAAEAAAAAAAAHwAAAAAAAAADAAFhAAP//wAAACoSQ4AKAAT//wAAACoAeyKI/ANFAYAfAAAAAAAAAAMAHAAABAAAAAAAAB8AAAAAAAAAAwABYUxQgCYAAAAAAAAAAwQFABoAAAQAAAAAAAUEACYATwAEAAcAAWEAA2JlZUsBUClQTBWBTwiBKQkWVwYCXBiAWQAAAAAAAAADBAUAGgAABAAAAAAABQQAJgBNAAQABwABYQADYmVlAAAAAAAAAAMAHAAABAAAAAAAAB8AAAAAAAAAAwABYQAD//8AAAAqAAQABwABYQADYmVlEkM=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}