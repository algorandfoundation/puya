contract test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L-1
                let tmp%0#0: bool = test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__() -> bool:
            block@0: // L38
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@10
            block@1: // abi_routing_L38
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "test_static_elements()void" => block@2, method "test_dynamic_elements()void" => block@3, method "test_mixed_single_dynamic_elements()void" => block@4, method "test_mixed_multiple_dynamic_elements()void" => block@5, method "test_nested_struct_replacement()void" => block@6, method "test_nested_tuple_modification()void" => block@7, * => return 0u}
            block@2: // test_static_elements_route_L40
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements()
                return 1u
            block@3: // test_dynamic_elements_route_L56
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (! tmp%7#0)
                (assert tmp%8#0) // OnCompletion is NoOp
                let tmp%9#0: uint64 = (txn ApplicationID)
                (assert tmp%9#0) // is not creating
                test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements()
                return 1u
            block@4: // test_mixed_single_dynamic_elements_route_L75
                let tmp%11#0: uint64 = (txn OnCompletion)
                let tmp%12#0: bool = (! tmp%11#0)
                (assert tmp%12#0) // OnCompletion is NoOp
                let tmp%13#0: uint64 = (txn ApplicationID)
                (assert tmp%13#0) // is not creating
                test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements()
                return 1u
            block@5: // test_mixed_multiple_dynamic_elements_route_L90
                let tmp%15#0: uint64 = (txn OnCompletion)
                let tmp%16#0: bool = (! tmp%15#0)
                (assert tmp%16#0) // OnCompletion is NoOp
                let tmp%17#0: uint64 = (txn ApplicationID)
                (assert tmp%17#0) // is not creating
                test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements()
                return 1u
            block@6: // test_nested_struct_replacement_route_L107
                let tmp%19#0: uint64 = (txn OnCompletion)
                let tmp%20#0: bool = (! tmp%19#0)
                (assert tmp%20#0) // OnCompletion is NoOp
                let tmp%21#0: uint64 = (txn ApplicationID)
                (assert tmp%21#0) // is not creating
                test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement()
                return 1u
            block@7: // test_nested_tuple_modification_route_L134
                let tmp%23#0: uint64 = (txn OnCompletion)
                let tmp%24#0: bool = (! tmp%23#0)
                (assert tmp%24#0) // OnCompletion is NoOp
                let tmp%25#0: uint64 = (txn ApplicationID)
                (assert tmp%25#0) // is not creating
                test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification()
                return 1u
            block@10: // bare_routing_L38
                let tmp%27#0: uint64 = (txn OnCompletion)
                goto tmp%27#0 ? block@14 : block@11
            block@11: // __algopy_default_create_L38
                let tmp%28#0: uint64 = (txn ApplicationID)
                let tmp%29#0: bool = (! tmp%28#0)
                (assert tmp%29#0) // is creating
                return 1u
            block@14: // after_if_else_L38
                return 0u
        
        subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements() -> void:
            block@0: // L40
                let tmp%0#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_byte1()
                let tmp%1#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_byte2()
                let byte_array1#0: bytes = (concat tmp%0#0 tmp%1#0)
                let tmp%2#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_byte3()
                let tmp%3#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_byte4()
                let byte_array2#0: bytes = (concat tmp%2#0 tmp%3#0)
                let tmp%4#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let struct1#0: bytes = (concat tmp%4#0 byte_array1#0)
                let tmp%5#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint2()
                let struct2#0: bytes = (concat tmp%5#0 byte_array2#0)
                let result%5#0: bytes = (concat struct1#0 struct1#0)
                let array#0: bytes = (concat 0x0002 result%5#0)
                let array_length%0#0: uint64 = (extract_uint16 array#0 0u)
                let index_is_in_bounds%0#0: bool = (< 1u array_length%0#0)
                (assert index_is_in_bounds%0#0) // Index access is out of bounds
                let array#1: bytes = ((replace2 12) array#0 struct2#0)
                (log array#1)
                let array_head_and_tail%0#0: bytes = ((extract 2 0) array#1)
                let tmp%6#0: bytes = ((extract 0 10) array_head_and_tail%0#0) // on error: Index access is out of bounds
                (log tmp%6#0)
                let tmp%7#0: bytes = ((extract 10 10) array_head_and_tail%0#0) // on error: Index access is out of bounds
                (log tmp%7#0)
                let (popped%0#0: bytes, array#2: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(array#1, 10u)
                let tmp%8#0: bool = (== popped%0#0 struct2#0)
                (assert tmp%8#0)
                let (popped%1#0: bytes, array#3: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(array#2, 10u)
                let tmp%9#0: bool = (== popped%1#0 struct1#0)
                (assert tmp%9#0)
                return 
        
        subroutine test_cases.arc4_dynamic_arrays.contract.get_byte1() -> bytes:
            block@0: // L198
                return 0x04
        
        subroutine test_cases.arc4_dynamic_arrays.contract.get_byte2() -> bytes:
            block@0: // L203
                return 0x05
        
        subroutine test_cases.arc4_dynamic_arrays.contract.get_byte3() -> bytes:
            block@0: // L208
                return 0x2a
        
        subroutine test_cases.arc4_dynamic_arrays.contract.get_byte4() -> bytes:
            block@0: // L213
                return 0xff
        
        subroutine test_cases.arc4_dynamic_arrays.contract.get_uint1() -> bytes:
            block@0: // L188
                return 0x0000000000000003
        
        subroutine test_cases.arc4_dynamic_arrays.contract.get_uint2() -> bytes:
            block@0: // L193
                return 0x0000040000000000
        
        subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements() -> void:
            block@0: // L56
                let tmp%0#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string1()
                let tmp%1#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string2()
                let data_length%0#0: uint64 = (len tmp%0#0)
                let current_tail_offset%1#0: uint64 = (+ 4u data_length%0#0)
                let as_bytes%1#0: bytes = (itob current_tail_offset%1#0)
                let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_tuple_buffer%2#0: bytes = (concat 0x0004 offset_as_uint16%1#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 tmp%0#0)
                let struct1#0: bytes = (concat encoded_tuple_buffer%3#0 tmp%1#0)
                let tmp%2#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string3()
                let tmp%3#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string1()
                let data_length%2#0: uint64 = (len tmp%2#0)
                let current_tail_offset%4#0: uint64 = (+ 4u data_length%2#0)
                let as_bytes%3#0: bytes = (itob current_tail_offset%4#0)
                let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_tuple_buffer%7#0: bytes = (concat 0x0004 offset_as_uint16%3#0)
                let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 tmp%2#0)
                let struct2#0: bytes = (concat encoded_tuple_buffer%8#0 tmp%3#0)
                let next_item_len%0#0: uint64 = (len struct1#0)
                let tail_offset%0#0: uint64 = (+ 4u next_item_len%0#0)
                let as_bytes%5#0: bytes = (itob tail_offset%0#0)
                let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%5#0)
                let result%1#0: bytes = (concat 0x0004 next_item_head%1#0)
                let result%2#0: bytes = (concat result%1#0 struct1#0)
                let result%3#0: bytes = (concat result%2#0 struct1#0)
                let array#0: bytes = (concat 0x0002 result%3#0)
                let result%5#0: bytes = (concat 0x0002 struct1#0)
                let l_count%0#0: uint64 = (extract_uint16 array#0 0u)
                let l_head_and_tail%0#0: bytes = ((extract 2 0) array#0)
                let array#1: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, 1u, result%5#0)
                let array#2: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(array#1, struct2#0, 1u)
                (log array#2)
                let array_head_and_tail%0#0: bytes = ((extract 2 0) array#2)
                let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 0u)
                let array_length%0#0: uint64 = (extract_uint16 array#2 0u)
                let has_next%0#0: uint64 = (- array_length%0#0 1u) // on error: Index access is out of bounds
                let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
                let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 2u)
                let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
                let tmp%4#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
                (log tmp%4#0)
                let has_next%1#0: uint64 = (- array_length%0#0 2u) // on error: Index access is out of bounds
                let next_item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%0#0 4u)
                let end_offset%1#0: uint64 = (select end_of_array%0#0 next_item_offset%1#0 has_next%1#0)
                let tmp%5#0: bytes = (substring3 array_head_and_tail%0#0 next_item_offset%0#0 end_offset%1#0)
                (log tmp%5#0)
                let has_next%2#0: uint64 = (- array_length%0#0 3u) // on error: Index access is out of bounds
                let next_item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%0#0 6u)
                let end_offset%2#0: uint64 = (select end_of_array%0#0 next_item_offset%2#0 has_next%2#0)
                let tmp%6#0: bytes = (substring3 array_head_and_tail%0#0 next_item_offset%1#0 end_offset%2#0)
                (log tmp%6#0)
                let (popped%0#0: bytes, array#3: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#2)
                let tmp%7#0: bool = (== popped%0#0 struct1#0)
                (assert tmp%7#0)
                (log array#3)
                let (popped%1#0: bytes, array#4: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#3)
                let tmp%8#0: bool = (== popped%1#0 struct2#0)
                (assert tmp%8#0)
                (log array#4)
                let (popped%2#0: bytes, array#5: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#4)
                let tmp%9#0: bool = (== popped%2#0 struct1#0)
                (assert tmp%9#0)
                (log array#5)
                return 
        
        subroutine test_cases.arc4_dynamic_arrays.contract.get_string1() -> bytes:
            block@0: // L173
                return 0x000161
        
        subroutine test_cases.arc4_dynamic_arrays.contract.get_string2() -> bytes:
            block@0: // L178
                return 0x0003626565
        
        subroutine test_cases.arc4_dynamic_arrays.contract.get_string3() -> bytes:
            block@0: // L183
                return 0x000b48656c6c6f20576f726c64
        
        subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements() -> void:
            block@0: // L75
                let tmp%0#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let tmp%1#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string1()
                let tmp%2#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint2()
                let encoded_tuple_buffer%2#0: bytes = (concat tmp%0#0 0x0012)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 tmp%2#0)
                let struct1#0: bytes = (concat encoded_tuple_buffer%3#0 tmp%1#0)
                let tmp%3#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint2()
                let tmp%4#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string2()
                let tmp%5#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let encoded_tuple_buffer%7#0: bytes = (concat tmp%3#0 0x0012)
                let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 tmp%5#0)
                let struct2#0: bytes = (concat encoded_tuple_buffer%8#0 tmp%4#0)
                let result%1#0: bytes = (concat 0x0002 struct2#0)
                let array#1: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(0u, 0x, 1u, result%1#0)
                let l_count%1#0: uint64 = (extract_uint16 array#1 0u)
                let l_head_and_tail%1#0: bytes = ((extract 2 0) array#1)
                let array#2: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%1#0, l_head_and_tail%1#0, 1u, result%1#0)
                let array#3: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(array#2, struct1#0, 0u)
                (log array#3)
                let array_head_and_tail%0#0: bytes = ((extract 2 0) array#3)
                let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 0u)
                let array_length%0#0: uint64 = (extract_uint16 array#3 0u)
                let has_next%0#0: uint64 = (- array_length%0#0 1u) // on error: Index access is out of bounds
                let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
                let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 2u)
                let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
                let tmp%6#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
                (log tmp%6#0)
                let has_next%1#0: uint64 = (- array_length%0#0 2u) // on error: Index access is out of bounds
                let next_item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%0#0 4u)
                let end_offset%1#0: uint64 = (select end_of_array%0#0 next_item_offset%1#0 has_next%1#0)
                let tmp%7#0: bytes = (substring3 array_head_and_tail%0#0 next_item_offset%0#0 end_offset%1#0)
                (log tmp%7#0)
                let (popped%0#0: bytes, array#4: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#3)
                let tmp%8#0: bool = (== popped%0#0 struct2#0)
                (assert tmp%8#0)
                let (popped%1#0: bytes, array#5: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#4)
                let tmp%9#0: bool = (== popped%1#0 struct1#0)
                (assert tmp%9#0)
                return 
        
        subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements() -> void:
            block@0: // L90
                let tmp%0#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let tmp%1#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string1()
                let tmp%2#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint2()
                let tmp%3#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
                let tmp%4#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let encoded_tuple_buffer%2#0: bytes = (concat tmp%0#0 0x001c)
                let data_length%0#0: uint64 = (len tmp%1#0)
                let current_tail_offset%1#0: uint64 = (+ 28u data_length%0#0)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 tmp%2#0)
                let as_bytes%1#0: bytes = (itob current_tail_offset%1#0)
                let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 offset_as_uint16%1#0)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 tmp%4#0)
                let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 tmp%1#0)
                let struct1#0: bytes = (concat encoded_tuple_buffer%6#0 tmp%3#0)
                let tmp%5#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint2()
                let tmp%6#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string2()
                let tmp%7#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let tmp%8#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_u16_arr2()
                let tmp%9#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint2()
                let encoded_tuple_buffer%10#0: bytes = (concat tmp%5#0 0x001c)
                let data_length%2#0: uint64 = (len tmp%6#0)
                let current_tail_offset%4#0: uint64 = (+ 28u data_length%2#0)
                let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 tmp%7#0)
                let as_bytes%3#0: bytes = (itob current_tail_offset%4#0)
                let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 offset_as_uint16%3#0)
                let encoded_tuple_buffer%13#0: bytes = (concat encoded_tuple_buffer%12#0 tmp%9#0)
                let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 tmp%6#0)
                let struct2#0: bytes = (concat encoded_tuple_buffer%14#0 tmp%8#0)
                let next_item_len%0#0: uint64 = (len struct1#0)
                let tail_offset%0#0: uint64 = (+ 4u next_item_len%0#0)
                let as_bytes%5#0: bytes = (itob tail_offset%0#0)
                let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%5#0)
                let result%1#0: bytes = (concat 0x0004 next_item_head%1#0)
                let result%2#0: bytes = (concat result%1#0 struct1#0)
                let result%3#0: bytes = (concat result%2#0 struct1#0)
                let array#0: bytes = (concat 0x0002 result%3#0)
                let array#1: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(array#0, struct2#0, 1u)
                (log array#1)
                let array_head_and_tail%0#0: bytes = ((extract 2 0) array#1)
                let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 0u)
                let array_length%0#0: uint64 = (extract_uint16 array#1 0u)
                let has_next%0#0: uint64 = (- array_length%0#0 1u) // on error: Index access is out of bounds
                let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
                let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 2u)
                let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
                let tmp%10#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
                (log tmp%10#0)
                let has_next%1#0: uint64 = (- array_length%0#0 2u) // on error: Index access is out of bounds
                let next_item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%0#0 4u)
                let end_offset%1#0: uint64 = (select end_of_array%0#0 next_item_offset%1#0 has_next%1#0)
                let tmp%11#0: bytes = (substring3 array_head_and_tail%0#0 next_item_offset%0#0 end_offset%1#0)
                (log tmp%11#0)
                let (popped%0#0: bytes, array#2: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#1)
                let tmp%12#0: bool = (== popped%0#0 struct2#0)
                (assert tmp%12#0)
                let (popped%1#0: bytes, array#3: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#2)
                let tmp%13#0: bool = (== popped%1#0 struct1#0)
                (assert tmp%13#0)
                return 
        
        subroutine test_cases.arc4_dynamic_arrays.contract.get_u16_arr1() -> bytes:
            block@0: // L218
                return 0x0003ffff0000002a
        
        subroutine test_cases.arc4_dynamic_arrays.contract.get_u16_arr2() -> bytes:
            block@0: // L223
                return 0x00040001000200030004
        
        subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement() -> void:
            block@0: // L107
                let tmp%0#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let tmp%1#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_byte1()
                let tmp%2#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_byte2()
                let result%1#0: bytes = (concat tmp%1#0 tmp%2#0)
                let one#0: bytes = (concat tmp%0#0 result%1#0)
                let tmp%3#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string1()
                let tmp%4#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string2()
                let data_length%0#0: uint64 = (len tmp%3#0)
                let current_tail_offset%2#0: uint64 = (+ 4u data_length%0#0)
                let as_bytes%1#0: bytes = (itob current_tail_offset%2#0)
                let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_tuple_buffer%5#0: bytes = (concat 0x0004 offset_as_uint16%1#0)
                let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 tmp%3#0)
                let two#0: bytes = (concat encoded_tuple_buffer%6#0 tmp%4#0)
                let tmp%5#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint2()
                let tmp%6#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_byte2()
                let tmp%7#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_byte1()
                let result%3#0: bytes = (concat tmp%6#0 tmp%7#0)
                let three#0: bytes = (concat tmp%5#0 result%3#0)
                let tmp%8#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let tmp%9#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string1()
                let tmp%10#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint2()
                let tmp%11#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
                let tmp%12#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let encoded_tuple_buffer%13#0: bytes = (concat tmp%8#0 0x001c)
                let data_length%2#0: uint64 = (len tmp%9#0)
                let current_tail_offset%6#0: uint64 = (+ 28u data_length%2#0)
                let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 tmp%10#0)
                let as_bytes%3#0: bytes = (itob current_tail_offset%6#0)
                let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_tuple_buffer%15#0: bytes = (concat encoded_tuple_buffer%14#0 offset_as_uint16%3#0)
                let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 tmp%12#0)
                let encoded_tuple_buffer%17#0: bytes = (concat encoded_tuple_buffer%16#0 tmp%9#0)
                let four#0: bytes = (concat encoded_tuple_buffer%17#0 tmp%11#0)
                let tmp%13#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string1()
                let tmp%14#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string2()
                let data_length%4#0: uint64 = (len tmp%13#0)
                let current_tail_offset%9#0: uint64 = (+ 4u data_length%4#0)
                let as_bytes%5#0: bytes = (itob current_tail_offset%9#0)
                let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%5#0)
                let encoded_tuple_buffer%21#0: bytes = (concat 0x0004 offset_as_uint16%5#0)
                let encoded_tuple_buffer%22#0: bytes = (concat encoded_tuple_buffer%21#0 tmp%13#0)
                let five#0: bytes = (concat encoded_tuple_buffer%22#0 tmp%14#0)
                let encoded_tuple_buffer%26#0: bytes = (concat one#0 0x001a)
                let data_length%6#0: uint64 = (len two#0)
                let current_tail_offset%12#0: uint64 = (+ 26u data_length%6#0)
                let encoded_tuple_buffer%27#0: bytes = (concat encoded_tuple_buffer%26#0 three#0)
                let as_bytes%7#0: bytes = (itob current_tail_offset%12#0)
                let offset_as_uint16%7#0: bytes = ((extract 6 2) as_bytes%7#0)
                let encoded_tuple_buffer%28#0: bytes = (concat encoded_tuple_buffer%27#0 offset_as_uint16%7#0)
                let data_length%7#0: uint64 = (len four#0)
                let current_tail_offset%13#0: uint64 = (+ current_tail_offset%12#0 data_length%7#0)
                let as_bytes%8#0: bytes = (itob current_tail_offset%13#0)
                let offset_as_uint16%8#0: bytes = ((extract 6 2) as_bytes%8#0)
                let encoded_tuple_buffer%29#0: bytes = (concat encoded_tuple_buffer%28#0 offset_as_uint16%8#0)
                let encoded_tuple_buffer%30#0: bytes = (concat encoded_tuple_buffer%29#0 two#0)
                let encoded_tuple_buffer%31#0: bytes = (concat encoded_tuple_buffer%30#0 four#0)
                let struct1#0: bytes = (concat encoded_tuple_buffer%31#0 five#0)
                let tmp%15#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string2()
                let tmp%16#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string1()
                let data_length%9#0: uint64 = (len tmp%15#0)
                let current_tail_offset%16#0: uint64 = (+ 4u data_length%9#0)
                let as_bytes%10#0: bytes = (itob current_tail_offset%16#0)
                let offset_as_uint16%10#0: bytes = ((extract 6 2) as_bytes%10#0)
                let encoded_tuple_buffer%35#0: bytes = (concat 0x0004 offset_as_uint16%10#0)
                let encoded_tuple_buffer%36#0: bytes = (concat encoded_tuple_buffer%35#0 tmp%15#0)
                let encoded_tuple_buffer%37#0: bytes = (concat encoded_tuple_buffer%36#0 tmp%16#0)
                let data_length%11#0: uint64 = (len encoded_tuple_buffer%37#0)
                let current_tail_offset%19#0: uint64 = (+ 26u data_length%11#0)
                let as_bytes%12#0: bytes = (itob current_tail_offset%19#0)
                let offset_as_uint16%12#0: bytes = ((extract 6 2) as_bytes%12#0)
                let encoded_tuple_buffer%42#0: bytes = (concat encoded_tuple_buffer%27#0 offset_as_uint16%12#0)
                let current_tail_offset%20#0: uint64 = (+ current_tail_offset%19#0 data_length%7#0)
                let as_bytes%13#0: bytes = (itob current_tail_offset%20#0)
                let offset_as_uint16%13#0: bytes = ((extract 6 2) as_bytes%13#0)
                let encoded_tuple_buffer%43#0: bytes = (concat encoded_tuple_buffer%42#0 offset_as_uint16%13#0)
                let encoded_tuple_buffer%44#0: bytes = (concat encoded_tuple_buffer%43#0 encoded_tuple_buffer%37#0)
                let encoded_tuple_buffer%45#0: bytes = (concat encoded_tuple_buffer%44#0 four#0)
                let struct2#0: bytes = (concat encoded_tuple_buffer%45#0 five#0)
                let item_offset%0#0: uint64 = (extract_uint16 struct2#0 10u)
                let data_up_to_item%0#0: bytes = (extract3 struct2#0 0u item_offset%0#0)
                let next_item_offset%0#0: uint64 = (extract_uint16 struct2#0 22u)
                let total_data_length%0#0: uint64 = (len struct2#0)
                let data_beyond_item%0#0: bytes = (substring3 struct2#0 next_item_offset%0#0 total_data_length%0#0)
                let updated_data%0#0: bytes = (concat data_up_to_item%0#0 two#0)
                let updated_data%1#0: bytes = (concat updated_data%0#0 data_beyond_item%0#0)
                let item_length%0#0: uint64 = (- next_item_offset%0#0 item_offset%0#0)
                let tail_offset%0#0: uint64 = (extract_uint16 updated_data%1#0 22u)
                let tail_offset%1#0: uint64 = (+ tail_offset%0#0 data_length%6#0)
                let tail_offset%2#0: uint64 = (- tail_offset%1#0 item_length%0#0)
                let as_bytes%14#0: bytes = (itob tail_offset%2#0)
                let tail_offset_bytes%0#0: bytes = ((extract 6 2) as_bytes%14#0)
                let updated_data%2#0: bytes = ((replace2 22) updated_data%1#0 tail_offset_bytes%0#0)
                let tail_offset%3#0: uint64 = (extract_uint16 updated_data%2#0 24u)
                let tail_offset%4#0: uint64 = (+ tail_offset%3#0 data_length%6#0)
                let tail_offset%5#0: uint64 = (- tail_offset%4#0 item_length%0#0)
                let as_bytes%15#0: bytes = (itob tail_offset%5#0)
                let tail_offset_bytes%1#0: bytes = ((extract 6 2) as_bytes%15#0)
                let struct2#1: bytes = ((replace2 24) updated_data%2#0 tail_offset_bytes%1#0)
                let tmp%17#0: bool = (== struct1#0 struct2#1)
                (assert tmp%17#0) // struct1 does not match struct2
                return 
        
        subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification() -> void:
            block@0: // L134
                let tmp%0#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let tmp%1#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_byte1()
                let tmp%2#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_byte2()
                let result%1#0: bytes = (concat tmp%1#0 tmp%2#0)
                let one#0: bytes = (concat tmp%0#0 result%1#0)
                let tmp%3#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string1()
                let tmp%4#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string2()
                let data_length%0#0: uint64 = (len tmp%3#0)
                let current_tail_offset%2#0: uint64 = (+ 4u data_length%0#0)
                let as_bytes%1#0: bytes = (itob current_tail_offset%2#0)
                let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_tuple_buffer%5#0: bytes = (concat 0x0004 offset_as_uint16%1#0)
                let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 tmp%3#0)
                let two#0: bytes = (concat encoded_tuple_buffer%6#0 tmp%4#0)
                let tmp%5#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint2()
                let tmp%6#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_byte2()
                let tmp%7#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_byte1()
                let result%3#0: bytes = (concat tmp%6#0 tmp%7#0)
                let three#0: bytes = (concat tmp%5#0 result%3#0)
                let tmp%8#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let tmp%9#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string1()
                let tmp%10#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint2()
                let tmp%11#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
                let tmp%12#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let encoded_tuple_buffer%13#0: bytes = (concat tmp%8#0 0x001c)
                let data_length%2#0: uint64 = (len tmp%9#0)
                let current_tail_offset%6#0: uint64 = (+ 28u data_length%2#0)
                let encoded_tuple_buffer%14#0: bytes = (concat encoded_tuple_buffer%13#0 tmp%10#0)
                let as_bytes%3#0: bytes = (itob current_tail_offset%6#0)
                let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_tuple_buffer%15#0: bytes = (concat encoded_tuple_buffer%14#0 offset_as_uint16%3#0)
                let encoded_tuple_buffer%16#0: bytes = (concat encoded_tuple_buffer%15#0 tmp%12#0)
                let encoded_tuple_buffer%17#0: bytes = (concat encoded_tuple_buffer%16#0 tmp%9#0)
                let four1#0: bytes = (concat encoded_tuple_buffer%17#0 tmp%11#0)
                let tmp%13#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let tmp%14#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string1()
                let tmp%15#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint2()
                let tmp%16#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
                let expr_value_trimmed%0#0: bytes = ((extract 2 0) tmp%16#0)
                let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 0x007b)
                let byte_len%0#0: uint64 = (len concatenated%0#0)
                let len_%0#0: uint64 = (/ byte_len%0#0 2u)
                let as_bytes%4#0: bytes = (itob len_%0#0)
                let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%4#0)
                let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
                let tmp%17#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_uint1()
                let encoded_tuple_buffer%21#0: bytes = (concat tmp%13#0 0x001c)
                let data_length%4#0: uint64 = (len tmp%14#0)
                let current_tail_offset%9#0: uint64 = (+ 28u data_length%4#0)
                let encoded_tuple_buffer%22#0: bytes = (concat encoded_tuple_buffer%21#0 tmp%15#0)
                let as_bytes%6#0: bytes = (itob current_tail_offset%9#0)
                let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%6#0)
                let encoded_tuple_buffer%23#0: bytes = (concat encoded_tuple_buffer%22#0 offset_as_uint16%5#0)
                let encoded_tuple_buffer%24#0: bytes = (concat encoded_tuple_buffer%23#0 tmp%17#0)
                let encoded_tuple_buffer%25#0: bytes = (concat encoded_tuple_buffer%24#0 tmp%14#0)
                let four2#0: bytes = (concat encoded_tuple_buffer%25#0 concat_result%0#0)
                let tmp%18#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string1()
                let tmp%19#0: bytes = test_cases.arc4_dynamic_arrays.contract.get_string2()
                let data_length%6#0: uint64 = (len tmp%18#0)
                let current_tail_offset%12#0: uint64 = (+ 4u data_length%6#0)
                let as_bytes%8#0: bytes = (itob current_tail_offset%12#0)
                let offset_as_uint16%7#0: bytes = ((extract 6 2) as_bytes%8#0)
                let encoded_tuple_buffer%29#0: bytes = (concat 0x0004 offset_as_uint16%7#0)
                let encoded_tuple_buffer%30#0: bytes = (concat encoded_tuple_buffer%29#0 tmp%18#0)
                let five#0: bytes = (concat encoded_tuple_buffer%30#0 tmp%19#0)
                let encoded_tuple_buffer%34#0: bytes = (concat one#0 0x001a)
                let data_length%8#0: uint64 = (len two#0)
                let current_tail_offset%15#0: uint64 = (+ 26u data_length%8#0)
                let encoded_tuple_buffer%35#0: bytes = (concat encoded_tuple_buffer%34#0 three#0)
                let as_bytes%10#0: bytes = (itob current_tail_offset%15#0)
                let offset_as_uint16%9#0: bytes = ((extract 6 2) as_bytes%10#0)
                let encoded_tuple_buffer%36#0: bytes = (concat encoded_tuple_buffer%35#0 offset_as_uint16%9#0)
                let data_length%9#0: uint64 = (len four1#0)
                let current_tail_offset%16#0: uint64 = (+ current_tail_offset%15#0 data_length%9#0)
                let as_bytes%11#0: bytes = (itob current_tail_offset%16#0)
                let offset_as_uint16%10#0: bytes = ((extract 6 2) as_bytes%11#0)
                let encoded_tuple_buffer%37#0: bytes = (concat encoded_tuple_buffer%36#0 offset_as_uint16%10#0)
                let encoded_tuple_buffer%38#0: bytes = (concat encoded_tuple_buffer%37#0 two#0)
                let encoded_tuple_buffer%39#0: bytes = (concat encoded_tuple_buffer%38#0 four1#0)
                let tup1#0: bytes = (concat encoded_tuple_buffer%39#0 five#0)
                let data_length%12#0: uint64 = (len four2#0)
                let current_tail_offset%20#0: uint64 = (+ current_tail_offset%15#0 data_length%12#0)
                let as_bytes%14#0: bytes = (itob current_tail_offset%20#0)
                let offset_as_uint16%13#0: bytes = ((extract 6 2) as_bytes%14#0)
                let encoded_tuple_buffer%46#0: bytes = (concat encoded_tuple_buffer%36#0 offset_as_uint16%13#0)
                let encoded_tuple_buffer%47#0: bytes = (concat encoded_tuple_buffer%46#0 two#0)
                let encoded_tuple_buffer%48#0: bytes = (concat encoded_tuple_buffer%47#0 four2#0)
                let tup2#0: bytes = (concat encoded_tuple_buffer%48#0 five#0)
                let item_start_offset%0#0: uint64 = (extract_uint16 tup2#0 22u)
                let item_end_offset%0#0: uint64 = (extract_uint16 tup2#0 24u)
                let tmp%20#0: bytes = (substring3 tup2#0 item_start_offset%0#0 item_end_offset%0#0)
                let item_start_offset%1#0: uint64 = (extract_uint16 tmp%20#0 18u)
                let item_end_offset%1#0: uint64 = (len tmp%20#0)
                let tmp%21#0: bytes = (substring3 tmp%20#0 item_start_offset%1#0 item_end_offset%1#0)
                let (popped%0#0: bytes, data%1#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(tmp%21#0, 2u)
                let data_up_to_item%0#0: bytes = (extract3 tmp%20#0 0u item_start_offset%1#0)
                let updated_data%0#0: bytes = (concat data_up_to_item%0#0 data%1#0)
                let data_up_to_item%1#0: bytes = (extract3 tup2#0 0u item_start_offset%0#0)
                let total_data_length%0#0: uint64 = (len tup2#0)
                let data_beyond_item%0#0: bytes = (substring3 tup2#0 item_end_offset%0#0 total_data_length%0#0)
                let updated_data%1#0: bytes = (concat data_up_to_item%1#0 updated_data%0#0)
                let updated_data%2#0: bytes = (concat updated_data%1#0 data_beyond_item%0#0)
                let item_length%0#0: uint64 = (- item_end_offset%0#0 item_start_offset%0#0)
                let new_value_length%0#0: uint64 = (len updated_data%0#0)
                let tail_offset%0#0: uint64 = (extract_uint16 updated_data%2#0 24u)
                let tail_offset%1#0: uint64 = (+ tail_offset%0#0 new_value_length%0#0)
                let tail_offset%2#0: uint64 = (- tail_offset%1#0 item_length%0#0)
                let as_bytes%15#0: bytes = (itob tail_offset%2#0)
                let tail_offset_bytes%0#0: bytes = ((extract 6 2) as_bytes%15#0)
                let tup2#1: bytes = ((replace2 24) updated_data%2#0 tail_offset_bytes%0#0)
                let tmp%23#0: bool = (== tup1#0 tup2#1)
                (assert tmp%23#0) // tup1 does not match tup2
                return 
        
        subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
            block@0: // L44
                let array_length#0: uint64 = (extract_uint16 array#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let tmp%0#0: bytes = (itob length_minus_1#0)
                let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
                let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
                let tmp%2#0: uint64 = (len result#0)
                let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
                let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
                let result#1: bytes = (substring3 result#0 0u item_location#0)
                return popped#0 result#1
        
        subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> <bytes, bytes>:
            block@0: // L92
                let array_length#0: uint64 = (extract_uint16 array#0 0u)
                let length_minus_1#0: uint64 = (- array_length#0 1u)
                let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
                let head_and_tail#0: bytes = ((extract 2 0) array#0)
                let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
                let tmp%0#0: uint64 = (len head_and_tail#0)
                let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%0#0)
                let new_head#0: bytes = 0x
                let head_offset#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L110
                let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
                let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
                let continue_looping%0#0: bool = (< head_offset#1 popped_header_offset#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L111
                let item_offset#0: uint64 = (extract_uint16 head_and_tail#0 head_offset#1)
                let item_offset#1: uint64 = (- item_offset#0 2u)
                let tmp%2#0: bytes = (itob item_offset#1)
                let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
                let new_head#2: bytes = (concat new_head#1 tmp%3#0)
                let head_offset#2: uint64 = (+ head_offset#1 2u)
                goto block@1
            block@4: // after_for_L110
                let tmp%4#0: bytes = (itob length_minus_1#0)
                let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
                let tmp%6#0: bytes = (concat tmp%5#0 new_head#1)
                let tmp%7#0: uint64 = (+ popped_header_offset#0 2u)
                let tmp%8#0: bytes = (substring3 head_and_tail#0 tmp%7#0 popped_offset#0)
                let updated#0: bytes = (concat tmp%6#0 tmp%8#0)
                return popped#0 updated#0
        
        subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
            block@0: // L189
                let new_head#0: bytes = 0x
                let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
                let tmp%0#0: uint64 = (* array_items_count#0 2u)
                let head_offset#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L199
                let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
                let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
                let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L200
                let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#1)
                let tmp%1#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
                let tmp%2#0: bytes = (itob tmp%1#0)
                let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
                let new_head#2: bytes = (concat new_head#1 tmp%3#0)
                let head_offset#2: uint64 = (+ head_offset#1 2u)
                goto block@1
            block@4: // after_for_L199
                let item_offset_adjustment#2: uint64 = (len array_head_and_tail#0)
                let head_offset#3: uint64 = 0u
                goto block@5
            block@5: // for_header_L204
                let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@6)
                let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@6)
                let continue_looping%1#0: bool = (< head_offset#4 item_offset_adjustment#0)
                goto continue_looping%1#0 ? block@6 : block@8
            block@6: // for_body_L205
                let item_offset#1: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#4)
                let tmp%5#0: uint64 = (+ item_offset_adjustment#2 item_offset#1)
                let tmp%6#0: bytes = (itob tmp%5#0)
                let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
                let new_head#4: bytes = (concat new_head#3 tmp%7#0)
                let head_offset#5: uint64 = (+ head_offset#4 2u)
                goto block@5
            block@8: // after_for_L204
                let tmp%8#0: uint64 = (+ array_items_count#0 new_items_count#0)
                let tmp%9#0: bytes = (itob tmp%8#0)
                let tmp%10#0: bytes = ((extract 6 2) tmp%9#0)
                let tmp%11#0: bytes = (concat tmp%10#0 new_head#3)
                let tmp%14#0: bytes = (substring3 array_head_and_tail#0 tmp%0#0 item_offset_adjustment#2)
                let tmp%15#0: bytes = (concat tmp%11#0 tmp%14#0)
                let tmp%17#0: uint64 = (len new_head_and_tail#0)
                let tmp%18#0: bytes = (substring3 new_head_and_tail#0 item_offset_adjustment#0 tmp%17#0)
                let tmp%19#0: bytes = (concat tmp%15#0 tmp%18#0)
                return tmp%19#0
        
        subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
            block@0: // L240
                let size_b#0: bytes = ((substring 0 2) source#0)
                let array_length#0: uint64 = (btoi size_b#0)
                let tmp%0#0: bytes = ((extract 2 0) source#0)
                let tmp%1#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%0#0, new_item#0, index#0, array_length#0)
                let tmp%2#0: bytes = (concat size_b#0 tmp%1#0)
                return tmp%2#0
        
        subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
            block@0: // L252
                let tmp%0#0: uint64 = (* index#0 2u)
                let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
                let tmp%1#0: uint64 = (+ index#0 1u)
                let head_offset#0: uint64 = (* tmp%1#0 2u)
                let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
                let end_of_tail#0: uint64 = (len array_head_and_tail#0)
                let tmp%3#0: uint64 = (- array_length#0 index#0)
                let is_before_end#0: uint64 = (- tmp%3#0 1u)
                let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
                let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
                let new_item_length#0: uint64 = (len new_item#0)
                let tmp%4#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
                let tmp%5#0: bytes = (concat tmp%4#0 new_item#0)
                let tmp%6#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
                let new_head_and_tail#0: bytes = (concat tmp%5#0 tmp%6#0)
                let tmp%7#0: uint64 = (* array_length#0 2u)
                goto block@1
            block@1: // for_header_L269
                let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
                let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
                let continue_looping%0#0: bool = (< head_offset#1 tmp%7#0)
                goto continue_looping%0#0 ? block@2 : block@4
            block@2: // for_body_L270
                let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
                let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
                let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
                let tmp%10#0: bytes = (itob tail_offset#2)
                let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%10#0)
                let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
                let head_offset#2: uint64 = (+ head_offset#1 2u)
                goto block@1
            block@4: // after_for_L269
                return new_head_and_tail#1
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L-1
                return 1u