{
    "hints": {
        "test_static_elements()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_dynamic_elements()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_mixed_single_dynamic_elements()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_mixed_multiple_dynamic_elements()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_nested_struct_replacement()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_nested_tuple_modification()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLmFyYzRfZHluYW1pY19hcnJheXMuY29udHJhY3QuRHluYW1pY0FycmF5Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIGFyYzRfZHluYW1pY19hcnJheXMvY29udHJhY3QucHk6MzgKICAgIC8vIGNsYXNzIER5bmFtaWNBcnJheUNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DynamicArrayContract",
        "methods": [
            {
                "name": "test_static_elements",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_dynamic_elements",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_mixed_single_dynamic_elements",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_mixed_multiple_dynamic_elements",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_nested_struct_replacement",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_nested_tuple_modification",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}