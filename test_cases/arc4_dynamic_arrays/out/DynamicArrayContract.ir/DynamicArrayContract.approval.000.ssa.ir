main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let tmp%4#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (len result#0)
        let tmp%6#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let item_location#0: uint64 = tmp%6#0
        let tmp%7#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let popped#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (substring3 result#0 0u item_location#0)
        let result#1: bytes = tmp%8#0
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> <bytes, bytes>:
    block@0: // L92
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (* length_minus_1#0 2u)
        let popped_header_offset#0: uint64 = tmp%2#0
        let tmp%3#0: bytes = ((extract 2 0) array#0)
        let head_and_tail#0: bytes = tmp%3#0
        let tmp%4#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let popped_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len head_and_tail#0)
        let tmp%6#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%5#0)
        let popped#0: bytes = tmp%6#0
        let new_head#0: bytes = 0x
        let tmp%7#0: uint64 = (* length_minus_1#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L110
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%7#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L111
        let tmp%8#0: uint64 = (extract_uint16 head_and_tail#0 head_offset#1)
        let item_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- item_offset#0 2u)
        let item_offset#1: uint64 = tmp%9#0
        let tmp%10#0: bytes = (itob item_offset#1)
        let tmp%11#0: bytes = ((extract 6 2) tmp%10#0)
        let tmp%12#0: bytes = (concat new_head#1 tmp%11#0)
        let new_head#2: bytes = tmp%12#0
        goto block@3
    block@3: // for_footer_L110
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L110
        let tmp%13#0: bytes = (itob length_minus_1#0)
        let tmp%14#0: bytes = ((extract 6 2) tmp%13#0)
        let tmp%15#0: bytes = (concat tmp%14#0 new_head#1)
        let tmp%16#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%17#0: bytes = (substring3 head_and_tail#0 tmp%16#0 popped_offset#0)
        let tmp%18#0: bytes = (concat tmp%15#0 tmp%17#0)
        let updated#0: bytes = tmp%18#0
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let tmp%0#0: uint64 = (* new_items_count#0 2u)
        let item_offset_adjustment#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (* array_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#1)
        let item_offset#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%4#0: bytes = (itob tmp%3#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (concat new_head#1 tmp%5#0)
        let new_head#2: bytes = tmp%6#0
        goto block@3
    block@3: // for_footer_L203
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L203
        let tmp%7#0: uint64 = (len array_head_and_tail#0)
        let item_offset_adjustment#2: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (* new_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7)
        let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7)
        let continue_looping%1#0: bool = (< head_offset#4 tmp%8#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let tmp%9#0: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#4)
        let item_offset#1: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (+ item_offset_adjustment#2 item_offset#1)
        let tmp%11#0: bytes = (itob tmp%10#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let tmp%13#0: bytes = (concat new_head#3 tmp%12#0)
        let new_head#4: bytes = tmp%13#0
        goto block@7
    block@7: // for_footer_L208
        let head_offset#5: uint64 = (+ head_offset#4 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%14#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%15#0: bytes = (itob tmp%14#0)
        let tmp%16#0: bytes = ((extract 6 2) tmp%15#0)
        let tmp%17#0: bytes = (concat tmp%16#0 new_head#3)
        let tmp%18#0: uint64 = (* array_items_count#0 2u)
        let tmp%19#0: uint64 = (len array_head_and_tail#0)
        let tmp%20#0: bytes = (substring3 array_head_and_tail#0 tmp%18#0 tmp%19#0)
        let tmp%21#0: bytes = (concat tmp%17#0 tmp%20#0)
        let tmp%22#0: uint64 = (* new_items_count#0 2u)
        let tmp%23#0: uint64 = (len new_head_and_tail#0)
        let tmp%24#0: bytes = (substring3 new_head_and_tail#0 tmp%22#0 tmp%23#0)
        let tmp%25#0: bytes = (concat tmp%21#0 tmp%24#0)
        return tmp%25#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L273
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine test_cases.arc4_dynamic_arrays.contract.get_string1() -> Encoded(len+utf8[]):
    block@0: // L180
        let tmp%0#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("a")
        return tmp%0#0

subroutine test_cases.arc4_dynamic_arrays.contract.get_string2() -> Encoded(len+utf8[]):
    block@0: // L185
        let tmp%0#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("bee")
        return tmp%0#0

subroutine test_cases.arc4_dynamic_arrays.contract.get_string3() -> Encoded(len+utf8[]):
    block@0: // L190
        let tmp%0#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Hello World")
        return tmp%0#0

subroutine test_cases.arc4_dynamic_arrays.contract.get_uint1() -> Encoded(uint64):
    block@0: // L195
        return 0x0000000000000003

subroutine test_cases.arc4_dynamic_arrays.contract.get_uint2() -> Encoded(uint64):
    block@0: // L200
        return 0x0000040000000000

subroutine test_cases.arc4_dynamic_arrays.contract.get_byte1() -> Encoded(uint8):
    block@0: // L205
        return 0x04

subroutine test_cases.arc4_dynamic_arrays.contract.get_byte2() -> Encoded(uint8):
    block@0: // L210
        return 0x05

subroutine test_cases.arc4_dynamic_arrays.contract.get_byte3() -> Encoded(uint8):
    block@0: // L215
        return 0x2a

subroutine test_cases.arc4_dynamic_arrays.contract.get_byte4() -> Encoded(uint8):
    block@0: // L220
        return 0xff

subroutine test_cases.arc4_dynamic_arrays.contract.get_u16_arr1() -> Encoded(len+uint16[]):
    block@0: // L225
        let encoded_array%0#0: Encoded(len+uint16[]) = bytes_encode<(len+uint16[])>(0xffff, 0x0000, 0x002a)
        return encoded_array%0#0

subroutine test_cases.arc4_dynamic_arrays.contract.get_u16_arr2() -> Encoded(len+uint16[]):
    block@0: // L230
        let encoded_array%0#0: Encoded(len+uint16[]) = bytes_encode<(len+uint16[])>(0x0001, 0x0002, 0x0003, 0x0004)
        return encoded_array%0#0

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__() -> bool:
    block@0: // L38
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@10
    block@1: // abi_routing_L38
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_static_elements()void" => block@2, method "test_dynamic_elements()void" => block@3, method "test_mixed_single_dynamic_elements()void" => block@4, method "test_mixed_multiple_dynamic_elements()void" => block@5, method "test_nested_struct_replacement()void" => block@6, method "test_nested_tuple_modification()void" => block@7, * => block@8}
    block@2: // test_static_elements_route_L39
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements()
        return 1u
    block@3: // test_dynamic_elements_route_L55
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements()
        return 1u
    block@4: // test_mixed_single_dynamic_elements_route_L74
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements()
        return 1u
    block@5: // test_mixed_multiple_dynamic_elements_route_L97
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements()
        return 1u
    block@6: // test_nested_struct_replacement_route_L114
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement()
        return 1u
    block@7: // test_nested_tuple_modification_route_L141
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification()
        return 1u
    block@8: // switch_case_default_L38
        goto block@9
    block@9: // switch_case_next_L38
        goto block@14
    block@10: // bare_routing_L38
        let tmp%27#0: uint64 = (txn OnCompletion)
        switch tmp%27#0 {0u => block@11, * => block@12}
    block@11: // __algopy_default_create_L1
        let tmp%28#0: uint64 = (txn ApplicationID)
        let tmp%29#0: bool = (== tmp%28#0 0u)
        (assert tmp%29#0) // can only call when creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__algopy_default_create()
        return 1u
    block@12: // switch_case_default_L38
        goto block@13
    block@13: // switch_case_next_L38
        goto block@14
    block@14: // after_if_else_L38
        return 0u

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements() -> void:
    block@0: // L39
        let tmp%0#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte1()
        let tmp%1#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte2()
        let encoded_array%0#0: Encoded(uint8[2]) = bytes_encode<uint8[2]>(tmp%0#0, tmp%1#0)
        let byte_array1#0: Encoded(uint8[2]) = encoded_array%0#0
        let tmp%2#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte3()
        let tmp%3#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte4()
        let encoded_array%1#0: Encoded(uint8[2]) = bytes_encode<uint8[2]>(tmp%2#0, tmp%3#0)
        let byte_array2#0: Encoded(uint8[2]) = encoded_array%1#0
        let tmp%4#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%5#0: Encoded(uint64,uint8[2]) = bytes_encode<(uint64,uint8[2])>(tmp%4#0, byte_array1#0)
        let struct1#0: Encoded(uint64,uint8[2]) = tmp%5#0
        let tmp%6#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%7#0: Encoded(uint64,uint8[2]) = bytes_encode<(uint64,uint8[2])>(tmp%6#0, byte_array2#0)
        let struct2#0: Encoded(uint64,uint8[2]) = tmp%7#0
        let encoded_array%2#0: Encoded(len+(uint64,uint8[2])[]) = bytes_encode<(len+(uint64,uint8[2])[])>(struct1#0, struct1#0)
        let array#0: Encoded(len+(uint64,uint8[2])[]) = encoded_array%2#0
        let encoded_value%0#0: Encoded(uint64,uint8[2]) = bytes_encode<(uint64,uint8[2])>(struct2#0)
        let updated_array%0#0: Encoded(len+(uint64,uint8[2])[]) = replace_value(array#0, 1u, encoded_value%0#0)
        let array#1: Encoded(len+(uint64,uint8[2])[]) = updated_array%0#0
        (log array#1)
        let array_item%0#0: Encoded(uint64,uint8[2]) = extract_value(array#1, 0u)
        let values%0#0: Encoded(uint64,uint8[2]) = decode_bytes<Encoded(uint64,uint8[2])>(array_item%0#0)
        (log values%0#0)
        let array_item%1#0: Encoded(uint64,uint8[2]) = extract_value(array#1, 1u)
        let values%1#0: Encoded(uint64,uint8[2]) = decode_bytes<Encoded(uint64,uint8[2])>(array_item%1#0)
        (log values%1#0)
        let (tmp%8#0: bytes, tmp%9#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(array#1, 10u)
        let tmp%10#0: Encoded(uint64,uint8[2]) = decode_bytes<Encoded(uint64,uint8[2])>(tmp%8#0)
        let array#2: Encoded(len+(uint64,uint8[2])[]) = tmp%9#0
        let tmp%11#0: bool = (== tmp%10#0 struct2#0)
        (assert tmp%11#0)
        let (tmp%12#0: bytes, tmp%13#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(array#2, 10u)
        let tmp%14#0: Encoded(uint64,uint8[2]) = decode_bytes<Encoded(uint64,uint8[2])>(tmp%12#0)
        let array#3: Encoded(len+(uint64,uint8[2])[]) = tmp%13#0
        let tmp%15#0: bool = (== tmp%14#0 struct1#0)
        (assert tmp%15#0)
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements() -> void:
    block@0: // L55
        let tmp%0#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%1#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tmp%2#0: Encoded((len+utf8[]),(len+utf8[])) = bytes_encode<((len+utf8[]),(len+utf8[]))>(tmp%0#0, tmp%1#0)
        let struct1#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%2#0
        let tmp%3#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string3()
        let tmp%4#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%5#0: Encoded((len+utf8[]),(len+utf8[])) = bytes_encode<((len+utf8[]),(len+utf8[]))>(tmp%3#0, tmp%4#0)
        let struct2#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%5#0
        let encoded_array%0#0: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = bytes_encode<(len+((len+utf8[]),(len+utf8[]))[])>(struct1#0, struct1#0)
        let array#0: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = encoded_array%0#0
        let extract_uint16%0#0: uint64 = (extract_uint16 array#0 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) array#0)
        let tmp%6#0: Encoded(((len+utf8[]),(len+utf8[]))[]) = bytes_encode<((len+utf8[]),(len+utf8[]))[]>(struct1#0)
        let as_Encoded(len+((len+utf8[]),(len+utf8[]))[])%0#0: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, tmp%6#0)
        let array#1: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = as_Encoded(len+((len+utf8[]),(len+utf8[]))[])%0#0
        let encoded_value%0#0: Encoded((len+utf8[]),(len+utf8[])) = bytes_encode<((len+utf8[]),(len+utf8[]))>(struct2#0)
        let updated_array%0#0: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = replace_value(array#1, 1u, encoded_value%0#0)
        let array#2: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = updated_array%0#0
        (log array#2)
        let array_item%0#0: Encoded((len+utf8[]),(len+utf8[])) = extract_value(array#2, 0u)
        let values%0#0: Encoded((len+utf8[]),(len+utf8[])) = decode_bytes<Encoded((len+utf8[]),(len+utf8[]))>(array_item%0#0)
        (log values%0#0)
        let array_item%1#0: Encoded((len+utf8[]),(len+utf8[])) = extract_value(array#2, 1u)
        let values%1#0: Encoded((len+utf8[]),(len+utf8[])) = decode_bytes<Encoded((len+utf8[]),(len+utf8[]))>(array_item%1#0)
        (log values%1#0)
        let array_item%2#0: Encoded((len+utf8[]),(len+utf8[])) = extract_value(array#2, 2u)
        let values%2#0: Encoded((len+utf8[]),(len+utf8[])) = decode_bytes<Encoded((len+utf8[]),(len+utf8[]))>(array_item%2#0)
        (log values%2#0)
        let (tmp%7#0: bytes, tmp%8#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#2)
        let tmp%9#0: Encoded((len+utf8[]),(len+utf8[])) = decode_bytes<Encoded((len+utf8[]),(len+utf8[]))>(tmp%7#0)
        let array#3: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = tmp%8#0
        let tmp%10#0: bool = (== tmp%9#0 struct1#0)
        (assert tmp%10#0)
        (log array#3)
        let (tmp%11#0: bytes, tmp%12#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#3)
        let tmp%13#0: Encoded((len+utf8[]),(len+utf8[])) = decode_bytes<Encoded((len+utf8[]),(len+utf8[]))>(tmp%11#0)
        let array#4: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = tmp%12#0
        let tmp%14#0: bool = (== tmp%13#0 struct2#0)
        (assert tmp%14#0)
        (log array#4)
        let (tmp%15#0: bytes, tmp%16#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#4)
        let tmp%17#0: Encoded((len+utf8[]),(len+utf8[])) = decode_bytes<Encoded((len+utf8[]),(len+utf8[]))>(tmp%15#0)
        let array#5: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = tmp%16#0
        let tmp%18#0: bool = (== tmp%17#0 struct1#0)
        (assert tmp%18#0)
        (log array#5)
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements() -> void:
    block@0: // L74
        let tmp%0#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%1#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%2#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%3#0: Encoded(uint64,(len+utf8[]),uint64) = bytes_encode<(uint64,(len+utf8[]),uint64)>(tmp%0#0, tmp%1#0, tmp%2#0)
        let struct1#0: Encoded(uint64,(len+utf8[]),uint64) = tmp%3#0
        let tmp%4#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%5#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tmp%6#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%7#0: Encoded(uint64,(len+utf8[]),uint64) = bytes_encode<(uint64,(len+utf8[]),uint64)>(tmp%4#0, tmp%5#0, tmp%6#0)
        let struct2#0: Encoded(uint64,(len+utf8[]),uint64) = tmp%7#0
        let encoded_array%0#0: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = bytes_encode<(len+(uint64,(len+utf8[]),uint64)[])>()
        let array#0: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = encoded_array%0#0
        let extract_uint16%0#0: uint64 = (extract_uint16 array#0 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) array#0)
        let tmp%8#0: Encoded((uint64,(len+utf8[]),uint64)[]) = bytes_encode<(uint64,(len+utf8[]),uint64)[]>(struct2#0)
        let as_Encoded(len+(uint64,(len+utf8[]),uint64)[])%0#0: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, tmp%8#0)
        let array#1: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = as_Encoded(len+(uint64,(len+utf8[]),uint64)[])%0#0
        let extract_uint16%1#0: uint64 = (extract_uint16 array#1 0u)
        let extract_to_end%1#0: bytes = ((extract 2 0) array#1)
        let tmp%9#0: Encoded((uint64,(len+utf8[]),uint64)[]) = bytes_encode<(uint64,(len+utf8[]),uint64)[]>(struct2#0)
        let as_Encoded(len+(uint64,(len+utf8[]),uint64)[])%1#0: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%1#0, extract_to_end%1#0, 1u, tmp%9#0)
        let array#2: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = as_Encoded(len+(uint64,(len+utf8[]),uint64)[])%1#0
        let encoded_value%0#0: Encoded(uint64,(len+utf8[]),uint64) = bytes_encode<(uint64,(len+utf8[]),uint64)>(struct1#0)
        let updated_array%0#0: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = replace_value(array#2, 0u, encoded_value%0#0)
        let array#3: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = updated_array%0#0
        (log array#3)
        let array_item%0#0: Encoded(uint64,(len+utf8[]),uint64) = extract_value(array#3, 0u)
        let values%0#0: Encoded(uint64,(len+utf8[]),uint64) = decode_bytes<Encoded(uint64,(len+utf8[]),uint64)>(array_item%0#0)
        (log values%0#0)
        let array_item%1#0: Encoded(uint64,(len+utf8[]),uint64) = extract_value(array#3, 1u)
        let values%1#0: Encoded(uint64,(len+utf8[]),uint64) = decode_bytes<Encoded(uint64,(len+utf8[]),uint64)>(array_item%1#0)
        (log values%1#0)
        let array2#0: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = array#3
        let (tmp%10#0: bytes, tmp%11#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#3)
        let tmp%12#0: Encoded(uint64,(len+utf8[]),uint64) = decode_bytes<Encoded(uint64,(len+utf8[]),uint64)>(tmp%10#0)
        let array#4: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = tmp%11#0
        let tmp%13#0: bool = (== tmp%12#0 struct2#0)
        (assert tmp%13#0)
        let (tmp%14#0: bytes, tmp%15#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#4)
        let tmp%16#0: Encoded(uint64,(len+utf8[]),uint64) = decode_bytes<Encoded(uint64,(len+utf8[]),uint64)>(tmp%14#0)
        let array#5: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = tmp%15#0
        let tmp%17#0: bool = (== tmp%16#0 struct1#0)
        (assert tmp%17#0)
        let array_length%0#0: uint64 = (extract_uint16 array2#0 0u)
        let tmp%18#0: bool = (== array_length%0#0 2u)
        (assert tmp%18#0)
        let extract_uint16%2#0: uint64 = (extract_uint16 array2#0 0u)
        let extract_to_end%2#0: bytes = ((extract 2 0) array2#0)
        let array_length%1#0: uint64 = (extract_uint16 array2#0 0u)
        let extract_to_end%3#0: bytes = ((extract 2 0) array2#0)
        let as_Encoded(len+(uint64,(len+utf8[]),uint64)[])%2#0: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%2#0, extract_to_end%2#0, array_length%1#0, extract_to_end%3#0)
        let array2#1: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = as_Encoded(len+(uint64,(len+utf8[]),uint64)[])%2#0
        let array_length%2#0: uint64 = (extract_uint16 array2#1 0u)
        let tmp%19#0: bool = (== array_length%2#0 4u)
        (assert tmp%19#0)
        let array_length%3#0: uint64 = (extract_uint16 array2#1 0u)
        let tmp%20#0: uint64 = (- array_length%3#0 1u)
        let array_item%2#0: Encoded(uint64,(len+utf8[]),uint64) = extract_value(array2#1, tmp%20#0)
        let values%2#0: Encoded(uint64,(len+utf8[]),uint64) = decode_bytes<Encoded(uint64,(len+utf8[]),uint64)>(array_item%2#0)
        let tmp%21#0: bool = (== values%2#0 struct2#0)
        (assert tmp%21#0)
        let array_length%4#0: uint64 = (extract_uint16 array2#1 0u)
        let tmp%22#0: uint64 = (- array_length%4#0 2u)
        let array_item%3#0: Encoded(uint64,(len+utf8[]),uint64) = extract_value(array2#1, tmp%22#0)
        let values%3#0: Encoded(uint64,(len+utf8[]),uint64) = decode_bytes<Encoded(uint64,(len+utf8[]),uint64)>(array_item%3#0)
        let tmp%23#0: bool = (== values%3#0 struct1#0)
        (assert tmp%23#0)
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements() -> void:
    block@0: // L97
        let tmp%0#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%1#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%2#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%3#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
        let tmp%4#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%5#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = bytes_encode<(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)>(tmp%0#0, tmp%1#0, tmp%2#0, tmp%3#0, tmp%4#0)
        let struct1#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = tmp%5#0
        let tmp%6#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%7#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tmp%8#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%9#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr2()
        let tmp%10#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%11#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = bytes_encode<(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)>(tmp%6#0, tmp%7#0, tmp%8#0, tmp%9#0, tmp%10#0)
        let struct2#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = tmp%11#0
        let encoded_array%0#0: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[]) = bytes_encode<(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[])>(struct1#0, struct1#0)
        let array#0: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[]) = encoded_array%0#0
        let encoded_value%0#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = bytes_encode<(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)>(struct2#0)
        let updated_array%0#0: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[]) = replace_value(array#0, 1u, encoded_value%0#0)
        let array#1: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[]) = updated_array%0#0
        (log array#1)
        let array_item%0#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = extract_value(array#1, 0u)
        let values%0#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = decode_bytes<Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)>(array_item%0#0)
        (log values%0#0)
        let array_item%1#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = extract_value(array#1, 1u)
        let values%1#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = decode_bytes<Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)>(array_item%1#0)
        (log values%1#0)
        let (tmp%12#0: bytes, tmp%13#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#1)
        let tmp%14#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = decode_bytes<Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)>(tmp%12#0)
        let array#2: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[]) = tmp%13#0
        let tmp%15#0: bool = (== tmp%14#0 struct2#0)
        (assert tmp%15#0)
        let (tmp%16#0: bytes, tmp%17#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#2)
        let tmp%18#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = decode_bytes<Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)>(tmp%16#0)
        let array#3: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[]) = tmp%17#0
        let tmp%19#0: bool = (== tmp%18#0 struct1#0)
        (assert tmp%19#0)
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement() -> void:
    block@0: // L114
        let tmp%0#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%1#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte1()
        let tmp%2#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte2()
        let encoded_array%0#0: Encoded(uint8[2]) = bytes_encode<uint8[2]>(tmp%1#0, tmp%2#0)
        let tmp%3#0: Encoded(uint64,uint8[2]) = bytes_encode<(uint64,uint8[2])>(tmp%0#0, encoded_array%0#0)
        let one#0: Encoded(uint64,uint8[2]) = tmp%3#0
        let tmp%4#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%5#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tmp%6#0: Encoded((len+utf8[]),(len+utf8[])) = bytes_encode<((len+utf8[]),(len+utf8[]))>(tmp%4#0, tmp%5#0)
        let two#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%6#0
        let tmp%7#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%8#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte2()
        let tmp%9#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte1()
        let encoded_array%1#0: Encoded(uint8[2]) = bytes_encode<uint8[2]>(tmp%8#0, tmp%9#0)
        let tmp%10#0: Encoded(uint64,uint8[2]) = bytes_encode<(uint64,uint8[2])>(tmp%7#0, encoded_array%1#0)
        let three#0: Encoded(uint64,uint8[2]) = tmp%10#0
        let tmp%11#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%12#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%13#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%14#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
        let tmp%15#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%16#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = bytes_encode<(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)>(tmp%11#0, tmp%12#0, tmp%13#0, tmp%14#0, tmp%15#0)
        let four#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = tmp%16#0
        let tmp%17#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%18#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tmp%19#0: Encoded((len+utf8[]),(len+utf8[])) = bytes_encode<((len+utf8[]),(len+utf8[]))>(tmp%17#0, tmp%18#0)
        let five#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%19#0
        let tmp%20#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = bytes_encode<((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[])))>(one#0, two#0, three#0, four#0, five#0)
        let struct1#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = tmp%20#0
        let tmp%21#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tmp%22#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%23#0: Encoded((len+utf8[]),(len+utf8[])) = bytes_encode<((len+utf8[]),(len+utf8[]))>(tmp%21#0, tmp%22#0)
        let tmp%24#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = bytes_encode<((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[])))>(one#0, tmp%23#0, three#0, four#0, five#0)
        let struct2#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = tmp%24#0
        let encoded_value%0#0: Encoded((len+utf8[]),(len+utf8[])) = bytes_encode<((len+utf8[]),(len+utf8[]))>(two#0)
        let updated_tuple%0#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = replace_value(struct2#0, 1, encoded_value%0#0)
        let struct2#1: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = updated_tuple%0#0
        let tmp%25#0: bool = (== struct1#0 struct2#1)
        (assert tmp%25#0) // struct1 does not match struct2
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification() -> void:
    block@0: // L141
        let tmp%0#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%1#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte1()
        let tmp%2#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte2()
        let encoded_array%0#0: Encoded(uint8[2]) = bytes_encode<uint8[2]>(tmp%1#0, tmp%2#0)
        let tmp%3#0: Encoded(uint64,uint8[2]) = bytes_encode<(uint64,uint8[2])>(tmp%0#0, encoded_array%0#0)
        let one#0: Encoded(uint64,uint8[2]) = tmp%3#0
        let tmp%4#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%5#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tmp%6#0: Encoded((len+utf8[]),(len+utf8[])) = bytes_encode<((len+utf8[]),(len+utf8[]))>(tmp%4#0, tmp%5#0)
        let two#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%6#0
        let tmp%7#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%8#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte2()
        let tmp%9#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte1()
        let encoded_array%1#0: Encoded(uint8[2]) = bytes_encode<uint8[2]>(tmp%8#0, tmp%9#0)
        let tmp%10#0: Encoded(uint64,uint8[2]) = bytes_encode<(uint64,uint8[2])>(tmp%7#0, encoded_array%1#0)
        let three#0: Encoded(uint64,uint8[2]) = tmp%10#0
        let tmp%11#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%12#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%13#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%14#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
        let tmp%15#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%16#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = bytes_encode<(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)>(tmp%11#0, tmp%12#0, tmp%13#0, tmp%14#0, tmp%15#0)
        let four1#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = tmp%16#0
        let tmp%17#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%18#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%19#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%20#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
        let tmp%21#0: Encoded(uint16[]) = bytes_encode<uint16[]>(0x007b)
        let concat%0#0: Encoded(len+uint16[]) = (concat tmp%20#0 tmp%21#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%20#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint16[])%0#0: Encoded(len+uint16[]) = replace%0#0
        let tmp%22#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%23#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = bytes_encode<(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)>(tmp%17#0, tmp%18#0, tmp%19#0, as_Encoded(len+uint16[])%0#0, tmp%22#0)
        let four2#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = tmp%23#0
        let tmp%24#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%25#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tmp%26#0: Encoded((len+utf8[]),(len+utf8[])) = bytes_encode<((len+utf8[]),(len+utf8[]))>(tmp%24#0, tmp%25#0)
        let five#0: Encoded((len+utf8[]),(len+utf8[])) = tmp%26#0
        let tmp%27#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = bytes_encode<((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[])))>(one#0, two#0, three#0, four1#0, five#0)
        let tup1#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = tmp%27#0
        let tmp%28#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = bytes_encode<((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[])))>(one#0, two#0, three#0, four2#0, five#0)
        let tup2#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = tmp%28#0
        let tuple_item%0#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = extract_value(tup2#0, 3)
        let values%0#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = decode_bytes<Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)>(tuple_item%0#0)
        let tuple_item%1#0: Encoded(len+uint16[]) = extract_value(values%0#0, 3)
        let values%1#0: Encoded(len+uint16[]) = decode_bytes<Encoded(len+uint16[])>(tuple_item%1#0)
        let (tmp%29#0: bytes, tmp%30#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(values%1#0, 2u)
        let tmp%31#0: Encoded(uint16) = decode_bytes<Encoded(uint16)>(tmp%29#0)
        let encoded_value%0#0: Encoded(len+uint16[]) = bytes_encode<(len+uint16[])>(tmp%30#0)
        let updated_tuple%0#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = replace_value(tup2#0, 3, 3, encoded_value%0#0)
        let tup2#1: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = updated_tuple%0#0
        let tmp%32#0: bool = (== tup1#0 tup2#1)
        (assert tmp%32#0) // tup1 does not match tup2
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__algopy_default_create() -> void:
    block@0: // L1
        return 