main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L38
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_static_elements()void" => block@3, method "test_dynamic_elements()void" => block@4, method "test_mixed_single_dynamic_elements()void" => block@5, method "test_mixed_multiple_dynamic_elements()void" => block@6, method "test_nested_struct_replacement()void" => block@7, method "test_nested_tuple_modification()void" => block@8, * => block@15}
    block@3: // test_static_elements_route_L39
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements()
        let test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@16
    block@4: // test_dynamic_elements_route_L55
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements()
        let test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@16
    block@5: // test_mixed_single_dynamic_elements_route_L74
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements()
        let test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@16
    block@6: // test_mixed_multiple_dynamic_elements_route_L97
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements()
        let test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@16
    block@7: // test_nested_struct_replacement_route_L114
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement()
        let test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@16
    block@8: // test_nested_tuple_modification_route_L141
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification()
        let test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#5: bool = 1u
        goto block@16
    block@11: // bare_routing_L38
        let tmp%27#0: uint64 = (txn OnCompletion)
        goto tmp%27#0 ? block@15 : block@12
    block@12: // __algopy_default_create_L1
        let tmp%28#0: uint64 = (txn ApplicationID)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // can only call when creating
        let test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#6: bool = 1u
        goto block@16
    block@15: // after_if_else_L38
        let test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#7: bool = 0u
        goto block@16
    block@16: // after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#0 <- block@3, test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#1 <- block@4, test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#2 <- block@5, test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#3 <- block@6, test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#4 <- block@7, test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#5 <- block@8, test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#6 <- block@12, test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__%0#7 <- block@15)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let tmp%5#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> <bytes, bytes>:
    block@0: // L92
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%5#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%5#0)
        let new_head#0: bytes = 0x
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L110
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 popped_header_offset#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L111
        let item_offset#0: uint64 = (extract_uint16 head_and_tail#0 head_offset#1)
        let item_offset#1: uint64 = (- item_offset#0 2u)
        let tmp%10#0: bytes = (itob item_offset#1)
        let tmp%11#0: bytes = ((extract 6 2) tmp%10#0)
        let new_head#2: bytes = (concat new_head#1 tmp%11#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L110
        let tmp%13#0: bytes = (itob length_minus_1#0)
        let tmp%14#0: bytes = ((extract 6 2) tmp%13#0)
        let tmp%15#0: bytes = (concat tmp%14#0 new_head#1)
        let tmp%16#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%17#0: bytes = (substring3 head_and_tail#0 tmp%16#0 popped_offset#0)
        let updated#0: bytes = (concat tmp%15#0 tmp%17#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
        let tmp%1#0: uint64 = (* array_items_count#0 2u)
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#1)
        let tmp%3#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%4#0: bytes = (itob tmp%3#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let new_head#2: bytes = (concat new_head#1 tmp%5#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L203
        let item_offset_adjustment#2: uint64 = (len array_head_and_tail#0)
        let head_offset#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@6)
        let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@6)
        let continue_looping%1#0: bool = (< head_offset#4 item_offset_adjustment#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let item_offset#1: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#4)
        let tmp%10#0: uint64 = (+ item_offset_adjustment#2 item_offset#1)
        let tmp%11#0: bytes = (itob tmp%10#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let new_head#4: bytes = (concat new_head#3 tmp%12#0)
        let head_offset#5: uint64 = (+ head_offset#4 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%14#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%15#0: bytes = (itob tmp%14#0)
        let tmp%16#0: bytes = ((extract 6 2) tmp%15#0)
        let tmp%17#0: bytes = (concat tmp%16#0 new_head#3)
        let tmp%20#0: bytes = (substring3 array_head_and_tail#0 tmp%1#0 item_offset_adjustment#2)
        let tmp%21#0: bytes = (concat tmp%17#0 tmp%20#0)
        let tmp%23#0: uint64 = (len new_head_and_tail#0)
        let tmp%24#0: bytes = (substring3 new_head_and_tail#0 item_offset_adjustment#0 tmp%23#0)
        let tmp%25#0: bytes = (concat tmp%21#0 tmp%24#0)
        return tmp%25#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements() -> void:
    block@0: // L39
        (log 0x00020000000000000003040500000400000000002aff)
        (log 0x00000000000000030405)
        (log 0x00000400000000002aff)
        let (tmp%8#0: bytes, array#2: Encoded(len+(uint64,uint8[2])[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(0x00020000000000000003040500000400000000002aff, 10u)
        let tmp%10#0: bool = (== tmp%8#0 0x00000400000000002aff)
        (assert tmp%10#0)
        let (tmp%11#0: bytes, array#3: Encoded(len+(uint64,uint8[2])[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(array#2, 10u)
        let tmp%13#0: bool = (== tmp%11#0 0x00000000000000030405)
        (assert tmp%13#0)
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements() -> void:
    block@0: // L55
        let aggregate%data_length%0#0: uint64 = 3u
        let aggregate%current_tail_offset%0#0: uint64 = 7u
        let aggregate%as_bytes%1#0: bytes[8] = (itob 7u)
        let aggregate%offset_as_uint16%1#0: bytes = 0x0007
        let aggregate%head%1#0: bytes = 0x00040007
        let aggregate%concat%0#0: bytes = 0x00040007000161
        let struct1#0: Encoded((len+utf8[]),(len+utf8[])) = 0x000400070001610003626565
        let struct2#0: Encoded((len+utf8[]),(len+utf8[])) = 0x00040011000b48656c6c6f20576f726c64000161
        let aggregate%data_length%4#0: uint64 = 12u
        let aggregate%current_tail_offset%4#0: uint64 = 16u
        let aggregate%as_bytes%7#0: bytes[8] = (itob 16u)
        let aggregate%offset_as_uint16%5#0: bytes = 0x0010
        let aggregate%head%5#0: bytes = 0x000200040010
        let aggregate%concat%4#0: bytes = 0x000200040010000400070001610003626565
        let array#0: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = 0x000200040010000400070001610003626565000400070001610003626565
        let extract_uint16%0#0: uint64 = 2u
        let extract_to_end%0#0: bytes = 0x00040010000400070001610003626565000400070001610003626565
        let aggregate%concat%6#0: bytes = 0x0002000400070001610003626565
        let array#1: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(2u, 0x00040010000400070001610003626565000400070001610003626565, 1u, 0x0002000400070001610003626565)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 array#1 0u)
        let aggregate%lt%0#0: bool = (< 1u aggregate%array_length%1#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let array#2: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = _puya_lib.arc4.dynamic_array_replace_dynamic_element(array#1, 0x00040011000b48656c6c6f20576f726c64000161, 1u)
        (log array#2)
        let aggregate%array_head_and_tail%1#0: bytes = ((extract 2 0) array#2)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 array#2 0u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 0u)
        let aggregate%has_next%1#0: uint64 = (- aggregate%array_length%2#0 1u) // on error: index access is out of bounds
        let aggregate%end_of_array%1#0: uint64 = (len aggregate%array_head_and_tail%1#0)
        let aggregate%next_item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 2u)
        let aggregate%end_offset%1#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%1#0 aggregate%has_next%1#0)
        let aggregate%substring3%1#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%end_offset%1#0)
        (log aggregate%substring3%1#0)
        let aggregate%has_next%2#0: uint64 = (- aggregate%array_length%2#0 2u) // on error: index access is out of bounds
        let aggregate%next_item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 4u)
        let aggregate%end_offset%2#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%2#0 aggregate%has_next%2#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%next_item_offset%1#0 aggregate%end_offset%2#0)
        (log aggregate%substring3%2#0)
        let aggregate%has_next%3#0: uint64 = (- aggregate%array_length%2#0 3u) // on error: index access is out of bounds
        let aggregate%next_item_offset%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 6u)
        let aggregate%end_offset%3#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%3#0 aggregate%has_next%3#0)
        let aggregate%substring3%3#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%next_item_offset%2#0 aggregate%end_offset%3#0)
        (log aggregate%substring3%3#0)
        let (tmp%7#0: bytes, array#3: Encoded(len+((len+utf8[]),(len+utf8[]))[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#2)
        let tmp%9#0: bool = (== tmp%7#0 0x000400070001610003626565)
        (assert tmp%9#0)
        (log array#3)
        let (tmp%10#0: bytes, array#4: Encoded(len+((len+utf8[]),(len+utf8[]))[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#3)
        let tmp%12#0: bool = (== tmp%10#0 0x00040011000b48656c6c6f20576f726c64000161)
        (assert tmp%12#0)
        (log array#4)
        let (tmp%13#0: bytes, array#5: Encoded(len+((len+utf8[]),(len+utf8[]))[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#4)
        let tmp%15#0: bool = (== tmp%13#0 0x000400070001610003626565)
        (assert tmp%15#0)
        (log array#5)
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements() -> void:
    block@0: // L74
        let struct1#0: Encoded(uint64,(len+utf8[]),uint64) = 0x000000000000000300120000040000000000000161
        let struct2#0: Encoded(uint64,(len+utf8[]),uint64) = 0x0000040000000000001200000000000000030003626565
        let aggregate%concat%2#0: bytes = 0x00020000040000000000001200000000000000030003626565
        let array#1: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(0u, 0x, 1u, 0x00020000040000000000001200000000000000030003626565)
        let extract_uint16%1#0: uint64 = (extract_uint16 array#1 0u)
        let extract_to_end%1#0: bytes = ((extract 2 0) array#1)
        let array#2: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%1#0, extract_to_end%1#0, 1u, 0x00020000040000000000001200000000000000030003626565)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 array#2 0u)
        (assert aggregate%array_length%1#0) // index access is out of bounds
        let array#3: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = _puya_lib.arc4.dynamic_array_replace_dynamic_element(array#2, 0x000000000000000300120000040000000000000161, 0u)
        (log array#3)
        let aggregate%array_head_and_tail%1#0: bytes = ((extract 2 0) array#3)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 array#3 0u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 0u)
        let aggregate%has_next%1#0: uint64 = (- aggregate%array_length%2#0 1u) // on error: index access is out of bounds
        let aggregate%end_of_array%1#0: uint64 = (len aggregate%array_head_and_tail%1#0)
        let aggregate%next_item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 2u)
        let aggregate%end_offset%1#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%1#0 aggregate%has_next%1#0)
        let aggregate%substring3%1#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%end_offset%1#0)
        (log aggregate%substring3%1#0)
        let aggregate%has_next%2#0: uint64 = (- aggregate%array_length%2#0 2u) // on error: index access is out of bounds
        let aggregate%next_item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 4u)
        let aggregate%end_offset%2#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%2#0 aggregate%has_next%2#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%next_item_offset%1#0 aggregate%end_offset%2#0)
        (log aggregate%substring3%2#0)
        let (tmp%10#0: bytes, array#4: Encoded(len+(uint64,(len+utf8[]),uint64)[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#3)
        let tmp%12#0: bool = (== tmp%10#0 0x0000040000000000001200000000000000030003626565)
        (assert tmp%12#0)
        let (tmp%13#0: bytes, array#5: Encoded(len+(uint64,(len+utf8[]),uint64)[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#4)
        let tmp%15#0: bool = (== tmp%13#0 0x000000000000000300120000040000000000000161)
        (assert tmp%15#0)
        let tmp%17#0: bool = (== aggregate%array_length%2#0 2u)
        (assert tmp%17#0)
        let array2#1: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(aggregate%array_length%2#0, aggregate%array_head_and_tail%1#0, aggregate%array_length%2#0, aggregate%array_head_and_tail%1#0)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 array2#1 0u)
        let tmp%20#0: bool = (== aggregate%array_length%6#0 4u)
        (assert tmp%20#0)
        let tmp%22#0: uint64 = (- aggregate%array_length%6#0 1u)
        let aggregate%array_head_and_tail%3#0: bytes = ((extract 2 0) array2#1)
        let aggregate%item_offset_offset%3#0: uint64 = (* tmp%22#0 2u)
        let aggregate%item_offset%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%item_offset_offset%3#0)
        let aggregate%next_index%3#0: uint64 = (+ tmp%22#0 1u)
        let aggregate%has_next%3#0: uint64 = (- aggregate%array_length%6#0 aggregate%next_index%3#0) // on error: index access is out of bounds
        let aggregate%end_of_array%3#0: uint64 = (len aggregate%array_head_and_tail%3#0)
        let aggregate%next_item_offset_offset%3#0: uint64 = (* aggregate%next_index%3#0 2u)
        let aggregate%next_item_offset%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%next_item_offset_offset%3#0)
        let aggregate%end_offset%3#0: uint64 = (select aggregate%end_of_array%3#0 aggregate%next_item_offset%3#0 aggregate%has_next%3#0)
        let aggregate%substring3%3#0: bytes = (substring3 aggregate%array_head_and_tail%3#0 aggregate%item_offset%3#0 aggregate%end_offset%3#0)
        let tmp%23#0: bool = (== aggregate%substring3%3#0 0x0000040000000000001200000000000000030003626565)
        (assert tmp%23#0)
        let tmp%25#0: uint64 = (- aggregate%array_length%6#0 2u)
        let aggregate%item_offset_offset%4#0: uint64 = (* tmp%25#0 2u)
        let aggregate%item_offset%4#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%item_offset_offset%4#0)
        let aggregate%next_index%4#0: uint64 = (+ tmp%25#0 1u)
        let aggregate%has_next%4#0: uint64 = (- aggregate%array_length%6#0 aggregate%next_index%4#0) // on error: index access is out of bounds
        let aggregate%next_item_offset_offset%4#0: uint64 = (* aggregate%next_index%4#0 2u)
        let aggregate%next_item_offset%4#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%next_item_offset_offset%4#0)
        let aggregate%end_offset%4#0: uint64 = (select aggregate%end_of_array%3#0 aggregate%next_item_offset%4#0 aggregate%has_next%4#0)
        let aggregate%substring3%4#0: bytes = (substring3 aggregate%array_head_and_tail%3#0 aggregate%item_offset%4#0 aggregate%end_offset%4#0)
        let tmp%26#0: bool = (== aggregate%substring3%4#0 0x000000000000000300120000040000000000000161)
        (assert tmp%26#0)
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements() -> void:
    block@0: // L97
        let aggregate%data_length%0#0: uint64 = 3u
        let aggregate%current_tail_offset%0#0: uint64 = 31u
        let aggregate%as_bytes%1#0: bytes[8] = (itob 31u)
        let aggregate%offset_as_uint16%1#0: bytes = 0x001f
        let aggregate%head%3#0: bytes = 0x0000000000000003001c0000040000000000001f
        let aggregate%head%4#0: bytes = 0x0000000000000003001c0000040000000000001f0000000000000003
        let aggregate%concat%0#0: bytes = 0x0000000000000003001c0000040000000000001f0000000000000003000161
        let struct1#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = 0x0000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a
        let aggregate%data_length%2#0: uint64 = 5u
        let aggregate%current_tail_offset%2#0: uint64 = 33u
        let aggregate%as_bytes%4#0: bytes[8] = (itob 33u)
        let aggregate%offset_as_uint16%3#0: bytes = 0x0021
        let aggregate%head%12#0: bytes = 0x0000040000000000001c00000000000000030021
        let aggregate%head%13#0: bytes = 0x0000040000000000001c000000000000000300210000040000000000
        let aggregate%concat%2#0: bytes = 0x0000040000000000001c0000000000000003002100000400000000000003626565
        let struct2#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = 0x0000040000000000001c000000000000000300210000040000000000000362656500040001000200030004
        let aggregate%data_length%4#0: uint64 = 39u
        let aggregate%current_tail_offset%4#0: uint64 = 43u
        let aggregate%as_bytes%7#0: bytes[8] = (itob 43u)
        let aggregate%offset_as_uint16%5#0: bytes = 0x002b
        let aggregate%head%15#0: bytes = 0x00020004002b
        let aggregate%concat%4#0: bytes = 0x00020004002b0000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a
        let array#0: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[]) = 0x00020004002b0000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a0000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a
        let aggregate%array_length%1#0: uint64 = 2u
        let aggregate%lt%0#0: bool = 1u
        let array#1: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[]) = _puya_lib.arc4.dynamic_array_replace_dynamic_element(0x00020004002b0000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a0000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a, 0x0000040000000000001c000000000000000300210000040000000000000362656500040001000200030004, 1u)
        (log array#1)
        let aggregate%array_head_and_tail%1#0: bytes = ((extract 2 0) array#1)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 array#1 0u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 0u)
        let aggregate%has_next%1#0: uint64 = (- aggregate%array_length%2#0 1u) // on error: index access is out of bounds
        let aggregate%end_of_array%1#0: uint64 = (len aggregate%array_head_and_tail%1#0)
        let aggregate%next_item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 2u)
        let aggregate%end_offset%1#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%1#0 aggregate%has_next%1#0)
        let aggregate%substring3%1#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%end_offset%1#0)
        (log aggregate%substring3%1#0)
        let aggregate%has_next%2#0: uint64 = (- aggregate%array_length%2#0 2u) // on error: index access is out of bounds
        let aggregate%next_item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 4u)
        let aggregate%end_offset%2#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%2#0 aggregate%has_next%2#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%next_item_offset%1#0 aggregate%end_offset%2#0)
        (log aggregate%substring3%2#0)
        let (tmp%12#0: bytes, array#2: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#1)
        let tmp%14#0: bool = (== tmp%12#0 0x0000040000000000001c000000000000000300210000040000000000000362656500040001000200030004)
        (assert tmp%14#0)
        let (tmp%15#0: bytes, array#3: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#2)
        let tmp%17#0: bool = (== tmp%15#0 0x0000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a)
        (assert tmp%17#0)
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement() -> void:
    block@0: // L114
        let aggregate%data_length%0#0: uint64 = 3u
        let aggregate%current_tail_offset%0#0: uint64 = 7u
        let aggregate%as_bytes%1#0: bytes[8] = (itob 7u)
        let aggregate%offset_as_uint16%1#0: bytes = 0x0007
        let aggregate%head%5#0: bytes = 0x00040007
        let aggregate%concat%0#0: bytes = 0x00040007000161
        let two#0: Encoded((len+utf8[]),(len+utf8[])) = 0x000400070001610003626565
        let aggregate%data_length%2#0: uint64 = 3u
        let aggregate%current_tail_offset%2#0: uint64 = 31u
        let aggregate%as_bytes%3#0: bytes[8] = (itob 31u)
        let aggregate%offset_as_uint16%3#0: bytes = 0x001f
        let aggregate%head%13#0: bytes = 0x0000000000000003001c0000040000000000001f
        let aggregate%head%14#0: bytes = 0x0000000000000003001c0000040000000000001f0000000000000003
        let aggregate%concat%2#0: bytes = 0x0000000000000003001c0000040000000000001f0000000000000003000161
        let four#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = 0x0000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a
        let aggregate%data_length%4#0: uint64 = 3u
        let aggregate%current_tail_offset%4#0: uint64 = 7u
        let aggregate%offset_as_uint16%5#0: bytes = 0x0007
        let aggregate%head%16#0: bytes = 0x00040007
        let aggregate%concat%4#0: bytes = 0x00040007000161
        let five#0: Encoded((len+utf8[]),(len+utf8[])) = 0x000400070001610003626565
        let aggregate%data_length%6#0: uint64 = 12u
        let aggregate%current_tail_offset%6#0: uint64 = 38u
        let aggregate%as_bytes%7#0: bytes[8] = (itob 38u)
        let aggregate%offset_as_uint16%7#0: bytes = 0x0026
        let aggregate%head%20#0: bytes = 0x00000000000000030405001a000004000000000005040026
        let aggregate%data_length%7#0: uint64 = 39u
        let aggregate%current_tail_offset%7#0: uint64 = 77u
        let aggregate%as_bytes%8#0: bytes[8] = (itob 77u)
        let aggregate%offset_as_uint16%8#0: bytes = 0x004d
        let aggregate%head%21#0: bytes = 0x00000000000000030405001a000004000000000005040026004d
        let aggregate%concat%6#0: bytes = 0x00000000000000030405001a000004000000000005040026004d000400070001610003626565
        let aggregate%concat%7#0: bytes = 0x00000000000000030405001a000004000000000005040026004d0004000700016100036265650000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a
        let struct1#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = 0x00000000000000030405001a000004000000000005040026004d0004000700016100036265650000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a000400070001610003626565
        let aggregate%data_length%9#0: uint64 = 5u
        let aggregate%current_tail_offset%9#0: uint64 = 9u
        let aggregate%as_bytes%10#0: bytes[8] = (itob 9u)
        let aggregate%offset_as_uint16%10#0: bytes = 0x0009
        let aggregate%head%23#0: bytes = 0x00040009
        let aggregate%concat%9#0: bytes = 0x000400090003626565
        let aggregate%concat%10#0: bytes = 0x000400090003626565000161
        let aggregate%data_length%11#0: uint64 = 12u
        let aggregate%current_tail_offset%11#0: uint64 = 38u
        let aggregate%offset_as_uint16%12#0: bytes = 0x0026
        let aggregate%head%27#0: bytes = 0x00000000000000030405001a000004000000000005040026
        let aggregate%current_tail_offset%12#0: uint64 = 77u
        let aggregate%offset_as_uint16%13#0: bytes = 0x004d
        let aggregate%head%28#0: bytes = 0x00000000000000030405001a000004000000000005040026004d
        let aggregate%concat%11#0: bytes = 0x00000000000000030405001a000004000000000005040026004d000400090003626565000161
        let aggregate%concat%12#0: bytes = 0x00000000000000030405001a000004000000000005040026004d0004000900036265650001610000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a
        let struct2#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = 0x00000000000000030405001a000004000000000005040026004d0004000900036265650001610000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a000400070001610003626565
        let aggregate%item_offset%0#0: uint64 = 26u
        let aggregate%data_up_to_item%0#0: bytes = 0x00000000000000030405001a000004000000000005040026004d
        let aggregate%updated_data%0#0: bytes = 0x00000000000000030405001a000004000000000005040026004d000400070001610003626565
        let aggregate%next_item_offset%0#0: uint64 = 38u
        let aggregate%total_length%0#0: uint64 = 89u
        let aggregate%data%0#0: bytes = 0x0000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a000400070001610003626565
        let aggregate%updated_data%1#0: bytes = 0x00000000000000030405001a000004000000000005040026004d0004000700016100036265650000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a000400070001610003626565
        let aggregate%old_value_length%0#0: uint64 = 12u
        let aggregate%tail_offset%1#0: uint64 = 50u
        let aggregate%tail_offset%2#0: uint64 = 38u
        let aggregate%tail_offset_bytes%0#0: bytes = 0x0026
        let aggregate%updated_data%2#0: bytes = 0x00000000000000030405001a000004000000000005040026004d0004000700016100036265650000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a000400070001610003626565
        let aggregate%tail_offset%3#0: uint64 = 77u
        let aggregate%tail_offset%4#0: uint64 = 89u
        let aggregate%tail_offset%5#0: uint64 = 77u
        let aggregate%tail_offset_bytes%1#0: bytes = 0x004d
        let struct2#1: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = 0x00000000000000030405001a000004000000000005040026004d0004000700016100036265650000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a000400070001610003626565
        let tmp%25#0: bool = 1u
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification() -> void:
    block@0: // L141
        let aggregate%data_length%0#0: uint64 = 3u
        let aggregate%current_tail_offset%0#0: uint64 = 7u
        let aggregate%as_bytes%1#0: bytes[8] = (itob 7u)
        let aggregate%offset_as_uint16%1#0: bytes = 0x0007
        let aggregate%head%5#0: bytes = 0x00040007
        let aggregate%concat%0#0: bytes = 0x00040007000161
        let two#0: Encoded((len+utf8[]),(len+utf8[])) = 0x000400070001610003626565
        let aggregate%data_length%2#0: uint64 = 3u
        let aggregate%current_tail_offset%2#0: uint64 = 31u
        let aggregate%as_bytes%3#0: bytes[8] = (itob 31u)
        let aggregate%offset_as_uint16%3#0: bytes = 0x001f
        let aggregate%head%13#0: bytes = 0x0000000000000003001c0000040000000000001f
        let aggregate%head%14#0: bytes = 0x0000000000000003001c0000040000000000001f0000000000000003
        let aggregate%concat%2#0: bytes = 0x0000000000000003001c0000040000000000001f0000000000000003000161
        let four1#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = 0x0000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a
        let concat%0#0: Encoded(len+uint16[]) = 0x0003ffff0000002a007b
        let extract_uint16%0#0: uint64 = 3u
        let add%0#0: uint64 = 4u
        let as_bytes%0#0: bytes[8] = (itob 4u)
        let as_u16_bytes%0#0: bytes = 0x0004
        let replace%0#0: bytes = 0x0004ffff0000002a007b
        let aggregate%data_length%4#0: uint64 = 3u
        let aggregate%current_tail_offset%4#0: uint64 = 31u
        let aggregate%offset_as_uint16%5#0: bytes = 0x001f
        let aggregate%head%19#0: bytes = 0x0000000000000003001c0000040000000000001f
        let aggregate%head%20#0: bytes = 0x0000000000000003001c0000040000000000001f0000000000000003
        let aggregate%concat%4#0: bytes = 0x0000000000000003001c0000040000000000001f0000000000000003000161
        let four2#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = 0x0000000000000003001c0000040000000000001f00000000000000030001610004ffff0000002a007b
        let aggregate%data_length%6#0: uint64 = 3u
        let aggregate%current_tail_offset%6#0: uint64 = 7u
        let aggregate%offset_as_uint16%7#0: bytes = 0x0007
        let aggregate%head%22#0: bytes = 0x00040007
        let aggregate%concat%6#0: bytes = 0x00040007000161
        let five#0: Encoded((len+utf8[]),(len+utf8[])) = 0x000400070001610003626565
        let aggregate%data_length%8#0: uint64 = 12u
        let aggregate%current_tail_offset%8#0: uint64 = 38u
        let aggregate%as_bytes%9#0: bytes[8] = (itob 38u)
        let aggregate%offset_as_uint16%9#0: bytes = 0x0026
        let aggregate%head%26#0: bytes = 0x00000000000000030405001a000004000000000005040026
        let aggregate%data_length%9#0: uint64 = 39u
        let aggregate%current_tail_offset%9#0: uint64 = 77u
        let aggregate%as_bytes%10#0: bytes[8] = (itob 77u)
        let aggregate%offset_as_uint16%10#0: bytes = 0x004d
        let aggregate%head%27#0: bytes = 0x00000000000000030405001a000004000000000005040026004d
        let aggregate%concat%8#0: bytes = 0x00000000000000030405001a000004000000000005040026004d000400070001610003626565
        let aggregate%concat%9#0: bytes = 0x00000000000000030405001a000004000000000005040026004d0004000700016100036265650000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a
        let tup1#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = 0x00000000000000030405001a000004000000000005040026004d0004000700016100036265650000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a000400070001610003626565
        let aggregate%data_length%12#0: uint64 = 41u
        let aggregate%current_tail_offset%12#0: uint64 = 79u
        let aggregate%as_bytes%13#0: bytes[8] = (itob 79u)
        let aggregate%offset_as_uint16%13#0: bytes = 0x004f
        let aggregate%head%32#0: bytes = 0x00000000000000030405001a000004000000000005040026004f
        let aggregate%concat%11#0: bytes = 0x00000000000000030405001a000004000000000005040026004f000400070001610003626565
        let aggregate%concat%12#0: bytes = 0x00000000000000030405001a000004000000000005040026004f0004000700016100036265650000000000000003001c0000040000000000001f00000000000000030001610004ffff0000002a007b
        let tup2#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = 0x00000000000000030405001a000004000000000005040026004f0004000700016100036265650000000000000003001c0000040000000000001f00000000000000030001610004ffff0000002a007b000400070001610003626565
        let aggregate%extract_uint16%0#0: uint64 = 38u
        let aggregate%extract_uint16%1#0: uint64 = 79u
        let aggregate%substring3%0#0: bytes = 0x0000000000000003001c0000040000000000001f00000000000000030001610004ffff0000002a007b
        let aggregate%extract_uint16%2#0: uint64 = 31u
        let aggregate%len%0#0: uint64 = 41u
        let aggregate%substring3%1#0: bytes = 0x0004ffff0000002a007b
        let (tmp%29#0: bytes, tmp%30#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(0x0004ffff0000002a007b, 2u)
        let aggregate%data_up_to_item%0#0: bytes = 0x0000000000000003001c0000040000000000001f0000000000000003000161
        let aggregate%updated_data%0#0: bytes = (concat 0x0000000000000003001c0000040000000000001f0000000000000003000161 tmp%30#0)
        let aggregate%data_up_to_item%1#0: bytes = 0x00000000000000030405001a000004000000000005040026004f000400070001610003626565
        let aggregate%updated_data%1#0: bytes = (concat 0x00000000000000030405001a000004000000000005040026004f000400070001610003626565 aggregate%updated_data%0#0)
        let aggregate%total_length%0#0: uint64 = 91u
        let aggregate%data%0#0: bytes = 0x000400070001610003626565
        let aggregate%updated_data%2#0: bytes = (concat aggregate%updated_data%1#0 0x000400070001610003626565)
        let aggregate%old_value_length%0#0: uint64 = 41u
        let aggregate%new_value_length%0#0: uint64 = (len aggregate%updated_data%0#0)
        let aggregate%tail_offset%1#0: uint64 = (+ 79u aggregate%new_value_length%0#0)
        let aggregate%tail_offset%2#0: uint64 = (- aggregate%tail_offset%1#0 41u)
        let aggregate%as_bytes%14#0: bytes[8] = (itob aggregate%tail_offset%2#0)
        let aggregate%tail_offset_bytes%0#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let tup2#1: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = ((replace2 24) aggregate%updated_data%2#0 aggregate%tail_offset_bytes%0#0)
        let tmp%31#0: bool = (== 0x00000000000000030405001a000004000000000005040026004d0004000700016100036265650000000000000003001c0000040000000000001f00000000000000030001610003ffff0000002a000400070001610003626565 tup2#1)
        (assert tmp%31#0) // tup1 does not match tup2
        return 