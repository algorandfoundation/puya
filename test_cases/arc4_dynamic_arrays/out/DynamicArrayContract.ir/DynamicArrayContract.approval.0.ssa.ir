main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let tmp%2#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> <bytes, bytes>:
    block@0: // L92
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%0#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%0#0)
        let new_head#0: bytes = 0x
        let tmp%1#0: uint64 = (* length_minus_1#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L110
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L111
        let item_offset#0: uint64 = (extract_uint16 head_and_tail#0 head_offset#1)
        let item_offset#1: uint64 = (- item_offset#0 2u)
        let tmp%2#0: bytes = (itob item_offset#1)
        let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
        let new_head#2: bytes = (concat new_head#1 tmp%3#0)
        goto block@3
    block@3: // for_footer_L110
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L110
        let tmp%4#0: bytes = (itob length_minus_1#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (concat tmp%5#0 new_head#1)
        let tmp%7#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%8#0: bytes = (substring3 head_and_tail#0 tmp%7#0 popped_offset#0)
        let updated#0: bytes = (concat tmp%6#0 tmp%8#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
        let tmp%0#0: uint64 = (* array_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#1)
        let tmp%1#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%2#0: bytes = (itob tmp%1#0)
        let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
        let new_head#2: bytes = (concat new_head#1 tmp%3#0)
        goto block@3
    block@3: // for_footer_L203
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L203
        let item_offset_adjustment#2: uint64 = (len array_head_and_tail#0)
        let tmp%4#0: uint64 = (* new_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7)
        let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7)
        let continue_looping%1#0: bool = (< head_offset#4 tmp%4#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let item_offset#1: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#4)
        let tmp%5#0: uint64 = (+ item_offset_adjustment#2 item_offset#1)
        let tmp%6#0: bytes = (itob tmp%5#0)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let new_head#4: bytes = (concat new_head#3 tmp%7#0)
        goto block@7
    block@7: // for_footer_L208
        let head_offset#5: uint64 = (+ head_offset#4 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%8#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%9#0: bytes = (itob tmp%8#0)
        let tmp%10#0: bytes = ((extract 6 2) tmp%9#0)
        let tmp%11#0: bytes = (concat tmp%10#0 new_head#3)
        let tmp%12#0: uint64 = (* array_items_count#0 2u)
        let tmp%13#0: uint64 = (len array_head_and_tail#0)
        let tmp%14#0: bytes = (substring3 array_head_and_tail#0 tmp%12#0 tmp%13#0)
        let tmp%15#0: bytes = (concat tmp%11#0 tmp%14#0)
        let tmp%16#0: uint64 = (* new_items_count#0 2u)
        let tmp%17#0: uint64 = (len new_head_and_tail#0)
        let tmp%18#0: bytes = (substring3 new_head_and_tail#0 tmp%16#0 tmp%17#0)
        let tmp%19#0: bytes = (concat tmp%15#0 tmp%18#0)
        return tmp%19#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let tmp%0#0: bytes = ((extract 2 0) source#0)
        let tmp%1#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%0#0, new_item#0, index#0, array_length#0)
        let tmp%2#0: bytes = (concat size_b#0 tmp%1#0)
        return tmp%2#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%1#0: uint64 = (+ index#0 1u)
        let tmp%2#0: uint64 = (* tmp%1#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%2#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%3#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%3#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%4#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%5#0: bytes = (concat tmp%4#0 new_item#0)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%5#0 tmp%6#0)
        let tmp%7#0: uint64 = (* array_length#0 2u)
        let tmp%8#0: uint64 = (+ index#0 1u)
        let tmp%9#0: uint64 = (* tmp%8#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%9#0
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%7#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%10#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%10#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        goto block@3
    block@3: // for_footer_L273
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine test_cases.arc4_dynamic_arrays.contract.get_string1() -> Encoded(len+utf8[]):
    block@0: // L172
        return 0x000161

subroutine test_cases.arc4_dynamic_arrays.contract.get_string2() -> Encoded(len+utf8[]):
    block@0: // L177
        return 0x0003626565

subroutine test_cases.arc4_dynamic_arrays.contract.get_string3() -> Encoded(len+utf8[]):
    block@0: // L182
        return 0x000b48656c6c6f20576f726c64

subroutine test_cases.arc4_dynamic_arrays.contract.get_uint1() -> Encoded(uint64):
    block@0: // L187
        return 0x0000000000000003

subroutine test_cases.arc4_dynamic_arrays.contract.get_uint2() -> Encoded(uint64):
    block@0: // L192
        return 0x0000040000000000

subroutine test_cases.arc4_dynamic_arrays.contract.get_byte1() -> Encoded(uint8):
    block@0: // L197
        return 0x04

subroutine test_cases.arc4_dynamic_arrays.contract.get_byte2() -> Encoded(uint8):
    block@0: // L202
        return 0x05

subroutine test_cases.arc4_dynamic_arrays.contract.get_byte3() -> Encoded(uint8):
    block@0: // L207
        return 0x2a

subroutine test_cases.arc4_dynamic_arrays.contract.get_byte4() -> Encoded(uint8):
    block@0: // L212
        return 0xff

subroutine test_cases.arc4_dynamic_arrays.contract.get_u16_arr1() -> Encoded(len+uint16[]):
    block@0: // L217
        let result%0#0: bytes = (concat 0x 0xffff)
        let result%1#0: bytes = (concat result%0#0 0x0000)
        let result%2#0: bytes = (concat result%1#0 0x002a)
        let array_data%0#0: bytes = (concat 0x0003 result%2#0)
        return array_data%0#0

subroutine test_cases.arc4_dynamic_arrays.contract.get_u16_arr2() -> Encoded(len+uint16[]):
    block@0: // L222
        let result%0#0: bytes = (concat 0x 0x0001)
        let result%1#0: bytes = (concat result%0#0 0x0002)
        let result%2#0: bytes = (concat result%1#0 0x0003)
        let result%3#0: bytes = (concat result%2#0 0x0004)
        let array_data%0#0: bytes = (concat 0x0004 result%3#0)
        return array_data%0#0

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__() -> bool:
    block@0: // L38
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@10
    block@1: // abi_routing_L38
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_static_elements()void" => block@2, method "test_dynamic_elements()void" => block@3, method "test_mixed_single_dynamic_elements()void" => block@4, method "test_mixed_multiple_dynamic_elements()void" => block@5, method "test_nested_struct_replacement()void" => block@6, method "test_nested_tuple_modification()void" => block@7, * => block@8}
    block@2: // test_static_elements_route_L39
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements()
        return 1u
    block@3: // test_dynamic_elements_route_L55
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements()
        return 1u
    block@4: // test_mixed_single_dynamic_elements_route_L74
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements()
        return 1u
    block@5: // test_mixed_multiple_dynamic_elements_route_L89
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements()
        return 1u
    block@6: // test_nested_struct_replacement_route_L106
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement()
        return 1u
    block@7: // test_nested_tuple_modification_route_L133
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification()
        return 1u
    block@8: // switch_case_default_L38
        goto block@9
    block@9: // switch_case_next_L38
        goto block@14
    block@10: // bare_routing_L38
        let tmp%27#0: uint64 = (txn OnCompletion)
        switch tmp%27#0 {0u => block@11, * => block@12}
    block@11: // __algopy_default_create_L1
        let tmp%28#0: uint64 = (txn ApplicationID)
        let tmp%29#0: bool = (== tmp%28#0 0u)
        (assert tmp%29#0) // can only call when creating
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__algopy_default_create()
        return 1u
    block@12: // switch_case_default_L38
        goto block@13
    block@13: // switch_case_next_L38
        goto block@14
    block@14: // after_if_else_L38
        return 0u

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements() -> void:
    block@0: // L39
        let tmp%0#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte1()
        let tmp%1#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte2()
        let result%0#0: bytes = (concat 0x tmp%0#0)
        let result%1#0: bytes = (concat result%0#0 tmp%1#0)
        let array_data%0#0: bytes = (concat 0x result%1#0)
        let byte_array1#0: Encoded(uint8[2]) = array_data%0#0
        let tmp%2#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte3()
        let tmp%3#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte4()
        let result%2#0: bytes = (concat 0x tmp%2#0)
        let result%3#0: bytes = (concat result%2#0 tmp%3#0)
        let array_data%1#0: bytes = (concat 0x result%3#0)
        let byte_array2#0: Encoded(uint8[2]) = array_data%1#0
        let tmp%4#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let copy%0#0: Encoded(uint8[2]) = byte_array1#0
        let encoded%0#0: Encoded((uint64)) = (concat 0x tmp%4#0)
        let encoded%1#0: Encoded((uint64,uint8[2])) = (concat encoded%0#0 copy%0#0)
        let encoded%2#0: bytes = (concat encoded%1#0 0x)
        let struct1#0: Encoded((uint64,uint8[2])) = encoded%2#0
        let tmp%5#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let copy%1#0: Encoded(uint8[2]) = byte_array2#0
        let encoded%3#0: Encoded((uint64)) = (concat 0x tmp%5#0)
        let encoded%4#0: Encoded((uint64,uint8[2])) = (concat encoded%3#0 copy%1#0)
        let encoded%5#0: bytes = (concat encoded%4#0 0x)
        let struct2#0: Encoded((uint64,uint8[2])) = encoded%5#0
        let copy%2#0: Encoded((uint64,uint8[2])) = struct1#0
        let copy%3#0: Encoded((uint64,uint8[2])) = struct1#0
        let result%4#0: bytes = (concat 0x copy%2#0)
        let result%5#0: bytes = (concat result%4#0 copy%3#0)
        let array_data%2#0: bytes = (concat 0x0002 result%5#0)
        let array#0: Encoded(len+(uint64,uint8[2])[]) = array_data%2#0
        let copy%4#0: Encoded((uint64,uint8[2])) = struct2#0
        let write_offset%0#0: uint64 = (* 1u 10u)
        let write_offset_with_length_header%0#0: uint64 = (+ write_offset%0#0 2u)
        let updated_array%0#0: bytes = (replace3 array#0 write_offset_with_length_header%0#0 copy%4#0)
        let array#1: Encoded(len+(uint64,uint8[2])[]) = updated_array%0#0
        (log array#1)
        let array_trimmed%0#0: bytes = ((extract 2 0) array#1)
        let bytes_offset%0#0: uint64 = (* 0u 10u)
        let encoded_element%0#0: bytes = (extract3 array_trimmed%0#0 bytes_offset%0#0 10u) // on error: index access is out of bounds
        (log encoded_element%0#0)
        let array_trimmed%1#0: bytes = ((extract 2 0) array#1)
        let bytes_offset%1#0: uint64 = (* 1u 10u)
        let encoded_element%1#0: bytes = (extract3 array_trimmed%1#0 bytes_offset%1#0 10u) // on error: index access is out of bounds
        (log encoded_element%1#0)
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(array#1, 10u)
        let array#2: Encoded(len+(uint64,uint8[2])[]) = data%0#0
        let tmp%6#0: bool = (== popped%0#0 struct2#0)
        (assert tmp%6#0)
        let (popped%1#0: bytes, data%1#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(array#2, 10u)
        let array#3: Encoded(len+(uint64,uint8[2])[]) = data%1#0
        let tmp%7#0: bool = (== popped%1#0 struct1#0)
        (assert tmp%7#0)
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements() -> void:
    block@0: // L55
        let tmp%0#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%1#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tail%0#0: bytes = (concat 0x tmp%0#0)
        let data_length%0#0: uint64 = (len tmp%0#0)
        let current_tail_offset%0#0: uint64 = (+ 4u data_length%0#0)
        let as_bytes%0#0: bytes[8] = (itob 4u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%0#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%0#0)
        let tail%1#0: bytes = (concat tail%0#0 tmp%1#0)
        let data_length%1#0: uint64 = (len tmp%1#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%1#0)
        let as_bytes%1#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%1#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%0#0 offset_as_uint16%1#0)
        let encoded%2#0: bytes = (concat encoded%1#0 tail%1#0)
        let struct1#0: Encoded((len+utf8[],len+utf8[])) = encoded%2#0
        let tmp%2#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string3()
        let tmp%3#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tail%2#0: bytes = (concat 0x tmp%2#0)
        let data_length%2#0: uint64 = (len tmp%2#0)
        let current_tail_offset%2#0: uint64 = (+ 4u data_length%2#0)
        let as_bytes%2#0: bytes[8] = (itob 4u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%3#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%2#0)
        let tail%3#0: bytes = (concat tail%2#0 tmp%3#0)
        let data_length%3#0: uint64 = (len tmp%3#0)
        let current_tail_offset%3#0: uint64 = (+ current_tail_offset%2#0 data_length%3#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%4#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%3#0 offset_as_uint16%3#0)
        let encoded%5#0: bytes = (concat encoded%4#0 tail%3#0)
        let struct2#0: Encoded((len+utf8[],len+utf8[])) = encoded%5#0
        let copy%0#0: Encoded((len+utf8[],len+utf8[])) = struct1#0
        let copy%1#0: Encoded((len+utf8[],len+utf8[])) = struct1#0
        let as_bytes%4#0: bytes[8] = (itob 4u)
        let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%4#0)
        let result%0#0: bytes = (concat 0x next_item_head%0#0)
        let next_item_len%0#0: uint64 = (len copy%0#0)
        let tail_offset%0#0: uint64 = (+ 4u next_item_len%0#0)
        let as_bytes%5#0: bytes[8] = (itob tail_offset%0#0)
        let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%5#0)
        let result%1#0: bytes = (concat result%0#0 next_item_head%1#0)
        let next_item_len%1#0: uint64 = (len copy%1#0)
        let tail_offset%1#0: uint64 = (+ tail_offset%0#0 next_item_len%1#0)
        let result%2#0: bytes = (concat result%1#0 copy%0#0)
        let result%3#0: bytes = (concat result%2#0 copy%1#0)
        let array_data%0#0: bytes = (concat 0x0002 result%3#0)
        let array#0: Encoded(len+(len+utf8[],len+utf8[])[]) = array_data%0#0
        let copy%2#0: Encoded((len+utf8[],len+utf8[])) = struct1#0
        let as_bytes%6#0: bytes[8] = (itob 2u)
        let next_item_head%2#0: bytes = ((extract 6 2) as_bytes%6#0)
        let result%4#0: bytes = (concat 0x next_item_head%2#0)
        let next_item_len%2#0: uint64 = (len copy%2#0)
        let tail_offset%2#0: uint64 = (+ 2u next_item_len%2#0)
        let result%5#0: bytes = (concat result%4#0 copy%2#0)
        let l_count%0#0: uint64 = array#0.length
        let l_head_and_tail%0#0: bytes = ((extract 2 0) array#0)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, 1u, result%5#0)
        let array#1: Encoded(len+(len+utf8[],len+utf8[])[]) = concat_result%0#0
        let copy%3#0: Encoded((len+utf8[],len+utf8[])) = struct2#0
        let array_length%0#0: uint64 = array#1.length
        let lt%0#0: bool = (< 1u array_length%0#0)
        (assert lt%0#0) // index access is out of bounds
        let updated_array%0#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(array#1, copy%3#0, 1u)
        let array#2: Encoded(len+(len+utf8[],len+utf8[])[]) = updated_array%0#0
        (log array#2)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) array#2)
        let item_offset_offset%0#0: uint64 = (* 0u 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let array_length%1#0: uint64 = array#2.length
        let next_index%0#0: uint64 = (+ 0u 1u)
        let has_next%0#0: uint64 = (- array_length%1#0 next_index%0#0) // on error: index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* next_index%0#0 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let substring3%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        (log substring3%0#0)
        let array_head_and_tail%1#0: bytes = ((extract 2 0) array#2)
        let item_offset_offset%1#0: uint64 = (* 1u 2u)
        let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset_offset%1#0)
        let array_length%2#0: uint64 = array#2.length
        let next_index%1#0: uint64 = (+ 1u 1u)
        let has_next%1#0: uint64 = (- array_length%2#0 next_index%1#0) // on error: index access is out of bounds
        let end_of_array%1#0: uint64 = (len array_head_and_tail%1#0)
        let next_item_offset_offset%1#0: uint64 = (* next_index%1#0 2u)
        let next_item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 next_item_offset_offset%1#0)
        let end_offset%1#0: uint64 = (select end_of_array%1#0 next_item_offset%1#0 has_next%1#0)
        let substring3%1#0: bytes = (substring3 array_head_and_tail%1#0 item_offset%1#0 end_offset%1#0)
        (log substring3%1#0)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) array#2)
        let item_offset_offset%2#0: uint64 = (* 2u 2u)
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset_offset%2#0)
        let array_length%3#0: uint64 = array#2.length
        let next_index%2#0: uint64 = (+ 2u 1u)
        let has_next%2#0: uint64 = (- array_length%3#0 next_index%2#0) // on error: index access is out of bounds
        let end_of_array%2#0: uint64 = (len array_head_and_tail%2#0)
        let next_item_offset_offset%2#0: uint64 = (* next_index%2#0 2u)
        let next_item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 next_item_offset_offset%2#0)
        let end_offset%2#0: uint64 = (select end_of_array%2#0 next_item_offset%2#0 has_next%2#0)
        let substring3%2#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%2#0 end_offset%2#0)
        (log substring3%2#0)
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#2)
        let array#3: Encoded(len+(len+utf8[],len+utf8[])[]) = data%0#0
        let tmp%4#0: bool = (== popped%0#0 struct1#0)
        (assert tmp%4#0)
        (log array#3)
        let (popped%1#0: bytes, data%1#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#3)
        let array#4: Encoded(len+(len+utf8[],len+utf8[])[]) = data%1#0
        let tmp%5#0: bool = (== popped%1#0 struct2#0)
        (assert tmp%5#0)
        (log array#4)
        let (popped%2#0: bytes, data%2#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#4)
        let array#5: Encoded(len+(len+utf8[],len+utf8[])[]) = data%2#0
        let tmp%6#0: bool = (== popped%2#0 struct1#0)
        (assert tmp%6#0)
        (log array#5)
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements() -> void:
    block@0: // L74
        let tmp%0#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%1#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%2#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let encoded%0#0: Encoded((uint64)) = (concat 0x tmp%0#0)
        let tail%0#0: bytes = (concat 0x tmp%1#0)
        let data_length%0#0: uint64 = (len tmp%1#0)
        let current_tail_offset%0#0: uint64 = (+ 18u data_length%0#0)
        let as_bytes%0#0: bytes[8] = (itob 18u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%1#0: Encoded((uint64,len+utf8[])) = (concat encoded%0#0 offset_as_uint16%0#0)
        let encoded%2#0: Encoded((uint64,len+utf8[],uint64)) = (concat encoded%1#0 tmp%2#0)
        let encoded%3#0: bytes = (concat encoded%2#0 tail%0#0)
        let struct1#0: Encoded((uint64,len+utf8[],uint64)) = encoded%3#0
        let tmp%3#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%4#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tmp%5#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let encoded%4#0: Encoded((uint64)) = (concat 0x tmp%3#0)
        let tail%1#0: bytes = (concat 0x tmp%4#0)
        let data_length%1#0: uint64 = (len tmp%4#0)
        let current_tail_offset%1#0: uint64 = (+ 18u data_length%1#0)
        let as_bytes%1#0: bytes[8] = (itob 18u)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%5#0: Encoded((uint64,len+utf8[])) = (concat encoded%4#0 offset_as_uint16%1#0)
        let encoded%6#0: Encoded((uint64,len+utf8[],uint64)) = (concat encoded%5#0 tmp%5#0)
        let encoded%7#0: bytes = (concat encoded%6#0 tail%1#0)
        let struct2#0: Encoded((uint64,len+utf8[],uint64)) = encoded%7#0
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let array#0: Encoded(len+(uint64,len+utf8[],uint64)[]) = array_data%0#0
        let copy%0#0: Encoded((uint64,len+utf8[],uint64)) = struct2#0
        let as_bytes%2#0: bytes[8] = (itob 2u)
        let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let result%0#0: bytes = (concat 0x next_item_head%0#0)
        let next_item_len%0#0: uint64 = (len copy%0#0)
        let tail_offset%0#0: uint64 = (+ 2u next_item_len%0#0)
        let result%1#0: bytes = (concat result%0#0 copy%0#0)
        let l_count%0#0: uint64 = array#0.length
        let l_head_and_tail%0#0: bytes = ((extract 2 0) array#0)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, 1u, result%1#0)
        let array#1: Encoded(len+(uint64,len+utf8[],uint64)[]) = concat_result%0#0
        let copy%1#0: Encoded((uint64,len+utf8[],uint64)) = struct2#0
        let as_bytes%3#0: bytes[8] = (itob 2u)
        let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let result%2#0: bytes = (concat 0x next_item_head%1#0)
        let next_item_len%1#0: uint64 = (len copy%1#0)
        let tail_offset%1#0: uint64 = (+ 2u next_item_len%1#0)
        let result%3#0: bytes = (concat result%2#0 copy%1#0)
        let l_count%1#0: uint64 = array#1.length
        let l_head_and_tail%1#0: bytes = ((extract 2 0) array#1)
        let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%1#0, l_head_and_tail%1#0, 1u, result%3#0)
        let array#2: Encoded(len+(uint64,len+utf8[],uint64)[]) = concat_result%1#0
        let copy%2#0: Encoded((uint64,len+utf8[],uint64)) = struct1#0
        let array_length%0#0: uint64 = array#2.length
        let lt%0#0: bool = (< 0u array_length%0#0)
        (assert lt%0#0) // index access is out of bounds
        let updated_array%0#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(array#2, copy%2#0, 0u)
        let array#3: Encoded(len+(uint64,len+utf8[],uint64)[]) = updated_array%0#0
        (log array#3)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) array#3)
        let item_offset_offset%0#0: uint64 = (* 0u 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let array_length%1#0: uint64 = array#3.length
        let next_index%0#0: uint64 = (+ 0u 1u)
        let has_next%0#0: uint64 = (- array_length%1#0 next_index%0#0) // on error: index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* next_index%0#0 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let substring3%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        (log substring3%0#0)
        let array_head_and_tail%1#0: bytes = ((extract 2 0) array#3)
        let item_offset_offset%1#0: uint64 = (* 1u 2u)
        let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset_offset%1#0)
        let array_length%2#0: uint64 = array#3.length
        let next_index%1#0: uint64 = (+ 1u 1u)
        let has_next%1#0: uint64 = (- array_length%2#0 next_index%1#0) // on error: index access is out of bounds
        let end_of_array%1#0: uint64 = (len array_head_and_tail%1#0)
        let next_item_offset_offset%1#0: uint64 = (* next_index%1#0 2u)
        let next_item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 next_item_offset_offset%1#0)
        let end_offset%1#0: uint64 = (select end_of_array%1#0 next_item_offset%1#0 has_next%1#0)
        let substring3%1#0: bytes = (substring3 array_head_and_tail%1#0 item_offset%1#0 end_offset%1#0)
        (log substring3%1#0)
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#3)
        let array#4: Encoded(len+(uint64,len+utf8[],uint64)[]) = data%0#0
        let tmp%6#0: bool = (== popped%0#0 struct2#0)
        (assert tmp%6#0)
        let (popped%1#0: bytes, data%1#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#4)
        let array#5: Encoded(len+(uint64,len+utf8[],uint64)[]) = data%1#0
        let tmp%7#0: bool = (== popped%1#0 struct1#0)
        (assert tmp%7#0)
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements() -> void:
    block@0: // L89
        let tmp%0#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%1#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%2#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%3#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
        let tmp%4#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let encoded%0#0: Encoded((uint64)) = (concat 0x tmp%0#0)
        let tail%0#0: bytes = (concat 0x tmp%1#0)
        let data_length%0#0: uint64 = (len tmp%1#0)
        let current_tail_offset%0#0: uint64 = (+ 28u data_length%0#0)
        let as_bytes%0#0: bytes[8] = (itob 28u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%1#0: Encoded((uint64,len+utf8[])) = (concat encoded%0#0 offset_as_uint16%0#0)
        let encoded%2#0: Encoded((uint64,len+utf8[],uint64)) = (concat encoded%1#0 tmp%2#0)
        let tail%1#0: bytes = (concat tail%0#0 tmp%3#0)
        let data_length%1#0: uint64 = (len tmp%3#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%1#0)
        let as_bytes%1#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%3#0: Encoded((uint64,len+utf8[],uint64,len+uint16[])) = (concat encoded%2#0 offset_as_uint16%1#0)
        let encoded%4#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = (concat encoded%3#0 tmp%4#0)
        let encoded%5#0: bytes = (concat encoded%4#0 tail%1#0)
        let struct1#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = encoded%5#0
        let tmp%5#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%6#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tmp%7#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%8#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr2()
        let tmp%9#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let encoded%6#0: Encoded((uint64)) = (concat 0x tmp%5#0)
        let tail%2#0: bytes = (concat 0x tmp%6#0)
        let data_length%2#0: uint64 = (len tmp%6#0)
        let current_tail_offset%2#0: uint64 = (+ 28u data_length%2#0)
        let as_bytes%2#0: bytes[8] = (itob 28u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%7#0: Encoded((uint64,len+utf8[])) = (concat encoded%6#0 offset_as_uint16%2#0)
        let encoded%8#0: Encoded((uint64,len+utf8[],uint64)) = (concat encoded%7#0 tmp%7#0)
        let tail%3#0: bytes = (concat tail%2#0 tmp%8#0)
        let data_length%3#0: uint64 = (len tmp%8#0)
        let current_tail_offset%3#0: uint64 = (+ current_tail_offset%2#0 data_length%3#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%9#0: Encoded((uint64,len+utf8[],uint64,len+uint16[])) = (concat encoded%8#0 offset_as_uint16%3#0)
        let encoded%10#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = (concat encoded%9#0 tmp%9#0)
        let encoded%11#0: bytes = (concat encoded%10#0 tail%3#0)
        let struct2#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = encoded%11#0
        let copy%0#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = struct1#0
        let copy%1#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = struct1#0
        let as_bytes%4#0: bytes[8] = (itob 4u)
        let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%4#0)
        let result%0#0: bytes = (concat 0x next_item_head%0#0)
        let next_item_len%0#0: uint64 = (len copy%0#0)
        let tail_offset%0#0: uint64 = (+ 4u next_item_len%0#0)
        let as_bytes%5#0: bytes[8] = (itob tail_offset%0#0)
        let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%5#0)
        let result%1#0: bytes = (concat result%0#0 next_item_head%1#0)
        let next_item_len%1#0: uint64 = (len copy%1#0)
        let tail_offset%1#0: uint64 = (+ tail_offset%0#0 next_item_len%1#0)
        let result%2#0: bytes = (concat result%1#0 copy%0#0)
        let result%3#0: bytes = (concat result%2#0 copy%1#0)
        let array_data%0#0: bytes = (concat 0x0002 result%3#0)
        let array#0: Encoded(len+(uint64,len+utf8[],uint64,len+uint16[],uint64)[]) = array_data%0#0
        let copy%2#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = struct2#0
        let array_length%0#0: uint64 = array#0.length
        let lt%0#0: bool = (< 1u array_length%0#0)
        (assert lt%0#0) // index access is out of bounds
        let updated_array%0#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(array#0, copy%2#0, 1u)
        let array#1: Encoded(len+(uint64,len+utf8[],uint64,len+uint16[],uint64)[]) = updated_array%0#0
        (log array#1)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) array#1)
        let item_offset_offset%0#0: uint64 = (* 0u 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let array_length%1#0: uint64 = array#1.length
        let next_index%0#0: uint64 = (+ 0u 1u)
        let has_next%0#0: uint64 = (- array_length%1#0 next_index%0#0) // on error: index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* next_index%0#0 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let substring3%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        (log substring3%0#0)
        let array_head_and_tail%1#0: bytes = ((extract 2 0) array#1)
        let item_offset_offset%1#0: uint64 = (* 1u 2u)
        let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset_offset%1#0)
        let array_length%2#0: uint64 = array#1.length
        let next_index%1#0: uint64 = (+ 1u 1u)
        let has_next%1#0: uint64 = (- array_length%2#0 next_index%1#0) // on error: index access is out of bounds
        let end_of_array%1#0: uint64 = (len array_head_and_tail%1#0)
        let next_item_offset_offset%1#0: uint64 = (* next_index%1#0 2u)
        let next_item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 next_item_offset_offset%1#0)
        let end_offset%1#0: uint64 = (select end_of_array%1#0 next_item_offset%1#0 has_next%1#0)
        let substring3%1#0: bytes = (substring3 array_head_and_tail%1#0 item_offset%1#0 end_offset%1#0)
        (log substring3%1#0)
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#1)
        let array#2: Encoded(len+(uint64,len+utf8[],uint64,len+uint16[],uint64)[]) = data%0#0
        let tmp%10#0: bool = (== popped%0#0 struct2#0)
        (assert tmp%10#0)
        let (popped%1#0: bytes, data%1#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#2)
        let array#3: Encoded(len+(uint64,len+utf8[],uint64,len+uint16[],uint64)[]) = data%1#0
        let tmp%11#0: bool = (== popped%1#0 struct1#0)
        (assert tmp%11#0)
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement() -> void:
    block@0: // L106
        let tmp%0#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%1#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte1()
        let tmp%2#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte2()
        let result%0#0: bytes = (concat 0x tmp%1#0)
        let result%1#0: bytes = (concat result%0#0 tmp%2#0)
        let array_data%0#0: bytes = (concat 0x result%1#0)
        let encoded%0#0: Encoded((uint64)) = (concat 0x tmp%0#0)
        let encoded%1#0: Encoded((uint64,uint8[2])) = (concat encoded%0#0 array_data%0#0)
        let encoded%2#0: bytes = (concat encoded%1#0 0x)
        let one#0: Encoded((uint64,uint8[2])) = encoded%2#0
        let tmp%3#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%4#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tail%0#0: bytes = (concat 0x tmp%3#0)
        let data_length%0#0: uint64 = (len tmp%3#0)
        let current_tail_offset%0#0: uint64 = (+ 4u data_length%0#0)
        let as_bytes%0#0: bytes[8] = (itob 4u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%3#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%0#0)
        let tail%1#0: bytes = (concat tail%0#0 tmp%4#0)
        let data_length%1#0: uint64 = (len tmp%4#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%1#0)
        let as_bytes%1#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%4#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%3#0 offset_as_uint16%1#0)
        let encoded%5#0: bytes = (concat encoded%4#0 tail%1#0)
        let two#0: Encoded((len+utf8[],len+utf8[])) = encoded%5#0
        let tmp%5#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%6#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte2()
        let tmp%7#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte1()
        let result%2#0: bytes = (concat 0x tmp%6#0)
        let result%3#0: bytes = (concat result%2#0 tmp%7#0)
        let array_data%1#0: bytes = (concat 0x result%3#0)
        let encoded%6#0: Encoded((uint64)) = (concat 0x tmp%5#0)
        let encoded%7#0: Encoded((uint64,uint8[2])) = (concat encoded%6#0 array_data%1#0)
        let encoded%8#0: bytes = (concat encoded%7#0 0x)
        let three#0: Encoded((uint64,uint8[2])) = encoded%8#0
        let tmp%8#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%9#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%10#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%11#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
        let tmp%12#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let encoded%9#0: Encoded((uint64)) = (concat 0x tmp%8#0)
        let tail%2#0: bytes = (concat 0x tmp%9#0)
        let data_length%2#0: uint64 = (len tmp%9#0)
        let current_tail_offset%2#0: uint64 = (+ 28u data_length%2#0)
        let as_bytes%2#0: bytes[8] = (itob 28u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%10#0: Encoded((uint64,len+utf8[])) = (concat encoded%9#0 offset_as_uint16%2#0)
        let encoded%11#0: Encoded((uint64,len+utf8[],uint64)) = (concat encoded%10#0 tmp%10#0)
        let tail%3#0: bytes = (concat tail%2#0 tmp%11#0)
        let data_length%3#0: uint64 = (len tmp%11#0)
        let current_tail_offset%3#0: uint64 = (+ current_tail_offset%2#0 data_length%3#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%12#0: Encoded((uint64,len+utf8[],uint64,len+uint16[])) = (concat encoded%11#0 offset_as_uint16%3#0)
        let encoded%13#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = (concat encoded%12#0 tmp%12#0)
        let encoded%14#0: bytes = (concat encoded%13#0 tail%3#0)
        let four#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = encoded%14#0
        let tmp%13#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%14#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tail%4#0: bytes = (concat 0x tmp%13#0)
        let data_length%4#0: uint64 = (len tmp%13#0)
        let current_tail_offset%4#0: uint64 = (+ 4u data_length%4#0)
        let as_bytes%4#0: bytes[8] = (itob 4u)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded%15#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%4#0)
        let tail%5#0: bytes = (concat tail%4#0 tmp%14#0)
        let data_length%5#0: uint64 = (len tmp%14#0)
        let current_tail_offset%5#0: uint64 = (+ current_tail_offset%4#0 data_length%5#0)
        let as_bytes%5#0: bytes[8] = (itob current_tail_offset%4#0)
        let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded%16#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%15#0 offset_as_uint16%5#0)
        let encoded%17#0: bytes = (concat encoded%16#0 tail%5#0)
        let five#0: Encoded((len+utf8[],len+utf8[])) = encoded%17#0
        let copy%0#0: Encoded((uint64,uint8[2])) = one#0
        let copy%1#0: Encoded((len+utf8[],len+utf8[])) = two#0
        let copy%2#0: Encoded((uint64,uint8[2])) = three#0
        let copy%3#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = four#0
        let copy%4#0: Encoded((len+utf8[],len+utf8[])) = five#0
        let encoded%18#0: Encoded(((uint64,uint8[2]))) = (concat 0x copy%0#0)
        let tail%6#0: bytes = (concat 0x copy%1#0)
        let data_length%6#0: uint64 = (len copy%1#0)
        let current_tail_offset%6#0: uint64 = (+ 26u data_length%6#0)
        let as_bytes%6#0: bytes[8] = (itob 26u)
        let offset_as_uint16%6#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%19#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]))) = (concat encoded%18#0 offset_as_uint16%6#0)
        let encoded%20#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]))) = (concat encoded%19#0 copy%2#0)
        let tail%7#0: bytes = (concat tail%6#0 copy%3#0)
        let data_length%7#0: uint64 = (len copy%3#0)
        let current_tail_offset%7#0: uint64 = (+ current_tail_offset%6#0 data_length%7#0)
        let as_bytes%7#0: bytes[8] = (itob current_tail_offset%6#0)
        let offset_as_uint16%7#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded%21#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64))) = (concat encoded%20#0 offset_as_uint16%7#0)
        let tail%8#0: bytes = (concat tail%7#0 copy%4#0)
        let data_length%8#0: uint64 = (len copy%4#0)
        let current_tail_offset%8#0: uint64 = (+ current_tail_offset%7#0 data_length%8#0)
        let as_bytes%8#0: bytes[8] = (itob current_tail_offset%7#0)
        let offset_as_uint16%8#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded%22#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64),(len+utf8[],len+utf8[]))) = (concat encoded%21#0 offset_as_uint16%8#0)
        let encoded%23#0: bytes = (concat encoded%22#0 tail%8#0)
        let struct1#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64),(len+utf8[],len+utf8[]))) = encoded%23#0
        let copy%5#0: Encoded((uint64,uint8[2])) = one#0
        let tmp%15#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tmp%16#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tail%9#0: bytes = (concat 0x tmp%15#0)
        let data_length%9#0: uint64 = (len tmp%15#0)
        let current_tail_offset%9#0: uint64 = (+ 4u data_length%9#0)
        let as_bytes%9#0: bytes[8] = (itob 4u)
        let offset_as_uint16%9#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded%24#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%9#0)
        let tail%10#0: bytes = (concat tail%9#0 tmp%16#0)
        let data_length%10#0: uint64 = (len tmp%16#0)
        let current_tail_offset%10#0: uint64 = (+ current_tail_offset%9#0 data_length%10#0)
        let as_bytes%10#0: bytes[8] = (itob current_tail_offset%9#0)
        let offset_as_uint16%10#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded%25#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%24#0 offset_as_uint16%10#0)
        let encoded%26#0: bytes = (concat encoded%25#0 tail%10#0)
        let copy%6#0: Encoded((uint64,uint8[2])) = three#0
        let copy%7#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = four#0
        let copy%8#0: Encoded((len+utf8[],len+utf8[])) = five#0
        let encoded%27#0: Encoded(((uint64,uint8[2]))) = (concat 0x copy%5#0)
        let tail%11#0: bytes = (concat 0x encoded%26#0)
        let data_length%11#0: uint64 = (len encoded%26#0)
        let current_tail_offset%11#0: uint64 = (+ 26u data_length%11#0)
        let as_bytes%11#0: bytes[8] = (itob 26u)
        let offset_as_uint16%11#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded%28#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]))) = (concat encoded%27#0 offset_as_uint16%11#0)
        let encoded%29#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]))) = (concat encoded%28#0 copy%6#0)
        let tail%12#0: bytes = (concat tail%11#0 copy%7#0)
        let data_length%12#0: uint64 = (len copy%7#0)
        let current_tail_offset%12#0: uint64 = (+ current_tail_offset%11#0 data_length%12#0)
        let as_bytes%12#0: bytes[8] = (itob current_tail_offset%11#0)
        let offset_as_uint16%12#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded%30#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64))) = (concat encoded%29#0 offset_as_uint16%12#0)
        let tail%13#0: bytes = (concat tail%12#0 copy%8#0)
        let data_length%13#0: uint64 = (len copy%8#0)
        let current_tail_offset%13#0: uint64 = (+ current_tail_offset%12#0 data_length%13#0)
        let as_bytes%13#0: bytes[8] = (itob current_tail_offset%12#0)
        let offset_as_uint16%13#0: bytes = ((extract 6 2) as_bytes%13#0)
        let encoded%31#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64),(len+utf8[],len+utf8[]))) = (concat encoded%30#0 offset_as_uint16%13#0)
        let encoded%32#0: bytes = (concat encoded%31#0 tail%13#0)
        let struct2#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64),(len+utf8[],len+utf8[]))) = encoded%32#0
        let copy%9#0: Encoded((len+utf8[],len+utf8[])) = two#0
        let item_offset%0#0: uint64 = (extract_uint16 struct2#0 10u)
        let data_up_to_item%0#0: bytes = (extract3 struct2#0 0u item_offset%0#0)
        let next_item_offset%0#0: uint64 = (extract_uint16 struct2#0 22u)
        let total_data_length%0#0: uint64 = (len struct2#0)
        let data_beyond_item%0#0: bytes = (substring3 struct2#0 next_item_offset%0#0 total_data_length%0#0)
        let updated_data%0#0: bytes = (concat data_up_to_item%0#0 copy%9#0)
        let updated_data%1#0: bytes = (concat updated_data%0#0 data_beyond_item%0#0)
        let item_length%0#0: uint64 = (- next_item_offset%0#0 item_offset%0#0)
        let new_value_length%0#0: uint64 = (len copy%9#0)
        let tail_offset%0#0: uint64 = (extract_uint16 updated_data%1#0 22u)
        let tail_offset%1#0: uint64 = (+ tail_offset%0#0 new_value_length%0#0)
        let tail_offset%2#0: uint64 = (- tail_offset%1#0 item_length%0#0)
        let as_bytes%14#0: bytes[8] = (itob tail_offset%2#0)
        let tail_offset_bytes%0#0: bytes = ((extract 6 2) as_bytes%14#0)
        let updated_data%2#0: bytes = (replace3 updated_data%1#0 22u tail_offset_bytes%0#0)
        let tail_offset%3#0: uint64 = (extract_uint16 updated_data%2#0 24u)
        let tail_offset%4#0: uint64 = (+ tail_offset%3#0 new_value_length%0#0)
        let tail_offset%5#0: uint64 = (- tail_offset%4#0 item_length%0#0)
        let as_bytes%15#0: bytes[8] = (itob tail_offset%5#0)
        let tail_offset_bytes%1#0: bytes = ((extract 6 2) as_bytes%15#0)
        let updated_data%3#0: bytes = (replace3 updated_data%2#0 24u tail_offset_bytes%1#0)
        let struct2#1: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64),(len+utf8[],len+utf8[]))) = updated_data%3#0
        let tmp%17#0: bool = (== struct1#0 struct2#1)
        (assert tmp%17#0) // struct1 does not match struct2
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification() -> void:
    block@0: // L133
        let tmp%0#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%1#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte1()
        let tmp%2#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte2()
        let result%0#0: bytes = (concat 0x tmp%1#0)
        let result%1#0: bytes = (concat result%0#0 tmp%2#0)
        let array_data%0#0: bytes = (concat 0x result%1#0)
        let encoded%0#0: Encoded((uint64)) = (concat 0x tmp%0#0)
        let encoded%1#0: Encoded((uint64,uint8[2])) = (concat encoded%0#0 array_data%0#0)
        let encoded%2#0: bytes = (concat encoded%1#0 0x)
        let one#0: Encoded((uint64,uint8[2])) = encoded%2#0
        let tmp%3#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%4#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tail%0#0: bytes = (concat 0x tmp%3#0)
        let data_length%0#0: uint64 = (len tmp%3#0)
        let current_tail_offset%0#0: uint64 = (+ 4u data_length%0#0)
        let as_bytes%0#0: bytes[8] = (itob 4u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%3#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%0#0)
        let tail%1#0: bytes = (concat tail%0#0 tmp%4#0)
        let data_length%1#0: uint64 = (len tmp%4#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%1#0)
        let as_bytes%1#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%4#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%3#0 offset_as_uint16%1#0)
        let encoded%5#0: bytes = (concat encoded%4#0 tail%1#0)
        let two#0: Encoded((len+utf8[],len+utf8[])) = encoded%5#0
        let tmp%5#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%6#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte2()
        let tmp%7#0: Encoded(uint8) = test_cases.arc4_dynamic_arrays.contract.get_byte1()
        let result%2#0: bytes = (concat 0x tmp%6#0)
        let result%3#0: bytes = (concat result%2#0 tmp%7#0)
        let array_data%1#0: bytes = (concat 0x result%3#0)
        let encoded%6#0: Encoded((uint64)) = (concat 0x tmp%5#0)
        let encoded%7#0: Encoded((uint64,uint8[2])) = (concat encoded%6#0 array_data%1#0)
        let encoded%8#0: bytes = (concat encoded%7#0 0x)
        let three#0: Encoded((uint64,uint8[2])) = encoded%8#0
        let tmp%8#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%9#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%10#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%11#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
        let tmp%12#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let encoded%9#0: Encoded((uint64)) = (concat 0x tmp%8#0)
        let tail%2#0: bytes = (concat 0x tmp%9#0)
        let data_length%2#0: uint64 = (len tmp%9#0)
        let current_tail_offset%2#0: uint64 = (+ 28u data_length%2#0)
        let as_bytes%2#0: bytes[8] = (itob 28u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%10#0: Encoded((uint64,len+utf8[])) = (concat encoded%9#0 offset_as_uint16%2#0)
        let encoded%11#0: Encoded((uint64,len+utf8[],uint64)) = (concat encoded%10#0 tmp%10#0)
        let tail%3#0: bytes = (concat tail%2#0 tmp%11#0)
        let data_length%3#0: uint64 = (len tmp%11#0)
        let current_tail_offset%3#0: uint64 = (+ current_tail_offset%2#0 data_length%3#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%12#0: Encoded((uint64,len+utf8[],uint64,len+uint16[])) = (concat encoded%11#0 offset_as_uint16%3#0)
        let encoded%13#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = (concat encoded%12#0 tmp%12#0)
        let encoded%14#0: bytes = (concat encoded%13#0 tail%3#0)
        let four1#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = encoded%14#0
        let tmp%13#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let tmp%14#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%15#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint2()
        let tmp%16#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) tmp%16#0)
        let encoded%15#0: Encoded((uint16)) = (concat 0x 0x007b)
        let encoded%16#0: bytes = (concat encoded%15#0 0x)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%16#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 2u)
        let as_bytes%4#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%4#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let tmp%17#0: Encoded(uint64) = test_cases.arc4_dynamic_arrays.contract.get_uint1()
        let encoded%17#0: Encoded((uint64)) = (concat 0x tmp%13#0)
        let tail%4#0: bytes = (concat 0x tmp%14#0)
        let data_length%4#0: uint64 = (len tmp%14#0)
        let current_tail_offset%4#0: uint64 = (+ 28u data_length%4#0)
        let as_bytes%5#0: bytes[8] = (itob 28u)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded%18#0: Encoded((uint64,len+utf8[])) = (concat encoded%17#0 offset_as_uint16%4#0)
        let encoded%19#0: Encoded((uint64,len+utf8[],uint64)) = (concat encoded%18#0 tmp%15#0)
        let tail%5#0: bytes = (concat tail%4#0 concat_result%0#0)
        let data_length%5#0: uint64 = (len concat_result%0#0)
        let current_tail_offset%5#0: uint64 = (+ current_tail_offset%4#0 data_length%5#0)
        let as_bytes%6#0: bytes[8] = (itob current_tail_offset%4#0)
        let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%20#0: Encoded((uint64,len+utf8[],uint64,len+uint16[])) = (concat encoded%19#0 offset_as_uint16%5#0)
        let encoded%21#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = (concat encoded%20#0 tmp%17#0)
        let encoded%22#0: bytes = (concat encoded%21#0 tail%5#0)
        let four2#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = encoded%22#0
        let tmp%18#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%19#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tail%6#0: bytes = (concat 0x tmp%18#0)
        let data_length%6#0: uint64 = (len tmp%18#0)
        let current_tail_offset%6#0: uint64 = (+ 4u data_length%6#0)
        let as_bytes%7#0: bytes[8] = (itob 4u)
        let offset_as_uint16%6#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded%23#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%6#0)
        let tail%7#0: bytes = (concat tail%6#0 tmp%19#0)
        let data_length%7#0: uint64 = (len tmp%19#0)
        let current_tail_offset%7#0: uint64 = (+ current_tail_offset%6#0 data_length%7#0)
        let as_bytes%8#0: bytes[8] = (itob current_tail_offset%6#0)
        let offset_as_uint16%7#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded%24#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%23#0 offset_as_uint16%7#0)
        let encoded%25#0: bytes = (concat encoded%24#0 tail%7#0)
        let five#0: Encoded((len+utf8[],len+utf8[])) = encoded%25#0
        let copy%0#0: Encoded((uint64,uint8[2])) = one#0
        let copy%1#0: Encoded((len+utf8[],len+utf8[])) = two#0
        let copy%2#0: Encoded((uint64,uint8[2])) = three#0
        let copy%3#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = four1#0
        let copy%4#0: Encoded((len+utf8[],len+utf8[])) = five#0
        let encoded%26#0: Encoded(((uint64,uint8[2]))) = (concat 0x copy%0#0)
        let tail%8#0: bytes = (concat 0x copy%1#0)
        let data_length%8#0: uint64 = (len copy%1#0)
        let current_tail_offset%8#0: uint64 = (+ 26u data_length%8#0)
        let as_bytes%9#0: bytes[8] = (itob 26u)
        let offset_as_uint16%8#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded%27#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]))) = (concat encoded%26#0 offset_as_uint16%8#0)
        let encoded%28#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]))) = (concat encoded%27#0 copy%2#0)
        let tail%9#0: bytes = (concat tail%8#0 copy%3#0)
        let data_length%9#0: uint64 = (len copy%3#0)
        let current_tail_offset%9#0: uint64 = (+ current_tail_offset%8#0 data_length%9#0)
        let as_bytes%10#0: bytes[8] = (itob current_tail_offset%8#0)
        let offset_as_uint16%9#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded%29#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64))) = (concat encoded%28#0 offset_as_uint16%9#0)
        let tail%10#0: bytes = (concat tail%9#0 copy%4#0)
        let data_length%10#0: uint64 = (len copy%4#0)
        let current_tail_offset%10#0: uint64 = (+ current_tail_offset%9#0 data_length%10#0)
        let as_bytes%11#0: bytes[8] = (itob current_tail_offset%9#0)
        let offset_as_uint16%10#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded%30#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64),(len+utf8[],len+utf8[]))) = (concat encoded%29#0 offset_as_uint16%10#0)
        let encoded%31#0: bytes = (concat encoded%30#0 tail%10#0)
        let tup1#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64),(len+utf8[],len+utf8[]))) = encoded%31#0
        let copy%5#0: Encoded((uint64,uint8[2])) = one#0
        let copy%6#0: Encoded((len+utf8[],len+utf8[])) = two#0
        let copy%7#0: Encoded((uint64,uint8[2])) = three#0
        let copy%8#0: Encoded((uint64,len+utf8[],uint64,len+uint16[],uint64)) = four2#0
        let copy%9#0: Encoded((len+utf8[],len+utf8[])) = five#0
        let encoded%32#0: Encoded(((uint64,uint8[2]))) = (concat 0x copy%5#0)
        let tail%11#0: bytes = (concat 0x copy%6#0)
        let data_length%11#0: uint64 = (len copy%6#0)
        let current_tail_offset%11#0: uint64 = (+ 26u data_length%11#0)
        let as_bytes%12#0: bytes[8] = (itob 26u)
        let offset_as_uint16%11#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded%33#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]))) = (concat encoded%32#0 offset_as_uint16%11#0)
        let encoded%34#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]))) = (concat encoded%33#0 copy%7#0)
        let tail%12#0: bytes = (concat tail%11#0 copy%8#0)
        let data_length%12#0: uint64 = (len copy%8#0)
        let current_tail_offset%12#0: uint64 = (+ current_tail_offset%11#0 data_length%12#0)
        let as_bytes%13#0: bytes[8] = (itob current_tail_offset%11#0)
        let offset_as_uint16%12#0: bytes = ((extract 6 2) as_bytes%13#0)
        let encoded%35#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64))) = (concat encoded%34#0 offset_as_uint16%12#0)
        let tail%13#0: bytes = (concat tail%12#0 copy%9#0)
        let data_length%13#0: uint64 = (len copy%9#0)
        let current_tail_offset%13#0: uint64 = (+ current_tail_offset%12#0 data_length%13#0)
        let as_bytes%14#0: bytes[8] = (itob current_tail_offset%12#0)
        let offset_as_uint16%13#0: bytes = ((extract 6 2) as_bytes%14#0)
        let encoded%36#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64),(len+utf8[],len+utf8[]))) = (concat encoded%35#0 offset_as_uint16%13#0)
        let encoded%37#0: bytes = (concat encoded%36#0 tail%13#0)
        let tup2#0: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64),(len+utf8[],len+utf8[]))) = encoded%37#0
        let item_start_offset%0#0: uint64 = (extract_uint16 tup2#0 22u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tup2#0 24u)
        let tmp%20#0: bytes = (substring3 tup2#0 item_start_offset%0#0 item_end_offset%0#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 tmp%20#0 18u)
        let item_end_offset%1#0: uint64 = (len tmp%20#0)
        let tmp%21#0: bytes = (substring3 tmp%20#0 item_start_offset%1#0 item_end_offset%1#0)
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(tmp%21#0, 2u)
        let item_offset%0#0: uint64 = (extract_uint16 tmp%20#0 18u)
        let data_up_to_item%0#0: bytes = (extract3 tmp%20#0 0u item_offset%0#0)
        let updated_data%0#0: bytes = (concat data_up_to_item%0#0 data%0#0)
        let item_offset%1#0: uint64 = (extract_uint16 tup2#0 22u)
        let data_up_to_item%1#0: bytes = (extract3 tup2#0 0u item_offset%1#0)
        let next_item_offset%0#0: uint64 = (extract_uint16 tup2#0 24u)
        let total_data_length%0#0: uint64 = (len tup2#0)
        let data_beyond_item%0#0: bytes = (substring3 tup2#0 next_item_offset%0#0 total_data_length%0#0)
        let updated_data%1#0: bytes = (concat data_up_to_item%1#0 updated_data%0#0)
        let updated_data%2#0: bytes = (concat updated_data%1#0 data_beyond_item%0#0)
        let item_length%0#0: uint64 = (- next_item_offset%0#0 item_offset%1#0)
        let new_value_length%0#0: uint64 = (len updated_data%0#0)
        let tail_offset%0#0: uint64 = (extract_uint16 updated_data%2#0 24u)
        let tail_offset%1#0: uint64 = (+ tail_offset%0#0 new_value_length%0#0)
        let tail_offset%2#0: uint64 = (- tail_offset%1#0 item_length%0#0)
        let as_bytes%15#0: bytes[8] = (itob tail_offset%2#0)
        let tail_offset_bytes%0#0: bytes = ((extract 6 2) as_bytes%15#0)
        let updated_data%3#0: bytes = (replace3 updated_data%2#0 24u tail_offset_bytes%0#0)
        let tup2#1: Encoded(((uint64,uint8[2]),(len+utf8[],len+utf8[]),(uint64,uint8[2]),(uint64,len+utf8[],uint64,len+uint16[],uint64),(len+utf8[],len+utf8[]))) = updated_data%3#0
        let tmp%22#0: bool = (== tup1#0 tup2#1)
        (assert tmp%22#0) // tup1 does not match tup2
        return 

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__algopy_default_create() -> void:
    block@0: // L1
        return 