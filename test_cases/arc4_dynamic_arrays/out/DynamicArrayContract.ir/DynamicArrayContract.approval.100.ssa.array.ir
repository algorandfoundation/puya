main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@14
    block@2: // abi_routing_L38
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_static_elements()void" => block@4, method "test_dynamic_elements()void" => block@5, method "test_mixed_single_dynamic_elements()void" => block@6, method "test_mixed_multiple_dynamic_elements()void" => block@7, method "test_nested_struct_replacement()void" => block@8, method "test_nested_tuple_modification()void" => block@9, * => block@13}
    block@4: // test_static_elements_route_L39
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements[routing]()
        goto block@13
    block@5: // test_dynamic_elements_route_L55
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements[routing]()
        goto block@13
    block@6: // test_mixed_single_dynamic_elements_route_L74
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements[routing]()
        goto block@13
    block@7: // test_mixed_multiple_dynamic_elements_route_L97
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements[routing]()
        goto block@13
    block@8: // test_nested_struct_replacement_route_L114
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement[routing]()
        goto block@13
    block@9: // test_nested_tuple_modification_route_L141
        test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification[routing]()
        goto block@13
    block@13: // after_if_else_L38
        fail
    block@14: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let tmp%5#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> <bytes, bytes>:
    block@0: // L92
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%5#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%5#0)
        let new_head#0: bytes = 0x
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L110
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 popped_header_offset#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L111
        let item_offset#0: uint64 = (extract_uint16 head_and_tail#0 head_offset#1)
        let item_offset#1: uint64 = (- item_offset#0 2u)
        let tmp%10#0: bytes = (itob item_offset#1)
        let tmp%11#0: bytes = ((extract 6 2) tmp%10#0)
        let new_head#2: bytes = (concat new_head#1 tmp%11#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L110
        let tmp%13#0: bytes = (itob length_minus_1#0)
        let tmp%14#0: bytes = ((extract 6 2) tmp%13#0)
        let tmp%15#0: bytes = (concat tmp%14#0 new_head#1)
        let tmp%16#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%17#0: bytes = (substring3 head_and_tail#0 tmp%16#0 popped_offset#0)
        let updated#0: bytes = (concat tmp%15#0 tmp%17#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
        let tmp%1#0: uint64 = (* array_items_count#0 2u)
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#1)
        let tmp%3#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%4#0: bytes = (itob tmp%3#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let new_head#2: bytes = (concat new_head#1 tmp%5#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L203
        let item_offset_adjustment#2: uint64 = (len array_head_and_tail#0)
        let head_offset#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@6)
        let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@6)
        let continue_looping%1#0: bool = (< head_offset#4 item_offset_adjustment#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let item_offset#1: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#4)
        let tmp%10#0: uint64 = (+ item_offset_adjustment#2 item_offset#1)
        let tmp%11#0: bytes = (itob tmp%10#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let new_head#4: bytes = (concat new_head#3 tmp%12#0)
        let head_offset#5: uint64 = (+ head_offset#4 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%14#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%15#0: bytes = (itob tmp%14#0)
        let tmp%16#0: bytes = ((extract 6 2) tmp%15#0)
        let tmp%17#0: bytes = (concat tmp%16#0 new_head#3)
        let tmp%20#0: bytes = (substring3 array_head_and_tail#0 tmp%1#0 item_offset_adjustment#2)
        let tmp%21#0: bytes = (concat tmp%17#0 tmp%20#0)
        let tmp%23#0: uint64 = (len new_head_and_tail#0)
        let tmp%24#0: bytes = (substring3 new_head_and_tail#0 item_offset_adjustment#0 tmp%23#0)
        let tmp%25#0: bytes = (concat tmp%21#0 tmp%24#0)
        return tmp%25#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@4: // after_for_L331
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine test_cases.arc4_dynamic_arrays.contract.get_string1() -> Encoded(len+utf8[]):
    block@0: // L180
        let aggregate%length%0#0: uint64 = (len "a")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "a")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        return tmp%0#0

subroutine test_cases.arc4_dynamic_arrays.contract.get_string2() -> Encoded(len+utf8[]):
    block@0: // L185
        let aggregate%length%0#0: uint64 = (len "bee")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "bee")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        return tmp%0#0

subroutine test_cases.arc4_dynamic_arrays.contract.get_u16_arr1() -> Encoded(len+uint16[]):
    block@0: // L225
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0xffff)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x0000)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x002a)
        let aggregate%as_Encoded(len+uint16[])%0#0: Encoded(len+uint16[]) = aggregate%head%2#0
        let encoded_array%0#0: Encoded(len+uint16[]) = aggregate%as_Encoded(len+uint16[])%0#0
        return encoded_array%0#0

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements[routing]() -> void:
    block@0: // L39
        let aggregate%head%0#0: bytes = (concat 0x 0x04)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x05)
        let aggregate%as_Encoded(uint8[2])%0#0: Encoded(uint8[2]) = aggregate%head%1#0
        let byte_array1#0: Encoded(uint8[2]) = aggregate%as_Encoded(uint8[2])%0#0
        let aggregate%head%2#0: bytes = (concat 0x 0x2a)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 0xff)
        let aggregate%as_Encoded(uint8[2])%1#0: Encoded(uint8[2]) = aggregate%head%3#0
        let byte_array2#0: Encoded(uint8[2]) = aggregate%as_Encoded(uint8[2])%1#0
        let aggregate%head%4#0: bytes = (concat 0x 0x0000000000000003)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 byte_array1#0)
        let aggregate%as_Encoded(uint64,uint8[2])%0#0: Encoded(uint64,uint8[2]) = aggregate%head%5#0
        let struct1#0: Encoded(uint64,uint8[2]) = aggregate%as_Encoded(uint64,uint8[2])%0#0
        let aggregate%head%6#0: bytes = (concat 0x 0x0000040000000000)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 byte_array2#0)
        let aggregate%as_Encoded(uint64,uint8[2])%1#0: Encoded(uint64,uint8[2]) = aggregate%head%7#0
        let struct2#0: Encoded(uint64,uint8[2]) = aggregate%as_Encoded(uint64,uint8[2])%1#0
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%8#0: bytes = (concat aggregate%len_u16%0#0 struct1#0)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 struct1#0)
        let aggregate%as_Encoded(len+(uint64,uint8[2])[])%0#0: Encoded(len+(uint64,uint8[2])[]) = aggregate%head%9#0
        let array#0: Encoded(len+(uint64,uint8[2])[]) = aggregate%as_Encoded(len+(uint64,uint8[2])[])%0#0
        let aggregate%total_length%0#0: uint64 = (len array#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 array#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 1u 10u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 10u) // on error: index access is out of bounds
        let aggregate%write_offset%0#0: uint64 = (* 1u 10u)
        let aggregate%write_offset_with_length_header%0#0: uint64 = (+ aggregate%write_offset%0#0 2u)
        let aggregate%updated_array%0#0: bytes = (replace3 array#0 aggregate%write_offset_with_length_header%0#0 struct2#0) // on error: index access is out of bounds
        let array#1: Encoded(len+(uint64,uint8[2])[]) = aggregate%updated_array%0#0
        (log array#1)
        let aggregate%total_length%1#0: uint64 = (len array#1)
        let aggregate%array_trimmed%1#0: bytes = (substring3 array#1 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 0u 10u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 10u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint8[2]) = aggregate%encoded_element%1#0
        (log array_item%0#0)
        let aggregate%total_length%2#0: uint64 = (len array#1)
        let aggregate%array_trimmed%2#0: bytes = (substring3 array#1 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 1u 10u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 10u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64,uint8[2]) = aggregate%encoded_element%2#0
        (log array_item%1#0)
        let (tmp%8#0: bytes, array#2: Encoded(len+(uint64,uint8[2])[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(array#1, 10u)
        let tmp%10#0: bool = (== tmp%8#0 struct2#0)
        (assert tmp%10#0)
        let (tmp%11#0: bytes, array#3: Encoded(len+(uint64,uint8[2])[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(array#2, 10u)
        let tmp%13#0: bool = (== tmp%11#0 struct1#0)
        (assert tmp%13#0)
        exit 1u

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements[routing]() -> void:
    block@0: // L55
        let tmp%0#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%1#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let aggregate%as_bytes%0#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len tmp%1#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 tmp%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%1#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%1#0
        let struct1#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0
        let aggregate%length%0#0: uint64 = (len "Hello World")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "Hello World")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#1: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%4#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let aggregate%as_bytes%3#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%2#0: bytes = (concat 0x aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len tmp%0#1)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 4u aggregate%data_length%2#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len tmp%4#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ aggregate%current_tail_offset%2#0 aggregate%data_length%3#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%3#0 tmp%0#1)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 tmp%4#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%3#0
        let struct2#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%4#0: bytes = (concat aggregate%len_u16%0#0 aggregate%offset_as_uint16%4#0)
        let aggregate%data_length%4#0: uint64 = (len struct1#0)
        let aggregate%current_tail_offset%4#0: uint64 = (+ 4u aggregate%data_length%4#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%4#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%5#0)
        let aggregate%data_length%5#0: uint64 = (len struct1#0)
        let aggregate%current_tail_offset%5#0: uint64 = (+ aggregate%current_tail_offset%4#0 aggregate%data_length%5#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%head%5#0 struct1#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%concat%4#0 struct1#0)
        let aggregate%as_Encoded(len+((len+utf8[]),(len+utf8[]))[])%0#0: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = aggregate%concat%5#0
        let array#0: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = aggregate%as_Encoded(len+((len+utf8[]),(len+utf8[]))[])%0#0
        let extract_uint16%0#0: uint64 = (extract_uint16 array#0 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) array#0)
        let aggregate%as_bytes%8#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%head%6#0: bytes = (concat 0x aggregate%offset_as_uint16%6#0)
        let aggregate%data_length%6#0: uint64 = (len struct1#0)
        let aggregate%current_tail_offset%6#0: uint64 = (+ 2u aggregate%data_length%6#0)
        let aggregate%concat%6#0: bytes = (concat aggregate%head%6#0 struct1#0)
        let aggregate%as_Encoded(((len+utf8[]),(len+utf8[]))[])%0#0: Encoded(((len+utf8[]),(len+utf8[]))[]) = aggregate%concat%6#0
        let tmp%6#0: Encoded(((len+utf8[]),(len+utf8[]))[]) = aggregate%as_Encoded(((len+utf8[]),(len+utf8[]))[])%0#0
        let array#1: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, tmp%6#0)
        let aggregate%total_length%0#0: uint64 = (len array#1)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 array#1 2u aggregate%total_length%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 array#1 0u)
        let aggregate%item_offset_offset%0#0: uint64 = (* 1u 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%next_index%0#0: uint64 = (+ 1u 1u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%0#0 aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len aggregate%array_head_and_tail%0#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%end_offset%0#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 array#1 0u)
        let aggregate%lt%0#0: bool = (< 1u aggregate%array_length%1#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%updated_array%0#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(array#1, struct2#0, 1u)
        let array#2: Encoded(len+((len+utf8[]),(len+utf8[]))[]) = aggregate%updated_array%0#0
        (log array#2)
        let aggregate%total_length%1#0: uint64 = (len array#2)
        let aggregate%array_head_and_tail%1#0: bytes = (substring3 array#2 2u aggregate%total_length%1#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 array#2 0u)
        let aggregate%item_offset_offset%1#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset_offset%1#0)
        let aggregate%next_index%1#0: uint64 = (+ 0u 1u)
        let aggregate%has_next%1#0: uint64 = (- aggregate%array_length%2#0 aggregate%next_index%1#0) // on error: index access is out of bounds
        let aggregate%end_of_array%1#0: uint64 = (len aggregate%array_head_and_tail%1#0)
        let aggregate%next_item_offset_offset%1#0: uint64 = (* aggregate%next_index%1#0 2u)
        let aggregate%next_item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%next_item_offset_offset%1#0)
        let aggregate%end_offset%1#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%1#0 aggregate%has_next%1#0)
        let aggregate%substring3%1#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%end_offset%1#0)
        let array_item%0#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%substring3%1#0
        (log array_item%0#0)
        let aggregate%total_length%2#0: uint64 = (len array#2)
        let aggregate%array_head_and_tail%2#0: bytes = (substring3 array#2 2u aggregate%total_length%2#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 array#2 0u)
        let aggregate%item_offset_offset%2#0: uint64 = (* 1u 2u)
        let aggregate%item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%item_offset_offset%2#0)
        let aggregate%next_index%2#0: uint64 = (+ 1u 1u)
        let aggregate%has_next%2#0: uint64 = (- aggregate%array_length%3#0 aggregate%next_index%2#0) // on error: index access is out of bounds
        let aggregate%end_of_array%2#0: uint64 = (len aggregate%array_head_and_tail%2#0)
        let aggregate%next_item_offset_offset%2#0: uint64 = (* aggregate%next_index%2#0 2u)
        let aggregate%next_item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%next_item_offset_offset%2#0)
        let aggregate%end_offset%2#0: uint64 = (select aggregate%end_of_array%2#0 aggregate%next_item_offset%2#0 aggregate%has_next%2#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0 aggregate%end_offset%2#0)
        let array_item%1#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%substring3%2#0
        (log array_item%1#0)
        let aggregate%total_length%3#0: uint64 = (len array#2)
        let aggregate%array_head_and_tail%3#0: bytes = (substring3 array#2 2u aggregate%total_length%3#0)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 array#2 0u)
        let aggregate%item_offset_offset%3#0: uint64 = (* 2u 2u)
        let aggregate%item_offset%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%item_offset_offset%3#0)
        let aggregate%next_index%3#0: uint64 = (+ 2u 1u)
        let aggregate%has_next%3#0: uint64 = (- aggregate%array_length%4#0 aggregate%next_index%3#0) // on error: index access is out of bounds
        let aggregate%end_of_array%3#0: uint64 = (len aggregate%array_head_and_tail%3#0)
        let aggregate%next_item_offset_offset%3#0: uint64 = (* aggregate%next_index%3#0 2u)
        let aggregate%next_item_offset%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%next_item_offset_offset%3#0)
        let aggregate%end_offset%3#0: uint64 = (select aggregate%end_of_array%3#0 aggregate%next_item_offset%3#0 aggregate%has_next%3#0)
        let aggregate%substring3%3#0: bytes = (substring3 aggregate%array_head_and_tail%3#0 aggregate%item_offset%3#0 aggregate%end_offset%3#0)
        let array_item%2#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%substring3%3#0
        (log array_item%2#0)
        let (tmp%7#0: bytes, array#3: Encoded(len+((len+utf8[]),(len+utf8[]))[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#2)
        let tmp%9#0: bool = (== tmp%7#0 struct1#0)
        (assert tmp%9#0)
        (log array#3)
        let (tmp%10#0: bytes, array#4: Encoded(len+((len+utf8[]),(len+utf8[]))[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#3)
        let tmp%12#0: bool = (== tmp%10#0 struct2#0)
        (assert tmp%12#0)
        (log array#4)
        let (tmp%13#0: bytes, array#5: Encoded(len+((len+utf8[]),(len+utf8[]))[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#4)
        let tmp%15#0: bool = (== tmp%13#0 struct1#0)
        (assert tmp%15#0)
        (log array#5)
        exit 1u

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements[routing]() -> void:
    block@0: // L74
        let tmp%1#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let aggregate%head%0#0: bytes = (concat 0x 0x0000000000000003)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 18u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%1#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 18u aggregate%data_length%0#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x0000040000000000)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%2#0 tmp%1#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]),uint64)%0#0: Encoded(uint64,(len+utf8[]),uint64) = aggregate%concat%0#0
        let struct1#0: Encoded(uint64,(len+utf8[]),uint64) = aggregate%as_Encoded(uint64,(len+utf8[]),uint64)%0#0
        let tmp%5#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let aggregate%head%3#0: bytes = (concat 0x 0x0000040000000000)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 18u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len tmp%5#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ 18u aggregate%data_length%1#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 0x0000000000000003)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%5#0 tmp%5#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]),uint64)%1#0: Encoded(uint64,(len+utf8[]),uint64) = aggregate%concat%1#0
        let struct2#0: Encoded(uint64,(len+utf8[]),uint64) = aggregate%as_Encoded(uint64,(len+utf8[]),uint64)%1#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%as_Encoded(len+(uint64,(len+utf8[]),uint64)[])%0#0: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = aggregate%len_u16%0#0
        let array#0: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = aggregate%as_Encoded(len+(uint64,(len+utf8[]),uint64)[])%0#0
        let extract_uint16%0#0: uint64 = (extract_uint16 array#0 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) array#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%6#0: bytes = (concat 0x aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len struct2#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 2u aggregate%data_length%2#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%6#0 struct2#0)
        let aggregate%as_Encoded((uint64,(len+utf8[]),uint64)[])%0#0: Encoded((uint64,(len+utf8[]),uint64)[]) = aggregate%concat%2#0
        let tmp%8#0: Encoded((uint64,(len+utf8[]),uint64)[]) = aggregate%as_Encoded((uint64,(len+utf8[]),uint64)[])%0#0
        let array#1: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, tmp%8#0)
        let extract_uint16%1#0: uint64 = (extract_uint16 array#1 0u)
        let extract_to_end%1#0: bytes = ((extract 2 0) array#1)
        let array#2: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%1#0, extract_to_end%1#0, 1u, tmp%8#0)
        let aggregate%total_length%0#0: uint64 = (len array#2)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 array#2 2u aggregate%total_length%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 array#2 0u)
        let aggregate%item_offset_offset%0#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%next_index%0#0: uint64 = (+ 0u 1u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%0#0 aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len aggregate%array_head_and_tail%0#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%end_offset%0#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 array#2 0u)
        let aggregate%lt%0#0: bool = (< 0u aggregate%array_length%1#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%updated_array%0#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(array#2, struct1#0, 0u)
        let array#3: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = aggregate%updated_array%0#0
        (log array#3)
        let aggregate%total_length%1#0: uint64 = (len array#3)
        let aggregate%array_head_and_tail%1#0: bytes = (substring3 array#3 2u aggregate%total_length%1#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 array#3 0u)
        let aggregate%item_offset_offset%1#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset_offset%1#0)
        let aggregate%next_index%1#0: uint64 = (+ 0u 1u)
        let aggregate%has_next%1#0: uint64 = (- aggregate%array_length%2#0 aggregate%next_index%1#0) // on error: index access is out of bounds
        let aggregate%end_of_array%1#0: uint64 = (len aggregate%array_head_and_tail%1#0)
        let aggregate%next_item_offset_offset%1#0: uint64 = (* aggregate%next_index%1#0 2u)
        let aggregate%next_item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%next_item_offset_offset%1#0)
        let aggregate%end_offset%1#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%1#0 aggregate%has_next%1#0)
        let aggregate%substring3%1#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%end_offset%1#0)
        let array_item%0#0: Encoded(uint64,(len+utf8[]),uint64) = aggregate%substring3%1#0
        (log array_item%0#0)
        let aggregate%total_length%2#0: uint64 = (len array#3)
        let aggregate%array_head_and_tail%2#0: bytes = (substring3 array#3 2u aggregate%total_length%2#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 array#3 0u)
        let aggregate%item_offset_offset%2#0: uint64 = (* 1u 2u)
        let aggregate%item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%item_offset_offset%2#0)
        let aggregate%next_index%2#0: uint64 = (+ 1u 1u)
        let aggregate%has_next%2#0: uint64 = (- aggregate%array_length%3#0 aggregate%next_index%2#0) // on error: index access is out of bounds
        let aggregate%end_of_array%2#0: uint64 = (len aggregate%array_head_and_tail%2#0)
        let aggregate%next_item_offset_offset%2#0: uint64 = (* aggregate%next_index%2#0 2u)
        let aggregate%next_item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%next_item_offset_offset%2#0)
        let aggregate%end_offset%2#0: uint64 = (select aggregate%end_of_array%2#0 aggregate%next_item_offset%2#0 aggregate%has_next%2#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0 aggregate%end_offset%2#0)
        let array_item%1#0: Encoded(uint64,(len+utf8[]),uint64) = aggregate%substring3%2#0
        (log array_item%1#0)
        let (tmp%10#0: bytes, array#4: Encoded(len+(uint64,(len+utf8[]),uint64)[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#3)
        let tmp%12#0: bool = (== tmp%10#0 struct2#0)
        (assert tmp%12#0)
        let (tmp%13#0: bytes, array#5: Encoded(len+(uint64,(len+utf8[]),uint64)[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#4)
        let tmp%15#0: bool = (== tmp%13#0 struct1#0)
        (assert tmp%15#0)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 array#3 0u)
        let tmp%16#0: uint64 = aggregate%array_length%4#0
        let tmp%17#0: bool = (== tmp%16#0 2u)
        (assert tmp%17#0)
        let extract_uint16%2#0: uint64 = (extract_uint16 array#3 0u)
        let extract_to_end%2#0: bytes = ((extract 2 0) array#3)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 array#3 0u)
        let tmp%18#0: uint64 = aggregate%array_length%5#0
        let array2#1: Encoded(len+(uint64,(len+utf8[]),uint64)[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%2#0, extract_to_end%2#0, tmp%18#0, extract_to_end%2#0)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 array2#1 0u)
        let tmp%19#0: uint64 = aggregate%array_length%6#0
        let tmp%20#0: bool = (== tmp%19#0 4u)
        (assert tmp%20#0)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 array2#1 0u)
        let tmp%21#0: uint64 = aggregate%array_length%7#0
        let tmp%22#0: uint64 = (- tmp%21#0 1u)
        let aggregate%total_length%3#0: uint64 = (len array2#1)
        let aggregate%array_head_and_tail%3#0: bytes = (substring3 array2#1 2u aggregate%total_length%3#0)
        let aggregate%array_length%8#0: uint64 = (extract_uint16 array2#1 0u)
        let aggregate%item_offset_offset%3#0: uint64 = (* tmp%22#0 2u)
        let aggregate%item_offset%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%item_offset_offset%3#0)
        let aggregate%next_index%3#0: uint64 = (+ tmp%22#0 1u)
        let aggregate%has_next%3#0: uint64 = (- aggregate%array_length%8#0 aggregate%next_index%3#0) // on error: index access is out of bounds
        let aggregate%end_of_array%3#0: uint64 = (len aggregate%array_head_and_tail%3#0)
        let aggregate%next_item_offset_offset%3#0: uint64 = (* aggregate%next_index%3#0 2u)
        let aggregate%next_item_offset%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%next_item_offset_offset%3#0)
        let aggregate%end_offset%3#0: uint64 = (select aggregate%end_of_array%3#0 aggregate%next_item_offset%3#0 aggregate%has_next%3#0)
        let aggregate%substring3%3#0: bytes = (substring3 aggregate%array_head_and_tail%3#0 aggregate%item_offset%3#0 aggregate%end_offset%3#0)
        let array_item%2#0: Encoded(uint64,(len+utf8[]),uint64) = aggregate%substring3%3#0
        let tmp%23#0: bool = (== array_item%2#0 struct2#0)
        (assert tmp%23#0)
        let aggregate%array_length%9#0: uint64 = (extract_uint16 array2#1 0u)
        let tmp%24#0: uint64 = aggregate%array_length%9#0
        let tmp%25#0: uint64 = (- tmp%24#0 2u)
        let aggregate%total_length%4#0: uint64 = (len array2#1)
        let aggregate%array_head_and_tail%4#0: bytes = (substring3 array2#1 2u aggregate%total_length%4#0)
        let aggregate%array_length%10#0: uint64 = (extract_uint16 array2#1 0u)
        let aggregate%item_offset_offset%4#0: uint64 = (* tmp%25#0 2u)
        let aggregate%item_offset%4#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%4#0 aggregate%item_offset_offset%4#0)
        let aggregate%next_index%4#0: uint64 = (+ tmp%25#0 1u)
        let aggregate%has_next%4#0: uint64 = (- aggregate%array_length%10#0 aggregate%next_index%4#0) // on error: index access is out of bounds
        let aggregate%end_of_array%4#0: uint64 = (len aggregate%array_head_and_tail%4#0)
        let aggregate%next_item_offset_offset%4#0: uint64 = (* aggregate%next_index%4#0 2u)
        let aggregate%next_item_offset%4#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%4#0 aggregate%next_item_offset_offset%4#0)
        let aggregate%end_offset%4#0: uint64 = (select aggregate%end_of_array%4#0 aggregate%next_item_offset%4#0 aggregate%has_next%4#0)
        let aggregate%substring3%4#0: bytes = (substring3 aggregate%array_head_and_tail%4#0 aggregate%item_offset%4#0 aggregate%end_offset%4#0)
        let array_item%3#0: Encoded(uint64,(len+utf8[]),uint64) = aggregate%substring3%4#0
        let tmp%26#0: bool = (== array_item%3#0 struct1#0)
        (assert tmp%26#0)
        exit 1u

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements[routing]() -> void:
    block@0: // L97
        let tmp%1#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%3#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
        let aggregate%head%0#0: bytes = (concat 0x 0x0000000000000003)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 28u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%1#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 28u aggregate%data_length%0#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x0000040000000000)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len tmp%3#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 0x0000000000000003)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%4#0 tmp%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%3#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)%0#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = aggregate%concat%1#0
        let struct1#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = aggregate%as_Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)%0#0
        let tmp%7#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let aggregate%as_bytes%2#0: bytes[8] = (itob 4u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%5#0: bytes = (concat aggregate%len_u16%0#0 0x0001)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 0x0002)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 0x0003)
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 0x0004)
        let aggregate%as_Encoded(len+uint16[])%0#0: Encoded(len+uint16[]) = aggregate%head%8#0
        let encoded_array%0#0: Encoded(len+uint16[]) = aggregate%as_Encoded(len+uint16[])%0#0
        let aggregate%head%9#0: bytes = (concat 0x 0x0000040000000000)
        let aggregate%as_bytes%3#0: bytes[8] = (itob 28u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len tmp%7#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 28u aggregate%data_length%2#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 0x0000000000000003)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len encoded_array%0#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ aggregate%current_tail_offset%2#0 aggregate%data_length%3#0)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 0x0000040000000000)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%13#0 tmp%7#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 encoded_array%0#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)%1#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = aggregate%concat%3#0
        let struct2#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = aggregate%as_Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)%1#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%14#0: bytes = (concat aggregate%len_u16%1#0 aggregate%offset_as_uint16%4#0)
        let aggregate%data_length%4#0: uint64 = (len struct1#0)
        let aggregate%current_tail_offset%4#0: uint64 = (+ 4u aggregate%data_length%4#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%4#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 aggregate%offset_as_uint16%5#0)
        let aggregate%data_length%5#0: uint64 = (len struct1#0)
        let aggregate%current_tail_offset%5#0: uint64 = (+ aggregate%current_tail_offset%4#0 aggregate%data_length%5#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%head%15#0 struct1#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%concat%4#0 struct1#0)
        let aggregate%as_Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[])%0#0: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[]) = aggregate%concat%5#0
        let array#0: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[]) = aggregate%as_Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[])%0#0
        let aggregate%total_length%0#0: uint64 = (len array#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 array#0 2u aggregate%total_length%0#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 array#0 0u)
        let aggregate%item_offset_offset%0#0: uint64 = (* 1u 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%next_index%0#0: uint64 = (+ 1u 1u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%0#0 aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len aggregate%array_head_and_tail%0#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%end_offset%0#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 array#0 0u)
        let aggregate%lt%0#0: bool = (< 1u aggregate%array_length%1#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%updated_array%0#0: bytes = _puya_lib.arc4.dynamic_array_replace_dynamic_element(array#0, struct2#0, 1u)
        let array#1: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[]) = aggregate%updated_array%0#0
        (log array#1)
        let aggregate%total_length%1#0: uint64 = (len array#1)
        let aggregate%array_head_and_tail%1#0: bytes = (substring3 array#1 2u aggregate%total_length%1#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 array#1 0u)
        let aggregate%item_offset_offset%1#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset_offset%1#0)
        let aggregate%next_index%1#0: uint64 = (+ 0u 1u)
        let aggregate%has_next%1#0: uint64 = (- aggregate%array_length%2#0 aggregate%next_index%1#0) // on error: index access is out of bounds
        let aggregate%end_of_array%1#0: uint64 = (len aggregate%array_head_and_tail%1#0)
        let aggregate%next_item_offset_offset%1#0: uint64 = (* aggregate%next_index%1#0 2u)
        let aggregate%next_item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%next_item_offset_offset%1#0)
        let aggregate%end_offset%1#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%1#0 aggregate%has_next%1#0)
        let aggregate%substring3%1#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%end_offset%1#0)
        let array_item%0#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = aggregate%substring3%1#0
        (log array_item%0#0)
        let aggregate%total_length%2#0: uint64 = (len array#1)
        let aggregate%array_head_and_tail%2#0: bytes = (substring3 array#1 2u aggregate%total_length%2#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 array#1 0u)
        let aggregate%item_offset_offset%2#0: uint64 = (* 1u 2u)
        let aggregate%item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%item_offset_offset%2#0)
        let aggregate%next_index%2#0: uint64 = (+ 1u 1u)
        let aggregate%has_next%2#0: uint64 = (- aggregate%array_length%3#0 aggregate%next_index%2#0) // on error: index access is out of bounds
        let aggregate%end_of_array%2#0: uint64 = (len aggregate%array_head_and_tail%2#0)
        let aggregate%next_item_offset_offset%2#0: uint64 = (* aggregate%next_index%2#0 2u)
        let aggregate%next_item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%next_item_offset_offset%2#0)
        let aggregate%end_offset%2#0: uint64 = (select aggregate%end_of_array%2#0 aggregate%next_item_offset%2#0 aggregate%has_next%2#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0 aggregate%end_offset%2#0)
        let array_item%1#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = aggregate%substring3%2#0
        (log array_item%1#0)
        let (tmp%12#0: bytes, array#2: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#1)
        let tmp%14#0: bool = (== tmp%12#0 struct2#0)
        (assert tmp%14#0)
        let (tmp%15#0: bytes, array#3: Encoded(len+(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(array#2)
        let tmp%17#0: bool = (== tmp%15#0 struct1#0)
        (assert tmp%17#0)
        exit 1u

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement[routing]() -> void:
    block@0: // L114
        let aggregate%head%0#0: bytes = (concat 0x 0x04)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x05)
        let aggregate%as_Encoded(uint8[2])%0#0: Encoded(uint8[2]) = aggregate%head%1#0
        let encoded_array%0#0: Encoded(uint8[2]) = aggregate%as_Encoded(uint8[2])%0#0
        let aggregate%head%2#0: bytes = (concat 0x 0x0000000000000003)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 encoded_array%0#0)
        let aggregate%as_Encoded(uint64,uint8[2])%0#0: Encoded(uint64,uint8[2]) = aggregate%head%3#0
        let one#0: Encoded(uint64,uint8[2]) = aggregate%as_Encoded(uint64,uint8[2])%0#0
        let tmp%4#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%5#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let aggregate%as_bytes%0#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%4#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%4#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len tmp%5#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%5#0 tmp%4#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%5#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%1#0
        let two#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0
        let aggregate%head%6#0: bytes = (concat 0x 0x05)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 0x04)
        let aggregate%as_Encoded(uint8[2])%1#0: Encoded(uint8[2]) = aggregate%head%7#0
        let encoded_array%1#0: Encoded(uint8[2]) = aggregate%as_Encoded(uint8[2])%1#0
        let aggregate%head%8#0: bytes = (concat 0x 0x0000040000000000)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 encoded_array%1#0)
        let aggregate%as_Encoded(uint64,uint8[2])%1#0: Encoded(uint64,uint8[2]) = aggregate%head%9#0
        let three#0: Encoded(uint64,uint8[2]) = aggregate%as_Encoded(uint64,uint8[2])%1#0
        let tmp%12#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%14#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
        let aggregate%head%10#0: bytes = (concat 0x 0x0000000000000003)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 28u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len tmp%12#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 28u aggregate%data_length%2#0)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 0x0000040000000000)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len tmp%14#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ aggregate%current_tail_offset%2#0 aggregate%data_length%3#0)
        let aggregate%head%14#0: bytes = (concat aggregate%head%13#0 0x0000000000000003)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%14#0 tmp%12#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 tmp%14#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)%0#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = aggregate%concat%3#0
        let four#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = aggregate%as_Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)%0#0
        let tmp%17#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%18#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let aggregate%as_bytes%4#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%15#0: bytes = (concat 0x aggregate%offset_as_uint16%4#0)
        let aggregate%data_length%4#0: uint64 = (len tmp%17#0)
        let aggregate%current_tail_offset%4#0: uint64 = (+ 4u aggregate%data_length%4#0)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%current_tail_offset%4#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%16#0: bytes = (concat aggregate%head%15#0 aggregate%offset_as_uint16%5#0)
        let aggregate%data_length%5#0: uint64 = (len tmp%18#0)
        let aggregate%current_tail_offset%5#0: uint64 = (+ aggregate%current_tail_offset%4#0 aggregate%data_length%5#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%head%16#0 tmp%17#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%concat%4#0 tmp%18#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%5#0
        let five#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0
        let aggregate%head%17#0: bytes = (concat 0x one#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob 26u)
        let aggregate%offset_as_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%18#0: bytes = (concat aggregate%head%17#0 aggregate%offset_as_uint16%6#0)
        let aggregate%data_length%6#0: uint64 = (len two#0)
        let aggregate%current_tail_offset%6#0: uint64 = (+ 26u aggregate%data_length%6#0)
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 three#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%6#0)
        let aggregate%offset_as_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%20#0: bytes = (concat aggregate%head%19#0 aggregate%offset_as_uint16%7#0)
        let aggregate%data_length%7#0: uint64 = (len four#0)
        let aggregate%current_tail_offset%7#0: uint64 = (+ aggregate%current_tail_offset%6#0 aggregate%data_length%7#0)
        let aggregate%as_bytes%8#0: bytes[8] = (itob aggregate%current_tail_offset%7#0)
        let aggregate%offset_as_uint16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%head%21#0: bytes = (concat aggregate%head%20#0 aggregate%offset_as_uint16%8#0)
        let aggregate%data_length%8#0: uint64 = (len five#0)
        let aggregate%current_tail_offset%8#0: uint64 = (+ aggregate%current_tail_offset%7#0 aggregate%data_length%8#0)
        let aggregate%concat%6#0: bytes = (concat aggregate%head%21#0 two#0)
        let aggregate%concat%7#0: bytes = (concat aggregate%concat%6#0 four#0)
        let aggregate%concat%8#0: bytes = (concat aggregate%concat%7#0 five#0)
        let aggregate%as_Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[])))%0#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = aggregate%concat%8#0
        let struct1#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = aggregate%as_Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[])))%0#0
        let tmp%21#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let tmp%22#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let aggregate%as_bytes%9#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%head%22#0: bytes = (concat 0x aggregate%offset_as_uint16%9#0)
        let aggregate%data_length%9#0: uint64 = (len tmp%21#0)
        let aggregate%current_tail_offset%9#0: uint64 = (+ 4u aggregate%data_length%9#0)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%current_tail_offset%9#0)
        let aggregate%offset_as_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%head%23#0: bytes = (concat aggregate%head%22#0 aggregate%offset_as_uint16%10#0)
        let aggregate%data_length%10#0: uint64 = (len tmp%22#0)
        let aggregate%current_tail_offset%10#0: uint64 = (+ aggregate%current_tail_offset%9#0 aggregate%data_length%10#0)
        let aggregate%concat%9#0: bytes = (concat aggregate%head%23#0 tmp%21#0)
        let aggregate%concat%10#0: bytes = (concat aggregate%concat%9#0 tmp%22#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%2#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%10#0
        let tmp%23#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%2#0
        let aggregate%head%24#0: bytes = (concat 0x one#0)
        let aggregate%as_bytes%11#0: bytes[8] = (itob 26u)
        let aggregate%offset_as_uint16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%head%25#0: bytes = (concat aggregate%head%24#0 aggregate%offset_as_uint16%11#0)
        let aggregate%data_length%11#0: uint64 = (len tmp%23#0)
        let aggregate%current_tail_offset%11#0: uint64 = (+ 26u aggregate%data_length%11#0)
        let aggregate%head%26#0: bytes = (concat aggregate%head%25#0 three#0)
        let aggregate%as_bytes%12#0: bytes[8] = (itob aggregate%current_tail_offset%11#0)
        let aggregate%offset_as_uint16%12#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%head%27#0: bytes = (concat aggregate%head%26#0 aggregate%offset_as_uint16%12#0)
        let aggregate%data_length%12#0: uint64 = (len four#0)
        let aggregate%current_tail_offset%12#0: uint64 = (+ aggregate%current_tail_offset%11#0 aggregate%data_length%12#0)
        let aggregate%as_bytes%13#0: bytes[8] = (itob aggregate%current_tail_offset%12#0)
        let aggregate%offset_as_uint16%13#0: bytes = ((extract 6 2) aggregate%as_bytes%13#0)
        let aggregate%head%28#0: bytes = (concat aggregate%head%27#0 aggregate%offset_as_uint16%13#0)
        let aggregate%data_length%13#0: uint64 = (len five#0)
        let aggregate%current_tail_offset%13#0: uint64 = (+ aggregate%current_tail_offset%12#0 aggregate%data_length%13#0)
        let aggregate%concat%11#0: bytes = (concat aggregate%head%28#0 tmp%23#0)
        let aggregate%concat%12#0: bytes = (concat aggregate%concat%11#0 four#0)
        let aggregate%concat%13#0: bytes = (concat aggregate%concat%12#0 five#0)
        let aggregate%as_Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[])))%1#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = aggregate%concat%13#0
        let struct2#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = aggregate%as_Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[])))%1#0
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 struct2#0 10u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 struct2#0 22u)
        let aggregate%substring3%0#0: bytes = (substring3 struct2#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 struct2#0 10u)
        let aggregate%data_up_to_item%0#0: bytes = (extract3 struct2#0 0u aggregate%item_offset%0#0)
        let aggregate%updated_data%0#0: bytes = (concat aggregate%data_up_to_item%0#0 two#0)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 struct2#0 22u)
        let aggregate%total_length%0#0: uint64 = (len struct2#0)
        let aggregate%data_beyond_item%0#0: bytes = (substring3 struct2#0 aggregate%next_item_offset%0#0 aggregate%total_length%0#0)
        let aggregate%updated_data%1#0: bytes = (concat aggregate%updated_data%0#0 aggregate%data_beyond_item%0#0)
        let aggregate%old_value_length%0#0: uint64 = (- aggregate%next_item_offset%0#0 aggregate%item_offset%0#0)
        let aggregate%new_value_length%0#0: uint64 = (len two#0)
        let aggregate%tail_offset%0#0: uint64 = (extract_uint16 struct2#0 22u)
        let aggregate%tail_offset%1#0: uint64 = (+ aggregate%tail_offset%0#0 aggregate%new_value_length%0#0)
        let aggregate%tail_offset%2#0: uint64 = (- aggregate%tail_offset%1#0 aggregate%old_value_length%0#0)
        let aggregate%as_bytes%14#0: bytes[8] = (itob aggregate%tail_offset%2#0)
        let aggregate%tail_offset_bytes%0#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let aggregate%updated_data%2#0: bytes = (replace3 aggregate%updated_data%1#0 22u aggregate%tail_offset_bytes%0#0)
        let aggregate%tail_offset%3#0: uint64 = (extract_uint16 struct2#0 24u)
        let aggregate%tail_offset%4#0: uint64 = (+ aggregate%tail_offset%3#0 aggregate%new_value_length%0#0)
        let aggregate%tail_offset%5#0: uint64 = (- aggregate%tail_offset%4#0 aggregate%old_value_length%0#0)
        let aggregate%as_bytes%15#0: bytes[8] = (itob aggregate%tail_offset%5#0)
        let aggregate%tail_offset_bytes%1#0: bytes = ((extract 6 2) aggregate%as_bytes%15#0)
        let aggregate%updated_data%3#0: bytes = (replace3 aggregate%updated_data%2#0 24u aggregate%tail_offset_bytes%1#0)
        let struct2#1: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = aggregate%updated_data%3#0
        let tmp%25#0: bool = (== struct1#0 struct2#1)
        (assert tmp%25#0) // struct1 does not match struct2
        exit 1u

subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification[routing]() -> void:
    block@0: // L141
        let aggregate%head%0#0: bytes = (concat 0x 0x04)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x05)
        let aggregate%as_Encoded(uint8[2])%0#0: Encoded(uint8[2]) = aggregate%head%1#0
        let encoded_array%0#0: Encoded(uint8[2]) = aggregate%as_Encoded(uint8[2])%0#0
        let aggregate%head%2#0: bytes = (concat 0x 0x0000000000000003)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 encoded_array%0#0)
        let aggregate%as_Encoded(uint64,uint8[2])%0#0: Encoded(uint64,uint8[2]) = aggregate%head%3#0
        let one#0: Encoded(uint64,uint8[2]) = aggregate%as_Encoded(uint64,uint8[2])%0#0
        let tmp%4#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%5#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let aggregate%as_bytes%0#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%4#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%4#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len tmp%5#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%5#0 tmp%4#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%5#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%1#0
        let two#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0
        let aggregate%head%6#0: bytes = (concat 0x 0x05)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 0x04)
        let aggregate%as_Encoded(uint8[2])%1#0: Encoded(uint8[2]) = aggregate%head%7#0
        let encoded_array%1#0: Encoded(uint8[2]) = aggregate%as_Encoded(uint8[2])%1#0
        let aggregate%head%8#0: bytes = (concat 0x 0x0000040000000000)
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 encoded_array%1#0)
        let aggregate%as_Encoded(uint64,uint8[2])%1#0: Encoded(uint64,uint8[2]) = aggregate%head%9#0
        let three#0: Encoded(uint64,uint8[2]) = aggregate%as_Encoded(uint64,uint8[2])%1#0
        let tmp%12#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%14#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
        let aggregate%head%10#0: bytes = (concat 0x 0x0000000000000003)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 28u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len tmp%12#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 28u aggregate%data_length%2#0)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 0x0000040000000000)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%offset_as_uint16%3#0)
        let aggregate%data_length%3#0: uint64 = (len tmp%14#0)
        let aggregate%current_tail_offset%3#0: uint64 = (+ aggregate%current_tail_offset%2#0 aggregate%data_length%3#0)
        let aggregate%head%14#0: bytes = (concat aggregate%head%13#0 0x0000000000000003)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%14#0 tmp%12#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 tmp%14#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)%0#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = aggregate%concat%3#0
        let four1#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = aggregate%as_Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)%0#0
        let tmp%18#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%20#0: Encoded(len+uint16[]) = test_cases.arc4_dynamic_arrays.contract.get_u16_arr1()
        let aggregate%head%15#0: bytes = (concat 0x 0x007b)
        let aggregate%as_Encoded(uint16[])%0#0: Encoded(uint16[]) = aggregate%head%15#0
        let tmp%21#0: Encoded(uint16[]) = aggregate%as_Encoded(uint16[])%0#0
        let concat%0#0: Encoded(len+uint16[]) = (concat tmp%20#0 tmp%21#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%20#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let aggregate%head%16#0: bytes = (concat 0x 0x0000000000000003)
        let aggregate%as_bytes%4#0: bytes[8] = (itob 28u)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%17#0: bytes = (concat aggregate%head%16#0 aggregate%offset_as_uint16%4#0)
        let aggregate%data_length%4#0: uint64 = (len tmp%18#0)
        let aggregate%current_tail_offset%4#0: uint64 = (+ 28u aggregate%data_length%4#0)
        let aggregate%head%18#0: bytes = (concat aggregate%head%17#0 0x0000040000000000)
        let aggregate%as_bytes%5#0: bytes[8] = (itob aggregate%current_tail_offset%4#0)
        let aggregate%offset_as_uint16%5#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 aggregate%offset_as_uint16%5#0)
        let aggregate%data_length%5#0: uint64 = (len replace%0#0)
        let aggregate%current_tail_offset%5#0: uint64 = (+ aggregate%current_tail_offset%4#0 aggregate%data_length%5#0)
        let aggregate%head%20#0: bytes = (concat aggregate%head%19#0 0x0000000000000003)
        let aggregate%concat%4#0: bytes = (concat aggregate%head%20#0 tmp%18#0)
        let aggregate%concat%5#0: bytes = (concat aggregate%concat%4#0 replace%0#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)%1#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = aggregate%concat%5#0
        let four2#0: Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64) = aggregate%as_Encoded(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64)%1#0
        let tmp%24#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string1()
        let tmp%25#0: Encoded(len+utf8[]) = test_cases.arc4_dynamic_arrays.contract.get_string2()
        let aggregate%as_bytes%6#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%6#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%21#0: bytes = (concat 0x aggregate%offset_as_uint16%6#0)
        let aggregate%data_length%6#0: uint64 = (len tmp%24#0)
        let aggregate%current_tail_offset%6#0: uint64 = (+ 4u aggregate%data_length%6#0)
        let aggregate%as_bytes%7#0: bytes[8] = (itob aggregate%current_tail_offset%6#0)
        let aggregate%offset_as_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%7#0)
        let aggregate%head%22#0: bytes = (concat aggregate%head%21#0 aggregate%offset_as_uint16%7#0)
        let aggregate%data_length%7#0: uint64 = (len tmp%25#0)
        let aggregate%current_tail_offset%7#0: uint64 = (+ aggregate%current_tail_offset%6#0 aggregate%data_length%7#0)
        let aggregate%concat%6#0: bytes = (concat aggregate%head%22#0 tmp%24#0)
        let aggregate%concat%7#0: bytes = (concat aggregate%concat%6#0 tmp%25#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%7#0
        let five#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0
        let aggregate%head%23#0: bytes = (concat 0x one#0)
        let aggregate%as_bytes%8#0: bytes[8] = (itob 26u)
        let aggregate%offset_as_uint16%8#0: bytes = ((extract 6 2) aggregate%as_bytes%8#0)
        let aggregate%head%24#0: bytes = (concat aggregate%head%23#0 aggregate%offset_as_uint16%8#0)
        let aggregate%data_length%8#0: uint64 = (len two#0)
        let aggregate%current_tail_offset%8#0: uint64 = (+ 26u aggregate%data_length%8#0)
        let aggregate%head%25#0: bytes = (concat aggregate%head%24#0 three#0)
        let aggregate%as_bytes%9#0: bytes[8] = (itob aggregate%current_tail_offset%8#0)
        let aggregate%offset_as_uint16%9#0: bytes = ((extract 6 2) aggregate%as_bytes%9#0)
        let aggregate%head%26#0: bytes = (concat aggregate%head%25#0 aggregate%offset_as_uint16%9#0)
        let aggregate%data_length%9#0: uint64 = (len four1#0)
        let aggregate%current_tail_offset%9#0: uint64 = (+ aggregate%current_tail_offset%8#0 aggregate%data_length%9#0)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%current_tail_offset%9#0)
        let aggregate%offset_as_uint16%10#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%head%27#0: bytes = (concat aggregate%head%26#0 aggregate%offset_as_uint16%10#0)
        let aggregate%data_length%10#0: uint64 = (len five#0)
        let aggregate%current_tail_offset%10#0: uint64 = (+ aggregate%current_tail_offset%9#0 aggregate%data_length%10#0)
        let aggregate%concat%8#0: bytes = (concat aggregate%head%27#0 two#0)
        let aggregate%concat%9#0: bytes = (concat aggregate%concat%8#0 four1#0)
        let aggregate%concat%10#0: bytes = (concat aggregate%concat%9#0 five#0)
        let aggregate%as_Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[])))%0#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = aggregate%concat%10#0
        let tup1#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = aggregate%as_Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[])))%0#0
        let aggregate%head%28#0: bytes = (concat 0x one#0)
        let aggregate%as_bytes%11#0: bytes[8] = (itob 26u)
        let aggregate%offset_as_uint16%11#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%head%29#0: bytes = (concat aggregate%head%28#0 aggregate%offset_as_uint16%11#0)
        let aggregate%data_length%11#0: uint64 = (len two#0)
        let aggregate%current_tail_offset%11#0: uint64 = (+ 26u aggregate%data_length%11#0)
        let aggregate%head%30#0: bytes = (concat aggregate%head%29#0 three#0)
        let aggregate%as_bytes%12#0: bytes[8] = (itob aggregate%current_tail_offset%11#0)
        let aggregate%offset_as_uint16%12#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%head%31#0: bytes = (concat aggregate%head%30#0 aggregate%offset_as_uint16%12#0)
        let aggregate%data_length%12#0: uint64 = (len four2#0)
        let aggregate%current_tail_offset%12#0: uint64 = (+ aggregate%current_tail_offset%11#0 aggregate%data_length%12#0)
        let aggregate%as_bytes%13#0: bytes[8] = (itob aggregate%current_tail_offset%12#0)
        let aggregate%offset_as_uint16%13#0: bytes = ((extract 6 2) aggregate%as_bytes%13#0)
        let aggregate%head%32#0: bytes = (concat aggregate%head%31#0 aggregate%offset_as_uint16%13#0)
        let aggregate%data_length%13#0: uint64 = (len five#0)
        let aggregate%current_tail_offset%13#0: uint64 = (+ aggregate%current_tail_offset%12#0 aggregate%data_length%13#0)
        let aggregate%concat%11#0: bytes = (concat aggregate%head%32#0 two#0)
        let aggregate%concat%12#0: bytes = (concat aggregate%concat%11#0 four2#0)
        let aggregate%concat%13#0: bytes = (concat aggregate%concat%12#0 five#0)
        let aggregate%as_Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[])))%1#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = aggregate%concat%13#0
        let tup2#0: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = aggregate%as_Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[])))%1#0
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tup2#0 22u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 tup2#0 24u)
        let aggregate%substring3%0#0: bytes = (substring3 tup2#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 aggregate%substring3%0#0 18u)
        let aggregate%len%0#0: uint64 = (len aggregate%substring3%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 aggregate%substring3%0#0 aggregate%extract_uint16%2#0 aggregate%len%0#0)
        let tuple_item%1#0: Encoded(len+uint16[]) = aggregate%substring3%1#0
        let (tmp%29#0: bytes, tmp%30#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(tuple_item%1#0, 2u)
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 tup2#0 22u)
        let aggregate%extract_uint16%4#0: uint64 = (extract_uint16 tup2#0 24u)
        let aggregate%substring3%2#0: bytes = (substring3 tup2#0 aggregate%extract_uint16%3#0 aggregate%extract_uint16%4#0)
        let aggregate%extract_uint16%5#0: uint64 = (extract_uint16 aggregate%substring3%2#0 18u)
        let aggregate%len%1#0: uint64 = (len aggregate%substring3%2#0)
        let aggregate%substring3%3#0: bytes = (substring3 aggregate%substring3%2#0 aggregate%extract_uint16%5#0 aggregate%len%1#0)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%substring3%2#0 18u)
        let aggregate%data_up_to_item%0#0: bytes = (extract3 aggregate%substring3%2#0 0u aggregate%item_offset%0#0)
        let aggregate%updated_data%0#0: bytes = (concat aggregate%data_up_to_item%0#0 tmp%30#0)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 tup2#0 22u)
        let aggregate%data_up_to_item%1#0: bytes = (extract3 tup2#0 0u aggregate%item_offset%1#0)
        let aggregate%updated_data%1#0: bytes = (concat aggregate%data_up_to_item%1#0 aggregate%updated_data%0#0)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 tup2#0 24u)
        let aggregate%total_length%0#0: uint64 = (len tup2#0)
        let aggregate%data_beyond_item%0#0: bytes = (substring3 tup2#0 aggregate%next_item_offset%0#0 aggregate%total_length%0#0)
        let aggregate%updated_data%2#0: bytes = (concat aggregate%updated_data%1#0 aggregate%data_beyond_item%0#0)
        let aggregate%old_value_length%0#0: uint64 = (- aggregate%next_item_offset%0#0 aggregate%item_offset%1#0)
        let aggregate%new_value_length%0#0: uint64 = (len aggregate%updated_data%0#0)
        let aggregate%tail_offset%0#0: uint64 = (extract_uint16 tup2#0 24u)
        let aggregate%tail_offset%1#0: uint64 = (+ aggregate%tail_offset%0#0 aggregate%new_value_length%0#0)
        let aggregate%tail_offset%2#0: uint64 = (- aggregate%tail_offset%1#0 aggregate%old_value_length%0#0)
        let aggregate%as_bytes%14#0: bytes[8] = (itob aggregate%tail_offset%2#0)
        let aggregate%tail_offset_bytes%0#0: bytes = ((extract 6 2) aggregate%as_bytes%14#0)
        let aggregate%updated_data%3#0: bytes = (replace3 aggregate%updated_data%2#0 24u aggregate%tail_offset_bytes%0#0)
        let tup2#1: Encoded((uint64,uint8[2]),((len+utf8[]),(len+utf8[])),(uint64,uint8[2]),(uint64,(len+utf8[]),uint64,(len+uint16[]),uint64),((len+utf8[]),(len+utf8[]))) = aggregate%updated_data%3#0
        let tmp%31#0: bool = (== tup1#0 tup2#1)
        (assert tmp%31#0) // tup1 does not match tup2
        exit 1u