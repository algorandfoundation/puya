#pragma version 10

test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.approval_program:
    intcblock 0 2 1 4
    bytecblock 0x 0x0002 0x0000 0x0003 0x0004
    callsub __puya_arc4_router__
    return


// test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // arc4_dynamic_arrays/contract.py:38
    // class DynamicArrayContract(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __puya_arc4_router___bare_routing@10
    txna ApplicationArgs 0
    pushbytes 0x55715827 // method "test_static_elements()void"
    pushbytes 0x713dd6db // method "test_dynamic_elements()void"
    pushbytes 0x37158aac // method "test_mixed_single_dynamic_elements()void"
    pushbytes 0x8570be3b // method "test_mixed_multiple_dynamic_elements()void"
    pushbytes 0x51aa8c49 // method "test_nested_struct_replacement()void"
    pushbytes 0x283a186f // method "test_nested_tuple_modification()void"
    uncover 6
    match __puya_arc4_router___test_static_elements_route@2 __puya_arc4_router___test_dynamic_elements_route@3 __puya_arc4_router___test_mixed_single_dynamic_elements_route@4 __puya_arc4_router___test_mixed_multiple_dynamic_elements_route@5 __puya_arc4_router___test_nested_struct_replacement_route@6 __puya_arc4_router___test_nested_tuple_modification_route@7
    b __puya_arc4_router___switch_case_default@8

__puya_arc4_router___test_static_elements_route@2:
    // arc4_dynamic_arrays/contract.py:39
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_static_elements
    intc_2 // 1
    retsub

__puya_arc4_router___test_dynamic_elements_route@3:
    // arc4_dynamic_arrays/contract.py:55
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_dynamic_elements
    intc_2 // 1
    retsub

__puya_arc4_router___test_mixed_single_dynamic_elements_route@4:
    // arc4_dynamic_arrays/contract.py:74
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_mixed_single_dynamic_elements
    intc_2 // 1
    retsub

__puya_arc4_router___test_mixed_multiple_dynamic_elements_route@5:
    // arc4_dynamic_arrays/contract.py:89
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_mixed_multiple_dynamic_elements
    intc_2 // 1
    retsub

__puya_arc4_router___test_nested_struct_replacement_route@6:
    // arc4_dynamic_arrays/contract.py:106
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_nested_struct_replacement
    intc_2 // 1
    retsub

__puya_arc4_router___test_nested_tuple_modification_route@7:
    // arc4_dynamic_arrays/contract.py:133
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_nested_tuple_modification
    intc_2 // 1
    retsub

__puya_arc4_router___switch_case_default@8:
    b __puya_arc4_router___after_if_else@14

__puya_arc4_router___bare_routing@10:
    // arc4_dynamic_arrays/contract.py:38
    // class DynamicArrayContract(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match __puya_arc4_router_____algopy_default_create@11
    b __puya_arc4_router___switch_case_default@12

__puya_arc4_router_____algopy_default_create@11:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub __algopy_default_create
    intc_2 // 1
    retsub

__puya_arc4_router___switch_case_default@12:

__puya_arc4_router___after_if_else@14:
    // arc4_dynamic_arrays/contract.py:38
    // class DynamicArrayContract(ARC4Contract):
    intc_0 // 0
    retsub


// test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements() -> void:
test_static_elements:
    // arc4_dynamic_arrays/contract.py:39-40
    // @arc4.abimethod()
    // def test_static_elements(self) -> None:
    proto 0 0
    // arc4_dynamic_arrays/contract.py:41
    // byte_array1 = arc4.StaticArray(get_byte1(), get_byte2())
    callsub get_byte1
    callsub get_byte2
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    // arc4_dynamic_arrays/contract.py:42
    // byte_array2 = arc4.StaticArray(get_byte3(), get_byte4())
    callsub get_byte3
    callsub get_byte4
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    // arc4_dynamic_arrays/contract.py:44
    // struct1 = StaticStruct(get_uint1(), byte_array1.copy())
    callsub get_uint1
    uncover 2
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:45
    // struct2 = StaticStruct(get_uint2(), byte_array2.copy())
    callsub get_uint2
    uncover 2
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    swap
    // arc4_dynamic_arrays/contract.py:46
    // array = arc4.DynamicArray(struct1.copy(), struct1.copy())
    dupn 2
    bytec_0 // 0x
    uncover 3
    concat
    uncover 2
    concat
    bytec_1 // 0x0002
    swap
    concat
    // arc4_dynamic_arrays/contract.py:47
    // array[1] = struct2.copy()
    dig 2
    swap
    dup
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    >
    assert // Index access is out of bounds
    pushint 12 // 12
    uncover 2
    replace3
    // arc4_dynamic_arrays/contract.py:48
    // log(array)
    dup
    log
    // arc4_dynamic_arrays/contract.py:49
    // log(array[0])
    dup
    extract 2 0
    intc_0 // 0
    pushint 10 // 10
    *
    pushint 10 // 10
    extract3 // on error: Index access is out of bounds
    log
    // arc4_dynamic_arrays/contract.py:50
    // log(array[1])
    dup
    extract 2 0
    intc_2 // 1
    pushint 10 // 10
    *
    pushint 10 // 10
    extract3 // on error: Index access is out of bounds
    log
    // arc4_dynamic_arrays/contract.py:52
    // assert array.pop() == struct2
    pushint 10 // 10
    callsub dynamic_array_pop_fixed_size
    swap
    uncover 3
    ==
    assert
    // arc4_dynamic_arrays/contract.py:53
    // assert array.pop() == struct1
    pushint 10 // 10
    callsub dynamic_array_pop_fixed_size
    pop
    ==
    assert
    retsub


// test_cases.arc4_dynamic_arrays.contract.get_byte1() -> bytes:
get_byte1:
    // arc4_dynamic_arrays/contract.py:197-198
    // @subroutine
    // def get_byte1() -> arc4.Byte:
    proto 0 1
    // arc4_dynamic_arrays/contract.py:199
    // return arc4.Byte(4)
    pushbytes 0x04
    retsub


// test_cases.arc4_dynamic_arrays.contract.get_byte2() -> bytes:
get_byte2:
    // arc4_dynamic_arrays/contract.py:202-203
    // @subroutine
    // def get_byte2() -> arc4.Byte:
    proto 0 1
    // arc4_dynamic_arrays/contract.py:204
    // return arc4.Byte(5)
    pushbytes 0x05
    retsub


// test_cases.arc4_dynamic_arrays.contract.get_byte3() -> bytes:
get_byte3:
    // arc4_dynamic_arrays/contract.py:207-208
    // @subroutine
    // def get_byte3() -> arc4.Byte:
    proto 0 1
    // arc4_dynamic_arrays/contract.py:209
    // return arc4.Byte(42)
    pushbytes 0x2a
    retsub


// test_cases.arc4_dynamic_arrays.contract.get_byte4() -> bytes:
get_byte4:
    // arc4_dynamic_arrays/contract.py:212-213
    // @subroutine
    // def get_byte4() -> arc4.Byte:
    proto 0 1
    // arc4_dynamic_arrays/contract.py:214
    // return arc4.Byte(255)
    pushbytes 0xff
    retsub


// test_cases.arc4_dynamic_arrays.contract.get_uint1() -> bytes:
get_uint1:
    // arc4_dynamic_arrays/contract.py:187-188
    // @subroutine
    // def get_uint1() -> arc4.UInt64:
    proto 0 1
    // arc4_dynamic_arrays/contract.py:189
    // return arc4.UInt64(3)
    pushbytes 0x0000000000000003
    retsub


// test_cases.arc4_dynamic_arrays.contract.get_uint2() -> bytes:
get_uint2:
    // arc4_dynamic_arrays/contract.py:192-193
    // @subroutine
    // def get_uint2() -> arc4.UInt64:
    proto 0 1
    // arc4_dynamic_arrays/contract.py:194
    // return arc4.UInt64(2**42)
    pushbytes 0x0000040000000000
    retsub


// test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements() -> void:
test_dynamic_elements:
    // arc4_dynamic_arrays/contract.py:55-56
    // @arc4.abimethod()
    // def test_dynamic_elements(self) -> None:
    proto 0 0
    // arc4_dynamic_arrays/contract.py:57
    // struct1 = DynamicStruct(get_string1(), get_string2())
    callsub get_string1
    callsub get_string2
    swap
    intc_3 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    dup
    len
    intc_3 // 4
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:58
    // struct2 = DynamicStruct(get_string3(), get_string1())
    callsub get_string3
    callsub get_string1
    swap
    intc_3 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    dup
    len
    intc_3 // 4
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    swap
    // arc4_dynamic_arrays/contract.py:59
    // array = arc4.DynamicArray(struct1.copy(), struct1.copy())
    dupn 2
    intc_3 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    dig 3
    len
    intc_3 // 4
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    uncover 3
    concat
    uncover 2
    concat
    bytec_1 // 0x0002
    swap
    concat
    // arc4_dynamic_arrays/contract.py:60
    // array.append(struct1.copy())
    dig 1
    intc_1 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    dig 1
    intc_0 // 0
    extract_uint16
    swap
    uncover 2
    extract 2 0
    uncover 2
    swap
    intc_2 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    // arc4_dynamic_arrays/contract.py:61
    // array[1] = struct2.copy()  # replace
    dig 2
    intc_2 // 1
    callsub dynamic_array_replace_dynamic_element
    // arc4_dynamic_arrays/contract.py:62
    // log(array)
    dup
    log
    // arc4_dynamic_arrays/contract.py:63
    // log(array[0])
    dup
    extract 2 0
    intc_0 // 0
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    dig 1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    intc_2 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_1 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    log
    // arc4_dynamic_arrays/contract.py:64
    // log(array[1])
    dup
    extract 2 0
    intc_2 // 1
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    dig 1
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    dup
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_1 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    log
    // arc4_dynamic_arrays/contract.py:65
    // log(array[2])
    dup
    extract 2 0
    intc_1 // 2
    dup
    *
    dig 1
    swap
    extract_uint16
    cover 2
    dig 1
    intc_0 // 0
    extract_uint16
    intc_1 // 2
    intc_2 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_1 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    log
    // arc4_dynamic_arrays/contract.py:67
    // assert array.pop() == struct1
    callsub dynamic_array_pop_dynamic_element
    swap
    dig 2
    ==
    assert
    // arc4_dynamic_arrays/contract.py:68
    // log(array)
    dup
    log
    // arc4_dynamic_arrays/contract.py:69
    // assert array.pop() == struct2
    callsub dynamic_array_pop_dynamic_element
    swap
    uncover 3
    ==
    assert
    // arc4_dynamic_arrays/contract.py:70
    // log(array)
    dup
    log
    // arc4_dynamic_arrays/contract.py:71
    // assert array.pop() == struct1
    callsub dynamic_array_pop_dynamic_element
    swap
    uncover 2
    ==
    assert
    // arc4_dynamic_arrays/contract.py:72
    // log(array)
    log
    retsub


// test_cases.arc4_dynamic_arrays.contract.get_string1() -> bytes:
get_string1:
    // arc4_dynamic_arrays/contract.py:172-173
    // @subroutine
    // def get_string1() -> arc4.String:
    proto 0 1
    // arc4_dynamic_arrays/contract.py:174
    // return arc4.String("a")
    pushbytes 0x000161
    retsub


// test_cases.arc4_dynamic_arrays.contract.get_string2() -> bytes:
get_string2:
    // arc4_dynamic_arrays/contract.py:177-178
    // @subroutine
    // def get_string2() -> arc4.String:
    proto 0 1
    // arc4_dynamic_arrays/contract.py:179
    // return arc4.String("bee")
    pushbytes 0x0003626565
    retsub


// test_cases.arc4_dynamic_arrays.contract.get_string3() -> bytes:
get_string3:
    // arc4_dynamic_arrays/contract.py:182-183
    // @subroutine
    // def get_string3() -> arc4.String:
    proto 0 1
    // arc4_dynamic_arrays/contract.py:184
    // return arc4.String("Hello World")
    pushbytes 0x000b48656c6c6f20576f726c64
    retsub


// test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements() -> void:
test_mixed_single_dynamic_elements:
    // arc4_dynamic_arrays/contract.py:74-75
    // @arc4.abimethod()
    // def test_mixed_single_dynamic_elements(self) -> None:
    proto 0 0
    // arc4_dynamic_arrays/contract.py:76
    // struct1 = MixedSingleStruct(get_uint1(), get_string1(), get_uint2())
    callsub get_uint1
    callsub get_string1
    swap
    callsub get_uint2
    swap
    bytec_0 // 0x
    swap
    concat
    pushint 18 // 18
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:77
    // struct2 = MixedSingleStruct(get_uint2(), get_string2(), get_uint1())
    callsub get_uint2
    callsub get_string2
    swap
    callsub get_uint1
    swap
    bytec_0 // 0x
    swap
    concat
    pushint 18 // 18
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:78
    // array = arc4.DynamicArray[MixedSingleStruct]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    swap
    // arc4_dynamic_arrays/contract.py:79
    // array.append(struct2.copy())
    dup
    intc_1 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    dig 2
    intc_0 // 0
    extract_uint16
    swap
    uncover 3
    extract 2 0
    uncover 2
    swap
    intc_2 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    // arc4_dynamic_arrays/contract.py:80
    // array.append(struct2.copy())
    dig 1
    intc_1 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    dig 1
    intc_0 // 0
    extract_uint16
    swap
    uncover 2
    extract 2 0
    uncover 2
    swap
    intc_2 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    // arc4_dynamic_arrays/contract.py:81
    // array[0] = struct1.copy()  # replace
    dig 2
    intc_0 // 0
    callsub dynamic_array_replace_dynamic_element
    // arc4_dynamic_arrays/contract.py:82
    // log(array)
    dup
    log
    // arc4_dynamic_arrays/contract.py:83
    // log(array[0])
    dup
    extract 2 0
    intc_0 // 0
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    dig 1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    intc_2 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_1 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    log
    // arc4_dynamic_arrays/contract.py:84
    // log(array[1])
    dup
    extract 2 0
    intc_2 // 1
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    dig 1
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    dup
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_1 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    log
    // arc4_dynamic_arrays/contract.py:86
    // assert array.pop() == struct2
    callsub dynamic_array_pop_dynamic_element
    swap
    uncover 2
    ==
    assert
    // arc4_dynamic_arrays/contract.py:87
    // assert array.pop() == struct1
    callsub dynamic_array_pop_dynamic_element
    pop
    ==
    assert
    retsub


// test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements() -> void:
test_mixed_multiple_dynamic_elements:
    // arc4_dynamic_arrays/contract.py:89-90
    // @arc4.abimethod()
    // def test_mixed_multiple_dynamic_elements(self) -> None:
    proto 0 0
    // arc4_dynamic_arrays/contract.py:92
    // get_uint1(), get_string1(), get_uint2(), get_u16_arr1(), get_uint1()
    callsub get_uint1
    callsub get_string1
    swap
    callsub get_uint2
    cover 2
    callsub get_u16_arr1
    cover 3
    callsub get_uint1
    cover 3
    // arc4_dynamic_arrays/contract.py:91-93
    // struct1 = MixedMultipleStruct(
    //     get_uint1(), get_string1(), get_uint2(), get_u16_arr1(), get_uint1()
    // )
    bytec_0 // 0x
    swap
    concat
    pushint 28 // 28
    itob
    extract 6 2
    concat
    dig 1
    len
    pushint 28 // 28
    +
    swap
    uncover 3
    concat
    swap
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:95
    // get_uint2(), get_string2(), get_uint1(), get_u16_arr2(), get_uint2()
    callsub get_uint2
    callsub get_string2
    swap
    callsub get_uint1
    cover 2
    callsub get_u16_arr2
    cover 3
    callsub get_uint2
    cover 3
    // arc4_dynamic_arrays/contract.py:94-96
    // struct2 = MixedMultipleStruct(
    //     get_uint2(), get_string2(), get_uint1(), get_u16_arr2(), get_uint2()
    // )
    bytec_0 // 0x
    swap
    concat
    pushint 28 // 28
    itob
    extract 6 2
    concat
    dig 1
    len
    pushint 28 // 28
    +
    swap
    uncover 3
    concat
    swap
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:97
    // array = arc4.DynamicArray(struct1.copy(), struct1.copy())
    dig 1
    swap
    dig 2
    swap
    intc_3 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    dig 3
    len
    intc_3 // 4
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    uncover 3
    concat
    uncover 2
    concat
    bytec_1 // 0x0002
    swap
    concat
    // arc4_dynamic_arrays/contract.py:98
    // array[1] = struct2.copy()
    dig 1
    intc_2 // 1
    callsub dynamic_array_replace_dynamic_element
    // arc4_dynamic_arrays/contract.py:99
    // log(array)
    dup
    log
    // arc4_dynamic_arrays/contract.py:100
    // log(array[0])
    dup
    extract 2 0
    intc_0 // 0
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    dig 1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    intc_2 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_1 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    log
    // arc4_dynamic_arrays/contract.py:101
    // log(array[1])
    dup
    extract 2 0
    intc_2 // 1
    intc_1 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    dig 1
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    dup
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_1 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    log
    // arc4_dynamic_arrays/contract.py:103
    // assert array.pop() == struct2
    callsub dynamic_array_pop_dynamic_element
    swap
    uncover 2
    ==
    assert
    // arc4_dynamic_arrays/contract.py:104
    // assert array.pop() == struct1
    callsub dynamic_array_pop_dynamic_element
    pop
    ==
    assert
    retsub


// test_cases.arc4_dynamic_arrays.contract.get_u16_arr1() -> bytes:
get_u16_arr1:
    // arc4_dynamic_arrays/contract.py:217-218
    // @subroutine
    // def get_u16_arr1() -> arc4.DynamicArray[arc4.UInt16]:
    proto 0 1
    // arc4_dynamic_arrays/contract.py:219
    // return arc4.DynamicArray(arc4.UInt16(2**16 - 1), arc4.UInt16(0), arc4.UInt16(42))
    bytec_0 // 0x
    pushbytes 0xffff
    concat
    bytec_2 // 0x0000
    concat
    pushbytes 0x002a
    concat
    bytec_3 // 0x0003
    swap
    concat
    retsub


// test_cases.arc4_dynamic_arrays.contract.get_u16_arr2() -> bytes:
get_u16_arr2:
    // arc4_dynamic_arrays/contract.py:222-223
    // @subroutine
    // def get_u16_arr2() -> arc4.DynamicArray[arc4.UInt16]:
    proto 0 1
    // arc4_dynamic_arrays/contract.py:224
    // return arc4.DynamicArray(arc4.UInt16(1), arc4.UInt16(2), arc4.UInt16(3), arc4.UInt16(4))
    bytec_0 // 0x
    pushbytes 0x0001
    concat
    bytec_1 // 0x0002
    concat
    bytec_3 // 0x0003
    concat
    bytec 4 // 0x0004
    concat
    bytec 4 // 0x0004
    swap
    concat
    retsub


// test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement() -> void:
test_nested_struct_replacement:
    // arc4_dynamic_arrays/contract.py:106-107
    // @arc4.abimethod()
    // def test_nested_struct_replacement(self) -> None:
    proto 0 0
    // arc4_dynamic_arrays/contract.py:108
    // one = StaticStruct(get_uint1(), arc4.StaticArray(get_byte1(), get_byte2()))
    callsub get_uint1
    callsub get_byte1
    callsub get_byte2
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    uncover 2
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:109
    // two = DynamicStruct(get_string1(), get_string2())
    callsub get_string1
    callsub get_string2
    swap
    intc_3 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    dup
    len
    intc_3 // 4
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:110
    // three = StaticStruct(get_uint2(), arc4.StaticArray(get_byte2(), get_byte1()))
    callsub get_uint2
    callsub get_byte2
    callsub get_byte1
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    uncover 2
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:112
    // get_uint1(), get_string1(), get_uint2(), get_u16_arr1(), get_uint1()
    callsub get_uint1
    callsub get_string1
    swap
    callsub get_uint2
    cover 2
    callsub get_u16_arr1
    cover 3
    callsub get_uint1
    cover 3
    // arc4_dynamic_arrays/contract.py:111-113
    // four = MixedMultipleStruct(
    //     get_uint1(), get_string1(), get_uint2(), get_u16_arr1(), get_uint1()
    // )
    bytec_0 // 0x
    swap
    concat
    pushint 28 // 28
    itob
    extract 6 2
    concat
    dig 1
    len
    pushint 28 // 28
    +
    swap
    uncover 3
    concat
    swap
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:114
    // five = DynamicStruct(get_string1(), get_string2())
    callsub get_string1
    callsub get_string2
    swap
    intc_3 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    dup
    len
    intc_3 // 4
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:116
    // one=one.copy(),
    dig 4
    swap
    // arc4_dynamic_arrays/contract.py:117
    // two=two.copy(),
    dig 4
    cover 2
    // arc4_dynamic_arrays/contract.py:118
    // three=three.copy(),
    dig 4
    cover 3
    // arc4_dynamic_arrays/contract.py:119
    // four=four.copy(),
    dig 4
    cover 4
    // arc4_dynamic_arrays/contract.py:120
    // five=five.copy(),
    dup
    cover 4
    // arc4_dynamic_arrays/contract.py:115-121
    // struct1 = NestedDynamicStruct(
    //     one=one.copy(),
    //     two=two.copy(),
    //     three=three.copy(),
    //     four=four.copy(),
    //     five=five.copy(),
    // )
    bytec_0 // 0x
    uncover 2
    concat
    pushint 26 // 26
    itob
    extract 6 2
    concat
    dig 2
    len
    pushint 26 // 26
    +
    swap
    uncover 4
    concat
    swap
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 5
    len
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    uncover 3
    concat
    uncover 2
    concat
    cover 5
    // arc4_dynamic_arrays/contract.py:123
    // one=one.copy(),
    uncover 4
    // arc4_dynamic_arrays/contract.py:124
    // two=DynamicStruct(get_string2(), get_string1()),  # this is the difference with struct1
    callsub get_string2
    callsub get_string1
    swap
    intc_3 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    dup
    len
    intc_3 // 4
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:125
    // three=three.copy(),
    uncover 4
    swap
    // arc4_dynamic_arrays/contract.py:126
    // four=four.copy(),
    uncover 4
    cover 2
    // arc4_dynamic_arrays/contract.py:122-128
    // struct2 = NestedDynamicStruct(
    //     one=one.copy(),
    //     two=DynamicStruct(get_string2(), get_string1()),  # this is the difference with struct1
    //     three=three.copy(),
    //     four=four.copy(),
    //     five=five.copy(),
    // )
    bytec_0 // 0x
    uncover 4
    concat
    pushint 26 // 26
    itob
    extract 6 2
    concat
    dig 1
    len
    pushint 26 // 26
    +
    swap
    uncover 3
    concat
    swap
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 3
    len
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:130
    // struct2.two = two.copy()  # now struct2 should match struct1
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    intc_0 // 0
    dig 2
    extract3
    swap
    dig 2
    pushint 22 // 22
    extract_uint16
    swap
    dig 3
    len
    swap
    uncover 4
    dig 3
    uncover 3
    substring3
    uncover 3
    dig 4
    concat
    swap
    concat
    uncover 2
    uncover 2
    -
    cover 2
    swap
    len
    dig 1
    pushint 22 // 22
    extract_uint16
    dig 1
    +
    dig 3
    -
    itob
    extract 6 2
    uncover 2
    pushint 22 // 22
    uncover 2
    replace3
    dup
    pushint 24 // 24
    extract_uint16
    uncover 2
    +
    uncover 2
    -
    itob
    extract 6 2
    swap
    pushint 24 // 24
    uncover 2
    replace3
    // arc4_dynamic_arrays/contract.py:131
    // assert struct1.bytes == struct2.bytes, "struct1 does not match struct2"
    ==
    assert // struct1 does not match struct2
    retsub


// test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification() -> void:
test_nested_tuple_modification:
    // arc4_dynamic_arrays/contract.py:133-134
    // @arc4.abimethod()
    // def test_nested_tuple_modification(self) -> None:
    proto 0 0
    // arc4_dynamic_arrays/contract.py:135
    // one = StaticStruct(get_uint1(), arc4.StaticArray(get_byte1(), get_byte2()))
    callsub get_uint1
    callsub get_byte1
    callsub get_byte2
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    uncover 2
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:136
    // two = DynamicStruct(get_string1(), get_string2())
    callsub get_string1
    callsub get_string2
    swap
    intc_3 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    dup
    len
    intc_3 // 4
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:137
    // three = StaticStruct(get_uint2(), arc4.StaticArray(get_byte2(), get_byte1()))
    callsub get_uint2
    callsub get_byte2
    callsub get_byte1
    swap
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    uncover 2
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:139
    // get_uint1(), get_string1(), get_uint2(), get_u16_arr1(), get_uint1()
    callsub get_uint1
    callsub get_string1
    swap
    callsub get_uint2
    cover 2
    callsub get_u16_arr1
    cover 3
    callsub get_uint1
    cover 3
    // arc4_dynamic_arrays/contract.py:138-140
    // four1 = MixedMultipleStruct(
    //     get_uint1(), get_string1(), get_uint2(), get_u16_arr1(), get_uint1()
    // )
    bytec_0 // 0x
    swap
    concat
    pushint 28 // 28
    itob
    extract 6 2
    concat
    dig 1
    len
    pushint 28 // 28
    +
    swap
    uncover 3
    concat
    swap
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:142
    // get_uint1(),
    callsub get_uint1
    // arc4_dynamic_arrays/contract.py:143
    // get_string1(),
    callsub get_string1
    swap
    // arc4_dynamic_arrays/contract.py:144
    // get_uint2(),
    callsub get_uint2
    cover 2
    // arc4_dynamic_arrays/contract.py:145
    // get_u16_arr1() + (arc4.UInt16(123),),  # noqa: RUF005
    callsub get_u16_arr1
    extract 2 0
    bytec_0 // 0x
    pushbytes 0x007b
    concat
    concat
    dup
    len
    intc_1 // 2
    /
    itob
    extract 6 2
    swap
    concat
    swap
    // arc4_dynamic_arrays/contract.py:146
    // get_uint1(),
    callsub get_uint1
    // arc4_dynamic_arrays/contract.py:141-147
    // four2 = MixedMultipleStruct(
    //     get_uint1(),
    //     get_string1(),
    //     get_uint2(),
    //     get_u16_arr1() + (arc4.UInt16(123),),  # noqa: RUF005
    //     get_uint1(),
    // )
    bytec_0 // 0x
    uncover 2
    concat
    pushint 28 // 28
    itob
    extract 6 2
    concat
    dig 3
    len
    pushint 28 // 28
    +
    swap
    uncover 5
    concat
    swap
    itob
    extract 6 2
    concat
    swap
    concat
    uncover 2
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:148
    // five = DynamicStruct(get_string1(), get_string2())
    callsub get_string1
    callsub get_string2
    swap
    intc_3 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    dup
    len
    intc_3 // 4
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:151
    // one.copy(),
    dig 5
    swap
    // arc4_dynamic_arrays/contract.py:152
    // two.copy(),
    dig 5
    cover 2
    // arc4_dynamic_arrays/contract.py:153
    // three.copy(),
    dig 5
    cover 3
    // arc4_dynamic_arrays/contract.py:154
    // four1.copy(),
    uncover 5
    cover 4
    // arc4_dynamic_arrays/contract.py:155
    // five.copy(),
    dup
    cover 4
    // arc4_dynamic_arrays/contract.py:149-157
    // tup1 = arc4.Tuple(
    //     (
    //         one.copy(),
    //         two.copy(),
    //         three.copy(),
    //         four1.copy(),
    //         five.copy(),
    //     )
    // )
    bytec_0 // 0x
    uncover 2
    concat
    pushint 26 // 26
    itob
    extract 6 2
    concat
    dig 2
    len
    pushint 26 // 26
    +
    swap
    uncover 4
    concat
    swap
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 5
    len
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    uncover 3
    concat
    uncover 2
    concat
    cover 5
    // arc4_dynamic_arrays/contract.py:160
    // one.copy(),
    uncover 4
    // arc4_dynamic_arrays/contract.py:161
    // two.copy(),
    uncover 4
    swap
    // arc4_dynamic_arrays/contract.py:162
    // three.copy(),
    uncover 4
    cover 2
    // arc4_dynamic_arrays/contract.py:163
    // four2.copy(),
    uncover 4
    cover 3
    // arc4_dynamic_arrays/contract.py:158-166
    // tup2 = arc4.Tuple(
    //     (
    //         one.copy(),
    //         two.copy(),
    //         three.copy(),
    //         four2.copy(),
    //         five.copy(),
    //     )
    // )
    bytec_0 // 0x
    swap
    concat
    pushint 26 // 26
    itob
    extract 6 2
    concat
    dig 1
    len
    pushint 26 // 26
    +
    swap
    uncover 3
    concat
    swap
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    dig 3
    len
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    // arc4_dynamic_arrays/contract.py:168
    // tup2[3].d.pop()
    dup
    pushint 22 // 22
    extract_uint16
    swap
    dup
    pushint 24 // 24
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    pushint 18 // 18
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    intc_1 // 2
    callsub dynamic_array_pop_fixed_size
    bury 1
    dig 1
    pushint 18 // 18
    extract_uint16
    uncover 2
    intc_0 // 0
    uncover 2
    extract3
    swap
    concat
    dig 1
    pushint 22 // 22
    extract_uint16
    dig 2
    intc_0 // 0
    dig 2
    extract3
    swap
    dig 3
    pushint 24 // 24
    extract_uint16
    swap
    dig 4
    len
    swap
    uncover 5
    dig 3
    uncover 3
    substring3
    uncover 3
    dig 4
    concat
    swap
    concat
    uncover 2
    uncover 2
    -
    cover 2
    swap
    len
    dig 1
    pushint 24 // 24
    extract_uint16
    +
    uncover 2
    -
    itob
    extract 6 2
    swap
    pushint 24 // 24
    uncover 2
    replace3
    // arc4_dynamic_arrays/contract.py:169
    // assert tup1.bytes == tup2.bytes, "tup1 does not match tup2"
    ==
    assert // tup1 does not match tup2
    retsub


// test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__algopy_default_create() -> void:
__algopy_default_create:
    proto 0 0
    retsub


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:
    proto 2 2
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    -
    itob
    extract 6 0
    frame_dig -2
    swap
    replace2 0
    dup
    len
    frame_dig -1
    -
    dup2
    frame_dig -1
    extract3
    cover 2
    swap
    intc_0 // 0
    uncover 2
    substring3
    retsub


// _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> bytes, bytes:
dynamic_array_pop_dynamic_element:
    proto 1 2
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_2 // 1
    -
    dupn 2
    intc_1 // 2
    *
    dup
    cover 2
    frame_dig -1
    extract 2 0
    dup
    cover 3
    dup
    uncover 2
    extract_uint16
    dup
    cover 2
    cover 3
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    bytec_0 // 0x
    swap
    intc_1 // 2
    *
    intc_1 // 2
    assert // Step cannot be zero
    intc_0 // 0

dynamic_array_pop_dynamic_element_for_header@1:
    frame_dig 7
    frame_dig 6
    <
    bz dynamic_array_pop_dynamic_element_after_for@4
    frame_dig 2
    frame_dig 7
    extract_uint16
    intc_1 // 2
    -
    itob
    extract 6 2
    frame_dig 5
    swap
    concat
    frame_bury 5
    frame_dig 7
    intc_1 // 2
    +
    frame_bury 7
    b dynamic_array_pop_dynamic_element_for_header@1

dynamic_array_pop_dynamic_element_after_for@4:
    frame_dig 0
    itob
    extract 6 2
    frame_dig 5
    concat
    frame_dig 1
    intc_1 // 2
    +
    frame_dig 2
    swap
    frame_dig 3
    substring3
    concat
    frame_dig 4
    swap
    frame_bury 1
    frame_bury 0
    retsub


// _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
dynamic_array_concat_dynamic_element:
    proto 4 1
    bytec_0 // ""
    dup
    frame_dig -2
    intc_1 // 2
    *
    frame_dig -4
    intc_1 // 2
    *
    intc_1 // 2
    assert // Step cannot be zero
    intc_0 // 0

dynamic_array_concat_dynamic_element_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz dynamic_array_concat_dynamic_element_after_for@4
    frame_dig -3
    frame_dig 4
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1
    frame_dig 4
    intc_1 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@1

dynamic_array_concat_dynamic_element_after_for@4:
    frame_dig -3
    len
    frame_bury 2
    frame_dig -2
    intc_1 // 2
    *
    frame_bury 0
    intc_1 // 2
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 4

dynamic_array_concat_dynamic_element_for_header@5:
    frame_dig 4
    frame_dig 0
    <
    bz dynamic_array_concat_dynamic_element_after_for@8
    frame_dig -1
    frame_dig 4
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1
    frame_dig 4
    intc_1 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@5

dynamic_array_concat_dynamic_element_after_for@8:
    frame_dig -4
    frame_dig -2
    +
    itob
    extract 6 2
    frame_dig 1
    concat
    frame_dig -4
    intc_1 // 2
    *
    frame_dig -3
    len
    frame_dig -3
    uncover 2
    uncover 2
    substring3
    concat
    frame_dig -2
    intc_1 // 2
    *
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    concat
    frame_bury 0
    retsub


// _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
dynamic_array_replace_dynamic_element:
    proto 3 1
    frame_dig -3
    substring 0 2
    dup
    btoi
    frame_dig -3
    extract 2 0
    frame_dig -2
    frame_dig -1
    uncover 3
    callsub static_array_replace_dynamic_element
    concat
    retsub


// _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
static_array_replace_dynamic_element:
    proto 4 1
    frame_dig -2
    intc_1 // 2
    *
    frame_dig -4
    swap
    extract_uint16
    frame_dig -2
    intc_2 // 1
    +
    intc_1 // 2
    *
    frame_dig -4
    swap
    extract_uint16
    frame_dig -4
    len
    frame_dig -1
    frame_dig -2
    -
    intc_2 // 1
    -
    dig 1
    uncover 3
    uncover 2
    select
    dup
    dig 3
    -
    cover 3
    frame_dig -3
    len
    cover 3
    frame_dig -4
    intc_0 // 0
    uncover 4
    substring3
    frame_dig -3
    concat
    frame_dig -4
    uncover 2
    uncover 3
    substring3
    concat
    frame_dig -1
    intc_1 // 2
    *
    frame_dig -2
    intc_2 // 1
    +
    intc_1 // 2
    *
    intc_1 // 2
    assert // Step cannot be zero

static_array_replace_dynamic_element_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz static_array_replace_dynamic_element_after_for@4
    frame_dig 2
    dup
    frame_dig 4
    dup
    cover 3
    extract_uint16
    frame_dig 1
    +
    frame_dig 0
    -
    itob
    extract 6 2
    swap
    uncover 2
    uncover 2
    replace3
    frame_bury 2
    frame_dig 4
    intc_1 // 2
    +
    frame_bury 4
    b static_array_replace_dynamic_element_for_header@1

static_array_replace_dynamic_element_after_for@4:
    frame_dig 2
    frame_bury 0
    retsub
