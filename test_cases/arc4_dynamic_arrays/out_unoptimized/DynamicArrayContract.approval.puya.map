{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAqCA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;AAAA;;AA+FK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AA3BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAjBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAfA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAnBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAhBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwIW;;;;;AAAP;AAKO;;;;;;;AAAP;AAKO;;;;;;;;;;;;;;;AAAP;AAKO;;;;;;;;;;AAAP;AAKO;;;;;;;;;;AAAP;AAKO;;;AAAP;AAKO;;;AAAP;AAKO;;;AAAP;AAKO;;;AAAP;AAKO;AAAkB;;;;AAAlB;AAA0C;AAA1C;AAA0D;;;;AAA1D;AAAA;AAAA;AAAA;AAAP;AAKO;AAAkB;;;;AAAlB;AAAkC;AAAlC;AAAkD;AAAlD;AAAkE;;AAAlE;AAAA;;AAAA;AAAA;AAAP;AAvLmC;;;AAAa;;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACiB;;;AAAa;;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAd;AAEuB;;;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACa;;;AAAa;;AAAA;AAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAV;AAC0B;;AAAlB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACG;;AAAA;AAAX;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;;AAAA;;AAAA;AACA;AAAA;AACI;AAAA;;;AAAM;AAAN;;AAAA;AAAA;;AAAA;AAAJ;AACI;AAAA;;;AAAM;AAAN;;AAAA;AAAA;;AAAA;AAAJ;AAEO;;AAAA;;;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;;;AAAA;AAAA;AAAP;;AAIwB;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACc;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAV;AAC0B;;AAAlB;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACK;;AAAb;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AACW;;AAAL;AAAN;;;AACA;AAAA;AACI;AAAA;;;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AACI;AAAA;;;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AACI;AAAA;;;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAEO;;;AAAA;AAAA;;AAAA;AAAP;AACA;AAAA;AACO;;;AAAA;AAAA;;AAAA;AAAP;AACA;AAAA;AACO;;;AAAA;AAAA;;AAAA;AAAP;AACA;;AAI4B;;;AAAa;;;AAAA;AAAe;;;AAAA;;AAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACkB;;;AAAa;;;AAAA;AAAe;;;AAAA;;AAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACF;AAAA;AAAA;AAAR;AACa;AAAb;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AACa;;AAAb;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AACW;;AAAL;AAAN;;;AACA;AAAA;AACI;AAAA;;;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AACI;AAAA;;;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAEO;;;AAAA;AAAA;;AAAA;AAAP;AACO;;;AAAA;AAAA;AAAP;;AAKI;;;AAAa;;;AAAA;AAAe;;;AAAA;;AAAa;;;AAAA;;AAAgB;;;AAAA;;AADnD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIN;;;AAAa;;;AAAA;AAAe;;;AAAA;;AAAa;;;AAAA;;AAAgB;;;AAAA;;AADnD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGgB;;AAAA;AAAgB;;AAAA;AAAlC;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACG;;AAAL;AAAN;;;AACA;AAAA;AACI;AAAA;;;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AACI;AAAA;;;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAEO;;;AAAA;AAAA;;AAAA;AAAP;AACO;;;AAAA;AAAA;AAAP;;AAImB;;;AAA8B;;;AAAa;;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACc;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACe;;;AAA8B;;;AAAa;;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEJ;;;AAAa;;;AAAA;AAAe;;;AAAA;;AAAa;;;AAAA;;AAAgB;;;AAAA;;AADtD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGc;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEC;;AAAA;AACA;;AAAA;;AACE;;AAAA;;AACD;;AAAA;;AACA;AAAA;;AALC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAV;;AAQQ;;AACc;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAA;AACD;;AAAA;;AAJC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAQV;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AACO;AAAP;;AAImB;;;AAA8B;;;AAAa;;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACc;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACe;;;AAA8B;;;AAAa;;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEJ;;;AAAa;;;AAAA;AAAe;;;AAAA;;AAAa;;;AAAA;;AAAgB;;;AAAA;;AADrD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIJ;;;AACA;;;AAAA;AACA;;;AAAA;;AACA;;;AAAA;;;AAAiB;AAAC;;;;AAAD;AAAA;AAAA;AAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;;;AAAA;;AALI;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOa;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGC;;AAAA;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;AAAA;;AAND;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAP;;AAWQ;;AACA;;AAAA;AACA;;AAAA;;AACA;;AAAA;;AALD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUP;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AACO;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 2 1 4"
    },
    "7": {
      "op": "bytecblock 0x 0x0002 0x0000 0x0003 0x0004"
    },
    "22": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "24": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "25": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "26": {
      "op": "bz main_bare_routing@11",
      "stack_out": []
    },
    "29": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "pushbytes 0x55715827 // method \"test_static_elements()void\"",
      "defined_out": [
        "Method(test_static_elements()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_static_elements()void)"
      ]
    },
    "38": {
      "op": "pushbytes 0x713dd6db // method \"test_dynamic_elements()void\"",
      "defined_out": [
        "Method(test_dynamic_elements()void)",
        "Method(test_static_elements()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_static_elements()void)",
        "Method(test_dynamic_elements()void)"
      ]
    },
    "44": {
      "op": "pushbytes 0x37158aac // method \"test_mixed_single_dynamic_elements()void\"",
      "defined_out": [
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_static_elements()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_static_elements()void)",
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)"
      ]
    },
    "50": {
      "op": "pushbytes 0x8570be3b // method \"test_mixed_multiple_dynamic_elements()void\"",
      "defined_out": [
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_static_elements()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_static_elements()void)",
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)"
      ]
    },
    "56": {
      "op": "pushbytes 0x51aa8c49 // method \"test_nested_struct_replacement()void\"",
      "defined_out": [
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_nested_struct_replacement()void)",
        "Method(test_static_elements()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_static_elements()void)",
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)",
        "Method(test_nested_struct_replacement()void)"
      ]
    },
    "62": {
      "op": "pushbytes 0x283a186f // method \"test_nested_tuple_modification()void\"",
      "defined_out": [
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_nested_struct_replacement()void)",
        "Method(test_nested_tuple_modification()void)",
        "Method(test_static_elements()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_static_elements()void)",
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)",
        "Method(test_nested_struct_replacement()void)",
        "Method(test_nested_tuple_modification()void)"
      ]
    },
    "68": {
      "op": "uncover 6",
      "stack_out": [
        "Method(test_static_elements()void)",
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)",
        "Method(test_nested_struct_replacement()void)",
        "Method(test_nested_tuple_modification()void)",
        "tmp%2#0"
      ]
    },
    "70": {
      "op": "match main_test_static_elements_route@3 main_test_dynamic_elements_route@4 main_test_mixed_single_dynamic_elements_route@5 main_test_mixed_multiple_dynamic_elements_route@6 main_test_nested_struct_replacement_route@7 main_test_nested_tuple_modification_route@8",
      "stack_out": []
    },
    "84": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "85": {
      "block": "main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "86": {
      "block": "main_test_nested_tuple_modification_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "88": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "NoOp"
      ]
    },
    "89": {
      "op": "==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "90": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "91": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "93": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0"
      ]
    },
    "94": {
      "op": "!=",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "95": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "96": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification",
      "op": "callsub test_nested_tuple_modification"
    },
    "99": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "100": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "103": {
      "block": "main_test_nested_struct_replacement_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "105": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "NoOp"
      ]
    },
    "106": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "107": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "108": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "110": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0"
      ]
    },
    "111": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "112": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "113": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement",
      "op": "callsub test_nested_struct_replacement"
    },
    "116": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "120": {
      "block": "main_test_mixed_multiple_dynamic_elements_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "122": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "NoOp"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "124": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "127": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0"
      ]
    },
    "128": {
      "op": "!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "129": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "130": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements",
      "op": "callsub test_mixed_multiple_dynamic_elements"
    },
    "133": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "134": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "137": {
      "block": "main_test_mixed_single_dynamic_elements_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "139": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "140": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "141": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "142": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "144": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "145": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "146": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "147": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements",
      "op": "callsub test_mixed_single_dynamic_elements"
    },
    "150": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "151": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "154": {
      "block": "main_test_dynamic_elements_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "156": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "157": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "158": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "159": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "161": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "162": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "163": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "164": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements",
      "op": "callsub test_dynamic_elements"
    },
    "167": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "168": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "171": {
      "block": "main_test_static_elements_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "173": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "174": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "175": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "176": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "178": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "179": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "180": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "181": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements",
      "op": "callsub test_static_elements"
    },
    "184": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "185": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "188": {
      "block": "main_bare_routing@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "190": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0"
      ]
    },
    "191": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%27#0"
      ]
    },
    "192": {
      "op": "match main___algopy_default_create@12",
      "stack_out": []
    },
    "196": {
      "block": "main_switch_case_next@14",
      "stack_in": [],
      "op": "b main_after_if_else@15"
    },
    "199": {
      "block": "main___algopy_default_create@12",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "201": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "0"
      ]
    },
    "202": {
      "op": "==",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "203": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "204": {
      "block": "main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__algopy_default_create@18",
      "stack_in": [],
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "205": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "208": {
      "subroutine": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "params": {
        "array#0": "bytes",
        "fixed_byte_size#0": "uint64"
      },
      "block": "dynamic_array_pop_fixed_size",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "211": {
      "block": "dynamic_array_pop_fixed_size_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)"
      ]
    },
    "213": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)",
        "0"
      ]
    },
    "214": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0"
      ]
    },
    "215": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "1"
      ]
    },
    "216": {
      "op": "-",
      "defined_out": [
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0"
      ]
    },
    "217": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "218": {
      "op": "extract 6 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "221": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "array#0 (copy)"
      ]
    },
    "223": {
      "op": "swap",
      "stack_out": [
        "array#0 (copy)",
        "tmp%1#0"
      ]
    },
    "224": {
      "op": "replace2 0",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "226": {
      "op": "dup",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0 (copy)"
      ]
    },
    "227": {
      "op": "len",
      "defined_out": [
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0"
      ]
    },
    "228": {
      "op": "frame_dig -1",
      "defined_out": [
        "fixed_byte_size#0 (copy)",
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0",
        "fixed_byte_size#0 (copy)"
      ]
    },
    "230": {
      "op": "-",
      "defined_out": [
        "item_location#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "item_location#0"
      ]
    },
    "231": {
      "op": "dup2",
      "defined_out": [
        "item_location#0",
        "item_location#0 (copy)",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "item_location#0",
        "result#0 (copy)",
        "item_location#0 (copy)"
      ]
    },
    "232": {
      "op": "frame_dig -1",
      "stack_out": [
        "result#0",
        "item_location#0",
        "result#0 (copy)",
        "item_location#0 (copy)",
        "fixed_byte_size#0 (copy)"
      ]
    },
    "234": {
      "op": "extract3",
      "defined_out": [
        "item_location#0",
        "popped#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "item_location#0",
        "popped#0"
      ]
    },
    "235": {
      "op": "cover 2",
      "stack_out": [
        "popped#0",
        "result#0",
        "item_location#0"
      ]
    },
    "237": {
      "op": "swap",
      "stack_out": [
        "popped#0",
        "item_location#0",
        "result#0"
      ]
    },
    "238": {
      "op": "intc_0 // 0",
      "stack_out": [
        "popped#0",
        "item_location#0",
        "result#0",
        "0"
      ]
    },
    "239": {
      "op": "uncover 2",
      "stack_out": [
        "popped#0",
        "result#0",
        "0",
        "item_location#0"
      ]
    },
    "241": {
      "op": "substring3",
      "stack_out": [
        "popped#0",
        "result#0"
      ]
    },
    "242": {
      "retsub": true,
      "op": "retsub"
    },
    "243": {
      "subroutine": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "params": {
        "array#0": "bytes"
      },
      "block": "dynamic_array_pop_dynamic_element",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "246": {
      "block": "dynamic_array_pop_dynamic_element_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)"
      ]
    },
    "248": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)",
        "0"
      ]
    },
    "249": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0"
      ]
    },
    "250": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "1"
      ]
    },
    "251": {
      "op": "-",
      "defined_out": [
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0"
      ]
    },
    "252": {
      "op": "dupn 2",
      "defined_out": [
        "length_minus_1#0",
        "length_minus_1#0 (copy)"
      ],
      "stack_out": [
        "length_minus_1#0",
        "length_minus_1#0",
        "length_minus_1#0 (copy)"
      ]
    },
    "254": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "length_minus_1#0",
        "length_minus_1#0 (copy)"
      ],
      "stack_out": [
        "length_minus_1#0",
        "length_minus_1#0",
        "length_minus_1#0 (copy)",
        "2"
      ]
    },
    "255": {
      "op": "*",
      "defined_out": [
        "length_minus_1#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "length_minus_1#0",
        "popped_header_offset#0"
      ]
    },
    "256": {
      "op": "dup",
      "stack_out": [
        "length_minus_1#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "popped_header_offset#0"
      ]
    },
    "257": {
      "op": "cover 2",
      "defined_out": [
        "length_minus_1#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "length_minus_1#0",
        "popped_header_offset#0"
      ]
    },
    "259": {
      "op": "frame_dig -1",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "array#0 (copy)"
      ]
    },
    "261": {
      "op": "extract 2 0",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0"
      ]
    },
    "264": {
      "op": "dup",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "head_and_tail#0"
      ]
    },
    "265": {
      "op": "cover 3",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0"
      ]
    },
    "267": {
      "op": "dup",
      "defined_out": [
        "head_and_tail#0",
        "head_and_tail#0 (copy)",
        "length_minus_1#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "head_and_tail#0 (copy)"
      ]
    },
    "268": {
      "op": "uncover 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "length_minus_1#0",
        "head_and_tail#0",
        "head_and_tail#0 (copy)",
        "popped_header_offset#0"
      ]
    },
    "270": {
      "op": "extract_uint16",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "popped_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "length_minus_1#0",
        "head_and_tail#0",
        "popped_offset#0"
      ]
    },
    "271": {
      "op": "dup",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "length_minus_1#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped_offset#0 (copy)"
      ]
    },
    "272": {
      "op": "cover 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_offset#0",
        "head_and_tail#0",
        "popped_offset#0"
      ]
    },
    "274": {
      "op": "cover 3",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "popped_offset#0",
        "head_and_tail#0"
      ]
    },
    "276": {
      "op": "dup",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "popped_offset#0",
        "head_and_tail#0",
        "head_and_tail#0 (copy)"
      ]
    },
    "277": {
      "op": "len",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "popped_offset#0",
        "head_and_tail#0",
        "tmp%0#0"
      ]
    },
    "278": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "popped_offset#0",
        "tmp%0#0",
        "head_and_tail#0"
      ]
    },
    "279": {
      "op": "uncover 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "tmp%0#0",
        "head_and_tail#0",
        "popped_offset#0"
      ]
    },
    "281": {
      "op": "uncover 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "head_and_tail#0",
        "popped_offset#0",
        "tmp%0#0"
      ]
    },
    "283": {
      "op": "substring3",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "popped#0"
      ]
    },
    "284": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "length_minus_1#0"
      ]
    },
    "285": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "length_minus_1#0",
        "new_head#0"
      ]
    },
    "286": {
      "op": "swap",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "length_minus_1#0"
      ]
    },
    "287": {
      "op": "intc_1 // 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "length_minus_1#0",
        "2"
      ]
    },
    "288": {
      "op": "*",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0"
      ]
    },
    "289": {
      "op": "intc_1 // 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "2"
      ]
    },
    "290": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0"
      ]
    },
    "291": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "length_minus_1#0",
        "new_head#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "292": {
      "block": "dynamic_array_pop_dynamic_element_for_header@1",
      "stack_in": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "294": {
      "op": "frame_dig 6",
      "defined_out": [
        "head_offset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%1#0"
      ]
    },
    "296": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "continue_looping%0#0"
      ]
    },
    "297": {
      "op": "bz dynamic_array_pop_dynamic_element_after_for@4",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "300": {
      "block": "dynamic_array_pop_dynamic_element_for_body@2",
      "stack_in": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "head_and_tail#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "head_and_tail#0"
      ]
    },
    "302": {
      "op": "frame_dig 7",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "head_and_tail#0",
        "head_offset#0"
      ]
    },
    "304": {
      "op": "extract_uint16",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "item_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "item_offset#0"
      ]
    },
    "305": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "head_and_tail#0",
        "head_offset#0",
        "item_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "item_offset#0",
        "2"
      ]
    },
    "306": {
      "op": "-",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "item_offset#0"
      ]
    },
    "307": {
      "op": "itob",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%2#0"
      ]
    },
    "308": {
      "op": "extract 6 2",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%3#0"
      ]
    },
    "311": {
      "op": "frame_dig 5",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "new_head#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%3#0",
        "new_head#0"
      ]
    },
    "313": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "new_head#0",
        "tmp%3#0"
      ]
    },
    "314": {
      "op": "concat",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "new_head#0"
      ]
    },
    "315": {
      "op": "frame_bury 5",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "new_head#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "317": {
      "block": "dynamic_array_pop_dynamic_element_for_footer@3",
      "stack_in": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "319": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "head_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "320": {
      "op": "+",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "321": {
      "op": "frame_bury 7",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "323": {
      "op": "b dynamic_array_pop_dynamic_element_for_header@1"
    },
    "326": {
      "block": "dynamic_array_pop_dynamic_element_after_for@4",
      "stack_in": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "length_minus_1#0"
      ]
    },
    "328": {
      "op": "itob",
      "defined_out": [
        "length_minus_1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%4#0"
      ]
    },
    "329": {
      "op": "extract 6 2",
      "defined_out": [
        "length_minus_1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%5#0"
      ]
    },
    "332": {
      "op": "frame_dig 5",
      "defined_out": [
        "length_minus_1#0",
        "new_head#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%5#0",
        "new_head#0"
      ]
    },
    "334": {
      "op": "concat",
      "defined_out": [
        "length_minus_1#0",
        "new_head#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%6#0"
      ]
    },
    "335": {
      "op": "frame_dig 1",
      "defined_out": [
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%6#0",
        "popped_header_offset#0"
      ]
    },
    "337": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%6#0",
        "popped_header_offset#0",
        "2"
      ]
    },
    "338": {
      "op": "+",
      "defined_out": [
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "339": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%6#0",
        "tmp%7#0",
        "head_and_tail#0"
      ]
    },
    "341": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%6#0",
        "head_and_tail#0",
        "tmp%7#0"
      ]
    },
    "342": {
      "op": "frame_dig 3",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%6#0",
        "head_and_tail#0",
        "tmp%7#0",
        "popped_offset#0"
      ]
    },
    "344": {
      "op": "substring3",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "345": {
      "op": "concat",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "updated#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "updated#0"
      ]
    },
    "346": {
      "op": "frame_dig 4",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "updated#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "updated#0",
        "popped#0"
      ]
    },
    "348": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%1#0",
        "head_offset#0",
        "popped#0",
        "updated#0"
      ]
    },
    "349": {
      "op": "frame_bury 1"
    },
    "351": {
      "op": "frame_bury 0"
    },
    "353": {
      "retsub": true,
      "op": "retsub"
    },
    "354": {
      "subroutine": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "params": {
        "array_items_count#0": "uint64",
        "array_head_and_tail#0": "bytes",
        "new_items_count#0": "uint64",
        "new_head_and_tail#0": "bytes"
      },
      "block": "dynamic_array_concat_dynamic_element",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "357": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "358": {
      "block": "dynamic_array_concat_dynamic_element_block@0",
      "stack_in": [
        "tmp%4#0"
      ],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "new_head#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0"
      ]
    },
    "359": {
      "op": "frame_dig -2",
      "defined_out": [
        "new_head#0",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "new_items_count#0 (copy)"
      ]
    },
    "361": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "new_head#0",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "new_items_count#0 (copy)",
        "2"
      ]
    },
    "362": {
      "op": "*",
      "defined_out": [
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0"
      ]
    },
    "363": {
      "op": "frame_dig -4",
      "defined_out": [
        "array_items_count#0 (copy)",
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "array_items_count#0 (copy)"
      ]
    },
    "365": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "array_items_count#0 (copy)",
        "2"
      ]
    },
    "366": {
      "op": "*",
      "defined_out": [
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0"
      ]
    },
    "367": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "2"
      ]
    },
    "368": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "370": {
      "block": "dynamic_array_concat_dynamic_element_for_header@1",
      "stack_in": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "372": {
      "op": "frame_dig 3",
      "defined_out": [
        "head_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%0#0"
      ]
    },
    "374": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "continue_looping%0#0"
      ]
    },
    "375": {
      "op": "bz dynamic_array_concat_dynamic_element_after_for@4",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "378": {
      "block": "dynamic_array_concat_dynamic_element_for_body@2",
      "stack_in": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "380": {
      "op": "frame_dig 4",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)",
        "head_offset#0"
      ]
    },
    "382": {
      "op": "extract_uint16",
      "defined_out": [
        "head_offset#0",
        "item_offset#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "item_offset#0"
      ]
    },
    "383": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#0"
      ]
    },
    "385": {
      "op": "+",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%1#0"
      ]
    },
    "386": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%2#0"
      ]
    },
    "387": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%3#0"
      ]
    },
    "390": {
      "op": "frame_dig 1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%3#0",
        "new_head#0"
      ]
    },
    "392": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "new_head#0",
        "tmp%3#0"
      ]
    },
    "393": {
      "op": "concat",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "new_head#0"
      ]
    },
    "394": {
      "op": "frame_bury 1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "396": {
      "block": "dynamic_array_concat_dynamic_element_for_footer@3",
      "stack_in": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "398": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "399": {
      "op": "+",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "400": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "402": {
      "op": "b dynamic_array_concat_dynamic_element_for_header@1"
    },
    "405": {
      "block": "dynamic_array_concat_dynamic_element_after_for@4",
      "stack_in": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "407": {
      "op": "len",
      "defined_out": [
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "item_offset_adjustment#0"
      ]
    },
    "408": {
      "op": "frame_bury 2",
      "defined_out": [
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "410": {
      "op": "frame_dig -2",
      "defined_out": [
        "item_offset_adjustment#0",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "new_items_count#0 (copy)"
      ]
    },
    "412": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "item_offset_adjustment#0",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "new_items_count#0 (copy)",
        "2"
      ]
    },
    "413": {
      "op": "*",
      "defined_out": [
        "item_offset_adjustment#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%4#0"
      ]
    },
    "414": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_offset_adjustment#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "416": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "2"
      ]
    },
    "417": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "418": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "419": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "421": {
      "block": "dynamic_array_concat_dynamic_element_for_header@5",
      "stack_in": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "423": {
      "op": "frame_dig 0",
      "defined_out": [
        "head_offset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%4#0"
      ]
    },
    "425": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "head_offset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "continue_looping%1#0"
      ]
    },
    "426": {
      "op": "bz dynamic_array_concat_dynamic_element_after_for@8",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "429": {
      "block": "dynamic_array_concat_dynamic_element_for_body@6",
      "stack_in": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "new_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "431": {
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "new_head_and_tail#0 (copy)",
        "head_offset#0"
      ]
    },
    "433": {
      "op": "extract_uint16",
      "defined_out": [
        "head_offset#0",
        "item_offset#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "item_offset#0"
      ]
    },
    "434": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#0"
      ]
    },
    "436": {
      "op": "+",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%5#0"
      ]
    },
    "437": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%6#0"
      ]
    },
    "438": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%7#0"
      ]
    },
    "441": {
      "op": "frame_dig 1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%7#0",
        "new_head#0"
      ]
    },
    "443": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "new_head#0",
        "tmp%7#0"
      ]
    },
    "444": {
      "op": "concat",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "new_head#0"
      ]
    },
    "445": {
      "op": "frame_bury 1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "447": {
      "block": "dynamic_array_concat_dynamic_element_for_footer@7",
      "stack_in": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "449": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "450": {
      "op": "+",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "451": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "453": {
      "op": "b dynamic_array_concat_dynamic_element_for_header@5"
    },
    "456": {
      "block": "dynamic_array_concat_dynamic_element_after_for@8",
      "stack_in": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "array_items_count#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_items_count#0 (copy)"
      ]
    },
    "458": {
      "op": "frame_dig -2",
      "defined_out": [
        "array_items_count#0 (copy)",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_items_count#0 (copy)",
        "new_items_count#0 (copy)"
      ]
    },
    "460": {
      "op": "+",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%8#0"
      ]
    },
    "461": {
      "op": "itob",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%9#0"
      ]
    },
    "462": {
      "op": "extract 6 2",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%10#0"
      ]
    },
    "465": {
      "op": "frame_dig 1",
      "defined_out": [
        "new_head#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%10#0",
        "new_head#0"
      ]
    },
    "467": {
      "op": "concat",
      "defined_out": [
        "new_head#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0"
      ]
    },
    "468": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "array_items_count#0 (copy)"
      ]
    },
    "470": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "array_items_count#0 (copy)",
        "new_head#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "array_items_count#0 (copy)",
        "2"
      ]
    },
    "471": {
      "op": "*",
      "defined_out": [
        "new_head#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "472": {
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "new_head#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "tmp%12#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "474": {
      "op": "len",
      "defined_out": [
        "new_head#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "475": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "477": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "tmp%13#0",
        "array_head_and_tail#0 (copy)",
        "tmp%12#0"
      ]
    },
    "479": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "array_head_and_tail#0 (copy)",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "481": {
      "op": "substring3",
      "defined_out": [
        "new_head#0",
        "tmp%11#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "tmp%14#0"
      ]
    },
    "482": {
      "op": "concat",
      "defined_out": [
        "new_head#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0"
      ]
    },
    "483": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "new_items_count#0 (copy)"
      ]
    },
    "485": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "new_items_count#0 (copy)",
        "2"
      ]
    },
    "486": {
      "op": "*",
      "defined_out": [
        "new_head#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "487": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_head#0",
        "new_head_and_tail#0 (copy)",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%16#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "489": {
      "op": "len",
      "defined_out": [
        "new_head#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "490": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "492": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%17#0",
        "new_head_and_tail#0 (copy)",
        "tmp%16#0"
      ]
    },
    "494": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "new_head_and_tail#0 (copy)",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "496": {
      "op": "substring3",
      "defined_out": [
        "new_head#0",
        "tmp%15#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%18#0"
      ]
    },
    "497": {
      "op": "concat",
      "defined_out": [
        "new_head#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%19#0"
      ]
    },
    "498": {
      "op": "frame_bury 0"
    },
    "500": {
      "retsub": true,
      "op": "retsub"
    },
    "501": {
      "subroutine": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "params": {
        "source#0": "bytes",
        "new_item#0": "bytes",
        "index#0": "uint64"
      },
      "block": "dynamic_array_replace_dynamic_element",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "504": {
      "block": "dynamic_array_replace_dynamic_element_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "source#0 (copy)"
      ],
      "stack_out": [
        "source#0 (copy)"
      ]
    },
    "506": {
      "op": "substring 0 2",
      "defined_out": [
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0"
      ]
    },
    "509": {
      "op": "dup",
      "defined_out": [
        "size_b#0",
        "size_b#0 (copy)"
      ],
      "stack_out": [
        "size_b#0",
        "size_b#0 (copy)"
      ]
    },
    "510": {
      "op": "btoi",
      "defined_out": [
        "array_length#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0"
      ]
    },
    "511": {
      "op": "frame_dig -3",
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "source#0 (copy)"
      ]
    },
    "513": {
      "op": "extract 2 0",
      "defined_out": [
        "array_length#0",
        "size_b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "tmp%0#0"
      ]
    },
    "516": {
      "op": "frame_dig -2",
      "defined_out": [
        "array_length#0",
        "new_item#0 (copy)",
        "size_b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "tmp%0#0",
        "new_item#0 (copy)"
      ]
    },
    "518": {
      "op": "frame_dig -1",
      "defined_out": [
        "array_length#0",
        "index#0 (copy)",
        "new_item#0 (copy)",
        "size_b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "tmp%0#0",
        "new_item#0 (copy)",
        "index#0 (copy)"
      ]
    },
    "520": {
      "op": "uncover 3",
      "stack_out": [
        "size_b#0",
        "tmp%0#0",
        "new_item#0 (copy)",
        "index#0 (copy)",
        "array_length#0"
      ]
    },
    "522": {
      "callsub": "_puya_lib.arc4.static_array_replace_dynamic_element",
      "op": "callsub static_array_replace_dynamic_element",
      "defined_out": [
        "size_b#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "size_b#0",
        "tmp%1#0"
      ]
    },
    "525": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "526": {
      "retsub": true,
      "op": "retsub"
    },
    "527": {
      "subroutine": "_puya_lib.arc4.static_array_replace_dynamic_element",
      "params": {
        "array_head_and_tail#0": "bytes",
        "new_item#0": "bytes",
        "index#0": "uint64",
        "array_length#0": "uint64"
      },
      "block": "static_array_replace_dynamic_element",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "530": {
      "block": "static_array_replace_dynamic_element_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "index#0 (copy)"
      ],
      "stack_out": [
        "index#0 (copy)"
      ]
    },
    "532": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "index#0 (copy)"
      ],
      "stack_out": [
        "index#0 (copy)",
        "2"
      ]
    },
    "533": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "534": {
      "op": "frame_dig -4",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "536": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail#0 (copy)",
        "tmp%0#0"
      ]
    },
    "537": {
      "op": "extract_uint16",
      "defined_out": [
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0"
      ]
    },
    "538": {
      "op": "frame_dig -2",
      "stack_out": [
        "original_offset#0",
        "index#0 (copy)"
      ]
    },
    "540": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "index#0 (copy)",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "index#0 (copy)",
        "1"
      ]
    },
    "541": {
      "op": "+",
      "defined_out": [
        "original_offset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "original_offset#0",
        "tmp%1#0"
      ]
    },
    "542": {
      "op": "intc_1 // 2",
      "stack_out": [
        "original_offset#0",
        "tmp%1#0",
        "2"
      ]
    },
    "543": {
      "op": "*",
      "defined_out": [
        "original_offset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "original_offset#0",
        "tmp%2#0"
      ]
    },
    "544": {
      "op": "frame_dig -4",
      "stack_out": [
        "original_offset#0",
        "tmp%2#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "546": {
      "op": "swap",
      "stack_out": [
        "original_offset#0",
        "array_head_and_tail#0 (copy)",
        "tmp%2#0"
      ]
    },
    "547": {
      "op": "extract_uint16",
      "defined_out": [
        "next_item_offset#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0"
      ]
    },
    "548": {
      "op": "frame_dig -4",
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "550": {
      "op": "len",
      "defined_out": [
        "end_of_tail#0",
        "next_item_offset#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0"
      ]
    },
    "551": {
      "op": "frame_dig -1",
      "defined_out": [
        "array_length#0 (copy)",
        "end_of_tail#0",
        "next_item_offset#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "array_length#0 (copy)"
      ]
    },
    "553": {
      "op": "frame_dig -2",
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "array_length#0 (copy)",
        "index#0 (copy)"
      ]
    },
    "555": {
      "op": "-",
      "defined_out": [
        "end_of_tail#0",
        "next_item_offset#0",
        "original_offset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "tmp%3#0"
      ]
    },
    "556": {
      "op": "intc_2 // 1",
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "tmp%3#0",
        "1"
      ]
    },
    "557": {
      "op": "-",
      "defined_out": [
        "end_of_tail#0",
        "is_before_end#0",
        "next_item_offset#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "is_before_end#0"
      ]
    },
    "558": {
      "op": "dig 1",
      "defined_out": [
        "end_of_tail#0",
        "end_of_tail#0 (copy)",
        "is_before_end#0",
        "next_item_offset#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "is_before_end#0",
        "end_of_tail#0 (copy)"
      ]
    },
    "560": {
      "op": "uncover 3",
      "stack_out": [
        "original_offset#0",
        "end_of_tail#0",
        "is_before_end#0",
        "end_of_tail#0 (copy)",
        "next_item_offset#0"
      ]
    },
    "562": {
      "op": "uncover 2",
      "stack_out": [
        "original_offset#0",
        "end_of_tail#0",
        "end_of_tail#0 (copy)",
        "next_item_offset#0",
        "is_before_end#0"
      ]
    },
    "564": {
      "op": "select",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0"
      ]
    },
    "565": {
      "op": "dup",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "end_offset#0 (copy)",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "end_offset#0 (copy)"
      ]
    },
    "566": {
      "op": "dig 3",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "end_offset#0 (copy)",
        "original_offset#0",
        "original_offset#0 (copy)"
      ],
      "stack_out": [
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "end_offset#0 (copy)",
        "original_offset#0 (copy)"
      ]
    },
    "568": {
      "op": "-",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "original_item_length#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "original_item_length#0"
      ]
    },
    "569": {
      "op": "cover 3",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "original_item_length#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0"
      ]
    },
    "571": {
      "op": "frame_dig -3",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "new_item#0 (copy)",
        "original_item_length#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "new_item#0 (copy)"
      ]
    },
    "573": {
      "op": "len",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "new_item_length#0"
      ]
    },
    "574": {
      "op": "cover 3",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0"
      ]
    },
    "576": {
      "op": "frame_dig -4",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "578": {
      "op": "intc_0 // 0",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "array_head_and_tail#0 (copy)",
        "0"
      ]
    },
    "579": {
      "op": "uncover 4",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "array_head_and_tail#0 (copy)",
        "0",
        "original_offset#0"
      ]
    },
    "581": {
      "op": "substring3",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "tmp%4#0"
      ]
    },
    "582": {
      "op": "frame_dig -3",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "tmp%4#0",
        "new_item#0 (copy)"
      ]
    },
    "584": {
      "op": "concat",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "tmp%5#0"
      ]
    },
    "585": {
      "op": "frame_dig -4",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "tmp%5#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "587": {
      "op": "uncover 2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "end_of_tail#0",
        "tmp%5#0",
        "array_head_and_tail#0 (copy)",
        "end_offset#0"
      ]
    },
    "589": {
      "op": "uncover 3",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "tmp%5#0",
        "array_head_and_tail#0 (copy)",
        "end_offset#0",
        "end_of_tail#0"
      ]
    },
    "591": {
      "op": "substring3",
      "defined_out": [
        "new_item_length#0",
        "original_item_length#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "592": {
      "op": "concat",
      "defined_out": [
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0"
      ]
    },
    "593": {
      "op": "frame_dig -1",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "array_length#0 (copy)"
      ]
    },
    "595": {
      "op": "intc_1 // 2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "array_length#0 (copy)",
        "2"
      ]
    },
    "596": {
      "op": "*",
      "defined_out": [
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0"
      ]
    },
    "597": {
      "op": "frame_dig -2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "index#0 (copy)"
      ]
    },
    "599": {
      "op": "intc_2 // 1",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "index#0 (copy)",
        "1"
      ]
    },
    "600": {
      "op": "+",
      "defined_out": [
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "601": {
      "op": "intc_1 // 2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "tmp%8#0",
        "2"
      ]
    },
    "602": {
      "op": "*",
      "defined_out": [
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "603": {
      "op": "intc_1 // 2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "tmp%9#0",
        "2"
      ]
    },
    "604": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0"
      ]
    },
    "605": {
      "block": "static_array_replace_dynamic_element_for_header@1",
      "stack_in": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "607": {
      "op": "frame_dig 3",
      "defined_out": [
        "head_offset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%7#0"
      ]
    },
    "609": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "continue_looping%0#0"
      ]
    },
    "610": {
      "op": "bz static_array_replace_dynamic_element_after_for@4",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0"
      ]
    },
    "613": {
      "block": "static_array_replace_dynamic_element_for_body@2",
      "stack_in": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "new_head_and_tail#0"
      ]
    },
    "615": {
      "op": "dup",
      "defined_out": [
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "616": {
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)",
        "head_offset#0"
      ]
    },
    "618": {
      "op": "dup",
      "defined_out": [
        "head_offset#0",
        "head_offset#0 (copy)",
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)",
        "head_offset#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "619": {
      "op": "cover 3",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "621": {
      "op": "extract_uint16",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset#0"
      ]
    },
    "622": {
      "op": "frame_dig 1",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "tail_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset#0",
        "new_item_length#0"
      ]
    },
    "624": {
      "op": "+",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset#0"
      ]
    },
    "625": {
      "op": "frame_dig 0",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tail_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset#0",
        "original_item_length#0"
      ]
    },
    "627": {
      "op": "-",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset#0"
      ]
    },
    "628": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tmp%10#0"
      ]
    },
    "629": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tail_offset_bytes#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset_bytes#0"
      ]
    },
    "632": {
      "op": "swap",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "tail_offset_bytes#0",
        "new_head_and_tail#0"
      ]
    },
    "633": {
      "op": "uncover 2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "tail_offset_bytes#0",
        "new_head_and_tail#0",
        "head_offset#0"
      ]
    },
    "635": {
      "op": "uncover 2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "head_offset#0",
        "tail_offset_bytes#0"
      ]
    },
    "637": {
      "op": "replace3",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "new_head_and_tail#0"
      ]
    },
    "638": {
      "op": "frame_bury 2",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0"
      ]
    },
    "640": {
      "block": "static_array_replace_dynamic_element_for_footer@3",
      "stack_in": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "642": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "head_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "643": {
      "op": "+",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "644": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0"
      ]
    },
    "646": {
      "op": "b static_array_replace_dynamic_element_for_header@1"
    },
    "649": {
      "block": "static_array_replace_dynamic_element_after_for@4",
      "stack_in": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%7#0",
        "head_offset#0",
        "new_head_and_tail#0"
      ]
    },
    "651": {
      "op": "frame_bury 0"
    },
    "653": {
      "retsub": true,
      "op": "retsub"
    },
    "654": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "params": {},
      "block": "get_string1_block@0",
      "stack_in": [],
      "op": "pushbytes 0x000161",
      "defined_out": [
        "0x000161"
      ],
      "stack_out": [
        "0x000161"
      ]
    },
    "659": {
      "retsub": true,
      "op": "retsub"
    },
    "660": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "params": {},
      "block": "get_string2_block@0",
      "stack_in": [],
      "op": "pushbytes 0x0003626565",
      "defined_out": [
        "0x0003626565"
      ],
      "stack_out": [
        "0x0003626565"
      ]
    },
    "667": {
      "retsub": true,
      "op": "retsub"
    },
    "668": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_string3",
      "params": {},
      "block": "get_string3_block@0",
      "stack_in": [],
      "op": "pushbytes 0x000b48656c6c6f20576f726c64",
      "defined_out": [
        "0x000b48656c6c6f20576f726c64"
      ],
      "stack_out": [
        "0x000b48656c6c6f20576f726c64"
      ]
    },
    "683": {
      "retsub": true,
      "op": "retsub"
    },
    "684": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "params": {},
      "block": "get_uint1_block@0",
      "stack_in": [],
      "op": "pushbytes 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003"
      ],
      "stack_out": [
        "0x0000000000000003"
      ]
    },
    "694": {
      "retsub": true,
      "op": "retsub"
    },
    "695": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "params": {},
      "block": "get_uint2_block@0",
      "stack_in": [],
      "op": "pushbytes 0x0000040000000000",
      "defined_out": [
        "0x0000040000000000"
      ],
      "stack_out": [
        "0x0000040000000000"
      ]
    },
    "705": {
      "retsub": true,
      "op": "retsub"
    },
    "706": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_byte1",
      "params": {},
      "block": "get_byte1_block@0",
      "stack_in": [],
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x04"
      ],
      "stack_out": [
        "0x04"
      ]
    },
    "709": {
      "retsub": true,
      "op": "retsub"
    },
    "710": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_byte2",
      "params": {},
      "block": "get_byte2_block@0",
      "stack_in": [],
      "op": "pushbytes 0x05",
      "defined_out": [
        "0x05"
      ],
      "stack_out": [
        "0x05"
      ]
    },
    "713": {
      "retsub": true,
      "op": "retsub"
    },
    "714": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_byte3",
      "params": {},
      "block": "get_byte3_block@0",
      "stack_in": [],
      "op": "pushbytes 0x2a",
      "defined_out": [
        "0x2a"
      ],
      "stack_out": [
        "0x2a"
      ]
    },
    "717": {
      "retsub": true,
      "op": "retsub"
    },
    "718": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_byte4",
      "params": {},
      "block": "get_byte4_block@0",
      "stack_in": [],
      "op": "pushbytes 0xff",
      "defined_out": [
        "0xff"
      ],
      "stack_out": [
        "0xff"
      ]
    },
    "721": {
      "retsub": true,
      "op": "retsub"
    },
    "722": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr1",
      "params": {},
      "block": "get_u16_arr1_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "723": {
      "op": "pushbytes 0xffff",
      "defined_out": [
        "0x",
        "0xffff"
      ],
      "stack_out": [
        "0x",
        "0xffff"
      ]
    },
    "727": {
      "op": "concat",
      "defined_out": [
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0"
      ]
    },
    "728": {
      "op": "bytec_2 // 0x0000",
      "defined_out": [
        "0x0000",
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0",
        "0x0000"
      ]
    },
    "729": {
      "op": "concat",
      "defined_out": [
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0"
      ]
    },
    "730": {
      "op": "pushbytes 0x002a",
      "defined_out": [
        "0x002a",
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0",
        "0x002a"
      ]
    },
    "734": {
      "op": "concat",
      "defined_out": [
        "result%2#0"
      ],
      "stack_out": [
        "result%2#0"
      ]
    },
    "735": {
      "op": "bytec_3 // 0x0003",
      "defined_out": [
        "0x0003",
        "result%2#0"
      ],
      "stack_out": [
        "result%2#0",
        "0x0003"
      ]
    },
    "736": {
      "op": "swap",
      "stack_out": [
        "0x0003",
        "result%2#0"
      ]
    },
    "737": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "738": {
      "retsub": true,
      "op": "retsub"
    },
    "739": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr2",
      "params": {},
      "block": "get_u16_arr2_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "740": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x",
        "0x0001"
      ],
      "stack_out": [
        "0x",
        "0x0001"
      ]
    },
    "744": {
      "op": "concat",
      "defined_out": [
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0"
      ]
    },
    "745": {
      "op": "bytec_1 // 0x0002",
      "defined_out": [
        "0x0002",
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0",
        "0x0002"
      ]
    },
    "746": {
      "op": "concat",
      "defined_out": [
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0"
      ]
    },
    "747": {
      "op": "bytec_3 // 0x0003",
      "defined_out": [
        "0x0003",
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0",
        "0x0003"
      ]
    },
    "748": {
      "op": "concat",
      "defined_out": [
        "result%2#0"
      ],
      "stack_out": [
        "result%2#0"
      ]
    },
    "749": {
      "op": "bytec 4 // 0x0004",
      "defined_out": [
        "0x0004",
        "result%2#0"
      ],
      "stack_out": [
        "result%2#0",
        "0x0004"
      ]
    },
    "751": {
      "op": "concat",
      "defined_out": [
        "result%3#0"
      ],
      "stack_out": [
        "result%3#0"
      ]
    },
    "752": {
      "op": "bytec 4 // 0x0004",
      "stack_out": [
        "result%3#0",
        "0x0004"
      ]
    },
    "754": {
      "op": "swap",
      "stack_out": [
        "0x0004",
        "result%3#0"
      ]
    },
    "755": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "756": {
      "retsub": true,
      "op": "retsub"
    },
    "757": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements",
      "params": {},
      "block": "test_static_elements_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte1",
      "op": "callsub get_byte1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "760": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte2",
      "op": "callsub get_byte2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "763": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "764": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "765": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "766": {
      "op": "concat",
      "defined_out": [
        "result%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "result%0#0"
      ]
    },
    "767": {
      "op": "swap",
      "stack_out": [
        "result%0#0",
        "tmp%1#0"
      ]
    },
    "768": {
      "op": "concat",
      "defined_out": [
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0"
      ]
    },
    "769": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "result%1#0",
        "0x"
      ]
    },
    "770": {
      "op": "swap",
      "stack_out": [
        "0x",
        "result%1#0"
      ]
    },
    "771": {
      "op": "concat",
      "defined_out": [
        "byte_array1#0"
      ],
      "stack_out": [
        "byte_array1#0"
      ]
    },
    "772": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte3",
      "op": "callsub get_byte3",
      "defined_out": [
        "byte_array1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "byte_array1#0",
        "tmp%2#0"
      ]
    },
    "775": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte4",
      "op": "callsub get_byte4",
      "defined_out": [
        "byte_array1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "byte_array1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "778": {
      "op": "swap",
      "stack_out": [
        "byte_array1#0",
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "779": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "byte_array1#0",
        "tmp%3#0",
        "tmp%2#0",
        "0x"
      ]
    },
    "780": {
      "op": "swap",
      "stack_out": [
        "byte_array1#0",
        "tmp%3#0",
        "0x",
        "tmp%2#0"
      ]
    },
    "781": {
      "op": "concat",
      "defined_out": [
        "byte_array1#0",
        "result%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "byte_array1#0",
        "tmp%3#0",
        "result%2#0"
      ]
    },
    "782": {
      "op": "swap",
      "stack_out": [
        "byte_array1#0",
        "result%2#0",
        "tmp%3#0"
      ]
    },
    "783": {
      "op": "concat",
      "defined_out": [
        "byte_array1#0",
        "result%3#0"
      ],
      "stack_out": [
        "byte_array1#0",
        "result%3#0"
      ]
    },
    "784": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "byte_array1#0",
        "result%3#0",
        "0x"
      ]
    },
    "785": {
      "op": "swap",
      "stack_out": [
        "byte_array1#0",
        "0x",
        "result%3#0"
      ]
    },
    "786": {
      "op": "concat",
      "defined_out": [
        "byte_array1#0",
        "byte_array2#0"
      ],
      "stack_out": [
        "byte_array1#0",
        "byte_array2#0"
      ]
    },
    "787": {
      "op": "swap",
      "stack_out": [
        "byte_array2#0",
        "byte_array1#0"
      ]
    },
    "788": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "byte_array2#0",
        "copy%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "byte_array2#0",
        "copy%0#0",
        "tmp%4#0"
      ]
    },
    "791": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "byte_array2#0",
        "copy%0#0",
        "tmp%4#0",
        "0x"
      ]
    },
    "792": {
      "op": "swap",
      "stack_out": [
        "byte_array2#0",
        "copy%0#0",
        "0x",
        "tmp%4#0"
      ]
    },
    "793": {
      "op": "concat",
      "defined_out": [
        "byte_array2#0",
        "copy%0#0",
        "encoded%0#0"
      ],
      "stack_out": [
        "byte_array2#0",
        "copy%0#0",
        "encoded%0#0"
      ]
    },
    "794": {
      "op": "swap",
      "stack_out": [
        "byte_array2#0",
        "encoded%0#0",
        "copy%0#0"
      ]
    },
    "795": {
      "op": "concat",
      "defined_out": [
        "byte_array2#0",
        "encoded%1#0"
      ],
      "stack_out": [
        "byte_array2#0",
        "encoded%1#0"
      ]
    },
    "796": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "byte_array2#0",
        "encoded%1#0",
        "0x"
      ]
    },
    "797": {
      "op": "concat",
      "defined_out": [
        "byte_array2#0",
        "struct1#0"
      ],
      "stack_out": [
        "byte_array2#0",
        "struct1#0"
      ]
    },
    "798": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "byte_array2#0",
        "struct1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "byte_array2#0",
        "struct1#0",
        "tmp%5#0"
      ]
    },
    "801": {
      "op": "uncover 2",
      "defined_out": [
        "copy%1#0",
        "struct1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "copy%1#0"
      ]
    },
    "803": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "copy%1#0",
        "tmp%5#0"
      ]
    },
    "804": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "copy%1#0",
        "tmp%5#0",
        "0x"
      ]
    },
    "805": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "copy%1#0",
        "0x",
        "tmp%5#0"
      ]
    },
    "806": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "encoded%3#0",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%1#0",
        "encoded%3#0"
      ]
    },
    "807": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "encoded%3#0",
        "copy%1#0"
      ]
    },
    "808": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "encoded%4#0"
      ]
    },
    "809": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "encoded%4#0",
        "0x"
      ]
    },
    "810": {
      "op": "concat",
      "defined_out": [
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0"
      ]
    },
    "811": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0"
      ]
    },
    "812": {
      "op": "dupn 2",
      "defined_out": [
        "copy%2#0",
        "copy%3#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%2#0",
        "copy%3#0",
        "struct1#0"
      ]
    },
    "814": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct2#0",
        "copy%2#0",
        "copy%3#0",
        "struct1#0",
        "0x"
      ]
    },
    "815": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "copy%3#0",
        "struct1#0",
        "0x",
        "copy%2#0"
      ]
    },
    "817": {
      "op": "concat",
      "defined_out": [
        "copy%3#0",
        "result%4#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%3#0",
        "struct1#0",
        "result%4#0"
      ]
    },
    "818": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "result%4#0",
        "copy%3#0"
      ]
    },
    "820": {
      "op": "concat",
      "defined_out": [
        "result%5#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "result%5#0"
      ]
    },
    "821": {
      "op": "bytec_1 // 0x0002",
      "defined_out": [
        "0x0002",
        "result%5#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "result%5#0",
        "0x0002"
      ]
    },
    "822": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "0x0002",
        "result%5#0"
      ]
    },
    "823": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "824": {
      "op": "dig 2",
      "defined_out": [
        "array#0",
        "copy%4#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "copy%4#0"
      ]
    },
    "826": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "copy%4#0",
        "array#0"
      ]
    },
    "827": {
      "op": "dup",
      "defined_out": [
        "array#0",
        "array#0 (copy)",
        "copy%4#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "copy%4#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "828": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0",
        "array#0 (copy)",
        "copy%4#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "copy%4#0",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "829": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_length%1#0",
        "copy%4#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "copy%4#0",
        "array#0",
        "array_length%1#0"
      ]
    },
    "830": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "array#0",
        "array_length%1#0",
        "copy%4#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "copy%4#0",
        "array#0",
        "array_length%1#0",
        "1"
      ]
    },
    "831": {
      "op": ">",
      "defined_out": [
        "array#0",
        "copy%4#0",
        "index_is_in_bounds%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "copy%4#0",
        "array#0",
        "index_is_in_bounds%0#0"
      ]
    },
    "832": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "copy%4#0",
        "array#0"
      ]
    },
    "833": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "array#0",
        "copy%4#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "copy%4#0",
        "array#0",
        "12"
      ]
    },
    "835": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "12",
        "copy%4#0"
      ]
    },
    "837": {
      "op": "replace3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "838": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "839": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "840": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "841": {
      "op": "extract 2 0",
      "defined_out": [
        "array#0",
        "array_trimmed%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_trimmed%0#0"
      ]
    },
    "844": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_trimmed%0#0",
        "0"
      ]
    },
    "845": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "10",
        "array#0",
        "array_trimmed%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_trimmed%0#0",
        "0",
        "10"
      ]
    },
    "847": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_trimmed%0#0",
        "bytes_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_trimmed%0#0",
        "bytes_offset%0#0"
      ]
    },
    "848": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_trimmed%0#0",
        "bytes_offset%0#0",
        "10"
      ]
    },
    "850": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array#0",
        "encoded_element%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "encoded_element%0#0"
      ]
    },
    "851": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "852": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "853": {
      "op": "extract 2 0",
      "defined_out": [
        "array#0",
        "array_trimmed%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_trimmed%1#0"
      ]
    },
    "856": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_trimmed%1#0",
        "1"
      ]
    },
    "857": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_trimmed%1#0",
        "1",
        "10"
      ]
    },
    "859": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_trimmed%1#0",
        "bytes_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_trimmed%1#0",
        "bytes_offset%1#0"
      ]
    },
    "860": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_trimmed%1#0",
        "bytes_offset%1#0",
        "10"
      ]
    },
    "862": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array#0",
        "encoded_element%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "encoded_element%1#0"
      ]
    },
    "863": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "864": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "10"
      ]
    },
    "866": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "op": "callsub dynamic_array_pop_fixed_size",
      "defined_out": [
        "array#0",
        "popped%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "popped%0#0",
        "array#0"
      ]
    },
    "869": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "popped%0#0"
      ]
    },
    "870": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "array#0",
        "popped%0#0",
        "struct2#0"
      ]
    },
    "872": {
      "op": "==",
      "defined_out": [
        "array#0",
        "struct1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "tmp%6#0"
      ]
    },
    "873": {
      "op": "assert",
      "stack_out": [
        "struct1#0",
        "array#0"
      ]
    },
    "874": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "struct1#0",
        "array#0",
        "10"
      ]
    },
    "876": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "op": "callsub dynamic_array_pop_fixed_size",
      "defined_out": [
        "data%1#0",
        "popped%1#0",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "popped%1#0",
        "data%1#0"
      ]
    },
    "879": {
      "op": "pop",
      "stack_out": [
        "struct1#0",
        "popped%1#0"
      ]
    },
    "880": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "881": {
      "op": "assert",
      "stack_out": []
    },
    "882": {
      "retsub": true,
      "op": "retsub"
    },
    "883": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements",
      "params": {},
      "block": "test_dynamic_elements_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "886": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "889": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "890": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "891": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "tmp%0#0 (copy)"
      ]
    },
    "893": {
      "op": "concat",
      "defined_out": [
        "tail%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tail%0#0"
      ]
    },
    "894": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tail%0#0",
        "tmp%0#0"
      ]
    },
    "895": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tail%0#0",
        "data_length%0#0"
      ]
    },
    "896": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "data_length%0#0",
        "tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tail%0#0",
        "data_length%0#0",
        "4"
      ]
    },
    "897": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%0#0",
        "tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tail%0#0",
        "current_tail_offset%0#0"
      ]
    },
    "898": {
      "op": "intc_3 // 4",
      "stack_out": [
        "tmp%1#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "4"
      ]
    },
    "899": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "current_tail_offset%0#0",
        "tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "as_bytes%0#0"
      ]
    },
    "900": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0",
        "tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "903": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%1#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "904": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "905": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%0#0",
        "tail%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%0#0"
      ]
    },
    "906": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "current_tail_offset%0#0",
        "encoded%0#0",
        "tail%0#0"
      ]
    },
    "908": {
      "op": "uncover 3",
      "stack_out": [
        "current_tail_offset%0#0",
        "encoded%0#0",
        "tail%0#0",
        "tmp%1#0"
      ]
    },
    "910": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%0#0",
        "tail%1#0"
      ],
      "stack_out": [
        "current_tail_offset%0#0",
        "encoded%0#0",
        "tail%1#0"
      ]
    },
    "911": {
      "op": "swap",
      "stack_out": [
        "current_tail_offset%0#0",
        "tail%1#0",
        "encoded%0#0"
      ]
    },
    "912": {
      "op": "uncover 2",
      "stack_out": [
        "tail%1#0",
        "encoded%0#0",
        "current_tail_offset%0#0"
      ]
    },
    "914": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded%0#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%0#0",
        "as_bytes%1#0"
      ]
    },
    "915": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%0#0",
        "offset_as_uint16%1#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%0#0",
        "offset_as_uint16%1#0"
      ]
    },
    "918": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%1#0"
      ]
    },
    "919": {
      "op": "swap",
      "stack_out": [
        "encoded%1#0",
        "tail%1#0"
      ]
    },
    "920": {
      "op": "concat",
      "defined_out": [
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0"
      ]
    },
    "921": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string3",
      "op": "callsub get_string3",
      "defined_out": [
        "struct1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%2#0"
      ]
    },
    "924": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "struct1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "927": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "928": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tmp%2#0",
        "0x"
      ]
    },
    "929": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "struct1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tmp%2#0",
        "0x",
        "tmp%2#0 (copy)"
      ]
    },
    "931": {
      "op": "concat",
      "defined_out": [
        "struct1#0",
        "tail%2#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tmp%2#0",
        "tail%2#0"
      ]
    },
    "932": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tail%2#0",
        "tmp%2#0"
      ]
    },
    "933": {
      "op": "len",
      "defined_out": [
        "data_length%2#0",
        "struct1#0",
        "tail%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tail%2#0",
        "data_length%2#0"
      ]
    },
    "934": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tail%2#0",
        "data_length%2#0",
        "4"
      ]
    },
    "935": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "struct1#0",
        "tail%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tail%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "936": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "4"
      ]
    },
    "937": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "current_tail_offset%2#0",
        "struct1#0",
        "tail%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "as_bytes%2#0"
      ]
    },
    "938": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0",
        "struct1#0",
        "tail%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "941": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0",
        "0x"
      ]
    },
    "942": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "0x",
        "offset_as_uint16%2#0"
      ]
    },
    "943": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "struct1#0",
        "tail%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0"
      ]
    },
    "944": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "tail%2#0"
      ]
    },
    "946": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "tail%2#0",
        "tmp%3#0"
      ]
    },
    "948": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "struct1#0",
        "tail%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "tail%3#0"
      ]
    },
    "949": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "current_tail_offset%2#0",
        "tail%3#0",
        "encoded%3#0"
      ]
    },
    "950": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "tail%3#0",
        "encoded%3#0",
        "current_tail_offset%2#0"
      ]
    },
    "952": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded%3#0",
        "struct1#0",
        "tail%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tail%3#0",
        "encoded%3#0",
        "as_bytes%3#0"
      ]
    },
    "953": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%3#0",
        "offset_as_uint16%3#0",
        "struct1#0",
        "tail%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tail%3#0",
        "encoded%3#0",
        "offset_as_uint16%3#0"
      ]
    },
    "956": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "struct1#0",
        "tail%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tail%3#0",
        "encoded%4#0"
      ]
    },
    "957": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "encoded%4#0",
        "tail%3#0"
      ]
    },
    "958": {
      "op": "concat",
      "defined_out": [
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0"
      ]
    },
    "959": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0"
      ]
    },
    "960": {
      "op": "dupn 2",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "struct1#0"
      ]
    },
    "962": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "4"
      ]
    },
    "963": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "as_bytes%4#0"
      ]
    },
    "964": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "next_item_head%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "next_item_head%0#0"
      ]
    },
    "967": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "next_item_head%0#0",
        "0x"
      ]
    },
    "968": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "0x",
        "next_item_head%0#0"
      ]
    },
    "969": {
      "op": "concat",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "result%0#0"
      ]
    },
    "970": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0"
      ]
    },
    "971": {
      "op": "dig 3",
      "defined_out": [
        "copy%0#0",
        "copy%0#0 (copy)",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "copy%0#0 (copy)"
      ]
    },
    "973": {
      "op": "len",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "next_item_len%0#0",
        "result%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "next_item_len%0#0"
      ]
    },
    "974": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "next_item_len%0#0",
        "4"
      ]
    },
    "975": {
      "op": "+",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "struct2#0",
        "tail_offset%0#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "tail_offset%0#0"
      ]
    },
    "976": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "as_bytes%5#0"
      ]
    },
    "977": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "next_item_head%1#0",
        "result%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "next_item_head%1#0"
      ]
    },
    "980": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "next_item_head%1#0",
        "result%0#0"
      ]
    },
    "982": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "result%0#0",
        "next_item_head%1#0"
      ]
    },
    "983": {
      "op": "concat",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "result%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "result%1#0"
      ]
    },
    "984": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "copy%1#0",
        "struct1#0",
        "result%1#0",
        "copy%0#0"
      ]
    },
    "986": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "result%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "copy%1#0",
        "struct1#0",
        "result%2#0"
      ]
    },
    "987": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "result%2#0",
        "copy%1#0"
      ]
    },
    "989": {
      "op": "concat",
      "defined_out": [
        "result%3#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "result%3#0"
      ]
    },
    "990": {
      "op": "bytec_1 // 0x0002",
      "defined_out": [
        "0x0002",
        "result%3#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "result%3#0",
        "0x0002"
      ]
    },
    "991": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "0x0002",
        "result%3#0"
      ]
    },
    "992": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "993": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "copy%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "copy%2#0"
      ]
    },
    "995": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "array#0",
        "copy%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "copy%2#0",
        "2"
      ]
    },
    "996": {
      "op": "itob",
      "defined_out": [
        "array#0",
        "as_bytes%6#0",
        "copy%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "copy%2#0",
        "as_bytes%6#0"
      ]
    },
    "997": {
      "op": "extract 6 2",
      "defined_out": [
        "array#0",
        "copy%2#0",
        "next_item_head%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "copy%2#0",
        "next_item_head%2#0"
      ]
    },
    "1000": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "copy%2#0",
        "next_item_head%2#0",
        "0x"
      ]
    },
    "1001": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "copy%2#0",
        "0x",
        "next_item_head%2#0"
      ]
    },
    "1002": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "copy%2#0",
        "result%4#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "copy%2#0",
        "result%4#0"
      ]
    },
    "1003": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "result%4#0",
        "copy%2#0"
      ]
    },
    "1004": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "result%5#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "result%5#0"
      ]
    },
    "1005": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array#0 (copy)",
        "result%5#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "result%5#0",
        "array#0 (copy)"
      ]
    },
    "1007": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0",
        "array#0 (copy)",
        "result%5#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "result%5#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1008": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "l_count%0#0",
        "result%5#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "result%5#0",
        "l_count%0#0"
      ]
    },
    "1009": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "result%5#0",
        "l_count%0#0",
        "array#0"
      ]
    },
    "1011": {
      "op": "extract 2 0",
      "defined_out": [
        "l_count%0#0",
        "l_head_and_tail%0#0",
        "result%5#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "result%5#0",
        "l_count%0#0",
        "l_head_and_tail%0#0"
      ]
    },
    "1014": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "l_count%0#0",
        "l_head_and_tail%0#0",
        "result%5#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "result%5#0",
        "l_count%0#0",
        "l_head_and_tail%0#0",
        "1"
      ]
    },
    "1015": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "l_count%0#0",
        "l_head_and_tail%0#0",
        "1",
        "result%5#0"
      ]
    },
    "1017": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1020": {
      "op": "dig 2",
      "defined_out": [
        "array#0",
        "copy%3#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "copy%3#0"
      ]
    },
    "1022": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "copy%3#0",
        "1"
      ]
    },
    "1023": {
      "callsub": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "op": "callsub dynamic_array_replace_dynamic_element",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1026": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1027": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1028": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1029": {
      "op": "extract 2 0",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1032": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "1033": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%0#0",
        "0",
        "2"
      ]
    },
    "1034": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset_offset%0#0"
      ]
    },
    "1035": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset_offset%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1037": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset_offset%0#0"
      ]
    },
    "1038": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1039": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1041": {
      "op": "dig 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array#0 (copy)"
      ]
    },
    "1043": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1044": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0"
      ]
    },
    "1045": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "0"
      ]
    },
    "1046": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "0",
        "1"
      ]
    },
    "1047": {
      "op": "+",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_offset%0#0",
        "next_index%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "next_index%0#0"
      ]
    },
    "1048": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "next_index%0#0",
        "array_length%0#0"
      ]
    },
    "1049": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_offset%0#0",
        "next_index%0#0",
        "next_index%0#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "next_index%0#0",
        "array_length%0#0",
        "next_index%0#0 (copy)"
      ]
    },
    "1051": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "next_index%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "next_index%0#0",
        "has_next%0#0"
      ]
    },
    "1052": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "next_index%0#0"
      ]
    },
    "1053": {
      "op": "dig 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "next_index%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1055": {
      "op": "len",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "next_index%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "next_index%0#0",
        "end_of_array%0#0"
      ]
    },
    "1056": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_index%0#0"
      ]
    },
    "1058": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_index%0#0",
        "2"
      ]
    },
    "1059": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "next_item_offset_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_item_offset_offset%0#0"
      ]
    },
    "1060": {
      "op": "dig 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_item_offset_offset%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1062": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "array_head_and_tail%0#0 (copy)",
        "next_item_offset_offset%0#0"
      ]
    },
    "1063": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_item_offset%0#0"
      ]
    },
    "1064": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "next_item_offset%0#0",
        "end_of_array%0#0"
      ]
    },
    "1066": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "end_of_array%0#0",
        "next_item_offset%0#0"
      ]
    },
    "1067": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "next_item_offset%0#0",
        "has_next%0#0"
      ]
    },
    "1069": {
      "op": "select",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "end_offset%0#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_offset%0#0"
      ]
    },
    "1070": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%0#0",
        "array#0",
        "end_offset%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1071": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "end_offset%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1073": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "end_offset%0#0"
      ]
    },
    "1075": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "substring3%0#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "substring3%0#0"
      ]
    },
    "1076": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1077": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1078": {
      "op": "extract 2 0",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%1#0"
      ]
    },
    "1081": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "1"
      ]
    },
    "1082": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "1",
        "2"
      ]
    },
    "1083": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset_offset%1#0"
      ]
    },
    "1084": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "array_head_and_tail%1#0 (copy)",
        "item_offset_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset_offset%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "1086": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_head_and_tail%1#0 (copy)",
        "item_offset_offset%1#0"
      ]
    },
    "1087": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "1088": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0"
      ]
    },
    "1090": {
      "op": "dig 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array#0 (copy)"
      ]
    },
    "1092": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1093": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0"
      ]
    },
    "1094": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "1"
      ]
    },
    "1095": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "1",
        "1"
      ]
    },
    "1096": {
      "op": "+",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_offset%1#0",
        "next_index%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "next_index%1#0"
      ]
    },
    "1097": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "next_index%1#0",
        "array_length%1#0"
      ]
    },
    "1098": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_offset%1#0",
        "next_index%1#0",
        "next_index%1#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "next_index%1#0",
        "array_length%1#0",
        "next_index%1#0 (copy)"
      ]
    },
    "1100": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "item_offset%1#0",
        "next_index%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "next_index%1#0",
        "has_next%1#0"
      ]
    },
    "1101": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "next_index%1#0"
      ]
    },
    "1102": {
      "op": "dig 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "next_index%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "1104": {
      "op": "len",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "item_offset%1#0",
        "next_index%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "next_index%1#0",
        "end_of_array%1#0"
      ]
    },
    "1105": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_index%1#0"
      ]
    },
    "1107": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_index%1#0",
        "2"
      ]
    },
    "1108": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "item_offset%1#0",
        "next_item_offset_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_item_offset_offset%1#0"
      ]
    },
    "1109": {
      "op": "dig 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_item_offset_offset%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "1111": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "array_head_and_tail%1#0 (copy)",
        "next_item_offset_offset%1#0"
      ]
    },
    "1112": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "item_offset%1#0",
        "next_item_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_item_offset%1#0"
      ]
    },
    "1113": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "next_item_offset%1#0",
        "end_of_array%1#0"
      ]
    },
    "1115": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "end_of_array%1#0",
        "next_item_offset%1#0"
      ]
    },
    "1116": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "next_item_offset%1#0",
        "has_next%1#0"
      ]
    },
    "1118": {
      "op": "select",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "end_offset%1#0",
        "item_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_offset%1#0"
      ]
    },
    "1119": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%1#0",
        "array#0",
        "end_offset%1#0",
        "array_head_and_tail%1#0"
      ]
    },
    "1120": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "end_offset%1#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "1122": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "end_offset%1#0"
      ]
    },
    "1124": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "substring3%1#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "substring3%1#0"
      ]
    },
    "1125": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1126": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1127": {
      "op": "extract 2 0",
      "defined_out": [
        "array#0",
        "array_head_and_tail%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%2#0"
      ]
    },
    "1130": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%2#0",
        "2"
      ]
    },
    "1131": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%2#0",
        "2",
        "2"
      ]
    },
    "1132": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%2#0",
        "item_offset_offset%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%2#0",
        "item_offset_offset%2#0"
      ]
    },
    "1133": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset_offset%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%2#0",
        "item_offset_offset%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "1135": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset_offset%2#0"
      ]
    },
    "1136": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ]
    },
    "1137": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0"
      ]
    },
    "1139": {
      "op": "dig 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "array#0 (copy)"
      ]
    },
    "1141": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1142": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%2#0",
        "array_length%2#0",
        "item_offset%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "array_length%2#0"
      ]
    },
    "1143": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "array_length%2#0",
        "2"
      ]
    },
    "1144": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "array_length%2#0",
        "2",
        "1"
      ]
    },
    "1145": {
      "op": "+",
      "defined_out": [
        "array#0",
        "array_head_and_tail%2#0",
        "array_length%2#0",
        "item_offset%2#0",
        "next_index%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "array_length%2#0",
        "next_index%2#0"
      ]
    },
    "1146": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "next_index%2#0",
        "array_length%2#0"
      ]
    },
    "1147": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%2#0",
        "array_length%2#0",
        "item_offset%2#0",
        "next_index%2#0",
        "next_index%2#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "next_index%2#0",
        "array_length%2#0",
        "next_index%2#0 (copy)"
      ]
    },
    "1149": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "array#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "next_index%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "next_index%2#0",
        "has_next%2#0"
      ]
    },
    "1150": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "next_index%2#0"
      ]
    },
    "1151": {
      "op": "dig 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "next_index%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "1153": {
      "op": "len",
      "defined_out": [
        "array#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "next_index%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "next_index%2#0",
        "end_of_array%2#0"
      ]
    },
    "1154": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "next_index%2#0"
      ]
    },
    "1156": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "next_index%2#0",
        "2"
      ]
    },
    "1157": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "next_item_offset_offset%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "next_item_offset_offset%2#0"
      ]
    },
    "1158": {
      "op": "dig 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "next_item_offset_offset%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "1160": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "array_head_and_tail%2#0 (copy)",
        "next_item_offset_offset%2#0"
      ]
    },
    "1161": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "next_item_offset%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "next_item_offset%2#0"
      ]
    },
    "1162": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "next_item_offset%2#0",
        "end_of_array%2#0"
      ]
    },
    "1164": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "next_item_offset%2#0"
      ]
    },
    "1165": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "next_item_offset%2#0",
        "has_next%2#0"
      ]
    },
    "1167": {
      "op": "select",
      "defined_out": [
        "array#0",
        "array_head_and_tail%2#0",
        "end_offset%2#0",
        "item_offset%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "array_head_and_tail%2#0",
        "end_offset%2#0"
      ]
    },
    "1168": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "item_offset%2#0",
        "array#0",
        "end_offset%2#0",
        "array_head_and_tail%2#0"
      ]
    },
    "1169": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "end_offset%2#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ]
    },
    "1171": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "end_offset%2#0"
      ]
    },
    "1173": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "substring3%2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "substring3%2#0"
      ]
    },
    "1174": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1175": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "array#0",
        "popped%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "popped%0#0",
        "array#0"
      ]
    },
    "1178": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "popped%0#0"
      ]
    },
    "1179": {
      "op": "dig 2",
      "defined_out": [
        "array#0",
        "popped%0#0",
        "struct1#0",
        "struct1#0 (copy)",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "popped%0#0",
        "struct1#0 (copy)"
      ]
    },
    "1181": {
      "op": "==",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "tmp%4#0"
      ]
    },
    "1182": {
      "op": "assert",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1183": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1184": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1185": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "array#0",
        "popped%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "popped%1#0",
        "array#0"
      ]
    },
    "1188": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "popped%1#0"
      ]
    },
    "1189": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "array#0",
        "popped%1#0",
        "struct2#0"
      ]
    },
    "1191": {
      "op": "==",
      "defined_out": [
        "array#0",
        "struct1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "tmp%5#0"
      ]
    },
    "1192": {
      "op": "assert",
      "stack_out": [
        "struct1#0",
        "array#0"
      ]
    },
    "1193": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1194": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "array#0"
      ]
    },
    "1195": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "array#0",
        "popped%2#0",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "popped%2#0",
        "array#0"
      ]
    },
    "1198": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "array#0",
        "popped%2#0"
      ]
    },
    "1199": {
      "op": "uncover 2",
      "stack_out": [
        "array#0",
        "popped%2#0",
        "struct1#0"
      ]
    },
    "1201": {
      "op": "==",
      "defined_out": [
        "array#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array#0",
        "tmp%6#0"
      ]
    },
    "1202": {
      "op": "assert",
      "stack_out": [
        "array#0"
      ]
    },
    "1203": {
      "op": "log",
      "stack_out": []
    },
    "1204": {
      "retsub": true,
      "op": "retsub"
    },
    "1205": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements",
      "params": {},
      "block": "test_mixed_single_dynamic_elements_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1208": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1211": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1212": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1215": {
      "op": "cover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1217": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "1218": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "1219": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "encoded%0#0"
      ]
    },
    "1220": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "encoded%0#0",
        "tmp%1#0"
      ]
    },
    "1221": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%2#0",
        "encoded%0#0",
        "tmp%1#0",
        "0x"
      ]
    },
    "1222": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "encoded%0#0",
        "0x",
        "tmp%1#0"
      ]
    },
    "1223": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "tail%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded%0#0",
        "tail%0#0"
      ]
    },
    "1224": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tail%0#0",
        "encoded%0#0"
      ]
    },
    "1225": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded%0#0",
        "tail%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tail%0#0",
        "encoded%0#0",
        "18"
      ]
    },
    "1227": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "encoded%0#0",
        "tail%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tail%0#0",
        "encoded%0#0",
        "as_bytes%0#0"
      ]
    },
    "1228": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%0#0",
        "offset_as_uint16%0#0",
        "tail%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tail%0#0",
        "encoded%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "1231": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "tail%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tail%0#0",
        "encoded%1#0"
      ]
    },
    "1232": {
      "op": "uncover 2",
      "stack_out": [
        "tail%0#0",
        "encoded%1#0",
        "tmp%2#0"
      ]
    },
    "1234": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%2#0"
      ]
    },
    "1235": {
      "op": "swap",
      "stack_out": [
        "encoded%2#0",
        "tail%0#0"
      ]
    },
    "1236": {
      "op": "concat",
      "defined_out": [
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0"
      ]
    },
    "1237": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "struct1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%3#0"
      ]
    },
    "1240": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "struct1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1243": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "tmp%3#0"
      ]
    },
    "1244": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "struct1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1247": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0"
      ]
    },
    "1249": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0",
        "0x"
      ]
    },
    "1250": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "tmp%4#0",
        "0x",
        "tmp%3#0"
      ]
    },
    "1251": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "struct1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "tmp%4#0",
        "encoded%4#0"
      ]
    },
    "1252": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "encoded%4#0",
        "tmp%4#0"
      ]
    },
    "1253": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "encoded%4#0",
        "tmp%4#0",
        "0x"
      ]
    },
    "1254": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "encoded%4#0",
        "0x",
        "tmp%4#0"
      ]
    },
    "1255": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "struct1#0",
        "tail%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "encoded%4#0",
        "tail%1#0"
      ]
    },
    "1256": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "tail%1#0",
        "encoded%4#0"
      ]
    },
    "1257": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "tail%1#0",
        "encoded%4#0",
        "18"
      ]
    },
    "1259": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded%4#0",
        "struct1#0",
        "tail%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "tail%1#0",
        "encoded%4#0",
        "as_bytes%1#0"
      ]
    },
    "1260": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%4#0",
        "offset_as_uint16%1#0",
        "struct1#0",
        "tail%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "tail%1#0",
        "encoded%4#0",
        "offset_as_uint16%1#0"
      ]
    },
    "1263": {
      "op": "concat",
      "defined_out": [
        "encoded%5#0",
        "struct1#0",
        "tail%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "tail%1#0",
        "encoded%5#0"
      ]
    },
    "1264": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "tail%1#0",
        "encoded%5#0",
        "tmp%5#0"
      ]
    },
    "1266": {
      "op": "concat",
      "defined_out": [
        "encoded%6#0",
        "struct1#0",
        "tail%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "tail%1#0",
        "encoded%6#0"
      ]
    },
    "1267": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "encoded%6#0",
        "tail%1#0"
      ]
    },
    "1268": {
      "op": "concat",
      "defined_out": [
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0"
      ]
    },
    "1269": {
      "op": "bytec_2 // 0x0000",
      "defined_out": [
        "0x0000",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "0x0000"
      ]
    },
    "1270": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "0x0000",
        "0x"
      ]
    },
    "1271": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1272": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0"
      ]
    },
    "1273": {
      "op": "dup",
      "defined_out": [
        "array#0",
        "copy%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0",
        "copy%0#0"
      ]
    },
    "1274": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "array#0",
        "copy%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0",
        "copy%0#0",
        "2"
      ]
    },
    "1275": {
      "op": "itob",
      "defined_out": [
        "array#0",
        "as_bytes%2#0",
        "copy%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0",
        "copy%0#0",
        "as_bytes%2#0"
      ]
    },
    "1276": {
      "op": "extract 6 2",
      "defined_out": [
        "array#0",
        "copy%0#0",
        "next_item_head%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0",
        "copy%0#0",
        "next_item_head%0#0"
      ]
    },
    "1279": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0",
        "copy%0#0",
        "next_item_head%0#0",
        "0x"
      ]
    },
    "1280": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0",
        "copy%0#0",
        "0x",
        "next_item_head%0#0"
      ]
    },
    "1281": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "copy%0#0",
        "result%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0",
        "copy%0#0",
        "result%0#0"
      ]
    },
    "1282": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0",
        "result%0#0",
        "copy%0#0"
      ]
    },
    "1283": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "result%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0",
        "result%1#0"
      ]
    },
    "1284": {
      "op": "dig 2",
      "defined_out": [
        "array#0",
        "array#0 (copy)",
        "result%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0",
        "result%1#0",
        "array#0 (copy)"
      ]
    },
    "1286": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0",
        "array#0 (copy)",
        "result%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0",
        "result%1#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1287": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "l_count%0#0",
        "result%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "struct2#0",
        "result%1#0",
        "l_count%0#0"
      ]
    },
    "1288": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "result%1#0",
        "l_count%0#0",
        "array#0"
      ]
    },
    "1290": {
      "op": "extract 2 0",
      "defined_out": [
        "l_count%0#0",
        "l_head_and_tail%0#0",
        "result%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "result%1#0",
        "l_count%0#0",
        "l_head_and_tail%0#0"
      ]
    },
    "1293": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "l_count%0#0",
        "l_head_and_tail%0#0",
        "result%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "result%1#0",
        "l_count%0#0",
        "l_head_and_tail%0#0",
        "1"
      ]
    },
    "1294": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "l_count%0#0",
        "l_head_and_tail%0#0",
        "1",
        "result%1#0"
      ]
    },
    "1296": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1299": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "copy%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "copy%1#0"
      ]
    },
    "1301": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "copy%1#0",
        "2"
      ]
    },
    "1302": {
      "op": "itob",
      "defined_out": [
        "array#0",
        "as_bytes%3#0",
        "copy%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "copy%1#0",
        "as_bytes%3#0"
      ]
    },
    "1303": {
      "op": "extract 6 2",
      "defined_out": [
        "array#0",
        "copy%1#0",
        "next_item_head%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "copy%1#0",
        "next_item_head%1#0"
      ]
    },
    "1306": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "copy%1#0",
        "next_item_head%1#0",
        "0x"
      ]
    },
    "1307": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "copy%1#0",
        "0x",
        "next_item_head%1#0"
      ]
    },
    "1308": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "copy%1#0",
        "result%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "copy%1#0",
        "result%2#0"
      ]
    },
    "1309": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "result%2#0",
        "copy%1#0"
      ]
    },
    "1310": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "result%3#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "result%3#0"
      ]
    },
    "1311": {
      "op": "dig 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "result%3#0",
        "array#0 (copy)"
      ]
    },
    "1313": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "result%3#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1314": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "l_count%1#0",
        "result%3#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "result%3#0",
        "l_count%1#0"
      ]
    },
    "1315": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "result%3#0",
        "l_count%1#0",
        "array#0"
      ]
    },
    "1317": {
      "op": "extract 2 0",
      "defined_out": [
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "result%3#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "result%3#0",
        "l_count%1#0",
        "l_head_and_tail%1#0"
      ]
    },
    "1320": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "result%3#0",
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "1"
      ]
    },
    "1321": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "1",
        "result%3#0"
      ]
    },
    "1323": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1326": {
      "op": "dig 2",
      "defined_out": [
        "array#0",
        "copy%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "copy%2#0"
      ]
    },
    "1328": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "copy%2#0",
        "0"
      ]
    },
    "1329": {
      "callsub": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "op": "callsub dynamic_array_replace_dynamic_element",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1332": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1333": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1334": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1335": {
      "op": "extract 2 0",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1338": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "1339": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "0",
        "2"
      ]
    },
    "1340": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset_offset%0#0"
      ]
    },
    "1341": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset_offset%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1343": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset_offset%0#0"
      ]
    },
    "1344": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1345": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1347": {
      "op": "dig 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array#0 (copy)"
      ]
    },
    "1349": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1350": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0"
      ]
    },
    "1351": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "0"
      ]
    },
    "1352": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "0",
        "1"
      ]
    },
    "1353": {
      "op": "+",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_offset%0#0",
        "next_index%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "next_index%0#0"
      ]
    },
    "1354": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "next_index%0#0",
        "array_length%0#0"
      ]
    },
    "1355": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_offset%0#0",
        "next_index%0#0",
        "next_index%0#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "next_index%0#0",
        "array_length%0#0",
        "next_index%0#0 (copy)"
      ]
    },
    "1357": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "next_index%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "next_index%0#0",
        "has_next%0#0"
      ]
    },
    "1358": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "next_index%0#0"
      ]
    },
    "1359": {
      "op": "dig 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "next_index%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1361": {
      "op": "len",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "next_index%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "next_index%0#0",
        "end_of_array%0#0"
      ]
    },
    "1362": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_index%0#0"
      ]
    },
    "1364": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_index%0#0",
        "2"
      ]
    },
    "1365": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "next_item_offset_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_item_offset_offset%0#0"
      ]
    },
    "1366": {
      "op": "dig 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_item_offset_offset%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1368": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "array_head_and_tail%0#0 (copy)",
        "next_item_offset_offset%0#0"
      ]
    },
    "1369": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_item_offset%0#0"
      ]
    },
    "1370": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "next_item_offset%0#0",
        "end_of_array%0#0"
      ]
    },
    "1372": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "end_of_array%0#0",
        "next_item_offset%0#0"
      ]
    },
    "1373": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "next_item_offset%0#0",
        "has_next%0#0"
      ]
    },
    "1375": {
      "op": "select",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "end_offset%0#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_offset%0#0"
      ]
    },
    "1376": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "end_offset%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1377": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "end_offset%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1379": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "end_offset%0#0"
      ]
    },
    "1381": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "substring3%0#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "substring3%0#0"
      ]
    },
    "1382": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1383": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1384": {
      "op": "extract 2 0",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0"
      ]
    },
    "1387": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "1"
      ]
    },
    "1388": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "1",
        "2"
      ]
    },
    "1389": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset_offset%1#0"
      ]
    },
    "1390": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "array_head_and_tail%1#0 (copy)",
        "item_offset_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset_offset%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "1392": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_head_and_tail%1#0 (copy)",
        "item_offset_offset%1#0"
      ]
    },
    "1393": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "1394": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0"
      ]
    },
    "1396": {
      "op": "dig 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array#0 (copy)"
      ]
    },
    "1398": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1399": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0"
      ]
    },
    "1400": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "1"
      ]
    },
    "1401": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "1",
        "1"
      ]
    },
    "1402": {
      "op": "+",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_offset%1#0",
        "next_index%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "next_index%1#0"
      ]
    },
    "1403": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "next_index%1#0",
        "array_length%1#0"
      ]
    },
    "1404": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_offset%1#0",
        "next_index%1#0",
        "next_index%1#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "next_index%1#0",
        "array_length%1#0",
        "next_index%1#0 (copy)"
      ]
    },
    "1406": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "item_offset%1#0",
        "next_index%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "next_index%1#0",
        "has_next%1#0"
      ]
    },
    "1407": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "next_index%1#0"
      ]
    },
    "1408": {
      "op": "dig 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "next_index%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "1410": {
      "op": "len",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "item_offset%1#0",
        "next_index%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "next_index%1#0",
        "end_of_array%1#0"
      ]
    },
    "1411": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_index%1#0"
      ]
    },
    "1413": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_index%1#0",
        "2"
      ]
    },
    "1414": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "item_offset%1#0",
        "next_item_offset_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_item_offset_offset%1#0"
      ]
    },
    "1415": {
      "op": "dig 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_item_offset_offset%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "1417": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "array_head_and_tail%1#0 (copy)",
        "next_item_offset_offset%1#0"
      ]
    },
    "1418": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "item_offset%1#0",
        "next_item_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_item_offset%1#0"
      ]
    },
    "1419": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "next_item_offset%1#0",
        "end_of_array%1#0"
      ]
    },
    "1421": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "end_of_array%1#0",
        "next_item_offset%1#0"
      ]
    },
    "1422": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "next_item_offset%1#0",
        "has_next%1#0"
      ]
    },
    "1424": {
      "op": "select",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "end_offset%1#0",
        "item_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_offset%1#0"
      ]
    },
    "1425": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "end_offset%1#0",
        "array_head_and_tail%1#0"
      ]
    },
    "1426": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "end_offset%1#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "1428": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "end_offset%1#0"
      ]
    },
    "1430": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "substring3%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "substring3%1#0"
      ]
    },
    "1431": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1432": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "array#0",
        "popped%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "popped%0#0",
        "array#0"
      ]
    },
    "1435": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "popped%0#0"
      ]
    },
    "1436": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "array#0",
        "popped%0#0",
        "struct2#0"
      ]
    },
    "1438": {
      "op": "==",
      "defined_out": [
        "array#0",
        "struct1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "tmp%6#0"
      ]
    },
    "1439": {
      "op": "assert",
      "stack_out": [
        "struct1#0",
        "array#0"
      ]
    },
    "1440": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "data%1#0",
        "popped%1#0",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "popped%1#0",
        "data%1#0"
      ]
    },
    "1443": {
      "op": "pop",
      "stack_out": [
        "struct1#0",
        "popped%1#0"
      ]
    },
    "1444": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1445": {
      "op": "assert",
      "stack_out": []
    },
    "1446": {
      "retsub": true,
      "op": "retsub"
    },
    "1447": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements",
      "params": {},
      "block": "test_mixed_multiple_dynamic_elements_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1450": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1453": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1454": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1457": {
      "op": "cover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1459": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr1",
      "op": "callsub get_u16_arr1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1462": {
      "op": "cover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1464": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1467": {
      "op": "cover 4",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1469": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "1470": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "1471": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "encoded%0#0"
      ]
    },
    "1472": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "encoded%0#0",
        "tmp%1#0"
      ]
    },
    "1473": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "encoded%0#0",
        "tmp%1#0",
        "0x"
      ]
    },
    "1474": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "encoded%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "encoded%0#0",
        "tmp%1#0",
        "0x",
        "tmp%1#0 (copy)"
      ]
    },
    "1476": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "tail%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "encoded%0#0",
        "tmp%1#0",
        "tail%0#0"
      ]
    },
    "1477": {
      "op": "cover 2",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tail%0#0",
        "encoded%0#0",
        "tmp%1#0"
      ]
    },
    "1479": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded%0#0",
        "tail%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tail%0#0",
        "encoded%0#0",
        "data_length%0#0"
      ]
    },
    "1480": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "data_length%0#0",
        "encoded%0#0",
        "tail%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tail%0#0",
        "encoded%0#0",
        "data_length%0#0",
        "28"
      ]
    },
    "1482": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%0#0",
        "tail%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tail%0#0",
        "encoded%0#0",
        "current_tail_offset%0#0"
      ]
    },
    "1483": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%0#0"
      ]
    },
    "1484": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%0#0",
        "28"
      ]
    },
    "1486": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "current_tail_offset%0#0",
        "encoded%0#0",
        "tail%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%0#0",
        "as_bytes%0#0"
      ]
    },
    "1487": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%0#0",
        "offset_as_uint16%0#0",
        "tail%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "1490": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%1#0",
        "tail%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%1#0"
      ]
    },
    "1491": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%1#0",
        "tmp%2#0"
      ]
    },
    "1493": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0"
      ]
    },
    "1494": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%0#0"
      ]
    },
    "1496": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%0#0",
        "tmp%3#0"
      ]
    },
    "1498": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%1#0"
      ]
    },
    "1499": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "current_tail_offset%0#0",
        "tail%1#0",
        "encoded%2#0"
      ]
    },
    "1500": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "tail%1#0",
        "encoded%2#0",
        "current_tail_offset%0#0"
      ]
    },
    "1502": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded%2#0",
        "tail%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tail%1#0",
        "encoded%2#0",
        "as_bytes%1#0"
      ]
    },
    "1503": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%2#0",
        "offset_as_uint16%1#0",
        "tail%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tail%1#0",
        "encoded%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "1506": {
      "op": "concat",
      "defined_out": [
        "encoded%3#0",
        "tail%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tail%1#0",
        "encoded%3#0"
      ]
    },
    "1507": {
      "op": "uncover 2",
      "stack_out": [
        "tail%1#0",
        "encoded%3#0",
        "tmp%4#0"
      ]
    },
    "1509": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%4#0"
      ]
    },
    "1510": {
      "op": "swap",
      "stack_out": [
        "encoded%4#0",
        "tail%1#0"
      ]
    },
    "1511": {
      "op": "concat",
      "defined_out": [
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0"
      ]
    },
    "1512": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "struct1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%5#0"
      ]
    },
    "1515": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "struct1#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1518": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "tmp%5#0"
      ]
    },
    "1519": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "struct1#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "1522": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0"
      ]
    },
    "1524": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr2",
      "op": "callsub get_u16_arr2",
      "defined_out": [
        "struct1#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%8#0"
      ]
    },
    "1527": {
      "op": "cover 3",
      "stack_out": [
        "struct1#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0"
      ]
    },
    "1529": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "struct1#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "1532": {
      "op": "cover 4",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0"
      ]
    },
    "1534": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "0x"
      ]
    },
    "1535": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "0x",
        "tmp%5#0"
      ]
    },
    "1536": {
      "op": "concat",
      "defined_out": [
        "encoded%6#0",
        "struct1#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "encoded%6#0"
      ]
    },
    "1537": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "encoded%6#0",
        "tmp%6#0"
      ]
    },
    "1538": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "encoded%6#0",
        "tmp%6#0",
        "0x"
      ]
    },
    "1539": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "encoded%6#0",
        "struct1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "encoded%6#0",
        "tmp%6#0",
        "0x",
        "tmp%6#0 (copy)"
      ]
    },
    "1541": {
      "op": "concat",
      "defined_out": [
        "encoded%6#0",
        "struct1#0",
        "tail%2#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "encoded%6#0",
        "tmp%6#0",
        "tail%2#0"
      ]
    },
    "1542": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tail%2#0",
        "encoded%6#0",
        "tmp%6#0"
      ]
    },
    "1544": {
      "op": "len",
      "defined_out": [
        "data_length%2#0",
        "encoded%6#0",
        "struct1#0",
        "tail%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tail%2#0",
        "encoded%6#0",
        "data_length%2#0"
      ]
    },
    "1545": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tail%2#0",
        "encoded%6#0",
        "data_length%2#0",
        "28"
      ]
    },
    "1547": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%6#0",
        "struct1#0",
        "tail%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tail%2#0",
        "encoded%6#0",
        "current_tail_offset%2#0"
      ]
    },
    "1548": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%6#0"
      ]
    },
    "1549": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%6#0",
        "28"
      ]
    },
    "1551": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "current_tail_offset%2#0",
        "encoded%6#0",
        "struct1#0",
        "tail%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%6#0",
        "as_bytes%2#0"
      ]
    },
    "1552": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%6#0",
        "offset_as_uint16%2#0",
        "struct1#0",
        "tail%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%6#0",
        "offset_as_uint16%2#0"
      ]
    },
    "1555": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%7#0",
        "struct1#0",
        "tail%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%7#0"
      ]
    },
    "1556": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%7#0",
        "tmp%7#0"
      ]
    },
    "1558": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%8#0",
        "struct1#0",
        "tail%2#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%8#0"
      ]
    },
    "1559": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "current_tail_offset%2#0",
        "encoded%8#0",
        "tail%2#0"
      ]
    },
    "1561": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "current_tail_offset%2#0",
        "encoded%8#0",
        "tail%2#0",
        "tmp%8#0"
      ]
    },
    "1563": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%8#0",
        "struct1#0",
        "tail%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "current_tail_offset%2#0",
        "encoded%8#0",
        "tail%3#0"
      ]
    },
    "1564": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "current_tail_offset%2#0",
        "tail%3#0",
        "encoded%8#0"
      ]
    },
    "1565": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tail%3#0",
        "encoded%8#0",
        "current_tail_offset%2#0"
      ]
    },
    "1567": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded%8#0",
        "struct1#0",
        "tail%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tail%3#0",
        "encoded%8#0",
        "as_bytes%3#0"
      ]
    },
    "1568": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%8#0",
        "offset_as_uint16%3#0",
        "struct1#0",
        "tail%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tail%3#0",
        "encoded%8#0",
        "offset_as_uint16%3#0"
      ]
    },
    "1571": {
      "op": "concat",
      "defined_out": [
        "encoded%9#0",
        "struct1#0",
        "tail%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tail%3#0",
        "encoded%9#0"
      ]
    },
    "1572": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "tail%3#0",
        "encoded%9#0",
        "tmp%9#0"
      ]
    },
    "1574": {
      "op": "concat",
      "defined_out": [
        "encoded%10#0",
        "struct1#0",
        "tail%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tail%3#0",
        "encoded%10#0"
      ]
    },
    "1575": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "encoded%10#0",
        "tail%3#0"
      ]
    },
    "1576": {
      "op": "concat",
      "defined_out": [
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0"
      ]
    },
    "1577": {
      "op": "dig 1",
      "defined_out": [
        "copy%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "copy%0#0"
      ]
    },
    "1579": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "struct2#0"
      ]
    },
    "1580": {
      "op": "dig 2",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "struct2#0",
        "copy%1#0"
      ]
    },
    "1582": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "struct2#0"
      ]
    },
    "1583": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "struct2#0",
        "4"
      ]
    },
    "1584": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "copy%0#0",
        "copy%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "struct2#0",
        "as_bytes%4#0"
      ]
    },
    "1585": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "next_item_head%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "struct2#0",
        "next_item_head%0#0"
      ]
    },
    "1588": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "struct2#0",
        "next_item_head%0#0",
        "0x"
      ]
    },
    "1589": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "struct2#0",
        "0x",
        "next_item_head%0#0"
      ]
    },
    "1590": {
      "op": "concat",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "struct2#0",
        "result%0#0"
      ]
    },
    "1591": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct2#0"
      ]
    },
    "1592": {
      "op": "dig 3",
      "defined_out": [
        "copy%0#0",
        "copy%0#0 (copy)",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct2#0",
        "copy%0#0 (copy)"
      ]
    },
    "1594": {
      "op": "len",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "next_item_len%0#0",
        "result%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct2#0",
        "next_item_len%0#0"
      ]
    },
    "1595": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct2#0",
        "next_item_len%0#0",
        "4"
      ]
    },
    "1596": {
      "op": "+",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "struct2#0",
        "tail_offset%0#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct2#0",
        "tail_offset%0#0"
      ]
    },
    "1597": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct2#0",
        "as_bytes%5#0"
      ]
    },
    "1598": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "next_item_head%1#0",
        "result%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "result%0#0",
        "struct2#0",
        "next_item_head%1#0"
      ]
    },
    "1601": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "struct2#0",
        "next_item_head%1#0",
        "result%0#0"
      ]
    },
    "1603": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "struct2#0",
        "result%0#0",
        "next_item_head%1#0"
      ]
    },
    "1604": {
      "op": "concat",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "result%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%0#0",
        "copy%1#0",
        "struct2#0",
        "result%1#0"
      ]
    },
    "1605": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "copy%1#0",
        "struct2#0",
        "result%1#0",
        "copy%0#0"
      ]
    },
    "1607": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "result%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%1#0",
        "struct2#0",
        "result%2#0"
      ]
    },
    "1608": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "result%2#0",
        "copy%1#0"
      ]
    },
    "1610": {
      "op": "concat",
      "defined_out": [
        "result%3#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "result%3#0"
      ]
    },
    "1611": {
      "op": "bytec_1 // 0x0002",
      "defined_out": [
        "0x0002",
        "result%3#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "result%3#0",
        "0x0002"
      ]
    },
    "1612": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "0x0002",
        "result%3#0"
      ]
    },
    "1613": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1614": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "copy%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "copy%2#0"
      ]
    },
    "1616": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "array#0",
        "copy%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "copy%2#0",
        "1"
      ]
    },
    "1617": {
      "callsub": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "op": "callsub dynamic_array_replace_dynamic_element",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1620": {
      "op": "dup",
      "defined_out": [
        "array#0",
        "array#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1621": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1622": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1623": {
      "op": "extract 2 0",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1626": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0",
        "array_head_and_tail%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "1627": {
      "op": "intc_1 // 2",
      "defined_out": [
        "0",
        "2",
        "array#0",
        "array_head_and_tail%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "0",
        "2"
      ]
    },
    "1628": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset_offset%0#0"
      ]
    },
    "1629": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset_offset%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1631": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset_offset%0#0"
      ]
    },
    "1632": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1633": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1635": {
      "op": "dig 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array#0 (copy)"
      ]
    },
    "1637": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1638": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0"
      ]
    },
    "1639": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "0"
      ]
    },
    "1640": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "0",
        "1"
      ]
    },
    "1641": {
      "op": "+",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_offset%0#0",
        "next_index%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "next_index%0#0"
      ]
    },
    "1642": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "next_index%0#0",
        "array_length%0#0"
      ]
    },
    "1643": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_offset%0#0",
        "next_index%0#0",
        "next_index%0#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "next_index%0#0",
        "array_length%0#0",
        "next_index%0#0 (copy)"
      ]
    },
    "1645": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "next_index%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "next_index%0#0",
        "has_next%0#0"
      ]
    },
    "1646": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "next_index%0#0"
      ]
    },
    "1647": {
      "op": "dig 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "next_index%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1649": {
      "op": "len",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "next_index%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "next_index%0#0",
        "end_of_array%0#0"
      ]
    },
    "1650": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_index%0#0"
      ]
    },
    "1652": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_index%0#0",
        "2"
      ]
    },
    "1653": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "next_item_offset_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_item_offset_offset%0#0"
      ]
    },
    "1654": {
      "op": "dig 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_item_offset_offset%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1656": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "array_head_and_tail%0#0 (copy)",
        "next_item_offset_offset%0#0"
      ]
    },
    "1657": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "has_next%0#0",
        "next_item_offset%0#0"
      ]
    },
    "1658": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "next_item_offset%0#0",
        "end_of_array%0#0"
      ]
    },
    "1660": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "has_next%0#0",
        "end_of_array%0#0",
        "next_item_offset%0#0"
      ]
    },
    "1661": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_of_array%0#0",
        "next_item_offset%0#0",
        "has_next%0#0"
      ]
    },
    "1663": {
      "op": "select",
      "defined_out": [
        "array#0",
        "array_head_and_tail%0#0",
        "end_offset%0#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "array_head_and_tail%0#0",
        "end_offset%0#0"
      ]
    },
    "1664": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%0#0",
        "array#0",
        "end_offset%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1665": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "end_offset%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1667": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "end_offset%0#0"
      ]
    },
    "1669": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "substring3%0#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "substring3%0#0"
      ]
    },
    "1670": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1671": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1672": {
      "op": "extract 2 0",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0"
      ]
    },
    "1675": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "1"
      ]
    },
    "1676": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "1",
        "2"
      ]
    },
    "1677": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset_offset%1#0"
      ]
    },
    "1678": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "array_head_and_tail%1#0 (copy)",
        "item_offset_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset_offset%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "1680": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_head_and_tail%1#0 (copy)",
        "item_offset_offset%1#0"
      ]
    },
    "1681": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "1682": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0"
      ]
    },
    "1684": {
      "op": "dig 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array#0 (copy)"
      ]
    },
    "1686": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1687": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0"
      ]
    },
    "1688": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "1"
      ]
    },
    "1689": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "1",
        "1"
      ]
    },
    "1690": {
      "op": "+",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_offset%1#0",
        "next_index%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "next_index%1#0"
      ]
    },
    "1691": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "next_index%1#0",
        "array_length%1#0"
      ]
    },
    "1692": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_offset%1#0",
        "next_index%1#0",
        "next_index%1#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "next_index%1#0",
        "array_length%1#0",
        "next_index%1#0 (copy)"
      ]
    },
    "1694": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "item_offset%1#0",
        "next_index%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "next_index%1#0",
        "has_next%1#0"
      ]
    },
    "1695": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "next_index%1#0"
      ]
    },
    "1696": {
      "op": "dig 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "next_index%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "1698": {
      "op": "len",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "item_offset%1#0",
        "next_index%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "next_index%1#0",
        "end_of_array%1#0"
      ]
    },
    "1699": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_index%1#0"
      ]
    },
    "1701": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_index%1#0",
        "2"
      ]
    },
    "1702": {
      "op": "*",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "item_offset%1#0",
        "next_item_offset_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_item_offset_offset%1#0"
      ]
    },
    "1703": {
      "op": "dig 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_item_offset_offset%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "1705": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "array_head_and_tail%1#0 (copy)",
        "next_item_offset_offset%1#0"
      ]
    },
    "1706": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "item_offset%1#0",
        "next_item_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "has_next%1#0",
        "next_item_offset%1#0"
      ]
    },
    "1707": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "next_item_offset%1#0",
        "end_of_array%1#0"
      ]
    },
    "1709": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "has_next%1#0",
        "end_of_array%1#0",
        "next_item_offset%1#0"
      ]
    },
    "1710": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_of_array%1#0",
        "next_item_offset%1#0",
        "has_next%1#0"
      ]
    },
    "1712": {
      "op": "select",
      "defined_out": [
        "array#0",
        "array_head_and_tail%1#0",
        "end_offset%1#0",
        "item_offset%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "array_head_and_tail%1#0",
        "end_offset%1#0"
      ]
    },
    "1713": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "item_offset%1#0",
        "array#0",
        "end_offset%1#0",
        "array_head_and_tail%1#0"
      ]
    },
    "1714": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "end_offset%1#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "1716": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "end_offset%1#0"
      ]
    },
    "1718": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "substring3%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "substring3%1#0"
      ]
    },
    "1719": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1720": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "array#0",
        "popped%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "popped%0#0",
        "array#0"
      ]
    },
    "1723": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "popped%0#0"
      ]
    },
    "1724": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "array#0",
        "popped%0#0",
        "struct2#0"
      ]
    },
    "1726": {
      "op": "==",
      "defined_out": [
        "array#0",
        "struct1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "tmp%10#0"
      ]
    },
    "1727": {
      "op": "assert",
      "stack_out": [
        "struct1#0",
        "array#0"
      ]
    },
    "1728": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "data%1#0",
        "popped%1#0",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "popped%1#0",
        "data%1#0"
      ]
    },
    "1731": {
      "op": "pop",
      "stack_out": [
        "struct1#0",
        "popped%1#0"
      ]
    },
    "1732": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1733": {
      "op": "assert",
      "stack_out": []
    },
    "1734": {
      "retsub": true,
      "op": "retsub"
    },
    "1735": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement",
      "params": {},
      "block": "test_nested_struct_replacement_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1738": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte1",
      "op": "callsub get_byte1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1741": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte2",
      "op": "callsub get_byte2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1744": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "1745": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x"
      ]
    },
    "1746": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "0x",
        "tmp%1#0"
      ]
    },
    "1747": {
      "op": "concat",
      "defined_out": [
        "result%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "result%0#0"
      ]
    },
    "1748": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "result%0#0",
        "tmp%2#0"
      ]
    },
    "1749": {
      "op": "concat",
      "defined_out": [
        "result%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "result%1#0"
      ]
    },
    "1750": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "result%1#0",
        "0x"
      ]
    },
    "1751": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "0x",
        "result%1#0"
      ]
    },
    "1752": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_data%0#0"
      ]
    },
    "1753": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "array_data%0#0",
        "0x"
      ]
    },
    "1754": {
      "op": "uncover 2",
      "stack_out": [
        "array_data%0#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "1756": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%0#0"
      ]
    },
    "1757": {
      "op": "swap",
      "stack_out": [
        "encoded%0#0",
        "array_data%0#0"
      ]
    },
    "1758": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0"
      ]
    },
    "1759": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%1#0",
        "0x"
      ]
    },
    "1760": {
      "op": "concat",
      "defined_out": [
        "one#0"
      ],
      "stack_out": [
        "one#0"
      ]
    },
    "1761": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "one#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%3#0"
      ]
    },
    "1764": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "one#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1767": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tmp%3#0"
      ]
    },
    "1768": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tmp%3#0",
        "0x"
      ]
    },
    "1769": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "one#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tmp%3#0",
        "0x",
        "tmp%3#0 (copy)"
      ]
    },
    "1771": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "tail%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tmp%3#0",
        "tail%0#0"
      ]
    },
    "1772": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "tmp%3#0"
      ]
    },
    "1773": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "one#0",
        "tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "data_length%0#0"
      ]
    },
    "1774": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "data_length%0#0",
        "one#0",
        "tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "data_length%0#0",
        "4"
      ]
    },
    "1775": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%0#0",
        "one#0",
        "tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0"
      ]
    },
    "1776": {
      "op": "intc_3 // 4",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "4"
      ]
    },
    "1777": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "current_tail_offset%0#0",
        "one#0",
        "tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "as_bytes%0#0"
      ]
    },
    "1778": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0",
        "one#0",
        "tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "1781": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "1782": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "1783": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "one#0",
        "tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0"
      ]
    },
    "1784": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%0#0"
      ]
    },
    "1786": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%0#0",
        "tmp%4#0"
      ]
    },
    "1788": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "one#0",
        "tail%1#0"
      ],
      "stack_out": [
        "one#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%1#0"
      ]
    },
    "1789": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "current_tail_offset%0#0",
        "tail%1#0",
        "encoded%3#0"
      ]
    },
    "1790": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "tail%1#0",
        "encoded%3#0",
        "current_tail_offset%0#0"
      ]
    },
    "1792": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded%3#0",
        "one#0",
        "tail%1#0"
      ],
      "stack_out": [
        "one#0",
        "tail%1#0",
        "encoded%3#0",
        "as_bytes%1#0"
      ]
    },
    "1793": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%3#0",
        "offset_as_uint16%1#0",
        "one#0",
        "tail%1#0"
      ],
      "stack_out": [
        "one#0",
        "tail%1#0",
        "encoded%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "1796": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "one#0",
        "tail%1#0"
      ],
      "stack_out": [
        "one#0",
        "tail%1#0",
        "encoded%4#0"
      ]
    },
    "1797": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "encoded%4#0",
        "tail%1#0"
      ]
    },
    "1798": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0"
      ]
    },
    "1799": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "one#0",
        "tmp%5#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0"
      ]
    },
    "1802": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte2",
      "op": "callsub get_byte2",
      "defined_out": [
        "one#0",
        "tmp%5#0",
        "tmp%6#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1805": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte1",
      "op": "callsub get_byte1",
      "defined_out": [
        "one#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1808": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%6#0"
      ]
    },
    "1809": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%6#0",
        "0x"
      ]
    },
    "1810": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x",
        "tmp%6#0"
      ]
    },
    "1811": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "result%2#0",
        "tmp%5#0",
        "tmp%7#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "tmp%7#0",
        "result%2#0"
      ]
    },
    "1812": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "result%2#0",
        "tmp%7#0"
      ]
    },
    "1813": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "result%3#0",
        "tmp%5#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "result%3#0"
      ]
    },
    "1814": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "result%3#0",
        "0x"
      ]
    },
    "1815": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "0x",
        "result%3#0"
      ]
    },
    "1816": {
      "op": "concat",
      "defined_out": [
        "array_data%1#0",
        "one#0",
        "tmp%5#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "array_data%1#0"
      ]
    },
    "1817": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "array_data%1#0",
        "0x"
      ]
    },
    "1818": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "array_data%1#0",
        "0x",
        "tmp%5#0"
      ]
    },
    "1820": {
      "op": "concat",
      "defined_out": [
        "array_data%1#0",
        "encoded%6#0",
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "array_data%1#0",
        "encoded%6#0"
      ]
    },
    "1821": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "encoded%6#0",
        "array_data%1#0"
      ]
    },
    "1822": {
      "op": "concat",
      "defined_out": [
        "encoded%7#0",
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "encoded%7#0"
      ]
    },
    "1823": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "encoded%7#0",
        "0x"
      ]
    },
    "1824": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0"
      ]
    },
    "1825": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%8#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%8#0"
      ]
    },
    "1828": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%8#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1831": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "1832": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "1835": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "1837": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr1",
      "op": "callsub get_u16_arr1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%11#0"
      ]
    },
    "1840": {
      "op": "cover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "1842": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%12#0"
      ]
    },
    "1845": {
      "op": "cover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "1847": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "0x"
      ]
    },
    "1848": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "0x",
        "tmp%8#0"
      ]
    },
    "1849": {
      "op": "concat",
      "defined_out": [
        "encoded%9#0",
        "one#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "encoded%9#0"
      ]
    },
    "1850": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "encoded%9#0",
        "tmp%9#0"
      ]
    },
    "1851": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "encoded%9#0",
        "tmp%9#0",
        "0x"
      ]
    },
    "1852": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "encoded%9#0",
        "one#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "encoded%9#0",
        "tmp%9#0",
        "0x",
        "tmp%9#0 (copy)"
      ]
    },
    "1854": {
      "op": "concat",
      "defined_out": [
        "encoded%9#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "encoded%9#0",
        "tmp%9#0",
        "tail%2#0"
      ]
    },
    "1855": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "encoded%9#0",
        "tmp%9#0"
      ]
    },
    "1857": {
      "op": "len",
      "defined_out": [
        "data_length%2#0",
        "encoded%9#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "encoded%9#0",
        "data_length%2#0"
      ]
    },
    "1858": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "data_length%2#0",
        "encoded%9#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "encoded%9#0",
        "data_length%2#0",
        "28"
      ]
    },
    "1860": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%9#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "encoded%9#0",
        "current_tail_offset%2#0"
      ]
    },
    "1861": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%9#0"
      ]
    },
    "1862": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%9#0",
        "28"
      ]
    },
    "1864": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "current_tail_offset%2#0",
        "encoded%9#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%9#0",
        "as_bytes%2#0"
      ]
    },
    "1865": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%9#0",
        "offset_as_uint16%2#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%9#0",
        "offset_as_uint16%2#0"
      ]
    },
    "1868": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%10#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%10#0"
      ]
    },
    "1869": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%10#0",
        "tmp%10#0"
      ]
    },
    "1871": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%11#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%11#0"
      ]
    },
    "1872": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "current_tail_offset%2#0",
        "encoded%11#0",
        "tail%2#0"
      ]
    },
    "1874": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "current_tail_offset%2#0",
        "encoded%11#0",
        "tail%2#0",
        "tmp%11#0"
      ]
    },
    "1876": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%11#0",
        "one#0",
        "tail%3#0",
        "three#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "current_tail_offset%2#0",
        "encoded%11#0",
        "tail%3#0"
      ]
    },
    "1877": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "current_tail_offset%2#0",
        "tail%3#0",
        "encoded%11#0"
      ]
    },
    "1878": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tail%3#0",
        "encoded%11#0",
        "current_tail_offset%2#0"
      ]
    },
    "1880": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded%11#0",
        "one#0",
        "tail%3#0",
        "three#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tail%3#0",
        "encoded%11#0",
        "as_bytes%3#0"
      ]
    },
    "1881": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%11#0",
        "offset_as_uint16%3#0",
        "one#0",
        "tail%3#0",
        "three#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tail%3#0",
        "encoded%11#0",
        "offset_as_uint16%3#0"
      ]
    },
    "1884": {
      "op": "concat",
      "defined_out": [
        "encoded%12#0",
        "one#0",
        "tail%3#0",
        "three#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tail%3#0",
        "encoded%12#0"
      ]
    },
    "1885": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tail%3#0",
        "encoded%12#0",
        "tmp%12#0"
      ]
    },
    "1887": {
      "op": "concat",
      "defined_out": [
        "encoded%13#0",
        "one#0",
        "tail%3#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tail%3#0",
        "encoded%13#0"
      ]
    },
    "1888": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "encoded%13#0",
        "tail%3#0"
      ]
    },
    "1889": {
      "op": "concat",
      "defined_out": [
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0"
      ]
    },
    "1890": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "four#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%13#0"
      ]
    },
    "1893": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "four#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1896": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tmp%13#0"
      ]
    },
    "1897": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tmp%13#0",
        "0x"
      ]
    },
    "1898": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "four#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tmp%13#0",
        "0x",
        "tmp%13#0 (copy)"
      ]
    },
    "1900": {
      "op": "concat",
      "defined_out": [
        "four#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tmp%13#0",
        "tail%4#0"
      ]
    },
    "1901": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tail%4#0",
        "tmp%13#0"
      ]
    },
    "1902": {
      "op": "len",
      "defined_out": [
        "data_length%4#0",
        "four#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tail%4#0",
        "data_length%4#0"
      ]
    },
    "1903": {
      "op": "intc_3 // 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tail%4#0",
        "data_length%4#0",
        "4"
      ]
    },
    "1904": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%4#0",
        "four#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tail%4#0",
        "current_tail_offset%4#0"
      ]
    },
    "1905": {
      "op": "intc_3 // 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tail%4#0",
        "current_tail_offset%4#0",
        "4"
      ]
    },
    "1906": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "current_tail_offset%4#0",
        "four#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tail%4#0",
        "current_tail_offset%4#0",
        "as_bytes%4#0"
      ]
    },
    "1907": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%4#0",
        "four#0",
        "offset_as_uint16%4#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tail%4#0",
        "current_tail_offset%4#0",
        "offset_as_uint16%4#0"
      ]
    },
    "1910": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tail%4#0",
        "current_tail_offset%4#0",
        "offset_as_uint16%4#0",
        "0x"
      ]
    },
    "1911": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tail%4#0",
        "current_tail_offset%4#0",
        "0x",
        "offset_as_uint16%4#0"
      ]
    },
    "1912": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded%15#0",
        "four#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "tail%4#0",
        "current_tail_offset%4#0",
        "encoded%15#0"
      ]
    },
    "1913": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%14#0",
        "current_tail_offset%4#0",
        "encoded%15#0",
        "tail%4#0"
      ]
    },
    "1915": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "current_tail_offset%4#0",
        "encoded%15#0",
        "tail%4#0",
        "tmp%14#0"
      ]
    },
    "1917": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded%15#0",
        "four#0",
        "one#0",
        "tail%5#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "current_tail_offset%4#0",
        "encoded%15#0",
        "tail%5#0"
      ]
    },
    "1918": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "current_tail_offset%4#0",
        "tail%5#0",
        "encoded%15#0"
      ]
    },
    "1919": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tail%5#0",
        "encoded%15#0",
        "current_tail_offset%4#0"
      ]
    },
    "1921": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "encoded%15#0",
        "four#0",
        "one#0",
        "tail%5#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tail%5#0",
        "encoded%15#0",
        "as_bytes%5#0"
      ]
    },
    "1922": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%15#0",
        "four#0",
        "offset_as_uint16%5#0",
        "one#0",
        "tail%5#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tail%5#0",
        "encoded%15#0",
        "offset_as_uint16%5#0"
      ]
    },
    "1925": {
      "op": "concat",
      "defined_out": [
        "encoded%16#0",
        "four#0",
        "one#0",
        "tail%5#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tail%5#0",
        "encoded%16#0"
      ]
    },
    "1926": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "encoded%16#0",
        "tail%5#0"
      ]
    },
    "1927": {
      "op": "concat",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0"
      ]
    },
    "1928": {
      "op": "dig 4",
      "defined_out": [
        "copy%0#0",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%0#0"
      ]
    },
    "1930": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%0#0",
        "five#0"
      ]
    },
    "1931": {
      "op": "dig 4",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%0#0",
        "five#0",
        "copy%1#0"
      ]
    },
    "1933": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%1#0",
        "copy%0#0",
        "five#0"
      ]
    },
    "1935": {
      "op": "dig 4",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "copy%2#0",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%1#0",
        "copy%0#0",
        "five#0",
        "copy%2#0"
      ]
    },
    "1937": {
      "op": "cover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0"
      ]
    },
    "1939": {
      "op": "dig 4",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "copy%2#0",
        "copy%3#0",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0",
        "copy%3#0"
      ]
    },
    "1941": {
      "op": "cover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0"
      ]
    },
    "1943": {
      "op": "dup",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0",
        "copy%4#0"
      ]
    },
    "1944": {
      "op": "cover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0"
      ]
    },
    "1946": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0",
        "0x"
      ]
    },
    "1947": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "five#0",
        "0x",
        "copy%0#0"
      ]
    },
    "1949": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "encoded%18#0",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "five#0",
        "encoded%18#0"
      ]
    },
    "1950": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "encoded%18#0",
        "five#0"
      ]
    },
    "1951": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "encoded%18#0",
        "five#0",
        "0x"
      ]
    },
    "1952": {
      "op": "dig 3",
      "defined_out": [
        "0x",
        "copy%1#0",
        "copy%1#0 (copy)",
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "encoded%18#0",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "encoded%18#0",
        "five#0",
        "0x",
        "copy%1#0 (copy)"
      ]
    },
    "1954": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "encoded%18#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "encoded%18#0",
        "five#0",
        "tail%6#0"
      ]
    },
    "1955": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "tail%6#0",
        "encoded%18#0",
        "five#0"
      ]
    },
    "1957": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%6#0",
        "encoded%18#0",
        "five#0",
        "copy%1#0"
      ]
    },
    "1959": {
      "op": "len",
      "defined_out": [
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "data_length%6#0",
        "encoded%18#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%6#0",
        "encoded%18#0",
        "five#0",
        "data_length%6#0"
      ]
    },
    "1960": {
      "op": "pushint 26 // 26",
      "defined_out": [
        "26",
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "data_length%6#0",
        "encoded%18#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%6#0",
        "encoded%18#0",
        "five#0",
        "data_length%6#0",
        "26"
      ]
    },
    "1962": {
      "op": "+",
      "defined_out": [
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "encoded%18#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%6#0",
        "encoded%18#0",
        "five#0",
        "current_tail_offset%6#0"
      ]
    },
    "1963": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "encoded%18#0",
        "five#0"
      ]
    },
    "1965": {
      "op": "pushint 26 // 26",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "encoded%18#0",
        "five#0",
        "26"
      ]
    },
    "1967": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "encoded%18#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "encoded%18#0",
        "five#0",
        "as_bytes%6#0"
      ]
    },
    "1968": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "encoded%18#0",
        "five#0",
        "four#0",
        "offset_as_uint16%6#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "encoded%18#0",
        "five#0",
        "offset_as_uint16%6#0"
      ]
    },
    "1971": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "five#0",
        "offset_as_uint16%6#0",
        "encoded%18#0"
      ]
    },
    "1973": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "five#0",
        "encoded%18#0",
        "offset_as_uint16%6#0"
      ]
    },
    "1974": {
      "op": "concat",
      "defined_out": [
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "encoded%19#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "five#0",
        "encoded%19#0"
      ]
    },
    "1975": {
      "op": "uncover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "five#0",
        "encoded%19#0",
        "copy%2#0"
      ]
    },
    "1977": {
      "op": "concat",
      "defined_out": [
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "encoded%20#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "five#0",
        "encoded%20#0"
      ]
    },
    "1978": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "five#0",
        "encoded%20#0",
        "tail%6#0"
      ]
    },
    "1980": {
      "op": "dig 5",
      "defined_out": [
        "copy%3#0",
        "copy%3#0 (copy)",
        "copy%4#0",
        "current_tail_offset%6#0",
        "encoded%20#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "five#0",
        "encoded%20#0",
        "tail%6#0",
        "copy%3#0 (copy)"
      ]
    },
    "1982": {
      "op": "concat",
      "defined_out": [
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "encoded%20#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%7#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "five#0",
        "encoded%20#0",
        "tail%7#0"
      ]
    },
    "1983": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "tail%7#0",
        "five#0",
        "encoded%20#0"
      ]
    },
    "1985": {
      "op": "uncover 5",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "tail%7#0",
        "five#0",
        "encoded%20#0",
        "copy%3#0"
      ]
    },
    "1987": {
      "op": "len",
      "defined_out": [
        "copy%4#0",
        "current_tail_offset%6#0",
        "data_length%7#0",
        "encoded%20#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%7#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "tail%7#0",
        "five#0",
        "encoded%20#0",
        "data_length%7#0"
      ]
    },
    "1988": {
      "op": "dig 4",
      "defined_out": [
        "copy%4#0",
        "current_tail_offset%6#0",
        "current_tail_offset%6#0 (copy)",
        "data_length%7#0",
        "encoded%20#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%7#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "tail%7#0",
        "five#0",
        "encoded%20#0",
        "data_length%7#0",
        "current_tail_offset%6#0 (copy)"
      ]
    },
    "1990": {
      "op": "+",
      "defined_out": [
        "copy%4#0",
        "current_tail_offset%6#0",
        "current_tail_offset%7#0",
        "encoded%20#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%7#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "tail%7#0",
        "five#0",
        "encoded%20#0",
        "current_tail_offset%7#0"
      ]
    },
    "1991": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%4#0",
        "current_tail_offset%6#0",
        "tail%7#0",
        "five#0",
        "current_tail_offset%7#0",
        "encoded%20#0"
      ]
    },
    "1992": {
      "op": "uncover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%4#0",
        "tail%7#0",
        "five#0",
        "current_tail_offset%7#0",
        "encoded%20#0",
        "current_tail_offset%6#0"
      ]
    },
    "1994": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "copy%4#0",
        "current_tail_offset%7#0",
        "encoded%20#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%7#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%4#0",
        "tail%7#0",
        "five#0",
        "current_tail_offset%7#0",
        "encoded%20#0",
        "as_bytes%7#0"
      ]
    },
    "1995": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%4#0",
        "current_tail_offset%7#0",
        "encoded%20#0",
        "five#0",
        "four#0",
        "offset_as_uint16%7#0",
        "one#0",
        "tail%7#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%4#0",
        "tail%7#0",
        "five#0",
        "current_tail_offset%7#0",
        "encoded%20#0",
        "offset_as_uint16%7#0"
      ]
    },
    "1998": {
      "op": "concat",
      "defined_out": [
        "copy%4#0",
        "current_tail_offset%7#0",
        "encoded%21#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%7#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%4#0",
        "tail%7#0",
        "five#0",
        "current_tail_offset%7#0",
        "encoded%21#0"
      ]
    },
    "1999": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "copy%4#0",
        "five#0",
        "current_tail_offset%7#0",
        "encoded%21#0",
        "tail%7#0"
      ]
    },
    "2001": {
      "op": "uncover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "current_tail_offset%7#0",
        "encoded%21#0",
        "tail%7#0",
        "copy%4#0"
      ]
    },
    "2003": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%21#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "current_tail_offset%7#0",
        "encoded%21#0",
        "tail%8#0"
      ]
    },
    "2004": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "current_tail_offset%7#0",
        "tail%8#0",
        "encoded%21#0"
      ]
    },
    "2005": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tail%8#0",
        "encoded%21#0",
        "current_tail_offset%7#0"
      ]
    },
    "2007": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "encoded%21#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tail%8#0",
        "encoded%21#0",
        "as_bytes%8#0"
      ]
    },
    "2008": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%21#0",
        "five#0",
        "four#0",
        "offset_as_uint16%8#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tail%8#0",
        "encoded%21#0",
        "offset_as_uint16%8#0"
      ]
    },
    "2011": {
      "op": "concat",
      "defined_out": [
        "encoded%22#0",
        "five#0",
        "four#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tail%8#0",
        "encoded%22#0"
      ]
    },
    "2012": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "encoded%22#0",
        "tail%8#0"
      ]
    },
    "2013": {
      "op": "concat",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "struct1#0"
      ]
    },
    "2014": {
      "op": "cover 5",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0"
      ]
    },
    "2016": {
      "op": "uncover 4",
      "defined_out": [
        "copy%5#0",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0"
      ]
    },
    "2018": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "copy%5#0",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%15#0"
      ]
    },
    "2021": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "copy%5#0",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "tmp%15#0",
        "tmp%16#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "2024": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tmp%15#0"
      ]
    },
    "2025": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tmp%15#0",
        "0x"
      ]
    },
    "2026": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "copy%5#0",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "tmp%15#0",
        "tmp%15#0 (copy)",
        "tmp%16#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tmp%15#0",
        "0x",
        "tmp%15#0 (copy)"
      ]
    },
    "2028": {
      "op": "concat",
      "defined_out": [
        "copy%5#0",
        "five#0",
        "four#0",
        "struct1#0",
        "tail%9#0",
        "three#0",
        "tmp%15#0",
        "tmp%16#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tmp%15#0",
        "tail%9#0"
      ]
    },
    "2029": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tail%9#0",
        "tmp%15#0"
      ]
    },
    "2030": {
      "op": "len",
      "defined_out": [
        "copy%5#0",
        "data_length%9#0",
        "five#0",
        "four#0",
        "struct1#0",
        "tail%9#0",
        "three#0",
        "tmp%16#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tail%9#0",
        "data_length%9#0"
      ]
    },
    "2031": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tail%9#0",
        "data_length%9#0",
        "4"
      ]
    },
    "2032": {
      "op": "+",
      "defined_out": [
        "copy%5#0",
        "current_tail_offset%9#0",
        "five#0",
        "four#0",
        "struct1#0",
        "tail%9#0",
        "three#0",
        "tmp%16#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tail%9#0",
        "current_tail_offset%9#0"
      ]
    },
    "2033": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tail%9#0",
        "current_tail_offset%9#0",
        "4"
      ]
    },
    "2034": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "copy%5#0",
        "current_tail_offset%9#0",
        "five#0",
        "four#0",
        "struct1#0",
        "tail%9#0",
        "three#0",
        "tmp%16#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tail%9#0",
        "current_tail_offset%9#0",
        "as_bytes%9#0"
      ]
    },
    "2035": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%5#0",
        "current_tail_offset%9#0",
        "five#0",
        "four#0",
        "offset_as_uint16%9#0",
        "struct1#0",
        "tail%9#0",
        "three#0",
        "tmp%16#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tail%9#0",
        "current_tail_offset%9#0",
        "offset_as_uint16%9#0"
      ]
    },
    "2038": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tail%9#0",
        "current_tail_offset%9#0",
        "offset_as_uint16%9#0",
        "0x"
      ]
    },
    "2039": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tail%9#0",
        "current_tail_offset%9#0",
        "0x",
        "offset_as_uint16%9#0"
      ]
    },
    "2040": {
      "op": "concat",
      "defined_out": [
        "copy%5#0",
        "current_tail_offset%9#0",
        "encoded%24#0",
        "five#0",
        "four#0",
        "struct1#0",
        "tail%9#0",
        "three#0",
        "tmp%16#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "tail%9#0",
        "current_tail_offset%9#0",
        "encoded%24#0"
      ]
    },
    "2041": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tmp%16#0",
        "current_tail_offset%9#0",
        "encoded%24#0",
        "tail%9#0"
      ]
    },
    "2043": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "current_tail_offset%9#0",
        "encoded%24#0",
        "tail%9#0",
        "tmp%16#0"
      ]
    },
    "2045": {
      "op": "concat",
      "defined_out": [
        "copy%5#0",
        "current_tail_offset%9#0",
        "encoded%24#0",
        "five#0",
        "four#0",
        "struct1#0",
        "tail%10#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "current_tail_offset%9#0",
        "encoded%24#0",
        "tail%10#0"
      ]
    },
    "2046": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "current_tail_offset%9#0",
        "tail%10#0",
        "encoded%24#0"
      ]
    },
    "2047": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tail%10#0",
        "encoded%24#0",
        "current_tail_offset%9#0"
      ]
    },
    "2049": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "copy%5#0",
        "encoded%24#0",
        "five#0",
        "four#0",
        "struct1#0",
        "tail%10#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tail%10#0",
        "encoded%24#0",
        "as_bytes%10#0"
      ]
    },
    "2050": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%5#0",
        "encoded%24#0",
        "five#0",
        "four#0",
        "offset_as_uint16%10#0",
        "struct1#0",
        "tail%10#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tail%10#0",
        "encoded%24#0",
        "offset_as_uint16%10#0"
      ]
    },
    "2053": {
      "op": "concat",
      "defined_out": [
        "copy%5#0",
        "encoded%25#0",
        "five#0",
        "four#0",
        "struct1#0",
        "tail%10#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "tail%10#0",
        "encoded%25#0"
      ]
    },
    "2054": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "encoded%25#0",
        "tail%10#0"
      ]
    },
    "2055": {
      "op": "concat",
      "defined_out": [
        "copy%5#0",
        "encoded%26#0",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "encoded%26#0"
      ]
    },
    "2056": {
      "op": "uncover 4",
      "defined_out": [
        "copy%5#0",
        "copy%6#0",
        "encoded%26#0",
        "five#0",
        "four#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "encoded%26#0",
        "copy%6#0"
      ]
    },
    "2058": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "four#0",
        "five#0",
        "copy%5#0",
        "copy%6#0",
        "encoded%26#0"
      ]
    },
    "2059": {
      "op": "uncover 4",
      "defined_out": [
        "copy%5#0",
        "copy%6#0",
        "copy%7#0",
        "encoded%26#0",
        "five#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "five#0",
        "copy%5#0",
        "copy%6#0",
        "encoded%26#0",
        "copy%7#0"
      ]
    },
    "2061": {
      "op": "cover 2",
      "defined_out": [
        "copy%5#0",
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "encoded%26#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%5#0",
        "copy%7#0",
        "copy%6#0",
        "encoded%26#0"
      ]
    },
    "2063": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%5#0",
        "copy%7#0",
        "copy%6#0",
        "encoded%26#0",
        "0x"
      ]
    },
    "2064": {
      "op": "uncover 4",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "encoded%26#0",
        "0x",
        "copy%5#0"
      ]
    },
    "2066": {
      "op": "concat",
      "defined_out": [
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "encoded%26#0",
        "encoded%27#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "encoded%26#0",
        "encoded%27#0"
      ]
    },
    "2067": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "encoded%27#0",
        "encoded%26#0"
      ]
    },
    "2068": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "encoded%27#0",
        "encoded%26#0",
        "0x"
      ]
    },
    "2069": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "encoded%26#0",
        "encoded%26#0 (copy)",
        "encoded%27#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "encoded%27#0",
        "encoded%26#0",
        "0x",
        "encoded%26#0 (copy)"
      ]
    },
    "2071": {
      "op": "concat",
      "defined_out": [
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "encoded%26#0",
        "encoded%27#0",
        "struct1#0",
        "tail%11#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "encoded%27#0",
        "encoded%26#0",
        "tail%11#0"
      ]
    },
    "2072": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "tail%11#0",
        "encoded%27#0",
        "encoded%26#0"
      ]
    },
    "2074": {
      "op": "len",
      "defined_out": [
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "data_length%11#0",
        "encoded%27#0",
        "struct1#0",
        "tail%11#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "tail%11#0",
        "encoded%27#0",
        "data_length%11#0"
      ]
    },
    "2075": {
      "op": "pushint 26 // 26",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "tail%11#0",
        "encoded%27#0",
        "data_length%11#0",
        "26"
      ]
    },
    "2077": {
      "op": "+",
      "defined_out": [
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "current_tail_offset%11#0",
        "encoded%27#0",
        "struct1#0",
        "tail%11#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "tail%11#0",
        "encoded%27#0",
        "current_tail_offset%11#0"
      ]
    },
    "2078": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%27#0"
      ]
    },
    "2080": {
      "op": "pushint 26 // 26",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%27#0",
        "26"
      ]
    },
    "2082": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "current_tail_offset%11#0",
        "encoded%27#0",
        "struct1#0",
        "tail%11#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%27#0",
        "as_bytes%11#0"
      ]
    },
    "2083": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "current_tail_offset%11#0",
        "encoded%27#0",
        "offset_as_uint16%11#0",
        "struct1#0",
        "tail%11#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%27#0",
        "offset_as_uint16%11#0"
      ]
    },
    "2086": {
      "op": "concat",
      "defined_out": [
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "current_tail_offset%11#0",
        "encoded%28#0",
        "struct1#0",
        "tail%11#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%28#0"
      ]
    },
    "2087": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%28#0",
        "copy%6#0"
      ]
    },
    "2089": {
      "op": "concat",
      "defined_out": [
        "copy%7#0",
        "copy%8#0",
        "current_tail_offset%11#0",
        "encoded%29#0",
        "struct1#0",
        "tail%11#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%29#0"
      ]
    },
    "2090": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "current_tail_offset%11#0",
        "encoded%29#0",
        "tail%11#0"
      ]
    },
    "2091": {
      "op": "dig 3",
      "defined_out": [
        "copy%7#0",
        "copy%7#0 (copy)",
        "copy%8#0",
        "current_tail_offset%11#0",
        "encoded%29#0",
        "struct1#0",
        "tail%11#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "current_tail_offset%11#0",
        "encoded%29#0",
        "tail%11#0",
        "copy%7#0 (copy)"
      ]
    },
    "2093": {
      "op": "concat",
      "defined_out": [
        "copy%7#0",
        "copy%8#0",
        "current_tail_offset%11#0",
        "encoded%29#0",
        "struct1#0",
        "tail%12#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "current_tail_offset%11#0",
        "encoded%29#0",
        "tail%12#0"
      ]
    },
    "2094": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "copy%7#0",
        "tail%12#0",
        "current_tail_offset%11#0",
        "encoded%29#0"
      ]
    },
    "2096": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "tail%12#0",
        "current_tail_offset%11#0",
        "encoded%29#0",
        "copy%7#0"
      ]
    },
    "2098": {
      "op": "len",
      "defined_out": [
        "copy%8#0",
        "current_tail_offset%11#0",
        "data_length%12#0",
        "encoded%29#0",
        "struct1#0",
        "tail%12#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "tail%12#0",
        "current_tail_offset%11#0",
        "encoded%29#0",
        "data_length%12#0"
      ]
    },
    "2099": {
      "op": "dig 2",
      "defined_out": [
        "copy%8#0",
        "current_tail_offset%11#0",
        "current_tail_offset%11#0 (copy)",
        "data_length%12#0",
        "encoded%29#0",
        "struct1#0",
        "tail%12#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "tail%12#0",
        "current_tail_offset%11#0",
        "encoded%29#0",
        "data_length%12#0",
        "current_tail_offset%11#0 (copy)"
      ]
    },
    "2101": {
      "op": "+",
      "defined_out": [
        "copy%8#0",
        "current_tail_offset%11#0",
        "current_tail_offset%12#0",
        "encoded%29#0",
        "struct1#0",
        "tail%12#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "tail%12#0",
        "current_tail_offset%11#0",
        "encoded%29#0",
        "current_tail_offset%12#0"
      ]
    },
    "2102": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "tail%12#0",
        "current_tail_offset%11#0",
        "current_tail_offset%12#0",
        "encoded%29#0"
      ]
    },
    "2103": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "tail%12#0",
        "current_tail_offset%12#0",
        "encoded%29#0",
        "current_tail_offset%11#0"
      ]
    },
    "2105": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "copy%8#0",
        "current_tail_offset%12#0",
        "encoded%29#0",
        "struct1#0",
        "tail%12#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "tail%12#0",
        "current_tail_offset%12#0",
        "encoded%29#0",
        "as_bytes%12#0"
      ]
    },
    "2106": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%8#0",
        "current_tail_offset%12#0",
        "encoded%29#0",
        "offset_as_uint16%12#0",
        "struct1#0",
        "tail%12#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "tail%12#0",
        "current_tail_offset%12#0",
        "encoded%29#0",
        "offset_as_uint16%12#0"
      ]
    },
    "2109": {
      "op": "concat",
      "defined_out": [
        "copy%8#0",
        "current_tail_offset%12#0",
        "encoded%30#0",
        "struct1#0",
        "tail%12#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "tail%12#0",
        "current_tail_offset%12#0",
        "encoded%30#0"
      ]
    },
    "2110": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "copy%8#0",
        "current_tail_offset%12#0",
        "encoded%30#0",
        "tail%12#0"
      ]
    },
    "2112": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "two#0",
        "current_tail_offset%12#0",
        "encoded%30#0",
        "tail%12#0",
        "copy%8#0"
      ]
    },
    "2114": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%12#0",
        "encoded%30#0",
        "struct1#0",
        "tail%13#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "current_tail_offset%12#0",
        "encoded%30#0",
        "tail%13#0"
      ]
    },
    "2115": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "current_tail_offset%12#0",
        "tail%13#0",
        "encoded%30#0"
      ]
    },
    "2116": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "tail%13#0",
        "encoded%30#0",
        "current_tail_offset%12#0"
      ]
    },
    "2118": {
      "op": "itob",
      "defined_out": [
        "as_bytes%13#0",
        "encoded%30#0",
        "struct1#0",
        "tail%13#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "tail%13#0",
        "encoded%30#0",
        "as_bytes%13#0"
      ]
    },
    "2119": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%30#0",
        "offset_as_uint16%13#0",
        "struct1#0",
        "tail%13#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "tail%13#0",
        "encoded%30#0",
        "offset_as_uint16%13#0"
      ]
    },
    "2122": {
      "op": "concat",
      "defined_out": [
        "encoded%31#0",
        "struct1#0",
        "tail%13#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "tail%13#0",
        "encoded%31#0"
      ]
    },
    "2123": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "encoded%31#0",
        "tail%13#0"
      ]
    },
    "2124": {
      "op": "concat",
      "defined_out": [
        "copy%9#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0"
      ]
    },
    "2125": {
      "op": "dup",
      "defined_out": [
        "copy%9#0",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "struct2#0 (copy)"
      ]
    },
    "2126": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "copy%9#0",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "struct2#0 (copy)",
        "10"
      ]
    },
    "2128": {
      "op": "extract_uint16",
      "defined_out": [
        "copy%9#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "item_offset%0#0"
      ]
    },
    "2129": {
      "op": "dig 1",
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "item_offset%0#0",
        "struct2#0 (copy)"
      ]
    },
    "2131": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "copy%9#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "item_offset%0#0",
        "struct2#0 (copy)",
        "0"
      ]
    },
    "2132": {
      "op": "dig 2",
      "defined_out": [
        "0",
        "copy%9#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "item_offset%0#0",
        "struct2#0 (copy)",
        "0",
        "item_offset%0#0 (copy)"
      ]
    },
    "2134": {
      "op": "extract3",
      "defined_out": [
        "copy%9#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "item_offset%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "2135": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "data_up_to_item%0#0",
        "item_offset%0#0"
      ]
    },
    "2136": {
      "op": "dig 2",
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "struct2#0 (copy)"
      ]
    },
    "2138": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "copy%9#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "struct2#0 (copy)",
        "22"
      ]
    },
    "2140": {
      "op": "extract_uint16",
      "defined_out": [
        "copy%9#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0"
      ]
    },
    "2141": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "item_offset%0#0"
      ]
    },
    "2142": {
      "op": "dig 3",
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "item_offset%0#0",
        "struct2#0 (copy)"
      ]
    },
    "2144": {
      "op": "len",
      "defined_out": [
        "copy%9#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "struct1#0",
        "struct2#0",
        "total_data_length%0#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "item_offset%0#0",
        "total_data_length%0#0"
      ]
    },
    "2145": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "struct2#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "item_offset%0#0"
      ]
    },
    "2146": {
      "op": "uncover 4",
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "item_offset%0#0",
        "struct2#0"
      ]
    },
    "2148": {
      "op": "dig 3",
      "defined_out": [
        "copy%9#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "next_item_offset%0#0 (copy)",
        "struct1#0",
        "struct2#0",
        "total_data_length%0#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "item_offset%0#0",
        "struct2#0",
        "next_item_offset%0#0 (copy)"
      ]
    },
    "2150": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "item_offset%0#0",
        "struct2#0",
        "next_item_offset%0#0 (copy)",
        "total_data_length%0#0"
      ]
    },
    "2152": {
      "op": "substring3",
      "defined_out": [
        "copy%9#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "item_offset%0#0",
        "data_beyond_item%0#0"
      ]
    },
    "2153": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "next_item_offset%0#0",
        "item_offset%0#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "2155": {
      "op": "dig 4",
      "defined_out": [
        "copy%9#0",
        "copy%9#0 (copy)",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "next_item_offset%0#0",
        "item_offset%0#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "copy%9#0 (copy)"
      ]
    },
    "2157": {
      "op": "concat",
      "defined_out": [
        "copy%9#0",
        "data_beyond_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "struct1#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "next_item_offset%0#0",
        "item_offset%0#0",
        "data_beyond_item%0#0",
        "updated_data%0#0"
      ]
    },
    "2158": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "next_item_offset%0#0",
        "item_offset%0#0",
        "updated_data%0#0",
        "data_beyond_item%0#0"
      ]
    },
    "2159": {
      "op": "concat",
      "defined_out": [
        "copy%9#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "struct1#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "next_item_offset%0#0",
        "item_offset%0#0",
        "updated_data%1#0"
      ]
    },
    "2160": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "item_offset%0#0",
        "updated_data%1#0",
        "next_item_offset%0#0"
      ]
    },
    "2162": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "updated_data%1#0",
        "next_item_offset%0#0",
        "item_offset%0#0"
      ]
    },
    "2164": {
      "op": "-",
      "defined_out": [
        "copy%9#0",
        "item_length%0#0",
        "struct1#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "copy%9#0",
        "updated_data%1#0",
        "item_length%0#0"
      ]
    },
    "2165": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "copy%9#0",
        "updated_data%1#0"
      ]
    },
    "2167": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%1#0",
        "copy%9#0"
      ]
    },
    "2168": {
      "op": "len",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "struct1#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%1#0",
        "new_value_length%0#0"
      ]
    },
    "2169": {
      "op": "dig 1",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "struct1#0",
        "updated_data%1#0",
        "updated_data%1#0 (copy)"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%1#0",
        "new_value_length%0#0",
        "updated_data%1#0 (copy)"
      ]
    },
    "2171": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%1#0",
        "new_value_length%0#0",
        "updated_data%1#0 (copy)",
        "22"
      ]
    },
    "2173": {
      "op": "extract_uint16",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "struct1#0",
        "tail_offset%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%1#0",
        "new_value_length%0#0",
        "tail_offset%0#0"
      ]
    },
    "2174": {
      "op": "dig 1",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "new_value_length%0#0 (copy)",
        "struct1#0",
        "tail_offset%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%1#0",
        "new_value_length%0#0",
        "tail_offset%0#0",
        "new_value_length%0#0 (copy)"
      ]
    },
    "2176": {
      "op": "+",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "struct1#0",
        "tail_offset%1#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%1#0",
        "new_value_length%0#0",
        "tail_offset%1#0"
      ]
    },
    "2177": {
      "op": "dig 3",
      "defined_out": [
        "item_length%0#0",
        "item_length%0#0 (copy)",
        "new_value_length%0#0",
        "struct1#0",
        "tail_offset%1#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%1#0",
        "new_value_length%0#0",
        "tail_offset%1#0",
        "item_length%0#0 (copy)"
      ]
    },
    "2179": {
      "op": "-",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "struct1#0",
        "tail_offset%2#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%1#0",
        "new_value_length%0#0",
        "tail_offset%2#0"
      ]
    },
    "2180": {
      "op": "itob",
      "defined_out": [
        "as_bytes%14#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "struct1#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%1#0",
        "new_value_length%0#0",
        "as_bytes%14#0"
      ]
    },
    "2181": {
      "op": "extract 6 2",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "struct1#0",
        "tail_offset_bytes%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%1#0",
        "new_value_length%0#0",
        "tail_offset_bytes%0#0"
      ]
    },
    "2184": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset_bytes%0#0",
        "updated_data%1#0"
      ]
    },
    "2186": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset_bytes%0#0",
        "updated_data%1#0",
        "22"
      ]
    },
    "2188": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%1#0",
        "22",
        "tail_offset_bytes%0#0"
      ]
    },
    "2190": {
      "op": "replace3",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "struct1#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%2#0"
      ]
    },
    "2191": {
      "op": "dup",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "struct1#0",
        "updated_data%2#0",
        "updated_data%2#0 (copy)"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%2#0",
        "updated_data%2#0 (copy)"
      ]
    },
    "2192": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "item_length%0#0",
        "new_value_length%0#0",
        "struct1#0",
        "updated_data%2#0",
        "updated_data%2#0 (copy)"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%2#0",
        "updated_data%2#0 (copy)",
        "24"
      ]
    },
    "2194": {
      "op": "extract_uint16",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "struct1#0",
        "tail_offset%3#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%2#0",
        "tail_offset%3#0"
      ]
    },
    "2195": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%2#0",
        "tail_offset%3#0",
        "new_value_length%0#0"
      ]
    },
    "2197": {
      "op": "+",
      "defined_out": [
        "item_length%0#0",
        "struct1#0",
        "tail_offset%4#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "struct1#0",
        "item_length%0#0",
        "updated_data%2#0",
        "tail_offset%4#0"
      ]
    },
    "2198": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "updated_data%2#0",
        "tail_offset%4#0",
        "item_length%0#0"
      ]
    },
    "2200": {
      "op": "-",
      "defined_out": [
        "struct1#0",
        "tail_offset%5#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "struct1#0",
        "updated_data%2#0",
        "tail_offset%5#0"
      ]
    },
    "2201": {
      "op": "itob",
      "defined_out": [
        "as_bytes%15#0",
        "struct1#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "struct1#0",
        "updated_data%2#0",
        "as_bytes%15#0"
      ]
    },
    "2202": {
      "op": "extract 6 2",
      "defined_out": [
        "struct1#0",
        "tail_offset_bytes%1#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "struct1#0",
        "updated_data%2#0",
        "tail_offset_bytes%1#0"
      ]
    },
    "2205": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tail_offset_bytes%1#0",
        "updated_data%2#0"
      ]
    },
    "2206": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "struct1#0",
        "tail_offset_bytes%1#0",
        "updated_data%2#0",
        "24"
      ]
    },
    "2208": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "updated_data%2#0",
        "24",
        "tail_offset_bytes%1#0"
      ]
    },
    "2210": {
      "op": "replace3",
      "stack_out": [
        "struct1#0",
        "struct2#0"
      ]
    },
    "2211": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "2212": {
      "error": "struct1 does not match struct2",
      "op": "assert // struct1 does not match struct2",
      "stack_out": []
    },
    "2213": {
      "retsub": true,
      "op": "retsub"
    },
    "2214": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification",
      "params": {},
      "block": "test_nested_tuple_modification_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2217": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte1",
      "op": "callsub get_byte1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2220": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte2",
      "op": "callsub get_byte2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2223": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "2224": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x"
      ]
    },
    "2225": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "0x",
        "tmp%1#0"
      ]
    },
    "2226": {
      "op": "concat",
      "defined_out": [
        "result%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "result%0#0"
      ]
    },
    "2227": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "result%0#0",
        "tmp%2#0"
      ]
    },
    "2228": {
      "op": "concat",
      "defined_out": [
        "result%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "result%1#0"
      ]
    },
    "2229": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "result%1#0",
        "0x"
      ]
    },
    "2230": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "0x",
        "result%1#0"
      ]
    },
    "2231": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_data%0#0"
      ]
    },
    "2232": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "array_data%0#0",
        "0x"
      ]
    },
    "2233": {
      "op": "uncover 2",
      "stack_out": [
        "array_data%0#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "2235": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0",
        "encoded%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "encoded%0#0"
      ]
    },
    "2236": {
      "op": "swap",
      "stack_out": [
        "encoded%0#0",
        "array_data%0#0"
      ]
    },
    "2237": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0"
      ]
    },
    "2238": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%1#0",
        "0x"
      ]
    },
    "2239": {
      "op": "concat",
      "defined_out": [
        "one#0"
      ],
      "stack_out": [
        "one#0"
      ]
    },
    "2240": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "one#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%3#0"
      ]
    },
    "2243": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "one#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2246": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tmp%3#0"
      ]
    },
    "2247": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tmp%3#0",
        "0x"
      ]
    },
    "2248": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "one#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tmp%3#0",
        "0x",
        "tmp%3#0 (copy)"
      ]
    },
    "2250": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "tail%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tmp%3#0",
        "tail%0#0"
      ]
    },
    "2251": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "tmp%3#0"
      ]
    },
    "2252": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "one#0",
        "tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "data_length%0#0"
      ]
    },
    "2253": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "data_length%0#0",
        "one#0",
        "tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "data_length%0#0",
        "4"
      ]
    },
    "2254": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%0#0",
        "one#0",
        "tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0"
      ]
    },
    "2255": {
      "op": "intc_3 // 4",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "4"
      ]
    },
    "2256": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "current_tail_offset%0#0",
        "one#0",
        "tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "as_bytes%0#0"
      ]
    },
    "2257": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0",
        "one#0",
        "tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "2260": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "2261": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "2262": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "one#0",
        "tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0"
      ]
    },
    "2263": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%0#0"
      ]
    },
    "2265": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%0#0",
        "tmp%4#0"
      ]
    },
    "2267": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "one#0",
        "tail%1#0"
      ],
      "stack_out": [
        "one#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%1#0"
      ]
    },
    "2268": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "current_tail_offset%0#0",
        "tail%1#0",
        "encoded%3#0"
      ]
    },
    "2269": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "tail%1#0",
        "encoded%3#0",
        "current_tail_offset%0#0"
      ]
    },
    "2271": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded%3#0",
        "one#0",
        "tail%1#0"
      ],
      "stack_out": [
        "one#0",
        "tail%1#0",
        "encoded%3#0",
        "as_bytes%1#0"
      ]
    },
    "2272": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%3#0",
        "offset_as_uint16%1#0",
        "one#0",
        "tail%1#0"
      ],
      "stack_out": [
        "one#0",
        "tail%1#0",
        "encoded%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2275": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "one#0",
        "tail%1#0"
      ],
      "stack_out": [
        "one#0",
        "tail%1#0",
        "encoded%4#0"
      ]
    },
    "2276": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "encoded%4#0",
        "tail%1#0"
      ]
    },
    "2277": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0"
      ]
    },
    "2278": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "one#0",
        "tmp%5#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0"
      ]
    },
    "2281": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte2",
      "op": "callsub get_byte2",
      "defined_out": [
        "one#0",
        "tmp%5#0",
        "tmp%6#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2284": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte1",
      "op": "callsub get_byte1",
      "defined_out": [
        "one#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2287": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%6#0"
      ]
    },
    "2288": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%6#0",
        "0x"
      ]
    },
    "2289": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "tmp%7#0",
        "0x",
        "tmp%6#0"
      ]
    },
    "2290": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "result%2#0",
        "tmp%5#0",
        "tmp%7#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "tmp%7#0",
        "result%2#0"
      ]
    },
    "2291": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "result%2#0",
        "tmp%7#0"
      ]
    },
    "2292": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "result%3#0",
        "tmp%5#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "result%3#0"
      ]
    },
    "2293": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "result%3#0",
        "0x"
      ]
    },
    "2294": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "0x",
        "result%3#0"
      ]
    },
    "2295": {
      "op": "concat",
      "defined_out": [
        "array_data%1#0",
        "one#0",
        "tmp%5#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "array_data%1#0"
      ]
    },
    "2296": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%5#0",
        "array_data%1#0",
        "0x"
      ]
    },
    "2297": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "array_data%1#0",
        "0x",
        "tmp%5#0"
      ]
    },
    "2299": {
      "op": "concat",
      "defined_out": [
        "array_data%1#0",
        "encoded%6#0",
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "array_data%1#0",
        "encoded%6#0"
      ]
    },
    "2300": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "encoded%6#0",
        "array_data%1#0"
      ]
    },
    "2301": {
      "op": "concat",
      "defined_out": [
        "encoded%7#0",
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "encoded%7#0"
      ]
    },
    "2302": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "encoded%7#0",
        "0x"
      ]
    },
    "2303": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0"
      ]
    },
    "2304": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%8#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%8#0"
      ]
    },
    "2307": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%8#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "2310": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "2311": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "2314": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "2316": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr1",
      "op": "callsub get_u16_arr1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%11#0"
      ]
    },
    "2319": {
      "op": "cover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "2321": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%12#0"
      ]
    },
    "2324": {
      "op": "cover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "2326": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "0x"
      ]
    },
    "2327": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "0x",
        "tmp%8#0"
      ]
    },
    "2328": {
      "op": "concat",
      "defined_out": [
        "encoded%9#0",
        "one#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%9#0",
        "encoded%9#0"
      ]
    },
    "2329": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "encoded%9#0",
        "tmp%9#0"
      ]
    },
    "2330": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "encoded%9#0",
        "tmp%9#0",
        "0x"
      ]
    },
    "2331": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "encoded%9#0",
        "one#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "encoded%9#0",
        "tmp%9#0",
        "0x",
        "tmp%9#0 (copy)"
      ]
    },
    "2333": {
      "op": "concat",
      "defined_out": [
        "encoded%9#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "encoded%9#0",
        "tmp%9#0",
        "tail%2#0"
      ]
    },
    "2334": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "encoded%9#0",
        "tmp%9#0"
      ]
    },
    "2336": {
      "op": "len",
      "defined_out": [
        "data_length%2#0",
        "encoded%9#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "encoded%9#0",
        "data_length%2#0"
      ]
    },
    "2337": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "data_length%2#0",
        "encoded%9#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "encoded%9#0",
        "data_length%2#0",
        "28"
      ]
    },
    "2339": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%9#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "encoded%9#0",
        "current_tail_offset%2#0"
      ]
    },
    "2340": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%9#0"
      ]
    },
    "2341": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%9#0",
        "28"
      ]
    },
    "2343": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "current_tail_offset%2#0",
        "encoded%9#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%9#0",
        "as_bytes%2#0"
      ]
    },
    "2344": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%9#0",
        "offset_as_uint16%2#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%9#0",
        "offset_as_uint16%2#0"
      ]
    },
    "2347": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%10#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%10#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%10#0"
      ]
    },
    "2348": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%10#0",
        "tmp%10#0"
      ]
    },
    "2350": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%11#0",
        "one#0",
        "tail%2#0",
        "three#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%11#0"
      ]
    },
    "2351": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "current_tail_offset%2#0",
        "encoded%11#0",
        "tail%2#0"
      ]
    },
    "2353": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "current_tail_offset%2#0",
        "encoded%11#0",
        "tail%2#0",
        "tmp%11#0"
      ]
    },
    "2355": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%11#0",
        "one#0",
        "tail%3#0",
        "three#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "current_tail_offset%2#0",
        "encoded%11#0",
        "tail%3#0"
      ]
    },
    "2356": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "current_tail_offset%2#0",
        "tail%3#0",
        "encoded%11#0"
      ]
    },
    "2357": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tail%3#0",
        "encoded%11#0",
        "current_tail_offset%2#0"
      ]
    },
    "2359": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded%11#0",
        "one#0",
        "tail%3#0",
        "three#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tail%3#0",
        "encoded%11#0",
        "as_bytes%3#0"
      ]
    },
    "2360": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%11#0",
        "offset_as_uint16%3#0",
        "one#0",
        "tail%3#0",
        "three#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tail%3#0",
        "encoded%11#0",
        "offset_as_uint16%3#0"
      ]
    },
    "2363": {
      "op": "concat",
      "defined_out": [
        "encoded%12#0",
        "one#0",
        "tail%3#0",
        "three#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tail%3#0",
        "encoded%12#0"
      ]
    },
    "2364": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tail%3#0",
        "encoded%12#0",
        "tmp%12#0"
      ]
    },
    "2366": {
      "op": "concat",
      "defined_out": [
        "encoded%13#0",
        "one#0",
        "tail%3#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tail%3#0",
        "encoded%13#0"
      ]
    },
    "2367": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "encoded%13#0",
        "tail%3#0"
      ]
    },
    "2368": {
      "op": "concat",
      "defined_out": [
        "four1#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0"
      ]
    },
    "2369": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%13#0"
      ]
    },
    "2372": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "2375": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%14#0",
        "tmp%13#0"
      ]
    },
    "2376": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "2379": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0"
      ]
    },
    "2381": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr1",
      "op": "callsub get_u16_arr1",
      "defined_out": [
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "2384": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "2387": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "expr_value_trimmed%0#0",
        "0x"
      ]
    },
    "2388": {
      "op": "pushbytes 0x007b",
      "defined_out": [
        "0x",
        "0x007b",
        "expr_value_trimmed%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "expr_value_trimmed%0#0",
        "0x",
        "0x007b"
      ]
    },
    "2392": {
      "op": "concat",
      "defined_out": [
        "encoded%15#0",
        "expr_value_trimmed%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "expr_value_trimmed%0#0",
        "encoded%15#0"
      ]
    },
    "2393": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "expr_value_trimmed%0#0",
        "encoded%15#0",
        "0x"
      ]
    },
    "2394": {
      "op": "concat",
      "defined_out": [
        "encoded%16#0",
        "expr_value_trimmed%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "expr_value_trimmed%0#0",
        "encoded%16#0"
      ]
    },
    "2395": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "concatenated%0#0"
      ]
    },
    "2396": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "2397": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "2398": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "byte_len%0#0",
        "concatenated%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "2"
      ]
    },
    "2399": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "four1#0",
        "len_%0#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "2400": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "concatenated%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "concatenated%0#0",
        "as_bytes%4#0"
      ]
    },
    "2401": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "four1#0",
        "len_16_bit%0#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "2404": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "2405": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "concat_result%0#0"
      ]
    },
    "2406": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "concat_result%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "concat_result%0#0",
        "tmp%17#0"
      ]
    },
    "2409": {
      "op": "cover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%14#0",
        "tmp%13#0",
        "concat_result%0#0"
      ]
    },
    "2411": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%14#0",
        "tmp%13#0",
        "concat_result%0#0",
        "0x"
      ]
    },
    "2412": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%14#0",
        "concat_result%0#0",
        "0x",
        "tmp%13#0"
      ]
    },
    "2414": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "encoded%17#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%14#0",
        "concat_result%0#0",
        "encoded%17#0"
      ]
    },
    "2415": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%14#0",
        "concat_result%0#0",
        "encoded%17#0",
        "0x"
      ]
    },
    "2416": {
      "op": "dig 3",
      "defined_out": [
        "0x",
        "concat_result%0#0",
        "encoded%17#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "tmp%15#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%14#0",
        "concat_result%0#0",
        "encoded%17#0",
        "0x",
        "tmp%14#0 (copy)"
      ]
    },
    "2418": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "encoded%17#0",
        "four1#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%14#0",
        "concat_result%0#0",
        "encoded%17#0",
        "tail%4#0"
      ]
    },
    "2419": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%14#0",
        "tail%4#0",
        "concat_result%0#0",
        "encoded%17#0"
      ]
    },
    "2421": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tail%4#0",
        "concat_result%0#0",
        "encoded%17#0",
        "tmp%14#0"
      ]
    },
    "2423": {
      "op": "len",
      "defined_out": [
        "concat_result%0#0",
        "data_length%4#0",
        "encoded%17#0",
        "four1#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%15#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tail%4#0",
        "concat_result%0#0",
        "encoded%17#0",
        "data_length%4#0"
      ]
    },
    "2424": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tail%4#0",
        "concat_result%0#0",
        "encoded%17#0",
        "data_length%4#0",
        "28"
      ]
    },
    "2426": {
      "op": "+",
      "defined_out": [
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%17#0",
        "four1#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%15#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tail%4#0",
        "concat_result%0#0",
        "encoded%17#0",
        "current_tail_offset%4#0"
      ]
    },
    "2427": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tail%4#0",
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%17#0"
      ]
    },
    "2428": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tail%4#0",
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%17#0",
        "28"
      ]
    },
    "2430": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%17#0",
        "four1#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%15#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tail%4#0",
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%17#0",
        "as_bytes%5#0"
      ]
    },
    "2431": {
      "op": "extract 6 2",
      "defined_out": [
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%17#0",
        "four1#0",
        "offset_as_uint16%4#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%15#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tail%4#0",
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%17#0",
        "offset_as_uint16%4#0"
      ]
    },
    "2434": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%18#0",
        "four1#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%15#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tail%4#0",
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%18#0"
      ]
    },
    "2435": {
      "op": "uncover 5",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%17#0",
        "tail%4#0",
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%18#0",
        "tmp%15#0"
      ]
    },
    "2437": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%19#0",
        "four1#0",
        "one#0",
        "tail%4#0",
        "three#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%17#0",
        "tail%4#0",
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%19#0"
      ]
    },
    "2438": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%17#0",
        "concat_result%0#0",
        "current_tail_offset%4#0",
        "encoded%19#0",
        "tail%4#0"
      ]
    },
    "2440": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%17#0",
        "current_tail_offset%4#0",
        "encoded%19#0",
        "tail%4#0",
        "concat_result%0#0"
      ]
    },
    "2442": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded%19#0",
        "four1#0",
        "one#0",
        "tail%5#0",
        "three#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%17#0",
        "current_tail_offset%4#0",
        "encoded%19#0",
        "tail%5#0"
      ]
    },
    "2443": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%17#0",
        "current_tail_offset%4#0",
        "tail%5#0",
        "encoded%19#0"
      ]
    },
    "2444": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%17#0",
        "tail%5#0",
        "encoded%19#0",
        "current_tail_offset%4#0"
      ]
    },
    "2446": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "encoded%19#0",
        "four1#0",
        "one#0",
        "tail%5#0",
        "three#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%17#0",
        "tail%5#0",
        "encoded%19#0",
        "as_bytes%6#0"
      ]
    },
    "2447": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%19#0",
        "four1#0",
        "offset_as_uint16%5#0",
        "one#0",
        "tail%5#0",
        "three#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%17#0",
        "tail%5#0",
        "encoded%19#0",
        "offset_as_uint16%5#0"
      ]
    },
    "2450": {
      "op": "concat",
      "defined_out": [
        "encoded%20#0",
        "four1#0",
        "one#0",
        "tail%5#0",
        "three#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%17#0",
        "tail%5#0",
        "encoded%20#0"
      ]
    },
    "2451": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tail%5#0",
        "encoded%20#0",
        "tmp%17#0"
      ]
    },
    "2453": {
      "op": "concat",
      "defined_out": [
        "encoded%21#0",
        "four1#0",
        "one#0",
        "tail%5#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tail%5#0",
        "encoded%21#0"
      ]
    },
    "2454": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "encoded%21#0",
        "tail%5#0"
      ]
    },
    "2455": {
      "op": "concat",
      "defined_out": [
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0"
      ]
    },
    "2456": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%18#0"
      ]
    },
    "2459": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "tmp%18#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "2462": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tmp%18#0"
      ]
    },
    "2463": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tmp%18#0",
        "0x"
      ]
    },
    "2464": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tmp%18#0",
        "0x",
        "tmp%18#0 (copy)"
      ]
    },
    "2466": {
      "op": "concat",
      "defined_out": [
        "four1#0",
        "four2#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "tmp%18#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tmp%18#0",
        "tail%6#0"
      ]
    },
    "2467": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tail%6#0",
        "tmp%18#0"
      ]
    },
    "2468": {
      "op": "len",
      "defined_out": [
        "data_length%6#0",
        "four1#0",
        "four2#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tail%6#0",
        "data_length%6#0"
      ]
    },
    "2469": {
      "op": "intc_3 // 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tail%6#0",
        "data_length%6#0",
        "4"
      ]
    },
    "2470": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%6#0",
        "four1#0",
        "four2#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tail%6#0",
        "current_tail_offset%6#0"
      ]
    },
    "2471": {
      "op": "intc_3 // 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "4"
      ]
    },
    "2472": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "current_tail_offset%6#0",
        "four1#0",
        "four2#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "as_bytes%7#0"
      ]
    },
    "2473": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%6#0",
        "four1#0",
        "four2#0",
        "offset_as_uint16%6#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "offset_as_uint16%6#0"
      ]
    },
    "2476": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "offset_as_uint16%6#0",
        "0x"
      ]
    },
    "2477": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "0x",
        "offset_as_uint16%6#0"
      ]
    },
    "2478": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%6#0",
        "encoded%23#0",
        "four1#0",
        "four2#0",
        "one#0",
        "tail%6#0",
        "three#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "tail%6#0",
        "current_tail_offset%6#0",
        "encoded%23#0"
      ]
    },
    "2479": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%19#0",
        "current_tail_offset%6#0",
        "encoded%23#0",
        "tail%6#0"
      ]
    },
    "2481": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "current_tail_offset%6#0",
        "encoded%23#0",
        "tail%6#0",
        "tmp%19#0"
      ]
    },
    "2483": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%6#0",
        "encoded%23#0",
        "four1#0",
        "four2#0",
        "one#0",
        "tail%7#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "current_tail_offset%6#0",
        "encoded%23#0",
        "tail%7#0"
      ]
    },
    "2484": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "current_tail_offset%6#0",
        "tail%7#0",
        "encoded%23#0"
      ]
    },
    "2485": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tail%7#0",
        "encoded%23#0",
        "current_tail_offset%6#0"
      ]
    },
    "2487": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "encoded%23#0",
        "four1#0",
        "four2#0",
        "one#0",
        "tail%7#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tail%7#0",
        "encoded%23#0",
        "as_bytes%8#0"
      ]
    },
    "2488": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%23#0",
        "four1#0",
        "four2#0",
        "offset_as_uint16%7#0",
        "one#0",
        "tail%7#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tail%7#0",
        "encoded%23#0",
        "offset_as_uint16%7#0"
      ]
    },
    "2491": {
      "op": "concat",
      "defined_out": [
        "encoded%24#0",
        "four1#0",
        "four2#0",
        "one#0",
        "tail%7#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tail%7#0",
        "encoded%24#0"
      ]
    },
    "2492": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "encoded%24#0",
        "tail%7#0"
      ]
    },
    "2493": {
      "op": "concat",
      "defined_out": [
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "five#0"
      ]
    },
    "2494": {
      "op": "dig 5",
      "defined_out": [
        "copy%0#0",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "five#0",
        "copy%0#0"
      ]
    },
    "2496": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "copy%0#0",
        "five#0"
      ]
    },
    "2497": {
      "op": "dig 5",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "copy%0#0",
        "five#0",
        "copy%1#0"
      ]
    },
    "2499": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0"
      ]
    },
    "2501": {
      "op": "dig 5",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "copy%2#0",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0",
        "copy%2#0"
      ]
    },
    "2503": {
      "op": "cover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "copy%2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0"
      ]
    },
    "2505": {
      "op": "uncover 5",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "copy%2#0",
        "copy%3#0",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0",
        "copy%3#0"
      ]
    },
    "2507": {
      "op": "cover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0"
      ]
    },
    "2509": {
      "op": "dup",
      "defined_out": [
        "copy%0#0",
        "copy%1#0",
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0",
        "copy%4#0"
      ]
    },
    "2510": {
      "op": "cover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0"
      ]
    },
    "2512": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "copy%0#0",
        "five#0",
        "0x"
      ]
    },
    "2513": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "five#0",
        "0x",
        "copy%0#0"
      ]
    },
    "2515": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "encoded%26#0",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "five#0",
        "encoded%26#0"
      ]
    },
    "2516": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "encoded%26#0",
        "five#0"
      ]
    },
    "2517": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "encoded%26#0",
        "five#0",
        "0x"
      ]
    },
    "2518": {
      "op": "dig 3",
      "defined_out": [
        "0x",
        "copy%1#0",
        "copy%1#0 (copy)",
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "encoded%26#0",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "encoded%26#0",
        "five#0",
        "0x",
        "copy%1#0 (copy)"
      ]
    },
    "2520": {
      "op": "concat",
      "defined_out": [
        "copy%1#0",
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "encoded%26#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "encoded%26#0",
        "five#0",
        "tail%8#0"
      ]
    },
    "2521": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "copy%1#0",
        "tail%8#0",
        "encoded%26#0",
        "five#0"
      ]
    },
    "2523": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%8#0",
        "encoded%26#0",
        "five#0",
        "copy%1#0"
      ]
    },
    "2525": {
      "op": "len",
      "defined_out": [
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "data_length%8#0",
        "encoded%26#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%8#0",
        "encoded%26#0",
        "five#0",
        "data_length%8#0"
      ]
    },
    "2526": {
      "op": "pushint 26 // 26",
      "defined_out": [
        "26",
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "data_length%8#0",
        "encoded%26#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%8#0",
        "encoded%26#0",
        "five#0",
        "data_length%8#0",
        "26"
      ]
    },
    "2528": {
      "op": "+",
      "defined_out": [
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "encoded%26#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%8#0",
        "encoded%26#0",
        "five#0",
        "current_tail_offset%8#0"
      ]
    },
    "2529": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%8#0",
        "current_tail_offset%8#0",
        "encoded%26#0",
        "five#0"
      ]
    },
    "2531": {
      "op": "pushint 26 // 26",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%8#0",
        "current_tail_offset%8#0",
        "encoded%26#0",
        "five#0",
        "26"
      ]
    },
    "2533": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "encoded%26#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%8#0",
        "current_tail_offset%8#0",
        "encoded%26#0",
        "five#0",
        "as_bytes%9#0"
      ]
    },
    "2534": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "encoded%26#0",
        "five#0",
        "four2#0",
        "offset_as_uint16%8#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%8#0",
        "current_tail_offset%8#0",
        "encoded%26#0",
        "five#0",
        "offset_as_uint16%8#0"
      ]
    },
    "2537": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%8#0",
        "current_tail_offset%8#0",
        "five#0",
        "offset_as_uint16%8#0",
        "encoded%26#0"
      ]
    },
    "2539": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%8#0",
        "current_tail_offset%8#0",
        "five#0",
        "encoded%26#0",
        "offset_as_uint16%8#0"
      ]
    },
    "2540": {
      "op": "concat",
      "defined_out": [
        "copy%2#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "encoded%27#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "copy%2#0",
        "tail%8#0",
        "current_tail_offset%8#0",
        "five#0",
        "encoded%27#0"
      ]
    },
    "2541": {
      "op": "uncover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "tail%8#0",
        "current_tail_offset%8#0",
        "five#0",
        "encoded%27#0",
        "copy%2#0"
      ]
    },
    "2543": {
      "op": "concat",
      "defined_out": [
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "encoded%28#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "tail%8#0",
        "current_tail_offset%8#0",
        "five#0",
        "encoded%28#0"
      ]
    },
    "2544": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "five#0",
        "encoded%28#0",
        "tail%8#0"
      ]
    },
    "2546": {
      "op": "dig 5",
      "defined_out": [
        "copy%3#0",
        "copy%3#0 (copy)",
        "copy%4#0",
        "current_tail_offset%8#0",
        "encoded%28#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%8#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "five#0",
        "encoded%28#0",
        "tail%8#0",
        "copy%3#0 (copy)"
      ]
    },
    "2548": {
      "op": "concat",
      "defined_out": [
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "encoded%28#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%9#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "five#0",
        "encoded%28#0",
        "tail%9#0"
      ]
    },
    "2549": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%3#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "tail%9#0",
        "five#0",
        "encoded%28#0"
      ]
    },
    "2551": {
      "op": "uncover 5",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "tail%9#0",
        "five#0",
        "encoded%28#0",
        "copy%3#0"
      ]
    },
    "2553": {
      "op": "len",
      "defined_out": [
        "copy%4#0",
        "current_tail_offset%8#0",
        "data_length%9#0",
        "encoded%28#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%9#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "tail%9#0",
        "five#0",
        "encoded%28#0",
        "data_length%9#0"
      ]
    },
    "2554": {
      "op": "dig 4",
      "defined_out": [
        "copy%4#0",
        "current_tail_offset%8#0",
        "current_tail_offset%8#0 (copy)",
        "data_length%9#0",
        "encoded%28#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%9#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "tail%9#0",
        "five#0",
        "encoded%28#0",
        "data_length%9#0",
        "current_tail_offset%8#0 (copy)"
      ]
    },
    "2556": {
      "op": "+",
      "defined_out": [
        "copy%4#0",
        "current_tail_offset%8#0",
        "current_tail_offset%9#0",
        "encoded%28#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%9#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "tail%9#0",
        "five#0",
        "encoded%28#0",
        "current_tail_offset%9#0"
      ]
    },
    "2557": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%4#0",
        "current_tail_offset%8#0",
        "tail%9#0",
        "five#0",
        "current_tail_offset%9#0",
        "encoded%28#0"
      ]
    },
    "2558": {
      "op": "uncover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%4#0",
        "tail%9#0",
        "five#0",
        "current_tail_offset%9#0",
        "encoded%28#0",
        "current_tail_offset%8#0"
      ]
    },
    "2560": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "copy%4#0",
        "current_tail_offset%9#0",
        "encoded%28#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%9#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%4#0",
        "tail%9#0",
        "five#0",
        "current_tail_offset%9#0",
        "encoded%28#0",
        "as_bytes%10#0"
      ]
    },
    "2561": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%4#0",
        "current_tail_offset%9#0",
        "encoded%28#0",
        "five#0",
        "four2#0",
        "offset_as_uint16%9#0",
        "one#0",
        "tail%9#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%4#0",
        "tail%9#0",
        "five#0",
        "current_tail_offset%9#0",
        "encoded%28#0",
        "offset_as_uint16%9#0"
      ]
    },
    "2564": {
      "op": "concat",
      "defined_out": [
        "copy%4#0",
        "current_tail_offset%9#0",
        "encoded%29#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%9#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%4#0",
        "tail%9#0",
        "five#0",
        "current_tail_offset%9#0",
        "encoded%29#0"
      ]
    },
    "2565": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "copy%4#0",
        "five#0",
        "current_tail_offset%9#0",
        "encoded%29#0",
        "tail%9#0"
      ]
    },
    "2567": {
      "op": "uncover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "current_tail_offset%9#0",
        "encoded%29#0",
        "tail%9#0",
        "copy%4#0"
      ]
    },
    "2569": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%9#0",
        "encoded%29#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%10#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "current_tail_offset%9#0",
        "encoded%29#0",
        "tail%10#0"
      ]
    },
    "2570": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "current_tail_offset%9#0",
        "tail%10#0",
        "encoded%29#0"
      ]
    },
    "2571": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "tail%10#0",
        "encoded%29#0",
        "current_tail_offset%9#0"
      ]
    },
    "2573": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "encoded%29#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%10#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "tail%10#0",
        "encoded%29#0",
        "as_bytes%11#0"
      ]
    },
    "2574": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%29#0",
        "five#0",
        "four2#0",
        "offset_as_uint16%10#0",
        "one#0",
        "tail%10#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "tail%10#0",
        "encoded%29#0",
        "offset_as_uint16%10#0"
      ]
    },
    "2577": {
      "op": "concat",
      "defined_out": [
        "encoded%30#0",
        "five#0",
        "four2#0",
        "one#0",
        "tail%10#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "tail%10#0",
        "encoded%30#0"
      ]
    },
    "2578": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "encoded%30#0",
        "tail%10#0"
      ]
    },
    "2579": {
      "op": "concat",
      "defined_out": [
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "tup1#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "tup1#0"
      ]
    },
    "2580": {
      "op": "cover 5",
      "stack_out": [
        "tup1#0",
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0"
      ]
    },
    "2582": {
      "op": "uncover 4",
      "defined_out": [
        "copy%5#0",
        "five#0",
        "four2#0",
        "three#0",
        "tup1#0",
        "two#0"
      ],
      "stack_out": [
        "tup1#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "copy%5#0"
      ]
    },
    "2584": {
      "op": "uncover 4",
      "defined_out": [
        "copy%5#0",
        "copy%6#0",
        "five#0",
        "four2#0",
        "three#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "three#0",
        "four2#0",
        "five#0",
        "copy%5#0",
        "copy%6#0"
      ]
    },
    "2586": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "three#0",
        "four2#0",
        "five#0",
        "copy%6#0",
        "copy%5#0"
      ]
    },
    "2587": {
      "op": "uncover 4",
      "defined_out": [
        "copy%5#0",
        "copy%6#0",
        "copy%7#0",
        "five#0",
        "four2#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "four2#0",
        "five#0",
        "copy%6#0",
        "copy%5#0",
        "copy%7#0"
      ]
    },
    "2589": {
      "op": "cover 2",
      "stack_out": [
        "tup1#0",
        "four2#0",
        "five#0",
        "copy%7#0",
        "copy%6#0",
        "copy%5#0"
      ]
    },
    "2591": {
      "op": "uncover 4",
      "defined_out": [
        "copy%5#0",
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "five#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "five#0",
        "copy%7#0",
        "copy%6#0",
        "copy%5#0",
        "copy%8#0"
      ]
    },
    "2593": {
      "op": "cover 3",
      "defined_out": [
        "copy%5#0",
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "copy%9#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "copy%5#0"
      ]
    },
    "2595": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "copy%5#0",
        "0x"
      ]
    },
    "2596": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "0x",
        "copy%5#0"
      ]
    },
    "2597": {
      "op": "concat",
      "defined_out": [
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "copy%9#0",
        "encoded%32#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "copy%6#0",
        "encoded%32#0"
      ]
    },
    "2598": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "encoded%32#0",
        "copy%6#0"
      ]
    },
    "2599": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "encoded%32#0",
        "copy%6#0",
        "0x"
      ]
    },
    "2600": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "copy%6#0",
        "copy%6#0 (copy)",
        "copy%7#0",
        "copy%8#0",
        "copy%9#0",
        "encoded%32#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "encoded%32#0",
        "copy%6#0",
        "0x",
        "copy%6#0 (copy)"
      ]
    },
    "2602": {
      "op": "concat",
      "defined_out": [
        "copy%6#0",
        "copy%7#0",
        "copy%8#0",
        "copy%9#0",
        "encoded%32#0",
        "tail%11#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "encoded%32#0",
        "copy%6#0",
        "tail%11#0"
      ]
    },
    "2603": {
      "op": "cover 2",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "tail%11#0",
        "encoded%32#0",
        "copy%6#0"
      ]
    },
    "2605": {
      "op": "len",
      "defined_out": [
        "copy%7#0",
        "copy%8#0",
        "copy%9#0",
        "data_length%11#0",
        "encoded%32#0",
        "tail%11#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "tail%11#0",
        "encoded%32#0",
        "data_length%11#0"
      ]
    },
    "2606": {
      "op": "pushint 26 // 26",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "tail%11#0",
        "encoded%32#0",
        "data_length%11#0",
        "26"
      ]
    },
    "2608": {
      "op": "+",
      "defined_out": [
        "copy%7#0",
        "copy%8#0",
        "copy%9#0",
        "current_tail_offset%11#0",
        "encoded%32#0",
        "tail%11#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "tail%11#0",
        "encoded%32#0",
        "current_tail_offset%11#0"
      ]
    },
    "2609": {
      "op": "cover 2",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%32#0"
      ]
    },
    "2611": {
      "op": "pushint 26 // 26",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%32#0",
        "26"
      ]
    },
    "2613": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "copy%7#0",
        "copy%8#0",
        "copy%9#0",
        "current_tail_offset%11#0",
        "encoded%32#0",
        "tail%11#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%32#0",
        "as_bytes%12#0"
      ]
    },
    "2614": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%7#0",
        "copy%8#0",
        "copy%9#0",
        "current_tail_offset%11#0",
        "encoded%32#0",
        "offset_as_uint16%11#0",
        "tail%11#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%32#0",
        "offset_as_uint16%11#0"
      ]
    },
    "2617": {
      "op": "concat",
      "defined_out": [
        "copy%7#0",
        "copy%8#0",
        "copy%9#0",
        "current_tail_offset%11#0",
        "encoded%33#0",
        "tail%11#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "copy%7#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%33#0"
      ]
    },
    "2618": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%33#0",
        "copy%7#0"
      ]
    },
    "2620": {
      "op": "concat",
      "defined_out": [
        "copy%8#0",
        "copy%9#0",
        "current_tail_offset%11#0",
        "encoded%34#0",
        "tail%11#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "current_tail_offset%11#0",
        "tail%11#0",
        "encoded%34#0"
      ]
    },
    "2621": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "current_tail_offset%11#0",
        "encoded%34#0",
        "tail%11#0"
      ]
    },
    "2622": {
      "op": "dig 3",
      "defined_out": [
        "copy%8#0",
        "copy%8#0 (copy)",
        "copy%9#0",
        "current_tail_offset%11#0",
        "encoded%34#0",
        "tail%11#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "current_tail_offset%11#0",
        "encoded%34#0",
        "tail%11#0",
        "copy%8#0 (copy)"
      ]
    },
    "2624": {
      "op": "concat",
      "defined_out": [
        "copy%8#0",
        "copy%9#0",
        "current_tail_offset%11#0",
        "encoded%34#0",
        "tail%12#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "current_tail_offset%11#0",
        "encoded%34#0",
        "tail%12#0"
      ]
    },
    "2625": {
      "op": "cover 2",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "copy%8#0",
        "tail%12#0",
        "current_tail_offset%11#0",
        "encoded%34#0"
      ]
    },
    "2627": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "tail%12#0",
        "current_tail_offset%11#0",
        "encoded%34#0",
        "copy%8#0"
      ]
    },
    "2629": {
      "op": "len",
      "defined_out": [
        "copy%9#0",
        "current_tail_offset%11#0",
        "data_length%12#0",
        "encoded%34#0",
        "tail%12#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "tail%12#0",
        "current_tail_offset%11#0",
        "encoded%34#0",
        "data_length%12#0"
      ]
    },
    "2630": {
      "op": "dig 2",
      "defined_out": [
        "copy%9#0",
        "current_tail_offset%11#0",
        "current_tail_offset%11#0 (copy)",
        "data_length%12#0",
        "encoded%34#0",
        "tail%12#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "tail%12#0",
        "current_tail_offset%11#0",
        "encoded%34#0",
        "data_length%12#0",
        "current_tail_offset%11#0 (copy)"
      ]
    },
    "2632": {
      "op": "+",
      "defined_out": [
        "copy%9#0",
        "current_tail_offset%11#0",
        "current_tail_offset%12#0",
        "encoded%34#0",
        "tail%12#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "tail%12#0",
        "current_tail_offset%11#0",
        "encoded%34#0",
        "current_tail_offset%12#0"
      ]
    },
    "2633": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "tail%12#0",
        "current_tail_offset%11#0",
        "current_tail_offset%12#0",
        "encoded%34#0"
      ]
    },
    "2634": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "tail%12#0",
        "current_tail_offset%12#0",
        "encoded%34#0",
        "current_tail_offset%11#0"
      ]
    },
    "2636": {
      "op": "itob",
      "defined_out": [
        "as_bytes%13#0",
        "copy%9#0",
        "current_tail_offset%12#0",
        "encoded%34#0",
        "tail%12#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "tail%12#0",
        "current_tail_offset%12#0",
        "encoded%34#0",
        "as_bytes%13#0"
      ]
    },
    "2637": {
      "op": "extract 6 2",
      "defined_out": [
        "copy%9#0",
        "current_tail_offset%12#0",
        "encoded%34#0",
        "offset_as_uint16%12#0",
        "tail%12#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "tail%12#0",
        "current_tail_offset%12#0",
        "encoded%34#0",
        "offset_as_uint16%12#0"
      ]
    },
    "2640": {
      "op": "concat",
      "defined_out": [
        "copy%9#0",
        "current_tail_offset%12#0",
        "encoded%35#0",
        "tail%12#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "tail%12#0",
        "current_tail_offset%12#0",
        "encoded%35#0"
      ]
    },
    "2641": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "copy%9#0",
        "current_tail_offset%12#0",
        "encoded%35#0",
        "tail%12#0"
      ]
    },
    "2643": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "current_tail_offset%12#0",
        "encoded%35#0",
        "tail%12#0",
        "copy%9#0"
      ]
    },
    "2645": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%12#0",
        "encoded%35#0",
        "tail%13#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "current_tail_offset%12#0",
        "encoded%35#0",
        "tail%13#0"
      ]
    },
    "2646": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "current_tail_offset%12#0",
        "tail%13#0",
        "encoded%35#0"
      ]
    },
    "2647": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "tail%13#0",
        "encoded%35#0",
        "current_tail_offset%12#0"
      ]
    },
    "2649": {
      "op": "itob",
      "defined_out": [
        "as_bytes%14#0",
        "encoded%35#0",
        "tail%13#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "tail%13#0",
        "encoded%35#0",
        "as_bytes%14#0"
      ]
    },
    "2650": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%35#0",
        "offset_as_uint16%13#0",
        "tail%13#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "tail%13#0",
        "encoded%35#0",
        "offset_as_uint16%13#0"
      ]
    },
    "2653": {
      "op": "concat",
      "defined_out": [
        "encoded%36#0",
        "tail%13#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "tail%13#0",
        "encoded%36#0"
      ]
    },
    "2654": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "encoded%36#0",
        "tail%13#0"
      ]
    },
    "2655": {
      "op": "concat",
      "defined_out": [
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0"
      ]
    },
    "2656": {
      "op": "dup",
      "defined_out": [
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)"
      ]
    },
    "2657": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)",
        "22"
      ]
    },
    "2659": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "item_start_offset%0#0"
      ]
    },
    "2660": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "item_start_offset%0#0",
        "tup2#0"
      ]
    },
    "2661": {
      "op": "dup",
      "stack_out": [
        "tup1#0",
        "item_start_offset%0#0",
        "tup2#0",
        "tup2#0 (copy)"
      ]
    },
    "2662": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "item_start_offset%0#0",
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)"
      ],
      "stack_out": [
        "tup1#0",
        "item_start_offset%0#0",
        "tup2#0",
        "tup2#0 (copy)",
        "24"
      ]
    },
    "2664": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "item_start_offset%0#0",
        "tup2#0",
        "item_end_offset%0#0"
      ]
    },
    "2665": {
      "op": "dig 1",
      "stack_out": [
        "tup1#0",
        "item_start_offset%0#0",
        "tup2#0",
        "item_end_offset%0#0",
        "tup2#0 (copy)"
      ]
    },
    "2667": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "item_end_offset%0#0",
        "tup2#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "2669": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "2671": {
      "op": "substring3",
      "defined_out": [
        "tmp%20#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%20#0"
      ]
    },
    "2672": {
      "op": "dup",
      "defined_out": [
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "2673": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "18"
      ]
    },
    "2675": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%1#0",
        "tmp%20#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%20#0",
        "item_start_offset%1#0"
      ]
    },
    "2676": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "item_start_offset%1#0",
        "tmp%20#0"
      ]
    },
    "2677": {
      "op": "dup",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "item_start_offset%1#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "2678": {
      "op": "len",
      "defined_out": [
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%20#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "item_start_offset%1#0",
        "tmp%20#0",
        "item_end_offset%1#0"
      ]
    },
    "2679": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "tmp%20#0"
      ]
    },
    "2680": {
      "op": "dup",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "2681": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "item_end_offset%1#0",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "2683": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "2685": {
      "op": "substring3",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "2686": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%20#0",
        "tmp%21#0",
        "2"
      ]
    },
    "2687": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "op": "callsub dynamic_array_pop_fixed_size",
      "defined_out": [
        "data%0#0",
        "popped%0#0",
        "tmp%20#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%20#0",
        "popped%0#0",
        "data%0#0"
      ]
    },
    "2690": {
      "op": "cover 2",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "data%0#0",
        "tmp%20#0",
        "popped%0#0"
      ]
    },
    "2692": {
      "op": "pop",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "data%0#0",
        "tmp%20#0"
      ]
    },
    "2693": {
      "op": "dup",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "data%0#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "2694": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "data%0#0",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "18"
      ]
    },
    "2696": {
      "op": "extract_uint16",
      "defined_out": [
        "data%0#0",
        "item_offset%0#0",
        "tmp%20#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "data%0#0",
        "tmp%20#0",
        "item_offset%0#0"
      ]
    },
    "2697": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "data%0#0",
        "item_offset%0#0",
        "tmp%20#0"
      ]
    },
    "2698": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "data%0#0",
        "item_offset%0#0",
        "tmp%20#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "data%0#0",
        "item_offset%0#0",
        "tmp%20#0",
        "0"
      ]
    },
    "2699": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "data%0#0",
        "tmp%20#0",
        "0",
        "item_offset%0#0"
      ]
    },
    "2701": {
      "op": "extract3",
      "defined_out": [
        "data%0#0",
        "data_up_to_item%0#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "data%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "2702": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "data_up_to_item%0#0",
        "data%0#0"
      ]
    },
    "2703": {
      "op": "concat",
      "defined_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0"
      ]
    },
    "2704": {
      "op": "dig 1",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "tup2#0 (copy)"
      ]
    },
    "2706": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "tup2#0 (copy)",
        "22"
      ]
    },
    "2708": {
      "op": "extract_uint16",
      "defined_out": [
        "item_offset%1#0",
        "tup1#0",
        "tup2#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "item_offset%1#0"
      ]
    },
    "2709": {
      "op": "dig 2",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "item_offset%1#0",
        "tup2#0 (copy)"
      ]
    },
    "2711": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "item_offset%1#0",
        "tup2#0 (copy)",
        "0"
      ]
    },
    "2712": {
      "op": "dig 2",
      "defined_out": [
        "0",
        "item_offset%1#0",
        "item_offset%1#0 (copy)",
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "item_offset%1#0",
        "tup2#0 (copy)",
        "0",
        "item_offset%1#0 (copy)"
      ]
    },
    "2714": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%1#0",
        "item_offset%1#0",
        "tup1#0",
        "tup2#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "item_offset%1#0",
        "data_up_to_item%1#0"
      ]
    },
    "2715": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "data_up_to_item%1#0",
        "item_offset%1#0"
      ]
    },
    "2716": {
      "op": "dig 3",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "data_up_to_item%1#0",
        "item_offset%1#0",
        "tup2#0 (copy)"
      ]
    },
    "2718": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "data_up_to_item%1#0",
        "item_offset%1#0",
        "tup2#0 (copy)",
        "24"
      ]
    },
    "2720": {
      "op": "extract_uint16",
      "defined_out": [
        "data_up_to_item%1#0",
        "item_offset%1#0",
        "next_item_offset%0#0",
        "tup1#0",
        "tup2#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "data_up_to_item%1#0",
        "item_offset%1#0",
        "next_item_offset%0#0"
      ]
    },
    "2721": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "data_up_to_item%1#0",
        "next_item_offset%0#0",
        "item_offset%1#0"
      ]
    },
    "2722": {
      "op": "dig 4",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "data_up_to_item%1#0",
        "next_item_offset%0#0",
        "item_offset%1#0",
        "tup2#0 (copy)"
      ]
    },
    "2724": {
      "op": "len",
      "defined_out": [
        "data_up_to_item%1#0",
        "item_offset%1#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "tup1#0",
        "tup2#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "data_up_to_item%1#0",
        "next_item_offset%0#0",
        "item_offset%1#0",
        "total_data_length%0#0"
      ]
    },
    "2725": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "updated_data%0#0",
        "data_up_to_item%1#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "item_offset%1#0"
      ]
    },
    "2726": {
      "op": "uncover 5",
      "stack_out": [
        "tup1#0",
        "updated_data%0#0",
        "data_up_to_item%1#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "item_offset%1#0",
        "tup2#0"
      ]
    },
    "2728": {
      "op": "dig 3",
      "defined_out": [
        "data_up_to_item%1#0",
        "item_offset%1#0",
        "next_item_offset%0#0",
        "next_item_offset%0#0 (copy)",
        "total_data_length%0#0",
        "tup1#0",
        "tup2#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tup1#0",
        "updated_data%0#0",
        "data_up_to_item%1#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "item_offset%1#0",
        "tup2#0",
        "next_item_offset%0#0 (copy)"
      ]
    },
    "2730": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "updated_data%0#0",
        "data_up_to_item%1#0",
        "next_item_offset%0#0",
        "item_offset%1#0",
        "tup2#0",
        "next_item_offset%0#0 (copy)",
        "total_data_length%0#0"
      ]
    },
    "2732": {
      "op": "substring3",
      "defined_out": [
        "data_beyond_item%0#0",
        "data_up_to_item%1#0",
        "item_offset%1#0",
        "next_item_offset%0#0",
        "tup1#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tup1#0",
        "updated_data%0#0",
        "data_up_to_item%1#0",
        "next_item_offset%0#0",
        "item_offset%1#0",
        "data_beyond_item%0#0"
      ]
    },
    "2733": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "updated_data%0#0",
        "next_item_offset%0#0",
        "item_offset%1#0",
        "data_beyond_item%0#0",
        "data_up_to_item%1#0"
      ]
    },
    "2735": {
      "op": "dig 4",
      "defined_out": [
        "data_beyond_item%0#0",
        "data_up_to_item%1#0",
        "item_offset%1#0",
        "next_item_offset%0#0",
        "tup1#0",
        "updated_data%0#0",
        "updated_data%0#0 (copy)"
      ],
      "stack_out": [
        "tup1#0",
        "updated_data%0#0",
        "next_item_offset%0#0",
        "item_offset%1#0",
        "data_beyond_item%0#0",
        "data_up_to_item%1#0",
        "updated_data%0#0 (copy)"
      ]
    },
    "2737": {
      "op": "concat",
      "defined_out": [
        "data_beyond_item%0#0",
        "item_offset%1#0",
        "next_item_offset%0#0",
        "tup1#0",
        "updated_data%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tup1#0",
        "updated_data%0#0",
        "next_item_offset%0#0",
        "item_offset%1#0",
        "data_beyond_item%0#0",
        "updated_data%1#0"
      ]
    },
    "2738": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "updated_data%0#0",
        "next_item_offset%0#0",
        "item_offset%1#0",
        "updated_data%1#0",
        "data_beyond_item%0#0"
      ]
    },
    "2739": {
      "op": "concat",
      "defined_out": [
        "item_offset%1#0",
        "next_item_offset%0#0",
        "tup1#0",
        "updated_data%0#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tup1#0",
        "updated_data%0#0",
        "next_item_offset%0#0",
        "item_offset%1#0",
        "updated_data%2#0"
      ]
    },
    "2740": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "updated_data%0#0",
        "item_offset%1#0",
        "updated_data%2#0",
        "next_item_offset%0#0"
      ]
    },
    "2742": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "updated_data%0#0",
        "updated_data%2#0",
        "next_item_offset%0#0",
        "item_offset%1#0"
      ]
    },
    "2744": {
      "op": "-",
      "defined_out": [
        "item_length%0#0",
        "tup1#0",
        "updated_data%0#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tup1#0",
        "updated_data%0#0",
        "updated_data%2#0",
        "item_length%0#0"
      ]
    },
    "2745": {
      "op": "cover 2",
      "stack_out": [
        "tup1#0",
        "item_length%0#0",
        "updated_data%0#0",
        "updated_data%2#0"
      ]
    },
    "2747": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "item_length%0#0",
        "updated_data%2#0",
        "updated_data%0#0"
      ]
    },
    "2748": {
      "op": "len",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tup1#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tup1#0",
        "item_length%0#0",
        "updated_data%2#0",
        "new_value_length%0#0"
      ]
    },
    "2749": {
      "op": "dig 1",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tup1#0",
        "updated_data%2#0",
        "updated_data%2#0 (copy)"
      ],
      "stack_out": [
        "tup1#0",
        "item_length%0#0",
        "updated_data%2#0",
        "new_value_length%0#0",
        "updated_data%2#0 (copy)"
      ]
    },
    "2751": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "tup1#0",
        "item_length%0#0",
        "updated_data%2#0",
        "new_value_length%0#0",
        "updated_data%2#0 (copy)",
        "24"
      ]
    },
    "2753": {
      "op": "extract_uint16",
      "defined_out": [
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%0#0",
        "tup1#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tup1#0",
        "item_length%0#0",
        "updated_data%2#0",
        "new_value_length%0#0",
        "tail_offset%0#0"
      ]
    },
    "2754": {
      "op": "+",
      "defined_out": [
        "item_length%0#0",
        "tail_offset%1#0",
        "tup1#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tup1#0",
        "item_length%0#0",
        "updated_data%2#0",
        "tail_offset%1#0"
      ]
    },
    "2755": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "updated_data%2#0",
        "tail_offset%1#0",
        "item_length%0#0"
      ]
    },
    "2757": {
      "op": "-",
      "defined_out": [
        "tail_offset%2#0",
        "tup1#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tup1#0",
        "updated_data%2#0",
        "tail_offset%2#0"
      ]
    },
    "2758": {
      "op": "itob",
      "defined_out": [
        "as_bytes%15#0",
        "tup1#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tup1#0",
        "updated_data%2#0",
        "as_bytes%15#0"
      ]
    },
    "2759": {
      "op": "extract 6 2",
      "defined_out": [
        "tail_offset_bytes%0#0",
        "tup1#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "tup1#0",
        "updated_data%2#0",
        "tail_offset_bytes%0#0"
      ]
    },
    "2762": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tail_offset_bytes%0#0",
        "updated_data%2#0"
      ]
    },
    "2763": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "tup1#0",
        "tail_offset_bytes%0#0",
        "updated_data%2#0",
        "24"
      ]
    },
    "2765": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "updated_data%2#0",
        "24",
        "tail_offset_bytes%0#0"
      ]
    },
    "2767": {
      "op": "replace3",
      "stack_out": [
        "tup1#0",
        "tup2#0"
      ]
    },
    "2768": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "2769": {
      "error": "tup1 does not match tup2",
      "op": "assert // tup1 does not match tup2",
      "stack_out": []
    },
    "2770": {
      "retsub": true,
      "op": "retsub"
    }
  }
}