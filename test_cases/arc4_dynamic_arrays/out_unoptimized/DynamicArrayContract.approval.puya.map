{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;AAAA;;AAuGK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AA3BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAjBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAvBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAnBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAhBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgJW;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAKO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAKO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAKO;;;;;;;;;;AAAP;AAKO;;;;;;;;;;AAAP;AAKO;;;AAAP;AAKO;;;AAAP;AAKO;;;AAAP;AAKO;;;AAAP;AAKO;;AAAA;AAAA;;;AAAkB;;;;AAAlB;AAA0C;;;;AAA1C;AAA0D;;;;AAA1D;AAAA;AAAA;AAAP;AAKO;AAAA;AAAA;;;AAAkB;;;;AAAlB;AAAkC;;;;AAAlC;AAAkD;;;;AAAlD;AAAkE;;;;AAAlE;AAAA;AAAA;AAAP;AA/LmC;;;AAAa;;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACiB;;;AAAa;;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAES;;;AAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAV;AACuB;;;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAV;AACQ;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACF;AAAN;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AAAA;AACI;AAAA;;;AAAM;AAAN;;AAAA;AAAA;;AAAA;AAAJ;AACI;AAAA;;;AAAM;AAAN;;AAAA;AAAA;;AAAA;AAAJ;AAEO;;AAAA;;;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;;;AAAA;AAAA;AAAP;;AAIwB;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACc;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAV;AACQ;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACR;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AACA;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;;AAAM;AAAN;;;AACA;AAAA;AACI;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAM;AAAN;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAJ;AACI;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAM;AAAN;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAJ;AACI;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAM;AAAN;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAJ;AAEO;;;AAAA;AAAA;;AAAA;AAAP;AACA;AAAA;AACO;;;AAAA;AAAA;;AAAA;AAAP;AACA;AAAA;AACO;;;AAAA;AAAA;;AAAA;AAAP;AACA;;AAI4B;;;AAAa;;;AAAA;AAAe;;;AAAA;;AAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACkB;;;AAAa;;;AAAA;AAAe;;;AAAA;;AAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACF;AAAA;AAAA;;;AAAA;AAAA;AACR;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AACA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AACA;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;;AAAM;AAAN;;;AACA;AAAA;AACI;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAM;AAAN;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAJ;AACI;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAM;AAAN;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAJ;AAEA;AAEO;;;AAAA;AAAA;;AAAA;AAAP;AACO;;;AAAA;AAAA;;AAAA;AAAP;AAEO;AAAA;AAAA;AAAiB;AAAjB;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACO;AAAA;AAAA;AAAiB;AAAjB;AAAP;AACc;AAAA;AAAA;AAAP;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AACc;AAAA;AAAA;AAAP;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;;AAKI;;;AAAa;;;AAAA;AAAe;;;AAAA;;AAAa;;;AAAA;;AAAgB;;;AAAA;;AADnD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIN;;;AAAa;;;AAAA;AAAe;;;AAAA;;AAAa;;;AAAA;;AAAgB;;;AAAA;;AADnD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGF;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACR;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;;AAAM;AAAN;;;AACA;AAAA;AACI;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAM;AAAN;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAJ;AACI;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAM;AAAN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAM;AAAN;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAJ;AAEO;;;AAAA;AAAA;;AAAA;AAAP;AACO;;;AAAA;AAAA;AAAP;;AAImB;;;AAA8B;;;AAAa;;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACc;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACe;;;AAA8B;;;AAAa;;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEJ;;;AAAa;;;AAAA;AAAe;;;AAAA;;AAAa;;;AAAA;;AAAgB;;;AAAA;;AADtD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGc;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACG;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAV;;AASsB;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAFE;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAQV;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AACO;AAAP;;AAImB;;;AAA8B;;;AAAa;;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACc;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACe;;;AAA8B;;;AAAa;;;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEJ;;;AAAa;;;AAAA;AAAe;;;AAAA;;AAAa;;;AAAA;;AAAgB;;;AAAA;;AADrD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIJ;;;AACA;;;AAAA;AACA;;;AAAA;;AACA;;;AAAA;AAAkB;;;;AAAlB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AACA;;;AAAA;;AALI;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOa;;;AAAe;;;AAAA;AAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAP;;AASO;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUP;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AACO;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 2 1 4"
    },
    "7": {
      "op": "bytecblock 0x 0x61 0x626565 0x48656c6c6f20576f726c64"
    },
    "28": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "30": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "31": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "32": {
      "op": "bz main_bare_routing@11",
      "stack_out": []
    },
    "35": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "38": {
      "op": "pushbytes 0x55715827 // method \"test_static_elements()void\"",
      "defined_out": [
        "Method(test_static_elements()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_static_elements()void)"
      ]
    },
    "44": {
      "op": "pushbytes 0x713dd6db // method \"test_dynamic_elements()void\"",
      "defined_out": [
        "Method(test_dynamic_elements()void)",
        "Method(test_static_elements()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_static_elements()void)",
        "Method(test_dynamic_elements()void)"
      ]
    },
    "50": {
      "op": "pushbytes 0x37158aac // method \"test_mixed_single_dynamic_elements()void\"",
      "defined_out": [
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_static_elements()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_static_elements()void)",
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)"
      ]
    },
    "56": {
      "op": "pushbytes 0x8570be3b // method \"test_mixed_multiple_dynamic_elements()void\"",
      "defined_out": [
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_static_elements()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_static_elements()void)",
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)"
      ]
    },
    "62": {
      "op": "pushbytes 0x51aa8c49 // method \"test_nested_struct_replacement()void\"",
      "defined_out": [
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_nested_struct_replacement()void)",
        "Method(test_static_elements()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_static_elements()void)",
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)",
        "Method(test_nested_struct_replacement()void)"
      ]
    },
    "68": {
      "op": "pushbytes 0x283a186f // method \"test_nested_tuple_modification()void\"",
      "defined_out": [
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_nested_struct_replacement()void)",
        "Method(test_nested_tuple_modification()void)",
        "Method(test_static_elements()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_static_elements()void)",
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)",
        "Method(test_nested_struct_replacement()void)",
        "Method(test_nested_tuple_modification()void)"
      ]
    },
    "74": {
      "op": "uncover 6",
      "stack_out": [
        "Method(test_static_elements()void)",
        "Method(test_dynamic_elements()void)",
        "Method(test_mixed_single_dynamic_elements()void)",
        "Method(test_mixed_multiple_dynamic_elements()void)",
        "Method(test_nested_struct_replacement()void)",
        "Method(test_nested_tuple_modification()void)",
        "tmp%2#0"
      ]
    },
    "76": {
      "op": "match main_test_static_elements_route@3 main_test_dynamic_elements_route@4 main_test_mixed_single_dynamic_elements_route@5 main_test_mixed_multiple_dynamic_elements_route@6 main_test_nested_struct_replacement_route@7 main_test_nested_tuple_modification_route@8",
      "stack_out": []
    },
    "90": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "91": {
      "block": "main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "92": {
      "block": "main_test_nested_tuple_modification_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "94": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "NoOp"
      ]
    },
    "95": {
      "op": "==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "96": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "97": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "99": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0"
      ]
    },
    "100": {
      "op": "!=",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "101": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "102": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification",
      "op": "callsub test_nested_tuple_modification"
    },
    "105": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "106": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "109": {
      "block": "main_test_nested_struct_replacement_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "111": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "NoOp"
      ]
    },
    "112": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "113": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "114": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "116": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0"
      ]
    },
    "117": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "118": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "119": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement",
      "op": "callsub test_nested_struct_replacement"
    },
    "122": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "123": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "126": {
      "block": "main_test_mixed_multiple_dynamic_elements_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "128": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "NoOp"
      ]
    },
    "129": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "130": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "131": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "133": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0"
      ]
    },
    "134": {
      "op": "!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "135": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "136": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements",
      "op": "callsub test_mixed_multiple_dynamic_elements"
    },
    "139": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "140": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "143": {
      "block": "main_test_mixed_single_dynamic_elements_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "145": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "146": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "147": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "148": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "150": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "151": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "152": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "153": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements",
      "op": "callsub test_mixed_single_dynamic_elements"
    },
    "156": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "157": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "160": {
      "block": "main_test_dynamic_elements_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "162": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "163": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "164": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "165": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "167": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "168": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "169": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "170": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements",
      "op": "callsub test_dynamic_elements"
    },
    "173": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "174": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "177": {
      "block": "main_test_static_elements_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "179": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "180": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "181": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "182": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "184": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "185": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "186": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "187": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements",
      "op": "callsub test_static_elements"
    },
    "190": {
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "191": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "194": {
      "block": "main_bare_routing@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "196": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0"
      ]
    },
    "197": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%27#0"
      ]
    },
    "198": {
      "op": "match main___algopy_default_create@12",
      "stack_out": []
    },
    "202": {
      "block": "main_switch_case_next@14",
      "stack_in": [],
      "op": "b main_after_if_else@15"
    },
    "205": {
      "block": "main___algopy_default_create@12",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "207": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "0"
      ]
    },
    "208": {
      "op": "==",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "209": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "210": {
      "block": "main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__algopy_default_create@18",
      "stack_in": [],
      "op": "intc_2 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "211": {
      "op": "b main_after_inlined_test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.__puya_arc4_router__@16"
    },
    "214": {
      "subroutine": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "params": {
        "array#0": "bytes",
        "fixed_byte_size#0": "uint64"
      },
      "block": "dynamic_array_pop_fixed_size",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "217": {
      "block": "dynamic_array_pop_fixed_size_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)"
      ]
    },
    "219": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)",
        "0"
      ]
    },
    "220": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0"
      ]
    },
    "221": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "1"
      ]
    },
    "222": {
      "op": "-",
      "defined_out": [
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0"
      ]
    },
    "223": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "224": {
      "op": "extract 6 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "227": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%3#0",
        "array#0 (copy)"
      ]
    },
    "229": {
      "op": "swap",
      "stack_out": [
        "array#0 (copy)",
        "tmp%3#0"
      ]
    },
    "230": {
      "op": "replace2 0",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "232": {
      "op": "dup",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0 (copy)"
      ]
    },
    "233": {
      "op": "len",
      "defined_out": [
        "result#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%5#0"
      ]
    },
    "234": {
      "op": "frame_dig -1",
      "defined_out": [
        "fixed_byte_size#0 (copy)",
        "result#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%5#0",
        "fixed_byte_size#0 (copy)"
      ]
    },
    "236": {
      "op": "-",
      "defined_out": [
        "item_location#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "item_location#0"
      ]
    },
    "237": {
      "op": "dup2",
      "defined_out": [
        "item_location#0",
        "item_location#0 (copy)",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "item_location#0",
        "result#0 (copy)",
        "item_location#0 (copy)"
      ]
    },
    "238": {
      "op": "frame_dig -1",
      "stack_out": [
        "result#0",
        "item_location#0",
        "result#0 (copy)",
        "item_location#0 (copy)",
        "fixed_byte_size#0 (copy)"
      ]
    },
    "240": {
      "op": "extract3",
      "defined_out": [
        "item_location#0",
        "popped#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "item_location#0",
        "popped#0"
      ]
    },
    "241": {
      "op": "cover 2",
      "stack_out": [
        "popped#0",
        "result#0",
        "item_location#0"
      ]
    },
    "243": {
      "op": "swap",
      "stack_out": [
        "popped#0",
        "item_location#0",
        "result#0"
      ]
    },
    "244": {
      "op": "intc_0 // 0",
      "stack_out": [
        "popped#0",
        "item_location#0",
        "result#0",
        "0"
      ]
    },
    "245": {
      "op": "uncover 2",
      "stack_out": [
        "popped#0",
        "result#0",
        "0",
        "item_location#0"
      ]
    },
    "247": {
      "op": "substring3",
      "stack_out": [
        "popped#0",
        "result#0"
      ]
    },
    "248": {
      "retsub": true,
      "op": "retsub"
    },
    "249": {
      "subroutine": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "params": {
        "array#0": "bytes"
      },
      "block": "dynamic_array_pop_dynamic_element",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "252": {
      "block": "dynamic_array_pop_dynamic_element_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)"
      ]
    },
    "254": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)",
        "0"
      ]
    },
    "255": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0"
      ]
    },
    "256": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "1"
      ]
    },
    "257": {
      "op": "-",
      "defined_out": [
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0"
      ]
    },
    "258": {
      "op": "dupn 2",
      "defined_out": [
        "length_minus_1#0",
        "length_minus_1#0 (copy)"
      ],
      "stack_out": [
        "length_minus_1#0",
        "length_minus_1#0",
        "length_minus_1#0 (copy)"
      ]
    },
    "260": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "length_minus_1#0",
        "length_minus_1#0 (copy)"
      ],
      "stack_out": [
        "length_minus_1#0",
        "length_minus_1#0",
        "length_minus_1#0 (copy)",
        "2"
      ]
    },
    "261": {
      "op": "*",
      "defined_out": [
        "length_minus_1#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "length_minus_1#0",
        "popped_header_offset#0"
      ]
    },
    "262": {
      "op": "dup",
      "stack_out": [
        "length_minus_1#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "popped_header_offset#0"
      ]
    },
    "263": {
      "op": "cover 2",
      "defined_out": [
        "length_minus_1#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "length_minus_1#0",
        "popped_header_offset#0"
      ]
    },
    "265": {
      "op": "frame_dig -1",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "array#0 (copy)"
      ]
    },
    "267": {
      "op": "extract 2 0",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0"
      ]
    },
    "270": {
      "op": "dup",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "head_and_tail#0"
      ]
    },
    "271": {
      "op": "cover 3",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0"
      ]
    },
    "273": {
      "op": "dup",
      "defined_out": [
        "head_and_tail#0",
        "head_and_tail#0 (copy)",
        "length_minus_1#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "head_and_tail#0 (copy)"
      ]
    },
    "274": {
      "op": "uncover 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "length_minus_1#0",
        "head_and_tail#0",
        "head_and_tail#0 (copy)",
        "popped_header_offset#0"
      ]
    },
    "276": {
      "op": "extract_uint16",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "popped_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "length_minus_1#0",
        "head_and_tail#0",
        "popped_offset#0"
      ]
    },
    "277": {
      "op": "dup",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "length_minus_1#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped_offset#0"
      ]
    },
    "278": {
      "op": "cover 3",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "head_and_tail#0",
        "popped_offset#0"
      ]
    },
    "280": {
      "op": "dig 1",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "head_and_tail#0",
        "popped_offset#0",
        "head_and_tail#0 (copy)"
      ]
    },
    "282": {
      "op": "len",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "head_and_tail#0",
        "popped_offset#0",
        "tmp%5#0"
      ]
    },
    "283": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "head_and_tail#0",
        "tmp%5#0",
        "popped_offset#0"
      ]
    },
    "284": {
      "op": "uncover 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "tmp%5#0",
        "popped_offset#0",
        "head_and_tail#0"
      ]
    },
    "286": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "tmp%5#0",
        "head_and_tail#0",
        "popped_offset#0"
      ]
    },
    "287": {
      "op": "uncover 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "head_and_tail#0",
        "popped_offset#0",
        "tmp%5#0"
      ]
    },
    "289": {
      "op": "substring3",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "length_minus_1#0",
        "popped#0"
      ]
    },
    "290": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "length_minus_1#0"
      ]
    },
    "291": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "length_minus_1#0",
        "new_head#0"
      ]
    },
    "292": {
      "op": "swap",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "length_minus_1#0"
      ]
    },
    "293": {
      "op": "intc_1 // 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "length_minus_1#0",
        "2"
      ]
    },
    "294": {
      "op": "*",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0"
      ]
    },
    "295": {
      "op": "intc_1 // 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "2"
      ]
    },
    "296": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0"
      ]
    },
    "297": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "length_minus_1#0",
        "new_head#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0"
      ]
    },
    "298": {
      "block": "dynamic_array_pop_dynamic_element_for_header@1",
      "stack_in": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "300": {
      "op": "frame_dig 6",
      "defined_out": [
        "head_offset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%7#0"
      ]
    },
    "302": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "continue_looping%0#0"
      ]
    },
    "303": {
      "op": "bz dynamic_array_pop_dynamic_element_after_for@4",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0"
      ]
    },
    "306": {
      "block": "dynamic_array_pop_dynamic_element_for_body@2",
      "stack_in": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "head_and_tail#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "head_and_tail#0"
      ]
    },
    "308": {
      "op": "frame_dig 7",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "head_and_tail#0",
        "head_offset#0"
      ]
    },
    "310": {
      "op": "extract_uint16",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "item_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "item_offset#0"
      ]
    },
    "311": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "head_and_tail#0",
        "head_offset#0",
        "item_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "item_offset#0",
        "2"
      ]
    },
    "312": {
      "op": "-",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "item_offset#0"
      ]
    },
    "313": {
      "op": "itob",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%10#0"
      ]
    },
    "314": {
      "op": "extract 6 2",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%11#0"
      ]
    },
    "317": {
      "op": "frame_dig 5",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "new_head#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%11#0",
        "new_head#0"
      ]
    },
    "319": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "new_head#0",
        "tmp%11#0"
      ]
    },
    "320": {
      "op": "concat",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "new_head#0"
      ]
    },
    "321": {
      "op": "frame_bury 5",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "new_head#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0"
      ]
    },
    "323": {
      "block": "dynamic_array_pop_dynamic_element_for_footer@3",
      "stack_in": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "325": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "head_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "326": {
      "op": "+",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "327": {
      "op": "frame_bury 7",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0"
      ]
    },
    "329": {
      "op": "b dynamic_array_pop_dynamic_element_for_header@1"
    },
    "332": {
      "block": "dynamic_array_pop_dynamic_element_after_for@4",
      "stack_in": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "length_minus_1#0"
      ]
    },
    "334": {
      "op": "itob",
      "defined_out": [
        "length_minus_1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%13#0"
      ]
    },
    "335": {
      "op": "extract 6 2",
      "defined_out": [
        "length_minus_1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%14#0"
      ]
    },
    "338": {
      "op": "frame_dig 5",
      "defined_out": [
        "length_minus_1#0",
        "new_head#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%14#0",
        "new_head#0"
      ]
    },
    "340": {
      "op": "concat",
      "defined_out": [
        "length_minus_1#0",
        "new_head#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%15#0"
      ]
    },
    "341": {
      "op": "frame_dig 1",
      "defined_out": [
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%15#0",
        "popped_header_offset#0"
      ]
    },
    "343": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%15#0",
        "popped_header_offset#0",
        "2"
      ]
    },
    "344": {
      "op": "+",
      "defined_out": [
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "345": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%16#0",
        "head_and_tail#0"
      ]
    },
    "347": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%15#0",
        "head_and_tail#0",
        "tmp%16#0"
      ]
    },
    "348": {
      "op": "frame_dig 3",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%15#0",
        "head_and_tail#0",
        "tmp%16#0",
        "popped_offset#0"
      ]
    },
    "350": {
      "op": "substring3",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "351": {
      "op": "concat",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "updated#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "updated#0"
      ]
    },
    "352": {
      "op": "frame_dig 4",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "updated#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "updated#0",
        "popped#0"
      ]
    },
    "354": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "tmp%7#0",
        "head_offset#0",
        "popped#0",
        "updated#0"
      ]
    },
    "355": {
      "op": "frame_bury 1"
    },
    "357": {
      "op": "frame_bury 0"
    },
    "359": {
      "retsub": true,
      "op": "retsub"
    },
    "360": {
      "subroutine": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "params": {
        "array_items_count#0": "uint64",
        "array_head_and_tail#0": "bytes",
        "new_items_count#0": "uint64",
        "new_head_and_tail#0": "bytes"
      },
      "block": "dynamic_array_concat_dynamic_element",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "363": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "364": {
      "block": "dynamic_array_concat_dynamic_element_block@0",
      "stack_in": [
        "tmp%8#0"
      ],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "new_head#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0"
      ]
    },
    "365": {
      "op": "frame_dig -2",
      "defined_out": [
        "new_head#0",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "new_items_count#0 (copy)"
      ]
    },
    "367": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "new_head#0",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "new_items_count#0 (copy)",
        "2"
      ]
    },
    "368": {
      "op": "*",
      "defined_out": [
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0"
      ]
    },
    "369": {
      "op": "frame_dig -4",
      "defined_out": [
        "array_items_count#0 (copy)",
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "array_items_count#0 (copy)"
      ]
    },
    "371": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "array_items_count#0 (copy)",
        "2"
      ]
    },
    "372": {
      "op": "*",
      "defined_out": [
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0"
      ]
    },
    "373": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "2"
      ]
    },
    "374": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0"
      ]
    },
    "375": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "376": {
      "block": "dynamic_array_concat_dynamic_element_for_header@1",
      "stack_in": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "378": {
      "op": "frame_dig 3",
      "defined_out": [
        "head_offset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%1#0"
      ]
    },
    "380": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "continue_looping%0#0"
      ]
    },
    "381": {
      "op": "bz dynamic_array_concat_dynamic_element_after_for@4",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "384": {
      "block": "dynamic_array_concat_dynamic_element_for_body@2",
      "stack_in": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "386": {
      "op": "frame_dig 4",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)",
        "head_offset#0"
      ]
    },
    "388": {
      "op": "extract_uint16",
      "defined_out": [
        "head_offset#0",
        "item_offset#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "item_offset#0"
      ]
    },
    "389": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#0"
      ]
    },
    "391": {
      "op": "+",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%3#0"
      ]
    },
    "392": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%4#0"
      ]
    },
    "393": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%5#0"
      ]
    },
    "396": {
      "op": "frame_dig 1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%5#0",
        "new_head#0"
      ]
    },
    "398": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "new_head#0",
        "tmp%5#0"
      ]
    },
    "399": {
      "op": "concat",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "new_head#0"
      ]
    },
    "400": {
      "op": "frame_bury 1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "402": {
      "block": "dynamic_array_concat_dynamic_element_for_footer@3",
      "stack_in": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "404": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "405": {
      "op": "+",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "406": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "408": {
      "op": "b dynamic_array_concat_dynamic_element_for_header@1"
    },
    "411": {
      "block": "dynamic_array_concat_dynamic_element_after_for@4",
      "stack_in": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "413": {
      "op": "len",
      "defined_out": [
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "item_offset_adjustment#0"
      ]
    },
    "414": {
      "op": "frame_bury 2",
      "defined_out": [
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "416": {
      "op": "frame_dig -2",
      "defined_out": [
        "item_offset_adjustment#0",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "new_items_count#0 (copy)"
      ]
    },
    "418": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "item_offset_adjustment#0",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "new_items_count#0 (copy)",
        "2"
      ]
    },
    "419": {
      "op": "*",
      "defined_out": [
        "item_offset_adjustment#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%8#0"
      ]
    },
    "420": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_offset_adjustment#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "422": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "2"
      ]
    },
    "423": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "424": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "425": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "427": {
      "block": "dynamic_array_concat_dynamic_element_for_header@5",
      "stack_in": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "429": {
      "op": "frame_dig 0",
      "defined_out": [
        "head_offset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%8#0"
      ]
    },
    "431": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "head_offset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "continue_looping%1#0"
      ]
    },
    "432": {
      "op": "bz dynamic_array_concat_dynamic_element_after_for@8",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "435": {
      "block": "dynamic_array_concat_dynamic_element_for_body@6",
      "stack_in": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "new_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "437": {
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "new_head_and_tail#0 (copy)",
        "head_offset#0"
      ]
    },
    "439": {
      "op": "extract_uint16",
      "defined_out": [
        "head_offset#0",
        "item_offset#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "item_offset#0"
      ]
    },
    "440": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#0"
      ]
    },
    "442": {
      "op": "+",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%10#0"
      ]
    },
    "443": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%11#0"
      ]
    },
    "444": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%12#0"
      ]
    },
    "447": {
      "op": "frame_dig 1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%12#0",
        "new_head#0"
      ]
    },
    "449": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "new_head#0",
        "tmp%12#0"
      ]
    },
    "450": {
      "op": "concat",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "new_head#0"
      ]
    },
    "451": {
      "op": "frame_bury 1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "453": {
      "block": "dynamic_array_concat_dynamic_element_for_footer@7",
      "stack_in": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "455": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "456": {
      "op": "+",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "457": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ]
    },
    "459": {
      "op": "b dynamic_array_concat_dynamic_element_for_header@5"
    },
    "462": {
      "block": "dynamic_array_concat_dynamic_element_after_for@8",
      "stack_in": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "array_items_count#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "array_items_count#0 (copy)"
      ]
    },
    "464": {
      "op": "frame_dig -2",
      "defined_out": [
        "array_items_count#0 (copy)",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "array_items_count#0 (copy)",
        "new_items_count#0 (copy)"
      ]
    },
    "466": {
      "op": "+",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%14#0"
      ]
    },
    "467": {
      "op": "itob",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%15#0"
      ]
    },
    "468": {
      "op": "extract 6 2",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%16#0"
      ]
    },
    "471": {
      "op": "frame_dig 1",
      "defined_out": [
        "new_head#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%16#0",
        "new_head#0"
      ]
    },
    "473": {
      "op": "concat",
      "defined_out": [
        "new_head#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%17#0"
      ]
    },
    "474": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%17#0",
        "array_items_count#0 (copy)"
      ]
    },
    "476": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "array_items_count#0 (copy)",
        "new_head#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%17#0",
        "array_items_count#0 (copy)",
        "2"
      ]
    },
    "477": {
      "op": "*",
      "defined_out": [
        "new_head#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "478": {
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "new_head#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%17#0",
        "tmp%18#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "480": {
      "op": "len",
      "defined_out": [
        "new_head#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "481": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "483": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%17#0",
        "tmp%19#0",
        "array_head_and_tail#0 (copy)",
        "tmp%18#0"
      ]
    },
    "485": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%17#0",
        "array_head_and_tail#0 (copy)",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "487": {
      "op": "substring3",
      "defined_out": [
        "new_head#0",
        "tmp%17#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%17#0",
        "tmp%20#0"
      ]
    },
    "488": {
      "op": "concat",
      "defined_out": [
        "new_head#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%21#0"
      ]
    },
    "489": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%21#0",
        "new_items_count#0 (copy)"
      ]
    },
    "491": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%21#0",
        "new_items_count#0 (copy)",
        "2"
      ]
    },
    "492": {
      "op": "*",
      "defined_out": [
        "new_head#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "493": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_head#0",
        "new_head_and_tail#0 (copy)",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%21#0",
        "tmp%22#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "495": {
      "op": "len",
      "defined_out": [
        "new_head#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "496": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "498": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%21#0",
        "tmp%23#0",
        "new_head_and_tail#0 (copy)",
        "tmp%22#0"
      ]
    },
    "500": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%21#0",
        "new_head_and_tail#0 (copy)",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "502": {
      "op": "substring3",
      "defined_out": [
        "new_head#0",
        "tmp%21#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%21#0",
        "tmp%24#0"
      ]
    },
    "503": {
      "op": "concat",
      "defined_out": [
        "new_head#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%1#0",
        "head_offset#0",
        "tmp%25#0"
      ]
    },
    "504": {
      "op": "frame_bury 0"
    },
    "506": {
      "retsub": true,
      "op": "retsub"
    },
    "507": {
      "subroutine": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "params": {
        "source#0": "bytes",
        "new_item#0": "bytes",
        "index#0": "uint64"
      },
      "block": "dynamic_array_replace_dynamic_element",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "510": {
      "block": "dynamic_array_replace_dynamic_element_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "source#0 (copy)"
      ],
      "stack_out": [
        "source#0 (copy)"
      ]
    },
    "512": {
      "op": "substring 0 2",
      "defined_out": [
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0"
      ]
    },
    "515": {
      "op": "dup",
      "defined_out": [
        "size_b#0",
        "size_b#0 (copy)"
      ],
      "stack_out": [
        "size_b#0",
        "size_b#0 (copy)"
      ]
    },
    "516": {
      "op": "btoi",
      "defined_out": [
        "array_length#0",
        "size_b#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0"
      ]
    },
    "517": {
      "op": "frame_dig -3",
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "source#0 (copy)"
      ]
    },
    "519": {
      "op": "extract 2 0",
      "defined_out": [
        "array_length#0",
        "size_b#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "tmp%2#0"
      ]
    },
    "522": {
      "op": "frame_dig -2",
      "defined_out": [
        "array_length#0",
        "new_item#0 (copy)",
        "size_b#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "tmp%2#0",
        "new_item#0 (copy)"
      ]
    },
    "524": {
      "op": "frame_dig -1",
      "defined_out": [
        "array_length#0",
        "index#0 (copy)",
        "new_item#0 (copy)",
        "size_b#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "size_b#0",
        "array_length#0",
        "tmp%2#0",
        "new_item#0 (copy)",
        "index#0 (copy)"
      ]
    },
    "526": {
      "op": "uncover 3",
      "stack_out": [
        "size_b#0",
        "tmp%2#0",
        "new_item#0 (copy)",
        "index#0 (copy)",
        "array_length#0"
      ]
    },
    "528": {
      "callsub": "_puya_lib.arc4.static_array_replace_dynamic_element",
      "op": "callsub static_array_replace_dynamic_element",
      "defined_out": [
        "size_b#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "size_b#0",
        "tmp%3#0"
      ]
    },
    "531": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "532": {
      "retsub": true,
      "op": "retsub"
    },
    "533": {
      "subroutine": "_puya_lib.arc4.static_array_replace_dynamic_element",
      "params": {
        "array_head_and_tail#0": "bytes",
        "new_item#0": "bytes",
        "index#0": "uint64",
        "array_length#0": "uint64"
      },
      "block": "static_array_replace_dynamic_element",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "536": {
      "block": "static_array_replace_dynamic_element_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "index#0 (copy)"
      ],
      "stack_out": [
        "index#0 (copy)"
      ]
    },
    "538": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "index#0 (copy)"
      ],
      "stack_out": [
        "index#0 (copy)",
        "2"
      ]
    },
    "539": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "540": {
      "op": "frame_dig -4",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "542": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail#0 (copy)",
        "tmp%0#0"
      ]
    },
    "543": {
      "op": "extract_uint16",
      "defined_out": [
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0"
      ]
    },
    "544": {
      "op": "frame_dig -2",
      "stack_out": [
        "original_offset#0",
        "index#0 (copy)"
      ]
    },
    "546": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "index#0 (copy)",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "index#0 (copy)",
        "1"
      ]
    },
    "547": {
      "op": "+",
      "defined_out": [
        "original_offset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "original_offset#0",
        "tmp%2#0"
      ]
    },
    "548": {
      "op": "intc_1 // 2",
      "stack_out": [
        "original_offset#0",
        "tmp%2#0",
        "2"
      ]
    },
    "549": {
      "op": "*",
      "defined_out": [
        "original_offset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "original_offset#0",
        "tmp%3#0"
      ]
    },
    "550": {
      "op": "frame_dig -4",
      "stack_out": [
        "original_offset#0",
        "tmp%3#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "552": {
      "op": "swap",
      "stack_out": [
        "original_offset#0",
        "array_head_and_tail#0 (copy)",
        "tmp%3#0"
      ]
    },
    "553": {
      "op": "extract_uint16",
      "defined_out": [
        "next_item_offset#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0"
      ]
    },
    "554": {
      "op": "frame_dig -4",
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "556": {
      "op": "len",
      "defined_out": [
        "end_of_tail#0",
        "next_item_offset#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0"
      ]
    },
    "557": {
      "op": "frame_dig -1",
      "defined_out": [
        "array_length#0 (copy)",
        "end_of_tail#0",
        "next_item_offset#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "array_length#0 (copy)"
      ]
    },
    "559": {
      "op": "frame_dig -2",
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "array_length#0 (copy)",
        "index#0 (copy)"
      ]
    },
    "561": {
      "op": "-",
      "defined_out": [
        "end_of_tail#0",
        "next_item_offset#0",
        "original_offset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "tmp%6#0"
      ]
    },
    "562": {
      "op": "intc_2 // 1",
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "tmp%6#0",
        "1"
      ]
    },
    "563": {
      "op": "-",
      "defined_out": [
        "end_of_tail#0",
        "is_before_end#0",
        "next_item_offset#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "is_before_end#0"
      ]
    },
    "564": {
      "op": "dig 1",
      "defined_out": [
        "end_of_tail#0",
        "end_of_tail#0 (copy)",
        "is_before_end#0",
        "next_item_offset#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "next_item_offset#0",
        "end_of_tail#0",
        "is_before_end#0",
        "end_of_tail#0 (copy)"
      ]
    },
    "566": {
      "op": "uncover 3",
      "stack_out": [
        "original_offset#0",
        "end_of_tail#0",
        "is_before_end#0",
        "end_of_tail#0 (copy)",
        "next_item_offset#0"
      ]
    },
    "568": {
      "op": "uncover 2",
      "stack_out": [
        "original_offset#0",
        "end_of_tail#0",
        "end_of_tail#0 (copy)",
        "next_item_offset#0",
        "is_before_end#0"
      ]
    },
    "570": {
      "op": "select",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0"
      ]
    },
    "571": {
      "op": "dup",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "end_offset#0 (copy)",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "end_offset#0 (copy)"
      ]
    },
    "572": {
      "op": "dig 3",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "end_offset#0 (copy)",
        "original_offset#0",
        "original_offset#0 (copy)"
      ],
      "stack_out": [
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "end_offset#0 (copy)",
        "original_offset#0 (copy)"
      ]
    },
    "574": {
      "op": "-",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "original_item_length#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "original_item_length#0"
      ]
    },
    "575": {
      "op": "cover 3",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "original_item_length#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0"
      ]
    },
    "577": {
      "op": "frame_dig -3",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "new_item#0 (copy)",
        "original_item_length#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "new_item#0 (copy)"
      ]
    },
    "579": {
      "op": "len",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "new_item_length#0"
      ]
    },
    "580": {
      "op": "cover 3",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "original_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0"
      ]
    },
    "582": {
      "op": "frame_dig -4",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "584": {
      "op": "intc_0 // 0",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "original_offset#0",
        "end_of_tail#0",
        "end_offset#0",
        "array_head_and_tail#0 (copy)",
        "0"
      ]
    },
    "585": {
      "op": "uncover 4",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "array_head_and_tail#0 (copy)",
        "0",
        "original_offset#0"
      ]
    },
    "587": {
      "op": "substring3",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "tmp%11#0"
      ]
    },
    "588": {
      "op": "frame_dig -3",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "tmp%11#0",
        "new_item#0 (copy)"
      ]
    },
    "590": {
      "op": "concat",
      "defined_out": [
        "end_of_tail#0",
        "end_offset#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "tmp%12#0"
      ]
    },
    "591": {
      "op": "frame_dig -4",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "end_of_tail#0",
        "end_offset#0",
        "tmp%12#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "593": {
      "op": "uncover 2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "end_of_tail#0",
        "tmp%12#0",
        "array_head_and_tail#0 (copy)",
        "end_offset#0"
      ]
    },
    "595": {
      "op": "uncover 3",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "tmp%12#0",
        "array_head_and_tail#0 (copy)",
        "end_offset#0",
        "end_of_tail#0"
      ]
    },
    "597": {
      "op": "substring3",
      "defined_out": [
        "new_item_length#0",
        "original_item_length#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "598": {
      "op": "concat",
      "defined_out": [
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0"
      ]
    },
    "599": {
      "op": "frame_dig -1",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "array_length#0 (copy)"
      ]
    },
    "601": {
      "op": "intc_1 // 2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "array_length#0 (copy)",
        "2"
      ]
    },
    "602": {
      "op": "*",
      "defined_out": [
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0"
      ]
    },
    "603": {
      "op": "frame_dig -2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "index#0 (copy)"
      ]
    },
    "605": {
      "op": "intc_2 // 1",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "index#0 (copy)",
        "1"
      ]
    },
    "606": {
      "op": "+",
      "defined_out": [
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "607": {
      "op": "intc_1 // 2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "tmp%16#0",
        "2"
      ]
    },
    "608": {
      "op": "*",
      "defined_out": [
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "609": {
      "op": "intc_1 // 2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "tmp%17#0",
        "2"
      ]
    },
    "610": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0"
      ]
    },
    "611": {
      "block": "static_array_replace_dynamic_element_for_header@1",
      "stack_in": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "613": {
      "op": "frame_dig 3",
      "defined_out": [
        "head_offset#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%15#0"
      ]
    },
    "615": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "continue_looping%0#0"
      ]
    },
    "616": {
      "op": "bz static_array_replace_dynamic_element_after_for@4",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0"
      ]
    },
    "619": {
      "block": "static_array_replace_dynamic_element_for_body@2",
      "stack_in": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "new_head_and_tail#0"
      ]
    },
    "621": {
      "op": "dup",
      "defined_out": [
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "622": {
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)",
        "head_offset#0"
      ]
    },
    "624": {
      "op": "dup",
      "defined_out": [
        "head_offset#0",
        "head_offset#0 (copy)",
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)",
        "head_offset#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "625": {
      "op": "cover 3",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "new_head_and_tail#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "627": {
      "op": "extract_uint16",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset#0"
      ]
    },
    "628": {
      "op": "frame_dig 1",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "tail_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset#0",
        "new_item_length#0"
      ]
    },
    "630": {
      "op": "+",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset#0"
      ]
    },
    "631": {
      "op": "frame_dig 0",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tail_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset#0",
        "original_item_length#0"
      ]
    },
    "633": {
      "op": "-",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset#0"
      ]
    },
    "634": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tmp%21#0"
      ]
    },
    "635": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0",
        "tail_offset_bytes#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "tail_offset_bytes#0"
      ]
    },
    "638": {
      "op": "swap",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0",
        "tail_offset_bytes#0",
        "new_head_and_tail#0"
      ]
    },
    "639": {
      "op": "uncover 2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "tail_offset_bytes#0",
        "new_head_and_tail#0",
        "head_offset#0"
      ]
    },
    "641": {
      "op": "uncover 2",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "head_offset#0",
        "tail_offset_bytes#0"
      ]
    },
    "643": {
      "op": "replace3",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "new_head_and_tail#0"
      ]
    },
    "644": {
      "op": "frame_bury 2",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "new_item_length#0",
        "original_item_length#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0"
      ]
    },
    "646": {
      "block": "static_array_replace_dynamic_element_for_footer@3",
      "stack_in": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "648": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "head_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "649": {
      "op": "+",
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "650": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0"
      ]
    },
    "652": {
      "op": "b static_array_replace_dynamic_element_for_header@1"
    },
    "655": {
      "block": "static_array_replace_dynamic_element_after_for@4",
      "stack_in": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "original_item_length#0",
        "new_item_length#0",
        "new_head_and_tail#0",
        "tmp%15#0",
        "head_offset#0",
        "new_head_and_tail#0"
      ]
    },
    "657": {
      "op": "frame_bury 0"
    },
    "659": {
      "retsub": true,
      "op": "retsub"
    },
    "660": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "params": {},
      "block": "get_string1_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x61",
      "defined_out": [
        "0x61"
      ],
      "stack_out": [
        "0x61"
      ]
    },
    "661": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#1"
      ],
      "stack_out": [
        "aggregate%length%0#1"
      ]
    },
    "662": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#1"
      ]
    },
    "663": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#1"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#1"
      ]
    },
    "666": {
      "op": "bytec_1 // 0x61",
      "stack_out": [
        "aggregate%length_uint16%0#1",
        "0x61"
      ]
    },
    "667": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "668": {
      "retsub": true,
      "op": "retsub"
    },
    "669": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "params": {},
      "block": "get_string2_block@0",
      "stack_in": [],
      "op": "bytec_2 // 0x626565",
      "defined_out": [
        "0x626565"
      ],
      "stack_out": [
        "0x626565"
      ]
    },
    "670": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#1"
      ],
      "stack_out": [
        "aggregate%length%0#1"
      ]
    },
    "671": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#1"
      ]
    },
    "672": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#1"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#1"
      ]
    },
    "675": {
      "op": "bytec_2 // 0x626565",
      "stack_out": [
        "aggregate%length_uint16%0#1",
        "0x626565"
      ]
    },
    "676": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "677": {
      "retsub": true,
      "op": "retsub"
    },
    "678": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_string3",
      "params": {},
      "block": "get_string3_block@0",
      "stack_in": [],
      "op": "bytec_3 // 0x48656c6c6f20576f726c64",
      "defined_out": [
        "0x48656c6c6f20576f726c64"
      ],
      "stack_out": [
        "0x48656c6c6f20576f726c64"
      ]
    },
    "679": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#1"
      ],
      "stack_out": [
        "aggregate%length%0#1"
      ]
    },
    "680": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#1"
      ]
    },
    "681": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#1"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#1"
      ]
    },
    "684": {
      "op": "bytec_3 // 0x48656c6c6f20576f726c64",
      "stack_out": [
        "aggregate%length_uint16%0#1",
        "0x48656c6c6f20576f726c64"
      ]
    },
    "685": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "686": {
      "retsub": true,
      "op": "retsub"
    },
    "687": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "params": {},
      "block": "get_uint1_block@0",
      "stack_in": [],
      "op": "pushbytes 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003"
      ],
      "stack_out": [
        "0x0000000000000003"
      ]
    },
    "697": {
      "retsub": true,
      "op": "retsub"
    },
    "698": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "params": {},
      "block": "get_uint2_block@0",
      "stack_in": [],
      "op": "pushbytes 0x0000040000000000",
      "defined_out": [
        "0x0000040000000000"
      ],
      "stack_out": [
        "0x0000040000000000"
      ]
    },
    "708": {
      "retsub": true,
      "op": "retsub"
    },
    "709": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_byte1",
      "params": {},
      "block": "get_byte1_block@0",
      "stack_in": [],
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x04"
      ],
      "stack_out": [
        "0x04"
      ]
    },
    "712": {
      "retsub": true,
      "op": "retsub"
    },
    "713": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_byte2",
      "params": {},
      "block": "get_byte2_block@0",
      "stack_in": [],
      "op": "pushbytes 0x05",
      "defined_out": [
        "0x05"
      ],
      "stack_out": [
        "0x05"
      ]
    },
    "716": {
      "retsub": true,
      "op": "retsub"
    },
    "717": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_byte3",
      "params": {},
      "block": "get_byte3_block@0",
      "stack_in": [],
      "op": "pushbytes 0x2a",
      "defined_out": [
        "0x2a"
      ],
      "stack_out": [
        "0x2a"
      ]
    },
    "720": {
      "retsub": true,
      "op": "retsub"
    },
    "721": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_byte4",
      "params": {},
      "block": "get_byte4_block@0",
      "stack_in": [],
      "op": "pushbytes 0xff",
      "defined_out": [
        "0xff"
      ],
      "stack_out": [
        "0xff"
      ]
    },
    "724": {
      "retsub": true,
      "op": "retsub"
    },
    "725": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr1",
      "params": {},
      "block": "get_u16_arr1_block@0",
      "stack_in": [],
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "727": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#1"
      ]
    },
    "728": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#1"
      ],
      "stack_out": [
        "aggregate%len_u16%0#1"
      ]
    },
    "731": {
      "op": "pushbytes 0xffff",
      "defined_out": [
        "0xffff",
        "aggregate%len_u16%0#1"
      ],
      "stack_out": [
        "aggregate%len_u16%0#1",
        "0xffff"
      ]
    },
    "735": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1"
      ]
    },
    "736": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000",
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1",
        "0x0000"
      ]
    },
    "740": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1"
      ]
    },
    "741": {
      "op": "pushbytes 0x002a",
      "defined_out": [
        "0x002a",
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "0x002a"
      ]
    },
    "745": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%2#1"
      ],
      "stack_out": [
        "aggregate%encoded%2#1"
      ]
    },
    "746": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%encoded%2#1"
      ],
      "stack_out": [
        "aggregate%encoded%2#1",
        "0x"
      ]
    },
    "747": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "748": {
      "retsub": true,
      "op": "retsub"
    },
    "749": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr2",
      "params": {},
      "block": "get_u16_arr2_block@0",
      "stack_in": [],
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "750": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#1"
      ]
    },
    "751": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#1"
      ],
      "stack_out": [
        "aggregate%len_u16%0#1"
      ]
    },
    "754": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001",
        "aggregate%len_u16%0#1"
      ],
      "stack_out": [
        "aggregate%len_u16%0#1",
        "0x0001"
      ]
    },
    "758": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1"
      ]
    },
    "759": {
      "op": "pushbytes 0x0002",
      "defined_out": [
        "0x0002",
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1",
        "0x0002"
      ]
    },
    "763": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1"
      ]
    },
    "764": {
      "op": "pushbytes 0x0003",
      "defined_out": [
        "0x0003",
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1",
        "0x0003"
      ]
    },
    "768": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%2#1"
      ],
      "stack_out": [
        "aggregate%encoded%2#1"
      ]
    },
    "769": {
      "op": "pushbytes 0x0004",
      "defined_out": [
        "0x0004",
        "aggregate%encoded%2#1"
      ],
      "stack_out": [
        "aggregate%encoded%2#1",
        "0x0004"
      ]
    },
    "773": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%3#1"
      ],
      "stack_out": [
        "aggregate%encoded%3#1"
      ]
    },
    "774": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%encoded%3#1"
      ],
      "stack_out": [
        "aggregate%encoded%3#1",
        "0x"
      ]
    },
    "775": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "776": {
      "retsub": true,
      "op": "retsub"
    },
    "777": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements",
      "params": {},
      "block": "test_static_elements_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte1",
      "op": "callsub get_byte1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "780": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte2",
      "op": "callsub get_byte2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "783": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "784": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "785": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "786": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%encoded%0#1"
      ]
    },
    "787": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%0#1",
        "tmp%1#0"
      ]
    },
    "788": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1"
      ]
    },
    "789": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%1#1",
        "0x"
      ]
    },
    "790": {
      "op": "concat",
      "defined_out": [
        "byte_array1#0"
      ],
      "stack_out": [
        "byte_array1#0"
      ]
    },
    "791": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte3",
      "op": "callsub get_byte3",
      "defined_out": [
        "byte_array1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "byte_array1#0",
        "tmp%2#0"
      ]
    },
    "794": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte4",
      "op": "callsub get_byte4",
      "defined_out": [
        "byte_array1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "byte_array1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "797": {
      "op": "swap",
      "stack_out": [
        "byte_array1#0",
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "798": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "byte_array1#0",
        "tmp%3#0",
        "tmp%2#0",
        "0x"
      ]
    },
    "799": {
      "op": "swap",
      "stack_out": [
        "byte_array1#0",
        "tmp%3#0",
        "0x",
        "tmp%2#0"
      ]
    },
    "800": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%3#1",
        "byte_array1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "byte_array1#0",
        "tmp%3#0",
        "aggregate%encoded%3#1"
      ]
    },
    "801": {
      "op": "swap",
      "stack_out": [
        "byte_array1#0",
        "aggregate%encoded%3#1",
        "tmp%3#0"
      ]
    },
    "802": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%4#1",
        "byte_array1#0"
      ],
      "stack_out": [
        "byte_array1#0",
        "aggregate%encoded%4#1"
      ]
    },
    "803": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "byte_array1#0",
        "aggregate%encoded%4#1",
        "0x"
      ]
    },
    "804": {
      "op": "concat",
      "defined_out": [
        "byte_array1#0",
        "byte_array2#0"
      ],
      "stack_out": [
        "byte_array1#0",
        "byte_array2#0"
      ]
    },
    "805": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "byte_array1#0",
        "byte_array2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "byte_array1#0",
        "byte_array2#0",
        "tmp%4#0"
      ]
    },
    "808": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "byte_array1#0",
        "byte_array2#0",
        "tmp%4#0",
        "0x"
      ]
    },
    "809": {
      "op": "swap",
      "stack_out": [
        "byte_array1#0",
        "byte_array2#0",
        "0x",
        "tmp%4#0"
      ]
    },
    "810": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%6#1",
        "byte_array1#0",
        "byte_array2#0"
      ],
      "stack_out": [
        "byte_array1#0",
        "byte_array2#0",
        "aggregate%encoded%6#1"
      ]
    },
    "811": {
      "op": "uncover 2",
      "stack_out": [
        "byte_array2#0",
        "aggregate%encoded%6#1",
        "byte_array1#0"
      ]
    },
    "813": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%7#1",
        "byte_array2#0"
      ],
      "stack_out": [
        "byte_array2#0",
        "aggregate%encoded%7#1"
      ]
    },
    "814": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "byte_array2#0",
        "aggregate%encoded%7#1",
        "0x"
      ]
    },
    "815": {
      "op": "concat",
      "defined_out": [
        "byte_array2#0",
        "struct1#0"
      ],
      "stack_out": [
        "byte_array2#0",
        "struct1#0"
      ]
    },
    "816": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "byte_array2#0"
      ]
    },
    "817": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "byte_array2#0",
        "struct1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct1#0",
        "byte_array2#0",
        "tmp%6#0"
      ]
    },
    "820": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "byte_array2#0",
        "tmp%6#0",
        "0x"
      ]
    },
    "821": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "byte_array2#0",
        "0x",
        "tmp%6#0"
      ]
    },
    "822": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%9#1",
        "byte_array2#0",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "byte_array2#0",
        "aggregate%encoded%9#1"
      ]
    },
    "823": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "aggregate%encoded%9#1",
        "byte_array2#0"
      ]
    },
    "824": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%10#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%encoded%10#1"
      ]
    },
    "825": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "aggregate%encoded%10#1",
        "0x"
      ]
    },
    "826": {
      "op": "concat",
      "defined_out": [
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0"
      ]
    },
    "827": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0"
      ]
    },
    "828": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "2"
      ]
    },
    "829": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%as_bytes%0#1"
      ]
    },
    "830": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%len_u16%0#1"
      ]
    },
    "833": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%len_u16%0#1",
        "struct1#0",
        "struct1#0 (copy)",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%len_u16%0#1",
        "struct1#0 (copy)"
      ]
    },
    "835": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%12#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%encoded%12#1"
      ]
    },
    "836": {
      "op": "dig 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%encoded%12#1",
        "struct1#0 (copy)"
      ]
    },
    "838": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%13#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%encoded%13#1"
      ]
    },
    "839": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%encoded%13#1",
        "0x"
      ]
    },
    "840": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "841": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "1"
      ]
    },
    "842": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "1",
        "10",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "1",
        "10"
      ]
    },
    "844": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%0#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%write_offset%0#1"
      ]
    },
    "845": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%write_offset%0#1",
        "2"
      ]
    },
    "846": {
      "op": "+",
      "defined_out": [
        "aggregate%write_offset_with_length_header%0#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%write_offset_with_length_header%0#1"
      ]
    },
    "847": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%write_offset_with_length_header%0#1",
        "array#0",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%write_offset_with_length_header%0#1",
        "struct2#0 (copy)"
      ]
    },
    "849": {
      "op": "replace3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "850": {
      "op": "dup",
      "defined_out": [
        "array#0",
        "array#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "851": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "852": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "853": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_trimmed%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_trimmed%1#1"
      ]
    },
    "856": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%array_trimmed%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_trimmed%1#1",
        "0"
      ]
    },
    "857": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_trimmed%1#1",
        "0",
        "10"
      ]
    },
    "859": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%1#1",
        "aggregate%bytes_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_trimmed%1#1",
        "aggregate%bytes_offset%1#1"
      ]
    },
    "860": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_trimmed%1#1",
        "aggregate%bytes_offset%1#1",
        "10"
      ]
    },
    "862": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array#0",
        "array_item%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_item%0#0"
      ]
    },
    "863": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "864": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "865": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_trimmed%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_trimmed%2#1"
      ]
    },
    "868": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_trimmed%2#1",
        "1"
      ]
    },
    "869": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_trimmed%2#1",
        "1",
        "10"
      ]
    },
    "871": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%2#1",
        "aggregate%bytes_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_trimmed%2#1",
        "aggregate%bytes_offset%2#1"
      ]
    },
    "872": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_trimmed%2#1",
        "aggregate%bytes_offset%2#1",
        "10"
      ]
    },
    "874": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array#0",
        "array_item%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_item%1#0"
      ]
    },
    "875": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "876": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "10"
      ]
    },
    "878": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "op": "callsub dynamic_array_pop_fixed_size",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "tmp%8#0",
        "array#0"
      ]
    },
    "881": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "tmp%8#0"
      ]
    },
    "882": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "array#0",
        "tmp%8#0",
        "struct2#0"
      ]
    },
    "884": {
      "op": "==",
      "defined_out": [
        "array#0",
        "struct1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "tmp%10#0"
      ]
    },
    "885": {
      "op": "assert",
      "stack_out": [
        "struct1#0",
        "array#0"
      ]
    },
    "886": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "struct1#0",
        "array#0",
        "10"
      ]
    },
    "888": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "op": "callsub dynamic_array_pop_fixed_size",
      "defined_out": [
        "struct1#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "891": {
      "op": "pop",
      "stack_out": [
        "struct1#0",
        "tmp%11#0"
      ]
    },
    "892": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "893": {
      "op": "assert",
      "stack_out": []
    },
    "894": {
      "retsub": true,
      "op": "retsub"
    },
    "895": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements",
      "params": {},
      "block": "test_dynamic_elements_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "898": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "901": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "902": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "903": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "tmp%0#0 (copy)"
      ]
    },
    "905": {
      "op": "concat",
      "defined_out": [
        "aggregate%tail%0#1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%tail%0#1"
      ]
    },
    "906": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "aggregate%tail%0#1",
        "tmp%0#0"
      ]
    },
    "907": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#1",
        "aggregate%tail%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%tail%0#1",
        "aggregate%data_length%0#1"
      ]
    },
    "908": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "aggregate%data_length%0#1",
        "aggregate%tail%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%tail%0#1",
        "aggregate%data_length%0#1",
        "4"
      ]
    },
    "909": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "910": {
      "op": "intc_3 // 4",
      "stack_out": [
        "tmp%1#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "4"
      ]
    },
    "911": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%as_bytes%0#1"
      ]
    },
    "912": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%offset_as_uint16%0#1",
        "aggregate%tail%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "915": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%1#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%offset_as_uint16%0#1",
        "0x"
      ]
    },
    "916": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "0x",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "917": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "aggregate%tail%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1"
      ]
    },
    "918": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "aggregate%tail%0#1"
      ]
    },
    "920": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "aggregate%tail%0#1",
        "tmp%1#0"
      ]
    },
    "922": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "aggregate%tail%1#1"
      ],
      "stack_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "aggregate%tail%1#1"
      ]
    },
    "923": {
      "op": "swap",
      "stack_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%1#1",
        "aggregate%encoded%0#1"
      ]
    },
    "924": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%tail%1#1",
        "aggregate%encoded%0#1",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "926": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#1",
        "aggregate%encoded%0#1",
        "aggregate%tail%1#1"
      ],
      "stack_out": [
        "aggregate%tail%1#1",
        "aggregate%encoded%0#1",
        "aggregate%as_bytes%1#1"
      ]
    },
    "927": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%0#1",
        "aggregate%offset_as_uint16%1#1",
        "aggregate%tail%1#1"
      ],
      "stack_out": [
        "aggregate%tail%1#1",
        "aggregate%encoded%0#1",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "930": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1",
        "aggregate%tail%1#1"
      ],
      "stack_out": [
        "aggregate%tail%1#1",
        "aggregate%encoded%1#1"
      ]
    },
    "931": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%1#1",
        "aggregate%tail%1#1"
      ]
    },
    "932": {
      "op": "concat",
      "defined_out": [
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0"
      ]
    },
    "933": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string3",
      "op": "callsub get_string3",
      "defined_out": [
        "struct1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%3#0"
      ]
    },
    "936": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "struct1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "939": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "tmp%3#0"
      ]
    },
    "940": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "tmp%3#0",
        "0x"
      ]
    },
    "941": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "struct1#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "tmp%3#0",
        "0x",
        "tmp%3#0 (copy)"
      ]
    },
    "943": {
      "op": "concat",
      "defined_out": [
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%tail%2#1"
      ]
    },
    "944": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "aggregate%tail%2#1",
        "tmp%3#0"
      ]
    },
    "945": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%2#1",
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "aggregate%tail%2#1",
        "aggregate%data_length%2#1"
      ]
    },
    "946": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "aggregate%tail%2#1",
        "aggregate%data_length%2#1",
        "4"
      ]
    },
    "947": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1"
      ]
    },
    "948": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "4"
      ]
    },
    "949": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%as_bytes%2#1"
      ]
    },
    "950": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%offset_as_uint16%2#1",
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%offset_as_uint16%2#1"
      ]
    },
    "953": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%offset_as_uint16%2#1",
        "0x"
      ]
    },
    "954": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "0x",
        "aggregate%offset_as_uint16%2#1"
      ]
    },
    "955": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%3#1",
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%3#1"
      ]
    },
    "956": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%3#1",
        "aggregate%tail%2#1"
      ]
    },
    "958": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%3#1",
        "aggregate%tail%2#1",
        "tmp%4#0"
      ]
    },
    "960": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%3#1",
        "aggregate%tail%3#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%3#1",
        "aggregate%tail%3#1"
      ]
    },
    "961": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%tail%3#1",
        "aggregate%encoded%3#1"
      ]
    },
    "962": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%3#1",
        "aggregate%current_tail_offset%2#1"
      ]
    },
    "964": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#1",
        "aggregate%encoded%3#1",
        "aggregate%tail%3#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%3#1",
        "aggregate%as_bytes%3#1"
      ]
    },
    "965": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%3#1",
        "aggregate%offset_as_uint16%3#1",
        "aggregate%tail%3#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%3#1",
        "aggregate%offset_as_uint16%3#1"
      ]
    },
    "968": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%4#1",
        "aggregate%tail%3#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%4#1"
      ]
    },
    "969": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "aggregate%encoded%4#1",
        "aggregate%tail%3#1"
      ]
    },
    "970": {
      "op": "concat",
      "defined_out": [
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0"
      ]
    },
    "971": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0"
      ]
    },
    "972": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "2"
      ]
    },
    "973": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%as_bytes%4#1"
      ]
    },
    "974": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%len_u16%0#1"
      ]
    },
    "977": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%len_u16%0#1",
        "0x"
      ]
    },
    "978": {
      "op": "dig 2",
      "defined_out": [
        "0x",
        "aggregate%len_u16%0#1",
        "struct1#0",
        "struct1#0 (copy)",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%len_u16%0#1",
        "0x",
        "struct1#0 (copy)"
      ]
    },
    "980": {
      "op": "concat",
      "defined_out": [
        "aggregate%len_u16%0#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%len_u16%0#1",
        "aggregate%tail%4#1"
      ]
    },
    "981": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "aggregate%tail%4#1",
        "struct1#0",
        "aggregate%len_u16%0#1"
      ]
    },
    "983": {
      "op": "dig 1",
      "stack_out": [
        "struct2#0",
        "aggregate%tail%4#1",
        "struct1#0",
        "aggregate%len_u16%0#1",
        "struct1#0 (copy)"
      ]
    },
    "985": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%4#1",
        "aggregate%len_u16%0#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "aggregate%tail%4#1",
        "struct1#0",
        "aggregate%len_u16%0#1",
        "aggregate%data_length%4#1"
      ]
    },
    "986": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct2#0",
        "aggregate%tail%4#1",
        "struct1#0",
        "aggregate%len_u16%0#1",
        "aggregate%data_length%4#1",
        "4"
      ]
    },
    "987": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%len_u16%0#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "aggregate%tail%4#1",
        "struct1#0",
        "aggregate%len_u16%0#1",
        "aggregate%current_tail_offset%4#1"
      ]
    },
    "988": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct2#0",
        "aggregate%tail%4#1",
        "struct1#0",
        "aggregate%len_u16%0#1",
        "aggregate%current_tail_offset%4#1",
        "4"
      ]
    },
    "989": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#1",
        "aggregate%current_tail_offset%4#1",
        "aggregate%len_u16%0#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "aggregate%tail%4#1",
        "struct1#0",
        "aggregate%len_u16%0#1",
        "aggregate%current_tail_offset%4#1",
        "aggregate%as_bytes%5#1"
      ]
    },
    "990": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%len_u16%0#1",
        "aggregate%offset_as_uint16%4#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "aggregate%tail%4#1",
        "struct1#0",
        "aggregate%len_u16%0#1",
        "aggregate%current_tail_offset%4#1",
        "aggregate%offset_as_uint16%4#1"
      ]
    },
    "993": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "aggregate%tail%4#1",
        "struct1#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%offset_as_uint16%4#1",
        "aggregate%len_u16%0#1"
      ]
    },
    "995": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "aggregate%tail%4#1",
        "struct1#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%len_u16%0#1",
        "aggregate%offset_as_uint16%4#1"
      ]
    },
    "996": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "aggregate%tail%4#1",
        "struct1#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%6#1"
      ]
    },
    "997": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%4#1"
      ]
    },
    "999": {
      "op": "dig 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%4#1",
        "struct1#0 (copy)"
      ]
    },
    "1001": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%5#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%5#1"
      ]
    },
    "1002": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%tail%5#1",
        "aggregate%encoded%6#1"
      ]
    },
    "1003": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%6#1",
        "aggregate%current_tail_offset%4#1"
      ]
    },
    "1005": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%5#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%6#1",
        "aggregate%as_bytes%6#1"
      ]
    },
    "1006": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%6#1",
        "aggregate%offset_as_uint16%5#1",
        "aggregate%tail%5#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%6#1",
        "aggregate%offset_as_uint16%5#1"
      ]
    },
    "1009": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%7#1",
        "aggregate%tail%5#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%7#1"
      ]
    },
    "1010": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%encoded%7#1",
        "aggregate%tail%5#1"
      ]
    },
    "1011": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1012": {
      "op": "dup",
      "defined_out": [
        "array#0",
        "array#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1013": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0",
        "array#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1014": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "extract_uint16%0#0"
      ]
    },
    "1015": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "array#0"
      ]
    },
    "1016": {
      "op": "extract 2 0",
      "defined_out": [
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0"
      ]
    },
    "1019": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "0x"
      ]
    },
    "1020": {
      "op": "dig 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "0x",
        "struct1#0 (copy)"
      ]
    },
    "1022": {
      "op": "concat",
      "defined_out": [
        "aggregate%tail%6#1",
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "aggregate%tail%6#1"
      ]
    },
    "1023": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "aggregate%tail%6#1",
        "2"
      ]
    },
    "1024": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%7#1",
        "aggregate%tail%6#1",
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "aggregate%tail%6#1",
        "aggregate%as_bytes%7#1"
      ]
    },
    "1025": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%6#1",
        "aggregate%tail%6#1",
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "aggregate%tail%6#1",
        "aggregate%offset_as_uint16%6#1"
      ]
    },
    "1028": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "aggregate%tail%6#1",
        "aggregate%offset_as_uint16%6#1",
        "0x"
      ]
    },
    "1029": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "aggregate%tail%6#1",
        "0x",
        "aggregate%offset_as_uint16%6#1"
      ]
    },
    "1030": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%9#1",
        "aggregate%tail%6#1",
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "aggregate%tail%6#1",
        "aggregate%encoded%9#1"
      ]
    },
    "1031": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "aggregate%encoded%9#1",
        "aggregate%tail%6#1"
      ]
    },
    "1032": {
      "op": "concat",
      "defined_out": [
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "tmp%6#0"
      ]
    },
    "1033": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_to_end%0#0",
        "tmp%6#0",
        "extract_uint16%0#0"
      ]
    },
    "1035": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "tmp%6#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0"
      ]
    },
    "1037": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "tmp%6#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "1"
      ]
    },
    "1038": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "1",
        "tmp%6#0"
      ]
    },
    "1040": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1043": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1044": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1045": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_length%1#1"
      ]
    },
    "1046": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_length%1#1",
        "1"
      ]
    },
    "1047": {
      "op": ">",
      "defined_out": [
        "aggregate%lt%0#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%lt%0#1"
      ]
    },
    "1048": {
      "error": "index access is out of bounds",
      "op": "assert // index access is out of bounds",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1049": {
      "op": "dig 2",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "struct2#0 (copy)"
      ]
    },
    "1051": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "struct2#0 (copy)",
        "1"
      ]
    },
    "1052": {
      "callsub": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "op": "callsub dynamic_array_replace_dynamic_element",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1055": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1056": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1057": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1058": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_head_and_tail%1#1"
      ]
    },
    "1061": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "array#0"
      ]
    },
    "1062": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1063": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1064": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "array#0",
        "aggregate%array_length%2#1"
      ]
    },
    "1065": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0"
      ]
    },
    "1066": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "0"
      ]
    },
    "1067": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "0",
        "2"
      ]
    },
    "1068": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "aggregate%item_offset_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%item_offset_offset%1#1"
      ]
    },
    "1069": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_head_and_tail%1#1 (copy)",
        "aggregate%array_length%2#1",
        "aggregate%item_offset_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%item_offset_offset%1#1",
        "aggregate%array_head_and_tail%1#1 (copy)"
      ]
    },
    "1071": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%array_head_and_tail%1#1 (copy)",
        "aggregate%item_offset_offset%1#1"
      ]
    },
    "1072": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%item_offset%1#1"
      ]
    },
    "1073": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%array_length%2#1",
        "array#0"
      ]
    },
    "1075": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "0"
      ]
    },
    "1076": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "0",
        "1"
      ]
    },
    "1077": {
      "op": "+",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_index%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%next_index%1#1"
      ]
    },
    "1078": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%array_length%2#1"
      ]
    },
    "1080": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_index%1#1",
        "aggregate%next_index%1#1 (copy)",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%array_length%2#1",
        "aggregate%next_index%1#1 (copy)"
      ]
    },
    "1082": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%has_next%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_index%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%has_next%1#1"
      ]
    },
    "1083": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%next_index%1#1"
      ]
    },
    "1085": {
      "op": "dig 4",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%array_head_and_tail%1#1 (copy)"
      ]
    },
    "1087": {
      "op": "len",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%end_of_array%1#1",
        "aggregate%has_next%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_index%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%end_of_array%1#1"
      ]
    },
    "1088": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_index%1#1"
      ]
    },
    "1090": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "2"
      ]
    },
    "1091": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%end_of_array%1#1",
        "aggregate%has_next%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_item_offset_offset%1#1"
      ]
    },
    "1092": {
      "op": "dig 5",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_item_offset_offset%1#1",
        "aggregate%array_head_and_tail%1#1 (copy)"
      ]
    },
    "1094": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%array_head_and_tail%1#1 (copy)",
        "aggregate%next_item_offset_offset%1#1"
      ]
    },
    "1095": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%end_of_array%1#1",
        "aggregate%has_next%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_item_offset%1#1"
      ]
    },
    "1096": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%next_item_offset%1#1",
        "aggregate%end_of_array%1#1"
      ]
    },
    "1098": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%end_of_array%1#1",
        "aggregate%next_item_offset%1#1"
      ]
    },
    "1099": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%end_of_array%1#1",
        "aggregate%next_item_offset%1#1",
        "aggregate%has_next%1#1"
      ]
    },
    "1101": {
      "op": "select",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%end_offset%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%end_offset%1#1"
      ]
    },
    "1102": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%end_offset%1#1",
        "aggregate%array_head_and_tail%1#1"
      ]
    },
    "1104": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%end_offset%1#1",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1"
      ]
    },
    "1106": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%end_offset%1#1"
      ]
    },
    "1108": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "array_item%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_item%0#0"
      ]
    },
    "1109": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1110": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1111": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_head_and_tail%2#1"
      ]
    },
    "1114": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "array#0"
      ]
    },
    "1115": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1116": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1117": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "array#0",
        "aggregate%array_length%3#1"
      ]
    },
    "1118": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0"
      ]
    },
    "1119": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "1"
      ]
    },
    "1120": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "1",
        "2"
      ]
    },
    "1121": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "aggregate%item_offset_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%item_offset_offset%2#1"
      ]
    },
    "1122": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_head_and_tail%2#1 (copy)",
        "aggregate%array_length%3#1",
        "aggregate%item_offset_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%item_offset_offset%2#1",
        "aggregate%array_head_and_tail%2#1 (copy)"
      ]
    },
    "1124": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%array_head_and_tail%2#1 (copy)",
        "aggregate%item_offset_offset%2#1"
      ]
    },
    "1125": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%item_offset%2#1"
      ]
    },
    "1126": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%array_length%3#1",
        "array#0"
      ]
    },
    "1128": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "1"
      ]
    },
    "1129": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "1",
        "1"
      ]
    },
    "1130": {
      "op": "+",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_index%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%next_index%2#1"
      ]
    },
    "1131": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%array_length%3#1"
      ]
    },
    "1133": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_index%2#1",
        "aggregate%next_index%2#1 (copy)",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%array_length%3#1",
        "aggregate%next_index%2#1 (copy)"
      ]
    },
    "1135": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%has_next%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_index%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%has_next%2#1"
      ]
    },
    "1136": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%next_index%2#1"
      ]
    },
    "1138": {
      "op": "dig 4",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%array_head_and_tail%2#1 (copy)"
      ]
    },
    "1140": {
      "op": "len",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%end_of_array%2#1",
        "aggregate%has_next%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_index%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%end_of_array%2#1"
      ]
    },
    "1141": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_index%2#1"
      ]
    },
    "1143": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "2"
      ]
    },
    "1144": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%end_of_array%2#1",
        "aggregate%has_next%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_item_offset_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_item_offset_offset%2#1"
      ]
    },
    "1145": {
      "op": "dig 5",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_item_offset_offset%2#1",
        "aggregate%array_head_and_tail%2#1 (copy)"
      ]
    },
    "1147": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%array_head_and_tail%2#1 (copy)",
        "aggregate%next_item_offset_offset%2#1"
      ]
    },
    "1148": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%end_of_array%2#1",
        "aggregate%has_next%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_item_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_item_offset%2#1"
      ]
    },
    "1149": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%next_item_offset%2#1",
        "aggregate%end_of_array%2#1"
      ]
    },
    "1151": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%end_of_array%2#1",
        "aggregate%next_item_offset%2#1"
      ]
    },
    "1152": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%end_of_array%2#1",
        "aggregate%next_item_offset%2#1",
        "aggregate%has_next%2#1"
      ]
    },
    "1154": {
      "op": "select",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%end_offset%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%end_offset%2#1"
      ]
    },
    "1155": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%end_offset%2#1",
        "aggregate%array_head_and_tail%2#1"
      ]
    },
    "1157": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%end_offset%2#1",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1"
      ]
    },
    "1159": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%end_offset%2#1"
      ]
    },
    "1161": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "array_item%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_item%1#0"
      ]
    },
    "1162": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1163": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1164": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_head_and_tail%3#1"
      ]
    },
    "1167": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "array#0"
      ]
    },
    "1168": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1169": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1170": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "array#0",
        "aggregate%array_length%4#1"
      ]
    },
    "1171": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "array#0"
      ]
    },
    "1172": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "array#0",
        "2"
      ]
    },
    "1173": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "array#0",
        "2",
        "2"
      ]
    },
    "1174": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "aggregate%item_offset_offset%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "array#0",
        "aggregate%item_offset_offset%3#1"
      ]
    },
    "1175": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_head_and_tail%3#1 (copy)",
        "aggregate%array_length%4#1",
        "aggregate%item_offset_offset%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "array#0",
        "aggregate%item_offset_offset%3#1",
        "aggregate%array_head_and_tail%3#1 (copy)"
      ]
    },
    "1177": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "array#0",
        "aggregate%array_head_and_tail%3#1 (copy)",
        "aggregate%item_offset_offset%3#1"
      ]
    },
    "1178": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "aggregate%item_offset%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "array#0",
        "aggregate%item_offset%3#1"
      ]
    },
    "1179": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%array_length%4#1",
        "array#0"
      ]
    },
    "1181": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%array_length%4#1",
        "array#0",
        "2"
      ]
    },
    "1182": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%array_length%4#1",
        "array#0",
        "2",
        "1"
      ]
    },
    "1183": {
      "op": "+",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "aggregate%item_offset%3#1",
        "aggregate%next_index%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%array_length%4#1",
        "array#0",
        "aggregate%next_index%3#1"
      ]
    },
    "1184": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "array#0",
        "aggregate%next_index%3#1",
        "aggregate%array_length%4#1"
      ]
    },
    "1186": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "aggregate%item_offset%3#1",
        "aggregate%next_index%3#1",
        "aggregate%next_index%3#1 (copy)",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "array#0",
        "aggregate%next_index%3#1",
        "aggregate%array_length%4#1",
        "aggregate%next_index%3#1 (copy)"
      ]
    },
    "1188": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%has_next%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%next_index%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "array#0",
        "aggregate%next_index%3#1",
        "aggregate%has_next%3#1"
      ]
    },
    "1189": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "array#0",
        "aggregate%next_index%3#1"
      ]
    },
    "1191": {
      "op": "dig 4",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "array#0",
        "aggregate%next_index%3#1",
        "aggregate%array_head_and_tail%3#1 (copy)"
      ]
    },
    "1193": {
      "op": "len",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%end_of_array%3#1",
        "aggregate%has_next%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%next_index%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "array#0",
        "aggregate%next_index%3#1",
        "aggregate%end_of_array%3#1"
      ]
    },
    "1194": {
      "op": "cover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "aggregate%end_of_array%3#1",
        "array#0",
        "aggregate%next_index%3#1"
      ]
    },
    "1196": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "aggregate%end_of_array%3#1",
        "array#0",
        "aggregate%next_index%3#1",
        "2"
      ]
    },
    "1197": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%end_of_array%3#1",
        "aggregate%has_next%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%next_item_offset_offset%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "aggregate%end_of_array%3#1",
        "array#0",
        "aggregate%next_item_offset_offset%3#1"
      ]
    },
    "1198": {
      "op": "dig 5",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "aggregate%end_of_array%3#1",
        "array#0",
        "aggregate%next_item_offset_offset%3#1",
        "aggregate%array_head_and_tail%3#1 (copy)"
      ]
    },
    "1200": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "aggregate%end_of_array%3#1",
        "array#0",
        "aggregate%array_head_and_tail%3#1 (copy)",
        "aggregate%next_item_offset_offset%3#1"
      ]
    },
    "1201": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%end_of_array%3#1",
        "aggregate%has_next%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%next_item_offset%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "aggregate%end_of_array%3#1",
        "array#0",
        "aggregate%next_item_offset%3#1"
      ]
    },
    "1202": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "array#0",
        "aggregate%next_item_offset%3#1",
        "aggregate%end_of_array%3#1"
      ]
    },
    "1204": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "array#0",
        "aggregate%end_of_array%3#1",
        "aggregate%next_item_offset%3#1"
      ]
    },
    "1205": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "array#0",
        "aggregate%end_of_array%3#1",
        "aggregate%next_item_offset%3#1",
        "aggregate%has_next%3#1"
      ]
    },
    "1207": {
      "op": "select",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%end_offset%3#1",
        "aggregate%item_offset%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "array#0",
        "aggregate%end_offset%3#1"
      ]
    },
    "1208": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "aggregate%item_offset%3#1",
        "array#0",
        "aggregate%end_offset%3#1",
        "aggregate%array_head_and_tail%3#1"
      ]
    },
    "1210": {
      "op": "uncover 3",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%end_offset%3#1",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1"
      ]
    },
    "1212": {
      "op": "uncover 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%end_offset%3#1"
      ]
    },
    "1214": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "array_item%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array_item%2#0"
      ]
    },
    "1215": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1216": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "tmp%7#0",
        "array#0"
      ]
    },
    "1219": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "tmp%7#0"
      ]
    },
    "1220": {
      "op": "dig 2",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "tmp%7#0",
        "struct1#0 (copy)"
      ]
    },
    "1222": {
      "op": "==",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "tmp%9#0"
      ]
    },
    "1223": {
      "op": "assert",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1224": {
      "op": "dup",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1225": {
      "op": "log",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0"
      ]
    },
    "1226": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "tmp%10#0",
        "array#0"
      ]
    },
    "1229": {
      "op": "swap",
      "stack_out": [
        "struct2#0",
        "struct1#0",
        "array#0",
        "tmp%10#0"
      ]
    },
    "1230": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "array#0",
        "tmp%10#0",
        "struct2#0"
      ]
    },
    "1232": {
      "op": "==",
      "defined_out": [
        "array#0",
        "struct1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "tmp%12#0"
      ]
    },
    "1233": {
      "op": "assert",
      "stack_out": [
        "struct1#0",
        "array#0"
      ]
    },
    "1234": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1235": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "array#0"
      ]
    },
    "1236": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "array#0",
        "struct1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%13#0",
        "array#0"
      ]
    },
    "1239": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "array#0",
        "tmp%13#0"
      ]
    },
    "1240": {
      "op": "uncover 2",
      "stack_out": [
        "array#0",
        "tmp%13#0",
        "struct1#0"
      ]
    },
    "1242": {
      "op": "==",
      "defined_out": [
        "array#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "array#0",
        "tmp%15#0"
      ]
    },
    "1243": {
      "op": "assert",
      "stack_out": [
        "array#0"
      ]
    },
    "1244": {
      "op": "log",
      "stack_out": []
    },
    "1245": {
      "retsub": true,
      "op": "retsub"
    },
    "1246": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements",
      "params": {},
      "block": "test_mixed_single_dynamic_elements_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1249": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1252": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1253": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1256": {
      "op": "cover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1258": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "1259": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "1260": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%encoded%0#1"
      ]
    },
    "1261": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%0#1",
        "tmp%1#0"
      ]
    },
    "1262": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%0#1",
        "tmp%1#0",
        "0x"
      ]
    },
    "1263": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%0#1",
        "0x",
        "tmp%1#0"
      ]
    },
    "1264": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "aggregate%tail%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%0#1",
        "aggregate%tail%0#1"
      ]
    },
    "1265": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%0#1"
      ]
    },
    "1266": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "aggregate%encoded%0#1",
        "aggregate%tail%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%0#1",
        "18"
      ]
    },
    "1268": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "aggregate%encoded%0#1",
        "aggregate%tail%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%0#1",
        "aggregate%as_bytes%0#1"
      ]
    },
    "1269": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%0#1",
        "aggregate%offset_as_uint16%0#1",
        "aggregate%tail%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%0#1",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "1272": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1",
        "aggregate%tail%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%1#1"
      ]
    },
    "1273": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%tail%0#1",
        "aggregate%encoded%1#1",
        "tmp%2#0"
      ]
    },
    "1275": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%2#1",
        "aggregate%tail%0#1"
      ],
      "stack_out": [
        "aggregate%tail%0#1",
        "aggregate%encoded%2#1"
      ]
    },
    "1276": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%2#1",
        "aggregate%tail%0#1"
      ]
    },
    "1277": {
      "op": "concat",
      "defined_out": [
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0"
      ]
    },
    "1278": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "struct1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%4#0"
      ]
    },
    "1281": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "struct1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1284": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "1285": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "struct1#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%5#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "1288": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "1290": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%4#0",
        "0x"
      ]
    },
    "1291": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "tmp%5#0",
        "0x",
        "tmp%4#0"
      ]
    },
    "1292": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%4#1",
        "struct1#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%encoded%4#1"
      ]
    },
    "1293": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "aggregate%encoded%4#1",
        "tmp%5#0"
      ]
    },
    "1294": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "aggregate%encoded%4#1",
        "tmp%5#0",
        "0x"
      ]
    },
    "1295": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "aggregate%encoded%4#1",
        "0x",
        "tmp%5#0"
      ]
    },
    "1296": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%4#1",
        "aggregate%tail%1#1",
        "struct1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "aggregate%encoded%4#1",
        "aggregate%tail%1#1"
      ]
    },
    "1297": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%4#1"
      ]
    },
    "1298": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%4#1",
        "18"
      ]
    },
    "1300": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#1",
        "aggregate%encoded%4#1",
        "aggregate%tail%1#1",
        "struct1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%4#1",
        "aggregate%as_bytes%1#1"
      ]
    },
    "1301": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%4#1",
        "aggregate%offset_as_uint16%1#1",
        "aggregate%tail%1#1",
        "struct1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%4#1",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "1304": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%5#1",
        "aggregate%tail%1#1",
        "struct1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%5#1"
      ]
    },
    "1305": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%5#1",
        "tmp%6#0"
      ]
    },
    "1307": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%6#1",
        "aggregate%tail%1#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%6#1"
      ]
    },
    "1308": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "aggregate%encoded%6#1",
        "aggregate%tail%1#1"
      ]
    },
    "1309": {
      "op": "concat",
      "defined_out": [
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0"
      ]
    },
    "1310": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "0"
      ]
    },
    "1311": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%as_bytes%2#1"
      ]
    },
    "1312": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%len_u16%0#1"
      ]
    },
    "1315": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%len_u16%0#1",
        "0x"
      ]
    },
    "1316": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1317": {
      "op": "dup",
      "defined_out": [
        "array#0",
        "array#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1318": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1319": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "extract_uint16%0#0"
      ]
    },
    "1320": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1322": {
      "op": "extract 2 0",
      "defined_out": [
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "extract_to_end%0#0"
      ]
    },
    "1325": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "extract_to_end%0#0",
        "0x"
      ]
    },
    "1326": {
      "op": "dig 2",
      "defined_out": [
        "0x",
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)"
      ],
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "extract_to_end%0#0",
        "0x",
        "struct2#0 (copy)"
      ]
    },
    "1328": {
      "op": "concat",
      "defined_out": [
        "aggregate%tail%2#1",
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "extract_to_end%0#0",
        "aggregate%tail%2#1"
      ]
    },
    "1329": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%tail%2#1",
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "extract_to_end%0#0",
        "aggregate%tail%2#1",
        "2"
      ]
    },
    "1330": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#1",
        "aggregate%tail%2#1",
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "extract_to_end%0#0",
        "aggregate%tail%2#1",
        "aggregate%as_bytes%3#1"
      ]
    },
    "1331": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%2#1",
        "aggregate%tail%2#1",
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "extract_to_end%0#0",
        "aggregate%tail%2#1",
        "aggregate%offset_as_uint16%2#1"
      ]
    },
    "1334": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "extract_to_end%0#0",
        "aggregate%tail%2#1",
        "aggregate%offset_as_uint16%2#1",
        "0x"
      ]
    },
    "1335": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "extract_to_end%0#0",
        "aggregate%tail%2#1",
        "0x",
        "aggregate%offset_as_uint16%2#1"
      ]
    },
    "1336": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%9#1",
        "aggregate%tail%2#1",
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "extract_to_end%0#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%9#1"
      ]
    },
    "1337": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "extract_to_end%0#0",
        "aggregate%encoded%9#1",
        "aggregate%tail%2#1"
      ]
    },
    "1338": {
      "op": "concat",
      "defined_out": [
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "struct1#0",
        "extract_uint16%0#0",
        "struct2#0",
        "extract_to_end%0#0",
        "tmp%8#0"
      ]
    },
    "1339": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_to_end%0#0",
        "tmp%8#0",
        "extract_uint16%0#0"
      ]
    },
    "1341": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "tmp%8#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0"
      ]
    },
    "1343": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "extract_to_end%0#0",
        "extract_uint16%0#0",
        "struct1#0",
        "struct2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "tmp%8#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "1"
      ]
    },
    "1344": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%0#0",
        "extract_to_end%0#0",
        "1",
        "tmp%8#0"
      ]
    },
    "1346": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1349": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1350": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1351": {
      "op": "extract_uint16",
      "defined_out": [
        "array#0",
        "extract_uint16%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "extract_uint16%1#0"
      ]
    },
    "1352": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "array#0"
      ]
    },
    "1353": {
      "op": "extract 2 0",
      "defined_out": [
        "extract_to_end%1#0",
        "extract_uint16%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0"
      ]
    },
    "1356": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "0x"
      ]
    },
    "1357": {
      "op": "dig 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "0x",
        "struct2#0 (copy)"
      ]
    },
    "1359": {
      "op": "concat",
      "defined_out": [
        "aggregate%tail%3#1",
        "extract_to_end%1#0",
        "extract_uint16%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "aggregate%tail%3#1"
      ]
    },
    "1360": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "aggregate%tail%3#1",
        "2"
      ]
    },
    "1361": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#1",
        "aggregate%tail%3#1",
        "extract_to_end%1#0",
        "extract_uint16%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "aggregate%tail%3#1",
        "aggregate%as_bytes%4#1"
      ]
    },
    "1362": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%3#1",
        "aggregate%tail%3#1",
        "extract_to_end%1#0",
        "extract_uint16%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "aggregate%tail%3#1",
        "aggregate%offset_as_uint16%3#1"
      ]
    },
    "1365": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "aggregate%tail%3#1",
        "aggregate%offset_as_uint16%3#1",
        "0x"
      ]
    },
    "1366": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "aggregate%tail%3#1",
        "0x",
        "aggregate%offset_as_uint16%3#1"
      ]
    },
    "1367": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%11#1",
        "aggregate%tail%3#1",
        "extract_to_end%1#0",
        "extract_uint16%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%11#1"
      ]
    },
    "1368": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "aggregate%encoded%11#1",
        "aggregate%tail%3#1"
      ]
    },
    "1369": {
      "op": "concat",
      "defined_out": [
        "extract_to_end%1#0",
        "extract_uint16%1#0",
        "struct1#0",
        "struct2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "tmp%9#0"
      ]
    },
    "1370": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_to_end%1#0",
        "tmp%9#0",
        "extract_uint16%1#0"
      ]
    },
    "1372": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "tmp%9#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0"
      ]
    },
    "1374": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "tmp%9#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "1"
      ]
    },
    "1375": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%1#0",
        "extract_to_end%1#0",
        "1",
        "tmp%9#0"
      ]
    },
    "1377": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1380": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1381": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1382": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%array_length%1#1"
      ]
    },
    "1383": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%array_length%1#1",
        "0"
      ]
    },
    "1384": {
      "op": ">",
      "defined_out": [
        "aggregate%lt%0#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%lt%0#1"
      ]
    },
    "1385": {
      "error": "index access is out of bounds",
      "op": "assert // index access is out of bounds",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1386": {
      "op": "dig 2",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct1#0 (copy)",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "struct1#0 (copy)"
      ]
    },
    "1388": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "struct1#0 (copy)",
        "0"
      ]
    },
    "1389": {
      "callsub": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "op": "callsub dynamic_array_replace_dynamic_element",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1392": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1393": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1394": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1395": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%array_head_and_tail%1#1"
      ]
    },
    "1398": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "array#0"
      ]
    },
    "1399": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1400": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1401": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "array#0",
        "aggregate%array_length%2#1"
      ]
    },
    "1402": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0"
      ]
    },
    "1403": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "0"
      ]
    },
    "1404": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "0",
        "2"
      ]
    },
    "1405": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "aggregate%item_offset_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%item_offset_offset%1#1"
      ]
    },
    "1406": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_head_and_tail%1#1 (copy)",
        "aggregate%array_length%2#1",
        "aggregate%item_offset_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%item_offset_offset%1#1",
        "aggregate%array_head_and_tail%1#1 (copy)"
      ]
    },
    "1408": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%array_head_and_tail%1#1 (copy)",
        "aggregate%item_offset_offset%1#1"
      ]
    },
    "1409": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%item_offset%1#1"
      ]
    },
    "1410": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%array_length%2#1",
        "array#0"
      ]
    },
    "1412": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "0"
      ]
    },
    "1413": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "0",
        "1"
      ]
    },
    "1414": {
      "op": "+",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_index%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%next_index%1#1"
      ]
    },
    "1415": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%array_length%2#1"
      ]
    },
    "1417": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_index%1#1",
        "aggregate%next_index%1#1 (copy)",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%array_length%2#1",
        "aggregate%next_index%1#1 (copy)"
      ]
    },
    "1419": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%has_next%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_index%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%has_next%1#1"
      ]
    },
    "1420": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%next_index%1#1"
      ]
    },
    "1422": {
      "op": "dig 4",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%array_head_and_tail%1#1 (copy)"
      ]
    },
    "1424": {
      "op": "len",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%end_of_array%1#1",
        "aggregate%has_next%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_index%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%end_of_array%1#1"
      ]
    },
    "1425": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_index%1#1"
      ]
    },
    "1427": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "2"
      ]
    },
    "1428": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%end_of_array%1#1",
        "aggregate%has_next%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_item_offset_offset%1#1"
      ]
    },
    "1429": {
      "op": "dig 5",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_item_offset_offset%1#1",
        "aggregate%array_head_and_tail%1#1 (copy)"
      ]
    },
    "1431": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%array_head_and_tail%1#1 (copy)",
        "aggregate%next_item_offset_offset%1#1"
      ]
    },
    "1432": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%end_of_array%1#1",
        "aggregate%has_next%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_item_offset%1#1"
      ]
    },
    "1433": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%next_item_offset%1#1",
        "aggregate%end_of_array%1#1"
      ]
    },
    "1435": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%end_of_array%1#1",
        "aggregate%next_item_offset%1#1"
      ]
    },
    "1436": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%end_of_array%1#1",
        "aggregate%next_item_offset%1#1",
        "aggregate%has_next%1#1"
      ]
    },
    "1438": {
      "op": "select",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%end_offset%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%end_offset%1#1"
      ]
    },
    "1439": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%end_offset%1#1",
        "aggregate%array_head_and_tail%1#1"
      ]
    },
    "1441": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%end_offset%1#1",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1"
      ]
    },
    "1443": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%end_offset%1#1"
      ]
    },
    "1445": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "array_item%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_item%0#0"
      ]
    },
    "1446": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1447": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1448": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%array_head_and_tail%2#1"
      ]
    },
    "1451": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "array#0"
      ]
    },
    "1452": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1453": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1454": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "array#0",
        "aggregate%array_length%3#1"
      ]
    },
    "1455": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0"
      ]
    },
    "1456": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "1"
      ]
    },
    "1457": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "1",
        "2"
      ]
    },
    "1458": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "aggregate%item_offset_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%item_offset_offset%2#1"
      ]
    },
    "1459": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_head_and_tail%2#1 (copy)",
        "aggregate%array_length%3#1",
        "aggregate%item_offset_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%item_offset_offset%2#1",
        "aggregate%array_head_and_tail%2#1 (copy)"
      ]
    },
    "1461": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%array_head_and_tail%2#1 (copy)",
        "aggregate%item_offset_offset%2#1"
      ]
    },
    "1462": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%item_offset%2#1"
      ]
    },
    "1463": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%array_length%3#1",
        "array#0"
      ]
    },
    "1465": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "1"
      ]
    },
    "1466": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "1",
        "1"
      ]
    },
    "1467": {
      "op": "+",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_index%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%next_index%2#1"
      ]
    },
    "1468": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%array_length%3#1"
      ]
    },
    "1470": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_index%2#1",
        "aggregate%next_index%2#1 (copy)",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%array_length%3#1",
        "aggregate%next_index%2#1 (copy)"
      ]
    },
    "1472": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%has_next%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_index%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%has_next%2#1"
      ]
    },
    "1473": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%next_index%2#1"
      ]
    },
    "1475": {
      "op": "dig 4",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%array_head_and_tail%2#1 (copy)"
      ]
    },
    "1477": {
      "op": "len",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%end_of_array%2#1",
        "aggregate%has_next%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_index%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%end_of_array%2#1"
      ]
    },
    "1478": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_index%2#1"
      ]
    },
    "1480": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "2"
      ]
    },
    "1481": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%end_of_array%2#1",
        "aggregate%has_next%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_item_offset_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_item_offset_offset%2#1"
      ]
    },
    "1482": {
      "op": "dig 5",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_item_offset_offset%2#1",
        "aggregate%array_head_and_tail%2#1 (copy)"
      ]
    },
    "1484": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%array_head_and_tail%2#1 (copy)",
        "aggregate%next_item_offset_offset%2#1"
      ]
    },
    "1485": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%end_of_array%2#1",
        "aggregate%has_next%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_item_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_item_offset%2#1"
      ]
    },
    "1486": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%next_item_offset%2#1",
        "aggregate%end_of_array%2#1"
      ]
    },
    "1488": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%end_of_array%2#1",
        "aggregate%next_item_offset%2#1"
      ]
    },
    "1489": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%end_of_array%2#1",
        "aggregate%next_item_offset%2#1",
        "aggregate%has_next%2#1"
      ]
    },
    "1491": {
      "op": "select",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%end_offset%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%end_offset%2#1"
      ]
    },
    "1492": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%end_offset%2#1",
        "aggregate%array_head_and_tail%2#1"
      ]
    },
    "1494": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%end_offset%2#1",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1"
      ]
    },
    "1496": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%end_offset%2#1"
      ]
    },
    "1498": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "array_item%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_item%1#0"
      ]
    },
    "1499": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1500": {
      "op": "dup",
      "defined_out": [
        "array#0",
        "array2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array#0"
      ]
    },
    "1501": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "array#0",
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "tmp%10#0",
        "array#0"
      ]
    },
    "1504": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array#0",
        "tmp%10#0"
      ]
    },
    "1505": {
      "op": "dig 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array#0",
        "tmp%10#0",
        "struct2#0 (copy)"
      ]
    },
    "1507": {
      "op": "==",
      "defined_out": [
        "array#0",
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array#0",
        "tmp%12#0"
      ]
    },
    "1508": {
      "op": "assert",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array#0"
      ]
    },
    "1509": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1512": {
      "op": "pop",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "tmp%13#0"
      ]
    },
    "1513": {
      "op": "dig 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "tmp%13#0",
        "struct1#0 (copy)"
      ]
    },
    "1515": {
      "op": "==",
      "defined_out": [
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "tmp%15#0"
      ]
    },
    "1516": {
      "op": "assert",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0"
      ]
    },
    "1517": {
      "op": "dup",
      "defined_out": [
        "array2#0",
        "array2#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array2#0 (copy)"
      ]
    },
    "1518": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array2#0 (copy)",
        "0"
      ]
    },
    "1519": {
      "op": "extract_uint16",
      "defined_out": [
        "array2#0",
        "array_length%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array_length%0#0"
      ]
    },
    "1520": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array_length%0#0",
        "2"
      ]
    },
    "1521": {
      "op": "==",
      "defined_out": [
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "tmp%16#0"
      ]
    },
    "1522": {
      "op": "assert",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0"
      ]
    },
    "1523": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array2#0 (copy)"
      ]
    },
    "1524": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array2#0 (copy)",
        "0"
      ]
    },
    "1525": {
      "op": "extract_uint16",
      "defined_out": [
        "array2#0",
        "extract_uint16%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "extract_uint16%2#0"
      ]
    },
    "1526": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%2#0",
        "array2#0"
      ]
    },
    "1527": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%2#0",
        "array2#0",
        "array2#0 (copy)"
      ]
    },
    "1528": {
      "op": "extract 2 0",
      "defined_out": [
        "array2#0",
        "extract_to_end%2#0",
        "extract_uint16%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%2#0",
        "array2#0",
        "extract_to_end%2#0"
      ]
    },
    "1531": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%2#0",
        "extract_to_end%2#0",
        "array2#0"
      ]
    },
    "1532": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%2#0",
        "extract_to_end%2#0",
        "array2#0",
        "array2#0 (copy)"
      ]
    },
    "1533": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%2#0",
        "extract_to_end%2#0",
        "array2#0",
        "array2#0 (copy)",
        "0"
      ]
    },
    "1534": {
      "op": "extract_uint16",
      "defined_out": [
        "array2#0",
        "array_length%1#0",
        "extract_to_end%2#0",
        "extract_uint16%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%2#0",
        "extract_to_end%2#0",
        "array2#0",
        "array_length%1#0"
      ]
    },
    "1535": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%2#0",
        "extract_to_end%2#0",
        "array_length%1#0",
        "array2#0"
      ]
    },
    "1536": {
      "op": "extract 2 0",
      "defined_out": [
        "array_length%1#0",
        "extract_to_end%2#0",
        "extract_to_end%3#0",
        "extract_uint16%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%2#0",
        "extract_to_end%2#0",
        "array_length%1#0",
        "extract_to_end%3#0"
      ]
    },
    "1539": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_to_end%2#0",
        "array_length%1#0",
        "extract_to_end%3#0",
        "extract_uint16%2#0"
      ]
    },
    "1541": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array_length%1#0",
        "extract_to_end%3#0",
        "extract_uint16%2#0",
        "extract_to_end%2#0"
      ]
    },
    "1543": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_to_end%3#0",
        "extract_uint16%2#0",
        "extract_to_end%2#0",
        "array_length%1#0"
      ]
    },
    "1545": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "extract_uint16%2#0",
        "extract_to_end%2#0",
        "array_length%1#0",
        "extract_to_end%3#0"
      ]
    },
    "1547": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0"
      ]
    },
    "1550": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array2#0 (copy)"
      ]
    },
    "1551": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array2#0 (copy)",
        "0"
      ]
    },
    "1552": {
      "op": "extract_uint16",
      "defined_out": [
        "array2#0",
        "array_length%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array_length%2#0"
      ]
    },
    "1553": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "array2#0",
        "array_length%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array_length%2#0",
        "4"
      ]
    },
    "1554": {
      "op": "==",
      "defined_out": [
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "tmp%17#0"
      ]
    },
    "1555": {
      "op": "assert",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0"
      ]
    },
    "1556": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array2#0 (copy)"
      ]
    },
    "1557": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array2#0 (copy)",
        "0"
      ]
    },
    "1558": {
      "op": "extract_uint16",
      "defined_out": [
        "array2#0",
        "array_length%3#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array_length%3#0"
      ]
    },
    "1559": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array_length%3#0",
        "1"
      ]
    },
    "1560": {
      "op": "-",
      "defined_out": [
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "tmp%18#0"
      ]
    },
    "1561": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "tmp%18#0",
        "array2#0"
      ]
    },
    "1562": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "tmp%18#0",
        "array2#0",
        "array2#0 (copy)"
      ]
    },
    "1563": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "tmp%18#0",
        "array2#0",
        "aggregate%array_head_and_tail%3#1"
      ]
    },
    "1566": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "tmp%18#0",
        "array2#0"
      ]
    },
    "1568": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "tmp%18#0",
        "array2#0",
        "array2#0 (copy)"
      ]
    },
    "1569": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "tmp%18#0",
        "array2#0",
        "array2#0 (copy)",
        "0"
      ]
    },
    "1570": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "tmp%18#0",
        "array2#0",
        "aggregate%array_length%4#1"
      ]
    },
    "1571": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "tmp%18#0",
        "array2#0"
      ]
    },
    "1573": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "tmp%18#0",
        "array2#0",
        "tmp%18#0 (copy)"
      ]
    },
    "1575": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "tmp%18#0",
        "array2#0",
        "tmp%18#0 (copy)",
        "2"
      ]
    },
    "1576": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "aggregate%item_offset_offset%3#1",
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "tmp%18#0",
        "array2#0",
        "aggregate%item_offset_offset%3#1"
      ]
    },
    "1577": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_head_and_tail%3#1 (copy)",
        "aggregate%array_length%4#1",
        "aggregate%item_offset_offset%3#1",
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "tmp%18#0",
        "array2#0",
        "aggregate%item_offset_offset%3#1",
        "aggregate%array_head_and_tail%3#1 (copy)"
      ]
    },
    "1579": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "tmp%18#0",
        "array2#0",
        "aggregate%array_head_and_tail%3#1 (copy)",
        "aggregate%item_offset_offset%3#1"
      ]
    },
    "1580": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "aggregate%item_offset%3#1",
        "array2#0",
        "struct1#0",
        "struct2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "tmp%18#0",
        "array2#0",
        "aggregate%item_offset%3#1"
      ]
    },
    "1581": {
      "op": "cover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%array_length%4#1",
        "tmp%18#0",
        "array2#0"
      ]
    },
    "1583": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%array_length%4#1",
        "array2#0",
        "tmp%18#0"
      ]
    },
    "1584": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%array_length%4#1",
        "array2#0",
        "tmp%18#0",
        "1"
      ]
    },
    "1585": {
      "op": "+",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "aggregate%item_offset%3#1",
        "aggregate%next_index%3#1",
        "array2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%array_length%4#1",
        "array2#0",
        "aggregate%next_index%3#1"
      ]
    },
    "1586": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "array2#0",
        "aggregate%next_index%3#1",
        "aggregate%array_length%4#1"
      ]
    },
    "1588": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%array_length%4#1",
        "aggregate%item_offset%3#1",
        "aggregate%next_index%3#1",
        "aggregate%next_index%3#1 (copy)",
        "array2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "array2#0",
        "aggregate%next_index%3#1",
        "aggregate%array_length%4#1",
        "aggregate%next_index%3#1 (copy)"
      ]
    },
    "1590": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%has_next%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%next_index%3#1",
        "array2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "array2#0",
        "aggregate%next_index%3#1",
        "aggregate%has_next%3#1"
      ]
    },
    "1591": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "array2#0",
        "aggregate%next_index%3#1"
      ]
    },
    "1593": {
      "op": "dig 4",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "array2#0",
        "aggregate%next_index%3#1",
        "aggregate%array_head_and_tail%3#1 (copy)"
      ]
    },
    "1595": {
      "op": "len",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%end_of_array%3#1",
        "aggregate%has_next%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%next_index%3#1",
        "array2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "array2#0",
        "aggregate%next_index%3#1",
        "aggregate%end_of_array%3#1"
      ]
    },
    "1596": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "aggregate%end_of_array%3#1",
        "array2#0",
        "aggregate%next_index%3#1"
      ]
    },
    "1598": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "aggregate%end_of_array%3#1",
        "array2#0",
        "aggregate%next_index%3#1",
        "2"
      ]
    },
    "1599": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%end_of_array%3#1",
        "aggregate%has_next%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%next_item_offset_offset%3#1",
        "array2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "aggregate%end_of_array%3#1",
        "array2#0",
        "aggregate%next_item_offset_offset%3#1"
      ]
    },
    "1600": {
      "op": "dig 5",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "aggregate%end_of_array%3#1",
        "array2#0",
        "aggregate%next_item_offset_offset%3#1",
        "aggregate%array_head_and_tail%3#1 (copy)"
      ]
    },
    "1602": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "aggregate%end_of_array%3#1",
        "array2#0",
        "aggregate%array_head_and_tail%3#1 (copy)",
        "aggregate%next_item_offset_offset%3#1"
      ]
    },
    "1603": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%end_of_array%3#1",
        "aggregate%has_next%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%next_item_offset%3#1",
        "array2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "aggregate%end_of_array%3#1",
        "array2#0",
        "aggregate%next_item_offset%3#1"
      ]
    },
    "1604": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "array2#0",
        "aggregate%next_item_offset%3#1",
        "aggregate%end_of_array%3#1"
      ]
    },
    "1606": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%has_next%3#1",
        "array2#0",
        "aggregate%end_of_array%3#1",
        "aggregate%next_item_offset%3#1"
      ]
    },
    "1607": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "array2#0",
        "aggregate%end_of_array%3#1",
        "aggregate%next_item_offset%3#1",
        "aggregate%has_next%3#1"
      ]
    },
    "1609": {
      "op": "select",
      "defined_out": [
        "aggregate%array_head_and_tail%3#1",
        "aggregate%end_offset%3#1",
        "aggregate%item_offset%3#1",
        "array2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "array2#0",
        "aggregate%end_offset%3#1"
      ]
    },
    "1610": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%item_offset%3#1",
        "array2#0",
        "aggregate%end_offset%3#1",
        "aggregate%array_head_and_tail%3#1"
      ]
    },
    "1612": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "aggregate%end_offset%3#1",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1"
      ]
    },
    "1614": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "aggregate%array_head_and_tail%3#1",
        "aggregate%item_offset%3#1",
        "aggregate%end_offset%3#1"
      ]
    },
    "1616": {
      "op": "substring3",
      "defined_out": [
        "array2#0",
        "array_item%2#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array2#0",
        "array_item%2#0"
      ]
    },
    "1617": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "array2#0",
        "array_item%2#0",
        "struct2#0"
      ]
    },
    "1619": {
      "op": "==",
      "defined_out": [
        "array2#0",
        "struct1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "struct1#0",
        "array2#0",
        "tmp%19#0"
      ]
    },
    "1620": {
      "op": "assert",
      "stack_out": [
        "struct1#0",
        "array2#0"
      ]
    },
    "1621": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "array2#0",
        "array2#0 (copy)"
      ]
    },
    "1622": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "array2#0",
        "array2#0 (copy)",
        "0"
      ]
    },
    "1623": {
      "op": "extract_uint16",
      "defined_out": [
        "array2#0",
        "array_length%4#0",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "array2#0",
        "array_length%4#0"
      ]
    },
    "1624": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "array2#0",
        "array_length%4#0",
        "2"
      ]
    },
    "1625": {
      "op": "-",
      "defined_out": [
        "array2#0",
        "struct1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "struct1#0",
        "array2#0",
        "tmp%20#0"
      ]
    },
    "1626": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%20#0",
        "array2#0"
      ]
    },
    "1627": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "tmp%20#0",
        "array2#0",
        "array2#0 (copy)"
      ]
    },
    "1628": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "array2#0",
        "struct1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%20#0",
        "array2#0",
        "aggregate%array_head_and_tail%4#1"
      ]
    },
    "1631": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%array_head_and_tail%4#1",
        "tmp%20#0",
        "array2#0"
      ]
    },
    "1633": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "aggregate%array_head_and_tail%4#1",
        "tmp%20#0",
        "array2#0",
        "0"
      ]
    },
    "1634": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "aggregate%array_length%5#1",
        "struct1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%array_head_and_tail%4#1",
        "tmp%20#0",
        "aggregate%array_length%5#1"
      ]
    },
    "1635": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%array_length%5#1",
        "aggregate%array_head_and_tail%4#1",
        "tmp%20#0"
      ]
    },
    "1637": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "aggregate%array_length%5#1",
        "struct1#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%array_length%5#1",
        "aggregate%array_head_and_tail%4#1",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "1638": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "aggregate%array_length%5#1",
        "aggregate%array_head_and_tail%4#1",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "2"
      ]
    },
    "1639": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "aggregate%array_length%5#1",
        "aggregate%item_offset_offset%4#1",
        "struct1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%array_length%5#1",
        "aggregate%array_head_and_tail%4#1",
        "tmp%20#0",
        "aggregate%item_offset_offset%4#1"
      ]
    },
    "1640": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "aggregate%array_head_and_tail%4#1 (copy)",
        "aggregate%array_length%5#1",
        "aggregate%item_offset_offset%4#1",
        "struct1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%array_length%5#1",
        "aggregate%array_head_and_tail%4#1",
        "tmp%20#0",
        "aggregate%item_offset_offset%4#1",
        "aggregate%array_head_and_tail%4#1 (copy)"
      ]
    },
    "1642": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "aggregate%array_length%5#1",
        "aggregate%array_head_and_tail%4#1",
        "tmp%20#0",
        "aggregate%array_head_and_tail%4#1 (copy)",
        "aggregate%item_offset_offset%4#1"
      ]
    },
    "1643": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "aggregate%array_length%5#1",
        "aggregate%item_offset%4#1",
        "struct1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%array_length%5#1",
        "aggregate%array_head_and_tail%4#1",
        "tmp%20#0",
        "aggregate%item_offset%4#1"
      ]
    },
    "1644": {
      "op": "cover 3",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%array_length%5#1",
        "aggregate%array_head_and_tail%4#1",
        "tmp%20#0"
      ]
    },
    "1646": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%array_length%5#1",
        "aggregate%array_head_and_tail%4#1",
        "tmp%20#0",
        "1"
      ]
    },
    "1647": {
      "op": "+",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "aggregate%array_length%5#1",
        "aggregate%item_offset%4#1",
        "aggregate%next_index%4#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%array_length%5#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_index%4#1"
      ]
    },
    "1648": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_index%4#1",
        "aggregate%array_length%5#1"
      ]
    },
    "1650": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "aggregate%array_length%5#1",
        "aggregate%item_offset%4#1",
        "aggregate%next_index%4#1",
        "aggregate%next_index%4#1 (copy)",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_index%4#1",
        "aggregate%array_length%5#1",
        "aggregate%next_index%4#1 (copy)"
      ]
    },
    "1652": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "aggregate%has_next%4#1",
        "aggregate%item_offset%4#1",
        "aggregate%next_index%4#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_index%4#1",
        "aggregate%has_next%4#1"
      ]
    },
    "1653": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%has_next%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_index%4#1"
      ]
    },
    "1655": {
      "op": "dig 1",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%has_next%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_index%4#1",
        "aggregate%array_head_and_tail%4#1 (copy)"
      ]
    },
    "1657": {
      "op": "len",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "aggregate%end_of_array%4#1",
        "aggregate%has_next%4#1",
        "aggregate%item_offset%4#1",
        "aggregate%next_index%4#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%has_next%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_index%4#1",
        "aggregate%end_of_array%4#1"
      ]
    },
    "1658": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%has_next%4#1",
        "aggregate%end_of_array%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_index%4#1"
      ]
    },
    "1660": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%has_next%4#1",
        "aggregate%end_of_array%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_index%4#1",
        "2"
      ]
    },
    "1661": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "aggregate%end_of_array%4#1",
        "aggregate%has_next%4#1",
        "aggregate%item_offset%4#1",
        "aggregate%next_item_offset_offset%4#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%has_next%4#1",
        "aggregate%end_of_array%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_item_offset_offset%4#1"
      ]
    },
    "1662": {
      "op": "dig 1",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%has_next%4#1",
        "aggregate%end_of_array%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_item_offset_offset%4#1",
        "aggregate%array_head_and_tail%4#1 (copy)"
      ]
    },
    "1664": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%has_next%4#1",
        "aggregate%end_of_array%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%array_head_and_tail%4#1 (copy)",
        "aggregate%next_item_offset_offset%4#1"
      ]
    },
    "1665": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "aggregate%end_of_array%4#1",
        "aggregate%has_next%4#1",
        "aggregate%item_offset%4#1",
        "aggregate%next_item_offset%4#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%has_next%4#1",
        "aggregate%end_of_array%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_item_offset%4#1"
      ]
    },
    "1666": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%has_next%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%next_item_offset%4#1",
        "aggregate%end_of_array%4#1"
      ]
    },
    "1668": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%has_next%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%end_of_array%4#1",
        "aggregate%next_item_offset%4#1"
      ]
    },
    "1669": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%end_of_array%4#1",
        "aggregate%next_item_offset%4#1",
        "aggregate%has_next%4#1"
      ]
    },
    "1671": {
      "op": "select",
      "defined_out": [
        "aggregate%array_head_and_tail%4#1",
        "aggregate%end_offset%4#1",
        "aggregate%item_offset%4#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%end_offset%4#1"
      ]
    },
    "1672": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "aggregate%item_offset%4#1",
        "aggregate%end_offset%4#1",
        "aggregate%array_head_and_tail%4#1"
      ]
    },
    "1673": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%end_offset%4#1",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%item_offset%4#1"
      ]
    },
    "1675": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%array_head_and_tail%4#1",
        "aggregate%item_offset%4#1",
        "aggregate%end_offset%4#1"
      ]
    },
    "1677": {
      "op": "substring3",
      "defined_out": [
        "array_item%3#0",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "array_item%3#0"
      ]
    },
    "1678": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1679": {
      "op": "assert",
      "stack_out": []
    },
    "1680": {
      "retsub": true,
      "op": "retsub"
    },
    "1681": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements",
      "params": {},
      "block": "test_mixed_multiple_dynamic_elements_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1684": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1687": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1688": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1691": {
      "op": "cover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1693": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr1",
      "op": "callsub get_u16_arr1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1696": {
      "op": "cover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1698": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1701": {
      "op": "cover 4",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1703": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "0x"
      ]
    },
    "1704": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "1705": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%encoded%0#1"
      ]
    },
    "1706": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%encoded%0#1",
        "tmp%1#0"
      ]
    },
    "1707": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%encoded%0#1",
        "tmp%1#0",
        "0x"
      ]
    },
    "1708": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "aggregate%encoded%0#1",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%encoded%0#1",
        "tmp%1#0",
        "0x",
        "tmp%1#0 (copy)"
      ]
    },
    "1710": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "aggregate%tail%0#1",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%encoded%0#1",
        "tmp%1#0",
        "aggregate%tail%0#1"
      ]
    },
    "1711": {
      "op": "cover 2",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%0#1",
        "tmp%1#0"
      ]
    },
    "1713": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#1",
        "aggregate%encoded%0#1",
        "aggregate%tail%0#1",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%0#1",
        "aggregate%data_length%0#1"
      ]
    },
    "1714": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "aggregate%data_length%0#1",
        "aggregate%encoded%0#1",
        "aggregate%tail%0#1",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%0#1",
        "aggregate%data_length%0#1",
        "28"
      ]
    },
    "1716": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "aggregate%tail%0#1",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%encoded%0#1",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "1717": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1"
      ]
    },
    "1718": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "28"
      ]
    },
    "1720": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "aggregate%tail%0#1",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "aggregate%as_bytes%0#1"
      ]
    },
    "1721": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "aggregate%offset_as_uint16%0#1",
        "aggregate%tail%0#1",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "1724": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%1#1",
        "aggregate%tail%0#1",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%1#1"
      ]
    },
    "1725": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%1#1",
        "tmp%2#0"
      ]
    },
    "1727": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%2#1",
        "aggregate%tail%0#1",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%2#1"
      ]
    },
    "1728": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%2#1",
        "aggregate%tail%0#1"
      ]
    },
    "1730": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%2#1",
        "aggregate%tail%0#1",
        "tmp%3#0"
      ]
    },
    "1732": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%2#1",
        "aggregate%tail%1#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%2#1",
        "aggregate%tail%1#1"
      ]
    },
    "1733": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%1#1",
        "aggregate%encoded%2#1"
      ]
    },
    "1734": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%2#1",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "1736": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#1",
        "aggregate%encoded%2#1",
        "aggregate%tail%1#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%2#1",
        "aggregate%as_bytes%1#1"
      ]
    },
    "1737": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%2#1",
        "aggregate%offset_as_uint16%1#1",
        "aggregate%tail%1#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%2#1",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "1740": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%3#1",
        "aggregate%tail%1#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%3#1"
      ]
    },
    "1741": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%tail%1#1",
        "aggregate%encoded%3#1",
        "tmp%4#0"
      ]
    },
    "1743": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%4#1",
        "aggregate%tail%1#1"
      ],
      "stack_out": [
        "aggregate%tail%1#1",
        "aggregate%encoded%4#1"
      ]
    },
    "1744": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%4#1",
        "aggregate%tail%1#1"
      ]
    },
    "1745": {
      "op": "concat",
      "defined_out": [
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0"
      ]
    },
    "1746": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "struct1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%6#0"
      ]
    },
    "1749": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "struct1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1752": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%7#0",
        "tmp%6#0"
      ]
    },
    "1753": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "struct1#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "1756": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0"
      ]
    },
    "1758": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr2",
      "op": "callsub get_u16_arr2",
      "defined_out": [
        "struct1#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "1761": {
      "op": "cover 3",
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0"
      ]
    },
    "1763": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%10#0"
      ]
    },
    "1766": {
      "op": "cover 4",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0"
      ]
    },
    "1768": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "0x"
      ]
    },
    "1769": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "0x",
        "tmp%6#0"
      ]
    },
    "1770": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%6#1",
        "struct1#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%encoded%6#1"
      ]
    },
    "1771": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%encoded%6#1",
        "tmp%7#0"
      ]
    },
    "1772": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%encoded%6#1",
        "tmp%7#0",
        "0x"
      ]
    },
    "1773": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "aggregate%encoded%6#1",
        "struct1#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%encoded%6#1",
        "tmp%7#0",
        "0x",
        "tmp%7#0 (copy)"
      ]
    },
    "1775": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%6#1",
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%encoded%6#1",
        "tmp%7#0",
        "aggregate%tail%2#1"
      ]
    },
    "1776": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%6#1",
        "tmp%7#0"
      ]
    },
    "1778": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%2#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%6#1",
        "aggregate%data_length%2#1"
      ]
    },
    "1779": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%6#1",
        "aggregate%data_length%2#1",
        "28"
      ]
    },
    "1781": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%6#1",
        "aggregate%current_tail_offset%2#1"
      ]
    },
    "1782": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%6#1"
      ]
    },
    "1783": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%6#1",
        "28"
      ]
    },
    "1785": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%6#1",
        "aggregate%as_bytes%2#1"
      ]
    },
    "1786": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%6#1",
        "aggregate%offset_as_uint16%2#1",
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%6#1",
        "aggregate%offset_as_uint16%2#1"
      ]
    },
    "1789": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%7#1",
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%7#1"
      ]
    },
    "1790": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%7#1",
        "tmp%8#0"
      ]
    },
    "1792": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%8#1",
        "aggregate%tail%2#1",
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%8#1"
      ]
    },
    "1793": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "tmp%9#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%8#1",
        "aggregate%tail%2#1"
      ]
    },
    "1795": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%8#1",
        "aggregate%tail%2#1",
        "tmp%9#0"
      ]
    },
    "1797": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%8#1",
        "aggregate%tail%3#1",
        "struct1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%8#1",
        "aggregate%tail%3#1"
      ]
    },
    "1798": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%tail%3#1",
        "aggregate%encoded%8#1"
      ]
    },
    "1799": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%8#1",
        "aggregate%current_tail_offset%2#1"
      ]
    },
    "1801": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#1",
        "aggregate%encoded%8#1",
        "aggregate%tail%3#1",
        "struct1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%8#1",
        "aggregate%as_bytes%3#1"
      ]
    },
    "1802": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%8#1",
        "aggregate%offset_as_uint16%3#1",
        "aggregate%tail%3#1",
        "struct1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%8#1",
        "aggregate%offset_as_uint16%3#1"
      ]
    },
    "1805": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%9#1",
        "aggregate%tail%3#1",
        "struct1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%10#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%9#1"
      ]
    },
    "1806": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%9#1",
        "tmp%10#0"
      ]
    },
    "1808": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%10#1",
        "aggregate%tail%3#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%10#1"
      ]
    },
    "1809": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "aggregate%encoded%10#1",
        "aggregate%tail%3#1"
      ]
    },
    "1810": {
      "op": "concat",
      "defined_out": [
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0"
      ]
    },
    "1811": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "2"
      ]
    },
    "1812": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%as_bytes%4#1"
      ]
    },
    "1813": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%len_u16%0#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%len_u16%0#1"
      ]
    },
    "1816": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%len_u16%0#1",
        "0x"
      ]
    },
    "1817": {
      "op": "dig 3",
      "defined_out": [
        "0x",
        "aggregate%len_u16%0#1",
        "struct1#0",
        "struct1#0 (copy)",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%len_u16%0#1",
        "0x",
        "struct1#0 (copy)"
      ]
    },
    "1819": {
      "op": "concat",
      "defined_out": [
        "aggregate%len_u16%0#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%len_u16%0#1",
        "aggregate%tail%4#1"
      ]
    },
    "1820": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%tail%4#1",
        "struct2#0",
        "aggregate%len_u16%0#1"
      ]
    },
    "1822": {
      "op": "dig 3",
      "stack_out": [
        "struct1#0",
        "aggregate%tail%4#1",
        "struct2#0",
        "aggregate%len_u16%0#1",
        "struct1#0 (copy)"
      ]
    },
    "1824": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%4#1",
        "aggregate%len_u16%0#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%tail%4#1",
        "struct2#0",
        "aggregate%len_u16%0#1",
        "aggregate%data_length%4#1"
      ]
    },
    "1825": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "aggregate%data_length%4#1",
        "aggregate%len_u16%0#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%tail%4#1",
        "struct2#0",
        "aggregate%len_u16%0#1",
        "aggregate%data_length%4#1",
        "4"
      ]
    },
    "1826": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%len_u16%0#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%tail%4#1",
        "struct2#0",
        "aggregate%len_u16%0#1",
        "aggregate%current_tail_offset%4#1"
      ]
    },
    "1827": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct1#0",
        "aggregate%tail%4#1",
        "struct2#0",
        "aggregate%len_u16%0#1",
        "aggregate%current_tail_offset%4#1",
        "4"
      ]
    },
    "1828": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#1",
        "aggregate%current_tail_offset%4#1",
        "aggregate%len_u16%0#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%tail%4#1",
        "struct2#0",
        "aggregate%len_u16%0#1",
        "aggregate%current_tail_offset%4#1",
        "aggregate%as_bytes%5#1"
      ]
    },
    "1829": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%len_u16%0#1",
        "aggregate%offset_as_uint16%4#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%tail%4#1",
        "struct2#0",
        "aggregate%len_u16%0#1",
        "aggregate%current_tail_offset%4#1",
        "aggregate%offset_as_uint16%4#1"
      ]
    },
    "1832": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%tail%4#1",
        "struct2#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%offset_as_uint16%4#1",
        "aggregate%len_u16%0#1"
      ]
    },
    "1834": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "aggregate%tail%4#1",
        "struct2#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%len_u16%0#1",
        "aggregate%offset_as_uint16%4#1"
      ]
    },
    "1835": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%12#1",
        "aggregate%tail%4#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%tail%4#1",
        "struct2#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%12#1"
      ]
    },
    "1836": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%12#1",
        "aggregate%tail%4#1"
      ]
    },
    "1838": {
      "op": "dig 4",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%12#1",
        "aggregate%tail%4#1",
        "struct1#0 (copy)"
      ]
    },
    "1840": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%12#1",
        "aggregate%tail%5#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%12#1",
        "aggregate%tail%5#1"
      ]
    },
    "1841": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%tail%5#1",
        "aggregate%encoded%12#1"
      ]
    },
    "1842": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%12#1",
        "aggregate%current_tail_offset%4#1"
      ]
    },
    "1844": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#1",
        "aggregate%encoded%12#1",
        "aggregate%tail%5#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%12#1",
        "aggregate%as_bytes%6#1"
      ]
    },
    "1845": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%12#1",
        "aggregate%offset_as_uint16%5#1",
        "aggregate%tail%5#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%12#1",
        "aggregate%offset_as_uint16%5#1"
      ]
    },
    "1848": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%13#1",
        "aggregate%tail%5#1",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%13#1"
      ]
    },
    "1849": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%encoded%13#1",
        "aggregate%tail%5#1"
      ]
    },
    "1850": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1851": {
      "op": "dup",
      "defined_out": [
        "array#0",
        "array#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1852": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0",
        "array#0 (copy)",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1853": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%array_length%1#1"
      ]
    },
    "1854": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "aggregate%array_length%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%array_length%1#1",
        "1"
      ]
    },
    "1855": {
      "op": ">",
      "defined_out": [
        "aggregate%lt%0#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%lt%0#1"
      ]
    },
    "1856": {
      "error": "index access is out of bounds",
      "op": "assert // index access is out of bounds",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1857": {
      "op": "dig 1",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "struct2#0 (copy)"
      ]
    },
    "1859": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "struct2#0 (copy)",
        "1"
      ]
    },
    "1860": {
      "callsub": "_puya_lib.arc4.dynamic_array_replace_dynamic_element",
      "op": "callsub dynamic_array_replace_dynamic_element",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1863": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1864": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1865": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1866": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%array_head_and_tail%1#1"
      ]
    },
    "1869": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "array#0"
      ]
    },
    "1870": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1871": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1872": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "array#0",
        "aggregate%array_length%2#1"
      ]
    },
    "1873": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0"
      ]
    },
    "1874": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "0"
      ]
    },
    "1875": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "0",
        "2"
      ]
    },
    "1876": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "aggregate%item_offset_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%item_offset_offset%1#1"
      ]
    },
    "1877": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_head_and_tail%1#1 (copy)",
        "aggregate%array_length%2#1",
        "aggregate%item_offset_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%item_offset_offset%1#1",
        "aggregate%array_head_and_tail%1#1 (copy)"
      ]
    },
    "1879": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%array_head_and_tail%1#1 (copy)",
        "aggregate%item_offset_offset%1#1"
      ]
    },
    "1880": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%item_offset%1#1"
      ]
    },
    "1881": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%array_length%2#1",
        "array#0"
      ]
    },
    "1883": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "0"
      ]
    },
    "1884": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "0",
        "1"
      ]
    },
    "1885": {
      "op": "+",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_index%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%array_length%2#1",
        "array#0",
        "aggregate%next_index%1#1"
      ]
    },
    "1886": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%array_length%2#1"
      ]
    },
    "1888": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%array_length%2#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_index%1#1",
        "aggregate%next_index%1#1 (copy)",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%array_length%2#1",
        "aggregate%next_index%1#1 (copy)"
      ]
    },
    "1890": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%has_next%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_index%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%has_next%1#1"
      ]
    },
    "1891": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%next_index%1#1"
      ]
    },
    "1893": {
      "op": "dig 4",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%array_head_and_tail%1#1 (copy)"
      ]
    },
    "1895": {
      "op": "len",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%end_of_array%1#1",
        "aggregate%has_next%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_index%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "aggregate%end_of_array%1#1"
      ]
    },
    "1896": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_index%1#1"
      ]
    },
    "1898": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_index%1#1",
        "2"
      ]
    },
    "1899": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%end_of_array%1#1",
        "aggregate%has_next%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_item_offset_offset%1#1"
      ]
    },
    "1900": {
      "op": "dig 5",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_item_offset_offset%1#1",
        "aggregate%array_head_and_tail%1#1 (copy)"
      ]
    },
    "1902": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%array_head_and_tail%1#1 (copy)",
        "aggregate%next_item_offset_offset%1#1"
      ]
    },
    "1903": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%end_of_array%1#1",
        "aggregate%has_next%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "aggregate%end_of_array%1#1",
        "array#0",
        "aggregate%next_item_offset%1#1"
      ]
    },
    "1904": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%next_item_offset%1#1",
        "aggregate%end_of_array%1#1"
      ]
    },
    "1906": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%has_next%1#1",
        "array#0",
        "aggregate%end_of_array%1#1",
        "aggregate%next_item_offset%1#1"
      ]
    },
    "1907": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%end_of_array%1#1",
        "aggregate%next_item_offset%1#1",
        "aggregate%has_next%1#1"
      ]
    },
    "1909": {
      "op": "select",
      "defined_out": [
        "aggregate%array_head_and_tail%1#1",
        "aggregate%end_offset%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%end_offset%1#1"
      ]
    },
    "1910": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%item_offset%1#1",
        "array#0",
        "aggregate%end_offset%1#1",
        "aggregate%array_head_and_tail%1#1"
      ]
    },
    "1912": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%end_offset%1#1",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1"
      ]
    },
    "1914": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%array_head_and_tail%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%end_offset%1#1"
      ]
    },
    "1916": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "array_item%0#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_item%0#0"
      ]
    },
    "1917": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1918": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1919": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%array_head_and_tail%2#1"
      ]
    },
    "1922": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "array#0"
      ]
    },
    "1923": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "array#0",
        "array#0 (copy)"
      ]
    },
    "1924": {
      "op": "intc_0 // 0",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "array#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "1925": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "array#0",
        "aggregate%array_length%3#1"
      ]
    },
    "1926": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0"
      ]
    },
    "1927": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "1"
      ]
    },
    "1928": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "1",
        "2"
      ]
    },
    "1929": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "aggregate%item_offset_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%item_offset_offset%2#1"
      ]
    },
    "1930": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_head_and_tail%2#1 (copy)",
        "aggregate%array_length%3#1",
        "aggregate%item_offset_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%item_offset_offset%2#1",
        "aggregate%array_head_and_tail%2#1 (copy)"
      ]
    },
    "1932": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%array_head_and_tail%2#1 (copy)",
        "aggregate%item_offset_offset%2#1"
      ]
    },
    "1933": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%item_offset%2#1"
      ]
    },
    "1934": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%array_length%3#1",
        "array#0"
      ]
    },
    "1936": {
      "op": "intc_2 // 1",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "1"
      ]
    },
    "1937": {
      "op": "dup",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "1",
        "1"
      ]
    },
    "1938": {
      "op": "+",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_index%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%array_length%3#1",
        "array#0",
        "aggregate%next_index%2#1"
      ]
    },
    "1939": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%array_length%3#1"
      ]
    },
    "1941": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%array_length%3#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_index%2#1",
        "aggregate%next_index%2#1 (copy)",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%array_length%3#1",
        "aggregate%next_index%2#1 (copy)"
      ]
    },
    "1943": {
      "error": "index access is out of bounds",
      "op": "- // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%has_next%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_index%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%has_next%2#1"
      ]
    },
    "1944": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%next_index%2#1"
      ]
    },
    "1946": {
      "op": "dig 4",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%array_head_and_tail%2#1 (copy)"
      ]
    },
    "1948": {
      "op": "len",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%end_of_array%2#1",
        "aggregate%has_next%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_index%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "aggregate%end_of_array%2#1"
      ]
    },
    "1949": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_index%2#1"
      ]
    },
    "1951": {
      "op": "intc_1 // 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_index%2#1",
        "2"
      ]
    },
    "1952": {
      "op": "*",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%end_of_array%2#1",
        "aggregate%has_next%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_item_offset_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_item_offset_offset%2#1"
      ]
    },
    "1953": {
      "op": "dig 5",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_item_offset_offset%2#1",
        "aggregate%array_head_and_tail%2#1 (copy)"
      ]
    },
    "1955": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%array_head_and_tail%2#1 (copy)",
        "aggregate%next_item_offset_offset%2#1"
      ]
    },
    "1956": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%end_of_array%2#1",
        "aggregate%has_next%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%next_item_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "aggregate%end_of_array%2#1",
        "array#0",
        "aggregate%next_item_offset%2#1"
      ]
    },
    "1957": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%next_item_offset%2#1",
        "aggregate%end_of_array%2#1"
      ]
    },
    "1959": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%has_next%2#1",
        "array#0",
        "aggregate%end_of_array%2#1",
        "aggregate%next_item_offset%2#1"
      ]
    },
    "1960": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%end_of_array%2#1",
        "aggregate%next_item_offset%2#1",
        "aggregate%has_next%2#1"
      ]
    },
    "1962": {
      "op": "select",
      "defined_out": [
        "aggregate%array_head_and_tail%2#1",
        "aggregate%end_offset%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%end_offset%2#1"
      ]
    },
    "1963": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "aggregate%item_offset%2#1",
        "array#0",
        "aggregate%end_offset%2#1",
        "aggregate%array_head_and_tail%2#1"
      ]
    },
    "1965": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%end_offset%2#1",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1"
      ]
    },
    "1967": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "aggregate%array_head_and_tail%2#1",
        "aggregate%item_offset%2#1",
        "aggregate%end_offset%2#1"
      ]
    },
    "1969": {
      "op": "substring3",
      "defined_out": [
        "array#0",
        "array_item%1#0",
        "struct1#0",
        "struct2#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "array_item%1#0"
      ]
    },
    "1970": {
      "op": "log",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0"
      ]
    },
    "1971": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "array#0",
        "struct1#0",
        "struct2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "tmp%12#0",
        "array#0"
      ]
    },
    "1974": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "struct2#0",
        "array#0",
        "tmp%12#0"
      ]
    },
    "1975": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "array#0",
        "tmp%12#0",
        "struct2#0"
      ]
    },
    "1977": {
      "op": "==",
      "defined_out": [
        "array#0",
        "struct1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "struct1#0",
        "array#0",
        "tmp%14#0"
      ]
    },
    "1978": {
      "op": "assert",
      "stack_out": [
        "struct1#0",
        "array#0"
      ]
    },
    "1979": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "struct1#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "struct1#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1982": {
      "op": "pop",
      "stack_out": [
        "struct1#0",
        "tmp%15#0"
      ]
    },
    "1983": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1984": {
      "op": "assert",
      "stack_out": []
    },
    "1985": {
      "retsub": true,
      "op": "retsub"
    },
    "1986": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_struct_replacement",
      "params": {},
      "block": "test_nested_struct_replacement_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1989": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte1",
      "op": "callsub get_byte1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1992": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte2",
      "op": "callsub get_byte2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1995": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "1996": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x"
      ]
    },
    "1997": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "0x",
        "tmp%1#0"
      ]
    },
    "1998": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%encoded%0#1"
      ]
    },
    "1999": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded%0#1",
        "tmp%2#0"
      ]
    },
    "2000": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded%1#1"
      ]
    },
    "2001": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded%1#1",
        "0x"
      ]
    },
    "2002": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_array%0#0"
      ]
    },
    "2003": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "encoded_array%0#0",
        "0x"
      ]
    },
    "2004": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_array%0#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "2006": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%3#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%3#1"
      ]
    },
    "2007": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%3#1",
        "encoded_array%0#0"
      ]
    },
    "2008": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%4#1"
      ],
      "stack_out": [
        "aggregate%encoded%4#1"
      ]
    },
    "2009": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%4#1",
        "0x"
      ]
    },
    "2010": {
      "op": "concat",
      "defined_out": [
        "one#0"
      ],
      "stack_out": [
        "one#0"
      ]
    },
    "2011": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "one#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0"
      ]
    },
    "2014": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "one#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2017": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "2018": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "tmp%4#0",
        "0x"
      ]
    },
    "2019": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "one#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "tmp%4#0",
        "0x",
        "tmp%4#0 (copy)"
      ]
    },
    "2021": {
      "op": "concat",
      "defined_out": [
        "aggregate%tail%0#1",
        "one#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%tail%0#1"
      ]
    },
    "2022": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "tmp%4#0"
      ]
    },
    "2023": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#1",
        "aggregate%tail%0#1",
        "one#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%data_length%0#1"
      ]
    },
    "2024": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "aggregate%data_length%0#1",
        "aggregate%tail%0#1",
        "one#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%data_length%0#1",
        "4"
      ]
    },
    "2025": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "one#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "2026": {
      "op": "intc_3 // 4",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "4"
      ]
    },
    "2027": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "one#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%as_bytes%0#1"
      ]
    },
    "2028": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%offset_as_uint16%0#1",
        "aggregate%tail%0#1",
        "one#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "2031": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%offset_as_uint16%0#1",
        "0x"
      ]
    },
    "2032": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "0x",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "2033": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%0#1",
        "one#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%6#1"
      ]
    },
    "2034": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%0#1"
      ]
    },
    "2036": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%0#1",
        "tmp%5#0"
      ]
    },
    "2038": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%1#1",
        "one#0"
      ],
      "stack_out": [
        "one#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%1#1"
      ]
    },
    "2039": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%1#1",
        "aggregate%encoded%6#1"
      ]
    },
    "2040": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%6#1",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "2042": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%1#1",
        "one#0"
      ],
      "stack_out": [
        "one#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%6#1",
        "aggregate%as_bytes%1#1"
      ]
    },
    "2043": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%6#1",
        "aggregate%offset_as_uint16%1#1",
        "aggregate%tail%1#1",
        "one#0"
      ],
      "stack_out": [
        "one#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%6#1",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "2046": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%7#1",
        "aggregate%tail%1#1",
        "one#0"
      ],
      "stack_out": [
        "one#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%7#1"
      ]
    },
    "2047": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "aggregate%encoded%7#1",
        "aggregate%tail%1#1"
      ]
    },
    "2048": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0"
      ]
    },
    "2049": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "one#0",
        "tmp%7#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0"
      ]
    },
    "2052": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte2",
      "op": "callsub get_byte2",
      "defined_out": [
        "one#0",
        "tmp%7#0",
        "tmp%8#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2055": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte1",
      "op": "callsub get_byte1",
      "defined_out": [
        "one#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "2058": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "2059": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%8#0",
        "0x"
      ]
    },
    "2060": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "tmp%9#0",
        "0x",
        "tmp%8#0"
      ]
    },
    "2061": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%9#1",
        "one#0",
        "tmp%7#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%encoded%9#1"
      ]
    },
    "2062": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "aggregate%encoded%9#1",
        "tmp%9#0"
      ]
    },
    "2063": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%10#1",
        "one#0",
        "tmp%7#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "aggregate%encoded%10#1"
      ]
    },
    "2064": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "aggregate%encoded%10#1",
        "0x"
      ]
    },
    "2065": {
      "op": "concat",
      "defined_out": [
        "encoded_array%1#0",
        "one#0",
        "tmp%7#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "encoded_array%1#0"
      ]
    },
    "2066": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "encoded_array%1#0",
        "0x"
      ]
    },
    "2067": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "encoded_array%1#0",
        "0x",
        "tmp%7#0"
      ]
    },
    "2069": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%12#1",
        "encoded_array%1#0",
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "encoded_array%1#0",
        "aggregate%encoded%12#1"
      ]
    },
    "2070": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "aggregate%encoded%12#1",
        "encoded_array%1#0"
      ]
    },
    "2071": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%13#1",
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "aggregate%encoded%13#1"
      ]
    },
    "2072": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "aggregate%encoded%13#1",
        "0x"
      ]
    },
    "2073": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0"
      ]
    },
    "2074": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%11#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%11#0"
      ]
    },
    "2077": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "2080": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0"
      ]
    },
    "2081": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2084": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0"
      ]
    },
    "2086": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr1",
      "op": "callsub get_u16_arr1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%14#0"
      ]
    },
    "2089": {
      "op": "cover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0"
      ]
    },
    "2091": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%15#0"
      ]
    },
    "2094": {
      "op": "cover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0"
      ]
    },
    "2096": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "0x"
      ]
    },
    "2097": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "0x",
        "tmp%11#0"
      ]
    },
    "2098": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%15#1",
        "one#0",
        "three#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "aggregate%encoded%15#1"
      ]
    },
    "2099": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%encoded%15#1",
        "tmp%12#0"
      ]
    },
    "2100": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%encoded%15#1",
        "tmp%12#0",
        "0x"
      ]
    },
    "2101": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "aggregate%encoded%15#1",
        "one#0",
        "three#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%encoded%15#1",
        "tmp%12#0",
        "0x",
        "tmp%12#0 (copy)"
      ]
    },
    "2103": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%15#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%encoded%15#1",
        "tmp%12#0",
        "aggregate%tail%2#1"
      ]
    },
    "2104": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%15#1",
        "tmp%12#0"
      ]
    },
    "2106": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%2#1",
        "aggregate%encoded%15#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%15#1",
        "aggregate%data_length%2#1"
      ]
    },
    "2107": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "aggregate%data_length%2#1",
        "aggregate%encoded%15#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%15#1",
        "aggregate%data_length%2#1",
        "28"
      ]
    },
    "2109": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%15#1",
        "aggregate%current_tail_offset%2#1"
      ]
    },
    "2110": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1"
      ]
    },
    "2111": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1",
        "28"
      ]
    },
    "2113": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1",
        "aggregate%as_bytes%2#1"
      ]
    },
    "2114": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1",
        "aggregate%offset_as_uint16%2#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1",
        "aggregate%offset_as_uint16%2#1"
      ]
    },
    "2117": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%16#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%16#1"
      ]
    },
    "2118": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%16#1",
        "tmp%13#0"
      ]
    },
    "2120": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%17#1"
      ]
    },
    "2121": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%2#1"
      ]
    },
    "2123": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%2#1",
        "tmp%14#0"
      ]
    },
    "2125": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%3#1",
        "one#0",
        "three#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%3#1"
      ]
    },
    "2126": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%tail%3#1",
        "aggregate%encoded%17#1"
      ]
    },
    "2127": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%2#1"
      ]
    },
    "2129": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%3#1",
        "one#0",
        "three#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%17#1",
        "aggregate%as_bytes%3#1"
      ]
    },
    "2130": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%17#1",
        "aggregate%offset_as_uint16%3#1",
        "aggregate%tail%3#1",
        "one#0",
        "three#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%17#1",
        "aggregate%offset_as_uint16%3#1"
      ]
    },
    "2133": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%18#1",
        "aggregate%tail%3#1",
        "one#0",
        "three#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%18#1"
      ]
    },
    "2134": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%18#1",
        "tmp%15#0"
      ]
    },
    "2136": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%19#1",
        "aggregate%tail%3#1",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%19#1"
      ]
    },
    "2137": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "aggregate%encoded%19#1",
        "aggregate%tail%3#1"
      ]
    },
    "2138": {
      "op": "concat",
      "defined_out": [
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0"
      ]
    },
    "2139": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "four#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%17#0"
      ]
    },
    "2142": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "four#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "2145": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "tmp%17#0"
      ]
    },
    "2146": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "tmp%17#0",
        "0x"
      ]
    },
    "2147": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "four#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "tmp%17#0",
        "0x",
        "tmp%17#0 (copy)"
      ]
    },
    "2149": {
      "op": "concat",
      "defined_out": [
        "aggregate%tail%4#1",
        "four#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "tmp%17#0",
        "aggregate%tail%4#1"
      ]
    },
    "2150": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "aggregate%tail%4#1",
        "tmp%17#0"
      ]
    },
    "2151": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%4#1",
        "aggregate%tail%4#1",
        "four#0",
        "one#0",
        "three#0",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "aggregate%tail%4#1",
        "aggregate%data_length%4#1"
      ]
    },
    "2152": {
      "op": "intc_3 // 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "aggregate%tail%4#1",
        "aggregate%data_length%4#1",
        "4"
      ]
    },
    "2153": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%tail%4#1",
        "four#0",
        "one#0",
        "three#0",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "aggregate%tail%4#1",
        "aggregate%current_tail_offset%4#1"
      ]
    },
    "2154": {
      "op": "intc_3 // 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "aggregate%tail%4#1",
        "aggregate%current_tail_offset%4#1",
        "4"
      ]
    },
    "2155": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#1",
        "aggregate%current_tail_offset%4#1",
        "aggregate%tail%4#1",
        "four#0",
        "one#0",
        "three#0",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "aggregate%tail%4#1",
        "aggregate%current_tail_offset%4#1",
        "aggregate%as_bytes%4#1"
      ]
    },
    "2156": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%offset_as_uint16%4#1",
        "aggregate%tail%4#1",
        "four#0",
        "one#0",
        "three#0",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "aggregate%tail%4#1",
        "aggregate%current_tail_offset%4#1",
        "aggregate%offset_as_uint16%4#1"
      ]
    },
    "2159": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "aggregate%tail%4#1",
        "aggregate%current_tail_offset%4#1",
        "aggregate%offset_as_uint16%4#1",
        "0x"
      ]
    },
    "2160": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "aggregate%tail%4#1",
        "aggregate%current_tail_offset%4#1",
        "0x",
        "aggregate%offset_as_uint16%4#1"
      ]
    },
    "2161": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%21#1",
        "aggregate%tail%4#1",
        "four#0",
        "one#0",
        "three#0",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "aggregate%tail%4#1",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%21#1"
      ]
    },
    "2162": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "tmp%18#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%21#1",
        "aggregate%tail%4#1"
      ]
    },
    "2164": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%21#1",
        "aggregate%tail%4#1",
        "tmp%18#0"
      ]
    },
    "2166": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%21#1",
        "aggregate%tail%5#1",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%21#1",
        "aggregate%tail%5#1"
      ]
    },
    "2167": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%tail%5#1",
        "aggregate%encoded%21#1"
      ]
    },
    "2168": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%21#1",
        "aggregate%current_tail_offset%4#1"
      ]
    },
    "2170": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#1",
        "aggregate%encoded%21#1",
        "aggregate%tail%5#1",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%21#1",
        "aggregate%as_bytes%5#1"
      ]
    },
    "2171": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%21#1",
        "aggregate%offset_as_uint16%5#1",
        "aggregate%tail%5#1",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%21#1",
        "aggregate%offset_as_uint16%5#1"
      ]
    },
    "2174": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%22#1",
        "aggregate%tail%5#1",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%22#1"
      ]
    },
    "2175": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%encoded%22#1",
        "aggregate%tail%5#1"
      ]
    },
    "2176": {
      "op": "concat",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0"
      ]
    },
    "2177": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "0x"
      ]
    },
    "2178": {
      "op": "dig 5",
      "defined_out": [
        "0x",
        "five#0",
        "four#0",
        "one#0",
        "one#0 (copy)",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "0x",
        "one#0 (copy)"
      ]
    },
    "2180": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%24#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%encoded%24#1"
      ]
    },
    "2181": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%encoded%24#1",
        "0x"
      ]
    },
    "2182": {
      "op": "dig 5",
      "defined_out": [
        "0x",
        "aggregate%encoded%24#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0",
        "two#0 (copy)"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%encoded%24#1",
        "0x",
        "two#0 (copy)"
      ]
    },
    "2184": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%24#1",
        "aggregate%tail%6#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%encoded%24#1",
        "aggregate%tail%6#1"
      ]
    },
    "2185": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%6#1",
        "five#0",
        "aggregate%encoded%24#1"
      ]
    },
    "2187": {
      "op": "dig 5",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%6#1",
        "five#0",
        "aggregate%encoded%24#1",
        "two#0 (copy)"
      ]
    },
    "2189": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%6#1",
        "aggregate%encoded%24#1",
        "aggregate%tail%6#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%6#1",
        "five#0",
        "aggregate%encoded%24#1",
        "aggregate%data_length%6#1"
      ]
    },
    "2190": {
      "op": "pushint 26 // 26",
      "defined_out": [
        "26",
        "aggregate%data_length%6#1",
        "aggregate%encoded%24#1",
        "aggregate%tail%6#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%6#1",
        "five#0",
        "aggregate%encoded%24#1",
        "aggregate%data_length%6#1",
        "26"
      ]
    },
    "2192": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%24#1",
        "aggregate%tail%6#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%6#1",
        "five#0",
        "aggregate%encoded%24#1",
        "aggregate%current_tail_offset%6#1"
      ]
    },
    "2193": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "five#0",
        "aggregate%encoded%24#1"
      ]
    },
    "2195": {
      "op": "pushint 26 // 26",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "five#0",
        "aggregate%encoded%24#1",
        "26"
      ]
    },
    "2197": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#1",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%24#1",
        "aggregate%tail%6#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "five#0",
        "aggregate%encoded%24#1",
        "aggregate%as_bytes%6#1"
      ]
    },
    "2198": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%24#1",
        "aggregate%offset_as_uint16%6#1",
        "aggregate%tail%6#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "five#0",
        "aggregate%encoded%24#1",
        "aggregate%offset_as_uint16%6#1"
      ]
    },
    "2201": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%25#1",
        "aggregate%tail%6#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "five#0",
        "aggregate%encoded%25#1"
      ]
    },
    "2202": {
      "op": "dig 5",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%25#1",
        "aggregate%tail%6#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "three#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "five#0",
        "aggregate%encoded%25#1",
        "three#0 (copy)"
      ]
    },
    "2204": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%26#1",
        "aggregate%tail%6#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "five#0",
        "aggregate%encoded%26#1"
      ]
    },
    "2205": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%current_tail_offset%6#1",
        "five#0",
        "aggregate%encoded%26#1",
        "aggregate%tail%6#1"
      ]
    },
    "2207": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%26#1",
        "aggregate%tail%6#1",
        "five#0",
        "four#0",
        "four#0 (copy)",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%current_tail_offset%6#1",
        "five#0",
        "aggregate%encoded%26#1",
        "aggregate%tail%6#1",
        "four#0 (copy)"
      ]
    },
    "2209": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%26#1",
        "aggregate%tail%7#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%current_tail_offset%6#1",
        "five#0",
        "aggregate%encoded%26#1",
        "aggregate%tail%7#1"
      ]
    },
    "2210": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%tail%7#1",
        "five#0",
        "aggregate%encoded%26#1"
      ]
    },
    "2212": {
      "op": "dig 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%tail%7#1",
        "five#0",
        "aggregate%encoded%26#1",
        "four#0 (copy)"
      ]
    },
    "2214": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%data_length%7#1",
        "aggregate%encoded%26#1",
        "aggregate%tail%7#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%tail%7#1",
        "five#0",
        "aggregate%encoded%26#1",
        "aggregate%data_length%7#1"
      ]
    },
    "2215": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%current_tail_offset%6#1 (copy)",
        "aggregate%data_length%7#1",
        "aggregate%encoded%26#1",
        "aggregate%tail%7#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%tail%7#1",
        "five#0",
        "aggregate%encoded%26#1",
        "aggregate%data_length%7#1",
        "aggregate%current_tail_offset%6#1 (copy)"
      ]
    },
    "2217": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%26#1",
        "aggregate%tail%7#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%tail%7#1",
        "five#0",
        "aggregate%encoded%26#1",
        "aggregate%current_tail_offset%7#1"
      ]
    },
    "2218": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%tail%7#1",
        "five#0",
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%26#1"
      ]
    },
    "2219": {
      "op": "uncover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%7#1",
        "five#0",
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%26#1",
        "aggregate%current_tail_offset%6#1"
      ]
    },
    "2221": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%7#1",
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%26#1",
        "aggregate%tail%7#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%7#1",
        "five#0",
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%26#1",
        "aggregate%as_bytes%7#1"
      ]
    },
    "2222": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%26#1",
        "aggregate%offset_as_uint16%7#1",
        "aggregate%tail%7#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%7#1",
        "five#0",
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%26#1",
        "aggregate%offset_as_uint16%7#1"
      ]
    },
    "2225": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%27#1",
        "aggregate%tail%7#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "aggregate%tail%7#1",
        "five#0",
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%27#1"
      ]
    },
    "2226": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%27#1",
        "aggregate%tail%7#1"
      ]
    },
    "2228": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%27#1",
        "aggregate%tail%7#1",
        "five#0",
        "five#0 (copy)",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%27#1",
        "aggregate%tail%7#1",
        "five#0 (copy)"
      ]
    },
    "2230": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%27#1",
        "aggregate%tail%8#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%7#1",
        "aggregate%encoded%27#1",
        "aggregate%tail%8#1"
      ]
    },
    "2231": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%7#1",
        "aggregate%tail%8#1",
        "aggregate%encoded%27#1"
      ]
    },
    "2232": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%tail%8#1",
        "aggregate%encoded%27#1",
        "aggregate%current_tail_offset%7#1"
      ]
    },
    "2234": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%8#1",
        "aggregate%encoded%27#1",
        "aggregate%tail%8#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%tail%8#1",
        "aggregate%encoded%27#1",
        "aggregate%as_bytes%8#1"
      ]
    },
    "2235": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%27#1",
        "aggregate%offset_as_uint16%8#1",
        "aggregate%tail%8#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%tail%8#1",
        "aggregate%encoded%27#1",
        "aggregate%offset_as_uint16%8#1"
      ]
    },
    "2238": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%28#1",
        "aggregate%tail%8#1",
        "five#0",
        "four#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%tail%8#1",
        "aggregate%encoded%28#1"
      ]
    },
    "2239": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%encoded%28#1",
        "aggregate%tail%8#1"
      ]
    },
    "2240": {
      "op": "concat",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "struct1#0"
      ]
    },
    "2241": {
      "op": "cover 5",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0"
      ]
    },
    "2243": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "tmp%21#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%21#0"
      ]
    },
    "2246": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "tmp%21#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "2249": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "tmp%21#0"
      ]
    },
    "2250": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "tmp%21#0",
        "0x"
      ]
    },
    "2251": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "tmp%21#0",
        "tmp%21#0 (copy)",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "tmp%21#0",
        "0x",
        "tmp%21#0 (copy)"
      ]
    },
    "2253": {
      "op": "concat",
      "defined_out": [
        "aggregate%tail%9#1",
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "tmp%21#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%tail%9#1"
      ]
    },
    "2254": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "aggregate%tail%9#1",
        "tmp%21#0"
      ]
    },
    "2255": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%9#1",
        "aggregate%tail%9#1",
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "aggregate%tail%9#1",
        "aggregate%data_length%9#1"
      ]
    },
    "2256": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "aggregate%tail%9#1",
        "aggregate%data_length%9#1",
        "4"
      ]
    },
    "2257": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%9#1",
        "aggregate%tail%9#1",
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "aggregate%tail%9#1",
        "aggregate%current_tail_offset%9#1"
      ]
    },
    "2258": {
      "op": "intc_3 // 4",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "aggregate%tail%9#1",
        "aggregate%current_tail_offset%9#1",
        "4"
      ]
    },
    "2259": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%9#1",
        "aggregate%current_tail_offset%9#1",
        "aggregate%tail%9#1",
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "aggregate%tail%9#1",
        "aggregate%current_tail_offset%9#1",
        "aggregate%as_bytes%9#1"
      ]
    },
    "2260": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%9#1",
        "aggregate%offset_as_uint16%9#1",
        "aggregate%tail%9#1",
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "aggregate%tail%9#1",
        "aggregate%current_tail_offset%9#1",
        "aggregate%offset_as_uint16%9#1"
      ]
    },
    "2263": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "aggregate%tail%9#1",
        "aggregate%current_tail_offset%9#1",
        "aggregate%offset_as_uint16%9#1",
        "0x"
      ]
    },
    "2264": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "aggregate%tail%9#1",
        "aggregate%current_tail_offset%9#1",
        "0x",
        "aggregate%offset_as_uint16%9#1"
      ]
    },
    "2265": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%30#1",
        "aggregate%tail%9#1",
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "aggregate%tail%9#1",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%30#1"
      ]
    },
    "2266": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%22#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%30#1",
        "aggregate%tail%9#1"
      ]
    },
    "2268": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%30#1",
        "aggregate%tail%9#1",
        "tmp%22#0"
      ]
    },
    "2270": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%30#1",
        "aggregate%tail%10#1",
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%30#1",
        "aggregate%tail%10#1"
      ]
    },
    "2271": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%tail%10#1",
        "aggregate%encoded%30#1"
      ]
    },
    "2272": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%tail%10#1",
        "aggregate%encoded%30#1",
        "aggregate%current_tail_offset%9#1"
      ]
    },
    "2274": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%10#1",
        "aggregate%encoded%30#1",
        "aggregate%tail%10#1",
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%tail%10#1",
        "aggregate%encoded%30#1",
        "aggregate%as_bytes%10#1"
      ]
    },
    "2275": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%30#1",
        "aggregate%offset_as_uint16%10#1",
        "aggregate%tail%10#1",
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%tail%10#1",
        "aggregate%encoded%30#1",
        "aggregate%offset_as_uint16%10#1"
      ]
    },
    "2278": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%31#1",
        "aggregate%tail%10#1",
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%tail%10#1",
        "aggregate%encoded%31#1"
      ]
    },
    "2279": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%encoded%31#1",
        "aggregate%tail%10#1"
      ]
    },
    "2280": {
      "op": "concat",
      "defined_out": [
        "five#0",
        "four#0",
        "one#0",
        "struct1#0",
        "three#0",
        "tmp%23#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%23#0"
      ]
    },
    "2281": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "one#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%23#0",
        "0x"
      ]
    },
    "2282": {
      "op": "uncover 6",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%23#0",
        "0x",
        "one#0"
      ]
    },
    "2284": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%33#1",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "tmp%23#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "tmp%23#0",
        "aggregate%encoded%33#1"
      ]
    },
    "2285": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%encoded%33#1",
        "tmp%23#0"
      ]
    },
    "2286": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%encoded%33#1",
        "tmp%23#0",
        "0x"
      ]
    },
    "2287": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "aggregate%encoded%33#1",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "tmp%23#0",
        "tmp%23#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%encoded%33#1",
        "tmp%23#0",
        "0x",
        "tmp%23#0 (copy)"
      ]
    },
    "2289": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%33#1",
        "aggregate%tail%11#1",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "tmp%23#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%encoded%33#1",
        "tmp%23#0",
        "aggregate%tail%11#1"
      ]
    },
    "2290": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%tail%11#1",
        "aggregate%encoded%33#1",
        "tmp%23#0"
      ]
    },
    "2292": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%11#1",
        "aggregate%encoded%33#1",
        "aggregate%tail%11#1",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%tail%11#1",
        "aggregate%encoded%33#1",
        "aggregate%data_length%11#1"
      ]
    },
    "2293": {
      "op": "pushint 26 // 26",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%tail%11#1",
        "aggregate%encoded%33#1",
        "aggregate%data_length%11#1",
        "26"
      ]
    },
    "2295": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%33#1",
        "aggregate%tail%11#1",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%tail%11#1",
        "aggregate%encoded%33#1",
        "aggregate%current_tail_offset%11#1"
      ]
    },
    "2296": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%11#1",
        "aggregate%encoded%33#1"
      ]
    },
    "2298": {
      "op": "pushint 26 // 26",
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%11#1",
        "aggregate%encoded%33#1",
        "26"
      ]
    },
    "2300": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%11#1",
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%33#1",
        "aggregate%tail%11#1",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%11#1",
        "aggregate%encoded%33#1",
        "aggregate%as_bytes%11#1"
      ]
    },
    "2301": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%33#1",
        "aggregate%offset_as_uint16%11#1",
        "aggregate%tail%11#1",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%11#1",
        "aggregate%encoded%33#1",
        "aggregate%offset_as_uint16%11#1"
      ]
    },
    "2304": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%34#1",
        "aggregate%tail%11#1",
        "five#0",
        "four#0",
        "struct1#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "three#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%11#1",
        "aggregate%encoded%34#1"
      ]
    },
    "2305": {
      "op": "uncover 5",
      "stack_out": [
        "struct1#0",
        "two#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%11#1",
        "aggregate%encoded%34#1",
        "three#0"
      ]
    },
    "2307": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%11#1",
        "five#0",
        "four#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%11#1",
        "aggregate%encoded%35#1"
      ]
    },
    "2308": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%11#1"
      ]
    },
    "2309": {
      "op": "dig 4",
      "stack_out": [
        "struct1#0",
        "two#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%11#1",
        "four#0 (copy)"
      ]
    },
    "2311": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%12#1",
        "five#0",
        "four#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "four#0",
        "five#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%12#1"
      ]
    },
    "2312": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "four#0",
        "five#0",
        "aggregate%tail%12#1",
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%35#1"
      ]
    },
    "2314": {
      "op": "uncover 4",
      "stack_out": [
        "struct1#0",
        "two#0",
        "five#0",
        "aggregate%tail%12#1",
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%35#1",
        "four#0"
      ]
    },
    "2316": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%data_length%12#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%12#1",
        "five#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "five#0",
        "aggregate%tail%12#1",
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%35#1",
        "aggregate%data_length%12#1"
      ]
    },
    "2317": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%current_tail_offset%11#1 (copy)",
        "aggregate%data_length%12#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%12#1",
        "five#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "five#0",
        "aggregate%tail%12#1",
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%35#1",
        "aggregate%data_length%12#1",
        "aggregate%current_tail_offset%11#1 (copy)"
      ]
    },
    "2319": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%12#1",
        "five#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "five#0",
        "aggregate%tail%12#1",
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%35#1",
        "aggregate%current_tail_offset%12#1"
      ]
    },
    "2320": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "five#0",
        "aggregate%tail%12#1",
        "aggregate%current_tail_offset%11#1",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%35#1"
      ]
    },
    "2321": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "five#0",
        "aggregate%tail%12#1",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%35#1",
        "aggregate%current_tail_offset%11#1"
      ]
    },
    "2323": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%12#1",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%12#1",
        "five#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "five#0",
        "aggregate%tail%12#1",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%35#1",
        "aggregate%as_bytes%12#1"
      ]
    },
    "2324": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%35#1",
        "aggregate%offset_as_uint16%12#1",
        "aggregate%tail%12#1",
        "five#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "five#0",
        "aggregate%tail%12#1",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%35#1",
        "aggregate%offset_as_uint16%12#1"
      ]
    },
    "2327": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%36#1",
        "aggregate%tail%12#1",
        "five#0",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "five#0",
        "aggregate%tail%12#1",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%36#1"
      ]
    },
    "2328": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "five#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%36#1",
        "aggregate%tail%12#1"
      ]
    },
    "2330": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%36#1",
        "aggregate%tail%12#1",
        "five#0"
      ]
    },
    "2332": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%36#1",
        "aggregate%tail%13#1",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%36#1",
        "aggregate%tail%13#1"
      ]
    },
    "2333": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%tail%13#1",
        "aggregate%encoded%36#1"
      ]
    },
    "2334": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%tail%13#1",
        "aggregate%encoded%36#1",
        "aggregate%current_tail_offset%12#1"
      ]
    },
    "2336": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%13#1",
        "aggregate%encoded%36#1",
        "aggregate%tail%13#1",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%tail%13#1",
        "aggregate%encoded%36#1",
        "aggregate%as_bytes%13#1"
      ]
    },
    "2337": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%36#1",
        "aggregate%offset_as_uint16%13#1",
        "aggregate%tail%13#1",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%tail%13#1",
        "aggregate%encoded%36#1",
        "aggregate%offset_as_uint16%13#1"
      ]
    },
    "2340": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%37#1",
        "aggregate%tail%13#1",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%tail%13#1",
        "aggregate%encoded%37#1"
      ]
    },
    "2341": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%encoded%37#1",
        "aggregate%tail%13#1"
      ]
    },
    "2342": {
      "op": "concat",
      "defined_out": [
        "struct1#0",
        "struct2#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0"
      ]
    },
    "2343": {
      "op": "dup",
      "defined_out": [
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "struct2#0 (copy)"
      ]
    },
    "2344": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "struct2#0 (copy)",
        "10"
      ]
    },
    "2346": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_offset%0#1",
        "struct1#0",
        "struct2#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%item_offset%0#1"
      ]
    },
    "2347": {
      "op": "dig 1",
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%item_offset%0#1",
        "struct2#0 (copy)"
      ]
    },
    "2349": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%item_offset%0#1",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%item_offset%0#1",
        "struct2#0 (copy)",
        "0"
      ]
    },
    "2350": {
      "op": "dig 2",
      "defined_out": [
        "0",
        "aggregate%item_offset%0#1",
        "aggregate%item_offset%0#1 (copy)",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%item_offset%0#1",
        "struct2#0 (copy)",
        "0",
        "aggregate%item_offset%0#1 (copy)"
      ]
    },
    "2352": {
      "op": "extract3",
      "defined_out": [
        "aggregate%data_up_to_item%0#1",
        "aggregate%item_offset%0#1",
        "struct1#0",
        "struct2#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%item_offset%0#1",
        "aggregate%data_up_to_item%0#1"
      ]
    },
    "2353": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%data_up_to_item%0#1",
        "aggregate%item_offset%0#1"
      ]
    },
    "2354": {
      "op": "dig 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%data_up_to_item%0#1",
        "aggregate%item_offset%0#1",
        "struct2#0 (copy)"
      ]
    },
    "2356": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "aggregate%data_up_to_item%0#1",
        "aggregate%item_offset%0#1",
        "struct1#0",
        "struct2#0",
        "struct2#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%data_up_to_item%0#1",
        "aggregate%item_offset%0#1",
        "struct2#0 (copy)",
        "22"
      ]
    },
    "2358": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%data_up_to_item%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%next_item_offset%0#1",
        "struct1#0",
        "struct2#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%data_up_to_item%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%next_item_offset%0#1"
      ]
    },
    "2359": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%data_up_to_item%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%0#1"
      ]
    },
    "2360": {
      "op": "dig 3",
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%data_up_to_item%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%0#1",
        "struct2#0 (copy)"
      ]
    },
    "2362": {
      "op": "len",
      "defined_out": [
        "aggregate%data_up_to_item%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%total_data_length%0#1",
        "struct1#0",
        "struct2#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%data_up_to_item%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%total_data_length%0#1"
      ]
    },
    "2363": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "struct2#0",
        "aggregate%data_up_to_item%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%total_data_length%0#1",
        "aggregate%item_offset%0#1"
      ]
    },
    "2364": {
      "op": "uncover 4",
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%data_up_to_item%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%total_data_length%0#1",
        "aggregate%item_offset%0#1",
        "struct2#0"
      ]
    },
    "2366": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%data_up_to_item%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%next_item_offset%0#1 (copy)",
        "aggregate%total_data_length%0#1",
        "struct1#0",
        "struct2#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%data_up_to_item%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%total_data_length%0#1",
        "aggregate%item_offset%0#1",
        "struct2#0",
        "aggregate%next_item_offset%0#1 (copy)"
      ]
    },
    "2368": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%data_up_to_item%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%0#1",
        "struct2#0",
        "aggregate%next_item_offset%0#1 (copy)",
        "aggregate%total_data_length%0#1"
      ]
    },
    "2370": {
      "op": "substring3",
      "defined_out": [
        "aggregate%data_beyond_item%0#1",
        "aggregate%data_up_to_item%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%next_item_offset%0#1",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%data_up_to_item%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%data_beyond_item%0#1"
      ]
    },
    "2371": {
      "op": "uncover 3",
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%data_beyond_item%0#1",
        "aggregate%data_up_to_item%0#1"
      ]
    },
    "2373": {
      "op": "dig 4",
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%data_beyond_item%0#1",
        "aggregate%data_up_to_item%0#1",
        "two#0 (copy)"
      ]
    },
    "2375": {
      "op": "concat",
      "defined_out": [
        "aggregate%data_beyond_item%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%updated_data%0#1",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%data_beyond_item%0#1",
        "aggregate%updated_data%0#1"
      ]
    },
    "2376": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%updated_data%0#1",
        "aggregate%data_beyond_item%0#1"
      ]
    },
    "2377": {
      "op": "concat",
      "defined_out": [
        "aggregate%item_offset%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%updated_data%1#1",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%0#1",
        "aggregate%updated_data%1#1"
      ]
    },
    "2378": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%item_offset%0#1",
        "aggregate%updated_data%1#1",
        "aggregate%next_item_offset%0#1"
      ]
    },
    "2380": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%updated_data%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%0#1"
      ]
    },
    "2382": {
      "op": "-",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%updated_data%1#1",
        "struct1#0",
        "two#0"
      ],
      "stack_out": [
        "struct1#0",
        "two#0",
        "aggregate%updated_data%1#1",
        "aggregate%item_length%0#1"
      ]
    },
    "2383": {
      "op": "cover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "two#0",
        "aggregate%updated_data%1#1"
      ]
    },
    "2385": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%1#1",
        "two#0"
      ]
    },
    "2386": {
      "op": "len",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%1#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%1#1",
        "aggregate%new_value_length%0#1"
      ]
    },
    "2387": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%1#1",
        "aggregate%updated_data%1#1 (copy)",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%1#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%1#1 (copy)"
      ]
    },
    "2389": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%1#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%1#1 (copy)",
        "22"
      ]
    },
    "2391": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset%0#1",
        "aggregate%updated_data%1#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%1#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset%0#1"
      ]
    },
    "2392": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%new_value_length%0#1 (copy)",
        "aggregate%tail_offset%0#1",
        "aggregate%updated_data%1#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%1#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset%0#1",
        "aggregate%new_value_length%0#1 (copy)"
      ]
    },
    "2394": {
      "op": "+",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset%1#1",
        "aggregate%updated_data%1#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%1#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset%1#1"
      ]
    },
    "2395": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%item_length%0#1 (copy)",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset%1#1",
        "aggregate%updated_data%1#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%1#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset%1#1",
        "aggregate%item_length%0#1 (copy)"
      ]
    },
    "2397": {
      "op": "-",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset%2#1",
        "aggregate%updated_data%1#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%1#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset%2#1"
      ]
    },
    "2398": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%14#1",
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%1#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%1#1",
        "aggregate%new_value_length%0#1",
        "aggregate%as_bytes%14#1"
      ]
    },
    "2399": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset_bytes%0#1",
        "aggregate%updated_data%1#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%1#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset_bytes%0#1"
      ]
    },
    "2402": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset_bytes%0#1",
        "aggregate%updated_data%1#1"
      ]
    },
    "2404": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset_bytes%0#1",
        "aggregate%updated_data%1#1",
        "22"
      ]
    },
    "2406": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%1#1",
        "22",
        "aggregate%tail_offset_bytes%0#1"
      ]
    },
    "2408": {
      "op": "replace3",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%2#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%2#1"
      ]
    },
    "2409": {
      "op": "dup",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%updated_data%2#1 (copy)",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%updated_data%2#1 (copy)"
      ]
    },
    "2410": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%updated_data%2#1 (copy)",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%updated_data%2#1 (copy)",
        "24"
      ]
    },
    "2412": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset%3#1",
        "aggregate%updated_data%2#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%tail_offset%3#1"
      ]
    },
    "2413": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%tail_offset%3#1",
        "aggregate%new_value_length%0#1"
      ]
    },
    "2415": {
      "op": "+",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%tail_offset%4#1",
        "aggregate%updated_data%2#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%tail_offset%4#1"
      ]
    },
    "2416": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%updated_data%2#1",
        "aggregate%tail_offset%4#1",
        "aggregate%item_length%0#1"
      ]
    },
    "2418": {
      "op": "-",
      "defined_out": [
        "aggregate%tail_offset%5#1",
        "aggregate%updated_data%2#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%updated_data%2#1",
        "aggregate%tail_offset%5#1"
      ]
    },
    "2419": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%15#1",
        "aggregate%updated_data%2#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%updated_data%2#1",
        "aggregate%as_bytes%15#1"
      ]
    },
    "2420": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%tail_offset_bytes%1#1",
        "aggregate%updated_data%2#1",
        "struct1#0"
      ],
      "stack_out": [
        "struct1#0",
        "aggregate%updated_data%2#1",
        "aggregate%tail_offset_bytes%1#1"
      ]
    },
    "2423": {
      "op": "swap",
      "stack_out": [
        "struct1#0",
        "aggregate%tail_offset_bytes%1#1",
        "aggregate%updated_data%2#1"
      ]
    },
    "2424": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "struct1#0",
        "aggregate%tail_offset_bytes%1#1",
        "aggregate%updated_data%2#1",
        "24"
      ]
    },
    "2426": {
      "op": "uncover 2",
      "stack_out": [
        "struct1#0",
        "aggregate%updated_data%2#1",
        "24",
        "aggregate%tail_offset_bytes%1#1"
      ]
    },
    "2428": {
      "op": "replace3",
      "stack_out": [
        "struct1#0",
        "struct2#0"
      ]
    },
    "2429": {
      "op": "==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "2430": {
      "error": "struct1 does not match struct2",
      "op": "assert // struct1 does not match struct2",
      "stack_out": []
    },
    "2431": {
      "retsub": true,
      "op": "retsub"
    },
    "2432": {
      "subroutine": "test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_nested_tuple_modification",
      "params": {},
      "block": "test_nested_tuple_modification_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2435": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte1",
      "op": "callsub get_byte1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2438": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte2",
      "op": "callsub get_byte2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2441": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "2442": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%1#0",
        "0x"
      ]
    },
    "2443": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "0x",
        "tmp%1#0"
      ]
    },
    "2444": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%encoded%0#1"
      ]
    },
    "2445": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded%0#1",
        "tmp%2#0"
      ]
    },
    "2446": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded%1#1"
      ]
    },
    "2447": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded%1#1",
        "0x"
      ]
    },
    "2448": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_array%0#0"
      ]
    },
    "2449": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "encoded_array%0#0",
        "0x"
      ]
    },
    "2450": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_array%0#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "2452": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%3#1",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%encoded%3#1"
      ]
    },
    "2453": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%3#1",
        "encoded_array%0#0"
      ]
    },
    "2454": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%4#1"
      ],
      "stack_out": [
        "aggregate%encoded%4#1"
      ]
    },
    "2455": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%4#1",
        "0x"
      ]
    },
    "2456": {
      "op": "concat",
      "defined_out": [
        "one#0"
      ],
      "stack_out": [
        "one#0"
      ]
    },
    "2457": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "one#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0"
      ]
    },
    "2460": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "one#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2463": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "2464": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "tmp%4#0",
        "0x"
      ]
    },
    "2465": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "one#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "tmp%4#0",
        "0x",
        "tmp%4#0 (copy)"
      ]
    },
    "2467": {
      "op": "concat",
      "defined_out": [
        "aggregate%tail%0#1",
        "one#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%tail%0#1"
      ]
    },
    "2468": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "tmp%4#0"
      ]
    },
    "2469": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#1",
        "aggregate%tail%0#1",
        "one#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%data_length%0#1"
      ]
    },
    "2470": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "aggregate%data_length%0#1",
        "aggregate%tail%0#1",
        "one#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%data_length%0#1",
        "4"
      ]
    },
    "2471": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "one#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "2472": {
      "op": "intc_3 // 4",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "4"
      ]
    },
    "2473": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%0#1",
        "one#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%as_bytes%0#1"
      ]
    },
    "2474": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%offset_as_uint16%0#1",
        "aggregate%tail%0#1",
        "one#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "2477": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%offset_as_uint16%0#1",
        "0x"
      ]
    },
    "2478": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "0x",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "2479": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%0#1",
        "one#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%tail%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%6#1"
      ]
    },
    "2480": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "tmp%5#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%0#1"
      ]
    },
    "2482": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%0#1",
        "tmp%5#0"
      ]
    },
    "2484": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%1#1",
        "one#0"
      ],
      "stack_out": [
        "one#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%1#1"
      ]
    },
    "2485": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "aggregate%current_tail_offset%0#1",
        "aggregate%tail%1#1",
        "aggregate%encoded%6#1"
      ]
    },
    "2486": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%6#1",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "2488": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#1",
        "aggregate%encoded%6#1",
        "aggregate%tail%1#1",
        "one#0"
      ],
      "stack_out": [
        "one#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%6#1",
        "aggregate%as_bytes%1#1"
      ]
    },
    "2489": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%6#1",
        "aggregate%offset_as_uint16%1#1",
        "aggregate%tail%1#1",
        "one#0"
      ],
      "stack_out": [
        "one#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%6#1",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "2492": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%7#1",
        "aggregate%tail%1#1",
        "one#0"
      ],
      "stack_out": [
        "one#0",
        "aggregate%tail%1#1",
        "aggregate%encoded%7#1"
      ]
    },
    "2493": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "aggregate%encoded%7#1",
        "aggregate%tail%1#1"
      ]
    },
    "2494": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0"
      ]
    },
    "2495": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "one#0",
        "tmp%7#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0"
      ]
    },
    "2498": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte2",
      "op": "callsub get_byte2",
      "defined_out": [
        "one#0",
        "tmp%7#0",
        "tmp%8#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2501": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_byte1",
      "op": "callsub get_byte1",
      "defined_out": [
        "one#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "2504": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "2505": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%8#0",
        "0x"
      ]
    },
    "2506": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "tmp%9#0",
        "0x",
        "tmp%8#0"
      ]
    },
    "2507": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%9#1",
        "one#0",
        "tmp%7#0",
        "tmp%9#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%encoded%9#1"
      ]
    },
    "2508": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "aggregate%encoded%9#1",
        "tmp%9#0"
      ]
    },
    "2509": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%10#1",
        "one#0",
        "tmp%7#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "aggregate%encoded%10#1"
      ]
    },
    "2510": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "aggregate%encoded%10#1",
        "0x"
      ]
    },
    "2511": {
      "op": "concat",
      "defined_out": [
        "encoded_array%1#0",
        "one#0",
        "tmp%7#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "encoded_array%1#0"
      ]
    },
    "2512": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "tmp%7#0",
        "encoded_array%1#0",
        "0x"
      ]
    },
    "2513": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "encoded_array%1#0",
        "0x",
        "tmp%7#0"
      ]
    },
    "2515": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%12#1",
        "encoded_array%1#0",
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "encoded_array%1#0",
        "aggregate%encoded%12#1"
      ]
    },
    "2516": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "aggregate%encoded%12#1",
        "encoded_array%1#0"
      ]
    },
    "2517": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%13#1",
        "one#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "aggregate%encoded%13#1"
      ]
    },
    "2518": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "aggregate%encoded%13#1",
        "0x"
      ]
    },
    "2519": {
      "op": "concat",
      "defined_out": [
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0"
      ]
    },
    "2520": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%11#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%11#0"
      ]
    },
    "2523": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%11#0",
        "tmp%12#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "2526": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0"
      ]
    },
    "2527": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "2530": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0"
      ]
    },
    "2532": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr1",
      "op": "callsub get_u16_arr1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%14#0"
      ]
    },
    "2535": {
      "op": "cover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0"
      ]
    },
    "2537": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "one#0",
        "three#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "tmp%15#0"
      ]
    },
    "2540": {
      "op": "cover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0"
      ]
    },
    "2542": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%11#0",
        "0x"
      ]
    },
    "2543": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "0x",
        "tmp%11#0"
      ]
    },
    "2544": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%15#1",
        "one#0",
        "three#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "aggregate%encoded%15#1"
      ]
    },
    "2545": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%encoded%15#1",
        "tmp%12#0"
      ]
    },
    "2546": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%encoded%15#1",
        "tmp%12#0",
        "0x"
      ]
    },
    "2547": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "aggregate%encoded%15#1",
        "one#0",
        "three#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%encoded%15#1",
        "tmp%12#0",
        "0x",
        "tmp%12#0 (copy)"
      ]
    },
    "2549": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%15#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%encoded%15#1",
        "tmp%12#0",
        "aggregate%tail%2#1"
      ]
    },
    "2550": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%15#1",
        "tmp%12#0"
      ]
    },
    "2552": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%2#1",
        "aggregate%encoded%15#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%15#1",
        "aggregate%data_length%2#1"
      ]
    },
    "2553": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "aggregate%data_length%2#1",
        "aggregate%encoded%15#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%15#1",
        "aggregate%data_length%2#1",
        "28"
      ]
    },
    "2555": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%encoded%15#1",
        "aggregate%current_tail_offset%2#1"
      ]
    },
    "2556": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1"
      ]
    },
    "2557": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1",
        "28"
      ]
    },
    "2559": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1",
        "aggregate%as_bytes%2#1"
      ]
    },
    "2560": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1",
        "aggregate%offset_as_uint16%2#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%15#1",
        "aggregate%offset_as_uint16%2#1"
      ]
    },
    "2563": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%16#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%16#1"
      ]
    },
    "2564": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%16#1",
        "tmp%13#0"
      ]
    },
    "2566": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%2#1",
        "one#0",
        "three#0",
        "tmp%14#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "aggregate%tail%2#1",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%17#1"
      ]
    },
    "2567": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "tmp%14#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%2#1"
      ]
    },
    "2569": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%2#1",
        "tmp%14#0"
      ]
    },
    "2571": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%3#1",
        "one#0",
        "three#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%3#1"
      ]
    },
    "2572": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%tail%3#1",
        "aggregate%encoded%17#1"
      ]
    },
    "2573": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%17#1",
        "aggregate%current_tail_offset%2#1"
      ]
    },
    "2575": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#1",
        "aggregate%encoded%17#1",
        "aggregate%tail%3#1",
        "one#0",
        "three#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%17#1",
        "aggregate%as_bytes%3#1"
      ]
    },
    "2576": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%17#1",
        "aggregate%offset_as_uint16%3#1",
        "aggregate%tail%3#1",
        "one#0",
        "three#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%17#1",
        "aggregate%offset_as_uint16%3#1"
      ]
    },
    "2579": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%18#1",
        "aggregate%tail%3#1",
        "one#0",
        "three#0",
        "tmp%15#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "tmp%15#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%18#1"
      ]
    },
    "2580": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%18#1",
        "tmp%15#0"
      ]
    },
    "2582": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%19#1",
        "aggregate%tail%3#1",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "aggregate%tail%3#1",
        "aggregate%encoded%19#1"
      ]
    },
    "2583": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "aggregate%encoded%19#1",
        "aggregate%tail%3#1"
      ]
    },
    "2584": {
      "op": "concat",
      "defined_out": [
        "four1#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0"
      ]
    },
    "2585": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%17#0"
      ]
    },
    "2588": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "2591": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%18#0",
        "tmp%17#0"
      ]
    },
    "2592": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint2",
      "op": "callsub get_uint2",
      "defined_out": [
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%18#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "2595": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0"
      ]
    },
    "2597": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_u16_arr1",
      "op": "callsub get_u16_arr1",
      "defined_out": [
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "tmp%20#0"
      ]
    },
    "2600": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "tmp%20#0",
        "0x"
      ]
    },
    "2601": {
      "op": "pushbytes 0x007b",
      "defined_out": [
        "0x",
        "0x007b",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "tmp%20#0",
        "0x",
        "0x007b"
      ]
    },
    "2605": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%21#1",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "tmp%20#0",
        "aggregate%encoded%21#1"
      ]
    },
    "2606": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "tmp%20#0",
        "aggregate%encoded%21#1",
        "0x"
      ]
    },
    "2607": {
      "op": "concat",
      "defined_out": [
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "2608": {
      "op": "dig 1",
      "defined_out": [
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "tmp%21#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%20#0 (copy)"
      ]
    },
    "2610": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "tmp%21#0"
      ]
    },
    "2611": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "tmp%20#0",
        "concat%0#0"
      ]
    },
    "2612": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "concat%0#0",
        "tmp%20#0"
      ]
    },
    "2613": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "concat%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "concat%0#0",
        "tmp%20#0",
        "0"
      ]
    },
    "2614": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "2615": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "2616": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "2617": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "2618": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "2621": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "2622": {
      "op": "intc_0 // 0",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "2623": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "2625": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+uint16[])%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "as_Encoded(len+uint16[])%0#0"
      ]
    },
    "2626": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_uint1",
      "op": "callsub get_uint1",
      "defined_out": [
        "as_Encoded(len+uint16[])%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%17#0",
        "as_Encoded(len+uint16[])%0#0",
        "tmp%22#0"
      ]
    },
    "2629": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%22#0",
        "tmp%17#0",
        "as_Encoded(len+uint16[])%0#0"
      ]
    },
    "2631": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%22#0",
        "tmp%17#0",
        "as_Encoded(len+uint16[])%0#0",
        "0x"
      ]
    },
    "2632": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%22#0",
        "as_Encoded(len+uint16[])%0#0",
        "0x",
        "tmp%17#0"
      ]
    },
    "2634": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%23#1",
        "as_Encoded(len+uint16[])%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%22#0",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%encoded%23#1"
      ]
    },
    "2635": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%22#0",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%encoded%23#1",
        "0x"
      ]
    },
    "2636": {
      "op": "dig 4",
      "defined_out": [
        "0x",
        "aggregate%encoded%23#1",
        "as_Encoded(len+uint16[])%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%19#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%22#0",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%encoded%23#1",
        "0x",
        "tmp%18#0 (copy)"
      ]
    },
    "2638": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%23#1",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%22#0",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%encoded%23#1",
        "aggregate%tail%4#1"
      ]
    },
    "2639": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%22#0",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%encoded%23#1"
      ]
    },
    "2641": {
      "op": "uncover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%22#0",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%encoded%23#1",
        "tmp%18#0"
      ]
    },
    "2643": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%4#1",
        "aggregate%encoded%23#1",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%19#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%22#0",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%encoded%23#1",
        "aggregate%data_length%4#1"
      ]
    },
    "2644": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%22#0",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%encoded%23#1",
        "aggregate%data_length%4#1",
        "28"
      ]
    },
    "2646": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%23#1",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%19#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%22#0",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%encoded%23#1",
        "aggregate%current_tail_offset%4#1"
      ]
    },
    "2647": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%22#0",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%23#1"
      ]
    },
    "2648": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%22#0",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%23#1",
        "28"
      ]
    },
    "2650": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#1",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%23#1",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%19#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%22#0",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%23#1",
        "aggregate%as_bytes%4#1"
      ]
    },
    "2651": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%23#1",
        "aggregate%offset_as_uint16%4#1",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%19#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%22#0",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%23#1",
        "aggregate%offset_as_uint16%4#1"
      ]
    },
    "2654": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%24#1",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%19#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%19#0",
        "tmp%22#0",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%24#1"
      ]
    },
    "2655": {
      "op": "uncover 5",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%22#0",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%24#1",
        "tmp%19#0"
      ]
    },
    "2657": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%25#1",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%22#0",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%25#1"
      ]
    },
    "2658": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%22#0",
        "as_Encoded(len+uint16[])%0#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%25#1",
        "aggregate%tail%4#1"
      ]
    },
    "2660": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%22#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%25#1",
        "aggregate%tail%4#1",
        "as_Encoded(len+uint16[])%0#0"
      ]
    },
    "2662": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%25#1",
        "aggregate%tail%5#1",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%22#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%encoded%25#1",
        "aggregate%tail%5#1"
      ]
    },
    "2663": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%22#0",
        "aggregate%current_tail_offset%4#1",
        "aggregate%tail%5#1",
        "aggregate%encoded%25#1"
      ]
    },
    "2664": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%22#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%25#1",
        "aggregate%current_tail_offset%4#1"
      ]
    },
    "2666": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#1",
        "aggregate%encoded%25#1",
        "aggregate%tail%5#1",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%22#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%25#1",
        "aggregate%as_bytes%5#1"
      ]
    },
    "2667": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%25#1",
        "aggregate%offset_as_uint16%5#1",
        "aggregate%tail%5#1",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%22#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%25#1",
        "aggregate%offset_as_uint16%5#1"
      ]
    },
    "2670": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%26#1",
        "aggregate%tail%5#1",
        "four1#0",
        "one#0",
        "three#0",
        "tmp%22#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "tmp%22#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%26#1"
      ]
    },
    "2671": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%26#1",
        "tmp%22#0"
      ]
    },
    "2673": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%27#1",
        "aggregate%tail%5#1",
        "four1#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "aggregate%tail%5#1",
        "aggregate%encoded%27#1"
      ]
    },
    "2674": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "aggregate%encoded%27#1",
        "aggregate%tail%5#1"
      ]
    },
    "2675": {
      "op": "concat",
      "defined_out": [
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0"
      ]
    },
    "2676": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string1",
      "op": "callsub get_string1",
      "defined_out": [
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "tmp%24#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%24#0"
      ]
    },
    "2679": {
      "callsub": "test_cases.arc4_dynamic_arrays.contract.get_string2",
      "op": "callsub get_string2",
      "defined_out": [
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "tmp%24#0",
        "tmp%25#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "2682": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "tmp%24#0"
      ]
    },
    "2683": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "tmp%24#0",
        "0x"
      ]
    },
    "2684": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "tmp%25#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "tmp%24#0",
        "0x",
        "tmp%24#0 (copy)"
      ]
    },
    "2686": {
      "op": "concat",
      "defined_out": [
        "aggregate%tail%6#1",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "tmp%24#0",
        "tmp%25#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "tmp%24#0",
        "aggregate%tail%6#1"
      ]
    },
    "2687": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "aggregate%tail%6#1",
        "tmp%24#0"
      ]
    },
    "2688": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%6#1",
        "aggregate%tail%6#1",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "tmp%25#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "aggregate%tail%6#1",
        "aggregate%data_length%6#1"
      ]
    },
    "2689": {
      "op": "intc_3 // 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "aggregate%tail%6#1",
        "aggregate%data_length%6#1",
        "4"
      ]
    },
    "2690": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%tail%6#1",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "tmp%25#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1"
      ]
    },
    "2691": {
      "op": "intc_3 // 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "4"
      ]
    },
    "2692": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#1",
        "aggregate%current_tail_offset%6#1",
        "aggregate%tail%6#1",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "tmp%25#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "aggregate%as_bytes%6#1"
      ]
    },
    "2693": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%offset_as_uint16%6#1",
        "aggregate%tail%6#1",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "tmp%25#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "aggregate%offset_as_uint16%6#1"
      ]
    },
    "2696": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "aggregate%offset_as_uint16%6#1",
        "0x"
      ]
    },
    "2697": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "0x",
        "aggregate%offset_as_uint16%6#1"
      ]
    },
    "2698": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%29#1",
        "aggregate%tail%6#1",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "tmp%25#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "aggregate%tail%6#1",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%29#1"
      ]
    },
    "2699": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "tmp%25#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%29#1",
        "aggregate%tail%6#1"
      ]
    },
    "2701": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%29#1",
        "aggregate%tail%6#1",
        "tmp%25#0"
      ]
    },
    "2703": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%29#1",
        "aggregate%tail%7#1",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%29#1",
        "aggregate%tail%7#1"
      ]
    },
    "2704": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%tail%7#1",
        "aggregate%encoded%29#1"
      ]
    },
    "2705": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%7#1",
        "aggregate%encoded%29#1",
        "aggregate%current_tail_offset%6#1"
      ]
    },
    "2707": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%7#1",
        "aggregate%encoded%29#1",
        "aggregate%tail%7#1",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%7#1",
        "aggregate%encoded%29#1",
        "aggregate%as_bytes%7#1"
      ]
    },
    "2708": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%29#1",
        "aggregate%offset_as_uint16%7#1",
        "aggregate%tail%7#1",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%7#1",
        "aggregate%encoded%29#1",
        "aggregate%offset_as_uint16%7#1"
      ]
    },
    "2711": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%30#1",
        "aggregate%tail%7#1",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%7#1",
        "aggregate%encoded%30#1"
      ]
    },
    "2712": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%encoded%30#1",
        "aggregate%tail%7#1"
      ]
    },
    "2713": {
      "op": "concat",
      "defined_out": [
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "five#0"
      ]
    },
    "2714": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "five#0",
        "0x"
      ]
    },
    "2715": {
      "op": "dig 6",
      "defined_out": [
        "0x",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "one#0 (copy)",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "five#0",
        "0x",
        "one#0 (copy)"
      ]
    },
    "2717": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%32#1",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "five#0",
        "aggregate%encoded%32#1"
      ]
    },
    "2718": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "five#0",
        "aggregate%encoded%32#1",
        "0x"
      ]
    },
    "2719": {
      "op": "dig 6",
      "defined_out": [
        "0x",
        "aggregate%encoded%32#1",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0",
        "two#0 (copy)"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "five#0",
        "aggregate%encoded%32#1",
        "0x",
        "two#0 (copy)"
      ]
    },
    "2721": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%32#1",
        "aggregate%tail%8#1",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "five#0",
        "aggregate%encoded%32#1",
        "aggregate%tail%8#1"
      ]
    },
    "2722": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%8#1",
        "five#0",
        "aggregate%encoded%32#1"
      ]
    },
    "2724": {
      "op": "dig 6",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%8#1",
        "five#0",
        "aggregate%encoded%32#1",
        "two#0 (copy)"
      ]
    },
    "2726": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%8#1",
        "aggregate%encoded%32#1",
        "aggregate%tail%8#1",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%8#1",
        "five#0",
        "aggregate%encoded%32#1",
        "aggregate%data_length%8#1"
      ]
    },
    "2727": {
      "op": "pushint 26 // 26",
      "defined_out": [
        "26",
        "aggregate%data_length%8#1",
        "aggregate%encoded%32#1",
        "aggregate%tail%8#1",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%8#1",
        "five#0",
        "aggregate%encoded%32#1",
        "aggregate%data_length%8#1",
        "26"
      ]
    },
    "2729": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%8#1",
        "aggregate%encoded%32#1",
        "aggregate%tail%8#1",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%8#1",
        "five#0",
        "aggregate%encoded%32#1",
        "aggregate%current_tail_offset%8#1"
      ]
    },
    "2730": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%8#1",
        "aggregate%current_tail_offset%8#1",
        "five#0",
        "aggregate%encoded%32#1"
      ]
    },
    "2732": {
      "op": "pushint 26 // 26",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%8#1",
        "aggregate%current_tail_offset%8#1",
        "five#0",
        "aggregate%encoded%32#1",
        "26"
      ]
    },
    "2734": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%8#1",
        "aggregate%current_tail_offset%8#1",
        "aggregate%encoded%32#1",
        "aggregate%tail%8#1",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%8#1",
        "aggregate%current_tail_offset%8#1",
        "five#0",
        "aggregate%encoded%32#1",
        "aggregate%as_bytes%8#1"
      ]
    },
    "2735": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%8#1",
        "aggregate%encoded%32#1",
        "aggregate%offset_as_uint16%8#1",
        "aggregate%tail%8#1",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%8#1",
        "aggregate%current_tail_offset%8#1",
        "five#0",
        "aggregate%encoded%32#1",
        "aggregate%offset_as_uint16%8#1"
      ]
    },
    "2738": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%8#1",
        "aggregate%encoded%33#1",
        "aggregate%tail%8#1",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%8#1",
        "aggregate%current_tail_offset%8#1",
        "five#0",
        "aggregate%encoded%33#1"
      ]
    },
    "2739": {
      "op": "dig 6",
      "defined_out": [
        "aggregate%current_tail_offset%8#1",
        "aggregate%encoded%33#1",
        "aggregate%tail%8#1",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "three#0 (copy)",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%8#1",
        "aggregate%current_tail_offset%8#1",
        "five#0",
        "aggregate%encoded%33#1",
        "three#0 (copy)"
      ]
    },
    "2741": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%8#1",
        "aggregate%encoded%34#1",
        "aggregate%tail%8#1",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%tail%8#1",
        "aggregate%current_tail_offset%8#1",
        "five#0",
        "aggregate%encoded%34#1"
      ]
    },
    "2742": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%current_tail_offset%8#1",
        "five#0",
        "aggregate%encoded%34#1",
        "aggregate%tail%8#1"
      ]
    },
    "2744": {
      "op": "dig 5",
      "defined_out": [
        "aggregate%current_tail_offset%8#1",
        "aggregate%encoded%34#1",
        "aggregate%tail%8#1",
        "five#0",
        "four1#0",
        "four1#0 (copy)",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%current_tail_offset%8#1",
        "five#0",
        "aggregate%encoded%34#1",
        "aggregate%tail%8#1",
        "four1#0 (copy)"
      ]
    },
    "2746": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%8#1",
        "aggregate%encoded%34#1",
        "aggregate%tail%9#1",
        "five#0",
        "four1#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%current_tail_offset%8#1",
        "five#0",
        "aggregate%encoded%34#1",
        "aggregate%tail%9#1"
      ]
    },
    "2747": {
      "op": "cover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four1#0",
        "four2#0",
        "aggregate%current_tail_offset%8#1",
        "aggregate%tail%9#1",
        "five#0",
        "aggregate%encoded%34#1"
      ]
    },
    "2749": {
      "op": "uncover 5",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "aggregate%current_tail_offset%8#1",
        "aggregate%tail%9#1",
        "five#0",
        "aggregate%encoded%34#1",
        "four1#0"
      ]
    },
    "2751": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%8#1",
        "aggregate%data_length%9#1",
        "aggregate%encoded%34#1",
        "aggregate%tail%9#1",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "aggregate%current_tail_offset%8#1",
        "aggregate%tail%9#1",
        "five#0",
        "aggregate%encoded%34#1",
        "aggregate%data_length%9#1"
      ]
    },
    "2752": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%current_tail_offset%8#1",
        "aggregate%current_tail_offset%8#1 (copy)",
        "aggregate%data_length%9#1",
        "aggregate%encoded%34#1",
        "aggregate%tail%9#1",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "aggregate%current_tail_offset%8#1",
        "aggregate%tail%9#1",
        "five#0",
        "aggregate%encoded%34#1",
        "aggregate%data_length%9#1",
        "aggregate%current_tail_offset%8#1 (copy)"
      ]
    },
    "2754": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%8#1",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%34#1",
        "aggregate%tail%9#1",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "aggregate%current_tail_offset%8#1",
        "aggregate%tail%9#1",
        "five#0",
        "aggregate%encoded%34#1",
        "aggregate%current_tail_offset%9#1"
      ]
    },
    "2755": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "aggregate%current_tail_offset%8#1",
        "aggregate%tail%9#1",
        "five#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%34#1"
      ]
    },
    "2756": {
      "op": "uncover 4",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "aggregate%tail%9#1",
        "five#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%34#1",
        "aggregate%current_tail_offset%8#1"
      ]
    },
    "2758": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%9#1",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%34#1",
        "aggregate%tail%9#1",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "aggregate%tail%9#1",
        "five#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%34#1",
        "aggregate%as_bytes%9#1"
      ]
    },
    "2759": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%34#1",
        "aggregate%offset_as_uint16%9#1",
        "aggregate%tail%9#1",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "aggregate%tail%9#1",
        "five#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%34#1",
        "aggregate%offset_as_uint16%9#1"
      ]
    },
    "2762": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%9#1",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "aggregate%tail%9#1",
        "five#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%35#1"
      ]
    },
    "2763": {
      "op": "uncover 3",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%9#1"
      ]
    },
    "2765": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%9#1",
        "five#0",
        "five#0 (copy)",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%9#1",
        "five#0 (copy)"
      ]
    },
    "2767": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%10#1",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%10#1"
      ]
    },
    "2768": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%current_tail_offset%9#1",
        "aggregate%tail%10#1",
        "aggregate%encoded%35#1"
      ]
    },
    "2769": {
      "op": "uncover 2",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%tail%10#1",
        "aggregate%encoded%35#1",
        "aggregate%current_tail_offset%9#1"
      ]
    },
    "2771": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%10#1",
        "aggregate%encoded%35#1",
        "aggregate%tail%10#1",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%tail%10#1",
        "aggregate%encoded%35#1",
        "aggregate%as_bytes%10#1"
      ]
    },
    "2772": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%35#1",
        "aggregate%offset_as_uint16%10#1",
        "aggregate%tail%10#1",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%tail%10#1",
        "aggregate%encoded%35#1",
        "aggregate%offset_as_uint16%10#1"
      ]
    },
    "2775": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%36#1",
        "aggregate%tail%10#1",
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%tail%10#1",
        "aggregate%encoded%36#1"
      ]
    },
    "2776": {
      "op": "swap",
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%encoded%36#1",
        "aggregate%tail%10#1"
      ]
    },
    "2777": {
      "op": "concat",
      "defined_out": [
        "five#0",
        "four2#0",
        "one#0",
        "three#0",
        "tup1#0",
        "two#0"
      ],
      "stack_out": [
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "tup1#0"
      ]
    },
    "2778": {
      "op": "cover 5",
      "stack_out": [
        "tup1#0",
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0"
      ]
    },
    "2780": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tup1#0",
        "one#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "0x"
      ]
    },
    "2781": {
      "op": "uncover 5",
      "stack_out": [
        "tup1#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "0x",
        "one#0"
      ]
    },
    "2783": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%38#1",
        "five#0",
        "four2#0",
        "three#0",
        "tup1#0",
        "two#0"
      ],
      "stack_out": [
        "tup1#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%encoded%38#1"
      ]
    },
    "2784": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tup1#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%encoded%38#1",
        "0x"
      ]
    },
    "2785": {
      "op": "dig 5",
      "stack_out": [
        "tup1#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%encoded%38#1",
        "0x",
        "two#0 (copy)"
      ]
    },
    "2787": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%38#1",
        "aggregate%tail%11#1",
        "five#0",
        "four2#0",
        "three#0",
        "tup1#0",
        "two#0"
      ],
      "stack_out": [
        "tup1#0",
        "two#0",
        "three#0",
        "four2#0",
        "five#0",
        "aggregate%encoded%38#1",
        "aggregate%tail%11#1"
      ]
    },
    "2788": {
      "op": "cover 2",
      "stack_out": [
        "tup1#0",
        "two#0",
        "three#0",
        "four2#0",
        "aggregate%tail%11#1",
        "five#0",
        "aggregate%encoded%38#1"
      ]
    },
    "2790": {
      "op": "uncover 5",
      "stack_out": [
        "tup1#0",
        "three#0",
        "four2#0",
        "aggregate%tail%11#1",
        "five#0",
        "aggregate%encoded%38#1",
        "two#0"
      ]
    },
    "2792": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%11#1",
        "aggregate%encoded%38#1",
        "aggregate%tail%11#1",
        "five#0",
        "four2#0",
        "three#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "three#0",
        "four2#0",
        "aggregate%tail%11#1",
        "five#0",
        "aggregate%encoded%38#1",
        "aggregate%data_length%11#1"
      ]
    },
    "2793": {
      "op": "pushint 26 // 26",
      "stack_out": [
        "tup1#0",
        "three#0",
        "four2#0",
        "aggregate%tail%11#1",
        "five#0",
        "aggregate%encoded%38#1",
        "aggregate%data_length%11#1",
        "26"
      ]
    },
    "2795": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%38#1",
        "aggregate%tail%11#1",
        "five#0",
        "four2#0",
        "three#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "three#0",
        "four2#0",
        "aggregate%tail%11#1",
        "five#0",
        "aggregate%encoded%38#1",
        "aggregate%current_tail_offset%11#1"
      ]
    },
    "2796": {
      "op": "cover 2",
      "stack_out": [
        "tup1#0",
        "three#0",
        "four2#0",
        "aggregate%tail%11#1",
        "aggregate%current_tail_offset%11#1",
        "five#0",
        "aggregate%encoded%38#1"
      ]
    },
    "2798": {
      "op": "pushint 26 // 26",
      "stack_out": [
        "tup1#0",
        "three#0",
        "four2#0",
        "aggregate%tail%11#1",
        "aggregate%current_tail_offset%11#1",
        "five#0",
        "aggregate%encoded%38#1",
        "26"
      ]
    },
    "2800": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%11#1",
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%38#1",
        "aggregate%tail%11#1",
        "five#0",
        "four2#0",
        "three#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "three#0",
        "four2#0",
        "aggregate%tail%11#1",
        "aggregate%current_tail_offset%11#1",
        "five#0",
        "aggregate%encoded%38#1",
        "aggregate%as_bytes%11#1"
      ]
    },
    "2801": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%38#1",
        "aggregate%offset_as_uint16%11#1",
        "aggregate%tail%11#1",
        "five#0",
        "four2#0",
        "three#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "three#0",
        "four2#0",
        "aggregate%tail%11#1",
        "aggregate%current_tail_offset%11#1",
        "five#0",
        "aggregate%encoded%38#1",
        "aggregate%offset_as_uint16%11#1"
      ]
    },
    "2804": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%39#1",
        "aggregate%tail%11#1",
        "five#0",
        "four2#0",
        "three#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "three#0",
        "four2#0",
        "aggregate%tail%11#1",
        "aggregate%current_tail_offset%11#1",
        "five#0",
        "aggregate%encoded%39#1"
      ]
    },
    "2805": {
      "op": "uncover 5",
      "stack_out": [
        "tup1#0",
        "four2#0",
        "aggregate%tail%11#1",
        "aggregate%current_tail_offset%11#1",
        "five#0",
        "aggregate%encoded%39#1",
        "three#0"
      ]
    },
    "2807": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%40#1",
        "aggregate%tail%11#1",
        "five#0",
        "four2#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "four2#0",
        "aggregate%tail%11#1",
        "aggregate%current_tail_offset%11#1",
        "five#0",
        "aggregate%encoded%40#1"
      ]
    },
    "2808": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "four2#0",
        "aggregate%current_tail_offset%11#1",
        "five#0",
        "aggregate%encoded%40#1",
        "aggregate%tail%11#1"
      ]
    },
    "2810": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%40#1",
        "aggregate%tail%11#1",
        "five#0",
        "four2#0",
        "four2#0 (copy)",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "four2#0",
        "aggregate%current_tail_offset%11#1",
        "five#0",
        "aggregate%encoded%40#1",
        "aggregate%tail%11#1",
        "four2#0 (copy)"
      ]
    },
    "2812": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%encoded%40#1",
        "aggregate%tail%12#1",
        "five#0",
        "four2#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "four2#0",
        "aggregate%current_tail_offset%11#1",
        "five#0",
        "aggregate%encoded%40#1",
        "aggregate%tail%12#1"
      ]
    },
    "2813": {
      "op": "cover 2",
      "stack_out": [
        "tup1#0",
        "four2#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%12#1",
        "five#0",
        "aggregate%encoded%40#1"
      ]
    },
    "2815": {
      "op": "uncover 4",
      "stack_out": [
        "tup1#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%12#1",
        "five#0",
        "aggregate%encoded%40#1",
        "four2#0"
      ]
    },
    "2817": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%data_length%12#1",
        "aggregate%encoded%40#1",
        "aggregate%tail%12#1",
        "five#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%12#1",
        "five#0",
        "aggregate%encoded%40#1",
        "aggregate%data_length%12#1"
      ]
    },
    "2818": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%current_tail_offset%11#1 (copy)",
        "aggregate%data_length%12#1",
        "aggregate%encoded%40#1",
        "aggregate%tail%12#1",
        "five#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%12#1",
        "five#0",
        "aggregate%encoded%40#1",
        "aggregate%data_length%12#1",
        "aggregate%current_tail_offset%11#1 (copy)"
      ]
    },
    "2820": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%11#1",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%40#1",
        "aggregate%tail%12#1",
        "five#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%12#1",
        "five#0",
        "aggregate%encoded%40#1",
        "aggregate%current_tail_offset%12#1"
      ]
    },
    "2821": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "aggregate%current_tail_offset%11#1",
        "aggregate%tail%12#1",
        "five#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%40#1"
      ]
    },
    "2822": {
      "op": "uncover 4",
      "stack_out": [
        "tup1#0",
        "aggregate%tail%12#1",
        "five#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%40#1",
        "aggregate%current_tail_offset%11#1"
      ]
    },
    "2824": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%12#1",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%40#1",
        "aggregate%tail%12#1",
        "five#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%tail%12#1",
        "five#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%40#1",
        "aggregate%as_bytes%12#1"
      ]
    },
    "2825": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%40#1",
        "aggregate%offset_as_uint16%12#1",
        "aggregate%tail%12#1",
        "five#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%tail%12#1",
        "five#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%40#1",
        "aggregate%offset_as_uint16%12#1"
      ]
    },
    "2828": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%41#1",
        "aggregate%tail%12#1",
        "five#0",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%tail%12#1",
        "five#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%41#1"
      ]
    },
    "2829": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "five#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%41#1",
        "aggregate%tail%12#1"
      ]
    },
    "2831": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%41#1",
        "aggregate%tail%12#1",
        "five#0"
      ]
    },
    "2833": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%41#1",
        "aggregate%tail%13#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%encoded%41#1",
        "aggregate%tail%13#1"
      ]
    },
    "2834": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "aggregate%current_tail_offset%12#1",
        "aggregate%tail%13#1",
        "aggregate%encoded%41#1"
      ]
    },
    "2835": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "aggregate%tail%13#1",
        "aggregate%encoded%41#1",
        "aggregate%current_tail_offset%12#1"
      ]
    },
    "2837": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%13#1",
        "aggregate%encoded%41#1",
        "aggregate%tail%13#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%tail%13#1",
        "aggregate%encoded%41#1",
        "aggregate%as_bytes%13#1"
      ]
    },
    "2838": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%41#1",
        "aggregate%offset_as_uint16%13#1",
        "aggregate%tail%13#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%tail%13#1",
        "aggregate%encoded%41#1",
        "aggregate%offset_as_uint16%13#1"
      ]
    },
    "2841": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%42#1",
        "aggregate%tail%13#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%tail%13#1",
        "aggregate%encoded%42#1"
      ]
    },
    "2842": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "aggregate%encoded%42#1",
        "aggregate%tail%13#1"
      ]
    },
    "2843": {
      "op": "concat",
      "defined_out": [
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0"
      ]
    },
    "2844": {
      "op": "dup",
      "defined_out": [
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)"
      ]
    },
    "2845": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)",
        "22"
      ]
    },
    "2847": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#1",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%extract_uint16%0#1"
      ]
    },
    "2848": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "aggregate%extract_uint16%0#1",
        "tup2#0"
      ]
    },
    "2849": {
      "op": "dup",
      "stack_out": [
        "tup1#0",
        "aggregate%extract_uint16%0#1",
        "tup2#0",
        "tup2#0 (copy)"
      ]
    },
    "2850": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "aggregate%extract_uint16%0#1",
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%extract_uint16%0#1",
        "tup2#0",
        "tup2#0 (copy)",
        "24"
      ]
    },
    "2852": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#1",
        "aggregate%extract_uint16%1#1",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%extract_uint16%0#1",
        "tup2#0",
        "aggregate%extract_uint16%1#1"
      ]
    },
    "2853": {
      "op": "dig 1",
      "stack_out": [
        "tup1#0",
        "aggregate%extract_uint16%0#1",
        "tup2#0",
        "aggregate%extract_uint16%1#1",
        "tup2#0 (copy)"
      ]
    },
    "2855": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%extract_uint16%1#1",
        "tup2#0 (copy)",
        "aggregate%extract_uint16%0#1"
      ]
    },
    "2857": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)",
        "aggregate%extract_uint16%0#1",
        "aggregate%extract_uint16%1#1"
      ]
    },
    "2859": {
      "op": "substring3",
      "defined_out": [
        "tup1#0",
        "tup2#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tuple_item%0#0"
      ]
    },
    "2860": {
      "op": "dup",
      "defined_out": [
        "tup1#0",
        "tup2#0",
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)"
      ]
    },
    "2861": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "tup1#0",
        "tup2#0",
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)",
        "18"
      ]
    },
    "2863": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#1",
        "tup1#0",
        "tup2#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tuple_item%0#0",
        "aggregate%extract_uint16%2#1"
      ]
    },
    "2864": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%extract_uint16%2#1",
        "tuple_item%0#0"
      ]
    },
    "2865": {
      "op": "dup",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%extract_uint16%2#1",
        "tuple_item%0#0",
        "tuple_item%0#0 (copy)"
      ]
    },
    "2866": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%2#1",
        "aggregate%len%0#1",
        "tup1#0",
        "tup2#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%extract_uint16%2#1",
        "tuple_item%0#0",
        "aggregate%len%0#1"
      ]
    },
    "2867": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%extract_uint16%2#1",
        "aggregate%len%0#1",
        "tuple_item%0#0"
      ]
    },
    "2868": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%len%0#1",
        "tuple_item%0#0",
        "aggregate%extract_uint16%2#1"
      ]
    },
    "2870": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tuple_item%0#0",
        "aggregate%extract_uint16%2#1",
        "aggregate%len%0#1"
      ]
    },
    "2872": {
      "op": "substring3",
      "defined_out": [
        "tup1#0",
        "tup2#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tuple_item%1#0"
      ]
    },
    "2873": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "tup1#0",
        "tup2#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tuple_item%1#0",
        "2"
      ]
    },
    "2874": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "op": "callsub dynamic_array_pop_fixed_size",
      "defined_out": [
        "tmp%29#0",
        "tmp%30#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "2877": {
      "op": "bury 1",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0"
      ]
    },
    "2879": {
      "op": "dig 1",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "tup2#0 (copy)"
      ]
    },
    "2881": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "tup2#0 (copy)",
        "22"
      ]
    },
    "2883": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#1",
        "tmp%30#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "aggregate%extract_uint16%3#1"
      ]
    },
    "2884": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%extract_uint16%3#1",
        "tmp%30#0"
      ]
    },
    "2885": {
      "op": "dig 2",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%extract_uint16%3#1",
        "tmp%30#0",
        "tup2#0 (copy)"
      ]
    },
    "2887": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%extract_uint16%3#1",
        "tmp%30#0",
        "tup2#0 (copy)",
        "24"
      ]
    },
    "2889": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#1",
        "aggregate%extract_uint16%4#1",
        "tmp%30#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%extract_uint16%3#1",
        "tmp%30#0",
        "aggregate%extract_uint16%4#1"
      ]
    },
    "2890": {
      "op": "dig 3",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%extract_uint16%3#1",
        "tmp%30#0",
        "aggregate%extract_uint16%4#1",
        "tup2#0 (copy)"
      ]
    },
    "2892": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "aggregate%extract_uint16%4#1",
        "tup2#0 (copy)",
        "aggregate%extract_uint16%3#1"
      ]
    },
    "2894": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "tup2#0 (copy)",
        "aggregate%extract_uint16%3#1",
        "aggregate%extract_uint16%4#1"
      ]
    },
    "2896": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%2#1",
        "tmp%30#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "aggregate%substring3%2#1"
      ]
    },
    "2897": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%2#1",
        "aggregate%substring3%2#1 (copy)",
        "tmp%30#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "aggregate%substring3%2#1",
        "aggregate%substring3%2#1 (copy)"
      ]
    },
    "2898": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "aggregate%substring3%2#1",
        "aggregate%substring3%2#1 (copy)",
        "18"
      ]
    },
    "2900": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_offset%0#1",
        "aggregate%substring3%2#1",
        "tmp%30#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "aggregate%substring3%2#1",
        "aggregate%item_offset%0#1"
      ]
    },
    "2901": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "aggregate%item_offset%0#1",
        "aggregate%substring3%2#1"
      ]
    },
    "2902": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "aggregate%item_offset%0#1",
        "aggregate%substring3%2#1",
        "0"
      ]
    },
    "2903": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "aggregate%substring3%2#1",
        "0",
        "aggregate%item_offset%0#1"
      ]
    },
    "2905": {
      "op": "extract3",
      "defined_out": [
        "aggregate%data_up_to_item%0#1",
        "tmp%30#0",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "tmp%30#0",
        "aggregate%data_up_to_item%0#1"
      ]
    },
    "2906": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%data_up_to_item%0#1",
        "tmp%30#0"
      ]
    },
    "2907": {
      "op": "concat",
      "defined_out": [
        "aggregate%updated_data%0#1",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "tup2#0",
        "aggregate%updated_data%0#1"
      ]
    },
    "2908": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0"
      ]
    },
    "2909": {
      "op": "dup",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "tup2#0 (copy)"
      ]
    },
    "2910": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "tup2#0 (copy)",
        "22"
      ]
    },
    "2912": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_offset%1#1",
        "aggregate%updated_data%0#1",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%item_offset%1#1"
      ]
    },
    "2913": {
      "op": "dig 1",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%item_offset%1#1",
        "tup2#0 (copy)"
      ]
    },
    "2915": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%item_offset%1#1",
        "tup2#0 (copy)",
        "0"
      ]
    },
    "2916": {
      "op": "dig 2",
      "defined_out": [
        "0",
        "aggregate%item_offset%1#1",
        "aggregate%item_offset%1#1 (copy)",
        "aggregate%updated_data%0#1",
        "tup1#0",
        "tup2#0",
        "tup2#0 (copy)"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%item_offset%1#1",
        "tup2#0 (copy)",
        "0",
        "aggregate%item_offset%1#1 (copy)"
      ]
    },
    "2918": {
      "op": "extract3",
      "defined_out": [
        "aggregate%data_up_to_item%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%updated_data%0#1",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%item_offset%1#1",
        "aggregate%data_up_to_item%1#1"
      ]
    },
    "2919": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%data_up_to_item%1#1",
        "aggregate%item_offset%1#1"
      ]
    },
    "2920": {
      "op": "dig 2",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%data_up_to_item%1#1",
        "aggregate%item_offset%1#1",
        "tup2#0 (copy)"
      ]
    },
    "2922": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%data_up_to_item%1#1",
        "aggregate%item_offset%1#1",
        "tup2#0 (copy)",
        "24"
      ]
    },
    "2924": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%data_up_to_item%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%updated_data%0#1",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%data_up_to_item%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset%0#1"
      ]
    },
    "2925": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%data_up_to_item%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%1#1"
      ]
    },
    "2926": {
      "op": "dig 3",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%data_up_to_item%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%1#1",
        "tup2#0 (copy)"
      ]
    },
    "2928": {
      "op": "len",
      "defined_out": [
        "aggregate%data_up_to_item%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%total_data_length%0#1",
        "aggregate%updated_data%0#1",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%data_up_to_item%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%1#1",
        "aggregate%total_data_length%0#1"
      ]
    },
    "2929": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "tup2#0",
        "aggregate%data_up_to_item%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%total_data_length%0#1",
        "aggregate%item_offset%1#1"
      ]
    },
    "2930": {
      "op": "uncover 4",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "aggregate%data_up_to_item%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%total_data_length%0#1",
        "aggregate%item_offset%1#1",
        "tup2#0"
      ]
    },
    "2932": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%data_up_to_item%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%next_item_offset%0#1 (copy)",
        "aggregate%total_data_length%0#1",
        "aggregate%updated_data%0#1",
        "tup1#0",
        "tup2#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "aggregate%data_up_to_item%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%total_data_length%0#1",
        "aggregate%item_offset%1#1",
        "tup2#0",
        "aggregate%next_item_offset%0#1 (copy)"
      ]
    },
    "2934": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "aggregate%data_up_to_item%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%1#1",
        "tup2#0",
        "aggregate%next_item_offset%0#1 (copy)",
        "aggregate%total_data_length%0#1"
      ]
    },
    "2936": {
      "op": "substring3",
      "defined_out": [
        "aggregate%data_beyond_item%0#1",
        "aggregate%data_up_to_item%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%updated_data%0#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "aggregate%data_up_to_item%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%1#1",
        "aggregate%data_beyond_item%0#1"
      ]
    },
    "2937": {
      "op": "uncover 3",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%1#1",
        "aggregate%data_beyond_item%0#1",
        "aggregate%data_up_to_item%1#1"
      ]
    },
    "2939": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%data_beyond_item%0#1",
        "aggregate%data_up_to_item%1#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%updated_data%0#1",
        "aggregate%updated_data%0#1 (copy)",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%1#1",
        "aggregate%data_beyond_item%0#1",
        "aggregate%data_up_to_item%1#1",
        "aggregate%updated_data%0#1 (copy)"
      ]
    },
    "2941": {
      "op": "concat",
      "defined_out": [
        "aggregate%data_beyond_item%0#1",
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%updated_data%0#1",
        "aggregate%updated_data%1#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%1#1",
        "aggregate%data_beyond_item%0#1",
        "aggregate%updated_data%1#1"
      ]
    },
    "2942": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%1#1",
        "aggregate%updated_data%1#1",
        "aggregate%data_beyond_item%0#1"
      ]
    },
    "2943": {
      "op": "concat",
      "defined_out": [
        "aggregate%item_offset%1#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%updated_data%0#1",
        "aggregate%updated_data%2#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%1#1",
        "aggregate%updated_data%2#1"
      ]
    },
    "2944": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "aggregate%item_offset%1#1",
        "aggregate%updated_data%2#1",
        "aggregate%next_item_offset%0#1"
      ]
    },
    "2946": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%next_item_offset%0#1",
        "aggregate%item_offset%1#1"
      ]
    },
    "2948": {
      "op": "-",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%updated_data%0#1",
        "aggregate%updated_data%2#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%item_length%0#1"
      ]
    },
    "2949": {
      "op": "cover 2",
      "stack_out": [
        "tup1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%0#1",
        "aggregate%updated_data%2#1"
      ]
    },
    "2951": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%updated_data%0#1"
      ]
    },
    "2952": {
      "op": "len",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%2#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%new_value_length%0#1"
      ]
    },
    "2953": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%updated_data%2#1 (copy)",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%2#1 (copy)"
      ]
    },
    "2955": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "tup1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%new_value_length%0#1",
        "aggregate%updated_data%2#1 (copy)",
        "24"
      ]
    },
    "2957": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset%0#1",
        "aggregate%updated_data%2#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%new_value_length%0#1",
        "aggregate%tail_offset%0#1"
      ]
    },
    "2958": {
      "op": "+",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%tail_offset%1#1",
        "aggregate%updated_data%2#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%item_length%0#1",
        "aggregate%updated_data%2#1",
        "aggregate%tail_offset%1#1"
      ]
    },
    "2959": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%2#1",
        "aggregate%tail_offset%1#1",
        "aggregate%item_length%0#1"
      ]
    },
    "2961": {
      "op": "-",
      "defined_out": [
        "aggregate%tail_offset%2#1",
        "aggregate%updated_data%2#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%2#1",
        "aggregate%tail_offset%2#1"
      ]
    },
    "2962": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%14#1",
        "aggregate%updated_data%2#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%2#1",
        "aggregate%as_bytes%14#1"
      ]
    },
    "2963": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%tail_offset_bytes%0#1",
        "aggregate%updated_data%2#1",
        "tup1#0"
      ],
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%2#1",
        "aggregate%tail_offset_bytes%0#1"
      ]
    },
    "2966": {
      "op": "swap",
      "stack_out": [
        "tup1#0",
        "aggregate%tail_offset_bytes%0#1",
        "aggregate%updated_data%2#1"
      ]
    },
    "2967": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "tup1#0",
        "aggregate%tail_offset_bytes%0#1",
        "aggregate%updated_data%2#1",
        "24"
      ]
    },
    "2969": {
      "op": "uncover 2",
      "stack_out": [
        "tup1#0",
        "aggregate%updated_data%2#1",
        "24",
        "aggregate%tail_offset_bytes%0#1"
      ]
    },
    "2971": {
      "op": "replace3",
      "stack_out": [
        "tup1#0",
        "tup2#0"
      ]
    },
    "2972": {
      "op": "==",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "2973": {
      "error": "tup1 does not match tup2",
      "op": "assert // tup1 does not match tup2",
      "stack_out": []
    },
    "2974": {
      "retsub": true,
      "op": "retsub"
    }
  }
}