debug: PuyaOptions(paths=['arc4_dynamic_arrays'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L110
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L110
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@2: // for_body_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@2: // for_body_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@2: // for_body_L110
debug: Terminated block@2: // for_body_L110
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@4: // for_increment_L110
debug: Terminated block@4: // for_increment_L110
debug: Sealing block@1: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L92
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L110
debug: Sealing block@2: // for_body_L110
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L110
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let head_and_tail#2: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@4) in block@4: // for_increment_L110
debug: Added head_and_tail#2 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1) in block@1: // for_header_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1) (head_and_tail#1) with head_and_tail#2
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1)
debug: Replacing trivial Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#2 <- block@4) (head_and_tail#2) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#2 <- block@4)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1) (head_and_tail#1) with head_and_tail#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#2 <- block@4) (head_and_tail#2) with head_and_tail#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Added new_head#0 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@4) in block@4: // for_increment_L110
debug: Added new_head#3 to Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) in block@1: // for_header_L110
debug: Replacing trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3
debug: Deleting Phi assignment: let new_head#1: bytes = φ(new_head#3 <- block@1)
debug: Replaced trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4) (length_minus_1#1) with length_minus_1#0 in current definition for 4 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4) (popped_header_offset#1) with popped_header_offset#0 in current definition for 4 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4) (popped_offset#1) with popped_offset#0 in current definition for 4 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4) (popped#1) with popped#0 in current definition for 4 blocks
debug: Terminated block@5: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@None: // if_body_L146
debug: Sealing block@None: // else_body_L146
debug: Terminated block@1: // if_body_L146
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Sealing block@None: // ternary_true_L150
debug: Sealing block@None: // ternary_false_L150
debug: Terminated block@3: // ternary_true_L150
debug: Terminated block@4: // ternary_false_L150
debug: Sealing block@5: // ternary_merge_L150
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L150
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L150
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L150
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L150
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L150
debug: Terminated block@6: // for_header_L150
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@7: // for_body_L150
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L150
debug: Terminated block@7: // for_body_L150
debug: Sealing block@8: // for_footer_L150
debug: Terminated block@8: // for_footer_L150
debug: Sealing block@9: // for_increment_L150
debug: Terminated block@9: // for_increment_L150
debug: Sealing block@6: // for_header_L150
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@9) in block@9: // for_increment_L150
debug: Sealing block@7: // for_body_L150
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L150
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L146
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L150
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L150
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L150
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L150
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L150
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L150
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L150
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L150
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L150
debug: Terminated block@10: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L199
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@2: // for_body_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@2: // for_body_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@2: // for_body_L199
debug: Terminated block@2: // for_body_L199
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@4: // for_increment_L199
debug: Terminated block@4: // for_increment_L199
debug: Sealing block@1: // for_header_L199
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L189
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L199
debug: Sealing block@2: // for_body_L199
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@4) in block@4: // for_increment_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1) (array_head_and_tail#1) with array_head_and_tail#2
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1)
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1) (array_head_and_tail#1) with array_head_and_tail#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Added new_head#0 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@4) in block@4: // for_increment_L199
debug: Added new_head#3 to Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3
debug: Deleting Phi assignment: let new_head#1: bytes = φ(new_head#3 <- block@1)
debug: Replaced trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3 in current definition for 0 blocks
debug: Created Phi assignment: let item_offset_adjustment#2: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@4) in block@4: // for_increment_L199
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1) (item_offset_adjustment#1) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1)
debug: Replacing trivial Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#2 <- block@4) (item_offset_adjustment#2) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#2 <- block@4)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1) (item_offset_adjustment#1) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#2 <- block@4) (item_offset_adjustment#2) with item_offset_adjustment#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4) in block@4: // for_increment_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 4 blocks
debug: Terminated block@5: // after_for_L199
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@6: // for_header_L204
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@6: // for_header_L204
debug: Terminated block@6: // for_header_L204
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let range_item%1#2: uint64 = undefined while trying to resolve 'range_item%1' in block@7: // for_body_L204
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@7: // for_body_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let new_head#4: bytes = undefined while trying to resolve 'new_head' in block@7: // for_body_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let item_offset_adjustment#4: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@7: // for_body_L204
debug: Terminated block@7: // for_body_L204
debug: Sealing block@8: // for_footer_L204
debug: Terminated block@8: // for_footer_L204
debug: Sealing block@9: // for_increment_L204
debug: Terminated block@9: // for_increment_L204
debug: Sealing block@6: // for_header_L204
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@5) in block@5: // after_for_L199
debug: Added range_item%1#3 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@5, range_item%1#3 <- block@9) in block@9: // for_increment_L204
debug: Sealing block@7: // for_body_L204
debug: Added range_item%1#1 to Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6) (range_item%1#2) with range_item%1#1
debug: Deleting Phi assignment: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6) (range_item%1#2) with range_item%1#1 in current definition for 2 blocks
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@6: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#3: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#3 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4) in block@4: // for_increment_L199
debug: Replacing trivial Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4) (new_head_and_tail#3) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4)
debug: Replaced trivial Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4) (new_head_and_tail#3) with new_head_and_tail#0 in current definition for 4 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5) in block@5: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#1 <- block@9) in block@9: // for_increment_L204
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6) (new_head_and_tail#1) with new_head_and_tail#2
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6)
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#2 <- block@9) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#2 <- block@9)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6) (new_head_and_tail#1) with new_head_and_tail#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#2 <- block@9) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_head#6: bytes = undefined while trying to resolve 'new_head' in block@6: // for_header_L204
debug: Added new_head#3 to Phi node: let new_head#6: bytes = φ(new_head#3 <- block@5) in block@5: // after_for_L199
debug: Added new_head#5 to Phi node: let new_head#6: bytes = φ(new_head#3 <- block@5, new_head#5 <- block@9) in block@9: // for_increment_L204
debug: Added new_head#6 to Phi node: let new_head#4: bytes = φ(new_head#6 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let new_head#4: bytes = φ(new_head#6 <- block@6) (new_head#4) with new_head#6
debug: Deleting Phi assignment: let new_head#4: bytes = φ(new_head#6 <- block@6)
debug: Replaced trivial Phi node: let new_head#4: bytes = φ(new_head#6 <- block@6) (new_head#4) with new_head#6 in current definition for 0 blocks
debug: Created Phi assignment: let item_offset_adjustment#5: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@6: // for_header_L204
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5) in block@5: // after_for_L199
debug: Added item_offset_adjustment#4 to Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#4 <- block@9) in block@9: // for_increment_L204
debug: Added item_offset_adjustment#5 to Phi node: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6) (item_offset_adjustment#4) with item_offset_adjustment#5
debug: Deleting Phi assignment: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6)
debug: Replacing trivial Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#5 <- block@9) (item_offset_adjustment#5) with item_offset_adjustment#3
debug: Deleting Phi assignment: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#5 <- block@9)
debug: Replaced trivial Phi node: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6) (item_offset_adjustment#4) with item_offset_adjustment#5 in current definition for 3 blocks
debug: Replaced trivial Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#5 <- block@9) (item_offset_adjustment#5) with item_offset_adjustment#3 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@6: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4) in block@4: // for_increment_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4) (array_items_count#2) with array_items_count#0 in current definition for 4 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5) in block@5: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9) in block@9: // for_increment_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9) (array_items_count#1) with array_items_count#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@6: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5) in block@5: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9) in block@9: // for_increment_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9) (new_items_count#2) with new_items_count#0 in current definition for 4 blocks
debug: Created Phi assignment: let array_head_and_tail#3: bytes = undefined while trying to resolve 'array_head_and_tail' in block@6: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5) in block@5: // after_for_L199
debug: Added array_head_and_tail#3 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9) in block@9: // for_increment_L204
debug: Replacing trivial Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9) (array_head_and_tail#3) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9)
debug: Replaced trivial Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9) (array_head_and_tail#3) with array_head_and_tail#0 in current definition for 4 blocks
debug: Terminated block@10: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L269
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@2: // for_body_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@2: // for_body_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@2: // for_body_L269
debug: Terminated block@2: // for_body_L269
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@4: // for_increment_L269
debug: Terminated block@4: // for_increment_L269
debug: Sealing block@1: // for_header_L269
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L252
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L269
debug: Sealing block@2: // for_body_L269
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let new_head_and_tail#3: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@4) in block@4: // for_increment_L269
debug: Added new_head_and_tail#3 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1) (new_head_and_tail#1) with new_head_and_tail#3
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1) (new_head_and_tail#1) with new_head_and_tail#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_item_length#2: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@4) in block@4: // for_increment_L269
debug: Added new_item_length#2 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1) (new_item_length#1) with new_item_length#2
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1)
debug: Replacing trivial Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#2 <- block@4) (new_item_length#2) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#2 <- block@4)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1) (new_item_length#1) with new_item_length#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#2 <- block@4) (new_item_length#2) with new_item_length#0 in current definition for 4 blocks
debug: Created Phi assignment: let original_item_length#2: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Added original_item_length#0 to Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@4) in block@4: // for_increment_L269
debug: Added original_item_length#2 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1) (original_item_length#1) with original_item_length#2
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1)
debug: Replacing trivial Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#2 <- block@4) (original_item_length#2) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#2 <- block@4)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1) (original_item_length#1) with original_item_length#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#2 <- block@4) (original_item_length#2) with original_item_length#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L269
debug: Terminated block@5: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L327
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L327
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@2: // for_body_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@2: // for_body_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@2: // for_body_L327
debug: Terminated block@2: // for_body_L327
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@4: // for_increment_L327
debug: Terminated block@4: // for_increment_L327
debug: Sealing block@1: // for_header_L327
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L306
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L327
debug: Sealing block@2: // for_body_L327
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L327
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_offset#3: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#3: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#3: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@4) in block@4: // for_increment_L327
debug: Added tail_offset#3 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1) in block@1: // for_header_L327
debug: Replacing trivial Phi node: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1) (tail_offset#1) with tail_offset#3
debug: Deleting Phi assignment: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1)
debug: Replaced trivial Phi node: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1) (tail_offset#1) with tail_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let array_head_and_tail#3: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4) in block@4: // for_increment_L327
debug: Added array_head_and_tail#3 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1) in block@1: // for_header_L327
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1) (array_head_and_tail#1) with array_head_and_tail#3
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1) (array_head_and_tail#1) with array_head_and_tail#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L327
debug: Terminated block@5: // after_for_L327
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L35
debug: Terminated block@0: // L35
debug: Sealing block@0: // L128
debug: Terminated block@0: // L128
debug: Sealing block@0: // L133
debug: Terminated block@0: // L133
debug: Sealing block@0: // L138
debug: Terminated block@0: // L138
debug: Sealing block@0: // L143
debug: Terminated block@0: // L143
debug: Sealing block@0: // L118
debug: Terminated block@0: // L118
debug: Sealing block@0: // L123
debug: Terminated block@0: // L123
debug: Sealing block@0: // L51
debug: Terminated block@0: // L51
debug: Sealing block@0: // L103
debug: Terminated block@0: // L103
debug: Sealing block@0: // L108
debug: Terminated block@0: // L108
debug: Sealing block@0: // L113
debug: Terminated block@0: // L113
debug: Sealing block@0: // L70
debug: Terminated block@0: // L70
debug: Sealing block@0: // L85
debug: Terminated block@0: // L85
debug: Sealing block@0: // L33
debug: Terminated block@0: // L33
debug: Sealing block@None: // abi_routing_L33
debug: Sealing block@None: // bare_routing_L33
debug: Terminated block@1: // abi_routing_L33
debug: Sealing block@None: // switch_case_default_L33
debug: Sealing block@None: // test_static_elements_route_L35
debug: Sealing block@None: // test_dynamic_elements_route_L51
debug: Sealing block@None: // test_mixed_single_dynamic_elements_route_L70
debug: Sealing block@None: // test_mixed_multiple_dynamic_elements_route_L85
debug: Terminated block@2: // test_static_elements_route_L35
debug: Terminated block@3: // test_dynamic_elements_route_L51
debug: Terminated block@4: // test_mixed_single_dynamic_elements_route_L70
debug: Terminated block@5: // test_mixed_multiple_dynamic_elements_route_L85
debug: Terminated block@6: // switch_case_default_L33
debug: Sealing block@7: // switch_case_next_L33
debug: Terminated block@7: // switch_case_next_L33
debug: Terminated block@8: // bare_routing_L33
debug: Sealing block@None: // reject_bare_on_completion_L33
debug: Sealing block@None: // create_L33
debug: Terminated block@9: // create_L33
debug: Terminated block@10: // reject_bare_on_completion_L33
debug: Sealing block@None: // switch_case_next_L33
debug: Sealing block@None: // after_if_else_L33
debug: Sealing block@0: // L33
debug: Terminated block@0: // L33
debug: Output IR to arc4_dynamic_arrays/out/DynamicArrayContract.ssa.ir
info: Optimizing test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%2#0 NoOp) to (! tmp%2#0)
debug: Simplified (== tmp%5#0 NoOp) to (! tmp%5#0)
debug: Simplified (== tmp%8#0 NoOp) to (! tmp%8#0)
debug: Simplified (== tmp%11#0 NoOp) to (! tmp%11#0)
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: inlining the default target of a switch/goto nth
debug: adding block@1: // abi_routing_L33 as a predecessor of block@7: // switch_case_next_L33 due to inlining of block@6: // switch_case_default_L33
debug: simplified terminator of block@1: // abi_routing_L33 from switch tmp%1#0 {method "test_static_elements()void" => block@2, method "test_dynamic_elements()void" => block@3, method "test_mixed_single_dynamic_elements()void" => block@4, method "test_mixed_multiple_dynamic_elements()void" => block@5, * => block@6} to switch tmp%1#0 {method "test_static_elements()void" => block@2, method "test_dynamic_elements()void" => block@3, method "test_mixed_single_dynamic_elements()void" => block@4, method "test_mixed_multiple_dynamic_elements()void" => block@5, * => block@7}
debug: simplifying a switch with constants into goto nth
debug: simplified terminator of block@8: // bare_routing_L33 from switch tmp%14#0 {0u => block@9, * => block@10} to goto_nth [block@9][tmp%14#0] else goto block@10
debug: inlining the default target of a switch/goto nth
debug: simplified terminator of block@1: // abi_routing_L33 from switch tmp%1#0 {method "test_static_elements()void" => block@2, method "test_dynamic_elements()void" => block@3, method "test_mixed_single_dynamic_elements()void" => block@4, method "test_mixed_multiple_dynamic_elements()void" => block@5, * => block@7} to switch tmp%1#0 {method "test_static_elements()void" => block@2, method "test_dynamic_elements()void" => block@3, method "test_mixed_single_dynamic_elements()void" => block@4, method "test_mixed_multiple_dynamic_elements()void" => block@5, * => fail // reject transaction}
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@8: // bare_routing_L33 from goto_nth [block@9][tmp%14#0] else goto block@10 to goto tmp%14#0 ? block@10 : block@9
debug: inlining condition branch to err block into an assert false
debug: simplified terminator of block@8: // bare_routing_L33 from goto tmp%14#0 ? block@10 : block@9 to goto block@9
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@7: // switch_case_next_L33 into block@6: // switch_case_default_L33
debug: Merged linear block@9: // create_L33 into block@8: // bare_routing_L33
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@6: // switch_case_default_L33, block@10: // reject_bare_on_completion_L33
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: array_data%0#0, byte_array1#0
debug: Replacing {array_data%0#0} with byte_array1#0 made 1 modifications
debug: Found equivalence set: array_data%1#0, byte_array2#0
debug: Replacing {array_data%1#0} with byte_array2#0 made 1 modifications
debug: Found equivalence set: encoded_tuple_buffer%0#2, struct1#0, copy%0#0, copy%1#0
debug: Replacing {encoded_tuple_buffer%0#2, copy%0#0, copy%1#0} with struct1#0 made 3 modifications
debug: Found equivalence set: encoded_tuple_buffer%1#2, struct2#0, copy%2#0, assigned_value%0#0
debug: Replacing {encoded_tuple_buffer%1#2, copy%2#0, assigned_value%0#0} with struct2#0 made 2 modifications
debug: Found equivalence set: array_data%2#0, array#0
debug: Replacing {array_data%2#0} with array#0 made 1 modifications
debug: Found equivalence set: updated_target%0#0, array#1
debug: Replacing {updated_target%0#0} with array#1 made 1 modifications
debug: Found equivalence set: data%0#1, array#2
debug: Replacing {data%0#1} with array#2 made 1 modifications
debug: Found equivalence set: data%1#1, array#3
debug: Replacing {data%1#1} with array#3 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x tmp%0#0) to tmp%0#0
debug: Simplified (concat 0x result%1#0) to result%1#0
debug: Simplified (concat 0x tmp%2#0) to tmp%2#0
debug: Simplified (concat 0x result%3#0) to result%3#0
debug: Simplified (concat 0x tmp%4#0) to tmp%4#0
debug: Simplified (concat 0x tmp%5#0) to tmp%5#0
debug: Simplified (concat 0x struct1#0) to struct1#0
debug: Simplified (replace3 array#0 12u struct2#0) to ((replace2 12) array#0 struct2#0)
debug: Simplified (* 0u 10u) to 0u
debug: Simplified (* 1u 10u) to 10u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable current_tail_offset%0#0
debug: Removing unused variable encoded_tuple_buffer%0#0
debug: Removing unused variable current_tail_offset%1#0
debug: Removing unused variable encoded_tuple_buffer%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let array_head_and_tail%1#0: bytes = ((extract 2 0) array#1) with copy of existing registers [Register(ir_type=bytes, name='array_head_and_tail%0', version=0, source_location=arc4_dynamic_arrays/contract.py:45:12-20)]
debug: Found equivalence set: tmp%0#0, result%0#0
debug: Replacing {result%0#0} with tmp%0#0 made 1 modifications
debug: Found equivalence set: result%1#0, byte_array1#0
debug: Replacing {result%1#0} with byte_array1#0 made 1 modifications
debug: Found equivalence set: tmp%2#0, result%2#0
debug: Replacing {result%2#0} with tmp%2#0 made 1 modifications
debug: Found equivalence set: result%3#0, byte_array2#0
debug: Replacing {result%3#0} with byte_array2#0 made 1 modifications
debug: Found equivalence set: tmp%4#0, encoded_tuple_buffer%0#1
debug: Replacing {encoded_tuple_buffer%0#1} with tmp%4#0 made 1 modifications
debug: Found equivalence set: tmp%5#0, encoded_tuple_buffer%1#1
debug: Replacing {encoded_tuple_buffer%1#1} with tmp%5#0 made 1 modifications
debug: Found equivalence set: struct1#0, result%4#0
debug: Replacing {result%4#0} with struct1#0 made 1 modifications
debug: Found equivalence set: array_head_and_tail%0#0, array_head_and_tail%1#0
debug: Replacing {array_head_and_tail%1#0} with array_head_and_tail%0#0 made 1 modifications
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte1
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte2
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte3
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte4
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_uint1
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_uint2
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: encoded_tuple_buffer%0#4, struct1#0, copy%0#0, copy%1#0, copy%2#0
debug: Replacing {encoded_tuple_buffer%0#4, copy%0#0, copy%1#0, copy%2#0} with struct1#0 made 7 modifications
debug: Found equivalence set: encoded_tuple_buffer%1#4, struct2#0, copy%3#0, assigned_value%0#0
debug: Replacing {encoded_tuple_buffer%1#4, copy%3#0, assigned_value%0#0} with struct2#0 made 2 modifications
debug: Found equivalence set: array_data%0#0, array#0
debug: Replacing {array_data%0#0} with array#0 made 1 modifications
debug: Found equivalence set: result%5#0, r_head_and_tail%0#0
debug: Replacing {r_head_and_tail%0#0} with result%5#0 made 1 modifications
debug: Found equivalence set: concat_result%0#0, array#1
debug: Replacing {concat_result%0#0} with array#1 made 1 modifications
debug: Found equivalence set: updated_value%0#0, array#2
debug: Replacing {updated_value%0#0} with array#2 made 1 modifications
debug: Found equivalence set: data%0#1, array#3
debug: Replacing {data%0#1} with array#3 made 1 modifications
debug: Found equivalence set: data%1#1, array#4
debug: Replacing {data%1#1} with array#4 made 1 modifications
debug: Found equivalence set: data%2#1, array#5
debug: Replacing {data%2#1} with array#5 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified ((extract 6 2) value_as_bytes%0#0) to 0x0004
debug: Simplified (concat 0x value_as_uint16%0#0) to value_as_uint16%0#0
debug: Simplified ((extract 6 2) value_as_bytes%2#0) to 0x0004
debug: Simplified (concat 0x value_as_uint16%2#0) to value_as_uint16%2#0
debug: Simplified ((extract 6 2) as_bytes%0#0) to 0x0004
debug: Simplified (concat 0x next_item_head%0#0) to next_item_head%0#0
debug: Simplified ((extract 6 2) as_bytes%2#0) to 0x0002
debug: Simplified (concat 0x next_item_head%2#0) to next_item_head%2#0
debug: Simplified (* 0u 2u) to 0u
debug: Simplified (+ 0u 1u) to 1u
debug: Simplified (* 1u 2u) to 2u
debug: Simplified (+ 1u 1u) to 2u
debug: Simplified (* 2u 2u) to 4u
debug: Simplified (+ 2u 1u) to 3u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable current_tail_offset%0#0
debug: Removing unused variable encoded_tuple_buffer%0#0
debug: Removing unused variable value_as_bytes%0#0
debug: Removing unused variable current_tail_offset%0#2
debug: Removing unused variable current_tail_offset%1#0
debug: Removing unused variable encoded_tuple_buffer%1#0
debug: Removing unused variable value_as_bytes%2#0
debug: Removing unused variable current_tail_offset%1#2
debug: Removing unused variable as_bytes%0#0
debug: Removing unused variable tail_offset%1#0
debug: Removing unused variable as_bytes%2#0
debug: Removing unused variable tail_offset%2#0
debug: Removing unused variable r_count%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let next_item_len%1#0: uint64 = (len struct1#0) with copy of existing registers [Register(ir_type=uint64, name='next_item_len%0', version=0, source_location=arc4_dynamic_arrays/contract.py:55:16-65)]
debug: Replacing redundant declaration let next_item_len%2#0: uint64 = (len struct1#0) with copy of existing registers [Register(ir_type=uint64, name='next_item_len%0', version=0, source_location=arc4_dynamic_arrays/contract.py:55:16-65)]
debug: Replacing redundant declaration let array_head_and_tail%1#0: bytes = ((extract 2 0) array#2) with copy of existing registers [Register(ir_type=bytes, name='array_head_and_tail%0', version=0, source_location=arc4_dynamic_arrays/contract.py:59:12-20)]
debug: Replacing redundant declaration let array_length%1#0: uint64 = (extract_uint16 array#2 0u) with copy of existing registers [Register(ir_type=uint64, name='array_length%0', version=0, source_location=arc4_dynamic_arrays/contract.py:59:12-20)]
debug: Replacing redundant declaration let array_head_and_tail%2#0: bytes = ((extract 2 0) array#2) with copy of existing registers [Register(ir_type=bytes, name='array_head_and_tail%0', version=0, source_location=arc4_dynamic_arrays/contract.py:59:12-20)]
debug: Replacing redundant declaration let array_length%2#0: uint64 = (extract_uint16 array#2 0u) with copy of existing registers [Register(ir_type=uint64, name='array_length%0', version=0, source_location=arc4_dynamic_arrays/contract.py:59:12-20)]
debug: Found equivalence set: value_as_uint16%0#0, encoded_tuple_buffer%0#1
debug: Replacing {encoded_tuple_buffer%0#1} with value_as_uint16%0#0 made 1 modifications
debug: Found equivalence set: value_as_uint16%2#0, encoded_tuple_buffer%1#1
debug: Replacing {encoded_tuple_buffer%1#1} with value_as_uint16%2#0 made 1 modifications
debug: Found equivalence set: next_item_head%0#0, result%0#0
debug: Replacing {result%0#0} with next_item_head%0#0 made 1 modifications
debug: Found equivalence set: next_item_len%0#0, next_item_len%1#0, next_item_len%2#0
debug: Found equivalence set: next_item_head%2#0, result%4#0
debug: Replacing {result%4#0} with next_item_head%2#0 made 1 modifications
debug: Found equivalence set: array_head_and_tail%0#0, array_head_and_tail%1#0, array_head_and_tail%2#0
debug: Replacing {array_head_and_tail%1#0, array_head_and_tail%2#0} with array_head_and_tail%0#0 made 8 modifications
debug: Found equivalence set: array_length%0#0, array_length%1#0, array_length%2#0
debug: Replacing {array_length%1#0, array_length%2#0} with array_length%0#0 made 2 modifications
debug: Replacing redundant declaration let end_of_array%1#0: uint64 = (len array_head_and_tail%0#0) with copy of existing registers [Register(ir_type=uint64, name='end_of_array%0', version=0, source_location=arc4_dynamic_arrays/contract.py:59:12-20)]
debug: Replacing redundant declaration let end_of_array%2#0: uint64 = (len array_head_and_tail%0#0) with copy of existing registers [Register(ir_type=uint64, name='end_of_array%0', version=0, source_location=arc4_dynamic_arrays/contract.py:59:12-20)]
debug: Found equivalence set: end_of_array%0#0, end_of_array%1#0, end_of_array%2#0
debug: Replacing {end_of_array%1#0, end_of_array%2#0} with end_of_array%0#0 made 2 modifications
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_string1
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_string2
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_string3
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: encoded_tuple_buffer%0#4, struct1#0, copy%2#0, assigned_value%0#0
debug: Replacing {encoded_tuple_buffer%0#4, copy%2#0, assigned_value%0#0} with struct1#0 made 2 modifications
debug: Found equivalence set: encoded_tuple_buffer%1#4, struct2#0, copy%0#0, copy%1#0
debug: Replacing {encoded_tuple_buffer%1#4, copy%0#0, copy%1#0} with struct2#0 made 5 modifications
debug: Found equivalence set: array_data%0#0, array#0
debug: Replacing {array_data%0#0} with array#0 made 1 modifications
debug: Found equivalence set: result%1#0, r_head_and_tail%0#0
debug: Replacing {r_head_and_tail%0#0} with result%1#0 made 1 modifications
debug: Found equivalence set: concat_result%0#0, array#1
debug: Replacing {concat_result%0#0} with array#1 made 1 modifications
debug: Found equivalence set: result%3#0, r_head_and_tail%1#0
debug: Replacing {r_head_and_tail%1#0} with result%3#0 made 1 modifications
debug: Found equivalence set: concat_result%1#0, array#2
debug: Replacing {concat_result%1#0} with array#2 made 1 modifications
debug: Found equivalence set: updated_value%0#0, array#3
debug: Replacing {updated_value%0#0} with array#3 made 1 modifications
debug: Found equivalence set: data%0#1, array#4
debug: Replacing {data%0#1} with array#4 made 1 modifications
debug: Found equivalence set: data%1#1, array#5
debug: Replacing {data%1#1} with array#5 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x tmp%0#0) to tmp%0#0
debug: Simplified ((extract 6 2) value_as_bytes%0#0) to 0x0012
debug: Simplified (concat 0x tmp%3#0) to tmp%3#0
debug: Simplified ((extract 6 2) value_as_bytes%1#0) to 0x0012
debug: Simplified (concat 0x0000 0x) to 0x0000
debug: Simplified ((extract 6 2) as_bytes%0#0) to 0x0002
debug: Simplified (concat 0x next_item_head%0#0) to next_item_head%0#0
debug: Simplified ((extract 6 2) as_bytes%1#0) to 0x0002
debug: Simplified (concat 0x next_item_head%1#0) to next_item_head%1#0
debug: Simplified (* 0u 2u) to 0u
debug: Simplified (+ 0u 1u) to 1u
debug: Simplified (* 1u 2u) to 2u
debug: Simplified (+ 1u 1u) to 2u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable current_tail_offset%0#0
debug: Removing unused variable encoded_tuple_buffer%0#0
debug: Removing unused variable value_as_bytes%0#0
debug: Removing unused variable current_tail_offset%0#1
debug: Removing unused variable current_tail_offset%1#0
debug: Removing unused variable encoded_tuple_buffer%1#0
debug: Removing unused variable value_as_bytes%1#0
debug: Removing unused variable current_tail_offset%1#1
debug: Removing unused variable as_bytes%0#0
debug: Removing unused variable tail_offset%0#0
debug: Removing unused variable r_count%0#0
debug: Removing unused variable as_bytes%1#0
debug: Removing unused variable tail_offset%1#0
debug: Removing unused variable r_count%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let next_item_len%1#0: uint64 = (len struct2#0) with copy of existing registers [Register(ir_type=uint64, name='next_item_len%0', version=0, source_location=arc4_dynamic_arrays/contract.py:75:8-36)]
debug: Replacing redundant declaration let array_head_and_tail%1#0: bytes = ((extract 2 0) array#3) with copy of existing registers [Register(ir_type=bytes, name='array_head_and_tail%0', version=0, source_location=arc4_dynamic_arrays/contract.py:79:12-20)]
debug: Replacing redundant declaration let array_length%1#0: uint64 = (extract_uint16 array#3 0u) with copy of existing registers [Register(ir_type=uint64, name='array_length%0', version=0, source_location=arc4_dynamic_arrays/contract.py:79:12-20)]
debug: Found equivalence set: tmp%0#0, encoded_tuple_buffer%0#1
debug: Replacing {encoded_tuple_buffer%0#1} with tmp%0#0 made 1 modifications
debug: Found equivalence set: tmp%3#0, encoded_tuple_buffer%1#1
debug: Replacing {encoded_tuple_buffer%1#1} with tmp%3#0 made 1 modifications
debug: Found equivalence set: next_item_head%0#0, result%0#0
debug: Replacing {result%0#0} with next_item_head%0#0 made 1 modifications
debug: Found equivalence set: next_item_head%1#0, result%2#0
debug: Replacing {result%2#0} with next_item_head%1#0 made 1 modifications
debug: Found equivalence set: next_item_len%0#0, next_item_len%1#0
debug: Found equivalence set: array_head_and_tail%0#0, array_head_and_tail%1#0
debug: Replacing {array_head_and_tail%1#0} with array_head_and_tail%0#0 made 4 modifications
debug: Found equivalence set: array_length%0#0, array_length%1#0
debug: Replacing {array_length%1#0} with array_length%0#0 made 1 modifications
debug: Replacing redundant declaration let end_of_array%1#0: uint64 = (len array_head_and_tail%0#0) with copy of existing registers [Register(ir_type=uint64, name='end_of_array%0', version=0, source_location=arc4_dynamic_arrays/contract.py:79:12-20)]
debug: Found equivalence set: end_of_array%0#0, end_of_array%1#0
debug: Replacing {end_of_array%1#0} with end_of_array%0#0 made 1 modifications
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: encoded_tuple_buffer%0#7, struct1#0, copy%0#0, copy%1#0
debug: Replacing {encoded_tuple_buffer%0#7, copy%0#0, copy%1#0} with struct1#0 made 5 modifications
debug: Found equivalence set: encoded_tuple_buffer%1#7, struct2#0, copy%2#0, assigned_value%0#0
debug: Replacing {encoded_tuple_buffer%1#7, copy%2#0, assigned_value%0#0} with struct2#0 made 2 modifications
debug: Found equivalence set: array_data%0#0, array#0
debug: Replacing {array_data%0#0} with array#0 made 1 modifications
debug: Found equivalence set: updated_value%0#0, array#1
debug: Replacing {updated_value%0#0} with array#1 made 1 modifications
debug: Found equivalence set: data%0#1, array#2
debug: Replacing {data%0#1} with array#2 made 1 modifications
debug: Found equivalence set: data%1#1, array#3
debug: Replacing {data%1#1} with array#3 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x tmp%0#0) to tmp%0#0
debug: Simplified ((extract 6 2) value_as_bytes%0#0) to 0x001c
debug: Simplified (concat 0x tmp%5#0) to tmp%5#0
debug: Simplified ((extract 6 2) value_as_bytes%2#0) to 0x001c
debug: Simplified ((extract 6 2) as_bytes%0#0) to 0x0004
debug: Simplified (concat 0x next_item_head%0#0) to next_item_head%0#0
debug: Simplified (* 0u 2u) to 0u
debug: Simplified (+ 0u 1u) to 1u
debug: Simplified (* 1u 2u) to 2u
debug: Simplified (+ 1u 1u) to 2u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable current_tail_offset%0#0
debug: Removing unused variable encoded_tuple_buffer%0#0
debug: Removing unused variable value_as_bytes%0#0
debug: Removing unused variable current_tail_offset%0#2
debug: Removing unused variable current_tail_offset%1#0
debug: Removing unused variable encoded_tuple_buffer%1#0
debug: Removing unused variable value_as_bytes%2#0
debug: Removing unused variable current_tail_offset%1#2
debug: Removing unused variable as_bytes%0#0
debug: Removing unused variable tail_offset%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let next_item_len%1#0: uint64 = (len struct1#0) with copy of existing registers [Register(ir_type=uint64, name='next_item_len%0', version=0, source_location=arc4_dynamic_arrays/contract.py:93:16-65)]
debug: Replacing redundant declaration let array_head_and_tail%1#0: bytes = ((extract 2 0) array#1) with copy of existing registers [Register(ir_type=bytes, name='array_head_and_tail%0', version=0, source_location=arc4_dynamic_arrays/contract.py:96:12-20)]
debug: Replacing redundant declaration let array_length%1#0: uint64 = (extract_uint16 array#1 0u) with copy of existing registers [Register(ir_type=uint64, name='array_length%0', version=0, source_location=arc4_dynamic_arrays/contract.py:96:12-20)]
debug: Found equivalence set: tmp%0#0, encoded_tuple_buffer%0#1
debug: Replacing {encoded_tuple_buffer%0#1} with tmp%0#0 made 1 modifications
debug: Found equivalence set: tmp%5#0, encoded_tuple_buffer%1#1
debug: Replacing {encoded_tuple_buffer%1#1} with tmp%5#0 made 1 modifications
debug: Found equivalence set: next_item_head%0#0, result%0#0
debug: Replacing {result%0#0} with next_item_head%0#0 made 1 modifications
debug: Found equivalence set: next_item_len%0#0, next_item_len%1#0
debug: Found equivalence set: array_head_and_tail%0#0, array_head_and_tail%1#0
debug: Replacing {array_head_and_tail%1#0} with array_head_and_tail%0#0 made 4 modifications
debug: Found equivalence set: array_length%0#0, array_length%1#0
debug: Replacing {array_length%1#0} with array_length%0#0 made 1 modifications
debug: Replacing redundant declaration let end_of_array%1#0: uint64 = (len array_head_and_tail%0#0) with copy of existing registers [Register(ir_type=uint64, name='end_of_array%0', version=0, source_location=arc4_dynamic_arrays/contract.py:96:12-20)]
debug: Found equivalence set: end_of_array%0#0, end_of_array%1#0
debug: Replacing {end_of_array%1#0} with end_of_array%0#0 made 1 modifications
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_pop_fixed_size
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_pop_dynamic_element
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: range_item%0#1, head_offset#0
debug: Replacing {range_item%0#1} with head_offset#0 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // for_footer_L110 with block@2: // for_body_L110 in block@4: // for_increment_L110
debug: Merged linear block@3: // for_footer_L110 into block@2: // for_body_L110
debug: Replaced predecessor block@4: // for_increment_L110 with block@2: // for_body_L110 in block@1: // for_header_L110
debug: Merged linear block@4: // for_increment_L110 into block@2: // for_body_L110
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%1#0: uint64 = (* length_minus_1#0 2u) with copy of existing registers [Register(ir_type=uint64, name='popped_header_offset', version=0, source_location=<algopy>/algopy_lib_arc4.py:103:4-24)]
debug: Found equivalence set: popped_header_offset#0, tmp%1#0
debug: Replacing {tmp%1#0} with popped_header_offset#0 made 1 modifications
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_concat_dynamic_element
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: range_item%0#1, head_offset#0
debug: Replacing {range_item%0#1} with head_offset#0 made 3 modifications
debug: Found equivalence set: range_item%1#1, head_offset#1
debug: Replacing {range_item%1#1} with head_offset#1 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // for_footer_L199 with block@2: // for_body_L199 in block@4: // for_increment_L199
debug: Merged linear block@3: // for_footer_L199 into block@2: // for_body_L199
debug: Replaced predecessor block@4: // for_increment_L199 with block@2: // for_body_L199 in block@1: // for_header_L199
debug: Merged linear block@4: // for_increment_L199 into block@2: // for_body_L199
debug: Replaced predecessor block@8: // for_footer_L204 with block@7: // for_body_L204 in block@9: // for_increment_L204
debug: Merged linear block@8: // for_footer_L204 into block@7: // for_body_L204
debug: Replaced predecessor block@9: // for_increment_L204 with block@7: // for_body_L204 in block@6: // for_header_L204
debug: Merged linear block@9: // for_increment_L204 into block@7: // for_body_L204
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%4#0: uint64 = (* new_items_count#0 2u) with copy of existing registers [Register(ir_type=uint64, name='item_offset_adjustment', version=0, source_location=<algopy>/algopy_lib_arc4.py:198:4-26)]
debug: Replacing redundant declaration let tmp%12#0: uint64 = (* array_items_count#0 2u) with copy of existing registers [Register(ir_type=uint64, name='tmp%0', version=0, source_location=<algopy>/algopy_lib_arc4.py:199:33-64)]
debug: Replacing redundant declaration let tmp%13#0: uint64 = (len array_head_and_tail#0) with copy of existing registers [Register(ir_type=uint64, name='item_offset_adjustment', version=3, source_location=<algopy>/algopy_lib_arc4.py:203:4-26)]
debug: Replacing redundant declaration let tmp%16#0: uint64 = (* new_items_count#0 2u) with copy of existing registers [Register(ir_type=uint64, name='tmp%4', version=0, source_location=<algopy>/algopy_lib_arc4.py:204:33-62)]
debug: Found equivalence set: item_offset_adjustment#0, tmp%4#0, tmp%16#0
debug: Replacing {tmp%4#0, tmp%16#0} with item_offset_adjustment#0 made 2 modifications
debug: Found equivalence set: tmp%0#0, tmp%12#0
debug: Replacing {tmp%12#0} with tmp%0#0 made 1 modifications
debug: Found equivalence set: item_offset_adjustment#3, tmp%13#0
debug: Replacing {tmp%13#0} with item_offset_adjustment#3 made 1 modifications
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_replace_dynamic_element
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.static_array_replace_dynamic_element
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%9#0, range_item%0#0
debug: Replacing {range_item%0#0} with tmp%9#0 made 1 modifications
debug: Found equivalence set: range_item%0#1, head_offset#0
debug: Replacing {range_item%0#1} with head_offset#0 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // for_footer_L269 with block@2: // for_body_L269 in block@4: // for_increment_L269
debug: Merged linear block@3: // for_footer_L269 into block@2: // for_body_L269
debug: Replaced predecessor block@4: // for_increment_L269 with block@2: // for_body_L269 in block@1: // for_header_L269
debug: Merged linear block@4: // for_increment_L269 into block@2: // for_body_L269
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%8#0: uint64 = (+ index#0 1u) with copy of existing registers [Register(ir_type=uint64, name='tmp%1', version=0, source_location=<algopy>/algopy_lib_arc4.py:257:60-69)]
debug: Found equivalence set: tmp%1#0, tmp%8#0
debug: Replacing {tmp%8#0} with tmp%1#0 made 1 modifications
debug: Replacing redundant declaration let tmp%9#0: uint64 = (* tmp%1#0 2u) with copy of existing registers [Register(ir_type=uint64, name='tmp%2', version=0, source_location=<algopy>/algopy_lib_arc4.py:257:59-74)]
debug: Found equivalence set: tmp%2#0, tmp%9#0
debug: Replacing {tmp%9#0} with tmp%2#0 made 1 modifications
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to arc4_dynamic_arrays/out/DynamicArrayContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (extract3 array_head_and_tail%0#0 0u 10u) // on error: Index access is out of bounds to ((extract 0 10) array_head_and_tail%0#0) // on error: Index access is out of bounds
debug: Simplified (extract3 array_head_and_tail%0#0 10u 10u) // on error: Index access is out of bounds to ((extract 10 10) array_head_and_tail%0#0) // on error: Index access is out of bounds
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable item_offset%0#0
debug: Removing unused variable item_offset%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte2
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte3
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte4
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_uint1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_uint2
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (* 1u 2u) to 2u
debug: Simplified (* 2u 2u) to 4u
debug: Simplified (* 3u 2u) to 6u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable value_as_uint16%0#0
debug: Removing unused variable data_length%1#0
debug: Removing unused variable value_as_uint16%2#0
debug: Removing unused variable data_length%3#0
debug: Removing unused variable next_item_head%0#0
debug: Removing unused variable next_item_head%2#0
debug: Removing unused variable item_offset_offset%0#0
debug: Removing unused variable next_index%0#0
debug: Removing unused variable item_offset_offset%1#0
debug: Removing unused variable next_index%1#0
debug: Removing unused variable item_offset_offset%2#0
debug: Removing unused variable next_index%2#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_string1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_string2
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_string3
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (extract_uint16 0x0000 0u) to 0u
debug: Simplified ((extract 2 0) 0x0000) to 0x
debug: Simplified (* 1u 2u) to 2u
debug: Simplified (* 2u 2u) to 4u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable value_as_uint16%0#0
debug: Removing unused variable data_length%0#0
debug: Removing unused variable value_as_uint16%1#0
debug: Removing unused variable data_length%1#0
debug: Removing unused variable array#0
debug: Removing unused variable next_item_head%0#0
debug: Removing unused variable next_item_len%0#0
debug: Removing unused variable next_item_head%1#0
debug: Removing unused variable item_offset_offset%0#0
debug: Removing unused variable next_index%0#0
debug: Removing unused variable item_offset_offset%1#0
debug: Removing unused variable next_index%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let result%3#0: bytes = (concat 0x0002 struct2#0) with copy of existing registers [Register(ir_type=bytes, name='result%1', version=0, source_location=arc4_dynamic_arrays/contract.py:75:8-36)]
debug: Found equivalence set: result%1#0, result%3#0
debug: Replacing {result%3#0} with result%1#0 made 1 modifications
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (* 1u 2u) to 2u
debug: Simplified (* 2u 2u) to 4u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable value_as_uint16%0#0
debug: Removing unused variable data_length%1#0
debug: Removing unused variable value_as_uint16%2#0
debug: Removing unused variable data_length%3#0
debug: Removing unused variable next_item_head%0#0
debug: Removing unused variable item_offset_offset%0#0
debug: Removing unused variable next_index%0#0
debug: Removing unused variable item_offset_offset%1#0
debug: Removing unused variable next_index%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_pop_fixed_size
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_pop_dynamic_element
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_concat_dynamic_element
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_replace_dynamic_element
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.static_array_replace_dynamic_element
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to arc4_dynamic_arrays/out/DynamicArrayContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte2
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte3
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte4
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_uint1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_uint2
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable next_item_offset_offset%0#0
debug: Removing unused variable next_item_offset_offset%1#0
debug: Removing unused variable next_item_offset_offset%2#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%0#0 2u) with copy of existing registers [Register(ir_type=uint64, name='next_item_offset%0', version=0, source_location=arc4_dynamic_arrays/contract.py:59:12-20)]
debug: Replacing redundant declaration let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%0#0 4u) with copy of existing registers [Register(ir_type=uint64, name='next_item_offset%1', version=0, source_location=arc4_dynamic_arrays/contract.py:60:12-20)]
debug: Found equivalence set: next_item_offset%0#0, item_offset%1#0
debug: Replacing {item_offset%1#0} with next_item_offset%0#0 made 1 modifications
debug: Found equivalence set: next_item_offset%1#0, item_offset%2#0
debug: Replacing {item_offset%2#0} with next_item_offset%1#0 made 1 modifications
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_string1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_string2
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_string3
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable l_count%0#0
debug: Removing unused variable l_head_and_tail%0#0
debug: Removing unused variable next_item_offset_offset%0#0
debug: Removing unused variable next_item_offset_offset%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%0#0 2u) with copy of existing registers [Register(ir_type=uint64, name='next_item_offset%0', version=0, source_location=arc4_dynamic_arrays/contract.py:79:12-20)]
debug: Found equivalence set: next_item_offset%0#0, item_offset%1#0
debug: Replacing {item_offset%1#0} with next_item_offset%0#0 made 1 modifications
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable next_item_offset_offset%0#0
debug: Removing unused variable next_item_offset_offset%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%0#0 2u) with copy of existing registers [Register(ir_type=uint64, name='next_item_offset%0', version=0, source_location=arc4_dynamic_arrays/contract.py:96:12-20)]
debug: Found equivalence set: next_item_offset%0#0, item_offset%1#0
debug: Replacing {item_offset%1#0} with next_item_offset%0#0 made 1 modifications
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_pop_fixed_size
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_pop_dynamic_element
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_concat_dynamic_element
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_replace_dynamic_element
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.static_array_replace_dynamic_element
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to arc4_dynamic_arrays/out/DynamicArrayContract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte2
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte3
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_byte4
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_uint1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_uint2
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_string1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_string2
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.get_string3
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_pop_fixed_size
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_pop_dynamic_element
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_concat_dynamic_element
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.dynamic_array_replace_dynamic_element
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_arc4.static_array_replace_dynamic_element
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 4, ending loop
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.approval_program
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.get_byte1
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.get_byte2
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.get_byte3
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.get_byte4
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.get_uint1
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.get_uint2
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.get_string1
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.get_string2
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.get_string3
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements
debug: Removing Phis from algopy_lib_arc4.dynamic_array_pop_fixed_size
debug: Removing Phis from algopy_lib_arc4.dynamic_array_pop_dynamic_element
debug: Removing Phis from algopy_lib_arc4.dynamic_array_concat_dynamic_element
debug: Removing Phis from algopy_lib_arc4.dynamic_array_replace_dynamic_element
debug: Removing Phis from algopy_lib_arc4.static_array_replace_dynamic_element
debug: Removing Phis from test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.clear_state_program
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements using strategy RootOperandGrouping
debug: Coalescing array#0 with [array#1, array#2, array#3]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.get_byte1 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.get_byte2 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.get_byte3 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.get_byte4 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.get_uint1 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.get_uint2 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements using strategy RootOperandGrouping
debug: Coalescing encoded_tuple_buffer%0#2 with [encoded_tuple_buffer%0#3]
debug: Coalescing encoded_tuple_buffer%1#2 with [encoded_tuple_buffer%1#3]
debug: Coalescing array#0 with [array#1, array#2, array#3, array#4, array#5]
debug: Coalescing resulted in 19 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.get_string1 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.get_string2 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.get_string3 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements using strategy RootOperandGrouping
debug: Coalescing encoded_tuple_buffer%0#2 with [encoded_tuple_buffer%0#3]
debug: Coalescing encoded_tuple_buffer%1#2 with [encoded_tuple_buffer%1#3]
debug: Coalescing array#1 with [array#2, array#3, array#4, array#5]
debug: Coalescing resulted in 14 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements using strategy RootOperandGrouping
debug: Coalescing encoded_tuple_buffer%0#2 with [encoded_tuple_buffer%0#3, encoded_tuple_buffer%0#4, encoded_tuple_buffer%0#5, encoded_tuple_buffer%0#6]
debug: Coalescing encoded_tuple_buffer%1#2 with [encoded_tuple_buffer%1#3, encoded_tuple_buffer%1#4, encoded_tuple_buffer%1#5, encoded_tuple_buffer%1#6]
debug: Coalescing array#0 with [array#1, array#2, array#3]
debug: Coalescing resulted in 24 replacement/s
debug: Coalescing local variables in algopy_lib_arc4.dynamic_array_pop_fixed_size using strategy RootOperandGrouping
debug: Coalescing result#0 with [result#1]
debug: Coalescing resulted in 2 replacement/s
debug: Coalescing local variables in algopy_lib_arc4.dynamic_array_pop_dynamic_element using strategy RootOperandGrouping
debug: Coalescing new_head#0 with [new_head#6, new_head#3, new_head#2]
debug: Coalescing range_item%0#0 with [range_item%0#3]
debug: Coalescing head_offset#0 with [head_offset#1]
debug: Coalescing item_offset#0 with [item_offset#1]
debug: Coalescing resulted in 15 replacement/s
debug: Coalescing local variables in algopy_lib_arc4.dynamic_array_concat_dynamic_element using strategy RootOperandGrouping
debug: Coalescing new_head#0 with [new_head#9, new_head#3, new_head#2, new_head#12, new_head#6, new_head#5]
debug: Coalescing range_item%0#0 with [range_item%0#3]
debug: Coalescing head_offset#0 with [head_offset#2, head_offset#3, head_offset#1]
debug: Coalescing item_offset#0 with [item_offset#1]
debug: Coalescing range_item%1#0 with [range_item%1#3]
debug: Coalescing resulted in 32 replacement/s
debug: Coalescing local variables in algopy_lib_arc4.dynamic_array_replace_dynamic_element using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in algopy_lib_arc4.static_array_replace_dynamic_element using strategy RootOperandGrouping
debug: Coalescing new_head_and_tail#0 with [new_head_and_tail#6, new_head_and_tail#3, new_head_and_tail#2]
debug: Coalescing head_offset#0 with [head_offset#1]
debug: Coalescing tail_offset#0 with [tail_offset#1, tail_offset#2]
debug: Coalescing resulted in 16 replacement/s
debug: Coalescing local variables in test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.approval_program
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_static_elements
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.get_byte1
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.get_byte2
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.get_byte3
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.get_byte4
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.get_uint1
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.get_uint2
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_dynamic_elements
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.get_string1
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.get_string2
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.get_string3
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_single_dynamic_elements
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.test_mixed_multiple_dynamic_elements
debug: Sequentializing parallel copies in algopy_lib_arc4.dynamic_array_pop_fixed_size
debug: Sequentializing parallel copies in algopy_lib_arc4.dynamic_array_pop_dynamic_element
debug: loc: {head_offset#0=None, new_head#0=new_head#0, range_item%0#0=range_item%0#0}
debug: pred: {head_offset#0=range_item%0#0, new_head#0=new_head#0}
debug: ready: head_offset#0
debug: to_do: head_offset#0, new_head#0
debug: * avail head_offset#0
debug: * avail range_item%0#0
debug: * to_do new_head#0
debug: * to_do head_offset#0
debug: loc: {head_offset#0=head_offset#0, new_head#0=new_head#0}
debug: pred: {head_offset#0=head_offset#0, new_head#0=new_head#0}
debug: ready: 
debug: to_do: head_offset#0, new_head#0
debug: * to_do new_head#0
debug: * to_do head_offset#0
debug: loc: {head_offset#0=None, new_head#0=new_head#0, range_item%0#0=range_item%0#0}
debug: pred: {head_offset#0=range_item%0#0, new_head#0=new_head#0}
debug: ready: head_offset#0
debug: to_do: head_offset#0, new_head#0
debug: * avail head_offset#0
debug: * avail range_item%0#0
debug: * to_do new_head#0
debug: * to_do head_offset#0
debug: Sequentializing parallel copies in algopy_lib_arc4.dynamic_array_concat_dynamic_element
debug: loc: {head_offset#0=None, new_head#0=new_head#0, range_item%0#0=range_item%0#0}
debug: pred: {head_offset#0=range_item%0#0, new_head#0=new_head#0}
debug: ready: head_offset#0
debug: to_do: head_offset#0, new_head#0
debug: * avail head_offset#0
debug: * avail range_item%0#0
debug: * to_do new_head#0
debug: * to_do head_offset#0
debug: loc: {head_offset#0=head_offset#0, new_head#0=new_head#0}
debug: pred: {head_offset#0=head_offset#0, new_head#0=new_head#0}
debug: ready: 
debug: to_do: head_offset#0, new_head#0
debug: * to_do new_head#0
debug: * to_do head_offset#0
debug: loc: {head_offset#0=None, new_head#0=new_head#0, range_item%0#0=range_item%0#0}
debug: pred: {head_offset#0=range_item%0#0, new_head#0=new_head#0}
debug: ready: head_offset#0
debug: to_do: head_offset#0, new_head#0
debug: * avail head_offset#0
debug: * avail range_item%0#0
debug: * to_do new_head#0
debug: * to_do head_offset#0
debug: loc: {head_offset#0=None, new_head#0=new_head#0, range_item%1#0=range_item%1#0}
debug: pred: {head_offset#0=range_item%1#0, new_head#0=new_head#0}
debug: ready: head_offset#0
debug: to_do: head_offset#0, new_head#0
debug: * avail head_offset#0
debug: * avail range_item%1#0
debug: * to_do new_head#0
debug: * to_do head_offset#0
debug: loc: {head_offset#0=head_offset#0, new_head#0=new_head#0}
debug: pred: {head_offset#0=head_offset#0, new_head#0=new_head#0}
debug: ready: 
debug: to_do: head_offset#0, new_head#0
debug: * to_do new_head#0
debug: * to_do head_offset#0
debug: loc: {head_offset#0=None, new_head#0=new_head#0, range_item%1#0=range_item%1#0}
debug: pred: {head_offset#0=range_item%1#0, new_head#0=new_head#0}
debug: ready: head_offset#0
debug: to_do: head_offset#0, new_head#0
debug: * avail head_offset#0
debug: * avail range_item%1#0
debug: * to_do new_head#0
debug: * to_do head_offset#0
debug: Sequentializing parallel copies in algopy_lib_arc4.dynamic_array_replace_dynamic_element
debug: Sequentializing parallel copies in algopy_lib_arc4.static_array_replace_dynamic_element
debug: loc: {head_offset#0=None, new_head_and_tail#0=new_head_and_tail#0, tmp%2#0=tmp%2#0}
debug: pred: {head_offset#0=tmp%2#0, new_head_and_tail#0=new_head_and_tail#0}
debug: ready: head_offset#0
debug: to_do: head_offset#0, new_head_and_tail#0
debug: * avail head_offset#0
debug: * avail tmp%2#0
debug: * to_do new_head_and_tail#0
debug: * to_do head_offset#0
debug: loc: {head_offset#0=head_offset#0, new_head_and_tail#0=new_head_and_tail#0}
debug: pred: {head_offset#0=head_offset#0, new_head_and_tail#0=new_head_and_tail#0}
debug: ready: 
debug: to_do: head_offset#0, new_head_and_tail#0
debug: * to_do new_head_and_tail#0
debug: * to_do head_offset#0
debug: loc: {head_offset#0=None, new_head_and_tail#0=new_head_and_tail#0, range_item%0#3=range_item%0#3}
debug: pred: {head_offset#0=range_item%0#3, new_head_and_tail#0=new_head_and_tail#0}
debug: ready: head_offset#0
debug: to_do: head_offset#0, new_head_and_tail#0
debug: * avail head_offset#0
debug: * avail range_item%0#3
debug: * to_do new_head_and_tail#0
debug: * to_do head_offset#0
debug: Sequentializing parallel copies in test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to arc4_dynamic_arrays/out/DynamicArrayContract.destructured.ir
debug: Inserted main_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_abi_routing@1.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_abi_routing@1.ops[7]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_test_static_elements_route@2.ops[1]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_test_static_elements_route@2.ops[3]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_test_static_elements_route@2.ops[5]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_test_static_elements_route@2.ops[7]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_test_static_elements_route@2.ops[10]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_test_static_elements_route@2.ops[12]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_test_dynamic_elements_route@3.ops[1]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_test_dynamic_elements_route@3.ops[3]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_test_dynamic_elements_route@3.ops[5]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_test_dynamic_elements_route@3.ops[7]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_test_dynamic_elements_route@3.ops[10]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_test_dynamic_elements_route@3.ops[12]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_test_mixed_single_dynamic_elements_route@4.ops[1]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_test_mixed_single_dynamic_elements_route@4.ops[3]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_test_mixed_single_dynamic_elements_route@4.ops[5]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_test_mixed_single_dynamic_elements_route@4.ops[7]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_test_mixed_single_dynamic_elements_route@4.ops[10]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_test_mixed_single_dynamic_elements_route@4.ops[12]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_test_mixed_multiple_dynamic_elements_route@5.ops[1]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_test_mixed_multiple_dynamic_elements_route@5.ops[3]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_test_mixed_multiple_dynamic_elements_route@5.ops[5]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_test_mixed_multiple_dynamic_elements_route@5.ops[7]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_test_mixed_multiple_dynamic_elements_route@5.ops[10]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_test_mixed_multiple_dynamic_elements_route@5.ops[12]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@8.ops[1]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_bare_routing@8.ops[3]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@8.ops[5]: 'store not%tmp%14#0 to l-stack (copy)'
debug: Replaced main_bare_routing@8.ops[7]: 'load not%tmp%14#0' with 'load not%tmp%14#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@8.ops[10]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_bare_routing@8.ops[12]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@8.ops[14]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_bare_routing@8.ops[16]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.arc4_dynamic_arrays.contract.DynamicArrayContract.approval_program
debug: Inserted test_static_elements_block@0.ops[17]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[19]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[24]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[26]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[31]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[32]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[38]: 'store array#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[40]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[47]: 'store index_is_in_bounds%0#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[49]: 'load index_is_in_bounds%0#0' with 'load index_is_in_bounds%0#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[54]: 'store array#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[56]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[60]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[62]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[64]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[66]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[70]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[72]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[78]: 'store popped%0#1 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[80]: 'load popped%0#1' with 'load popped%0#1 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[83]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[85]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[91]: 'store popped%1#1 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[93]: 'load popped%1#1' with 'load popped%1#1 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[96]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[98]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[6]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[12]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[15]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[36]: 'store result%5#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[39]: 'load result%5#0' with 'load result%5#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[46]: 'store array_length%0#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[49]: 'load array_length%0#0' with 'load array_length%0#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[61]: 'store array#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[63]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[6]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[11]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[16]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[70]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[76]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[26]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[35]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[86]: 'store array#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[97]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[19]: 'store byte_array2#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[33]: 'load byte_array2#0' with 'load byte_array2#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[48]: 'store array#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[60]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[9]: 'store byte_array1#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[26]: 'load byte_array1#0' with 'load byte_array1#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[70]: 'store array#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[87]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[36]: 'store struct2#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[63]: 'load struct2#0' with 'load struct2#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[64]: 'store struct2#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[97]: 'load struct2#0' with 'load struct2#0 from l-stack (no copy)'
debug: Inserted test_static_elements_block@0.ops[41]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_static_elements_block@0.ops[111]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[10]: 'store current_tail_offset%0#1 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[12]: 'load current_tail_offset%0#1' with 'load current_tail_offset%0#1 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[14]: 'store value_as_bytes%1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[16]: 'load value_as_bytes%1#0' with 'load value_as_bytes%1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[22]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[24]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[27]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[29]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[43]: 'store current_tail_offset%1#1 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[45]: 'load current_tail_offset%1#1' with 'load current_tail_offset%1#1 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[47]: 'store value_as_bytes%3#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[49]: 'load value_as_bytes%3#0' with 'load value_as_bytes%3#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[55]: 'store encoded_tuple_buffer%1#2 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[57]: 'load encoded_tuple_buffer%1#2' with 'load encoded_tuple_buffer%1#2 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[60]: 'store encoded_tuple_buffer%1#2 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[62]: 'load encoded_tuple_buffer%1#2' with 'load encoded_tuple_buffer%1#2 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[72]: 'store tail_offset%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[74]: 'load tail_offset%0#0' with 'load tail_offset%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[76]: 'store as_bytes%1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[78]: 'load as_bytes%1#0' with 'load as_bytes%1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[84]: 'store result%1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[86]: 'load result%1#0' with 'load result%1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[89]: 'store result%2#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[91]: 'load result%2#0' with 'load result%2#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[115]: 'store array#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[117]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[121]: 'store array#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[123]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[127]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[129]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[136]: 'store array_length%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[138]: 'load array_length%0#0' with 'load array_length%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[158]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[160]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[179]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[181]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[200]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[202]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[207]: 'store popped%0#1 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[209]: 'load popped%0#1' with 'load popped%0#1 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[212]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[214]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[221]: 'store popped%1#1 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[223]: 'load popped%1#1' with 'load popped%1#1 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[226]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[228]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[235]: 'store popped%2#1 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[237]: 'load popped%2#1' with 'load popped%2#1 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[240]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[242]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[6]: 'store data_length%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[9]: 'load data_length%0#0' with 'load data_length%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[19]: 'store value_as_uint16%1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[22]: 'load value_as_uint16%1#0' with 'load value_as_uint16%1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[41]: 'store data_length%2#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[44]: 'load data_length%2#0' with 'load data_length%2#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[54]: 'store value_as_uint16%3#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[57]: 'load value_as_uint16%3#0' with 'load value_as_uint16%3#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[72]: 'store next_item_len%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[75]: 'load next_item_len%0#0' with 'load next_item_len%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[85]: 'store next_item_head%1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[88]: 'load next_item_head%1#0' with 'load next_item_head%1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[100]: 'store result%3#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[103]: 'load result%3#0' with 'load result%3#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[116]: 'store l_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[119]: 'load l_head_and_tail%0#0' with 'load l_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[132]: 'store array#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[134]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[157]: 'store next_item_offset%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[160]: 'load next_item_offset%0#0' with 'load next_item_offset%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[179]: 'store next_item_offset%1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[182]: 'load next_item_offset%1#0' with 'load next_item_offset%1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[201]: 'store next_item_offset%2#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[204]: 'load next_item_offset%2#0' with 'load next_item_offset%2#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[229]: 'store array#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[231]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[244]: 'store array#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[246]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[37]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[41]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[154]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[157]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[166]: 'store end_offset%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[170]: 'load end_offset%0#0' with 'load end_offset%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[189]: 'store end_offset%1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[193]: 'load end_offset%1#0' with 'load end_offset%1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[212]: 'store end_offset%2#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[216]: 'load end_offset%2#0' with 'load end_offset%2#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[96]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[101]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[114]: 'store array#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[118]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[117]: 'store l_count%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[123]: 'load l_count%0#0' with 'load l_count%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[108]: 'store array#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[114]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[160]: 'store end_of_array%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[167]: 'load end_of_array%0#0' with 'load end_of_array%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[141]: 'store array#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[149]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[185]: 'store has_next%1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[194]: 'load has_next%1#0' with 'load has_next%1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[209]: 'store has_next%2#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[218]: 'load has_next%2#0' with 'load has_next%2#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[102]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[112]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[233]: 'store array#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[244]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[249]: 'store array#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[260]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[265]: 'store array#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[276]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[165]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[176]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[190]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[201]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[215]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[226]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[158]: 'store has_next%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[173]: 'load has_next%0#0' with 'load has_next%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[114]: 'store result%5#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[129]: 'load result%5#0' with 'load result%5#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[179]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[192]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[205]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[218]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[148]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[162]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[6]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[29]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[43]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[66]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[75]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[98]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[177]: 'store end_of_array%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[203]: 'load end_of_array%0#0' with 'load end_of_array%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[193]: 'store array_length%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[219]: 'load array_length%0#0' with 'load array_length%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[205]: 'store end_of_array%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[231]: 'load end_of_array%0#0' with 'load end_of_array%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[154]: 'store item_offset%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[186]: 'load item_offset%0#0' with 'load item_offset%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[4]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[35]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[42]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[73]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[164]: 'store array_length%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[196]: 'load array_length%0#0' with 'load array_length%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[257]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[289]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[183]: 'store next_item_offset%0#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[218]: 'load next_item_offset%0#0' with 'load next_item_offset%0#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[212]: 'store next_item_offset%1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[244]: 'load next_item_offset%1#0' with 'load next_item_offset%1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[37]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[77]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[76]: 'store struct2#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[141]: 'load struct2#0' with 'load struct2#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[161]: 'store array#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[254]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[142]: 'store struct2#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[279]: 'load struct2#0' with 'load struct2#0 from l-stack (no copy)'
debug: Inserted test_dynamic_elements_block@0.ops[120]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_dynamic_elements_block@0.ops[263]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[9]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[11]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[14]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[16]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[29]: 'store encoded_tuple_buffer%1#2 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[31]: 'load encoded_tuple_buffer%1#2' with 'load encoded_tuple_buffer%1#2 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[34]: 'store encoded_tuple_buffer%1#2 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[36]: 'load encoded_tuple_buffer%1#2' with 'load encoded_tuple_buffer%1#2 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[49]: 'store array#1 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[51]: 'load array#1' with 'load array#1 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[63]: 'store array#1 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[65]: 'load array#1' with 'load array#1 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[69]: 'store array#1 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[71]: 'load array#1' with 'load array#1 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[75]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[77]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[84]: 'store array_length%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[86]: 'load array_length%0#0' with 'load array_length%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[106]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[108]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[127]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[129]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[134]: 'store popped%0#1 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[136]: 'load popped%0#1' with 'load popped%0#1 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[139]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[141]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[146]: 'store popped%1#1 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[148]: 'load popped%1#1' with 'load popped%1#1 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[151]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[153]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[39]: 'store struct2#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[42]: 'load struct2#0' with 'load struct2#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[58]: 'store l_head_and_tail%1#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[61]: 'load l_head_and_tail%1#0' with 'load l_head_and_tail%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[74]: 'store array#1 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[76]: 'load array#1' with 'load array#1 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[99]: 'store next_item_offset%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[102]: 'load next_item_offset%0#0' with 'load next_item_offset%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[121]: 'store next_item_offset%1#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[124]: 'load next_item_offset%1#0' with 'load next_item_offset%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[94]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[97]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[106]: 'store end_offset%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[110]: 'load end_offset%0#0' with 'load end_offset%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[129]: 'store end_offset%1#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[133]: 'load end_offset%1#0' with 'load end_offset%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[44]: 'store result%1#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[49]: 'load result%1#0' with 'load result%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[54]: 'store array#1 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[58]: 'load array#1' with 'load array#1 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[57]: 'store l_count%1#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[63]: 'load l_count%1#0' with 'load l_count%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[7]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[22]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[28]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[101]: 'store end_of_array%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[108]: 'load end_of_array%0#0' with 'load end_of_array%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[6]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[14]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[28]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[36]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[84]: 'store array#1 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[92]: 'load array#1' with 'load array#1 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[128]: 'store has_next%1#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[137]: 'load has_next%1#0' with 'load has_next%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[151]: 'store array#1 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[162]: 'load array#1' with 'load array#1 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[107]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[118]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[132]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[143]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[100]: 'store has_next%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[115]: 'load has_next%0#0' with 'load has_next%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[120]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[133]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[4]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[20]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[27]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[43]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[91]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[105]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[56]: 'store result%1#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[73]: 'load result%1#0' with 'load result%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[118]: 'store end_of_array%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[144]: 'load end_of_array%0#0' with 'load end_of_array%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[95]: 'store item_offset%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[127]: 'load item_offset%0#0' with 'load item_offset%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[103]: 'store array_length%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[135]: 'load array_length%0#0' with 'load array_length%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[122]: 'store next_item_offset%0#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[154]: 'load next_item_offset%0#0' with 'load next_item_offset%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[22]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[79]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[99]: 'store array#1 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[163]: 'load array#1' with 'load array#1 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[80]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[183]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_mixed_single_dynamic_elements_block@0.ops[50]: 'store struct2#0 to l-stack (copy)'
debug: Replaced test_mixed_single_dynamic_elements_block@0.ops[172]: 'load struct2#0' with 'load struct2#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[27]: 'store value_as_bytes%1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[29]: 'load value_as_bytes%1#0' with 'load value_as_bytes%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[35]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[37]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[40]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[42]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[45]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[47]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[78]: 'store value_as_bytes%3#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[80]: 'load value_as_bytes%3#0' with 'load value_as_bytes%3#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[86]: 'store encoded_tuple_buffer%1#2 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[88]: 'load encoded_tuple_buffer%1#2' with 'load encoded_tuple_buffer%1#2 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[91]: 'store encoded_tuple_buffer%1#2 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[93]: 'load encoded_tuple_buffer%1#2' with 'load encoded_tuple_buffer%1#2 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[96]: 'store encoded_tuple_buffer%1#2 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[98]: 'load encoded_tuple_buffer%1#2' with 'load encoded_tuple_buffer%1#2 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[108]: 'store tail_offset%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[110]: 'load tail_offset%0#0' with 'load tail_offset%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[112]: 'store as_bytes%1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[114]: 'load as_bytes%1#0' with 'load as_bytes%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[120]: 'store result%1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[122]: 'load result%1#0' with 'load result%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[125]: 'store result%2#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[127]: 'load result%2#0' with 'load result%2#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[134]: 'store array#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[136]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[140]: 'store array#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[142]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[146]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[148]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[155]: 'store array_length%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[157]: 'load array_length%0#0' with 'load array_length%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[177]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[179]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[198]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[200]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[205]: 'store popped%0#1 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[207]: 'load popped%0#1' with 'load popped%0#1 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[210]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[212]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[217]: 'store popped%1#1 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[219]: 'load popped%1#1' with 'load popped%1#1 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[222]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[224]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[16]: 'store data_length%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[19]: 'load data_length%0#0' with 'load data_length%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[32]: 'store value_as_uint16%1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[35]: 'load value_as_uint16%1#0' with 'load value_as_uint16%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[69]: 'store data_length%2#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[72]: 'load data_length%2#0' with 'load data_length%2#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[85]: 'store value_as_uint16%3#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[88]: 'load value_as_uint16%3#0' with 'load value_as_uint16%3#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[108]: 'store next_item_len%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[111]: 'load next_item_len%0#0' with 'load next_item_len%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[121]: 'store next_item_head%1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[124]: 'load next_item_head%1#0' with 'load next_item_head%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[136]: 'store result%3#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[139]: 'load result%3#0' with 'load result%3#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[150]: 'store array#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[152]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[175]: 'store next_item_offset%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[178]: 'load next_item_offset%0#0' with 'load next_item_offset%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[197]: 'store next_item_offset%1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[200]: 'load next_item_offset%1#0' with 'load next_item_offset%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[170]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[173]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[182]: 'store end_offset%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[186]: 'load end_offset%0#0' with 'load end_offset%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[205]: 'store end_offset%1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[209]: 'load end_offset%1#0' with 'load end_offset%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[130]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[135]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[21]: 'store current_tail_offset%0#1 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[27]: 'load current_tail_offset%0#1' with 'load current_tail_offset%0#1 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[75]: 'store current_tail_offset%1#1 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[81]: 'load current_tail_offset%1#1' with 'load current_tail_offset%1#1 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[175]: 'store end_of_array%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[182]: 'load end_of_array%0#0' with 'load end_of_array%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[26]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[36]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[81]: 'store encoded_tuple_buffer%1#2 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[91]: 'load encoded_tuple_buffer%1#2' with 'load encoded_tuple_buffer%1#2 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[158]: 'store array#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[166]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[202]: 'store has_next%1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[211]: 'load has_next%1#0' with 'load has_next%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[13]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[24]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[69]: 'store encoded_tuple_buffer%1#2 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[80]: 'load encoded_tuple_buffer%1#2' with 'load encoded_tuple_buffer%1#2 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[227]: 'store array#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[238]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[11]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[58]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[68]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[185]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[196]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[210]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[221]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[178]: 'store has_next%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[193]: 'load has_next%0#0' with 'load has_next%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[4]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[17]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[62]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[75]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[200]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[213]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[169]: 'store array_head_and_tail%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[183]: 'load array_head_and_tail%0#0' with 'load array_head_and_tail%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[7]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[28]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[66]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[87]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[119]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[142]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[198]: 'store end_of_array%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[224]: 'load end_of_array%0#0' with 'load end_of_array%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[175]: 'store item_offset%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[207]: 'load item_offset%0#0' with 'load item_offset%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[183]: 'store array_length%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[215]: 'load array_length%0#0' with 'load array_length%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[202]: 'store next_item_offset%0#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[234]: 'load next_item_offset%0#0' with 'load next_item_offset%0#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[19]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[52]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[79]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[112]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[12]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[48]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[73]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[109]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[121]: 'store struct2#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[163]: 'load struct2#0' with 'load struct2#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[10]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[59]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[72]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[121]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[185]: 'store array#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[249]: 'load array#0' with 'load array#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[61]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[126]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[167]: 'store struct2#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[258]: 'load struct2#0' with 'load struct2#0 from l-stack (no copy)'
debug: Inserted test_mixed_multiple_dynamic_elements_block@0.ops[157]: 'store struct1#0 to l-stack (copy)'
debug: Replaced test_mixed_multiple_dynamic_elements_block@0.ops[271]: 'load struct1#0' with 'load struct1#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_fixed_size_block@0.ops[3]: 'store array_length#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_fixed_size_block@0.ops[5]: 'load array_length#0' with 'load array_length#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_fixed_size_block@0.ops[8]: 'store length_minus_1#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_fixed_size_block@0.ops[10]: 'load length_minus_1#0' with 'load length_minus_1#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_fixed_size_block@0.ops[12]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_fixed_size_block@0.ops[14]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_fixed_size_block@0.ops[20]: 'store result#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_fixed_size_block@0.ops[22]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_fixed_size_block@0.ops[24]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_fixed_size_block@0.ops[26]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_fixed_size_block@0.ops[16]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_fixed_size_block@0.ops[19]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_fixed_size_block@0.ops[30]: 'store item_location#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_fixed_size_block@0.ops[33]: 'load item_location#0' with 'load item_location#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_fixed_size_block@0.ops[41]: 'store result#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_fixed_size_block@0.ops[44]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_fixed_size_block@0.ops[33]: 'store result#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_fixed_size_block@0.ops[38]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_fixed_size_block@0.ops[35]: 'store item_location#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_fixed_size_block@0.ops[41]: 'load item_location#0' with 'load item_location#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_fixed_size_block@0.ops[38]: 'store popped#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_fixed_size_block@0.ops[46]: 'load popped#0' with 'load popped#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_fixed_size_block@0.ops[24]: 'store result#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_fixed_size_block@0.ops[33]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_block@0.ops[3]: 'store array_length#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_block@0.ops[5]: 'load array_length#0' with 'load array_length#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_block@0.ops[8]: 'store length_minus_1#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_block@0.ops[10]: 'load length_minus_1#0' with 'load length_minus_1#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_block@0.ops[16]: 'store head_and_tail#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_block@0.ops[18]: 'load head_and_tail#0' with 'load head_and_tail#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_block@0.ops[33]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_block@0.ops[35]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_block@0.ops[23]: 'store head_and_tail#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_block@0.ops[26]: 'load head_and_tail#0' with 'load head_and_tail#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_block@0.ops[25]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_block@0.ops[29]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_block@0.ops[19]: 'store head_and_tail#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_block@0.ops[23]: 'load head_and_tail#0' with 'load head_and_tail#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_block@0.ops[13]: 'store popped_header_offset#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_block@0.ops[21]: 'load popped_header_offset#0' with 'load popped_header_offset#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_block@0.ops[23]: 'store popped_offset#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_block@0.ops[31]: 'load popped_offset#0' with 'load popped_offset#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_for_header@1.ops[3]: 'store continue_looping%0#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_for_header@1.ops[5]: 'load continue_looping%0#0' with 'load continue_looping%0#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_for_body@2.ops[3]: 'store item_offset#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_for_body@2.ops[5]: 'load item_offset#0' with 'load item_offset#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_for_body@2.ops[8]: 'store item_offset#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_for_body@2.ops[10]: 'load item_offset#0' with 'load item_offset#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_for_body@2.ops[12]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_for_body@2.ops[14]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_for_body@2.ops[24]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_for_body@2.ops[26]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_for_body@2.ops[16]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_for_body@2.ops[19]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_for_body@2.ops[2]: 'store head_offset#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_for_body@2.ops[23]: 'load head_offset#0' with 'load head_offset#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_after_for@5.ops[2]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_after_for@5.ops[4]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_after_for@5.ops[6]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_after_for@5.ops[8]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_after_for@5.ops[15]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_after_for@5.ops[18]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_after_for@5.ops[21]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_after_for@5.ops[24]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_after_for@5.ops[26]: 'store updated#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_after_for@5.ops[29]: 'load updated#0' with 'load updated#0 from l-stack (no copy)'
debug: Inserted dynamic_array_pop_dynamic_element_after_for@5.ops[11]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced dynamic_array_pop_dynamic_element_after_for@5.ops[24]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Found 2 edge set/s for algopy_lib_arc4.dynamic_array_pop_dynamic_element
debug: algopy_lib_arc4.dynamic_array_pop_dynamic_element f-stack entry: []
debug: algopy_lib_arc4.dynamic_array_pop_dynamic_element f-stack on first store: ['length_minus_1#0', 'popped_header_offset#0', 'head_and_tail#0', 'popped_offset#0', 'popped#0', 'new_head#0', 'head_offset#0']
debug: Inserted dynamic_array_concat_dynamic_element_block@0.ops[11]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_block@0.ops[13]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_header@1.ops[3]: 'store continue_looping%0#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_header@1.ops[5]: 'load continue_looping%0#0' with 'load continue_looping%0#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_body@2.ops[7]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_body@2.ops[9]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_body@2.ops[11]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_body@2.ops[13]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_body@2.ops[23]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_body@2.ops[25]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_body@2.ops[3]: 'store item_offset#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_body@2.ops[6]: 'load item_offset#0' with 'load item_offset#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_body@2.ops[16]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_body@2.ops[19]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_body@2.ops[2]: 'store head_offset#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_body@2.ops[23]: 'load head_offset#0' with 'load head_offset#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_after_for@5.ops[4]: 'store range_item%1#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_after_for@5.ops[6]: 'load range_item%1#0' with 'load range_item%1#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_header@6.ops[3]: 'store continue_looping%1#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_header@6.ops[5]: 'load continue_looping%1#0' with 'load continue_looping%1#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_body@7.ops[7]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_body@7.ops[9]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_body@7.ops[11]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_body@7.ops[13]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_body@7.ops[23]: 'store range_item%1#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_body@7.ops[25]: 'load range_item%1#0' with 'load range_item%1#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_body@7.ops[3]: 'store item_offset#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_body@7.ops[6]: 'load item_offset#0' with 'load item_offset#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_body@7.ops[16]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_body@7.ops[19]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_for_body@7.ops[2]: 'store head_offset#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_for_body@7.ops[23]: 'load head_offset#0' with 'load head_offset#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_after_for@10.ops[3]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_after_for@10.ops[5]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_after_for@10.ops[7]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_after_for@10.ops[9]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_after_for@10.ops[11]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_after_for@10.ops[13]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_after_for@10.ops[37]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_after_for@10.ops[39]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_after_for@10.ops[21]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_after_for@10.ops[24]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_after_for@10.ops[34]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_after_for@10.ops[37]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_after_for@10.ops[29]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_after_for@10.ops[33]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_after_for@10.ops[16]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_after_for@10.ops[24]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted dynamic_array_concat_dynamic_element_after_for@10.ops[27]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced dynamic_array_concat_dynamic_element_after_for@10.ops[39]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Found 4 edge set/s for algopy_lib_arc4.dynamic_array_concat_dynamic_element
debug: algopy_lib_arc4.dynamic_array_concat_dynamic_element f-stack entry: ['item_offset_adjustment#3']
debug: algopy_lib_arc4.dynamic_array_concat_dynamic_element f-stack on first store: ['new_head#0', 'item_offset_adjustment#0', 'tmp%0#0', 'head_offset#0']
debug: Inserted dynamic_array_replace_dynamic_element_block@0.ops[2]: 'store size_b#0 to l-stack (copy)'
debug: Replaced dynamic_array_replace_dynamic_element_block@0.ops[4]: 'load size_b#0' with 'load size_b#0 from l-stack (no copy)'
debug: Inserted dynamic_array_replace_dynamic_element_block@0.ops[9]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced dynamic_array_replace_dynamic_element_block@0.ops[11]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted dynamic_array_replace_dynamic_element_block@0.ops[20]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced dynamic_array_replace_dynamic_element_block@0.ops[22]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted dynamic_array_replace_dynamic_element_block@0.ops[16]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced dynamic_array_replace_dynamic_element_block@0.ops[19]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted dynamic_array_replace_dynamic_element_block@0.ops[6]: 'store array_length#0 to l-stack (copy)'
debug: Replaced dynamic_array_replace_dynamic_element_block@0.ops[15]: 'load array_length#0' with 'load array_length#0 from l-stack (no copy)'
debug: Inserted dynamic_array_replace_dynamic_element_block@0.ops[5]: 'store size_b#0 to l-stack (copy)'
debug: Replaced dynamic_array_replace_dynamic_element_block@0.ops[20]: 'load size_b#0' with 'load size_b#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[11]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[13]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[27]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[29]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[37]: 'store end_offset#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[39]: 'load end_offset#0' with 'load end_offset#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[50]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[52]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[6]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[17]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[20]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[62]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[65]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[34]: 'store is_before_end#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[38]: 'load is_before_end#0' with 'load is_before_end#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[58]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[66]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[44]: 'store original_offset#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[52]: 'load original_offset#0' with 'load original_offset#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[25]: 'store end_of_tail#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[37]: 'load end_of_tail#0' with 'load end_of_tail#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[22]: 'store next_item_offset#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[39]: 'load next_item_offset#0' with 'load next_item_offset#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[45]: 'store end_offset#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[65]: 'load end_offset#0' with 'load end_offset#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[39]: 'store end_of_tail#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[67]: 'load end_of_tail#0' with 'load end_of_tail#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[8]: 'store original_offset#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[48]: 'load original_offset#0' with 'load original_offset#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_block@0.ops[22]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_block@0.ops[81]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_for_header@1.ops[3]: 'store continue_looping%0#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_for_header@1.ops[5]: 'load continue_looping%0#0' with 'load continue_looping%0#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_for_body@2.ops[3]: 'store tail_offset#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_for_body@2.ops[5]: 'load tail_offset#0' with 'load tail_offset#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_for_body@2.ops[8]: 'store tail_offset#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_for_body@2.ops[10]: 'load tail_offset#0' with 'load tail_offset#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_for_body@2.ops[13]: 'store tail_offset#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_for_body@2.ops[15]: 'load tail_offset#0' with 'load tail_offset#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_for_body@2.ops[17]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_for_body@2.ops[19]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_for_body@2.ops[30]: 'store range_item%0#3 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_for_body@2.ops[32]: 'load range_item%0#3' with 'load range_item%0#3 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_for_body@2.ops[21]: 'store tail_offset_bytes#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_for_body@2.ops[25]: 'load tail_offset_bytes#0' with 'load tail_offset_bytes#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_for_body@2.ops[25]: 'store head_offset#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_for_body@2.ops[29]: 'load head_offset#0' with 'load head_offset#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_for_body@2.ops[1]: 'store new_head_and_tail#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_for_body@2.ops[24]: 'load new_head_and_tail#0' with 'load new_head_and_tail#0 from l-stack (no copy)'
debug: Inserted static_array_replace_dynamic_element_for_body@2.ops[3]: 'store head_offset#0 to l-stack (copy)'
debug: Replaced static_array_replace_dynamic_element_for_body@2.ops[26]: 'load head_offset#0' with 'load head_offset#0 from l-stack (no copy)'
debug: Found 2 edge set/s for algopy_lib_arc4.static_array_replace_dynamic_element
debug: algopy_lib_arc4.static_array_replace_dynamic_element f-stack entry: []
debug: algopy_lib_arc4.static_array_replace_dynamic_element f-stack on first store: ['original_item_length#0', 'new_item_length#0', 'new_head_and_tail#0', 'tmp%7#0', 'head_offset#0']
info: Writing arc4_dynamic_arrays/out/DynamicArrayContract.approval.teal
info: Writing arc4_dynamic_arrays/out/DynamicArrayContract.clear.teal
info: Writing arc4_dynamic_arrays/out/DynamicArrayContract.arc32.json
info: Writing arc4_dynamic_arrays/out/client_DynamicArrayContract.py