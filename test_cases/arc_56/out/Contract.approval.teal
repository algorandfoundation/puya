#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 2 8 TMPL_AVM_UINT64
    bytecblock 0x 0x151f7c75 TMPL_ARC4_UINT8 TMPL_AVM_STRING TMPL_STRUCT
    // arc_56/contract.py:53
    // class Contract(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@18
    pushbytes 0x4c5c61ba // method "create()void"
    txna ApplicationArgs 0
    match main_create_route@5
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x97e8e4a7 0x76c4de11 0xc1ca7709 0x6de762c2 0x59fc5282 0x9d9eecb0 0x5e8eef9a // method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64", method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)", method "emits_error((uint64,string,(byte[],uint8)))void", method "emitter()void", method "conditional_emit(bool)void", method "template_value()((byte[],uint8),uint64,string,uint8)", method "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void"
    txna ApplicationArgs 0
    match struct_arg struct_return errors emitter conditional_emit template_value with_constant_defaults

main_after_if_else@22:
    // arc_56/contract.py:53
    // class Contract(ARC4Contract):
    err

main_create_route@5:
    // arc_56/contract.py:80
    // @arc4.abimethod(create="allow", allow_actions=["NoOp", "OptIn"])
    intc_1 // 1
    txn OnCompletion
    shl
    pushint 3 // 3
    &
    assert // OnCompletion must be one of NoOp, OptIn
    intc_1 // 1
    return

main_bare_routing@18:
    // arc_56/contract.py:53
    // class Contract(ARC4Contract):
    txn OnCompletion
    switch main_bare_create@19 main_bare_create@19 main_after_if_else@22 main_after_if_else@22 main_after_if_else@22 main_transient@20
    err

main_transient@20:
    // arc_56/contract.py:84
    // @arc4.baremethod(create="require", allow_actions=["DeleteApplication"])
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return

main_bare_create@19:
    // arc_56/contract.py:76
    // @arc4.baremethod(create="allow", allow_actions=["NoOp", "OptIn"])
    intc_1 // 1
    return


// test_cases.arc_56.contract.Contract.struct_arg[routing]() -> void:
struct_arg:
    // arc_56/contract.py:88
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_3 // 8
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 12 // 12
    ==
    assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]),((len+uint8[]),uint8))
    dig 1
    pushint 10 // 10
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 14 // 14
    +
    dup2
    ==
    assert // invalid tail pointer at index 2 of (uint64,(len+utf8[]),((len+uint8[]),uint8))
    dig 2
    len
    uncover 3
    uncover 3
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 3 // 3
    ==
    assert // invalid tail pointer at index 0 of ((len+uint8[]),uint8)
    dig 1
    len
    dig 2
    cover 2
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 5 // 5
    +
    uncover 3
    +
    uncover 2
    ==
    assert // invalid number of bytes for test_cases.arc_56.contract.TopLevelStruct
    txna ApplicationArgs 2
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 3 // 3
    ==
    assert // invalid tail pointer at index 0 of ((len+uint8[]),uint8)
    dig 1
    len
    dig 2
    uncover 2
    dig 2
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 5 // 5
    +
    ==
    assert // invalid number of bytes for test_cases.arc_56.contract.SharedStruct
    // arc_56/contract.py:91
    // assert arg.shared == shared, "this might error"
    ==
    assert // this might error
    // arc_56/contract.py:88
    // @arc4.abimethod()
    pushbytes 0x151f7c75000000000000002a
    log
    intc_1 // 1
    return


// test_cases.arc_56.contract.Contract.struct_return[routing]() -> void:
struct_return:
    // arc_56/contract.py:94
    // @arc4.abimethod(readonly=True)
    txna ApplicationArgs 1
    dup
    intc_3 // 8
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 12 // 12
    ==
    assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]),((len+uint8[]),uint8))
    dig 1
    pushint 10 // 10
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 14 // 14
    +
    dup2
    ==
    assert // invalid tail pointer at index 2 of (uint64,(len+utf8[]),((len+uint8[]),uint8))
    dig 2
    len
    uncover 3
    uncover 3
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 3 // 3
    ==
    assert // invalid tail pointer at index 0 of ((len+uint8[]),uint8)
    dig 1
    len
    dig 2
    cover 2
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 5 // 5
    +
    uncover 3
    +
    uncover 2
    ==
    assert // invalid number of bytes for test_cases.arc_56.contract.TopLevelStruct
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// test_cases.arc_56.contract.Contract.errors[routing]() -> void:
errors:
    // arc_56/contract.py:99
    // @arc4.abimethod(name="emits_error", readonly=True)
    txna ApplicationArgs 1
    dup
    intc_3 // 8
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 12 // 12
    ==
    assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]),((len+uint8[]),uint8))
    dig 1
    pushint 10 // 10
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 14 // 14
    +
    dup2
    ==
    assert // invalid tail pointer at index 2 of (uint64,(len+utf8[]),((len+uint8[]),uint8))
    dig 2
    len
    dig 3
    uncover 3
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 3 // 3
    ==
    assert // invalid tail pointer at index 0 of ((len+uint8[]),uint8)
    dig 1
    len
    substring3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 5 // 5
    +
    uncover 2
    +
    ==
    assert // invalid number of bytes for test_cases.arc_56.contract.TopLevelStruct
    // arc_56/contract.py:101
    // assert arg.a.bytes == arc4.UInt8(0).bytes, "this will error"
    extract 0 8
    pushbytes 0x00
    ==
    assert // this will error
    // arc_56/contract.py:99
    // @arc4.abimethod(name="emits_error", readonly=True)
    intc_1 // 1
    return


// test_cases.arc_56.contract.Contract.emitter[routing]() -> void:
emitter:
    // arc_56/contract.py:105
    // arc4.emit(SharedStruct(foo=arc4.DynamicBytes(b"hello1"), bar=arc4.UInt8(42)))
    pushbytes 0xd93f374e00032a000668656c6c6f31
    log
    // arc_56/contract.py:107-111
    // arc4.emit(
    //     "Anonymous",
    //     String("hello"),
    //     SharedStruct(foo=arc4.DynamicBytes(b"hello2"), bar=arc4.UInt8(42)),
    // )
    pushbytes 0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32
    log
    // arc_56/contract.py:103
    // @arc4.abimethod()
    intc_1 // 1
    return


// test_cases.arc_56.contract.Contract.conditional_emit[routing]() -> void:
conditional_emit:
    // arc_56/contract.py:113
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 1
    ==
    assert // invalid number of bytes for arc4.bool
    intc_0 // 0
    getbit
    // arc_56/contract.py:115
    // if should_emit:
    bz conditional_emit_after_if_else@3
    // arc_56/contract.py:116-120
    // arc4.emit(
    //     "Anonymous2",
    //     EventOnly(arc4.UInt64(42), arc4.UInt64(43)),
    //     SharedStruct(foo=arc4.DynamicBytes(b"hello3"), bar=arc4.UInt8(42)),
    // )
    pushbytes 0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33
    log

conditional_emit_after_if_else@3:
    // arc_56/contract.py:113
    // @arc4.abimethod()
    intc_1 // 1
    return


// test_cases.arc_56.contract.Contract.template_value[routing]() -> void:
template_value:
    // arc_56/contract.py:128
    // TemplateVar[arc4.UInt8]("ARC4_UINT8"),
    bytec_2 // TMPL_ARC4_UINT8
    // arc_56/contract.py:127
    // TemplateVar[String]("AVM_STRING"),
    bytec_3 // TMPL_AVM_STRING
    // arc_56/contract.py:126
    // TemplateVar[UInt64]("AVM_UINT64"),
    intc 4 // TMPL_AVM_UINT64
    // arc_56/contract.py:125
    // TemplateVar[SharedStruct]("STRUCT"),
    bytec 4 // TMPL_STRUCT
    // arc_56/contract.py:122
    // @arc4.abimethod()
    dup
    len
    pushint 13 // 13
    +
    uncover 2
    itob
    pushbytes 0x000d
    swap
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    uncover 2
    itob
    extract 6 2
    uncover 2
    swap
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// test_cases.arc_56.contract.Contract.with_constant_defaults[routing]() -> void:
with_constant_defaults:
    intc_0 // 0
    bytec_0 // ""
    dupn 5
    // arc_56/contract.py:131-143
    // @arc4.abimethod(
    //     default_args={
    //         "a": arc4.UInt64(123),
    //         "c": Bytes(b"123"),
    //         "b": UInt64(234),
    //         "d": EventOnly(x=arc4.UInt64(1), y=arc4.UInt64(2)),
    //         "e": (UInt64(42), String("on the edge")),
    //         "f": arc4.StaticArray(arc4.String("hi"), arc4.String("there!")),
    //         "g": arc4.DynamicArray(arc4.String("one"), arc4.String("two")),
    //         "h": constant_method(),
    //         "i": echo_number(UInt64(1234)),
    //     }
    // )
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 2
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 3
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 4
    dup
    len
    pushint 16 // 16
    ==
    assert // invalid number of bytes for test_cases.arc_56.contract.EventOnly
    txna ApplicationArgs 5
    dup
    intc_3 // 8
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 10 // 10
    ==
    assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]))
    dig 1
    len
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    pushint 12 // 12
    +
    uncover 2
    ==
    assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.dynamic_array<arc4.uint8>>
    swap
    intc_0 // 0
    extract_uint64
    swap
    extract 2 0
    txna ApplicationArgs 6
    pushint 4 // 4
    intc_0 // 0

with_constant_defaults_for_header@1:
    // arc_56/contract.py:131-143
    // @arc4.abimethod(
    //     default_args={
    //         "a": arc4.UInt64(123),
    //         "c": Bytes(b"123"),
    //         "b": UInt64(234),
    //         "d": EventOnly(x=arc4.UInt64(1), y=arc4.UInt64(2)),
    //         "e": (UInt64(42), String("on the edge")),
    //         "f": arc4.StaticArray(arc4.String("hi"), arc4.String("there!")),
    //         "g": arc4.DynamicArray(arc4.String("one"), arc4.String("two")),
    //         "h": constant_method(),
    //         "i": echo_number(UInt64(1234)),
    //     }
    // )
    dup
    intc_2 // 2
    <
    bz with_constant_defaults_after_for@4
    dupn 2
    intc_2 // 2
    *
    dig 4
    dup
    uncover 2
    extract_uint16 // on error: invalid array encoding
    dup
    dig 5
    dup
    cover 4
    ==
    assert // invalid tail pointer for (len+utf8[])[2]
    dup2
    extract_uint16
    intc_2 // 2
    +
    extract3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    +
    bury 3
    intc_1 // 1
    +
    bury 1
    b with_constant_defaults_for_header@1

with_constant_defaults_after_for@4:
    // arc_56/contract.py:131-143
    // @arc4.abimethod(
    //     default_args={
    //         "a": arc4.UInt64(123),
    //         "c": Bytes(b"123"),
    //         "b": UInt64(234),
    //         "d": EventOnly(x=arc4.UInt64(1), y=arc4.UInt64(2)),
    //         "e": (UInt64(42), String("on the edge")),
    //         "f": arc4.StaticArray(arc4.String("hi"), arc4.String("there!")),
    //         "g": arc4.DynamicArray(arc4.String("one"), arc4.String("two")),
    //         "h": constant_method(),
    //         "i": echo_number(UInt64(1234)),
    //     }
    // )
    dig 2
    len
    dig 2
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.dynamic_array<arc4.uint8>, 2>
    txna ApplicationArgs 7
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    dup
    bury 17
    intc_2 // 2
    *
    bury 12
    dup
    len
    bury 11
    extract 2 0
    bury 16
    intc_0 // 0
    bury 12

with_constant_defaults_for_header@5:
    // arc_56/contract.py:131-143
    // @arc4.abimethod(
    //     default_args={
    //         "a": arc4.UInt64(123),
    //         "c": Bytes(b"123"),
    //         "b": UInt64(234),
    //         "d": EventOnly(x=arc4.UInt64(1), y=arc4.UInt64(2)),
    //         "e": (UInt64(42), String("on the edge")),
    //         "f": arc4.StaticArray(arc4.String("hi"), arc4.String("there!")),
    //         "g": arc4.DynamicArray(arc4.String("one"), arc4.String("two")),
    //         "h": constant_method(),
    //         "i": echo_number(UInt64(1234)),
    //     }
    // )
    dig 11
    dig 15
    <
    bz with_constant_defaults_after_for@8
    dig 11
    dup
    intc_2 // 2
    *
    dig 17
    dup
    uncover 2
    extract_uint16 // on error: invalid array encoding
    dup
    dig 14
    dup
    cover 4
    ==
    assert // invalid tail pointer for (len+(len+utf8[])[])
    dup2
    extract_uint16
    intc_2 // 2
    +
    extract3
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    +
    bury 12
    intc_1 // 1
    +
    bury 12
    b with_constant_defaults_for_header@5

with_constant_defaults_after_for@8:
    // arc_56/contract.py:131-143
    // @arc4.abimethod(
    //     default_args={
    //         "a": arc4.UInt64(123),
    //         "c": Bytes(b"123"),
    //         "b": UInt64(234),
    //         "d": EventOnly(x=arc4.UInt64(1), y=arc4.UInt64(2)),
    //         "e": (UInt64(42), String("on the edge")),
    //         "f": arc4.StaticArray(arc4.String("hi"), arc4.String("there!")),
    //         "g": arc4.DynamicArray(arc4.String("one"), arc4.String("two")),
    //         "h": constant_method(),
    //         "i": echo_number(UInt64(1234)),
    //     }
    // )
    dig 10
    intc_2 // 2
    +
    dig 10
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>
    txna ApplicationArgs 8
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    bury 14
    txna ApplicationArgs 9
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    bury 13
    // arc_56/contract.py:156
    // assert a
    dig 8
    bytec_0 // 0x
    b!=
    assert
    // arc_56/contract.py:157
    // assert b
    dig 7
    assert
    // arc_56/contract.py:158
    // assert c
    dig 6
    len
    assert
    // arc_56/contract.py:159
    // assert d.x or d.y
    dig 5
    extract 0 8
    bytec_0 // 0x
    b!=
    bnz with_constant_defaults_bool_true@11
    dig 5
    extract 8 8
    bytec_0 // 0x
    b!=
    bz with_constant_defaults_bool_false@12

with_constant_defaults_bool_true@11:
    intc_1 // 1

with_constant_defaults_bool_merge@13:
    // arc_56/contract.py:159
    // assert d.x or d.y
    assert
    // arc_56/contract.py:160
    // assert e[0] or e[1]
    dig 4
    bnz with_constant_defaults_bool_true@15
    dig 3
    len
    bz with_constant_defaults_bool_false@16

with_constant_defaults_bool_true@15:
    intc_1 // 1

with_constant_defaults_bool_merge@17:
    // arc_56/contract.py:160
    // assert e[0] or e[1]
    assert
    // arc_56/contract.py:161
    // assert f[0] == "hi"
    dig 2
    dup
    intc_0 // 0
    extract_uint16
    dup2
    extract_uint16
    intc_2 // 2
    +
    extract3
    pushbytes 0x00026869
    ==
    assert
    // arc_56/contract.py:162
    // assert g.length == 2
    dig 14
    intc_2 // 2
    ==
    assert
    // arc_56/contract.py:163
    // assert h == 42
    dig 13
    pushint 42 // 42
    ==
    assert
    // arc_56/contract.py:164
    // assert i == 1234
    dig 12
    pushint 1234 // 1234
    ==
    // arc_56/contract.py:131-143
    // @arc4.abimethod(
    //     default_args={
    //         "a": arc4.UInt64(123),
    //         "c": Bytes(b"123"),
    //         "b": UInt64(234),
    //         "d": EventOnly(x=arc4.UInt64(1), y=arc4.UInt64(2)),
    //         "e": (UInt64(42), String("on the edge")),
    //         "f": arc4.StaticArray(arc4.String("hi"), arc4.String("there!")),
    //         "g": arc4.DynamicArray(arc4.String("one"), arc4.String("two")),
    //         "h": constant_method(),
    //         "i": echo_number(UInt64(1234)),
    //     }
    // )
    return

with_constant_defaults_bool_false@16:
    intc_0 // 0
    b with_constant_defaults_bool_merge@17

with_constant_defaults_bool_false@12:
    intc_0 // 0
    b with_constant_defaults_bool_merge@13
