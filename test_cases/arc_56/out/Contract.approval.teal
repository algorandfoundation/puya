#pragma version 10
#pragma typetrack false

// test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 10 2 TMPL_AVM_UINT64
    bytecblock 0x4c5c61ba 0x 0x151f7c75 TMPL_ARC4_UINT8 TMPL_AVM_STRING TMPL_STRUCT
    // arc_56/contract.py:54
    // class Contract(ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    switch call_NoOp create_NoOp call_OptIn create_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED create_DeleteApplication

*NOT_IMPLEMENTED:
    // arc_56/contract.py:54
    // class Contract(ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // arc_56/contract.py:54
    // class Contract(ARC4Contract):
    txn NumAppArgs
    !
    // arc_56/contract.py:85
    // @arc4.baremethod(create="require", allow_actions=["DeleteApplication"])
    return // on error: this contract does not implement the given ABI method for create DeleteApplication

create_OptIn:
    // arc_56/contract.py:54
    // class Contract(ARC4Contract):
    txn NumAppArgs
    bnz else_body@28
    // arc_56/contract.py:77
    // @arc4.baremethod(create="allow", allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    return

else_body@28:
    // arc_56/contract.py:54
    // class Contract(ARC4Contract):
    bytec_0 // method "create()void"
    txna ApplicationArgs 0
    match create_route@29
    err // this contract does not implement the given ABI method for create OptIn

create_route@29:
    // arc_56/contract.py:81
    // @arc4.abimethod(create="allow", allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    return

call_OptIn:
    // arc_56/contract.py:54
    // class Contract(ARC4Contract):
    txn NumAppArgs
    bnz else_body@23
    // arc_56/contract.py:77
    // @arc4.baremethod(create="allow", allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    return

else_body@23:
    // arc_56/contract.py:54
    // class Contract(ARC4Contract):
    bytec_0 // method "create()void"
    txna ApplicationArgs 0
    match create_route@24
    err // this contract does not implement the given ABI method for call OptIn

create_route@24:
    // arc_56/contract.py:81
    // @arc4.abimethod(create="allow", allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    return

create_NoOp:
    // arc_56/contract.py:54
    // class Contract(ARC4Contract):
    txn NumAppArgs
    bnz else_body@18
    // arc_56/contract.py:77
    // @arc4.baremethod(create="allow", allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    return

else_body@18:
    // arc_56/contract.py:54
    // class Contract(ARC4Contract):
    bytec_0 // method "create()void"
    txna ApplicationArgs 0
    match create_route@19
    err // this contract does not implement the given ABI method for create NoOp

create_route@19:
    // arc_56/contract.py:81
    // @arc4.abimethod(create="allow", allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    return

call_NoOp:
    // arc_56/contract.py:54
    // class Contract(ARC4Contract):
    txn NumAppArgs
    bnz else_body@6
    // arc_56/contract.py:77
    // @arc4.baremethod(create="allow", allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    return

else_body@6:
    // arc_56/contract.py:54
    // class Contract(ARC4Contract):
    bytec_0 // method "create()void"
    pushbytess 0x97e8e4a7 0x76c4de11 0xc1ca7709 0x6de762c2 0x59fc5282 0x9d9eecb0 0x5e8eef9a // method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64", method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)", method "emits_error((uint64,string,(byte[],uint8)))void", method "emitter()void", method "conditional_emit(bool)void", method "template_value()((byte[],uint8),uint64,string,uint8)", method "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void"
    txna ApplicationArgs 0
    match create_route@7 struct_arg struct_return errors emitter conditional_emit template_value with_constant_defaults
    err // this contract does not implement the given ABI method for call NoOp

create_route@7:
    // arc_56/contract.py:81
    // @arc4.abimethod(create="allow", allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    return


// test_cases.arc_56.contract.Contract.struct_arg[routing]() -> void:
struct_arg:
    // arc_56/contract.py:89
    // @arc4.abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // arc_56/contract.py:92
    // assert arg.shared == shared, "this might error"
    dig 1
    intc_2 // 10
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    ==
    assert // this might error
    // arc_56/contract.py:89
    // @arc4.abimethod()
    pushbytes 0x151f7c75000000000000002a
    log
    intc_0 // 1
    return


// test_cases.arc_56.contract.Contract.struct_return[routing]() -> void:
struct_return:
    // arc_56/contract.py:95
    // @arc4.abimethod(readonly=True)
    txna ApplicationArgs 1
    // arc_56/contract.py:97
    // assert arg.shared == echo(arg.shared), "this won't error"
    dup
    intc_2 // 10
    extract_uint16
    dig 1
    len
    substring3
    // arc_56/contract.py:95
    // @arc4.abimethod(readonly=True)
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.arc_56.contract.Contract.errors[routing]() -> void:
errors:
    // arc_56/contract.py:100
    // @arc4.abimethod(name="emits_error", readonly=True)
    txna ApplicationArgs 1
    // arc_56/contract.py:102
    // assert arg.a.bytes == arc4.UInt8(0).bytes, "this will error"
    extract 0 8
    pushbytes 0x00
    ==
    // arc_56/contract.py:100
    // @arc4.abimethod(name="emits_error", readonly=True)
    return // on error: this will error


// test_cases.arc_56.contract.Contract.emitter[routing]() -> void:
emitter:
    // arc_56/contract.py:106
    // arc4.emit(SharedStruct(foo=arc4.DynamicBytes(b"hello1"), bar=arc4.UInt8(42)))
    pushbytes 0xd93f374e00032a000668656c6c6f31
    log
    // arc_56/contract.py:108-112
    // arc4.emit(
    //     "Anonymous",
    //     String("hello"),
    //     SharedStruct(foo=arc4.DynamicBytes(b"hello2"), bar=arc4.UInt8(42)),
    // )
    pushbytes 0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32
    log
    // arc_56/contract.py:104
    // @arc4.abimethod()
    intc_0 // 1
    return


// test_cases.arc_56.contract.Contract.conditional_emit[routing]() -> void:
conditional_emit:
    // arc_56/contract.py:114
    // @arc4.abimethod()
    txna ApplicationArgs 1
    intc_1 // 0
    getbit
    // arc_56/contract.py:116
    // if should_emit:
    bz conditional_emit_after_if_else@3
    // arc_56/contract.py:117-121
    // arc4.emit(
    //     "Anonymous2",
    //     EventOnly(arc4.UInt64(42), arc4.UInt64(43)),
    //     SharedStruct(foo=arc4.DynamicBytes(b"hello3"), bar=arc4.UInt8(42)),
    // )
    pushbytes 0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33
    log

conditional_emit_after_if_else@3:
    // arc_56/contract.py:114
    // @arc4.abimethod()
    intc_0 // 1
    return


// test_cases.arc_56.contract.Contract.template_value[routing]() -> void:
template_value:
    // arc_56/contract.py:129
    // TemplateVar[arc4.UInt8]("ARC4_UINT8"),
    bytec_3 // TMPL_ARC4_UINT8
    // arc_56/contract.py:128
    // TemplateVar[String]("AVM_STRING"),
    bytec 4 // TMPL_AVM_STRING
    // arc_56/contract.py:127
    // TemplateVar[UInt64]("AVM_UINT64"),
    intc 4 // TMPL_AVM_UINT64
    // arc_56/contract.py:126
    // TemplateVar[SharedStruct]("STRUCT"),
    bytec 5 // TMPL_STRUCT
    // arc_56/contract.py:123
    // @arc4.abimethod()
    dup
    len
    pushint 13 // 13
    +
    uncover 2
    itob
    pushbytes 0x000d
    swap
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    uncover 2
    itob
    extract 6 2
    uncover 2
    swap
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.arc_56.contract.Contract.with_constant_defaults[routing]() -> void:
with_constant_defaults:
    // arc_56/contract.py:132-144
    // @arc4.abimethod(
    //     default_args={
    //         "a": arc4.UInt64(123),
    //         "c": Bytes(b"123"),
    //         "b": UInt64(234),
    //         "d": EventOnly(x=arc4.UInt64(1), y=arc4.UInt64(2)),
    //         "e": (UInt64(42), String("on the edge")),
    //         "f": arc4.StaticArray(arc4.String("hi"), arc4.String("there!")),
    //         "g": arc4.DynamicArray(arc4.String("one"), arc4.String("two")),
    //         "h": constant_method(),
    //         "i": echo_number(UInt64(1234)),
    //     }
    // )
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    dup
    cover 4
    cover 4
    txna ApplicationArgs 5
    dup
    intc_1 // 0
    extract_uint64
    cover 5
    dup
    pushint 8 // 8
    extract_uint16
    dig 1
    len
    substring3
    extract 2 0
    cover 4
    txna ApplicationArgs 6
    cover 4
    txna ApplicationArgs 7
    cover 4
    txna ApplicationArgs 8
    btoi
    cover 4
    txna ApplicationArgs 9
    btoi
    cover 4
    // arc_56/contract.py:157
    // assert a
    uncover 2
    bytec_1 // 0x
    b!=
    assert
    // arc_56/contract.py:158
    // assert b
    swap
    assert
    // arc_56/contract.py:159
    // assert c
    len
    assert
    // arc_56/contract.py:160
    // assert d.x or d.y
    extract 0 8
    bytec_1 // 0x
    b!=
    bnz with_constant_defaults_bool_true@3
    dig 6
    extract 8 8
    bytec_1 // 0x
    b!=
    bz with_constant_defaults_bool_false@4

with_constant_defaults_bool_true@3:
    intc_0 // 1

with_constant_defaults_bool_merge@5:
    // arc_56/contract.py:160
    // assert d.x or d.y
    assert
    // arc_56/contract.py:161
    // assert e[0] or e[1]
    dig 5
    bnz with_constant_defaults_bool_true@7
    dig 4
    len
    bz with_constant_defaults_bool_false@8

with_constant_defaults_bool_true@7:
    intc_0 // 1

with_constant_defaults_bool_merge@9:
    // arc_56/contract.py:161
    // assert e[0] or e[1]
    assert
    // arc_56/contract.py:162
    // assert f[0] == "hi"
    dig 3
    dup
    intc_1 // 0
    extract_uint16
    dup2
    extract_uint16
    intc_3 // 2
    +
    extract3
    pushbytes 0x00026869
    ==
    assert
    // arc_56/contract.py:163
    // assert g.length == 2
    dig 2
    intc_1 // 0
    extract_uint16
    intc_3 // 2
    ==
    assert
    // arc_56/contract.py:164
    // assert h == 42
    dig 1
    pushint 42 // 42
    ==
    assert
    // arc_56/contract.py:165
    // assert i == 1234
    dup
    pushint 1234 // 1234
    ==
    // arc_56/contract.py:132-144
    // @arc4.abimethod(
    //     default_args={
    //         "a": arc4.UInt64(123),
    //         "c": Bytes(b"123"),
    //         "b": UInt64(234),
    //         "d": EventOnly(x=arc4.UInt64(1), y=arc4.UInt64(2)),
    //         "e": (UInt64(42), String("on the edge")),
    //         "f": arc4.StaticArray(arc4.String("hi"), arc4.String("there!")),
    //         "g": arc4.DynamicArray(arc4.String("one"), arc4.String("two")),
    //         "h": constant_method(),
    //         "i": echo_number(UInt64(1234)),
    //     }
    // )
    return

with_constant_defaults_bool_false@8:
    intc_1 // 0
    b with_constant_defaults_bool_merge@9

with_constant_defaults_bool_false@4:
    intc_1 // 0
    b with_constant_defaults_bool_merge@5
