#pragma version 10

test_cases.arc_56.contract.Contract.approval_program:
    intcblock 1 0 10 TMPL_AVM_UINT64
    bytecblock 0x151f7c75 TMPL_STRUCT TMPL_AVM_STRING TMPL_ARC4_UINT8
    callsub __puya_arc4_router__
    return


// test_cases.arc_56.contract.Contract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // arc_56/contract.py:41
    // class Contract(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@11
    pushbytess 0x4c5c61ba 0x97e8e4a7 0x76c4de11 0xc1ca7709 0x6de762c2 0x59fc5282 0x9d9eecb0 // method "create()void", method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64", method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)", method "emits_error((uint64,string,(byte[],uint8)))void", method "emitter()void", method "conditional_emit(bool)void", method "template_value()((byte[],uint8),uint64,string,uint8)"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_route@2 __puya_arc4_router___struct_arg_route@3 __puya_arc4_router___struct_return_route@4 __puya_arc4_router___emits_error_route@5 __puya_arc4_router___emitter_route@6 __puya_arc4_router___conditional_emit_route@7 __puya_arc4_router___template_value_route@8
    intc_1 // 0
    retsub

__puya_arc4_router___create_route@2:
    // arc_56/contract.py:68
    // @arc4.abimethod(create="allow", allow_actions=["NoOp", "OptIn"])
    intc_0 // 1
    txn OnCompletion
    shl
    pushint 3 // 3
    &
    assert // OnCompletion is not one of NoOp, OptIn
    intc_0 // 1
    retsub

__puya_arc4_router___struct_arg_route@3:
    // arc_56/contract.py:76
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc_56/contract.py:41
    // class Contract(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // arc_56/contract.py:76
    // @arc4.abimethod()
    callsub struct_arg
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___struct_return_route@4:
    // arc_56/contract.py:82
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc_56/contract.py:41
    // class Contract(ARC4Contract):
    txna ApplicationArgs 1
    // arc_56/contract.py:82
    // @arc4.abimethod(readonly=True)
    callsub struct_return
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___emits_error_route@5:
    // arc_56/contract.py:87
    // @arc4.abimethod(name="emits_error", readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc_56/contract.py:41
    // class Contract(ARC4Contract):
    txna ApplicationArgs 1
    // arc_56/contract.py:87
    // @arc4.abimethod(name="emits_error", readonly=True)
    callsub errors
    intc_0 // 1
    retsub

__puya_arc4_router___emitter_route@6:
    // arc_56/contract.py:91
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub emitter
    intc_0 // 1
    retsub

__puya_arc4_router___conditional_emit_route@7:
    // arc_56/contract.py:101
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // arc_56/contract.py:41
    // class Contract(ARC4Contract):
    txna ApplicationArgs 1
    intc_1 // 0
    getbit
    // arc_56/contract.py:101
    // @arc4.abimethod()
    callsub conditional_emit
    intc_0 // 1
    retsub

__puya_arc4_router___template_value_route@8:
    // arc_56/contract.py:110
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub template_value
    uncover 2
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    dig 3
    len
    pushint 13 // 13
    +
    pushbytes 0x000d
    uncover 3
    concat
    swap
    itob
    extract 6 2
    concat
    uncover 2
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___bare_routing@11:
    // arc_56/contract.py:41
    // class Contract(ARC4Contract):
    txn OnCompletion
    switch __puya_arc4_router___bare_create@12 __puya_arc4_router___bare_create@12 __puya_arc4_router___after_if_else@16 __puya_arc4_router___after_if_else@16 __puya_arc4_router___after_if_else@16 __puya_arc4_router___transient@13
    intc_1 // 0
    retsub

__puya_arc4_router___bare_create@12:
    // arc_56/contract.py:64-65
    // @arc4.baremethod(create="allow", allow_actions=["NoOp", "OptIn"])
    // def bare_create(self) -> None:
    intc_0 // 1
    retsub

__puya_arc4_router___transient@13:
    // arc_56/contract.py:72
    // @arc4.baremethod(create="require", allow_actions=["DeleteApplication"])
    txn ApplicationID
    !
    assert // can only call when creating
    // arc_56/contract.py:72-73
    // @arc4.baremethod(create="require", allow_actions=["DeleteApplication"])
    // def transient(self) -> None:
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@16:
    // arc_56/contract.py:41
    // class Contract(ARC4Contract):
    intc_1 // 0
    retsub


// test_cases.arc_56.contract.Contract.struct_arg(arg: bytes, shared: bytes) -> uint64:
struct_arg:
    // arc_56/contract.py:76-77
    // @arc4.abimethod()
    // def struct_arg(self, arg: TopLevelStruct, shared: SharedStruct) -> UInt64:
    proto 2 1
    // arc_56/contract.py:79
    // assert arg.shared == shared, "this might error"
    frame_dig -2
    intc_2 // 10
    extract_uint16
    frame_dig -2
    len
    frame_dig -2
    cover 2
    substring3
    frame_dig -1
    ==
    assert // this might error
    // arc_56/contract.py:80
    // return UInt64(42)
    pushint 42 // 42
    retsub


// test_cases.arc_56.contract.Contract.struct_return(arg: bytes) -> bytes:
struct_return:
    // arc_56/contract.py:82-83
    // @arc4.abimethod(readonly=True)
    // def struct_return(self, arg: TopLevelStruct) -> SharedStruct:
    proto 1 1
    // arc_56/contract.py:84
    // assert arg.shared == echo(arg.shared), "this won't error"
    frame_dig -1
    intc_2 // 10
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    cover 2
    substring3
    dup
    callsub echo
    pop
    dig 1
    ==
    assert // this won't error
    // arc_56/contract.py:85
    // return arg.shared
    retsub


// test_cases.arc_56.contract.echo(s: bytes) -> bytes, bytes:
echo:
    // arc_56/contract.py:120-121
    // @subroutine
    // def echo(s: SharedStruct) -> SharedStruct:
    proto 1 2
    // arc_56/contract.py:122
    // return s
    frame_dig -1
    dup
    retsub


// test_cases.arc_56.contract.Contract.errors(arg: bytes) -> void:
errors:
    // arc_56/contract.py:87-88
    // @arc4.abimethod(name="emits_error", readonly=True)
    // def errors(self, arg: TopLevelStruct) -> None:
    proto 1 0
    // arc_56/contract.py:89
    // assert arg.a.bytes == arc4.UInt8(0).bytes, "this will error"
    frame_dig -1
    extract 0 8 // on error: Index access is out of bounds
    pushbytes 0x00
    ==
    assert // this will error
    retsub


// test_cases.arc_56.contract.Contract.emitter() -> void:
emitter:
    // arc_56/contract.py:91-92
    // @arc4.abimethod()
    // def emitter(self) -> None:
    proto 0 0
    // arc_56/contract.py:93
    // arc4.emit(SharedStruct(foo=arc4.DynamicBytes(b"hello1"), bar=arc4.UInt8(42)))
    pushbytess 0xd93f374e 0x00032a000668656c6c6f31 // method "SharedStruct(byte[],uint8)", 0x00032a000668656c6c6f31
    concat
    log
    // arc_56/contract.py:95-99
    // arc4.emit(
    //     "Anonymous",
    //     String("hello"),
    //     SharedStruct(foo=arc4.DynamicBytes(b"hello2"), bar=arc4.UInt8(42)),
    // )
    pushbytess 0x1e72af4e 0x0004000b000568656c6c6f00032a000668656c6c6f32 // method "Anonymous(string,(byte[],uint8))", 0x0004000b000568656c6c6f00032a000668656c6c6f32
    concat
    log
    retsub


// test_cases.arc_56.contract.Contract.conditional_emit(should_emit: uint64) -> void:
conditional_emit:
    // arc_56/contract.py:101-102
    // @arc4.abimethod()
    // def conditional_emit(self, should_emit: bool) -> None:
    proto 1 0
    // arc_56/contract.py:103
    // if should_emit:
    frame_dig -1
    bz conditional_emit_after_if_else@2
    // arc_56/contract.py:104-108
    // arc4.emit(
    //     "Anonymous2",
    //     EventOnly(arc4.UInt64(42), arc4.UInt64(43)),
    //     SharedStruct(foo=arc4.DynamicBytes(b"hello3"), bar=arc4.UInt8(42)),
    // )
    pushbytess 0x11c547ba 0x000000000000002a000000000000002b001200032a000668656c6c6f33 // method "Anonymous2((uint64,uint64),(byte[],uint8))", 0x000000000000002a000000000000002b001200032a000668656c6c6f33
    concat
    log

conditional_emit_after_if_else@2:
    retsub


// test_cases.arc_56.contract.Contract.template_value() -> bytes, uint64, bytes, bytes:
template_value:
    // arc_56/contract.py:110-111
    // @arc4.abimethod()
    // def template_value(self) -> tuple[SharedStruct, UInt64, String, arc4.UInt8]:
    proto 0 4
    // arc_56/contract.py:113
    // TemplateVar[SharedStruct]("STRUCT"),
    bytec_1 // TMPL_STRUCT
    // arc_56/contract.py:114
    // TemplateVar[UInt64]("AVM_UINT64"),
    intc_3 // TMPL_AVM_UINT64
    // arc_56/contract.py:115
    // TemplateVar[String]("AVM_STRING"),
    bytec_2 // TMPL_AVM_STRING
    // arc_56/contract.py:116
    // TemplateVar[arc4.UInt8]("ARC4_UINT8"),
    bytec_3 // TMPL_ARC4_UINT8
    // arc_56/contract.py:112-117
    // return (
    //     TemplateVar[SharedStruct]("STRUCT"),
    //     TemplateVar[UInt64]("AVM_UINT64"),
    //     TemplateVar[String]("AVM_STRING"),
    //     TemplateVar[arc4.UInt8]("ARC4_UINT8"),
    // )
    retsub
