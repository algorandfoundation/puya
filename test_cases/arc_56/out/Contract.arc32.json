{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "ALL",
                "opt_in": "ALL"
            }
        },
        "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "arg": {
                    "name": "TopLevelStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "string"
                        ],
                        [
                            "shared",
                            "(byte[],uint8)"
                        ]
                    ]
                },
                "shared": {
                    "name": "SharedStruct",
                    "elements": [
                        [
                            "foo",
                            "byte[]"
                        ],
                        [
                            "bar",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "arg": {
                    "name": "TopLevelStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "string"
                        ],
                        [
                            "shared",
                            "(byte[],uint8)"
                        ]
                    ]
                },
                "output": {
                    "name": "SharedStruct",
                    "elements": [
                        [
                            "foo",
                            "byte[]"
                        ],
                        [
                            "bar",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "emits_error((uint64,string,(byte[],uint8)))void": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "arg": {
                    "name": "TopLevelStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "string"
                        ],
                        [
                            "shared",
                            "(byte[],uint8)"
                        ]
                    ]
                }
            }
        },
        "emitter()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "conditional_emit(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "template_value()((byte[],uint8),uint64,string,uint8)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void": {
            "default_arguments": {
                "a": {
                    "source": "constant",
                    "data": 123
                },
                "b": {
                    "source": "constant",
                    "data": 234
                },
                "h": {
                    "source": "constant",
                    "data": 42
                },
                "i": {
                    "source": "constant",
                    "data": 1234
                }
            },
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "d": {
                    "name": "EventOnly",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyB0ZXN0X2Nhc2VzLmFyY181Ni5jb250cmFjdC5Db250cmFjdC5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxIDAgMTAgNDIgVE1QTF9BVk1fVUlOVDY0CiAgICBieXRlY2Jsb2NrIDB4MTUxZjdjNzUgMHggVE1QTF9BUkM0X1VJTlQ4IFRNUExfQVZNX1NUUklORyBUTVBMX1NUUlVDVAogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjU0CiAgICAvLyBjbGFzcyBDb250cmFjdChBUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDEzCiAgICBwdXNoYnl0ZXNzIDB4NGM1YzYxYmEgMHg5N2U4ZTRhNyAweDc2YzRkZTExIDB4YzFjYTc3MDkgMHg2ZGU3NjJjMiAweDU5ZmM1MjgyIDB4OWQ5ZWVjYjAgMHg1ZThlZWY5YSAvLyBtZXRob2QgImNyZWF0ZSgpdm9pZCIsIG1ldGhvZCAic3RydWN0X2FyZygodWludDY0LHN0cmluZywoYnl0ZVtdLHVpbnQ4KSksKGJ5dGVbXSx1aW50OCkpdWludDY0IiwgbWV0aG9kICJzdHJ1Y3RfcmV0dXJuKCh1aW50NjQsc3RyaW5nLChieXRlW10sdWludDgpKSkoYnl0ZVtdLHVpbnQ4KSIsIG1ldGhvZCAiZW1pdHNfZXJyb3IoKHVpbnQ2NCxzdHJpbmcsKGJ5dGVbXSx1aW50OCkpKXZvaWQiLCBtZXRob2QgImVtaXR0ZXIoKXZvaWQiLCBtZXRob2QgImNvbmRpdGlvbmFsX2VtaXQoYm9vbCl2b2lkIiwgbWV0aG9kICJ0ZW1wbGF0ZV92YWx1ZSgpKChieXRlW10sdWludDgpLHVpbnQ2NCxzdHJpbmcsdWludDgpIiwgbWV0aG9kICJ3aXRoX2NvbnN0YW50X2RlZmF1bHRzKHVpbnQ2NCx1aW50NjQsYnl0ZVtdLCh1aW50NjQsdWludDY0KSwodWludDY0LHN0cmluZyksc3RyaW5nWzJdLHN0cmluZ1tdLHVpbnQ2NCx1aW50NjQpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY3JlYXRlX3JvdXRlQDUgbWFpbl9zdHJ1Y3RfYXJnX3JvdXRlQDYgbWFpbl9zdHJ1Y3RfcmV0dXJuX3JvdXRlQDcgbWFpbl9lbWl0c19lcnJvcl9yb3V0ZUA4IG1haW5fZW1pdHRlcl9yb3V0ZUA5IG1haW5fY29uZGl0aW9uYWxfZW1pdF9yb3V0ZUAxMCBtYWluX3RlbXBsYXRlX3ZhbHVlX3JvdXRlQDExIG1haW5fd2l0aF9jb25zdGFudF9kZWZhdWx0c19yb3V0ZUAxMgoKbWFpbl9hZnRlcl9pZl9lbHNlQDE2OgogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjU0CiAgICAvLyBjbGFzcyBDb250cmFjdChBUkM0Q29udHJhY3QpOgogICAgaW50Y18xIC8vIDAKICAgIHJldHVybgoKbWFpbl93aXRoX2NvbnN0YW50X2RlZmF1bHRzX3JvdXRlQDEyOgogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjEzMi0xNDQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgKICAgIC8vICAgICBkZWZhdWx0X2FyZ3M9ewogICAgLy8gICAgICAgICAiYSI6IGFyYzQuVUludDY0KDEyMyksCiAgICAvLyAgICAgICAgICJjIjogQnl0ZXMoYiIxMjMiKSwKICAgIC8vICAgICAgICAgImIiOiBVSW50NjQoMjM0KSwKICAgIC8vICAgICAgICAgImQiOiBFdmVudE9ubHkoeD1hcmM0LlVJbnQ2NCgxKSwgeT1hcmM0LlVJbnQ2NCgyKSksCiAgICAvLyAgICAgICAgICJlIjogKFVJbnQ2NCg0MiksIFN0cmluZygib24gdGhlIGVkZ2UiKSksCiAgICAvLyAgICAgICAgICJmIjogYXJjNC5TdGF0aWNBcnJheShhcmM0LlN0cmluZygiaGkiKSwgYXJjNC5TdHJpbmcoInRoZXJlISIpKSwKICAgIC8vICAgICAgICAgImciOiBhcmM0LkR5bmFtaWNBcnJheShhcmM0LlN0cmluZygib25lIiksIGFyYzQuU3RyaW5nKCJ0d28iKSksCiAgICAvLyAgICAgICAgICJoIjogY29uc3RhbnRfbWV0aG9kKCksCiAgICAvLyAgICAgICAgICJpIjogZWNob19udW1iZXIoVUludDY0KDEyMzQpKSwKICAgIC8vICAgICB9CiAgICAvLyApCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIGFyY181Ni9jb250cmFjdC5weTo1NAogICAgLy8gY2xhc3MgQ29udHJhY3QoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA1CiAgICBkdXAKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDEKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDIKICAgIGxlbgogICAgdW5jb3ZlciAzCiAgICBjb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgOAogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgOQogICAgYnRvaQogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjEzMi0xNDQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgKICAgIC8vICAgICBkZWZhdWx0X2FyZ3M9ewogICAgLy8gICAgICAgICAiYSI6IGFyYzQuVUludDY0KDEyMyksCiAgICAvLyAgICAgICAgICJjIjogQnl0ZXMoYiIxMjMiKSwKICAgIC8vICAgICAgICAgImIiOiBVSW50NjQoMjM0KSwKICAgIC8vICAgICAgICAgImQiOiBFdmVudE9ubHkoeD1hcmM0LlVJbnQ2NCgxKSwgeT1hcmM0LlVJbnQ2NCgyKSksCiAgICAvLyAgICAgICAgICJlIjogKFVJbnQ2NCg0MiksIFN0cmluZygib24gdGhlIGVkZ2UiKSksCiAgICAvLyAgICAgICAgICJmIjogYXJjNC5TdGF0aWNBcnJheShhcmM0LlN0cmluZygiaGkiKSwgYXJjNC5TdHJpbmcoInRoZXJlISIpKSwKICAgIC8vICAgICAgICAgImciOiBhcmM0LkR5bmFtaWNBcnJheShhcmM0LlN0cmluZygib25lIiksIGFyYzQuU3RyaW5nKCJ0d28iKSksCiAgICAvLyAgICAgICAgICJoIjogY29uc3RhbnRfbWV0aG9kKCksCiAgICAvLyAgICAgICAgICJpIjogZWNob19udW1iZXIoVUludDY0KDEyMzQpKSwKICAgIC8vICAgICB9CiAgICAvLyApCiAgICBjYWxsc3ViIHdpdGhfY29uc3RhbnRfZGVmYXVsdHMKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdGVtcGxhdGVfdmFsdWVfcm91dGVAMTE6CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTIzCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTI5CiAgICAvLyBUZW1wbGF0ZVZhclthcmM0LlVJbnQ4XSgiQVJDNF9VSU5UOCIpLAogICAgYnl0ZWNfMiAvLyBUTVBMX0FSQzRfVUlOVDgKICAgIC8vIGFyY181Ni9jb250cmFjdC5weToxMjgKICAgIC8vIFRlbXBsYXRlVmFyW1N0cmluZ10oIkFWTV9TVFJJTkciKSwKICAgIGJ5dGVjXzMgLy8gVE1QTF9BVk1fU1RSSU5HCiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTI3CiAgICAvLyBUZW1wbGF0ZVZhcltVSW50NjRdKCJBVk1fVUlOVDY0IiksCiAgICBpbnRjIDQgLy8gVE1QTF9BVk1fVUlOVDY0CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTI2CiAgICAvLyBUZW1wbGF0ZVZhcltTaGFyZWRTdHJ1Y3RdKCJTVFJVQ1QiKSwKICAgIGJ5dGVjIDQgLy8gVE1QTF9TVFJVQ1QKICAgIC8vIGFyY181Ni9jb250cmFjdC5weToxMjMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBkdXAKICAgIGxlbgogICAgcHVzaGludCAxMyAvLyAxMwogICAgKwogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBwdXNoYnl0ZXMgMHgwMDBkCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGRpZyAzCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NvbmRpdGlvbmFsX2VtaXRfcm91dGVAMTA6CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTE0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6NTQKICAgIC8vIGNsYXNzIENvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBpbnRjXzEgLy8gMAogICAgZ2V0Yml0CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTE0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBjb25kaXRpb25hbF9lbWl0CiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2VtaXR0ZXJfcm91dGVAOToKICAgIC8vIGFyY181Ni9jb250cmFjdC5weToxMDQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZW1pdHRlcgogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9lbWl0c19lcnJvcl9yb3V0ZUA4OgogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjEwMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9ImVtaXRzX2Vycm9yIiwgcmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjU0CiAgICAvLyBjbGFzcyBDb250cmFjdChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjEwMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKG5hbWU9ImVtaXRzX2Vycm9yIiwgcmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgZXJyb3JzCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3N0cnVjdF9yZXR1cm5fcm91dGVANzoKICAgIC8vIGFyY181Ni9jb250cmFjdC5weTo5NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIGFyY181Ni9jb250cmFjdC5weTo1NAogICAgLy8gY2xhc3MgQ29udHJhY3QoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIGFyY181Ni9jb250cmFjdC5weTo5NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICBjYWxsc3ViIHN0cnVjdF9yZXR1cm4KICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fc3RydWN0X2FyZ19yb3V0ZUA2OgogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5Ojg5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6NTQKICAgIC8vIGNsYXNzIENvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6ODkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHN0cnVjdF9hcmcKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlX3JvdXRlQDU6CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6ODEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChjcmVhdGU9ImFsbG93IiwgYWxsb3dfYWN0aW9ucz1bIk5vT3AiLCAiT3B0SW4iXSkKICAgIGludGNfMCAvLyAxCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBzaGwKICAgIHB1c2hpbnQgMyAvLyAzCiAgICAmCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBvbmUgb2YgTm9PcCwgT3B0SW4KICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDEzOgogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjU0CiAgICAvLyBjbGFzcyBDb250cmFjdChBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgc3dpdGNoIG1haW5fYmFyZV9jcmVhdGVAMTQgbWFpbl9iYXJlX2NyZWF0ZUAxNCBtYWluX2FmdGVyX2lmX2Vsc2VAMTYgbWFpbl9hZnRlcl9pZl9lbHNlQDE2IG1haW5fYWZ0ZXJfaWZfZWxzZUAxNiBtYWluX3RyYW5zaWVudEAxNQogICAgYiBtYWluX2FmdGVyX2lmX2Vsc2VAMTYKCm1haW5fdHJhbnNpZW50QDE1OgogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5Ojg1CiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIsIGFsbG93X2FjdGlvbnM9WyJEZWxldGVBcHBsaWNhdGlvbiJdKQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9jcmVhdGVAMTQ6CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6NzcKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoY3JlYXRlPSJhbGxvdyIsIGFsbG93X2FjdGlvbnM9WyJOb09wIiwgIk9wdEluIl0pCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdF9jYXNlcy5hcmNfNTYuY29udHJhY3QuQ29udHJhY3Quc3RydWN0X2FyZyhhcmc6IGJ5dGVzLCBzaGFyZWQ6IGJ5dGVzKSAtPiB1aW50NjQ6CnN0cnVjdF9hcmc6CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6ODktOTAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgc3RydWN0X2FyZyhzZWxmLCBhcmc6IFRvcExldmVsU3RydWN0LCBzaGFyZWQ6IFNoYXJlZFN0cnVjdCkgLT4gVUludDY0OgogICAgcHJvdG8gMiAxCiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6OTIKICAgIC8vIGFzc2VydCBhcmcuc2hhcmVkID09IHNoYXJlZCwgInRoaXMgbWlnaHQgZXJyb3IiCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMiAvLyAxMAogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2RpZyAtMgogICAgbGVuCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGZyYW1lX2RpZyAtMQogICAgPT0KICAgIGFzc2VydCAvLyB0aGlzIG1pZ2h0IGVycm9yCiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6OTMKICAgIC8vIHJldHVybiBVSW50NjQoNDIpCiAgICBpbnRjXzMgLy8gNDIKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMuYXJjXzU2LmNvbnRyYWN0LkNvbnRyYWN0LnN0cnVjdF9yZXR1cm4oYXJnOiBieXRlcykgLT4gYnl0ZXM6CnN0cnVjdF9yZXR1cm46CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6OTUtOTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgLy8gZGVmIHN0cnVjdF9yZXR1cm4oc2VsZiwgYXJnOiBUb3BMZXZlbFN0cnVjdCkgLT4gU2hhcmVkU3RydWN0OgogICAgcHJvdG8gMSAxCiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6OTcKICAgIC8vIGFzc2VydCBhcmcuc2hhcmVkID09IGVjaG8oYXJnLnNoYXJlZCksICJ0aGlzIHdvbid0IGVycm9yIgogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzIgLy8gMTAKICAgIGV4dHJhY3RfdWludDE2CiAgICBmcmFtZV9kaWcgLTEKICAgIGxlbgogICAgZnJhbWVfZGlnIC0xCiAgICBjb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6OTgKICAgIC8vIHJldHVybiBhcmcuc2hhcmVkCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLmFyY181Ni5jb250cmFjdC5Db250cmFjdC5lcnJvcnMoYXJnOiBieXRlcykgLT4gdm9pZDoKZXJyb3JzOgogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjEwMC0xMDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChuYW1lPSJlbWl0c19lcnJvciIsIHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZXJyb3JzKHNlbGYsIGFyZzogVG9wTGV2ZWxTdHJ1Y3QpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIGFyY181Ni9jb250cmFjdC5weToxMDIKICAgIC8vIGFzc2VydCBhcmcuYS5ieXRlcyA9PSBhcmM0LlVJbnQ4KDApLmJ5dGVzLCAidGhpcyB3aWxsIGVycm9yIgogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDAgOAogICAgcHVzaGJ5dGVzIDB4MDAKICAgID09CiAgICBhc3NlcnQgLy8gdGhpcyB3aWxsIGVycm9yCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLmFyY181Ni5jb250cmFjdC5Db250cmFjdC5lbWl0dGVyKCkgLT4gdm9pZDoKZW1pdHRlcjoKICAgIC8vIGFyY181Ni9jb250cmFjdC5weToxMDYKICAgIC8vIGFyYzQuZW1pdChTaGFyZWRTdHJ1Y3QoZm9vPWFyYzQuRHluYW1pY0J5dGVzKGIiaGVsbG8xIiksIGJhcj1hcmM0LlVJbnQ4KDQyKSkpCiAgICBwdXNoYnl0ZXMgMHhkOTNmMzc0ZTAwMDMyYTAwMDY2ODY1NmM2YzZmMzEKICAgIGxvZwogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjEwOC0xMTIKICAgIC8vIGFyYzQuZW1pdCgKICAgIC8vICAgICAiQW5vbnltb3VzIiwKICAgIC8vICAgICBTdHJpbmcoImhlbGxvIiksCiAgICAvLyAgICAgU2hhcmVkU3RydWN0KGZvbz1hcmM0LkR5bmFtaWNCeXRlcyhiImhlbGxvMiIpLCBiYXI9YXJjNC5VSW50OCg0MikpLAogICAgLy8gKQogICAgcHVzaGJ5dGVzIDB4MWU3MmFmNGUwMDA0MDAwYjAwMDU2ODY1NmM2YzZmMDAwMzJhMDAwNjY4NjU2YzZjNmYzMgogICAgbG9nCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLmFyY181Ni5jb250cmFjdC5Db250cmFjdC5jb25kaXRpb25hbF9lbWl0KHNob3VsZF9lbWl0OiB1aW50NjQpIC0+IHZvaWQ6CmNvbmRpdGlvbmFsX2VtaXQ6CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTE0LTExNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBjb25kaXRpb25hbF9lbWl0KHNlbGYsIHNob3VsZF9lbWl0OiBib29sKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTE2CiAgICAvLyBpZiBzaG91bGRfZW1pdDoKICAgIGZyYW1lX2RpZyAtMQogICAgYnogY29uZGl0aW9uYWxfZW1pdF9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIGFyY181Ni9jb250cmFjdC5weToxMTctMTIxCiAgICAvLyBhcmM0LmVtaXQoCiAgICAvLyAgICAgIkFub255bW91czIiLAogICAgLy8gICAgIEV2ZW50T25seShhcmM0LlVJbnQ2NCg0MiksIGFyYzQuVUludDY0KDQzKSksCiAgICAvLyAgICAgU2hhcmVkU3RydWN0KGZvbz1hcmM0LkR5bmFtaWNCeXRlcyhiImhlbGxvMyIpLCBiYXI9YXJjNC5VSW50OCg0MikpLAogICAgLy8gKQogICAgcHVzaGJ5dGVzIDB4MTFjNTQ3YmEwMDAwMDAwMDAwMDAwMDJhMDAwMDAwMDAwMDAwMDAyYjAwMTIwMDAzMmEwMDA2Njg2NTZjNmM2ZjMzCiAgICBsb2cKCmNvbmRpdGlvbmFsX2VtaXRfYWZ0ZXJfaWZfZWxzZUAyOgogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy5hcmNfNTYuY29udHJhY3QuQ29udHJhY3Qud2l0aF9jb25zdGFudF9kZWZhdWx0cyhhOiBieXRlcywgYjogdWludDY0LCBjOiBieXRlcywgZDogYnl0ZXMsIGUuMDogdWludDY0LCBlLjE6IGJ5dGVzLCBmOiBieXRlcywgZzogYnl0ZXMsIGg6IHVpbnQ2NCwgaTogdWludDY0KSAtPiB2b2lkOgp3aXRoX2NvbnN0YW50X2RlZmF1bHRzOgogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjEzMi0xNTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgKICAgIC8vICAgICBkZWZhdWx0X2FyZ3M9ewogICAgLy8gICAgICAgICAiYSI6IGFyYzQuVUludDY0KDEyMyksCiAgICAvLyAgICAgICAgICJjIjogQnl0ZXMoYiIxMjMiKSwKICAgIC8vICAgICAgICAgImIiOiBVSW50NjQoMjM0KSwKICAgIC8vICAgICAgICAgImQiOiBFdmVudE9ubHkoeD1hcmM0LlVJbnQ2NCgxKSwgeT1hcmM0LlVJbnQ2NCgyKSksCiAgICAvLyAgICAgICAgICJlIjogKFVJbnQ2NCg0MiksIFN0cmluZygib24gdGhlIGVkZ2UiKSksCiAgICAvLyAgICAgICAgICJmIjogYXJjNC5TdGF0aWNBcnJheShhcmM0LlN0cmluZygiaGkiKSwgYXJjNC5TdHJpbmcoInRoZXJlISIpKSwKICAgIC8vICAgICAgICAgImciOiBhcmM0LkR5bmFtaWNBcnJheShhcmM0LlN0cmluZygib25lIiksIGFyYzQuU3RyaW5nKCJ0d28iKSksCiAgICAvLyAgICAgICAgICJoIjogY29uc3RhbnRfbWV0aG9kKCksCiAgICAvLyAgICAgICAgICJpIjogZWNob19udW1iZXIoVUludDY0KDEyMzQpKSwKICAgIC8vICAgICB9CiAgICAvLyApCiAgICAvLyBkZWYgd2l0aF9jb25zdGFudF9kZWZhdWx0cygKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIGE6IGFyYzQuVUludDY0LAogICAgLy8gICAgIGI6IFVJbnQ2NCwKICAgIC8vICAgICBjOiBCeXRlcywKICAgIC8vICAgICBkOiBFdmVudE9ubHksCiAgICAvLyAgICAgZTogdHVwbGVbVUludDY0LCBTdHJpbmddLAogICAgLy8gICAgIGY6IGFyYzQuU3RhdGljQXJyYXlbYXJjNC5TdHJpbmcsIHR5cGluZy5MaXRlcmFsWzJdXSwKICAgIC8vICAgICBnOiBhcmM0LkR5bmFtaWNBcnJheVthcmM0LlN0cmluZ10sCiAgICAvLyAgICAgaDogVUludDY0LAogICAgLy8gICAgIGk6IFVJbnQ2NCwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDEwIDAKICAgIC8vIGFyY181Ni9jb250cmFjdC5weToxNTcKICAgIC8vIGFzc2VydCBhCiAgICBmcmFtZV9kaWcgLTEwCiAgICBieXRlY18xIC8vIDB4CiAgICBiIT0KICAgIGFzc2VydAogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjE1OAogICAgLy8gYXNzZXJ0IGIKICAgIGZyYW1lX2RpZyAtOQogICAgYXNzZXJ0CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTU5CiAgICAvLyBhc3NlcnQgYwogICAgZnJhbWVfZGlnIC04CiAgICBsZW4KICAgIGFzc2VydAogICAgLy8gYXJjXzU2L2NvbnRyYWN0LnB5OjE2MAogICAgLy8gYXNzZXJ0IGQueCBvciBkLnkKICAgIGZyYW1lX2RpZyAtNwogICAgZXh0cmFjdCAwIDgKICAgIGJ5dGVjXzEgLy8gMHgKICAgIGIhPQogICAgYm56IHdpdGhfY29uc3RhbnRfZGVmYXVsdHNfYm9vbF90cnVlQDIKICAgIGZyYW1lX2RpZyAtNwogICAgZXh0cmFjdCA4IDgKICAgIGJ5dGVjXzEgLy8gMHgKICAgIGIhPQogICAgYnogd2l0aF9jb25zdGFudF9kZWZhdWx0c19ib29sX2ZhbHNlQDMKCndpdGhfY29uc3RhbnRfZGVmYXVsdHNfYm9vbF90cnVlQDI6CiAgICBpbnRjXzAgLy8gMQoKd2l0aF9jb25zdGFudF9kZWZhdWx0c19ib29sX21lcmdlQDQ6CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTYwCiAgICAvLyBhc3NlcnQgZC54IG9yIGQueQogICAgYXNzZXJ0CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTYxCiAgICAvLyBhc3NlcnQgZVswXSBvciBlWzFdCiAgICBmcmFtZV9kaWcgLTYKICAgIGJueiB3aXRoX2NvbnN0YW50X2RlZmF1bHRzX2Jvb2xfdHJ1ZUA2CiAgICBmcmFtZV9kaWcgLTUKICAgIGxlbgogICAgYnogd2l0aF9jb25zdGFudF9kZWZhdWx0c19ib29sX2ZhbHNlQDcKCndpdGhfY29uc3RhbnRfZGVmYXVsdHNfYm9vbF90cnVlQDY6CiAgICBpbnRjXzAgLy8gMQoKd2l0aF9jb25zdGFudF9kZWZhdWx0c19ib29sX21lcmdlQDg6CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTYxCiAgICAvLyBhc3NlcnQgZVswXSBvciBlWzFdCiAgICBhc3NlcnQKICAgIC8vIGFyY181Ni9jb250cmFjdC5weToxNjIKICAgIC8vIGFzc2VydCBmWzBdID09ICJoaSIKICAgIGZyYW1lX2RpZyAtNAogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBmcmFtZV9kaWcgLTQKICAgIGRpZyAxCiAgICBleHRyYWN0X3VpbnQxNgogICAgcHVzaGludCAyIC8vIDIKICAgICsKICAgIGZyYW1lX2RpZyAtNAogICAgY292ZXIgMgogICAgZXh0cmFjdDMKICAgIHB1c2hieXRlcyAweDAwMDI2ODY5CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTYzCiAgICAvLyBhc3NlcnQgZy5sZW5ndGggPT0gMgogICAgZnJhbWVfZGlnIC0zCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIHB1c2hpbnQgMiAvLyAyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcmNfNTYvY29udHJhY3QucHk6MTY0CiAgICAvLyBhc3NlcnQgaCA9PSA0MgogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzMgLy8gNDIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFyY181Ni9jb250cmFjdC5weToxNjUKICAgIC8vIGFzc2VydCBpID09IDEyMzQKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCAxMjM0IC8vIDEyMzQKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKd2l0aF9jb25zdGFudF9kZWZhdWx0c19ib29sX2ZhbHNlQDc6CiAgICBpbnRjXzEgLy8gMAogICAgYiB3aXRoX2NvbnN0YW50X2RlZmF1bHRzX2Jvb2xfbWVyZ2VAOAoKd2l0aF9jb25zdGFudF9kZWZhdWx0c19ib29sX2ZhbHNlQDM6CiAgICBpbnRjXzEgLy8gMAogICAgYiB3aXRoX2NvbnN0YW50X2RlZmF1bHRzX2Jvb2xfbWVyZ2VANAo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 2,
            "num_uints": 1
        }
    },
    "schema": {
        "global": {
            "declared": {
                "g_address": {
                    "type": "bytes",
                    "key": "ga"
                },
                "g_struct": {
                    "type": "bytes",
                    "key": "g_struct"
                },
                "g_uint64": {
                    "type": "uint64",
                    "key": "gu"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "l_address": {
                    "type": "bytes",
                    "key": "la"
                },
                "l_struct": {
                    "type": "bytes",
                    "key": "l_struct"
                },
                "l_uint64": {
                    "type": "uint64",
                    "key": "lu"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "Contract",
        "desc": "Contract docstring",
        "methods": [
            {
                "name": "create",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Method docstring"
            },
            {
                "name": "struct_arg",
                "args": [
                    {
                        "type": "(uint64,string,(byte[],uint8))",
                        "name": "arg"
                    },
                    {
                        "type": "(byte[],uint8)",
                        "name": "shared"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Method docstring2"
            },
            {
                "name": "struct_return",
                "args": [
                    {
                        "type": "(uint64,string,(byte[],uint8))",
                        "name": "arg"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(byte[],uint8)"
                }
            },
            {
                "name": "emits_error",
                "args": [
                    {
                        "type": "(uint64,string,(byte[],uint8))",
                        "name": "arg"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "emitter",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "conditional_emit",
                "args": [
                    {
                        "type": "bool",
                        "name": "should_emit"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "template_value",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "((byte[],uint8),uint64,string,uint8)"
                }
            },
            {
                "name": "with_constant_defaults",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "byte[]",
                        "name": "c"
                    },
                    {
                        "type": "(uint64,uint64)",
                        "name": "d"
                    },
                    {
                        "type": "(uint64,string)",
                        "name": "e"
                    },
                    {
                        "type": "string[2]",
                        "name": "f"
                    },
                    {
                        "type": "string[]",
                        "name": "g"
                    },
                    {
                        "type": "uint64",
                        "name": "h"
                    },
                    {
                        "type": "uint64",
                        "name": "i"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "ALL",
        "opt_in": "ALL",
        "delete_application": "CREATE"
    }
}