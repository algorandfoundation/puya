{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "ALL",
                "opt_in": "ALL"
            }
        },
        "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "arg": {
                    "name": "TopLevelStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "string"
                        ],
                        [
                            "shared",
                            "(byte[],uint8)"
                        ]
                    ]
                },
                "shared": {
                    "name": "SharedStruct",
                    "elements": [
                        [
                            "foo",
                            "byte[]"
                        ],
                        [
                            "bar",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "arg": {
                    "name": "TopLevelStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "string"
                        ],
                        [
                            "shared",
                            "(byte[],uint8)"
                        ]
                    ]
                },
                "output": {
                    "name": "SharedStruct",
                    "elements": [
                        [
                            "foo",
                            "byte[]"
                        ],
                        [
                            "bar",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "emits_error((uint64,string,(byte[],uint8)))void": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "arg": {
                    "name": "TopLevelStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "string"
                        ],
                        [
                            "shared",
                            "(byte[],uint8)"
                        ]
                    ]
                }
            }
        },
        "emitter()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "conditional_emit(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "template_value()((byte[],uint8),uint64,string,uint8)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "d": {
                    "name": "EventOnly",
                    "elements": [
                        [
                            "x",
                            "uint64"
                        ],
                        [
                            "y",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 2,
            "num_uints": 1
        }
    },
    "schema": {
        "global": {
            "declared": {
                "g_address": {
                    "type": "bytes",
                    "key": "ga"
                },
                "g_struct": {
                    "type": "bytes",
                    "key": "g_struct"
                },
                "g_uint64": {
                    "type": "uint64",
                    "key": "gu"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "l_address": {
                    "type": "bytes",
                    "key": "la"
                },
                "l_struct": {
                    "type": "bytes",
                    "key": "l_struct"
                },
                "l_uint64": {
                    "type": "uint64",
                    "key": "lu"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "Contract",
        "desc": "Contract docstring",
        "methods": [
            {
                "name": "create",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Method docstring"
            },
            {
                "name": "struct_arg",
                "args": [
                    {
                        "type": "(uint64,string,(byte[],uint8))",
                        "name": "arg"
                    },
                    {
                        "type": "(byte[],uint8)",
                        "name": "shared"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Method docstring2"
            },
            {
                "name": "struct_return",
                "args": [
                    {
                        "type": "(uint64,string,(byte[],uint8))",
                        "name": "arg"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(byte[],uint8)"
                }
            },
            {
                "name": "emits_error",
                "args": [
                    {
                        "type": "(uint64,string,(byte[],uint8))",
                        "name": "arg"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "emitter",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "conditional_emit",
                "args": [
                    {
                        "type": "bool",
                        "name": "should_emit"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "template_value",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "((byte[],uint8),uint64,string,uint8)"
                }
            },
            {
                "name": "with_constant_defaults",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "byte[]",
                        "name": "c"
                    },
                    {
                        "type": "(uint64,uint64)",
                        "name": "d"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "ALL",
        "opt_in": "ALL",
        "delete_application": "CREATE"
    }
}