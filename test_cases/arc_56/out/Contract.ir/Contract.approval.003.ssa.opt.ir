main test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@15
    block@4: // abi_routing_L54
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@5, * => block@6}
    block@5: // create_route_L81
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: uint64 = (shl 1u tmp%3#0)
        let tmp%5#0: uint64 = (& tmp%4#0 3u)
        (assert tmp%5#0) // OnCompletion must be one of NoOp, OptIn
        exit 1u
    block@6: // switch_case_next_L54
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // OnCompletion is not NoOp
        let tmp%8#0: bool = (txn ApplicationID)
        (assert tmp%8#0)
        let tmp%9#0: bytes = (txna ApplicationArgs 0)
        switch tmp%9#0 {method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64" => block@8, method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)" => block@9, method "emits_error((uint64,string,(byte[],uint8)))void" => block@10, method "emitter()void" => block@11, method "conditional_emit(bool)void" => block@12, method "template_value()((byte[],uint8),uint64,string,uint8)" => block@13, method "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void" => block@14, * => block@18}
    block@8: // struct_arg_route_L89
        test_cases.arc_56.contract.Contract.struct_arg[routing]()
        goto block@18
    block@9: // struct_return_route_L95
        test_cases.arc_56.contract.Contract.struct_return[routing]()
        goto block@18
    block@10: // emits_error_route_L100
        test_cases.arc_56.contract.Contract.errors[routing]()
        goto block@18
    block@11: // emitter_route_L104
        test_cases.arc_56.contract.Contract.emitter[routing]()
        goto block@18
    block@12: // conditional_emit_route_L114
        test_cases.arc_56.contract.Contract.conditional_emit[routing]()
        goto block@18
    block@13: // template_value_route_L123
        test_cases.arc_56.contract.Contract.template_value[routing]()
        goto block@18
    block@14: // with_constant_defaults_route_L132
        test_cases.arc_56.contract.Contract.with_constant_defaults[routing]()
        goto block@18
    block@15: // bare_routing_L54
        let tmp%10#0: uint64 = (txn OnCompletion)
        goto_nth [block@16, block@16, block@18, block@18, block@18, block@17][tmp%10#0] else goto block@18
    block@16: // bare_create_L77
        exit 1u
    block@17: // transient_L85
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // can only call when creating
        exit 1u
    block@18: // after_if_else_L54
        fail

subroutine test_cases.arc_56.contract.Contract.struct_arg[routing]() -> void:
    block@0: // L89
        let arg#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let shared#0: Encoded((len+uint8[]),uint8) = (txna ApplicationArgs 2)
        let tuple_item%0#0: Encoded((len+uint8[]),uint8) = extract_value(arg#0, 2)
        let tmp%0#1: bool = (== tuple_item%0#0 shared#0)
        (assert tmp%0#1) // this might error
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(42u)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.struct_return[routing]() -> void:
    block@0: // L95
        let arg#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let s#0: Encoded((len+uint8[]),uint8) = extract_value(arg#0, 2)
        let tmp%1#0: bytes = (concat 0x151f7c75 s#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.errors[routing]() -> void:
    block@0: // L100
        let arg#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let tuple_item%0#0: Encoded(uint64) = extract_value(arg#0, 0)
        let tmp%0#0: bool = (== tuple_item%0#0 0x00)
        (assert tmp%0#0) // this will error
        exit 1u

subroutine test_cases.arc_56.contract.Contract.emitter[routing]() -> void:
    block@0: // L104
        let tmp%0#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x68656c6c6f31)
        let tmp%1#0: Encoded((len+uint8[]),uint8) = bytes_encode<((len+uint8[]),uint8)>(tmp%0#0, 0x2a)
        let event%0#0: bytes = (concat method "SharedStruct(byte[],uint8)" tmp%1#0)
        (log event%0#0)
        let tmp%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("hello")
        let tmp%3#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x68656c6c6f32)
        let tmp%4#0: Encoded((len+uint8[]),uint8) = bytes_encode<((len+uint8[]),uint8)>(tmp%3#0, 0x2a)
        let tmp%5#0: Encoded((len+utf8[]),((len+uint8[]),uint8)) = bytes_encode<((len+utf8[]),((len+uint8[]),uint8))>(tmp%2#0, tmp%4#0)
        let event%1#0: bytes = (concat method "Anonymous(string,(byte[],uint8))" tmp%5#0)
        (log event%1#0)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.conditional_emit[routing]() -> void:
    block@0: // L114
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let should_emit#0: bool = decode_bytes<bool>(reinterpret_Encoded(bool8)%0#0)
        goto should_emit#0 ? block@2 : block@3
    block@2: // if_body_L117
        let tmp%0#1: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(0x000000000000002a, 0x000000000000002b)
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x68656c6c6f33)
        let tmp%2#0: Encoded((len+uint8[]),uint8) = bytes_encode<((len+uint8[]),uint8)>(tmp%1#0, 0x2a)
        let tmp%3#0: Encoded((uint64,uint64),((len+uint8[]),uint8)) = bytes_encode<((uint64,uint64),((len+uint8[]),uint8))>(tmp%0#1, tmp%2#0)
        let event%0#0: bytes = (concat method "Anonymous2((uint64,uint64),(byte[],uint8))" tmp%3#0)
        (log event%0#0)
        goto block@3
    block@3: // after_if_else_L116
        exit 1u

subroutine test_cases.arc_56.contract.Contract.template_value[routing]() -> void:
    block@0: // L123
        let tmp%0#0: Encoded((len+uint8[]),uint8) = TemplateVar[Encoded((len+uint8[]),uint8)](TMPL_STRUCT)
        let tmp%1#0: uint64 = TemplateVar[uint64](TMPL_AVM_UINT64)
        let tmp%2#0: string = TemplateVar[string](TMPL_AVM_STRING)
        let tmp%3#0: Encoded(uint8) = TemplateVar[Encoded(uint8)](TMPL_ARC4_UINT8)
        let tmp%4#0: Encoded(((len+uint8[]),uint8),uint64,(len+utf8[]),uint8) = bytes_encode<(((len+uint8[]),uint8),uint64,(len+utf8[]),uint8)>(tmp%0#0, tmp%1#0, tmp%2#0, tmp%3#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.with_constant_defaults[routing]() -> void:
    block@0: // L132
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let b#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let c#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let d#0: Encoded(uint64,uint64) = (txna ApplicationArgs 4)
        let reinterpret_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 5)
        let (e.0#0: uint64, e.1#0: string) = decode_bytes<(uint64,string,)>(reinterpret_Encoded(uint64,(len+utf8[]))%0#0)
        let f#0: Encoded((len+utf8[])[2]) = (txna ApplicationArgs 6)
        let g#0: Encoded(len+(len+utf8[])[]) = (txna ApplicationArgs 7)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let h#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let i#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%3#0)
        let tmp%0#1: bool = (b!= a#0 0b)
        (assert tmp%0#1)
        (assert b#0)
        let tmp%2#1: uint64 = (len c#0)
        (assert tmp%2#1)
        let tuple_item%0#0: Encoded(uint64) = extract_value(d#0, 0)
        let tmp%4#1: bool = (b!= tuple_item%0#0 0b)
        goto tmp%4#1 ? block@3 : block@2
    block@2: // or_contd_L160
        let tuple_item%1#0: Encoded(uint64) = extract_value(d#0, 1)
        let tmp%5#1: bool = (b!= tuple_item%1#0 0b)
        goto tmp%5#1 ? block@3 : block@4
    block@3: // bool_true_L160
        let or_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L160
        let or_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L160
        let or_result%0#2: bool = φ(or_result%0#0 <- block@3, or_result%0#1 <- block@4)
        (assert or_result%0#2)
        goto e.0#0 ? block@7 : block@6
    block@6: // or_contd_L161
        let tmp%7#0: uint64 = (len e.1#0)
        goto tmp%7#0 ? block@7 : block@8
    block@7: // bool_true_L161
        let or_result%1#0: bool = 1u
        goto block@9
    block@8: // bool_false_L161
        let or_result%1#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L161
        let or_result%1#2: bool = φ(or_result%1#0 <- block@7, or_result%1#1 <- block@8)
        (assert or_result%1#2)
        let array_item%0#0: Encoded(len+utf8[]) = extract_value(f#0, 0u)
        let tmp%9#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("hi")
        let tmp%10#0: bool = (== array_item%0#0 tmp%9#0)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = array_len(g#0)
        let tmp%12#0: bool = (== tmp%11#0 2u)
        (assert tmp%12#0)
        let tmp%13#0: bool = (== h#0 42u)
        (assert tmp%13#0)
        let tmp%14#0: bool = (== i#0 1234u)
        (assert tmp%14#0)
        exit 1u