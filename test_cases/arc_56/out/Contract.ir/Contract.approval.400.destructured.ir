main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@4 : block@18
    block@4: // abi_routing_L53
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@5, * => block@6}
    block@5: // create_route_L80
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: uint64 = (shl 1u tmp%3#0)
        let tmp%5#0: uint64 = (& tmp%4#0 3u)
        (assert tmp%5#0) // OnCompletion must be one of NoOp, OptIn
        exit 1u
    block@6: // switch_case_next_L53
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp
        let tmp%8#0: uint64 = (txn ApplicationID)
        (assert tmp%8#0)
        let tmp%10#0: bytes = (txna ApplicationArgs 0)
        switch tmp%10#0 {method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64" => block@8, method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)" => block@9, method "emits_error((uint64,string,(byte[],uint8)))void" => block@10, method "emitter()void" => block@11, method "conditional_emit(bool)void" => block@12, method "template_value()((byte[],uint8),uint64,string,uint8)" => block@13, method "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void" => block@14, * => block@22}
    block@8: // struct_arg_route_L88
        test_cases.arc_56.contract.Contract.struct_arg[routing]()
        goto block@22
    block@9: // struct_return_route_L94
        test_cases.arc_56.contract.Contract.struct_return[routing]()
        goto block@22
    block@10: // emits_error_route_L99
        test_cases.arc_56.contract.Contract.errors[routing]()
        goto block@22
    block@11: // emitter_route_L103
        test_cases.arc_56.contract.Contract.emitter[routing]()
        goto block@22
    block@12: // conditional_emit_route_L113
        test_cases.arc_56.contract.Contract.conditional_emit[routing]()
        goto block@22
    block@13: // template_value_route_L122
        test_cases.arc_56.contract.Contract.template_value[routing]()
        goto block@22
    block@14: // with_constant_defaults_route_L131
        test_cases.arc_56.contract.Contract.with_constant_defaults[routing]()
        goto block@22
    block@18: // bare_routing_L53
        let tmp%11#0: uint64 = (txn OnCompletion)
        goto_nth [block@19, block@19, block@22, block@22, block@22, block@20][tmp%11#0] else goto block@22
    block@19: // bare_create_L76
        exit 1u
    block@20: // transient_L84
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // can only call when creating
        exit 1u
    block@22: // after_if_else_L53
        fail

subroutine test_cases.arc_56.contract.Contract.struct_arg[routing]() -> void:
    block@0: // L88
        let arg#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let shared#0: Encoded((len+uint8[]),uint8) = (txna ApplicationArgs 2)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%0#0: uint64 = (len arg#0)
        let aggregate%substring3%0#0: bytes = (substring3 arg#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%0#1: bool = (== aggregate%substring3%0#0 shared#0)
        (assert tmp%0#1) // this might error
        (log 0x151f7c75000000000000002a)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.struct_return[routing]() -> void:
    block@0: // L94
        let arg#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%0#0: uint64 = (len arg#0)
        let s#0: Encoded((len+uint8[]),uint8) = (substring3 arg#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 s#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.errors[routing]() -> void:
    block@0: // L99
        let arg#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = ((extract 0 8) arg#0)
        let tmp%0#1: bool = (== aggregate%extract%0#0 0x00)
        (assert tmp%0#1) // this will error
        exit 1u

subroutine test_cases.arc_56.contract.Contract.emitter[routing]() -> void:
    block@0: // L103
        (log 0xd93f374e00032a000668656c6c6f31)
        (log 0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.conditional_emit[routing]() -> void:
    block@0: // L113
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for bool8
        let should_emit#0: bool = (getbit tmp%0#0 0u)
        goto should_emit#0 ? block@2 : block@3
    block@2: // if_body_L116
        (log 0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33)
        goto block@3
    block@3: // after_if_else_L115
        exit 1u

subroutine test_cases.arc_56.contract.Contract.template_value[routing]() -> void:
    block@0: // L122
        let tmp%0#0: Encoded((len+uint8[]),uint8) = TemplateVar[Encoded((len+uint8[]),uint8)](TMPL_STRUCT)
        let tmp%1#0: uint64 = TemplateVar[uint64](TMPL_AVM_UINT64)
        let tmp%2#0: string = TemplateVar[string](TMPL_AVM_STRING)
        let tmp%3#0: Encoded(uint8) = TemplateVar[Encoded(uint8)](TMPL_ARC4_UINT8)
        let aggregate%data_length%0#0: uint64 = (len tmp%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 13u aggregate%data_length%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%head%1#0: bytes = (concat 0x000d aggregate%val_as_bytes%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%2#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%2#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%1#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 tmp%3#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 tmp%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%encoded_value%0#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 aggregate%concat%1#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.with_constant_defaults[routing]() -> void:
    block@0: // L131
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len a#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let tmp%1#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%1#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let b#0: uint64 = (btoi tmp%1#0)
        let tmp%3#0: bytes = (txna ApplicationArgs 3)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%3#0 0u)
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%2#0: uint64 = (len tmp%3#0)
        let eq%2#0: bool = (== len%2#0 add%0#0)
        (assert eq%2#0) // invalid number of bytes for (len+uint8[])
        let c#0: bytes = ((extract 2 0) tmp%3#0)
        let d#0: Encoded(uint64,uint64) = (txna ApplicationArgs 4)
        let len%3#0: uint64 = (len d#0)
        let eq%3#0: bool = (== len%3#0 16u)
        (assert eq%3#0) // invalid number of bytes for (uint64,uint64)
        let tmp%6#0: bytes = (txna ApplicationArgs 5)
        let e.0#0: uint64 = (extract_uint64 tmp%6#0 0u)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tmp%6#0 8u)
        let aggregate%len%0#0: uint64 = (len tmp%6#0)
        let aggregate%substring3%0#0: bytes = (substring3 tmp%6#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let e.1#0: string = ((extract 2 0) aggregate%substring3%0#0)
        let f#0: Encoded((len+utf8[])[2]) = (txna ApplicationArgs 6)
        let g#0: Encoded(len+(len+utf8[])[]) = (txna ApplicationArgs 7)
        let tmp%11#0: bytes = (txna ApplicationArgs 8)
        let len%4#0: uint64 = (len tmp%11#0)
        let eq%4#0: bool = (== len%4#0 8u)
        (assert eq%4#0) // invalid number of bytes for uint64
        let h#0: uint64 = (btoi tmp%11#0)
        let tmp%13#0: bytes = (txna ApplicationArgs 9)
        let len%5#0: uint64 = (len tmp%13#0)
        let eq%5#0: bool = (== len%5#0 8u)
        (assert eq%5#0) // invalid number of bytes for uint64
        let i#0: uint64 = (btoi tmp%13#0)
        let tmp%0#1: bool = (b!= a#0 0b)
        (assert tmp%0#1)
        (assert b#0)
        let tmp%2#1: uint64 = (len c#0)
        (assert tmp%2#1)
        let aggregate%extract%1#0: bytes = ((extract 0 8) d#0)
        let tmp%4#1: bool = (b!= aggregate%extract%1#0 0b)
        goto tmp%4#1 ? block@3 : block@2
    block@2: // or_contd_L159
        let aggregate%extract%2#0: bytes = ((extract 8 8) d#0)
        let tmp%5#1: bool = (b!= aggregate%extract%2#0 0b)
        goto tmp%5#1 ? block@3 : block@4
    block@3: // bool_true_L159
        let or_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L159
        let or_result%0#0: bool = 0u
        goto block@5
    block@5: // bool_merge_L159
        (assert or_result%0#0)
        goto e.0#0 ? block@7 : block@6
    block@6: // or_contd_L160
        let tmp%7#1: uint64 = (len e.1#0)
        goto tmp%7#1 ? block@7 : block@8
    block@7: // bool_true_L160
        let or_result%1#0: bool = 1u
        goto block@9
    block@8: // bool_false_L160
        let or_result%1#0: bool = 0u
        goto block@9
    block@9: // bool_merge_L160
        (assert or_result%1#0)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 f#0 0u)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 f#0 aggregate%item_offset%0#0)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 f#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let tmp%10#1: bool = (== aggregate%item%0#0 0x00026869)
        (assert tmp%10#1)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 g#0 0u)
        let tmp%12#1: bool = (== aggregate%array_length%1#0 2u)
        (assert tmp%12#1)
        let tmp%13#1: bool = (== h#0 42u)
        (assert tmp%13#1)
        let tmp%14#1: bool = (== i#0 1234u)
        (assert tmp%14#1)
        exit 1u