main test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@13
    block@4: // abi_routing_L54
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@5, method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64" => block@6, method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)" => block@7, method "emits_error((uint64,string,(byte[],uint8)))void" => block@8, method "emitter()void" => block@9, method "conditional_emit(bool)void" => block@10, method "template_value()((byte[],uint8),uint64,string,uint8)" => block@11, method "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void" => block@12, * => block@16}
    block@5: // create_route_L81
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: uint64 = (shl 1u tmp%3#0)
        let tmp%5#0: uint64 = (& tmp%4#0 3u)
        (assert tmp%5#0) // OnCompletion is not one of NoOp, OptIn
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        goto block@17
    block@6: // struct_arg_route_L89
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // OnCompletion is not NoOp
        let tmp%8#0: uint64 = (txn ApplicationID)
        (assert tmp%8#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let reinterpret_Encoded((len+uint8[]),uint8)%0#0: Encoded((len+uint8[]),uint8) = (txna ApplicationArgs 2)
        let tmp%10#0: uint64 = test_cases.arc_56.contract.Contract.struct_arg(reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0, reinterpret_Encoded((len+uint8[]),uint8)%0#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%10#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let tmp%11#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
        (log tmp%12#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#1: bool = 1u
        goto block@17
    block@7: // struct_return_route_L95
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%1#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let tmp%17#0: Encoded((len+uint8[]),uint8) = test_cases.arc_56.contract.Contract.struct_return(reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%1#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
        (log tmp%18#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#2: bool = 1u
        goto block@17
    block@8: // emits_error_route_L100
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%2#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        test_cases.arc_56.contract.Contract.errors(reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%2#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#3: bool = 1u
        goto block@17
    block@9: // emitter_route_L104
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        test_cases.arc_56.contract.Contract.emitter()
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#4: bool = 1u
        goto block@17
    block@10: // conditional_emit_route_L114
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let aggregate%get_bit%0#1: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let tmp%31#0: bool = aggregate%get_bit%0#1
        test_cases.arc_56.contract.Contract.conditional_emit(tmp%31#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#5: bool = 1u
        goto block@17
    block@11: // template_value_route_L123
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        (assert tmp%34#0) // can only call when not creating
        let tmp%36#0: Encoded((len+uint8[]),uint8) = TemplateVar[Encoded((len+uint8[]),uint8)](TMPL_STRUCT)
        let tmp%37#0: uint64 = TemplateVar[uint64](TMPL_AVM_UINT64)
        let tmp%38#0: string = TemplateVar[string](TMPL_AVM_STRING)
        let tmp%39#0: Encoded(uint8) = TemplateVar[Encoded(uint8)](TMPL_ARC4_UINT8)
        let aggregate%data_length%0#1: uint64 = (len tmp%36#0)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 13u aggregate%data_length%0#1)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 13u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%0#1: bytes = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%37#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%length%0#1: uint64 = (len tmp%38#0)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 tmp%38#0)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let aggregate%data_length%1#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%current_tail_offset%1#1: uint64 = (+ aggregate%current_tail_offset%0#1 aggregate%data_length%1#1)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%2#1: bytes = (concat aggregate%encoded%1#1 aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%3#1: bytes = (concat aggregate%encoded%2#1 tmp%39#0)
        let aggregate%concat%0#1: bytes = (concat aggregate%encoded%3#1 tmp%36#0)
        let aggregate%concat%1#1: bytes = (concat aggregate%concat%0#1 aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%as_Encoded(((len+uint8[]),uint8),uint64,(len+utf8[]),uint8)%0#1: Encoded(((len+uint8[]),uint8),uint64,(len+utf8[]),uint8) = aggregate%concat%1#1
        let tmp%40#0: Encoded(((len+uint8[]),uint8),uint64,(len+utf8[]),uint8) = aggregate%as_Encoded(((len+uint8[]),uint8),uint64,(len+utf8[]),uint8)%0#1
        let tmp%41#0: bytes = (concat 0x151f7c75 tmp%40#0)
        (log tmp%41#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#6: bool = 1u
        goto block@17
    block@12: // with_constant_defaults_route_L132
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        (assert tmp%44#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%46#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let tmp%47#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 4)
        let reinterpret_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 5)
        let aggregate%extract%0#1: bytes = (extract3 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 8u)
        let aggregate%len%0#1: uint64 = (len reinterpret_Encoded(uint64,(len+utf8[]))%0#0)
        let aggregate%substring3%0#1: bytes = (substring3 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%item1%0#1: bytes = ((extract 2 0) aggregate%substring3%0#1)
        let (tmp%48#0: uint64, tmp%49#0: string) = (aggregate%item0%0#1, aggregate%item1%0#1)
        let reinterpret_Encoded((len+utf8[])[2])%0#0: Encoded((len+utf8[])[2]) = (txna ApplicationArgs 6)
        let reinterpret_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = (txna ApplicationArgs 7)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let tmp%50#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let tmp%51#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        test_cases.arc_56.contract.Contract.with_constant_defaults(reinterpret_Encoded(uint64)%0#0, tmp%46#0, tmp%47#0, reinterpret_Encoded(uint64,uint64)%0#0, tmp%48#0, tmp%49#0, reinterpret_Encoded((len+utf8[])[2])%0#0, reinterpret_Encoded(len+(len+utf8[])[])%0#0, tmp%50#0, tmp%51#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#7: bool = 1u
        goto block@17
    block@13: // bare_routing_L54
        let tmp%52#0: uint64 = (txn OnCompletion)
        goto_nth [block@14, block@14, block@16, block@16, block@16, block@15][tmp%52#0] else goto block@16
    block@14: // bare_create_L77
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#8: bool = 1u
        goto block@17
    block@15: // transient_L85
        let tmp%53#0: uint64 = (txn ApplicationID)
        let tmp%54#0: bool = (! tmp%53#0)
        (assert tmp%54#0) // can only call when creating
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#9: bool = 1u
        goto block@17
    block@16: // after_if_else_L54
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#10: bool = 0u
        goto block@17
    block@17: // after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router___L1
        let tmp%0#1: bool = φ(test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0 <- block@5, test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#1 <- block@6, test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#2 <- block@7, test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#3 <- block@8, test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#4 <- block@9, test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#5 <- block@10, test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#6 <- block@11, test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#7 <- block@12, test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#8 <- block@14, test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#9 <- block@15, test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#10 <- block@16)
        return tmp%0#1

subroutine test_cases.arc_56.contract.Contract.struct_arg(arg: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)), shared: Encoded((len+uint8[]),uint8)) -> uint64:
    block@0: // L89
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%0#1: uint64 = (len arg#0)
        let aggregate%substring3%0#1: bytes = (substring3 arg#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let tuple_item%0#0: Encoded((len+uint8[]),uint8) = aggregate%substring3%0#1
        let tmp%0#0: bool = (== tuple_item%0#0 shared#0)
        (assert tmp%0#0) // this might error
        return 42u

subroutine test_cases.arc_56.contract.Contract.struct_return(arg: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))) -> Encoded((len+uint8[]),uint8):
    block@0: // L95
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%0#1: uint64 = (len arg#0)
        let aggregate%substring3%0#1: bytes = (substring3 arg#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let s#0: Encoded((len+uint8[]),uint8) = aggregate%substring3%0#1
        return s#0

subroutine test_cases.arc_56.contract.Contract.errors(arg: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))) -> void:
    block@0: // L100
        let aggregate%extract%0#1: bytes = (extract3 arg#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let tmp%0#0: bool = (== tuple_item%0#0 0x00)
        (assert tmp%0#0) // this will error
        return 

subroutine test_cases.arc_56.contract.Contract.emitter() -> void:
    block@0: // L104
        let aggregate%length%0#1: uint64 = (len 0x68656c6c6f31)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x68656c6c6f31)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        let aggregate%data_length%0#1: uint64 = (len tmp%0#0)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 3u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%0#1: bytes = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 0x2a)
        let aggregate%concat%0#1: bytes = (concat aggregate%encoded%1#1 tmp%0#0)
        let aggregate%as_Encoded((len+uint8[]),uint8)%0#1: Encoded((len+uint8[]),uint8) = aggregate%concat%0#1
        let tmp%1#0: Encoded((len+uint8[]),uint8) = aggregate%as_Encoded((len+uint8[]),uint8)%0#1
        let event%0#0: bytes = (concat method "SharedStruct(byte[],uint8)" tmp%1#0)
        (log event%0#0)
        let aggregate%length%1#1: uint64 = (len "hello")
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%length%2#1: uint64 = (len 0x68656c6c6f32)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%length%2#1)
        let aggregate%length_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded_value%2#1: bytes = (concat aggregate%length_uint16%2#1 0x68656c6c6f32)
        let aggregate%as_Encoded(len+uint8[])%1#1: Encoded(len+uint8[]) = aggregate%encoded_value%2#1
        let tmp%3#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#1
        let aggregate%data_length%1#1: uint64 = (len tmp%3#0)
        let aggregate%current_tail_offset%1#1: uint64 = (+ 3u aggregate%data_length%1#1)
        let aggregate%as_bytes%4#1: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded%2#1: bytes = (concat 0x aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%3#1: bytes = (concat aggregate%encoded%2#1 0x2a)
        let aggregate%concat%1#1: bytes = (concat aggregate%encoded%3#1 tmp%3#0)
        let aggregate%as_Encoded((len+uint8[]),uint8)%1#1: Encoded((len+uint8[]),uint8) = aggregate%concat%1#1
        let tmp%4#0: Encoded((len+uint8[]),uint8) = aggregate%as_Encoded((len+uint8[]),uint8)%1#1
        let aggregate%data_length%2#1: uint64 = (len tmp%2#0)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 4u aggregate%data_length%2#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%4#1: bytes = (concat 0x aggregate%offset_as_uint16%2#1)
        let aggregate%data_length%3#1: uint64 = (len tmp%4#0)
        let aggregate%current_tail_offset%3#1: uint64 = (+ aggregate%current_tail_offset%2#1 aggregate%data_length%3#1)
        let aggregate%as_bytes%6#1: bytes[8] = (itob aggregate%current_tail_offset%2#1)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded%5#1: bytes = (concat aggregate%encoded%4#1 aggregate%offset_as_uint16%3#1)
        let aggregate%concat%2#1: bytes = (concat aggregate%encoded%5#1 tmp%2#0)
        let aggregate%concat%3#1: bytes = (concat aggregate%concat%2#1 tmp%4#0)
        let aggregate%as_Encoded((len+utf8[]),((len+uint8[]),uint8))%0#1: Encoded((len+utf8[]),((len+uint8[]),uint8)) = aggregate%concat%3#1
        let tmp%5#0: Encoded((len+utf8[]),((len+uint8[]),uint8)) = aggregate%as_Encoded((len+utf8[]),((len+uint8[]),uint8))%0#1
        let event%1#0: bytes = (concat method "Anonymous(string,(byte[],uint8))" tmp%5#0)
        (log event%1#0)
        return 

subroutine test_cases.arc_56.contract.Contract.conditional_emit(should_emit: bool) -> void:
    block@0: // L114
        goto should_emit#0 ? block@1 : block@2
    block@1: // if_body_L117
        let aggregate%encoded%0#1: bytes = (concat 0x 0x000000000000002a)
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 0x000000000000002b)
        let aggregate%as_Encoded(uint64,uint64)%0#1: Encoded(uint64,uint64) = aggregate%encoded%1#1
        let tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#1
        let aggregate%length%0#1: uint64 = (len 0x68656c6c6f33)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x68656c6c6f33)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#1
        let aggregate%data_length%0#1: uint64 = (len tmp%1#0)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 3u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%2#1: bytes = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%encoded%3#1: bytes = (concat aggregate%encoded%2#1 0x2a)
        let aggregate%concat%0#1: bytes = (concat aggregate%encoded%3#1 tmp%1#0)
        let aggregate%as_Encoded((len+uint8[]),uint8)%0#1: Encoded((len+uint8[]),uint8) = aggregate%concat%0#1
        let tmp%2#0: Encoded((len+uint8[]),uint8) = aggregate%as_Encoded((len+uint8[]),uint8)%0#1
        let aggregate%encoded%4#1: bytes = (concat 0x tmp%0#0)
        let aggregate%data_length%1#1: uint64 = (len tmp%2#0)
        let aggregate%current_tail_offset%1#1: uint64 = (+ 18u aggregate%data_length%1#1)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 18u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%5#1: bytes = (concat aggregate%encoded%4#1 aggregate%offset_as_uint16%1#1)
        let aggregate%concat%1#1: bytes = (concat aggregate%encoded%5#1 tmp%2#0)
        let aggregate%as_Encoded((uint64,uint64),((len+uint8[]),uint8))%0#1: Encoded((uint64,uint64),((len+uint8[]),uint8)) = aggregate%concat%1#1
        let tmp%3#0: Encoded((uint64,uint64),((len+uint8[]),uint8)) = aggregate%as_Encoded((uint64,uint64),((len+uint8[]),uint8))%0#1
        let event%0#0: bytes = (concat method "Anonymous2((uint64,uint64),(byte[],uint8))" tmp%3#0)
        (log event%0#0)
        goto block@2
    block@2: // after_if_else_L116
        return 

subroutine test_cases.arc_56.contract.Contract.with_constant_defaults(a: Encoded(uint64), b: uint64, c: bytes, d: Encoded(uint64,uint64), e.0: uint64, e.1: string, f: Encoded((len+utf8[])[2]), g: Encoded(len+(len+utf8[])[]), h: uint64, i: uint64) -> void:
    block@0: // L132
        let tmp%0#0: bool = (b!= a#0 0b)
        (assert tmp%0#0)
        (assert b#0)
        let tmp%2#0: uint64 = (len c#0)
        (assert tmp%2#0)
        let aggregate%extract%0#1: bytes = (extract3 d#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#1
        let tmp%4#0: bool = (b!= tuple_item%0#0 0b)
        goto tmp%4#0 ? block@2 : block@1
    block@1: // or_contd_L160
        let aggregate%extract%1#1: bytes = (extract3 d#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#1
        let tmp%5#0: bool = (b!= tuple_item%1#0 0b)
        goto tmp%5#0 ? block@2 : block@3
    block@2: // bool_true_L160
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L160
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L160
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        (assert or_result%0#2)
        goto e.0#0 ? block@6 : block@5
    block@5: // or_contd_L161
        let tmp%7#0: uint64 = (len e.1#0)
        goto tmp%7#0 ? block@6 : block@7
    block@6: // bool_true_L161
        let or_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L161
        let or_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L161
        let or_result%1#2: bool = φ(or_result%1#0 <- block@6, or_result%1#1 <- block@7)
        (assert or_result%1#2)
        let aggregate%lt%0#1: bool = (< 0u 2u)
        (assert aggregate%lt%0#1) // index access is out of bounds
        let aggregate%item_offset_offset%0#1: uint64 = (* 0u 2u)
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 f#0 aggregate%item_offset_offset%0#1)
        let aggregate%item_length%0#1: uint64 = (extract_uint16 f#0 aggregate%item_offset%0#1)
        let aggregate%item_length_in_bytes%0#1: uint64 = (* aggregate%item_length%0#1 1u)
        let aggregate%item_head_tail_length%0#1: uint64 = (+ aggregate%item_length_in_bytes%0#1 2u)
        let aggregate%item%0#1: bytes = (extract3 f#0 aggregate%item_offset%0#1 aggregate%item_head_tail_length%0#1)
        let array_item%0#0: Encoded(len+utf8[]) = aggregate%item%0#1
        let aggregate%length%0#1: uint64 = (len 0x6869)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x6869)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let tmp%9#0: bool = (== array_item%0#0 encoded%0#0)
        (assert tmp%9#0)
        let array_length%0#0: uint64 = (extract_uint16 g#0 0u)
        let tmp%10#0: bool = (== array_length%0#0 2u)
        (assert tmp%10#0)
        let tmp%11#0: bool = (== h#0 42u)
        (assert tmp%11#0)
        let tmp%12#0: bool = (== i#0 1234u)
        (assert tmp%12#0)
        return 