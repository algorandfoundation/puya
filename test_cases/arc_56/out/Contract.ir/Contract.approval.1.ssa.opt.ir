main test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__()
        return tmp%0#1

subroutine test_cases.arc_56.contract.Contract.__puya_arc4_router__() -> bool:
    block@0: // L54
        let tmp%0#0: uint64 = (txn NumAppArgs)
        goto tmp%0#0 ? block@1 : block@12
    block@1: // abi_routing_L54
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@2, method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64" => block@3, method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)" => block@4, method "emits_error((uint64,string,(byte[],uint8)))void" => block@5, method "emitter()void" => block@6, method "conditional_emit(bool)void" => block@7, method "template_value()((byte[],uint8),uint64,string,uint8)" => block@8, method "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void" => block@9, * => block@17}
    block@2: // create_route_L81
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: uint64 = (shl 1u tmp%3#0)
        let tmp%5#0: uint64 = (& tmp%4#0 3u)
        (assert tmp%5#0) // OnCompletion is not one of NoOp, OptIn
        return 1u
    block@3: // struct_arg_route_L89
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // OnCompletion is not NoOp
        let tmp%8#0: uint64 = (txn ApplicationID)
        (assert tmp%8#0) // can only call when not creating
        let tmp%10#0: bytes = (txna ApplicationArgs 1)
        let tmp%11#0: bytes = (txna ApplicationArgs 2)
        let to_encode%0#0: uint64 = test_cases.arc_56.contract.Contract.struct_arg(tmp%10#0, tmp%11#0)
        let val_as_bytes%0#0: bytes = (itob to_encode%0#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%12#0)
        return 1u
    block@4: // struct_return_route_L95
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let tmp%17#0: bytes = (txna ApplicationArgs 1)
        let tmp%18#0: bytes = test_cases.arc_56.contract.Contract.struct_return(tmp%17#0)
        let tmp%19#0: bytes = (concat 0x151f7c75 tmp%18#0)
        (log tmp%19#0)
        return 1u
    block@5: // emits_error_route_L100
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        let tmp%24#0: bytes = (txna ApplicationArgs 1)
        test_cases.arc_56.contract.Contract.errors(tmp%24#0)
        return 1u
    block@6: // emitter_route_L104
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        test_cases.arc_56.contract.Contract.emitter()
        return 1u
    block@7: // conditional_emit_route_L114
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let tmp%33#0: bytes = (txna ApplicationArgs 1)
        let tmp%34#0: bool = (getbit tmp%33#0 0u)
        test_cases.arc_56.contract.Contract.conditional_emit(tmp%34#0)
        return 1u
    block@8: // template_value_route_L123
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (! tmp%35#0)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        (assert tmp%37#0) // can only call when not creating
        let elements_to_encode%0#0: bytes = TemplateVar[bytes](TMPL_STRUCT)
        let elements_to_encode%1#0: uint64 = TemplateVar[uint64](TMPL_AVM_UINT64)
        let elements_to_encode%2#0: bytes = TemplateVar[bytes](TMPL_AVM_STRING)
        let elements_to_encode%3#0: bytes = TemplateVar[bytes](TMPL_ARC4_UINT8)
        let val_as_bytes%1#0: bytes = (itob elements_to_encode%1#0)
        let length%0#0: uint64 = (len elements_to_encode%2#0)
        let as_bytes%0#0: bytes = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 elements_to_encode%2#0)
        let data_length%0#0: uint64 = (len elements_to_encode%0#0)
        let current_tail_offset%1#0: uint64 = (+ 13u data_length%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat 0x000d val_as_bytes%1#0)
        let as_bytes%2#0: bytes = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%1#0)
        let data_length%1#0: uint64 = (len encoded_value%0#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 elements_to_encode%3#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 elements_to_encode%0#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 encoded_value%0#0)
        let tmp%39#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%6#0)
        (log tmp%39#0)
        return 1u
    block@9: // with_constant_defaults_route_L132
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        let tmp%44#0: bytes = (txna ApplicationArgs 1)
        let tmp%45#0: bytes = (txna ApplicationArgs 2)
        let tmp%46#0: uint64 = (btoi tmp%45#0)
        let tmp%47#0: bytes = (txna ApplicationArgs 3)
        let tmp%48#0: bytes = ((extract 2 0) tmp%47#0)
        let tmp%49#0: bytes = (txna ApplicationArgs 4)
        let tmp%50#0: bytes = (txna ApplicationArgs 5)
        let item0%0#0: bytes = ((extract 0 8) tmp%50#0) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%50#0 8u)
        let item_end_offset%0#0: uint64 = (len tmp%50#0)
        let item1%0#0: bytes = (substring3 tmp%50#0 item_start_offset%0#0 item_end_offset%0#0)
        let item1%0%0#0: bytes = ((extract 2 0) item1%0#0)
        let tmp%51#0: bytes = (txna ApplicationArgs 6)
        let tmp%52#0: bytes = (txna ApplicationArgs 7)
        let tmp%53#0: bytes = (txna ApplicationArgs 8)
        let tmp%54#0: uint64 = (btoi tmp%53#0)
        let tmp%55#0: bytes = (txna ApplicationArgs 9)
        let tmp%56#0: uint64 = (btoi tmp%55#0)
        test_cases.arc_56.contract.Contract.with_constant_defaults(tmp%44#0, tmp%46#0, tmp%48#0, tmp%49#0, item0%0%0#0, item1%0%0#0, tmp%51#0, tmp%52#0, tmp%54#0, tmp%56#0)
        return 1u
    block@12: // bare_routing_L54
        let tmp%57#0: uint64 = (txn OnCompletion)
        goto_nth [block@13, block@13, block@17, block@17, block@17, block@14][tmp%57#0] else goto block@17
    block@13: // bare_create_L77
        return 1u
    block@14: // transient_L85
        let tmp%58#0: uint64 = (txn ApplicationID)
        let tmp%59#0: bool = (! tmp%58#0)
        (assert tmp%59#0) // can only call when creating
        return 1u
    block@17: // after_if_else_L54
        return 0u

subroutine test_cases.arc_56.contract.Contract.struct_arg(arg: bytes, shared: bytes) -> uint64:
    block@0: // L89
        let item_start_offset%0#0: uint64 = (extract_uint16 arg#0 10u)
        let item_end_offset%0#0: uint64 = (len arg#0)
        let tmp%0#0: bytes = (substring3 arg#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%1#0: bool = (== tmp%0#0 shared#0)
        (assert tmp%1#0) // this might error
        return 42u

subroutine test_cases.arc_56.contract.Contract.struct_return(arg: bytes) -> bytes:
    block@0: // L95
        let item_start_offset%0#0: uint64 = (extract_uint16 arg#0 10u)
        let item_end_offset%0#0: uint64 = (len arg#0)
        let s#0: bytes = (substring3 arg#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%2#0: bool = (== s#0 s#0)
        (assert tmp%2#0) // this won't error
        return s#0

subroutine test_cases.arc_56.contract.Contract.errors(arg: bytes) -> void:
    block@0: // L100
        let tmp%0#0: bytes = ((extract 0 8) arg#0) // on error: Index access is out of bounds
        let tmp%1#0: bool = (== tmp%0#0 0x00)
        (assert tmp%1#0) // this will error
        return 

subroutine test_cases.arc_56.contract.Contract.emitter() -> void:
    block@0: // L104
        (log 0xd93f374e00032a000668656c6c6f31)
        (log 0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32)
        return 

subroutine test_cases.arc_56.contract.Contract.conditional_emit(should_emit: bool) -> void:
    block@0: // L114
        goto should_emit#0 ? block@1 : block@2
    block@1: // if_body_L117
        (log 0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33)
        goto block@2
    block@2: // after_if_else_L116
        return 

subroutine test_cases.arc_56.contract.Contract.with_constant_defaults(a: bytes, b: uint64, c: bytes, d: bytes, e.0: uint64, e.1: bytes, f: bytes, g: bytes, h: uint64, i: uint64) -> void:
    block@0: // L132
        let tmp%0#0: bool = (!= a#0 0x0000000000000000)
        (assert tmp%0#0)
        (assert b#0)
        let tmp%2#0: uint64 = (len c#0)
        (assert tmp%2#0)
        let tmp%4#0: bytes = ((extract 0 8) d#0) // on error: Index access is out of bounds
        let tmp%5#0: bool = (!= tmp%4#0 0x0000000000000000)
        goto tmp%5#0 ? block@2 : block@1
    block@1: // or_contd_L160
        let tmp%6#0: bytes = ((extract 8 8) d#0) // on error: Index access is out of bounds
        let tmp%7#0: bool = (!= tmp%6#0 0x0000000000000000)
        goto tmp%7#0 ? block@2 : block@3
    block@2: // bool_true_L160
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L160
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L160
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        (assert or_result%0#2)
        goto e.0#0 ? block@6 : block@5
    block@5: // or_contd_L161
        let tmp%9#0: uint64 = (len e.1#0)
        goto tmp%9#0 ? block@6 : block@7
    block@6: // bool_true_L161
        let or_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L161
        let or_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L161
        let or_result%1#2: bool = φ(or_result%1#0 <- block@6, or_result%1#1 <- block@7)
        (assert or_result%1#2)
        let item_offset%0#0: uint64 = (extract_uint16 f#0 0u)
        let item_length%0#0: uint64 = (extract_uint16 f#0 item_offset%0#0)
        let item_head_tail_length%0#0: uint64 = (+ item_length%0#0 2u)
        let tmp%11#0: bytes = (extract3 f#0 item_offset%0#0 item_head_tail_length%0#0)
        let tmp%12#0: bool = (== tmp%11#0 0x00026869)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (extract_uint16 g#0 0u)
        let tmp%14#0: bool = (== tmp%13#0 2u)
        (assert tmp%14#0)
        let tmp%15#0: bool = (== h#0 42u)
        (assert tmp%15#0)
        let tmp%16#0: bool = (== i#0 1234u)
        (assert tmp%16#0)
        return 