main test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.arc_56.contract.Contract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.arc_56.contract.echo(s: Encoded((len+uint8[],uint8))) -> <Encoded((len+uint8[],uint8)), Encoded((len+uint8[],uint8))>:
    block@0: // L168
        let s%is_original#0: bool = 1u
        let s%out#0: Encoded((len+uint8[],uint8)) = s#0
        return s#0 s#0

subroutine test_cases.arc_56.contract.Contract.__puya_arc4_router__() -> bool:
    block@0: // L54
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@12
    block@1: // abi_routing_L54
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@2, method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64" => block@3, method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)" => block@4, method "emits_error((uint64,string,(byte[],uint8)))void" => block@5, method "emitter()void" => block@6, method "conditional_emit(bool)void" => block@7, method "template_value()((byte[],uint8),uint64,string,uint8)" => block@8, method "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void" => block@9, * => block@10}
    block@2: // create_route_L81
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: uint64 = (shl 1u tmp%3#0)
        let tmp%5#0: uint64 = (& tmp%4#0 3u)
        (assert tmp%5#0) // OnCompletion is not one of NoOp, OptIn
        test_cases.arc_56.contract.Contract.create()
        return 1u
    block@3: // struct_arg_route_L89
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (== tmp%6#0 NoOp)
        (assert tmp%7#0) // OnCompletion is not NoOp
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (!= tmp%8#0 0u)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_Encoded((uint64,len+utf8[],(len+uint8[],uint8)))%0#0: Encoded((uint64,len+utf8[],(len+uint8[],uint8))) = (txna ApplicationArgs 1)
        let reinterpret_Encoded((len+uint8[],uint8))%0#0: Encoded((len+uint8[],uint8)) = (txna ApplicationArgs 2)
        let to_encode%0#0: uint64 = test_cases.arc_56.contract.Contract.struct_arg(reinterpret_Encoded((uint64,len+utf8[],(len+uint8[],uint8)))%0#0, reinterpret_Encoded((len+uint8[],uint8))%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%10#0)
        return 1u
    block@4: // struct_return_route_L95
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded((uint64,len+utf8[],(len+uint8[],uint8)))%1#0: Encoded((uint64,len+utf8[],(len+uint8[],uint8))) = (txna ApplicationArgs 1)
        let tmp%15#0: Encoded((len+uint8[],uint8)) = test_cases.arc_56.contract.Contract.struct_return(reinterpret_Encoded((uint64,len+utf8[],(len+uint8[],uint8)))%1#0)
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        return 1u
    block@5: // emits_error_route_L100
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_Encoded((uint64,len+utf8[],(len+uint8[],uint8)))%2#0: Encoded((uint64,len+utf8[],(len+uint8[],uint8))) = (txna ApplicationArgs 1)
        test_cases.arc_56.contract.Contract.errors(reinterpret_Encoded((uint64,len+utf8[],(len+uint8[],uint8)))%2#0)
        return 1u
    block@6: // emitter_route_L104
        let tmp%21#0: uint64 = (txn OnCompletion)
        let tmp%22#0: bool = (== tmp%21#0 NoOp)
        (assert tmp%22#0) // OnCompletion is not NoOp
        let tmp%23#0: uint64 = (txn ApplicationID)
        let tmp%24#0: bool = (!= tmp%23#0 0u)
        (assert tmp%24#0) // can only call when not creating
        test_cases.arc_56.contract.Contract.emitter()
        return 1u
    block@7: // conditional_emit_route_L114
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (== tmp%25#0 NoOp)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%28#0) // can only call when not creating
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let tmp%29#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        test_cases.arc_56.contract.Contract.conditional_emit(tmp%29#0)
        return 1u
    block@8: // template_value_route_L123
        let tmp%30#0: uint64 = (txn OnCompletion)
        let tmp%31#0: bool = (== tmp%30#0 NoOp)
        (assert tmp%31#0) // OnCompletion is not NoOp
        let tmp%32#0: uint64 = (txn ApplicationID)
        let tmp%33#0: bool = (!= tmp%32#0 0u)
        (assert tmp%33#0) // can only call when not creating
        let (to_encode%1#0: Encoded((len+uint8[],uint8)), to_encode%2#0: uint64, to_encode%3#0: string, to_encode%4#0: Encoded(uint8)) = test_cases.arc_56.contract.Contract.template_value()
        let tail%0#0: bytes = (concat 0x to_encode%1#0)
        let data_length%0#0: uint64 = (len to_encode%1#0)
        let current_tail_offset%0#0: uint64 = (+ 13u data_length%0#0)
        let as_bytes%0#0: bytes[8] = (itob 13u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded%0#0: Encoded(((len+uint8[],uint8))) = (concat 0x offset_as_uint16%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%2#0)
        let encoded%1#0: Encoded(((len+uint8[],uint8),uint64)) = (concat encoded%0#0 val_as_bytes%1#0)
        let length%0#0: uint64 = (len to_encode%3#0)
        let as_bytes%1#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%3#0)
        let tail%1#0: bytes = (concat tail%0#0 encoded_value%0#0)
        let data_length%1#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%1#0)
        let as_bytes%2#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%2#0: Encoded(((len+uint8[],uint8),uint64,len+utf8[])) = (concat encoded%1#0 offset_as_uint16%1#0)
        let encoded%3#0: Encoded(((len+uint8[],uint8),uint64,len+utf8[],uint8)) = (concat encoded%2#0 to_encode%4#0)
        let encoded%4#0: bytes = (concat encoded%3#0 tail%1#0)
        let tmp%34#0: bytes = (concat 0x151f7c75 encoded%4#0)
        (log tmp%34#0)
        return 1u
    block@9: // with_constant_defaults_route_L132
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (== tmp%35#0 NoOp)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        let tmp%38#0: bool = (!= tmp%37#0 0u)
        (assert tmp%38#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%39#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let tmp%40#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded((uint64,uint64))%0#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 4)
        let reinterpret_Encoded((uint64,len+utf8[]))%0#0: Encoded((uint64,len+utf8[])) = (txna ApplicationArgs 5)
        let item0%0#0: bytes = (extract3 reinterpret_Encoded((uint64,len+utf8[]))%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (btoi item0%0#0)
        let item_start_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,len+utf8[]))%0#0 8u)
        let item_end_offset%0#0: uint64 = (len reinterpret_Encoded((uint64,len+utf8[]))%0#0)
        let item1%0#0: bytes = (substring3 reinterpret_Encoded((uint64,len+utf8[]))%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item1%1#0: bytes = ((extract 2 0) item1%0#0)
        let reinterpret_Encoded(len+utf8[][2])%0#0: Encoded(len+utf8[][2]) = (txna ApplicationArgs 6)
        let reinterpret_Encoded(len+len+utf8[][])%0#0: Encoded(len+len+utf8[][]) = (txna ApplicationArgs 7)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let tmp%41#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let tmp%42#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        test_cases.arc_56.contract.Contract.with_constant_defaults(reinterpret_Encoded(uint64)%0#0, tmp%39#0, tmp%40#0, reinterpret_Encoded((uint64,uint64))%0#0, item0%1#0, item1%1#0, reinterpret_Encoded(len+utf8[][2])%0#0, reinterpret_Encoded(len+len+utf8[][])%0#0, tmp%41#0, tmp%42#0)
        return 1u
    block@10: // switch_case_default_L54
        goto block@11
    block@11: // switch_case_next_L54
        goto block@17
    block@12: // bare_routing_L54
        let tmp%43#0: uint64 = (txn OnCompletion)
        switch tmp%43#0 {0u => block@13, 1u => block@13, 5u => block@14, * => block@15}
    block@13: // bare_create_L77
        test_cases.arc_56.contract.Contract.bare_create()
        return 1u
    block@14: // transient_L85
        let tmp%44#0: uint64 = (txn ApplicationID)
        let tmp%45#0: bool = (== tmp%44#0 0u)
        (assert tmp%45#0) // can only call when creating
        test_cases.arc_56.contract.Contract.transient()
        return 1u
    block@15: // switch_case_default_L54
        goto block@16
    block@16: // switch_case_next_L54
        goto block@17
    block@17: // after_if_else_L54
        return 0u

subroutine test_cases.arc_56.contract.Contract.__init__() -> void:
    block@0: // L57
        return 

subroutine test_cases.arc_56.contract.Contract.bare_create() -> void:
    block@0: // L77
        return 

subroutine test_cases.arc_56.contract.Contract.create() -> void:
    block@0: // L81
        return 

subroutine test_cases.arc_56.contract.Contract.transient() -> void:
    block@0: // L85
        return 

subroutine test_cases.arc_56.contract.Contract.struct_arg(arg: Encoded((uint64,len+utf8[],(len+uint8[],uint8))), shared: Encoded((len+uint8[],uint8))) -> uint64:
    block@0: // L89
        let item_start_offset%0#0: uint64 = (extract_uint16 arg#0 10u)
        let item_end_offset%0#0: uint64 = (len arg#0)
        let tmp%0#0: bytes = (substring3 arg#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%1#0: bool = (== tmp%0#0 shared#0)
        (assert tmp%1#0) // this might error
        return 42u

subroutine test_cases.arc_56.contract.Contract.struct_return(arg: Encoded((uint64,len+utf8[],(len+uint8[],uint8)))) -> Encoded((len+uint8[],uint8)):
    block@0: // L95
        let item_start_offset%0#0: uint64 = (extract_uint16 arg#0 10u)
        let item_end_offset%0#0: uint64 = (len arg#0)
        let tmp%0#0: bytes = (substring3 arg#0 item_start_offset%0#0 item_end_offset%0#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 arg#0 10u)
        let item_end_offset%1#0: uint64 = (len arg#0)
        let tmp%1#0: bytes = (substring3 arg#0 item_start_offset%1#0 item_end_offset%1#0)
        let (echo%0#0: Encoded((len+uint8[],uint8)), echo%1#0: Encoded((len+uint8[],uint8))) = test_cases.arc_56.contract.echo(tmp%1#0)
        let tmp%1#1: bytes = echo%1#0
        let tmp%2#0: bool = (== tmp%0#0 echo%0#0)
        (assert tmp%2#0) // this won't error
        let item_start_offset%2#0: uint64 = (extract_uint16 arg#0 10u)
        let item_end_offset%2#0: uint64 = (len arg#0)
        let tmp%3#0: bytes = (substring3 arg#0 item_start_offset%2#0 item_end_offset%2#0)
        return tmp%3#0

subroutine test_cases.arc_56.contract.Contract.errors(arg: Encoded((uint64,len+utf8[],(len+uint8[],uint8)))) -> void:
    block@0: // L100
        let tmp%0#0: bytes = (extract3 arg#0 0u 8u) // on error: Index access is out of bounds
        let tmp%1#0: bool = (== tmp%0#0 0x00)
        (assert tmp%1#0) // this will error
        return 

subroutine test_cases.arc_56.contract.Contract.emitter() -> void:
    block@0: // L104
        let length%0#0: uint64 = (len 0x68656c6c6f31)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x68656c6c6f31)
        let tail%0#0: bytes = (concat 0x encoded_value%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%0#0: uint64 = (+ 3u data_length%0#0)
        let as_bytes%1#0: bytes[8] = (itob 3u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%0#0: Encoded((len+uint8[])) = (concat 0x offset_as_uint16%0#0)
        let encoded%1#0: Encoded((len+uint8[],uint8)) = (concat encoded%0#0 0x2a)
        let encoded%2#0: bytes = (concat encoded%1#0 tail%0#0)
        let event%0#0: bytes = (concat method "SharedStruct(byte[],uint8)" encoded%2#0)
        (log event%0#0)
        let length%1#0: uint64 = (len "hello")
        let as_bytes%2#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 "hello")
        let length%2#0: uint64 = (len 0x68656c6c6f32)
        let as_bytes%3#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x68656c6c6f32)
        let tail%1#0: bytes = (concat 0x encoded_value%2#0)
        let data_length%1#0: uint64 = (len encoded_value%2#0)
        let current_tail_offset%1#0: uint64 = (+ 3u data_length%1#0)
        let as_bytes%4#0: bytes[8] = (itob 3u)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded%3#0: Encoded((len+uint8[])) = (concat 0x offset_as_uint16%1#0)
        let encoded%4#0: Encoded((len+uint8[],uint8)) = (concat encoded%3#0 0x2a)
        let encoded%5#0: bytes = (concat encoded%4#0 tail%1#0)
        let tail%2#0: bytes = (concat 0x encoded_value%1#0)
        let data_length%2#0: uint64 = (len encoded_value%1#0)
        let current_tail_offset%2#0: uint64 = (+ 4u data_length%2#0)
        let as_bytes%5#0: bytes[8] = (itob 4u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded%6#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%2#0)
        let tail%3#0: bytes = (concat tail%2#0 encoded%5#0)
        let data_length%3#0: uint64 = (len encoded%5#0)
        let current_tail_offset%3#0: uint64 = (+ current_tail_offset%2#0 data_length%3#0)
        let as_bytes%6#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%7#0: Encoded((len+utf8[],(len+uint8[],uint8))) = (concat encoded%6#0 offset_as_uint16%3#0)
        let encoded%8#0: bytes = (concat encoded%7#0 tail%3#0)
        let event%1#0: bytes = (concat method "Anonymous(string,(byte[],uint8))" encoded%8#0)
        (log event%1#0)
        return 

subroutine test_cases.arc_56.contract.Contract.conditional_emit(should_emit: bool) -> void:
    block@0: // L114
        goto should_emit#0 ? block@1 : block@2
    block@1: // if_body_L117
        let encoded%0#0: Encoded((uint64)) = (concat 0x 0x000000000000002a)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat encoded%0#0 0x000000000000002b)
        let encoded%2#0: bytes = (concat encoded%1#0 0x)
        let length%0#0: uint64 = (len 0x68656c6c6f33)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x68656c6c6f33)
        let tail%0#0: bytes = (concat 0x encoded_value%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%0#0: uint64 = (+ 3u data_length%0#0)
        let as_bytes%1#0: bytes[8] = (itob 3u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%3#0: Encoded((len+uint8[])) = (concat 0x offset_as_uint16%0#0)
        let encoded%4#0: Encoded((len+uint8[],uint8)) = (concat encoded%3#0 0x2a)
        let encoded%5#0: bytes = (concat encoded%4#0 tail%0#0)
        let encoded%6#0: Encoded(((uint64,uint64))) = (concat 0x encoded%2#0)
        let tail%1#0: bytes = (concat 0x encoded%5#0)
        let data_length%1#0: uint64 = (len encoded%5#0)
        let current_tail_offset%1#0: uint64 = (+ 18u data_length%1#0)
        let as_bytes%2#0: bytes[8] = (itob 18u)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded%7#0: Encoded(((uint64,uint64),(len+uint8[],uint8))) = (concat encoded%6#0 offset_as_uint16%1#0)
        let encoded%8#0: bytes = (concat encoded%7#0 tail%1#0)
        let event%0#0: bytes = (concat method "Anonymous2((uint64,uint64),(byte[],uint8))" encoded%8#0)
        (log event%0#0)
        goto block@2
    block@2: // after_if_else_L116
        return 

subroutine test_cases.arc_56.contract.Contract.template_value() -> <Encoded((len+uint8[],uint8)), uint64, string, Encoded(uint8)>:
    block@0: // L123
        return TemplateVar[Encoded((len+uint8[],uint8))](TMPL_STRUCT) TemplateVar[uint64](TMPL_AVM_UINT64) TemplateVar[string](TMPL_AVM_STRING) TemplateVar[Encoded(uint8)](TMPL_ARC4_UINT8)

subroutine test_cases.arc_56.contract.Contract.with_constant_defaults(a: Encoded(uint64), b: uint64, c: bytes, d: Encoded((uint64,uint64)), e.0: uint64, e.1: string, f: Encoded(len+utf8[][2]), g: Encoded(len+len+utf8[][]), h: uint64, i: uint64) -> void:
    block@0: // L132
        let reinterpret_biguint%0#0: biguint = a#0
        let tmp%0#0: bool = (b!= reinterpret_biguint%0#0 0b)
        (assert tmp%0#0)
        let tmp%1#0: bool = (!= b#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (len c#0)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        (assert tmp%3#0)
        let reinterpret_biguint%1#0: biguint = (extract3 d#0 0u 8u) // on error: Index access is out of bounds
        let tmp%4#0: bool = (b!= reinterpret_biguint%1#0 0b)
        goto tmp%4#0 ? block@2 : block@1
    block@1: // or_contd_L160
        let reinterpret_biguint%2#0: biguint = (extract3 d#0 8u 8u) // on error: Index access is out of bounds
        let tmp%5#0: bool = (b!= reinterpret_biguint%2#0 0b)
        goto tmp%5#0 ? block@2 : block@3
    block@2: // bool_true_L160
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L160
        let or_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L160
        let or_result%0#2: bool = φ(or_result%0#0 <- block@2, or_result%0#1 <- block@3)
        (assert or_result%0#2)
        let tmp%6#0: bool = (!= e.0#0 0u)
        goto tmp%6#0 ? block@6 : block@5
    block@5: // or_contd_L161
        let tmp%7#0: uint64 = (len e.1#0)
        let tmp%8#0: bool = (!= tmp%7#0 0u)
        goto tmp%8#0 ? block@6 : block@7
    block@6: // bool_true_L161
        let or_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L161
        let or_result%1#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L161
        let or_result%1#2: bool = φ(or_result%1#0 <- block@6, or_result%1#1 <- block@7)
        (assert or_result%1#2)
        let array_length%0#0: uint64 = f#0.length
        let lt%0#0: bool = (< 0u array_length%0#0)
        (assert lt%0#0) // index access is out of bounds
        let item_offset_offset%0#0: uint64 = (* 0u 2u)
        let item_offset%0#0: uint64 = (extract_uint16 f#0 item_offset_offset%0#0)
        let item_length%0#0: uint64 = (extract_uint16 f#0 item_offset%0#0)
        let item_length_in_bytes%0#0: uint64 = (* item_length%0#0 1u)
        let item_head_tail_length%0#0: uint64 = (+ item_length_in_bytes%0#0 2u)
        let item%0#0: bytes = (extract3 f#0 item_offset%0#0 item_head_tail_length%0#0)
        let tmp%9#0: bool = (== item%0#0 0x00026869)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = g#0.length
        let tmp%11#0: bool = (== tmp%10#0 2u)
        (assert tmp%11#0)
        let tmp%12#0: bool = (== h#0 42u)
        (assert tmp%12#0)
        let tmp%13#0: bool = (== i#0 1234u)
        (assert tmp%13#0)
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__()
        return tmp%0#0