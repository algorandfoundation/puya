{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFK;AA3BL;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;AA2BK;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA3BL;;AAAA;;;;;;;;;;;;;;AAAA;AA+BK;;AAAA;AAAA;AAAA;AARA;AAYA;;;AAAA;;;AAGU;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AAHH;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAMA;;;AAEU;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAEU;;;AAAe;;;AAAf;AAAP;AAFH;AAAA;AAMG;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAJH;AAAA;AAUA;;;AAAA;AAAA;AAEL;;;AACY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAHP;AAAA;AAeO;AADA;AADA;;AADA;;AAHP;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAyBU;;AAAA;AAAA;AAAP;AACA;AAAA;AACO;AAAP;AACO;;;AAAA;AAAA;AAAA;;;AAAO;;AAAA;;;AAAA;AAAA;AAAP;;;;AAAP;AACO;;AAAA;;;AAAQ;;AAAA;AAAR;;;;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQ;;;;;;AAAR;AAAP;AACO;;AAAA;AAAA;AAAY;AAAZ;AAAP;AACO;;AAAK;;AAAL;AAAP;AACO;AAAK;;;AAAL;AAAP;AAjCH;AAAA;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 10 2 TMPL_AVM_UINT64"
    },
    "8": {
      "op": "bytecblock 0x 0x151f7c75 TMPL_ARC4_UINT8 TMPL_AVM_STRING TMPL_STRUCT"
    },
    "32": {
      "op": "intc_0 // 1"
    },
    "33": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "lifted%return#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%0#2"
      ]
    },
    "35": {
      "op": "bz main_bare_routing@16",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "38": {
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "Method(create()void)"
      ]
    },
    "44": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create()void)",
        "lifted%return#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "Method(create()void)",
        "tmp%2#0"
      ]
    },
    "47": {
      "op": "match main_create_route@5",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "51": {
      "op": "txn OnCompletion",
      "defined_out": [
        "lifted%return#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%6#0"
      ]
    },
    "53": {
      "op": "!",
      "defined_out": [
        "lifted%return#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%7#0"
      ]
    },
    "54": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "55": {
      "op": "txn ApplicationID",
      "defined_out": [
        "lifted%return#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%9#0"
      ]
    },
    "57": {
      "op": "assert",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "58": {
      "op": "pushbytess 0x97e8e4a7 0x76c4de11 0xc1ca7709 0x6de762c2 0x59fc5282 0x9d9eecb0 0x5e8eef9a // method \"struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64\", method \"struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)\", method \"emits_error((uint64,string,(byte[],uint8)))void\", method \"emitter()void\", method \"conditional_emit(bool)void\", method \"template_value()((byte[],uint8),uint64,string,uint8)\", method \"with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)"
      ]
    },
    "95": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "lifted%return#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%10#0"
      ]
    },
    "98": {
      "op": "match struct_arg struct_return errors emitter conditional_emit template_value with_constant_defaults",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "114": {
      "block": "main_after_if_else@19",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "err"
    },
    "115": {
      "block": "main_create_route@5",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "lifted%return#0",
        "1"
      ]
    },
    "116": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "1",
        "tmp%3#0"
      ]
    },
    "118": {
      "op": "shl",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%4#0"
      ]
    },
    "119": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%4#0",
        "3"
      ]
    },
    "121": {
      "op": "&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%5#0"
      ]
    },
    "122": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "123": {
      "op": "return",
      "defined_out": [
        "lifted%return#0"
      ]
    },
    "124": {
      "block": "main_bare_routing@16",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%12#0"
      ]
    },
    "126": {
      "op": "switch main_bare_create@17 main_bare_create@17 main_after_if_else@19 main_after_if_else@19 main_after_if_else@19 main_transient@18",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "140": {
      "op": "err"
    },
    "141": {
      "block": "main_transient@18",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%13#0"
      ]
    },
    "143": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%14#0"
      ]
    },
    "144": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "145": {
      "op": "return",
      "defined_out": [
        "lifted%return#0"
      ]
    },
    "146": {
      "block": "main_bare_create@17",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "return",
      "defined_out": [
        "lifted%return#0"
      ]
    },
    "147": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_arg[routing]",
      "params": {},
      "block": "struct_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "150": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "arg#0",
        "shared#0"
      ],
      "stack_out": [
        "arg#0",
        "shared#0"
      ]
    },
    "153": {
      "op": "dig 1",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)",
        "shared#0"
      ],
      "stack_out": [
        "arg#0",
        "shared#0",
        "arg#0 (copy)"
      ]
    },
    "155": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "arg#0",
        "arg#0 (copy)",
        "shared#0"
      ],
      "stack_out": [
        "arg#0",
        "shared#0",
        "arg#0 (copy)",
        "10"
      ]
    },
    "156": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "arg#0",
        "shared#0"
      ],
      "stack_out": [
        "arg#0",
        "shared#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "157": {
      "op": "dig 2",
      "stack_out": [
        "arg#0",
        "shared#0",
        "aggregate%extract_uint16%0#0",
        "arg#0 (copy)"
      ]
    },
    "159": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "arg#0",
        "shared#0"
      ],
      "stack_out": [
        "arg#0",
        "shared#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "160": {
      "op": "uncover 3",
      "stack_out": [
        "shared#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "arg#0"
      ]
    },
    "162": {
      "op": "cover 2",
      "stack_out": [
        "shared#0",
        "arg#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "164": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "shared#0"
      ],
      "stack_out": [
        "shared#0",
        "aggregate%substring3%0#0"
      ]
    },
    "165": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "166": {
      "error": "this might error",
      "op": "assert // this might error",
      "stack_out": []
    },
    "167": {
      "op": "pushbytes 0x151f7c75000000000000002a",
      "defined_out": [
        "0x151f7c75000000000000002a"
      ],
      "stack_out": [
        "0x151f7c75000000000000002a"
      ]
    },
    "181": {
      "op": "log",
      "stack_out": []
    },
    "182": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "183": {
      "op": "return",
      "stack_out": []
    },
    "184": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_return[routing]",
      "params": {},
      "block": "struct_return",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "187": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "188": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)",
        "10"
      ]
    },
    "189": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "190": {
      "op": "dig 1",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%0#0",
        "arg#0 (copy)"
      ]
    },
    "192": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "193": {
      "op": "substring3",
      "defined_out": [
        "s#0"
      ],
      "stack_out": [
        "s#0"
      ]
    },
    "194": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "0x151f7c75"
      ]
    },
    "195": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "s#0"
      ]
    },
    "196": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "197": {
      "op": "log",
      "stack_out": []
    },
    "198": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "199": {
      "op": "return",
      "stack_out": []
    },
    "200": {
      "subroutine": "test_cases.arc_56.contract.Contract.errors[routing]",
      "params": {},
      "block": "errors",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "203": {
      "op": "extract 0 8",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "206": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "0x00"
      ]
    },
    "209": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "210": {
      "error": "this will error",
      "op": "assert // this will error",
      "stack_out": []
    },
    "211": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "212": {
      "op": "return",
      "stack_out": []
    },
    "213": {
      "subroutine": "test_cases.arc_56.contract.Contract.emitter[routing]",
      "params": {},
      "block": "emitter",
      "stack_in": [],
      "op": "pushbytes 0xd93f374e00032a000668656c6c6f31",
      "defined_out": [
        "0xd93f374e00032a000668656c6c6f31"
      ],
      "stack_out": [
        "0xd93f374e00032a000668656c6c6f31"
      ]
    },
    "230": {
      "op": "log",
      "stack_out": []
    },
    "231": {
      "op": "pushbytes 0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32",
      "defined_out": [
        "0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32"
      ],
      "stack_out": [
        "0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32"
      ]
    },
    "259": {
      "op": "log",
      "stack_out": []
    },
    "260": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "261": {
      "op": "return",
      "stack_out": []
    },
    "262": {
      "subroutine": "test_cases.arc_56.contract.Contract.conditional_emit[routing]",
      "params": {},
      "block": "conditional_emit",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "265": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "266": {
      "op": "getbit",
      "defined_out": [
        "should_emit#0"
      ],
      "stack_out": [
        "should_emit#0"
      ]
    },
    "267": {
      "op": "bz conditional_emit_after_if_else@3",
      "stack_out": []
    },
    "270": {
      "op": "pushbytes 0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33",
      "defined_out": [
        "0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33"
      ],
      "stack_out": [
        "0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33"
      ]
    },
    "305": {
      "op": "log",
      "stack_out": []
    },
    "306": {
      "block": "conditional_emit_after_if_else@3",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "307": {
      "op": "return",
      "stack_out": []
    },
    "308": {
      "subroutine": "test_cases.arc_56.contract.Contract.template_value[routing]",
      "params": {},
      "block": "template_value",
      "stack_in": [],
      "op": "bytec_2 // TMPL_ARC4_UINT8",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "309": {
      "op": "bytec_3 // TMPL_AVM_STRING",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "310": {
      "op": "intc 4 // TMPL_AVM_UINT64",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "312": {
      "op": "bytec 4 // TMPL_STRUCT",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "314": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "315": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "316": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "aggregate%data_length%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%data_length%0#0",
        "13"
      ]
    },
    "318": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "319": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%1#0"
      ]
    },
    "321": {
      "op": "itob",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "322": {
      "op": "pushbytes 0x000d",
      "defined_out": [
        "0x000d",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0",
        "0x000d"
      ]
    },
    "326": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "0x000d",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "327": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0"
      ]
    },
    "328": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "330": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0"
      ]
    },
    "331": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "332": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "335": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%2#0"
      ]
    },
    "337": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "338": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "340": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "341": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "344": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%1#0"
      ]
    },
    "346": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "347": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0"
      ]
    },
    "348": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "tmp%3#0"
      ]
    },
    "350": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0"
      ]
    },
    "351": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "tmp%0#0"
      ]
    },
    "353": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "354": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "355": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "356": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "0x151f7c75"
      ]
    },
    "357": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ]
    },
    "358": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "359": {
      "op": "log",
      "stack_out": []
    },
    "360": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "361": {
      "op": "return",
      "stack_out": []
    },
    "362": {
      "subroutine": "test_cases.arc_56.contract.Contract.with_constant_defaults[routing]",
      "params": {},
      "block": "with_constant_defaults",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "365": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "a#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "368": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "369": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "372": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "375": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "378": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0 (copy)"
      ]
    },
    "379": {
      "op": "cover 4",
      "stack_out": [
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "381": {
      "op": "cover 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "383": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "d#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "386": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "387": {
      "op": "intc_1 // 0",
      "stack_out": [
        "d#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "388": {
      "op": "extract_uint64",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "d#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "e.0#0"
      ]
    },
    "389": {
      "op": "cover 5",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "391": {
      "op": "dup",
      "stack_out": [
        "d#0",
        "e.0#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "392": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "8"
      ]
    },
    "394": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "aggregate%extract_uint16%0#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "395": {
      "op": "dig 1",
      "stack_out": [
        "d#0",
        "e.0#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "397": {
      "op": "len",
      "defined_out": [
        "a#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "398": {
      "op": "substring3",
      "defined_out": [
        "a#0",
        "aggregate%substring3%0#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "aggregate%substring3%0#0"
      ]
    },
    "399": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "e.1#0"
      ]
    },
    "402": {
      "op": "cover 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "404": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "f#0"
      ]
    },
    "407": {
      "op": "cover 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "409": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "g#0"
      ]
    },
    "412": {
      "op": "cover 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "414": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "417": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "h#0"
      ]
    },
    "418": {
      "op": "cover 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "420": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "423": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "i#0"
      ]
    },
    "424": {
      "op": "cover 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "426": {
      "op": "uncover 2",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "d#0",
        "b#0",
        "c#0",
        "a#0"
      ]
    },
    "428": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "d#0",
        "b#0",
        "c#0",
        "a#0",
        "0x"
      ]
    },
    "429": {
      "op": "b!=",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "d#0",
        "b#0",
        "c#0",
        "tmp%0#1"
      ]
    },
    "430": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "d#0",
        "b#0",
        "c#0"
      ]
    },
    "431": {
      "op": "swap",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "d#0",
        "c#0",
        "b#0"
      ]
    },
    "432": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "d#0",
        "c#0"
      ]
    },
    "433": {
      "op": "len",
      "defined_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "d#0",
        "tmp%2#1"
      ]
    },
    "434": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "d#0"
      ]
    },
    "435": {
      "op": "extract 0 8",
      "defined_out": [
        "aggregate%extract%1#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "aggregate%extract%1#0"
      ]
    },
    "438": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "aggregate%extract%1#0",
        "0x"
      ]
    },
    "439": {
      "op": "b!=",
      "defined_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%4#1"
      ]
    },
    "440": {
      "op": "bnz with_constant_defaults_bool_true@3",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "443": {
      "op": "dig 6",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "d#0"
      ]
    },
    "445": {
      "op": "extract 8 8",
      "defined_out": [
        "aggregate%extract%2#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "aggregate%extract%2#0"
      ]
    },
    "448": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "aggregate%extract%2#0",
        "0x"
      ]
    },
    "449": {
      "op": "b!=",
      "defined_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%5#1"
      ]
    },
    "450": {
      "op": "bz with_constant_defaults_bool_false@4",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "453": {
      "block": "with_constant_defaults_bool_true@3",
      "stack_in": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "or_result%0#0"
      ]
    },
    "454": {
      "block": "with_constant_defaults_bool_merge@5",
      "stack_in": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "455": {
      "op": "dig 5",
      "defined_out": [
        "e.0#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "e.0#0"
      ]
    },
    "457": {
      "op": "bnz with_constant_defaults_bool_true@7",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "460": {
      "op": "dig 4",
      "defined_out": [
        "e.0#0",
        "e.1#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "e.1#0"
      ]
    },
    "462": {
      "op": "len",
      "defined_out": [
        "e.0#0",
        "e.1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%7#0"
      ]
    },
    "463": {
      "op": "bz with_constant_defaults_bool_false@8",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "466": {
      "block": "with_constant_defaults_bool_true@7",
      "stack_in": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "or_result%1#0"
      ]
    },
    "467": {
      "block": "with_constant_defaults_bool_merge@9",
      "stack_in": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "or_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "468": {
      "op": "dig 3",
      "defined_out": [
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "f#0"
      ]
    },
    "470": {
      "op": "dup",
      "defined_out": [
        "f#0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "f#0",
        "f#0 (copy)"
      ]
    },
    "471": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "f#0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "f#0",
        "f#0 (copy)",
        "0"
      ]
    },
    "472": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_offset%0#0",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "f#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "473": {
      "op": "dup2",
      "defined_out": [
        "aggregate%item_offset%0#0",
        "aggregate%item_offset%0#0 (copy)",
        "f#0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "f#0",
        "aggregate%item_offset%0#0",
        "f#0 (copy)",
        "aggregate%item_offset%0#0 (copy)"
      ]
    },
    "474": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_length%0#0",
        "aggregate%item_offset%0#0",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "f#0",
        "aggregate%item_offset%0#0",
        "aggregate%item_length%0#0"
      ]
    },
    "475": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%item_length%0#0",
        "aggregate%item_offset%0#0",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "f#0",
        "aggregate%item_offset%0#0",
        "aggregate%item_length%0#0",
        "2"
      ]
    },
    "476": {
      "op": "+",
      "defined_out": [
        "aggregate%item_head_tail_length%0#0",
        "aggregate%item_offset%0#0",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "f#0",
        "aggregate%item_offset%0#0",
        "aggregate%item_head_tail_length%0#0"
      ]
    },
    "477": {
      "op": "extract3",
      "defined_out": [
        "aggregate%item%0#0",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "aggregate%item%0#0"
      ]
    },
    "478": {
      "op": "pushbytes 0x00026869",
      "defined_out": [
        "0x00026869",
        "aggregate%item%0#0",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "aggregate%item%0#0",
        "0x00026869"
      ]
    },
    "484": {
      "op": "==",
      "defined_out": [
        "f#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%10#0"
      ]
    },
    "485": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "486": {
      "op": "dig 2",
      "defined_out": [
        "f#0",
        "g#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "g#0"
      ]
    },
    "488": {
      "op": "intc_1 // 0",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "g#0",
        "0"
      ]
    },
    "489": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "f#0",
        "g#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "aggregate%array_length%0#0"
      ]
    },
    "490": {
      "op": "intc_3 // 2",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "491": {
      "op": "==",
      "defined_out": [
        "f#0",
        "g#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%12#0"
      ]
    },
    "492": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "493": {
      "op": "dig 1",
      "defined_out": [
        "f#0",
        "g#0",
        "h#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "h#0"
      ]
    },
    "495": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "f#0",
        "g#0",
        "h#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "h#0",
        "42"
      ]
    },
    "497": {
      "op": "==",
      "defined_out": [
        "f#0",
        "g#0",
        "h#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%13#0"
      ]
    },
    "498": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "499": {
      "op": "dup",
      "defined_out": [
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "i#0"
      ]
    },
    "500": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "i#0",
        "1234"
      ]
    },
    "503": {
      "op": "==",
      "defined_out": [
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%14#0"
      ]
    },
    "504": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "505": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "1"
      ]
    },
    "506": {
      "op": "return",
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ]
    },
    "507": {
      "block": "with_constant_defaults_bool_false@8",
      "stack_in": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "or_result%1#0"
      ]
    },
    "508": {
      "op": "b with_constant_defaults_bool_merge@9"
    },
    "511": {
      "block": "with_constant_defaults_bool_false@4",
      "stack_in": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "or_result%0#0"
      ]
    },
    "512": {
      "op": "b with_constant_defaults_bool_merge@5"
    }
  }
}