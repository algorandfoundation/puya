{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;AA8EK;;AAAA;AAAA;AAAA;;AAAA;AA9EL;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AA8EK;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAMO;AAHA;AAEA;;AADA;;AAJP;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA5DL;;;;AAAA;AA4DK;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA9CL;;;AA8CK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAzCL;;;AAyCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAnCL;;;AAAA;;;AAmCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA3BL;;AAAA;;;;;;;;;;;;;;AAAA;;;AA+BK;;AAAA;AAAA;AAAA;;AARA;;AAYL;;;AAGe;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AACO;AAAP;AAER;;;AAEe;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AACP;AAER;;;AAEe;;AAAA;;;AAAe;;;AAAf;AAAP;;AAER;;;AAEQ;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAMR;;;AAEA;;AAAA;;;AACY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAeZ;;;AAyBe;;AAAA;AAAA;AAAP;AACA;;AAAA;AACO;;AAAA;AAAP;AACO;;AAAA;;;AAAA;AAAA;AAAA;;;AAAO;;AAAA;;;AAAA;AAAA;AAAP;;;;AAAP;AACO;;AAAA;;;AAAQ;;AAAA;AAAR;;;;AAAP;AACO;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAQ;;;;;;AAAR;AAAP;AACO;;AAAA;AAAA;AAAY;;AAAZ;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAK;;;AAAL;AAAP;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 10 42 TMPL_AVM_UINT64"
    },
    "8": {
      "op": "bytecblock 0x151f7c75 0x0000000000000000 TMPL_ARC4_UINT8 TMPL_STRUCT TMPL_AVM_STRING"
    },
    "40": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "42": {
      "op": "bz main_bare_routing@13",
      "stack_out": []
    },
    "45": {
      "op": "pushbytess 0x4c5c61ba 0x97e8e4a7 0x76c4de11 0xc1ca7709 0x6de762c2 0x59fc5282 0x9d9eecb0 0x5e8eef9a // method \"create()void\", method \"struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64\", method \"struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)\", method \"emits_error((uint64,string,(byte[],uint8)))void\", method \"emitter()void\", method \"conditional_emit(bool)void\", method \"template_value()((byte[],uint8),uint64,string,uint8)\", method \"with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void\""
    },
    "87": {
      "op": "txna ApplicationArgs 0"
    },
    "90": {
      "op": "match main_create_route@5 main_struct_arg_route@6 main_struct_return_route@7 main_emits_error_route@8 main_emitter_route@9 main_conditional_emit_route@10 main_template_value_route@11 main_with_constant_defaults_route@12"
    },
    "108": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "109": {
      "op": "return"
    },
    "110": {
      "block": "main_with_constant_defaults_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "112": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "113": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "114": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "116": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "117": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "120": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%45#0"
      ]
    },
    "123": {
      "op": "btoi",
      "defined_out": [
        "tmp%44#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0"
      ]
    },
    "124": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "127": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0"
      ]
    },
    "130": {
      "op": "txna ApplicationArgs 4"
    },
    "133": {
      "op": "txna ApplicationArgs 5"
    },
    "136": {
      "op": "dup",
      "defined_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "tmp%50#0 (copy)"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "tmp%50#0 (copy)"
      ]
    },
    "137": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "item0%0#0"
      ]
    },
    "140": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "item0%0%0#0"
      ]
    },
    "141": {
      "op": "dig 1",
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "item0%0%0#0",
        "tmp%50#0 (copy)"
      ]
    },
    "143": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "item0%0%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "tmp%50#0 (copy)"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "item0%0%0#0",
        "tmp%50#0 (copy)",
        "8"
      ]
    },
    "145": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0%0#0",
        "item_start_offset%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "item0%0%0#0",
        "item_start_offset%0#0"
      ]
    },
    "146": {
      "op": "dig 2",
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "item0%0%0#0",
        "item_start_offset%0#0",
        "tmp%50#0 (copy)"
      ]
    },
    "148": {
      "op": "len",
      "defined_out": [
        "item0%0%0#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "item0%0%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "149": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "item0%0%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tmp%50#0"
      ]
    },
    "151": {
      "op": "cover 2",
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "item0%0%0#0",
        "tmp%50#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "153": {
      "op": "substring3",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "item0%0%0#0",
        "item1%0#0"
      ]
    },
    "154": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "item0%0%0#0",
        "item1%0%0#0"
      ]
    },
    "157": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%51#0"
      ]
    },
    "160": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%51#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%51#0",
        "tmp%52#0"
      ]
    },
    "163": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0"
      ]
    },
    "166": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%54#0"
      ]
    },
    "167": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%54#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%54#0",
        "tmp%55#0"
      ]
    },
    "170": {
      "op": "btoi",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0"
      ]
    },
    "171": {
      "callsub": "test_cases.arc_56.contract.Contract.with_constant_defaults",
      "op": "callsub with_constant_defaults",
      "stack_out": []
    },
    "174": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "175": {
      "op": "return"
    },
    "176": {
      "block": "main_template_value_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "178": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "179": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "180": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "182": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "183": {
      "op": "bytec_2 // TMPL_ARC4_UINT8"
    },
    "184": {
      "op": "bytec_3 // TMPL_STRUCT"
    },
    "185": {
      "op": "bytec 4 // TMPL_AVM_STRING"
    },
    "187": {
      "op": "intc 4 // TMPL_AVM_UINT64",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0"
      ]
    },
    "189": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "190": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "192": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "length%0#0"
      ]
    },
    "193": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "as_bytes%0#0"
      ]
    },
    "194": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0"
      ]
    },
    "197": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0",
        "elements_to_encode%2#0"
      ]
    },
    "199": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0"
      ]
    },
    "200": {
      "op": "dig 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "elements_to_encode%0#0 (copy)"
      ]
    },
    "202": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "data_length%0#0"
      ]
    },
    "203": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "data_length%0#0",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "data_length%0#0",
        "13"
      ]
    },
    "205": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "current_tail_offset%1#0"
      ]
    },
    "206": {
      "op": "pushbytes 0x000d",
      "defined_out": [
        "0x000d",
        "current_tail_offset%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "current_tail_offset%1#0",
        "0x000d"
      ]
    },
    "210": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "encoded_value%0#0",
        "current_tail_offset%1#0",
        "0x000d",
        "val_as_bytes%1#0"
      ]
    },
    "212": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "encoded_value%0#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "213": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "214": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%2#0"
      ]
    },
    "215": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "218": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "219": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%0#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "elements_to_encode%3#0"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "222": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "elements_to_encode%0#0"
      ]
    },
    "224": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "225": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ]
    },
    "226": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "227": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "228": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "229": {
      "op": "concat",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "230": {
      "op": "log",
      "stack_out": []
    },
    "231": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "232": {
      "op": "return"
    },
    "233": {
      "block": "main_conditional_emit_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "235": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "236": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "237": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "239": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "240": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "243": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "0"
      ]
    },
    "244": {
      "op": "getbit",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "245": {
      "callsub": "test_cases.arc_56.contract.Contract.conditional_emit",
      "op": "callsub conditional_emit",
      "stack_out": []
    },
    "248": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "249": {
      "op": "return"
    },
    "250": {
      "block": "main_emitter_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "252": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "253": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "254": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "256": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "257": {
      "callsub": "test_cases.arc_56.contract.Contract.emitter",
      "op": "callsub emitter"
    },
    "260": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "261": {
      "op": "return"
    },
    "262": {
      "block": "main_emits_error_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "264": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "265": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "266": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "268": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "269": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "272": {
      "callsub": "test_cases.arc_56.contract.Contract.errors",
      "op": "callsub errors",
      "stack_out": []
    },
    "275": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "276": {
      "op": "return"
    },
    "277": {
      "block": "main_struct_return_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "279": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "280": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "281": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "283": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "284": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "287": {
      "callsub": "test_cases.arc_56.contract.Contract.struct_return",
      "op": "callsub struct_return",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "290": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "291": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%18#0"
      ]
    },
    "292": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "293": {
      "op": "log",
      "stack_out": []
    },
    "294": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "295": {
      "op": "return"
    },
    "296": {
      "block": "main_struct_arg_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "298": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "299": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "300": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "302": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "303": {
      "op": "txna ApplicationArgs 1"
    },
    "306": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "309": {
      "callsub": "test_cases.arc_56.contract.Contract.struct_arg",
      "op": "callsub struct_arg",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "312": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "313": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "314": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "315": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "316": {
      "op": "log",
      "stack_out": []
    },
    "317": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "318": {
      "op": "return"
    },
    "319": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "intc_0 // 1"
    },
    "320": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "1",
        "tmp%3#0"
      ]
    },
    "322": {
      "op": "shl",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "323": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "3"
      ]
    },
    "325": {
      "op": "&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "326": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "327": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "328": {
      "op": "return"
    },
    "329": {
      "block": "main_bare_routing@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "331": {
      "op": "switch main_bare_create@14 main_bare_create@14 main_after_if_else@16 main_after_if_else@16 main_after_if_else@16 main_transient@15",
      "stack_out": []
    },
    "345": {
      "op": "b main_after_if_else@16"
    },
    "348": {
      "block": "main_transient@15",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "350": {
      "op": "!",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "351": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "352": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "353": {
      "op": "return"
    },
    "354": {
      "block": "main_bare_create@14",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "355": {
      "op": "return"
    },
    "356": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_arg",
      "params": {
        "arg#0": "bytes",
        "shared#0": "bytes"
      },
      "block": "struct_arg",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "359": {
      "op": "frame_dig -2",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "361": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "10"
      ]
    },
    "362": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0"
      ]
    },
    "363": {
      "op": "frame_dig -2",
      "stack_out": [
        "item_start_offset%0#0",
        "arg#0 (copy)"
      ]
    },
    "365": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "366": {
      "op": "frame_dig -2",
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "arg#0 (copy)"
      ]
    },
    "368": {
      "op": "cover 2",
      "stack_out": [
        "arg#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "370": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "371": {
      "op": "frame_dig -1",
      "defined_out": [
        "shared#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "shared#0 (copy)"
      ]
    },
    "373": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "374": {
      "error": "this might error",
      "op": "assert // this might error",
      "stack_out": []
    },
    "375": {
      "op": "intc_3 // 42",
      "defined_out": [
        "42"
      ],
      "stack_out": [
        "42"
      ]
    },
    "376": {
      "retsub": true,
      "op": "retsub"
    },
    "377": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_return",
      "params": {
        "arg#0": "bytes"
      },
      "block": "struct_return",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "380": {
      "op": "frame_dig -1",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "382": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "10"
      ]
    },
    "383": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0"
      ]
    },
    "384": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_start_offset%0#0",
        "arg#0 (copy)"
      ]
    },
    "386": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "387": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "arg#0 (copy)"
      ]
    },
    "389": {
      "op": "cover 2",
      "stack_out": [
        "arg#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "391": {
      "op": "substring3",
      "defined_out": [
        "s#0"
      ],
      "stack_out": [
        "s#0"
      ]
    },
    "392": {
      "retsub": true,
      "op": "retsub"
    },
    "393": {
      "subroutine": "test_cases.arc_56.contract.Contract.errors",
      "params": {
        "arg#0": "bytes"
      },
      "block": "errors",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "396": {
      "op": "frame_dig -1",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "398": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "401": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "404": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "405": {
      "error": "this will error",
      "op": "assert // this will error",
      "stack_out": []
    },
    "406": {
      "retsub": true,
      "op": "retsub"
    },
    "407": {
      "subroutine": "test_cases.arc_56.contract.Contract.emitter",
      "params": {},
      "block": "emitter",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "410": {
      "op": "pushbytes 0xd93f374e00032a000668656c6c6f31",
      "defined_out": [
        "0xd93f374e00032a000668656c6c6f31"
      ],
      "stack_out": [
        "0xd93f374e00032a000668656c6c6f31"
      ]
    },
    "427": {
      "op": "log",
      "stack_out": []
    },
    "428": {
      "op": "pushbytes 0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32",
      "defined_out": [
        "0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32"
      ],
      "stack_out": [
        "0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32"
      ]
    },
    "456": {
      "op": "log",
      "stack_out": []
    },
    "457": {
      "retsub": true,
      "op": "retsub"
    },
    "458": {
      "subroutine": "test_cases.arc_56.contract.Contract.conditional_emit",
      "params": {
        "should_emit#0": "uint64"
      },
      "block": "conditional_emit",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "461": {
      "op": "frame_dig -1",
      "defined_out": [
        "should_emit#0 (copy)"
      ],
      "stack_out": [
        "should_emit#0 (copy)"
      ]
    },
    "463": {
      "op": "bz conditional_emit_after_if_else@2",
      "stack_out": []
    },
    "466": {
      "op": "pushbytes 0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33"
    },
    "501": {
      "op": "log"
    },
    "502": {
      "block": "conditional_emit_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "503": {
      "subroutine": "test_cases.arc_56.contract.Contract.with_constant_defaults",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64",
        "c#0": "bytes",
        "d#0": "bytes",
        "e.0#0": "uint64",
        "e.1#0": "bytes",
        "f#0": "bytes",
        "g#0": "bytes",
        "h#0": "uint64",
        "i#0": "uint64"
      },
      "block": "with_constant_defaults",
      "stack_in": [],
      "op": "proto 10 0"
    },
    "506": {
      "op": "frame_dig -10",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "508": {
      "op": "bytec_1 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "509": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "510": {
      "op": "assert",
      "stack_out": []
    },
    "511": {
      "op": "frame_dig -9",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "513": {
      "op": "assert",
      "stack_out": []
    },
    "514": {
      "op": "frame_dig -8",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "c#0 (copy)"
      ]
    },
    "516": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "517": {
      "op": "assert",
      "stack_out": []
    },
    "518": {
      "op": "frame_dig -7",
      "defined_out": [
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0 (copy)"
      ]
    },
    "520": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "523": {
      "op": "bytec_1 // 0x0000000000000000",
      "stack_out": [
        "tmp%4#0",
        "0x0000000000000000"
      ]
    },
    "524": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "525": {
      "op": "bnz with_constant_defaults_bool_true@2",
      "stack_out": []
    },
    "528": {
      "op": "frame_dig -7"
    },
    "530": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "533": {
      "op": "bytec_1 // 0x0000000000000000"
    },
    "534": {
      "op": "!="
    },
    "535": {
      "op": "bz with_constant_defaults_bool_false@3"
    },
    "538": {
      "block": "with_constant_defaults_bool_true@2",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "539": {
      "block": "with_constant_defaults_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "540": {
      "op": "frame_dig -6",
      "defined_out": [
        "e.0#0 (copy)"
      ],
      "stack_out": [
        "e.0#0 (copy)"
      ]
    },
    "542": {
      "op": "bnz with_constant_defaults_bool_true@6",
      "stack_out": []
    },
    "545": {
      "op": "frame_dig -5"
    },
    "547": {
      "op": "len"
    },
    "548": {
      "op": "bz with_constant_defaults_bool_false@7"
    },
    "551": {
      "block": "with_constant_defaults_bool_true@6",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%1#0"
      ]
    },
    "552": {
      "block": "with_constant_defaults_bool_merge@8",
      "stack_in": [
        "or_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "553": {
      "op": "frame_dig -4",
      "defined_out": [
        "f#0 (copy)"
      ],
      "stack_out": [
        "f#0 (copy)"
      ]
    },
    "555": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "f#0 (copy)",
        "0"
      ]
    },
    "556": {
      "op": "extract_uint16",
      "defined_out": [
        "item_offset%0#0"
      ],
      "stack_out": [
        "item_offset%0#0"
      ]
    },
    "557": {
      "op": "frame_dig -4",
      "stack_out": [
        "item_offset%0#0",
        "f#0 (copy)"
      ]
    },
    "559": {
      "op": "dig 1",
      "defined_out": [
        "f#0 (copy)",
        "item_offset%0#0",
        "item_offset%0#0 (copy)"
      ],
      "stack_out": [
        "item_offset%0#0",
        "f#0 (copy)",
        "item_offset%0#0 (copy)"
      ]
    },
    "561": {
      "op": "extract_uint16",
      "defined_out": [
        "item_length%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "item_offset%0#0",
        "item_length%0#0"
      ]
    },
    "562": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "item_length%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "item_offset%0#0",
        "item_length%0#0",
        "2"
      ]
    },
    "564": {
      "op": "+",
      "defined_out": [
        "item_head_tail_length%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "item_offset%0#0",
        "item_head_tail_length%0#0"
      ]
    },
    "565": {
      "op": "frame_dig -4",
      "stack_out": [
        "item_offset%0#0",
        "item_head_tail_length%0#0",
        "f#0 (copy)"
      ]
    },
    "567": {
      "op": "cover 2",
      "stack_out": [
        "f#0 (copy)",
        "item_offset%0#0",
        "item_head_tail_length%0#0"
      ]
    },
    "569": {
      "op": "extract3",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "570": {
      "op": "pushbytes 0x00026869",
      "defined_out": [
        "0x00026869",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x00026869"
      ]
    },
    "576": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "577": {
      "op": "assert",
      "stack_out": []
    },
    "578": {
      "op": "frame_dig -3",
      "defined_out": [
        "g#0 (copy)"
      ],
      "stack_out": [
        "g#0 (copy)"
      ]
    },
    "580": {
      "op": "intc_1 // 0",
      "stack_out": [
        "g#0 (copy)",
        "0"
      ]
    },
    "581": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "582": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "tmp%13#0",
        "2"
      ]
    },
    "584": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "585": {
      "op": "assert",
      "stack_out": []
    },
    "586": {
      "op": "frame_dig -2",
      "defined_out": [
        "h#0 (copy)"
      ],
      "stack_out": [
        "h#0 (copy)"
      ]
    },
    "588": {
      "op": "intc_3 // 42",
      "defined_out": [
        "42",
        "h#0 (copy)"
      ],
      "stack_out": [
        "h#0 (copy)",
        "42"
      ]
    },
    "589": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "590": {
      "op": "assert",
      "stack_out": []
    },
    "591": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0 (copy)"
      ]
    },
    "593": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0 (copy)",
        "1234"
      ]
    },
    "596": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "597": {
      "op": "assert",
      "stack_out": []
    },
    "598": {
      "retsub": true,
      "op": "retsub"
    },
    "599": {
      "block": "with_constant_defaults_bool_false@7",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%1#0"
      ]
    },
    "600": {
      "op": "b with_constant_defaults_bool_merge@8"
    },
    "603": {
      "block": "with_constant_defaults_bool_false@3",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "604": {
      "op": "b with_constant_defaults_bool_merge@4"
    }
  }
}