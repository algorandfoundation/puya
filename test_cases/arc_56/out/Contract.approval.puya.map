{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;AA2BK;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA3BL;;AAAA;;;;;;;;;;;;;;AAAA;AA+BK;;AAAA;AAAA;AAAA;AAAA;AARA;AAAA;AAYA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGU;AAAP;AAHH;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAMA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEU;;;AAAe;;;AAAf;AAAP;AAFH;AAAA;AAMG;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAJH;AAAA;AAUA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEL;;;AACY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAHP;AAAA;AAeO;AADA;AADA;;AADA;;AAHP;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AASA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBU;;AAAA;AAAA;AAAP;AACA;;AAAA;AACO;;AAAA;AAAP;AACO;;AAAA;;;AAAA;AAAA;AAAA;;;AAAO;;AAAA;;;AAAA;AAAA;AAAP;;;;AAAP;AACO;;AAAA;;;AAAQ;;AAAA;AAAR;;;;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQ;;;;;;AAAR;AAAP;AACO;;AAAY;AAAZ;AAAP;AACO;;AAAK;;AAAL;AAAP;AACO;;AAAK;;;AAAL;AAjCV;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8 TMPL_AVM_UINT64"
    },
    "8": {
      "op": "bytecblock 0x 0x151f7c75 TMPL_ARC4_UINT8 TMPL_AVM_STRING TMPL_STRUCT"
    },
    "32": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "34": {
      "op": "bz main_bare_routing@18",
      "stack_out": []
    },
    "37": {
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)"
      ],
      "stack_out": [
        "Method(create()void)"
      ]
    },
    "43": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create()void)",
        "tmp%2#0"
      ]
    },
    "46": {
      "op": "match main_create_route@5",
      "stack_out": []
    },
    "50": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "52": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "53": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "54": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "56": {
      "op": "assert",
      "stack_out": []
    },
    "57": {
      "op": "pushbytess 0x97e8e4a7 0x76c4de11 0xc1ca7709 0x6de762c2 0x59fc5282 0x9d9eecb0 0x5e8eef9a // method \"struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64\", method \"struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)\", method \"emits_error((uint64,string,(byte[],uint8)))void\", method \"emitter()void\", method \"conditional_emit(bool)void\", method \"template_value()((byte[],uint8),uint64,string,uint8)\", method \"with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)"
      ]
    },
    "94": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%10#0"
      ],
      "stack_out": [
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%10#0"
      ]
    },
    "97": {
      "op": "match struct_arg struct_return errors emitter conditional_emit template_value with_constant_defaults",
      "stack_out": []
    },
    "113": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "err"
    },
    "114": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "115": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "1",
        "tmp%3#0"
      ]
    },
    "117": {
      "op": "shl",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "118": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "3"
      ]
    },
    "120": {
      "op": "&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "121": {
      "error": "OnCompletion must be one of NoOp, OptIn",
      "op": "assert // OnCompletion must be one of NoOp, OptIn",
      "stack_out": []
    },
    "122": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "123": {
      "op": "return",
      "stack_out": []
    },
    "124": {
      "block": "main_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "126": {
      "op": "switch main_bare_create@19 main_bare_create@19 main_after_if_else@22 main_after_if_else@22 main_after_if_else@22 main_transient@20",
      "stack_out": []
    },
    "140": {
      "op": "err"
    },
    "141": {
      "block": "main_transient@20",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "143": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "144": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "145": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "146": {
      "op": "return",
      "stack_out": []
    },
    "147": {
      "block": "main_bare_create@19",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "148": {
      "op": "return",
      "stack_out": []
    },
    "149": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_arg[routing]",
      "params": {},
      "block": "struct_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "152": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "153": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)",
        "8"
      ]
    },
    "154": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "arg#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0"
      ]
    },
    "155": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "156": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "12"
      ]
    },
    "158": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "159": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+utf8[]),((len+uint8[]),uint8))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]),((len+uint8[]),uint8))",
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0"
      ]
    },
    "160": {
      "op": "dig 1",
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "arg#0 (copy)"
      ]
    },
    "162": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "arg#0",
        "arg#0 (copy)",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "arg#0 (copy)",
        "10"
      ]
    },
    "164": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "arg#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "165": {
      "op": "dig 2",
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)"
      ]
    },
    "167": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)",
        "extract_uint16%0#0"
      ]
    },
    "169": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "arg#0",
        "arg#0 (copy)",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "171": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "172": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "173": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%array_length%0#0"
      ]
    },
    "174": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "aggregate%array_length%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%array_length%0#0",
        "14"
      ]
    },
    "176": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0"
      ]
    },
    "177": {
      "op": "dup2",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "add%1#0 (copy)"
      ]
    },
    "178": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "arg#0",
        "eq%1#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "eq%1#0"
      ]
    },
    "179": {
      "error": "invalid tail pointer at index 2 of (uint64,(len+utf8[]),((len+uint8[]),uint8))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,(len+utf8[]),((len+uint8[]),uint8))",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0"
      ]
    },
    "180": {
      "op": "dig 2",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "arg#0 (copy)"
      ]
    },
    "182": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "aggregate%len%0#0"
      ]
    },
    "183": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "aggregate%len%0#0",
        "arg#0"
      ]
    },
    "185": {
      "op": "uncover 3",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "arg#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "187": {
      "op": "dig 2",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "aggregate%len%0#0 (copy)",
        "arg#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0 (copy)"
      ]
    },
    "189": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0"
      ]
    },
    "190": {
      "op": "dup",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "191": {
      "op": "intc_0 // 0",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "0"
      ]
    },
    "192": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0"
      ]
    },
    "193": {
      "op": "dup",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "extract_uint16%2#0 (copy)"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "extract_uint16%2#0 (copy)"
      ]
    },
    "194": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "extract_uint16%2#0 (copy)"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "extract_uint16%2#0 (copy)",
        "3"
      ]
    },
    "196": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "eq%2#0",
        "extract_uint16%2#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "eq%2#0"
      ]
    },
    "197": {
      "error": "invalid tail pointer at index 0 of ((len+uint8[]),uint8)",
      "op": "assert // invalid tail pointer at index 0 of ((len+uint8[]),uint8)",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0"
      ]
    },
    "198": {
      "op": "dig 1",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "200": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%len%2#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "aggregate%len%2#0"
      ]
    },
    "201": {
      "op": "dig 2",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "aggregate%len%2#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "203": {
      "op": "cover 2",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "extract_uint16%2#0",
        "aggregate%len%2#0"
      ]
    },
    "205": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "206": {
      "op": "intc_0 // 0",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%3#0",
        "0"
      ]
    },
    "207": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "aggregate%array_length%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "aggregate%array_length%1#0"
      ]
    },
    "208": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "add%1#0",
        "aggregate%array_length%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "aggregate%array_length%1#0",
        "5"
      ]
    },
    "210": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%3#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "add%3#0"
      ]
    },
    "211": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "add%3#0",
        "add%1#0"
      ]
    },
    "213": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "add%4#0"
      ]
    },
    "214": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%substring3%1#0",
        "add%4#0",
        "aggregate%len%0#0"
      ]
    },
    "216": {
      "op": "==",
      "defined_out": [
        "aggregate%substring3%1#0",
        "eq%3#0"
      ],
      "stack_out": [
        "aggregate%substring3%1#0",
        "eq%3#0"
      ]
    },
    "217": {
      "error": "invalid number of bytes for test_cases.arc_56.contract.TopLevelStruct",
      "op": "assert // invalid number of bytes for test_cases.arc_56.contract.TopLevelStruct",
      "stack_out": [
        "aggregate%substring3%1#0"
      ]
    },
    "218": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "aggregate%substring3%1#0",
        "shared#0"
      ],
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0"
      ]
    },
    "221": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "shared#0 (copy)"
      ],
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "shared#0 (copy)"
      ]
    },
    "222": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "shared#0 (copy)",
        "0"
      ]
    },
    "223": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "aggregate%substring3%1#0",
        "extract_uint16%3#0",
        "shared#0"
      ],
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "extract_uint16%3#0"
      ]
    },
    "224": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%1#0",
        "extract_uint16%3#0",
        "extract_uint16%3#0 (copy)",
        "shared#0"
      ],
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "extract_uint16%3#0",
        "extract_uint16%3#0 (copy)"
      ]
    },
    "225": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "extract_uint16%3#0",
        "extract_uint16%3#0 (copy)",
        "3"
      ]
    },
    "227": {
      "op": "==",
      "defined_out": [
        "aggregate%substring3%1#0",
        "eq%4#0",
        "extract_uint16%3#0",
        "shared#0"
      ],
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "extract_uint16%3#0",
        "eq%4#0"
      ]
    },
    "228": {
      "error": "invalid tail pointer at index 0 of ((len+uint8[]),uint8)",
      "op": "assert // invalid tail pointer at index 0 of ((len+uint8[]),uint8)",
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "extract_uint16%3#0"
      ]
    },
    "229": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "extract_uint16%3#0",
        "shared#0 (copy)"
      ]
    },
    "231": {
      "op": "len",
      "defined_out": [
        "aggregate%len%3#0",
        "aggregate%substring3%1#0",
        "extract_uint16%3#0",
        "shared#0"
      ],
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "extract_uint16%3#0",
        "aggregate%len%3#0"
      ]
    },
    "232": {
      "op": "dig 2",
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "extract_uint16%3#0",
        "aggregate%len%3#0",
        "shared#0 (copy)"
      ]
    },
    "234": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "aggregate%len%3#0",
        "shared#0 (copy)",
        "extract_uint16%3#0"
      ]
    },
    "236": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%len%3#0",
        "aggregate%len%3#0 (copy)",
        "aggregate%substring3%1#0",
        "extract_uint16%3#0",
        "shared#0",
        "shared#0 (copy)"
      ],
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "aggregate%len%3#0",
        "shared#0 (copy)",
        "extract_uint16%3#0",
        "aggregate%len%3#0 (copy)"
      ]
    },
    "238": {
      "op": "substring3",
      "defined_out": [
        "aggregate%len%3#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%4#0",
        "shared#0"
      ],
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "aggregate%len%3#0",
        "aggregate%substring3%4#0"
      ]
    },
    "239": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "aggregate%len%3#0",
        "aggregate%substring3%4#0",
        "0"
      ]
    },
    "240": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%2#0",
        "aggregate%len%3#0",
        "aggregate%substring3%1#0",
        "shared#0"
      ],
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "aggregate%len%3#0",
        "aggregate%array_length%2#0"
      ]
    },
    "241": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "aggregate%len%3#0",
        "aggregate%array_length%2#0",
        "5"
      ]
    },
    "243": {
      "op": "+",
      "defined_out": [
        "add%6#0",
        "aggregate%len%3#0",
        "aggregate%substring3%1#0",
        "shared#0"
      ],
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "aggregate%len%3#0",
        "add%6#0"
      ]
    },
    "244": {
      "op": "==",
      "defined_out": [
        "aggregate%substring3%1#0",
        "eq%5#0",
        "shared#0"
      ],
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0",
        "eq%5#0"
      ]
    },
    "245": {
      "error": "invalid number of bytes for test_cases.arc_56.contract.SharedStruct",
      "op": "assert // invalid number of bytes for test_cases.arc_56.contract.SharedStruct",
      "stack_out": [
        "aggregate%substring3%1#0",
        "shared#0"
      ]
    },
    "246": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "247": {
      "error": "this might error",
      "op": "assert // this might error",
      "stack_out": []
    },
    "248": {
      "op": "pushbytes 0x151f7c75000000000000002a",
      "defined_out": [
        "0x151f7c75000000000000002a"
      ],
      "stack_out": [
        "0x151f7c75000000000000002a"
      ]
    },
    "262": {
      "op": "log",
      "stack_out": []
    },
    "263": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "264": {
      "op": "return",
      "stack_out": []
    },
    "265": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_return[routing]",
      "params": {},
      "block": "struct_return",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "268": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "269": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)",
        "8"
      ]
    },
    "270": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "arg#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0"
      ]
    },
    "271": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "272": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "12"
      ]
    },
    "274": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "275": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+utf8[]),((len+uint8[]),uint8))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]),((len+uint8[]),uint8))",
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0"
      ]
    },
    "276": {
      "op": "dig 1",
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "arg#0 (copy)"
      ]
    },
    "278": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "arg#0",
        "arg#0 (copy)",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "arg#0 (copy)",
        "10"
      ]
    },
    "280": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "arg#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "281": {
      "op": "dig 2",
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)"
      ]
    },
    "283": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)",
        "extract_uint16%0#0"
      ]
    },
    "285": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "arg#0",
        "arg#0 (copy)",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "287": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "288": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "289": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%array_length%0#0"
      ]
    },
    "290": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "aggregate%array_length%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%array_length%0#0",
        "14"
      ]
    },
    "292": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0"
      ]
    },
    "293": {
      "op": "dup2",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "add%1#0 (copy)"
      ]
    },
    "294": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "arg#0",
        "eq%1#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "eq%1#0"
      ]
    },
    "295": {
      "error": "invalid tail pointer at index 2 of (uint64,(len+utf8[]),((len+uint8[]),uint8))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,(len+utf8[]),((len+uint8[]),uint8))",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0"
      ]
    },
    "296": {
      "op": "dig 2",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "arg#0 (copy)"
      ]
    },
    "298": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "aggregate%len%0#0"
      ]
    },
    "299": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "aggregate%len%0#0",
        "arg#0"
      ]
    },
    "301": {
      "op": "uncover 3",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "arg#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "303": {
      "op": "dig 2",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "aggregate%len%0#0 (copy)",
        "arg#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0 (copy)"
      ]
    },
    "305": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0"
      ]
    },
    "306": {
      "op": "dup",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "s#0 (copy)"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "s#0 (copy)"
      ]
    },
    "307": {
      "op": "intc_0 // 0",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "s#0 (copy)",
        "0"
      ]
    },
    "308": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "extract_uint16%2#0",
        "s#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "extract_uint16%2#0"
      ]
    },
    "309": {
      "op": "dup",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "extract_uint16%2#0",
        "extract_uint16%2#0 (copy)",
        "s#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "extract_uint16%2#0",
        "extract_uint16%2#0 (copy)"
      ]
    },
    "310": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "add%1#0",
        "aggregate%len%0#0",
        "extract_uint16%2#0",
        "extract_uint16%2#0 (copy)",
        "s#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "extract_uint16%2#0",
        "extract_uint16%2#0 (copy)",
        "3"
      ]
    },
    "312": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "eq%2#0",
        "extract_uint16%2#0",
        "s#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "extract_uint16%2#0",
        "eq%2#0"
      ]
    },
    "313": {
      "error": "invalid tail pointer at index 0 of ((len+uint8[]),uint8)",
      "op": "assert // invalid tail pointer at index 0 of ((len+uint8[]),uint8)",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "extract_uint16%2#0"
      ]
    },
    "314": {
      "op": "dig 1",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "extract_uint16%2#0",
        "s#0 (copy)"
      ]
    },
    "316": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%len%2#0",
        "extract_uint16%2#0",
        "s#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "extract_uint16%2#0",
        "aggregate%len%2#0"
      ]
    },
    "317": {
      "op": "dig 2",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "extract_uint16%2#0",
        "aggregate%len%2#0",
        "s#0 (copy)"
      ]
    },
    "319": {
      "op": "cover 2",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "s#0 (copy)",
        "extract_uint16%2#0",
        "aggregate%len%2#0"
      ]
    },
    "321": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%3#0",
        "s#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "aggregate%substring3%3#0"
      ]
    },
    "322": {
      "op": "intc_0 // 0",
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "aggregate%substring3%3#0",
        "0"
      ]
    },
    "323": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "aggregate%array_length%1#0",
        "aggregate%len%0#0",
        "s#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "aggregate%array_length%1#0"
      ]
    },
    "324": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "add%1#0",
        "aggregate%array_length%1#0",
        "aggregate%len%0#0",
        "s#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "aggregate%array_length%1#0",
        "5"
      ]
    },
    "326": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%3#0",
        "aggregate%len%0#0",
        "s#0"
      ],
      "stack_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "s#0",
        "add%3#0"
      ]
    },
    "327": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%len%0#0",
        "s#0",
        "add%3#0",
        "add%1#0"
      ]
    },
    "329": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "aggregate%len%0#0",
        "s#0"
      ],
      "stack_out": [
        "aggregate%len%0#0",
        "s#0",
        "add%4#0"
      ]
    },
    "330": {
      "op": "uncover 2",
      "stack_out": [
        "s#0",
        "add%4#0",
        "aggregate%len%0#0"
      ]
    },
    "332": {
      "op": "==",
      "defined_out": [
        "eq%3#0",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "eq%3#0"
      ]
    },
    "333": {
      "error": "invalid number of bytes for test_cases.arc_56.contract.TopLevelStruct",
      "op": "assert // invalid number of bytes for test_cases.arc_56.contract.TopLevelStruct",
      "stack_out": [
        "s#0"
      ]
    },
    "334": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "0x151f7c75"
      ]
    },
    "335": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "s#0"
      ]
    },
    "336": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "337": {
      "op": "log",
      "stack_out": []
    },
    "338": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "339": {
      "op": "return",
      "stack_out": []
    },
    "340": {
      "subroutine": "test_cases.arc_56.contract.Contract.errors[routing]",
      "params": {},
      "block": "errors",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "arg#0"
      ]
    },
    "343": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "344": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "arg#0 (copy)",
        "8"
      ]
    },
    "345": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "arg#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0"
      ]
    },
    "346": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "347": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "12"
      ]
    },
    "349": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "eq%0#0"
      ]
    },
    "350": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+utf8[]),((len+uint8[]),uint8))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]),((len+uint8[]),uint8))",
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0"
      ]
    },
    "351": {
      "op": "dig 1",
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "arg#0 (copy)"
      ]
    },
    "353": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "arg#0",
        "arg#0 (copy)",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "arg#0 (copy)",
        "10"
      ]
    },
    "355": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "arg#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "356": {
      "op": "dig 2",
      "stack_out": [
        "arg#0",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)"
      ]
    },
    "358": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)",
        "extract_uint16%0#0"
      ]
    },
    "360": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "arg#0",
        "arg#0 (copy)",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)",
        "extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "362": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "363": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "0"
      ]
    },
    "364": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%array_length%0#0"
      ]
    },
    "365": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "aggregate%array_length%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%array_length%0#0",
        "14"
      ]
    },
    "367": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0"
      ]
    },
    "368": {
      "op": "dup2",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "add%1#0 (copy)"
      ]
    },
    "369": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "arg#0",
        "eq%1#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "eq%1#0"
      ]
    },
    "370": {
      "error": "invalid tail pointer at index 2 of (uint64,(len+utf8[]),((len+uint8[]),uint8))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,(len+utf8[]),((len+uint8[]),uint8))",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0"
      ]
    },
    "371": {
      "op": "dig 2",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "arg#0 (copy)"
      ]
    },
    "373": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "aggregate%len%0#0"
      ]
    },
    "374": {
      "op": "dig 3",
      "stack_out": [
        "arg#0",
        "aggregate%extract_uint16%1#0",
        "add%1#0",
        "aggregate%len%0#0",
        "arg#0 (copy)"
      ]
    },
    "376": {
      "op": "uncover 3",
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "378": {
      "op": "dig 2",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "aggregate%len%0#0 (copy)",
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0 (copy)"
      ]
    },
    "380": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0"
      ]
    },
    "381": {
      "op": "dup",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "382": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "aggregate%substring3%1#0 (copy)",
        "0"
      ]
    },
    "383": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "arg#0",
        "extract_uint16%2#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0"
      ]
    },
    "384": {
      "op": "dup",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "arg#0",
        "extract_uint16%2#0",
        "extract_uint16%2#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "extract_uint16%2#0 (copy)"
      ]
    },
    "385": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "arg#0",
        "extract_uint16%2#0",
        "extract_uint16%2#0 (copy)"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "extract_uint16%2#0 (copy)",
        "3"
      ]
    },
    "387": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "arg#0",
        "eq%2#0",
        "extract_uint16%2#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "eq%2#0"
      ]
    },
    "388": {
      "error": "invalid tail pointer at index 0 of ((len+uint8[]),uint8)",
      "op": "assert // invalid tail pointer at index 0 of ((len+uint8[]),uint8)",
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0"
      ]
    },
    "389": {
      "op": "dig 1",
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "aggregate%substring3%1#0 (copy)"
      ]
    },
    "391": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%len%2#0",
        "aggregate%substring3%1#0",
        "arg#0",
        "extract_uint16%2#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%1#0",
        "extract_uint16%2#0",
        "aggregate%len%2#0"
      ]
    },
    "392": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%3#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%3#0"
      ]
    },
    "393": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%3#0",
        "0"
      ]
    },
    "394": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "aggregate%array_length%1#0",
        "aggregate%len%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%array_length%1#0"
      ]
    },
    "395": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "add%1#0",
        "aggregate%array_length%1#0",
        "aggregate%len%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "aggregate%array_length%1#0",
        "5"
      ]
    },
    "397": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%3#0",
        "aggregate%len%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "add%1#0",
        "aggregate%len%0#0",
        "add%3#0"
      ]
    },
    "398": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0",
        "aggregate%len%0#0",
        "add%3#0",
        "add%1#0"
      ]
    },
    "400": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "aggregate%len%0#0",
        "arg#0"
      ],
      "stack_out": [
        "arg#0",
        "aggregate%len%0#0",
        "add%4#0"
      ]
    },
    "401": {
      "op": "==",
      "defined_out": [
        "arg#0",
        "eq%3#0"
      ],
      "stack_out": [
        "arg#0",
        "eq%3#0"
      ]
    },
    "402": {
      "error": "invalid number of bytes for test_cases.arc_56.contract.TopLevelStruct",
      "op": "assert // invalid number of bytes for test_cases.arc_56.contract.TopLevelStruct",
      "stack_out": [
        "arg#0"
      ]
    },
    "403": {
      "op": "extract 0 8",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "406": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "0x00"
      ]
    },
    "409": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "410": {
      "error": "this will error",
      "op": "assert // this will error",
      "stack_out": []
    },
    "411": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "412": {
      "op": "return",
      "stack_out": []
    },
    "413": {
      "subroutine": "test_cases.arc_56.contract.Contract.emitter[routing]",
      "params": {},
      "block": "emitter",
      "stack_in": [],
      "op": "pushbytes 0xd93f374e00032a000668656c6c6f31",
      "defined_out": [
        "0xd93f374e00032a000668656c6c6f31"
      ],
      "stack_out": [
        "0xd93f374e00032a000668656c6c6f31"
      ]
    },
    "430": {
      "op": "log",
      "stack_out": []
    },
    "431": {
      "op": "pushbytes 0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32",
      "defined_out": [
        "0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32"
      ],
      "stack_out": [
        "0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32"
      ]
    },
    "459": {
      "op": "log",
      "stack_out": []
    },
    "460": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "461": {
      "op": "return",
      "stack_out": []
    },
    "462": {
      "subroutine": "test_cases.arc_56.contract.Contract.conditional_emit[routing]",
      "params": {},
      "block": "conditional_emit",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "465": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "466": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "467": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "1"
      ]
    },
    "468": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "469": {
      "error": "invalid number of bytes for arc4.bool",
      "op": "assert // invalid number of bytes for arc4.bool",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "470": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "471": {
      "op": "getbit",
      "defined_out": [
        "should_emit#0"
      ],
      "stack_out": [
        "should_emit#0"
      ]
    },
    "472": {
      "op": "bz conditional_emit_after_if_else@3",
      "stack_out": []
    },
    "475": {
      "op": "pushbytes 0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33",
      "defined_out": [
        "0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33"
      ],
      "stack_out": [
        "0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33"
      ]
    },
    "510": {
      "op": "log",
      "stack_out": []
    },
    "511": {
      "block": "conditional_emit_after_if_else@3",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "512": {
      "op": "return",
      "stack_out": []
    },
    "513": {
      "subroutine": "test_cases.arc_56.contract.Contract.template_value[routing]",
      "params": {},
      "block": "template_value",
      "stack_in": [],
      "op": "bytec_2 // TMPL_ARC4_UINT8",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "514": {
      "op": "bytec_3 // TMPL_AVM_STRING",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "515": {
      "op": "intc 4 // TMPL_AVM_UINT64",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "517": {
      "op": "bytec 4 // TMPL_STRUCT",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "519": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "520": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "521": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "aggregate%data_length%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%data_length%0#0",
        "13"
      ]
    },
    "523": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "524": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%1#0"
      ]
    },
    "526": {
      "op": "itob",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "527": {
      "op": "pushbytes 0x000d",
      "defined_out": [
        "0x000d",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%0#0",
        "0x000d"
      ]
    },
    "531": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "0x000d",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "532": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0"
      ]
    },
    "533": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "535": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0"
      ]
    },
    "536": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "537": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "540": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%2#0"
      ]
    },
    "542": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "543": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "545": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "546": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "549": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%1#0"
      ]
    },
    "551": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "552": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0"
      ]
    },
    "553": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "tmp%3#0"
      ]
    },
    "555": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0"
      ]
    },
    "556": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "tmp%0#0"
      ]
    },
    "558": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "559": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "560": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "561": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "0x151f7c75"
      ]
    },
    "562": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ]
    },
    "563": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "564": {
      "op": "log",
      "stack_out": []
    },
    "565": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "566": {
      "op": "return",
      "stack_out": []
    },
    "567": {
      "subroutine": "test_cases.arc_56.contract.Contract.with_constant_defaults[routing]",
      "params": {},
      "block": "with_constant_defaults",
      "stack_in": [],
      "op": "intc_0 // 0",
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "568": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0"
      ]
    },
    "569": {
      "op": "dupn 5",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ]
    },
    "571": {
      "op": "txna ApplicationArgs 1"
    },
    "574": {
      "op": "dup",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "a#0"
      ]
    },
    "575": {
      "op": "len",
      "defined_out": [
        "a#0",
        "len%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "len%0#0"
      ]
    },
    "576": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "a#0",
        "len%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "len%0#0",
        "8"
      ]
    },
    "577": {
      "op": "==",
      "defined_out": [
        "a#0",
        "eq%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "eq%0#0"
      ]
    },
    "578": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0"
      ]
    },
    "579": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "tmp%1#0"
      ]
    },
    "582": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "583": {
      "op": "len",
      "defined_out": [
        "a#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "tmp%1#0",
        "len%1#0"
      ]
    },
    "584": {
      "op": "intc_3 // 8",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "tmp%1#0",
        "len%1#0",
        "8"
      ]
    },
    "585": {
      "op": "==",
      "defined_out": [
        "a#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "586": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "tmp%1#0"
      ]
    },
    "587": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0"
      ]
    },
    "588": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "tmp%3#0"
      ]
    },
    "591": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "592": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "0"
      ]
    },
    "593": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "a#0",
        "aggregate%array_length%0#0",
        "b#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "tmp%3#0",
        "aggregate%array_length%0#0"
      ]
    },
    "594": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "a#0",
        "aggregate%array_length%0#0",
        "b#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "tmp%3#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "595": {
      "op": "+",
      "defined_out": [
        "a#0",
        "add%0#0",
        "b#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "tmp%3#0",
        "add%0#0"
      ]
    },
    "596": {
      "op": "dig 1",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "tmp%3#0",
        "add%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "598": {
      "op": "len",
      "defined_out": [
        "a#0",
        "add%0#0",
        "b#0",
        "len%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "tmp%3#0",
        "add%0#0",
        "len%2#0"
      ]
    },
    "599": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "eq%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "tmp%3#0",
        "eq%2#0"
      ]
    },
    "600": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "tmp%3#0"
      ]
    },
    "601": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "604": {
      "op": "txna ApplicationArgs 4"
    },
    "607": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0"
      ]
    },
    "608": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "len%3#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "len%3#0"
      ]
    },
    "609": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "len%3#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "len%3#0",
        "16"
      ]
    },
    "611": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "eq%3#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "eq%3#0"
      ]
    },
    "612": {
      "error": "invalid number of bytes for test_cases.arc_56.contract.EventOnly",
      "op": "assert // invalid number of bytes for test_cases.arc_56.contract.EventOnly",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "613": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0"
      ]
    },
    "616": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "617": {
      "op": "intc_3 // 8",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "8"
      ]
    },
    "618": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "extract_uint16%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "extract_uint16%0#0"
      ]
    },
    "619": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)"
      ]
    },
    "620": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "extract_uint16%0#0",
        "extract_uint16%0#0 (copy)",
        "10"
      ]
    },
    "622": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "eq%4#0",
        "extract_uint16%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "extract_uint16%0#0",
        "eq%4#0"
      ]
    },
    "623": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]))",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "extract_uint16%0#0"
      ]
    },
    "624": {
      "op": "dig 1",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "extract_uint16%0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "626": {
      "op": "len",
      "defined_out": [
        "a#0",
        "aggregate%len%0#0",
        "b#0",
        "c#0",
        "d#0",
        "extract_uint16%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "627": {
      "op": "dig 2",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "extract_uint16%0#0",
        "aggregate%len%0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "629": {
      "op": "uncover 2",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "aggregate%len%0#0",
        "tmp%6#0 (copy)",
        "extract_uint16%0#0"
      ]
    },
    "631": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "aggregate%len%0#0",
        "aggregate%len%0#0 (copy)",
        "b#0",
        "c#0",
        "d#0",
        "extract_uint16%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "aggregate%len%0#0",
        "tmp%6#0 (copy)",
        "extract_uint16%0#0",
        "aggregate%len%0#0 (copy)"
      ]
    },
    "633": {
      "op": "substring3",
      "defined_out": [
        "a#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "634": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "635": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "0"
      ]
    },
    "636": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "a#0",
        "aggregate%array_length%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%array_length%1#0"
      ]
    },
    "637": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "a#0",
        "aggregate%array_length%1#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%array_length%1#0",
        "12"
      ]
    },
    "639": {
      "op": "+",
      "defined_out": [
        "a#0",
        "add%2#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "add%2#0"
      ]
    },
    "640": {
      "op": "uncover 2",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "aggregate%substring3%0#0",
        "add%2#0",
        "aggregate%len%0#0"
      ]
    },
    "642": {
      "op": "==",
      "defined_out": [
        "a#0",
        "aggregate%substring3%0#0",
        "b#0",
        "c#0",
        "d#0",
        "eq%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "aggregate%substring3%0#0",
        "eq%5#0"
      ]
    },
    "643": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.dynamic_array<arc4.uint8>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.dynamic_array<arc4.uint8>>",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "aggregate%substring3%0#0"
      ]
    },
    "644": {
      "op": "swap",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "aggregate%substring3%0#0",
        "tmp%6#0"
      ]
    },
    "645": {
      "op": "intc_0 // 0",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "aggregate%substring3%0#0",
        "tmp%6#0",
        "0"
      ]
    },
    "646": {
      "op": "extract_uint64",
      "defined_out": [
        "a#0",
        "aggregate%substring3%0#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "aggregate%substring3%0#0",
        "e.0#0"
      ]
    },
    "647": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "aggregate%substring3%0#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "648": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0"
      ]
    },
    "651": {
      "op": "txna ApplicationArgs 6"
    },
    "654": {
      "op": "pushint 4 // 4"
    },
    "656": {
      "op": "intc_0 // 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "657": {
      "block": "with_constant_defaults_for_header@1",
      "stack_in": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "index%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "658": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "index%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "2"
      ]
    },
    "659": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "continue_looping%0#0"
      ]
    },
    "660": {
      "op": "bz with_constant_defaults_after_for@4",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "663": {
      "op": "dupn 2",
      "defined_out": [
        "index%0#0",
        "index%0#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)"
      ]
    },
    "665": {
      "op": "intc_2 // 2",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "index%0#0 (copy)",
        "2"
      ]
    },
    "666": {
      "op": "*",
      "defined_out": [
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0"
      ]
    },
    "667": {
      "op": "dig 4",
      "defined_out": [
        "f#0",
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "head_offset_bytes%0#0",
        "f#0"
      ]
    },
    "669": {
      "op": "dup"
    },
    "670": {
      "op": "uncover 2",
      "defined_out": [
        "f#0",
        "f#0 (copy)",
        "head_offset_bytes%0#0",
        "index%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "f#0",
        "f#0 (copy)",
        "head_offset_bytes%0#0"
      ]
    },
    "672": {
      "error": "invalid array encoding",
      "op": "extract_uint16 // on error: invalid array encoding",
      "defined_out": [
        "f#0",
        "index%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "f#0",
        "item_offset%0#0"
      ]
    },
    "673": {
      "op": "dup",
      "defined_out": [
        "f#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "f#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)"
      ]
    },
    "674": {
      "op": "dig 5",
      "defined_out": [
        "f#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "f#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0"
      ]
    },
    "676": {
      "op": "dup",
      "defined_out": [
        "f#0",
        "index%0#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0",
        "num_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "f#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "677": {
      "op": "cover 4",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "f#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "num_bytes%0#0 (copy)"
      ]
    },
    "679": {
      "op": "==",
      "defined_out": [
        "f#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0",
        "offset_is_correct%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "f#0",
        "item_offset%0#0",
        "offset_is_correct%0#0"
      ]
    },
    "680": {
      "error": "invalid tail pointer for (len+utf8[])[2]",
      "op": "assert // invalid tail pointer for (len+utf8[])[2]",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "f#0",
        "item_offset%0#0"
      ]
    },
    "681": {
      "op": "dup2",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "f#0",
        "item_offset%0#0",
        "f#0 (copy)",
        "item_offset%0#0 (copy)"
      ]
    },
    "682": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_length%0#0",
        "f#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "f#0",
        "item_offset%0#0",
        "aggregate%item_length%0#0"
      ]
    },
    "683": {
      "op": "intc_2 // 2",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "f#0",
        "item_offset%0#0",
        "aggregate%item_length%0#0",
        "2"
      ]
    },
    "684": {
      "op": "+",
      "defined_out": [
        "aggregate%item_head_tail_length%0#0",
        "f#0",
        "index%0#0",
        "item_offset%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "f#0",
        "item_offset%0#0",
        "aggregate%item_head_tail_length%0#0"
      ]
    },
    "685": {
      "op": "extract3",
      "defined_out": [
        "aggregate%item%0#0",
        "f#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item%0#0"
      ]
    },
    "686": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%item%0#0",
        "f#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%item%0#0",
        "0"
      ]
    },
    "687": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%2#0",
        "f#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%array_length%2#0"
      ]
    },
    "688": {
      "op": "intc_2 // 2",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "aggregate%array_length%2#0",
        "2"
      ]
    },
    "689": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "f#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0",
        "add%3#0"
      ]
    },
    "690": {
      "op": "+",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "num_bytes%0#0"
      ]
    },
    "691": {
      "op": "bury 3",
      "defined_out": [
        "f#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "693": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "f#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0",
        "1"
      ]
    },
    "694": {
      "op": "+",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%0#0"
      ]
    },
    "695": {
      "op": "bury 1",
      "defined_out": [
        "f#0",
        "index%0#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "697": {
      "op": "b with_constant_defaults_for_header@1"
    },
    "700": {
      "block": "with_constant_defaults_after_for@4",
      "stack_in": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "f#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "f#0"
      ]
    },
    "702": {
      "op": "len",
      "defined_out": [
        "f#0",
        "len%5#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "len%5#0"
      ]
    },
    "703": {
      "op": "dig 2",
      "defined_out": [
        "f#0",
        "len%5#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "len%5#0",
        "num_bytes%0#0"
      ]
    },
    "705": {
      "op": "==",
      "defined_out": [
        "eq%6#0",
        "f#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "eq%6#0"
      ]
    },
    "706": {
      "error": "invalid number of bytes for arc4.static_array<arc4.dynamic_array<arc4.uint8>, 2>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.dynamic_array<arc4.uint8>, 2>",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "707": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "f#0",
        "g#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "g#0"
      ]
    },
    "710": {
      "op": "dup",
      "defined_out": [
        "f#0",
        "g#0",
        "g#0 (copy)",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "g#0",
        "g#0 (copy)"
      ]
    },
    "711": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "f#0",
        "g#0",
        "g#0 (copy)",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "g#0",
        "g#0 (copy)",
        "0"
      ]
    },
    "712": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0",
        "g#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "g#0",
        "aggregate%array_length%3#0"
      ]
    },
    "713": {
      "op": "dup",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "g#0",
        "aggregate%array_length%3#0",
        "aggregate%array_length%3#0"
      ]
    },
    "714": {
      "op": "bury 17",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0",
        "g#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "g#0",
        "aggregate%array_length%3#0"
      ]
    },
    "716": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%3#0",
        "f#0",
        "g#0",
        "num_bytes%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "g#0",
        "aggregate%array_length%3#0",
        "2"
      ]
    },
    "717": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0",
        "g#0",
        "num_bytes%0#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "g#0",
        "num_bytes%1#0"
      ]
    },
    "718": {
      "op": "bury 12",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0",
        "g#0",
        "num_bytes%0#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "g#0"
      ]
    },
    "720": {
      "op": "dup",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "g#0",
        "g#0 (copy)"
      ]
    },
    "721": {
      "op": "len",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0",
        "g#0",
        "num_bytes%0#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "g#0",
        "total_length%0#0"
      ]
    },
    "722": {
      "op": "bury 11",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0",
        "g#0",
        "num_bytes%0#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "g#0"
      ]
    },
    "724": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "f#0",
        "num_bytes%0#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "array_data%0#0"
      ]
    },
    "727": {
      "op": "bury 16",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "f#0",
        "num_bytes%0#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "729": {
      "op": "intc_0 // 0",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "f#0",
        "index%1#0",
        "num_bytes%0#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0"
      ]
    },
    "730": {
      "op": "bury 12",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "f#0",
        "index%1#0",
        "num_bytes%0#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "732": {
      "block": "with_constant_defaults_for_header@5",
      "stack_in": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "dig 11",
      "defined_out": [
        "index%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0"
      ]
    },
    "734": {
      "op": "dig 15",
      "defined_out": [
        "aggregate%array_length%3#0",
        "index%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "aggregate%array_length%3#0"
      ]
    },
    "736": {
      "op": "<",
      "defined_out": [
        "aggregate%array_length%3#0",
        "continue_looping%1#0",
        "index%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "continue_looping%1#0"
      ]
    },
    "737": {
      "op": "bz with_constant_defaults_after_for@8",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "740": {
      "op": "dig 11",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0"
      ]
    },
    "742": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%3#0",
        "index%1#0",
        "index%1#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "index%1#0 (copy)"
      ]
    },
    "743": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%3#0",
        "index%1#0",
        "index%1#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "index%1#0 (copy)",
        "2"
      ]
    },
    "744": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%3#0",
        "head_offset_bytes%1#0",
        "index%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "head_offset_bytes%1#0"
      ]
    },
    "745": {
      "op": "dig 17",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "head_offset_bytes%1#0",
        "index%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "head_offset_bytes%1#0",
        "array_data%0#0"
      ]
    },
    "747": {
      "op": "dup"
    },
    "748": {
      "op": "uncover 2",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "array_data%0#0 (copy)",
        "head_offset_bytes%1#0",
        "index%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "array_data%0#0",
        "array_data%0#0 (copy)",
        "head_offset_bytes%1#0"
      ]
    },
    "750": {
      "error": "invalid array encoding",
      "op": "extract_uint16 // on error: invalid array encoding",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "index%1#0",
        "item_offset%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "array_data%0#0",
        "item_offset%1#0"
      ]
    },
    "751": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "index%1#0",
        "item_offset%1#0",
        "item_offset%1#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "array_data%0#0",
        "item_offset%1#0",
        "item_offset%1#0 (copy)"
      ]
    },
    "752": {
      "op": "dig 14",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "index%1#0",
        "item_offset%1#0",
        "item_offset%1#0 (copy)",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "array_data%0#0",
        "item_offset%1#0",
        "item_offset%1#0 (copy)",
        "num_bytes%1#0"
      ]
    },
    "754": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "index%1#0",
        "item_offset%1#0",
        "item_offset%1#0 (copy)",
        "num_bytes%1#0",
        "num_bytes%1#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "array_data%0#0",
        "item_offset%1#0",
        "item_offset%1#0 (copy)",
        "num_bytes%1#0 (copy)",
        "num_bytes%1#0 (copy)"
      ]
    },
    "755": {
      "op": "cover 4",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0",
        "array_data%0#0",
        "item_offset%1#0",
        "item_offset%1#0 (copy)",
        "num_bytes%1#0 (copy)"
      ]
    },
    "757": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "index%1#0",
        "item_offset%1#0",
        "num_bytes%1#0",
        "offset_is_correct%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0",
        "array_data%0#0",
        "item_offset%1#0",
        "offset_is_correct%1#0"
      ]
    },
    "758": {
      "error": "invalid tail pointer for (len+(len+utf8[])[])",
      "op": "assert // invalid tail pointer for (len+(len+utf8[])[])",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0",
        "array_data%0#0",
        "item_offset%1#0"
      ]
    },
    "759": {
      "op": "dup2",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0",
        "array_data%0#0",
        "item_offset%1#0",
        "array_data%0#0 (copy)",
        "item_offset%1#0 (copy)"
      ]
    },
    "760": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%item_length%1#0",
        "array_data%0#0",
        "index%1#0",
        "item_offset%1#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0",
        "array_data%0#0",
        "item_offset%1#0",
        "aggregate%item_length%1#0"
      ]
    },
    "761": {
      "op": "intc_2 // 2",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0",
        "array_data%0#0",
        "item_offset%1#0",
        "aggregate%item_length%1#0",
        "2"
      ]
    },
    "762": {
      "op": "+",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%item_head_tail_length%1#0",
        "array_data%0#0",
        "index%1#0",
        "item_offset%1#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0",
        "array_data%0#0",
        "item_offset%1#0",
        "aggregate%item_head_tail_length%1#0"
      ]
    },
    "763": {
      "op": "extract3",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%item%1#0",
        "array_data%0#0",
        "index%1#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0",
        "aggregate%item%1#0"
      ]
    },
    "764": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%array_length%3#0",
        "aggregate%item%1#0",
        "array_data%0#0",
        "index%1#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0",
        "aggregate%item%1#0",
        "0"
      ]
    },
    "765": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%3#0",
        "aggregate%array_length%4#0",
        "array_data%0#0",
        "index%1#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0",
        "aggregate%array_length%4#0"
      ]
    },
    "766": {
      "op": "intc_2 // 2",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0",
        "aggregate%array_length%4#0",
        "2"
      ]
    },
    "767": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "index%1#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0",
        "add%4#0"
      ]
    },
    "768": {
      "op": "+",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "num_bytes%1#0"
      ]
    },
    "769": {
      "op": "bury 12",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "index%1#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0"
      ]
    },
    "771": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0",
        "1"
      ]
    },
    "772": {
      "op": "+",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "index%1#0"
      ]
    },
    "773": {
      "op": "bury 12",
      "defined_out": [
        "aggregate%array_length%3#0",
        "array_data%0#0",
        "index%1#0",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "775": {
      "op": "b with_constant_defaults_for_header@5"
    },
    "778": {
      "block": "with_constant_defaults_after_for@8",
      "stack_in": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "dig 10",
      "defined_out": [
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%1#0"
      ]
    },
    "780": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "num_bytes%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%1#0",
        "2"
      ]
    },
    "781": {
      "op": "+",
      "defined_out": [
        "num_bytes%1#0",
        "num_bytes%2#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%2#0"
      ]
    },
    "782": {
      "op": "dig 10",
      "defined_out": [
        "num_bytes%1#0",
        "num_bytes%2#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "num_bytes%2#0",
        "total_length%0#0"
      ]
    },
    "784": {
      "op": "==",
      "defined_out": [
        "eq%7#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "eq%7#0"
      ]
    },
    "785": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.dynamic_array<arc4.uint8>>",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "786": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "num_bytes%1#0",
        "tmp%14#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%14#0"
      ]
    },
    "789": {
      "op": "dup",
      "defined_out": [
        "num_bytes%1#0",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "790": {
      "op": "len",
      "defined_out": [
        "len%7#0",
        "num_bytes%1#0",
        "tmp%14#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%14#0",
        "len%7#0"
      ]
    },
    "791": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%7#0",
        "num_bytes%1#0",
        "tmp%14#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%14#0",
        "len%7#0",
        "8"
      ]
    },
    "792": {
      "op": "==",
      "defined_out": [
        "eq%8#0",
        "num_bytes%1#0",
        "tmp%14#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%14#0",
        "eq%8#0"
      ]
    },
    "793": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%14#0"
      ]
    },
    "794": {
      "op": "btoi",
      "defined_out": [
        "h#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "h#0"
      ]
    },
    "795": {
      "op": "bury 14",
      "defined_out": [
        "h#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "797": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "h#0",
        "num_bytes%1#0",
        "tmp%16#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%16#0"
      ]
    },
    "800": {
      "op": "dup",
      "defined_out": [
        "h#0",
        "num_bytes%1#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "801": {
      "op": "len",
      "defined_out": [
        "h#0",
        "len%8#0",
        "num_bytes%1#0",
        "tmp%16#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%16#0",
        "len%8#0"
      ]
    },
    "802": {
      "op": "intc_3 // 8",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%16#0",
        "len%8#0",
        "8"
      ]
    },
    "803": {
      "op": "==",
      "defined_out": [
        "eq%9#0",
        "h#0",
        "num_bytes%1#0",
        "tmp%16#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%16#0",
        "eq%9#0"
      ]
    },
    "804": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%16#0"
      ]
    },
    "805": {
      "op": "btoi",
      "defined_out": [
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "i#0"
      ]
    },
    "806": {
      "op": "bury 13",
      "defined_out": [
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "808": {
      "op": "dig 8",
      "defined_out": [
        "a#0",
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "a#0"
      ]
    },
    "810": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "a#0",
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "a#0",
        "0x"
      ]
    },
    "811": {
      "op": "b!=",
      "defined_out": [
        "a#0",
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "tmp%0#1",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%0#1"
      ]
    },
    "812": {
      "op": "assert",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "813": {
      "op": "dig 7",
      "defined_out": [
        "a#0",
        "b#0",
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "b#0"
      ]
    },
    "815": {
      "op": "assert",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "816": {
      "op": "dig 6",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "c#0"
      ]
    },
    "818": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "tmp%2#1",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%2#1"
      ]
    },
    "819": {
      "op": "assert",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "820": {
      "op": "dig 5",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "d#0"
      ]
    },
    "822": {
      "op": "extract 0 8",
      "defined_out": [
        "a#0",
        "aggregate%extract%1#0",
        "b#0",
        "c#0",
        "d#0",
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "825": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%extract%1#0",
        "0x"
      ]
    },
    "826": {
      "op": "b!=",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "tmp%4#1",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%4#1"
      ]
    },
    "827": {
      "op": "bnz with_constant_defaults_bool_true@11",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "830": {
      "op": "dig 5",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "d#0"
      ]
    },
    "832": {
      "op": "extract 8 8",
      "defined_out": [
        "a#0",
        "aggregate%extract%2#0",
        "b#0",
        "c#0",
        "d#0",
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%extract%2#0"
      ]
    },
    "835": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%extract%2#0",
        "0x"
      ]
    },
    "836": {
      "op": "b!=",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "h#0",
        "i#0",
        "num_bytes%1#0",
        "tmp%5#1",
        "total_length%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%5#1"
      ]
    },
    "837": {
      "op": "bz with_constant_defaults_bool_false@12",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "840": {
      "block": "with_constant_defaults_bool_true@11",
      "stack_in": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "or_result%0#0"
      ]
    },
    "841": {
      "block": "with_constant_defaults_bool_merge@13",
      "stack_in": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "842": {
      "op": "dig 4",
      "defined_out": [
        "e.0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "e.0#0"
      ]
    },
    "844": {
      "op": "bnz with_constant_defaults_bool_true@15",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "847": {
      "op": "dig 3",
      "defined_out": [
        "e.0#0",
        "e.1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "e.1#0"
      ]
    },
    "849": {
      "op": "len",
      "defined_out": [
        "e.0#0",
        "e.1#0",
        "tmp%7#1"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%7#1"
      ]
    },
    "850": {
      "op": "bz with_constant_defaults_bool_false@16",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "853": {
      "block": "with_constant_defaults_bool_true@15",
      "stack_in": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "or_result%1#0"
      ]
    },
    "854": {
      "block": "with_constant_defaults_bool_merge@17",
      "stack_in": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "or_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "855": {
      "op": "dig 2",
      "defined_out": [
        "f#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "f#0"
      ]
    },
    "857": {
      "op": "dup",
      "defined_out": [
        "f#0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "f#0",
        "f#0 (copy)"
      ]
    },
    "858": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "f#0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "f#0",
        "f#0 (copy)",
        "0"
      ]
    },
    "859": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_offset%2#0",
        "f#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "f#0",
        "aggregate%item_offset%2#0"
      ]
    },
    "860": {
      "op": "dup2",
      "defined_out": [
        "aggregate%item_offset%2#0",
        "aggregate%item_offset%2#0 (copy)",
        "f#0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "f#0",
        "aggregate%item_offset%2#0",
        "f#0 (copy)",
        "aggregate%item_offset%2#0 (copy)"
      ]
    },
    "861": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_length%2#0",
        "aggregate%item_offset%2#0",
        "f#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "f#0",
        "aggregate%item_offset%2#0",
        "aggregate%item_length%2#0"
      ]
    },
    "862": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%item_length%2#0",
        "aggregate%item_offset%2#0",
        "f#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "f#0",
        "aggregate%item_offset%2#0",
        "aggregate%item_length%2#0",
        "2"
      ]
    },
    "863": {
      "op": "+",
      "defined_out": [
        "aggregate%item_head_tail_length%2#0",
        "aggregate%item_offset%2#0",
        "f#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "f#0",
        "aggregate%item_offset%2#0",
        "aggregate%item_head_tail_length%2#0"
      ]
    },
    "864": {
      "op": "extract3",
      "defined_out": [
        "aggregate%item%2#0",
        "f#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%item%2#0"
      ]
    },
    "865": {
      "op": "pushbytes 0x00026869",
      "defined_out": [
        "0x00026869",
        "aggregate%item%2#0",
        "f#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%item%2#0",
        "0x00026869"
      ]
    },
    "871": {
      "op": "==",
      "defined_out": [
        "f#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%10#1"
      ]
    },
    "872": {
      "op": "assert",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "873": {
      "op": "dig 14",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%3#0"
      ]
    },
    "875": {
      "op": "intc_2 // 2",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "aggregate%array_length%3#0",
        "2"
      ]
    },
    "876": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0",
        "tmp%12#1"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%12#1"
      ]
    },
    "877": {
      "op": "assert",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "878": {
      "op": "dig 13",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0",
        "h#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "h#0"
      ]
    },
    "880": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "aggregate%array_length%3#0",
        "f#0",
        "h#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "h#0",
        "42"
      ]
    },
    "882": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0",
        "h#0",
        "tmp%13#1"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%13#1"
      ]
    },
    "883": {
      "op": "assert",
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "884": {
      "op": "dig 12",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "i#0"
      ]
    },
    "886": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "aggregate%array_length%3#0",
        "f#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "i#0",
        "1234"
      ]
    },
    "889": {
      "op": "==",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0",
        "h#0",
        "i#0",
        "tmp%14#1"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "tmp%14#1"
      ]
    },
    "890": {
      "op": "return",
      "defined_out": [
        "aggregate%array_length%3#0",
        "f#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ]
    },
    "891": {
      "block": "with_constant_defaults_bool_false@16",
      "stack_in": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "or_result%1#0"
      ]
    },
    "892": {
      "op": "b with_constant_defaults_bool_merge@17"
    },
    "895": {
      "block": "with_constant_defaults_bool_false@12",
      "stack_in": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "aggregate%array_length%3#0",
        "h#0",
        "i#0",
        "index%1#0",
        "num_bytes%1#0",
        "total_length%0#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "num_bytes%0#0",
        "index%0#0",
        "or_result%0#0"
      ]
    },
    "896": {
      "op": "b with_constant_defaults_bool_merge@13"
    }
  }
}