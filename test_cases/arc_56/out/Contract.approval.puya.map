{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;AA8EK;;AAAA;AAAA;AAAA;;AAAA;AA9EL;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AA8EK;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAMO;AADA;AADA;;AADA;;AAHP;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA5DL;;;AAAA;AAAA;AA4DK;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA9CL;;;AA8CK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAzCL;;;AAyCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAnCL;;;AAAA;;;AAmCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA3BL;;AAAA;;;;;;;;;;;;;;AAAA;;;AA+BK;;AAAA;AAAA;AAAA;;AARA;;AAYL;;;AAGe;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AACO;AAAP;AAER;;;AAEe;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AACP;AAER;;;AAEe;;AAAA;;;AAAe;;;AAAf;AAAP;;AAIA;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAMR;;;AAEA;;AAAA;;;AACY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAeZ;;;AAyBe;;AAAA;AAAA;AAAP;AACA;;AAAA;AACO;;AAAA;AAAP;AACO;;AAAA;;;AAAA;AAAA;AAAA;;;AAAO;;AAAA;;;AAAA;AAAA;AAAP;;;;AAAP;AACO;;AAAA;;;AAAQ;;AAAA;AAAR;;;;AAAP;AACO;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAQ;;;;;;AAAR;AAAP;AACO;;AAAA;AAAA;AAAY;;AAAZ;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAK;;;AAAL;AAAP;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 10 42 TMPL_AVM_UINT64"
    },
    "8": {
      "op": "bytecblock 0x151f7c75 0x TMPL_ARC4_UINT8 TMPL_AVM_STRING TMPL_STRUCT"
    },
    "32": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "34": {
      "op": "bz main_bare_routing@13",
      "stack_out": []
    },
    "37": {
      "op": "pushbytess 0x4c5c61ba 0x97e8e4a7 0x76c4de11 0xc1ca7709 0x6de762c2 0x59fc5282 0x9d9eecb0 0x5e8eef9a // method \"create()void\", method \"struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64\", method \"struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)\", method \"emits_error((uint64,string,(byte[],uint8)))void\", method \"emitter()void\", method \"conditional_emit(bool)void\", method \"template_value()((byte[],uint8),uint64,string,uint8)\", method \"with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)"
      ]
    },
    "79": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%2#0"
      ]
    },
    "82": {
      "op": "match main_create_route@5 main_struct_arg_route@6 main_struct_return_route@7 main_emits_error_route@8 main_emitter_route@9 main_conditional_emit_route@10 main_template_value_route@11 main_with_constant_defaults_route@12",
      "stack_out": []
    },
    "100": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "101": {
      "block": "main_with_constant_defaults_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "103": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "104": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "105": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "107": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "108": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "111": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "114": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0"
      ]
    },
    "115": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "118": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "121": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "124": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "127": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "128": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "129": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "130": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "132": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "8"
      ]
    },
    "134": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "135": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "137": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%item0%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "138": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "140": {
      "op": "cover 2",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "142": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "143": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "146": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0"
      ]
    },
    "149": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0"
      ]
    },
    "152": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "155": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0"
      ]
    },
    "156": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0",
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "159": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0",
        "tmp%51#0"
      ]
    },
    "160": {
      "callsub": "test_cases.arc_56.contract.Contract.with_constant_defaults",
      "op": "callsub with_constant_defaults",
      "stack_out": []
    },
    "163": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "164": {
      "op": "return",
      "stack_out": []
    },
    "165": {
      "block": "main_template_value_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "167": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "168": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "169": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "171": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "172": {
      "op": "bytec_2 // TMPL_ARC4_UINT8",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "173": {
      "op": "bytec_3 // TMPL_AVM_STRING",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0"
      ]
    },
    "174": {
      "op": "intc 4 // TMPL_AVM_UINT64",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0"
      ]
    },
    "176": {
      "op": "bytec 4 // TMPL_STRUCT",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0"
      ]
    },
    "178": {
      "op": "dup",
      "defined_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ]
    },
    "179": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%data_length%0#0"
      ]
    },
    "180": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "aggregate%data_length%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%data_length%0#0",
        "13"
      ]
    },
    "182": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "183": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%37#0"
      ]
    },
    "185": {
      "op": "itob",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "186": {
      "op": "pushbytes 0x000d",
      "defined_out": [
        "0x000d",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%val_as_bytes%1#0",
        "0x000d"
      ]
    },
    "190": {
      "op": "swap",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#0",
        "0x000d",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "191": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0"
      ]
    },
    "192": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%38#0 (copy)",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%38#0 (copy)"
      ]
    },
    "194": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0"
      ]
    },
    "195": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "196": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "199": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%38#0"
      ]
    },
    "201": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%36#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "202": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "204": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%36#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "205": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%36#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "208": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%encoded_value%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%1#0"
      ]
    },
    "210": {
      "op": "swap",
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "211": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "tmp%36#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0"
      ]
    },
    "212": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%36#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "tmp%39#0"
      ]
    },
    "214": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0"
      ]
    },
    "215": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "tmp%36#0"
      ]
    },
    "217": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "218": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "219": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "220": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "0x151f7c75"
      ]
    },
    "221": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ]
    },
    "222": {
      "op": "concat",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "223": {
      "op": "log",
      "stack_out": []
    },
    "224": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "225": {
      "op": "return",
      "stack_out": []
    },
    "226": {
      "block": "main_conditional_emit_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "228": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "229": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "230": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "232": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "233": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "236": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "237": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%0#0"
      ],
      "stack_out": [
        "aggregate%get_bit%0#0"
      ]
    },
    "238": {
      "callsub": "test_cases.arc_56.contract.Contract.conditional_emit",
      "op": "callsub conditional_emit",
      "stack_out": []
    },
    "241": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "242": {
      "op": "return",
      "stack_out": []
    },
    "243": {
      "block": "main_emitter_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "245": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "246": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "247": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "249": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "250": {
      "callsub": "test_cases.arc_56.contract.Contract.emitter",
      "op": "callsub emitter"
    },
    "253": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "254": {
      "op": "return",
      "stack_out": []
    },
    "255": {
      "block": "main_emits_error_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "257": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "258": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "259": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "261": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "262": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%2#0"
      ]
    },
    "265": {
      "callsub": "test_cases.arc_56.contract.Contract.errors",
      "op": "callsub errors",
      "stack_out": []
    },
    "268": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "269": {
      "op": "return",
      "stack_out": []
    },
    "270": {
      "block": "main_struct_return_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "272": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "273": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "274": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "276": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "277": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%1#0"
      ]
    },
    "280": {
      "callsub": "test_cases.arc_56.contract.Contract.struct_return",
      "op": "callsub struct_return",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "283": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "284": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%17#0"
      ]
    },
    "285": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "286": {
      "op": "log",
      "stack_out": []
    },
    "287": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "288": {
      "op": "return",
      "stack_out": []
    },
    "289": {
      "block": "main_struct_arg_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "291": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "292": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "293": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "295": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "296": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ]
    },
    "299": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded((len+uint8[]),uint8)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0",
        "reinterpret_Encoded((len+uint8[]),uint8)%0#0"
      ]
    },
    "302": {
      "callsub": "test_cases.arc_56.contract.Contract.struct_arg",
      "op": "callsub struct_arg",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "305": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "306": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "307": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "308": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "309": {
      "op": "log",
      "stack_out": []
    },
    "310": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "311": {
      "op": "return",
      "stack_out": []
    },
    "312": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "313": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "1",
        "tmp%3#0"
      ]
    },
    "315": {
      "op": "shl",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "316": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "3"
      ]
    },
    "318": {
      "op": "&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "319": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "320": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "321": {
      "op": "return",
      "stack_out": []
    },
    "322": {
      "block": "main_bare_routing@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "324": {
      "op": "switch main_bare_create@14 main_bare_create@14 main_after_if_else@16 main_after_if_else@16 main_after_if_else@16 main_transient@15",
      "stack_out": []
    },
    "338": {
      "op": "b main_after_if_else@16"
    },
    "341": {
      "block": "main_transient@15",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "343": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "344": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "345": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "346": {
      "op": "return",
      "stack_out": []
    },
    "347": {
      "block": "main_bare_create@14",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "348": {
      "op": "return",
      "stack_out": []
    },
    "349": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_arg",
      "params": {
        "arg#0": "bytes",
        "shared#0": "bytes"
      },
      "block": "struct_arg",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "352": {
      "op": "frame_dig -2",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "354": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "10"
      ]
    },
    "355": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0"
      ]
    },
    "356": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "arg#0 (copy)"
      ]
    },
    "358": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "359": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "arg#0 (copy)"
      ]
    },
    "361": {
      "op": "cover 2",
      "stack_out": [
        "arg#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "363": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%0#0"
      ]
    },
    "364": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%substring3%0#0",
        "shared#0 (copy)"
      ],
      "stack_out": [
        "aggregate%substring3%0#0",
        "shared#0 (copy)"
      ]
    },
    "366": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "367": {
      "error": "this might error",
      "op": "assert // this might error",
      "stack_out": []
    },
    "368": {
      "op": "intc_3 // 42",
      "defined_out": [
        "42"
      ],
      "stack_out": [
        "42"
      ]
    },
    "369": {
      "retsub": true,
      "op": "retsub"
    },
    "370": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_return",
      "params": {
        "arg#0": "bytes"
      },
      "block": "struct_return",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "373": {
      "op": "frame_dig -1",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "375": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "10"
      ]
    },
    "376": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0"
      ]
    },
    "377": {
      "op": "frame_dig -1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "arg#0 (copy)"
      ]
    },
    "379": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "380": {
      "op": "frame_dig -1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "arg#0 (copy)"
      ]
    },
    "382": {
      "op": "cover 2",
      "stack_out": [
        "arg#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "384": {
      "op": "substring3",
      "defined_out": [
        "s#0"
      ],
      "stack_out": [
        "s#0"
      ]
    },
    "385": {
      "retsub": true,
      "op": "retsub"
    },
    "386": {
      "subroutine": "test_cases.arc_56.contract.Contract.errors",
      "params": {
        "arg#0": "bytes"
      },
      "block": "errors",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "389": {
      "op": "frame_dig -1",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "391": {
      "op": "extract 0 8",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "394": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "0x00"
      ]
    },
    "397": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "398": {
      "error": "this will error",
      "op": "assert // this will error",
      "stack_out": []
    },
    "399": {
      "retsub": true,
      "op": "retsub"
    },
    "400": {
      "subroutine": "test_cases.arc_56.contract.Contract.emitter",
      "params": {},
      "block": "emitter",
      "stack_in": [],
      "op": "pushbytes 0xd93f374e00032a000668656c6c6f31",
      "defined_out": [
        "0xd93f374e00032a000668656c6c6f31"
      ],
      "stack_out": [
        "0xd93f374e00032a000668656c6c6f31"
      ]
    },
    "417": {
      "op": "log",
      "stack_out": []
    },
    "418": {
      "op": "pushbytes 0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32",
      "defined_out": [
        "0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32"
      ],
      "stack_out": [
        "0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32"
      ]
    },
    "446": {
      "op": "log",
      "stack_out": []
    },
    "447": {
      "retsub": true,
      "op": "retsub"
    },
    "448": {
      "subroutine": "test_cases.arc_56.contract.Contract.conditional_emit",
      "params": {
        "should_emit#0": "uint64"
      },
      "block": "conditional_emit",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "451": {
      "op": "frame_dig -1",
      "defined_out": [
        "should_emit#0 (copy)"
      ],
      "stack_out": [
        "should_emit#0 (copy)"
      ]
    },
    "453": {
      "op": "bz conditional_emit_after_if_else@2",
      "stack_out": []
    },
    "456": {
      "op": "pushbytes 0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33",
      "defined_out": [
        "0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33"
      ],
      "stack_out": [
        "0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33"
      ]
    },
    "491": {
      "op": "log",
      "stack_out": []
    },
    "492": {
      "block": "conditional_emit_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "493": {
      "subroutine": "test_cases.arc_56.contract.Contract.with_constant_defaults",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64",
        "c#0": "bytes",
        "d#0": "bytes",
        "e.0#0": "uint64",
        "e.1#0": "bytes",
        "f#0": "bytes",
        "g#0": "bytes",
        "h#0": "uint64",
        "i#0": "uint64"
      },
      "block": "with_constant_defaults",
      "stack_in": [],
      "op": "proto 10 0"
    },
    "496": {
      "op": "frame_dig -10",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "498": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x"
      ]
    },
    "499": {
      "op": "b!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "500": {
      "op": "assert",
      "stack_out": []
    },
    "501": {
      "op": "frame_dig -9",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "503": {
      "op": "assert",
      "stack_out": []
    },
    "504": {
      "op": "frame_dig -8",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "c#0 (copy)"
      ]
    },
    "506": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "507": {
      "op": "assert",
      "stack_out": []
    },
    "508": {
      "op": "frame_dig -7",
      "defined_out": [
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0 (copy)"
      ]
    },
    "510": {
      "op": "extract 0 8",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "513": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "aggregate%extract%0#0",
        "0x"
      ]
    },
    "514": {
      "op": "b!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "515": {
      "op": "bnz with_constant_defaults_bool_true@2",
      "stack_out": []
    },
    "518": {
      "op": "frame_dig -7",
      "stack_out": [
        "d#0 (copy)"
      ]
    },
    "520": {
      "op": "extract 8 8",
      "defined_out": [
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0"
      ]
    },
    "523": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "aggregate%extract%1#0",
        "0x"
      ]
    },
    "524": {
      "op": "b!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "525": {
      "op": "bz with_constant_defaults_bool_false@3",
      "stack_out": []
    },
    "528": {
      "block": "with_constant_defaults_bool_true@2",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "529": {
      "block": "with_constant_defaults_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "530": {
      "op": "frame_dig -6",
      "defined_out": [
        "e.0#0 (copy)"
      ],
      "stack_out": [
        "e.0#0 (copy)"
      ]
    },
    "532": {
      "op": "bnz with_constant_defaults_bool_true@6",
      "stack_out": []
    },
    "535": {
      "op": "frame_dig -5",
      "defined_out": [
        "e.1#0 (copy)"
      ],
      "stack_out": [
        "e.1#0 (copy)"
      ]
    },
    "537": {
      "op": "len",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "538": {
      "op": "bz with_constant_defaults_bool_false@7",
      "stack_out": []
    },
    "541": {
      "block": "with_constant_defaults_bool_true@6",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%1#0"
      ]
    },
    "542": {
      "block": "with_constant_defaults_bool_merge@8",
      "stack_in": [
        "or_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "543": {
      "op": "frame_dig -4",
      "defined_out": [
        "f#0 (copy)"
      ],
      "stack_out": [
        "f#0 (copy)"
      ]
    },
    "545": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "f#0 (copy)",
        "0"
      ]
    },
    "546": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_offset%0#0"
      ],
      "stack_out": [
        "aggregate%item_offset%0#0"
      ]
    },
    "547": {
      "op": "frame_dig -4",
      "stack_out": [
        "aggregate%item_offset%0#0",
        "f#0 (copy)"
      ]
    },
    "549": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%item_offset%0#0",
        "aggregate%item_offset%0#0 (copy)",
        "f#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item_offset%0#0",
        "f#0 (copy)",
        "aggregate%item_offset%0#0 (copy)"
      ]
    },
    "551": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_length%0#0",
        "aggregate%item_offset%0#0"
      ],
      "stack_out": [
        "aggregate%item_offset%0#0",
        "aggregate%item_length%0#0"
      ]
    },
    "552": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%item_length%0#0",
        "aggregate%item_offset%0#0"
      ],
      "stack_out": [
        "aggregate%item_offset%0#0",
        "aggregate%item_length%0#0",
        "2"
      ]
    },
    "554": {
      "op": "+",
      "defined_out": [
        "aggregate%item_head_tail_length%0#0",
        "aggregate%item_offset%0#0"
      ],
      "stack_out": [
        "aggregate%item_offset%0#0",
        "aggregate%item_head_tail_length%0#0"
      ]
    },
    "555": {
      "op": "frame_dig -4",
      "stack_out": [
        "aggregate%item_offset%0#0",
        "aggregate%item_head_tail_length%0#0",
        "f#0 (copy)"
      ]
    },
    "557": {
      "op": "cover 2",
      "stack_out": [
        "f#0 (copy)",
        "aggregate%item_offset%0#0",
        "aggregate%item_head_tail_length%0#0"
      ]
    },
    "559": {
      "op": "extract3",
      "defined_out": [
        "aggregate%item%0#0"
      ],
      "stack_out": [
        "aggregate%item%0#0"
      ]
    },
    "560": {
      "op": "pushbytes 0x00026869",
      "defined_out": [
        "0x00026869",
        "aggregate%item%0#0"
      ],
      "stack_out": [
        "aggregate%item%0#0",
        "0x00026869"
      ]
    },
    "566": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "567": {
      "op": "assert",
      "stack_out": []
    },
    "568": {
      "op": "frame_dig -3",
      "defined_out": [
        "g#0 (copy)"
      ],
      "stack_out": [
        "g#0 (copy)"
      ]
    },
    "570": {
      "op": "intc_1 // 0",
      "stack_out": [
        "g#0 (copy)",
        "0"
      ]
    },
    "571": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0"
      ],
      "stack_out": [
        "aggregate%array_length%0#0"
      ]
    },
    "572": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "574": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "575": {
      "op": "assert",
      "stack_out": []
    },
    "576": {
      "op": "frame_dig -2",
      "defined_out": [
        "h#0 (copy)"
      ],
      "stack_out": [
        "h#0 (copy)"
      ]
    },
    "578": {
      "op": "intc_3 // 42",
      "defined_out": [
        "42",
        "h#0 (copy)"
      ],
      "stack_out": [
        "h#0 (copy)",
        "42"
      ]
    },
    "579": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "580": {
      "op": "assert",
      "stack_out": []
    },
    "581": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0 (copy)"
      ]
    },
    "583": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0 (copy)",
        "1234"
      ]
    },
    "586": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "587": {
      "op": "assert",
      "stack_out": []
    },
    "588": {
      "retsub": true,
      "op": "retsub"
    },
    "589": {
      "block": "with_constant_defaults_bool_false@7",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%1#0"
      ]
    },
    "590": {
      "op": "b with_constant_defaults_bool_merge@8"
    },
    "593": {
      "block": "with_constant_defaults_bool_false@3",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "594": {
      "op": "b with_constant_defaults_bool_merge@4"
    }
  }
}