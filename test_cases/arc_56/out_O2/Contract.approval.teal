#pragma version 10

test_cases.arc_56.contract.Contract.approval_program:
    intcblock 1 0 10 TMPL_AVM_UINT64
    bytecblock 0x151f7c75 TMPL_STRUCT TMPL_AVM_STRING TMPL_ARC4_UINT8
    callsub __puya_arc4_router__
    return


// test_cases.arc_56.contract.Contract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@11
    pushbytess 0x4c5c61ba 0x97e8e4a7 0x76c4de11 0xc1ca7709 0x6de762c2 0x59fc5282 0x9d9eecb0 // method "create()void", method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64", method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)", method "emits_error((uint64,string,(byte[],uint8)))void", method "emitter()void", method "conditional_emit(bool)void", method "template_value()((byte[],uint8),uint64,string,uint8)"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_route@2 __puya_arc4_router___struct_arg_route@3 __puya_arc4_router___struct_return_route@4 __puya_arc4_router___emits_error_route@5 __puya_arc4_router___emitter_route@6 __puya_arc4_router___conditional_emit_route@7 __puya_arc4_router___template_value_route@8
    intc_1 // 0
    retsub

__puya_arc4_router___create_route@2:
    intc_0 // 1
    txn OnCompletion
    shl
    pushint 3 // 3
    &
    assert // OnCompletion is not one of NoOp, OptIn
    intc_0 // 1
    retsub

__puya_arc4_router___struct_arg_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    callsub struct_arg
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___struct_return_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    callsub struct_return
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___emits_error_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    callsub errors
    intc_0 // 1
    retsub

__puya_arc4_router___emitter_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub emitter
    intc_0 // 1
    retsub

__puya_arc4_router___conditional_emit_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    intc_1 // 0
    getbit
    callsub conditional_emit
    intc_0 // 1
    retsub

__puya_arc4_router___template_value_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub template_value
    uncover 2
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    dig 3
    len
    pushint 13 // 13
    +
    pushbytes 0x000d
    uncover 3
    concat
    swap
    itob
    extract 6 2
    concat
    uncover 2
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___bare_routing@11:
    txn OnCompletion
    switch __puya_arc4_router___bare_create@12 __puya_arc4_router___bare_create@12 __puya_arc4_router___after_if_else@16 __puya_arc4_router___after_if_else@16 __puya_arc4_router___after_if_else@16 __puya_arc4_router___transient@13
    intc_1 // 0
    retsub

__puya_arc4_router___bare_create@12:
    intc_0 // 1
    retsub

__puya_arc4_router___transient@13:
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@16:
    intc_1 // 0
    retsub


// test_cases.arc_56.contract.Contract.struct_arg(arg: bytes, shared: bytes) -> uint64:
struct_arg:
    proto 2 1
    frame_dig -2
    intc_2 // 10
    extract_uint16
    frame_dig -2
    len
    frame_dig -2
    cover 2
    substring3
    frame_dig -1
    ==
    assert // this might error
    pushint 42 // 42
    retsub


// test_cases.arc_56.contract.Contract.struct_return(arg: bytes) -> bytes:
struct_return:
    proto 1 1
    frame_dig -1
    intc_2 // 10
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    cover 2
    substring3
    dup
    callsub echo
    pop
    dig 1
    ==
    assert // this won't error
    retsub


// test_cases.arc_56.contract.echo(s: bytes) -> bytes, bytes:
echo:
    proto 1 2
    frame_dig -1
    dup
    retsub


// test_cases.arc_56.contract.Contract.errors(arg: bytes) -> void:
errors:
    proto 1 0
    frame_dig -1
    extract 0 8 // on error: Index access is out of bounds
    pushbytes 0x00
    ==
    assert // this will error
    retsub


// test_cases.arc_56.contract.Contract.emitter() -> void:
emitter:
    proto 0 0
    pushbytess 0xd93f374e 0x00032a000668656c6c6f31 // method "SharedStruct(byte[],uint8)", 0x00032a000668656c6c6f31
    concat
    log
    pushbytess 0x1e72af4e 0x0004000b000568656c6c6f00032a000668656c6c6f32 // method "Anonymous(string,(byte[],uint8))", 0x0004000b000568656c6c6f00032a000668656c6c6f32
    concat
    log
    retsub


// test_cases.arc_56.contract.Contract.conditional_emit(should_emit: uint64) -> void:
conditional_emit:
    proto 1 0
    frame_dig -1
    bz conditional_emit_after_if_else@2
    pushbytess 0x11c547ba 0x000000000000002a000000000000002b001200032a000668656c6c6f33 // method "Anonymous2((uint64,uint64),(byte[],uint8))", 0x000000000000002a000000000000002b001200032a000668656c6c6f33
    concat
    log

conditional_emit_after_if_else@2:
    retsub


// test_cases.arc_56.contract.Contract.template_value() -> bytes, uint64, bytes, bytes:
template_value:
    proto 0 4
    bytec_1 // TMPL_STRUCT
    intc_3 // TMPL_AVM_UINT64
    bytec_2 // TMPL_AVM_STRING
    bytec_3 // TMPL_ARC4_UINT8
    retsub
