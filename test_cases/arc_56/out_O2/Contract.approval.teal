#pragma version 10
#pragma typetrack false

// test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 10 TMPL_AVM_UINT64
    bytecblock 0x151f7c75 TMPL_ARC4_UINT8 TMPL_STRUCT TMPL_AVM_STRING
    txn NumAppArgs
    bz main_bare_routing@14
    pushbytess 0x4c5c61ba 0x97e8e4a7 0x76c4de11 0xc1ca7709 0x6de762c2 0x59fc5282 0x9d9eecb0 // method "create()void", method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64", method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)", method "emits_error((uint64,string,(byte[],uint8)))void", method "emitter()void", method "conditional_emit(bool)void", method "template_value()((byte[],uint8),uint64,string,uint8)"
    txna ApplicationArgs 0
    match main_create_route@5 main_struct_arg_route@6 main_struct_return_route@7 main_emits_error_route@8 main_emitter_route@9 main_conditional_emit_route@10 main_template_value_route@13

main_after_if_else@17:
    intc_1 // 0
    return

main_template_value_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_1 // TMPL_ARC4_UINT8
    bytec_2 // TMPL_STRUCT
    bytec_3 // TMPL_AVM_STRING
    intc_3 // TMPL_AVM_UINT64
    itob
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dig 2
    len
    pushint 13 // 13
    +
    pushbytes 0x000d
    uncover 3
    concat
    swap
    itob
    extract 6 2
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_conditional_emit_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    intc_1 // 0
    getbit
    bz main_after_if_else@12
    pushbytes 0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33
    log

main_after_if_else@12:
    intc_0 // 1
    return

main_emitter_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0xd93f374e00032a000668656c6c6f31
    log
    pushbytes 0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32
    log
    intc_0 // 1
    return

main_emits_error_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    extract 0 8 // on error: Index access is out of bounds
    pushbytes 0x00
    ==
    assert // this will error
    intc_0 // 1
    return

main_struct_return_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    intc_2 // 10
    extract_uint16
    dig 1
    len
    substring3
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_struct_arg_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    dig 1
    intc_2 // 10
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    ==
    assert // this might error
    pushbytes 0x151f7c75000000000000002a
    log
    intc_0 // 1
    return

main_create_route@5:
    intc_0 // 1
    txn OnCompletion
    shl
    pushint 3 // 3
    &
    assert // OnCompletion is not one of NoOp, OptIn
    intc_0 // 1
    return

main_bare_routing@14:
    txn OnCompletion
    switch main_after_if_else@12 main_after_if_else@12 main_after_if_else@17 main_after_if_else@17 main_after_if_else@17 main_transient@16
    b main_after_if_else@17

main_transient@16:
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
