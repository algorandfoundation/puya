main test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@15
    block@4: // abi_routing_L54
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@5, * => block@6}
    block@5: // create_route_L81
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: uint64 = (shl 1u tmp%3#0)
        let tmp%5#0: uint64 = (& tmp%4#0 3u)
        (assert tmp%5#0) // OnCompletion must be one of NoOp, OptIn
        exit 1u
    block@6: // switch_case_next_L54
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // OnCompletion must be NoOp
        let tmp%8#0: uint64 = (txn ApplicationID)
        (assert tmp%8#0)
        let tmp%10#0: bytes = (txna ApplicationArgs 0)
        switch tmp%10#0 {method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64" => block@8, method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)" => block@9, method "emits_error((uint64,string,(byte[],uint8)))void" => block@10, method "emitter()void" => block@11, method "conditional_emit(bool)void" => block@12, method "template_value()((byte[],uint8),uint64,string,uint8)" => block@13, method "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void" => block@14, * => block@18}
    block@8: // struct_arg_route_L89
        let arg#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let shared#0: Encoded((len+uint8[]),uint8) = (txna ApplicationArgs 2)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%0#0: uint64 = (len arg#0)
        let aggregate%substring3%0#0: bytes = (substring3 arg#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%0#8: bool = (== aggregate%substring3%0#0 shared#0)
        (assert tmp%0#8) // this might error
        (log 0x151f7c75000000000000002a)
        exit 1u
    block@9: // struct_return_route_L95
        let arg#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%1#0: uint64 = (len arg#0)
        let s#0: Encoded((len+uint8[]),uint8) = (substring3 arg#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let tmp%1#3: bytes = (concat 0x151f7c75 s#0)
        (log tmp%1#3)
        exit 1u
    block@10: // emits_error_route_L100
        let arg#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = ((extract 0 8) arg#0)
        let tmp%0#8: bool = (== aggregate%extract%0#0 0x00)
        (assert tmp%0#8) // this will error
        exit 1u
    block@11: // emitter_route_L104
        (log 0xd93f374e00032a000668656c6c6f31)
        (log 0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32)
        exit 1u
    block@12: // conditional_emit_route_L114
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let should_emit#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        goto should_emit#0 ? block@32 : block@33
    block@32: // if_body_L117
        (log 0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33)
        goto block@33
    block@33: // after_if_else_L116
        exit 1u
    block@13: // template_value_route_L123
        let tmp%0#4: Encoded((len+uint8[]),uint8) = TemplateVar[Encoded((len+uint8[]),uint8)](TMPL_STRUCT)
        let tmp%1#2: uint64 = TemplateVar[uint64](TMPL_AVM_UINT64)
        let tmp%2#2: string = TemplateVar[string](TMPL_AVM_STRING)
        let tmp%3#2: Encoded(uint8) = TemplateVar[Encoded(uint8)](TMPL_ARC4_UINT8)
        let aggregate%data_length%6#0: uint64 = (len tmp%0#4)
        let aggregate%current_tail_offset%6#0: uint64 = (+ 13u aggregate%data_length%6#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%1#2)
        let aggregate%head%13#0: bytes = (concat 0x000d aggregate%val_as_bytes%1#0)
        let aggregate%length%4#0: uint64 = (len tmp%2#2)
        let aggregate%as_bytes%11#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%11#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 tmp%2#2)
        let aggregate%as_bytes%12#0: bytes[8] = (itob aggregate%current_tail_offset%6#0)
        let aggregate%offset_as_uint16%7#0: bytes = ((extract 6 2) aggregate%as_bytes%12#0)
        let aggregate%head%14#0: bytes = (concat aggregate%head%13#0 aggregate%offset_as_uint16%7#0)
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 tmp%3#2)
        let aggregate%concat%6#0: bytes = (concat aggregate%head%15#0 tmp%0#4)
        let aggregate%concat%7#0: bytes = (concat aggregate%concat%6#0 aggregate%encoded_value%4#0)
        let tmp%5#2: bytes = (concat 0x151f7c75 aggregate%concat%7#0)
        (log tmp%5#2)
        exit 1u
    block@14: // with_constant_defaults_route_L132
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let b#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let c#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let d#0: Encoded(uint64,uint64) = (txna ApplicationArgs 4)
        let reinterpret_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 5)
        let e.0#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 0u)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 8u)
        let aggregate%len%2#0: uint64 = (len reinterpret_Encoded(uint64,(len+utf8[]))%0#0)
        let aggregate%substring3%2#0: bytes = (substring3 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 aggregate%extract_uint16%2#0 aggregate%len%2#0)
        let e.1#0: string = ((extract 2 0) aggregate%substring3%2#0)
        let f#0: Encoded((len+utf8[])[2]) = (txna ApplicationArgs 6)
        let g#0: Encoded(len+(len+utf8[])[]) = (txna ApplicationArgs 7)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let h#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let i#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let tmp%0#8: bool = (b!= a#0 0b)
        (assert tmp%0#8)
        (assert b#0)
        let tmp%2#4: uint64 = (len c#0)
        (assert tmp%2#4)
        let aggregate%extract%2#0: bytes = ((extract 0 8) d#0)
        let tmp%4#3: bool = (b!= aggregate%extract%2#0 0b)
        goto tmp%4#3 ? block@21 : block@20
    block@20: // or_contd_L160
        let aggregate%extract%3#0: bytes = ((extract 8 8) d#0)
        let tmp%5#3: bool = (b!= aggregate%extract%3#0 0b)
        goto tmp%5#3 ? block@21 : block@22
    block@21: // bool_true_L160
        let or_result%0#0: bool = 1u
        goto block@23
    block@22: // bool_false_L160
        let or_result%0#0: bool = 0u
        goto block@23
    block@23: // bool_merge_L160
        (assert or_result%0#0)
        goto e.0#0 ? block@25 : block@24
    block@24: // or_contd_L161
        let tmp%7#1: uint64 = (len e.1#0)
        goto tmp%7#1 ? block@25 : block@26
    block@25: // bool_true_L161
        let or_result%1#0: bool = 1u
        goto block@27
    block@26: // bool_false_L161
        let or_result%1#0: bool = 0u
        goto block@27
    block@27: // bool_merge_L161
        (assert or_result%1#0)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 f#0 0u)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 f#0 aggregate%item_offset%0#0)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 f#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let tmp%10#1: bool = (== aggregate%item%0#0 0x00026869)
        (assert tmp%10#1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 g#0 0u)
        let tmp%12#1: bool = (== aggregate%array_length%0#0 2u)
        (assert tmp%12#1)
        let tmp%13#0: bool = (== h#0 42u)
        (assert tmp%13#0)
        let tmp%14#0: bool = (== i#0 1234u)
        (assert tmp%14#0)
        exit 1u
    block@15: // bare_routing_L54
        let tmp%11#0: uint64 = (txn OnCompletion)
        goto_nth [block@33, block@33, block@18, block@18, block@18, block@17][tmp%11#0] else goto block@18
    block@17: // transient_L85
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // can only call when creating
        exit 1u
    block@18: // after_if_else_L54
        fail