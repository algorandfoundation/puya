main test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@14
    block@4: // abi_routing_L41
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@5, method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64" => block@6, method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)" => block@7, method "emits_error((uint64,string,(byte[],uint8)))void" => block@8, method "emitter()void" => block@9, method "conditional_emit(bool)void" => block@10, method "template_value()((byte[],uint8),uint64,string,uint8)" => block@13, * => block@17}
    block@5: // create_route_L68
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: uint64 = (shl 1u tmp%3#0)
        let tmp%5#0: uint64 = (& tmp%4#0 3u)
        (assert tmp%5#0) // OnCompletion is not one of NoOp, OptIn
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@18
    block@6: // struct_arg_route_L76
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // OnCompletion is not NoOp
        let tmp%8#0: uint64 = (txn ApplicationID)
        (assert tmp%8#0) // can only call when not creating
        let arg#0: bytes = (txna ApplicationArgs 1)
        let shared#0: bytes = (txna ApplicationArgs 2)
        let item_start_offset%0#0: uint64 = (extract_uint16 arg#0 10u)
        let item_end_offset%0#0: uint64 = (len arg#0)
        let tmp%0#3: bytes = (substring3 arg#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%1#1: bool = (== tmp%0#3 shared#0)
        (assert tmp%1#1) // this might error
        (log 0x151f7c75000000000000002a)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@18
    block@7: // struct_return_route_L82
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let arg#0: bytes = (txna ApplicationArgs 1)
        let item_start_offset%0#0: uint64 = (extract_uint16 arg#0 10u)
        let item_end_offset%0#0: uint64 = (len arg#0)
        let s#0: bytes = (substring3 arg#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%19#0: bytes = (concat 0x151f7c75 s#0)
        (log tmp%19#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@18
    block@8: // emits_error_route_L87
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        let arg#0: bytes = (txna ApplicationArgs 1)
        let tmp%0#3: bytes = ((extract 0 8) arg#0) // on error: Index access is out of bounds
        let tmp%1#1: bool = (== tmp%0#3 0x00)
        (assert tmp%1#1) // this will error
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@18
    block@9: // emitter_route_L91
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        (log 0xd93f374e00032a000668656c6c6f31)
        (log 0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@18
    block@10: // conditional_emit_route_L101
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let tmp%33#0: bytes = (txna ApplicationArgs 1)
        let should_emit#0: bool = (getbit tmp%33#0 0u)
        goto should_emit#0 ? block@11 : block@12
    block@11: // if_body_L104
        (log 0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33)
        goto block@12
    block@12: // after_if_else_L103
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@18
    block@13: // template_value_route_L110
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (! tmp%35#0)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        (assert tmp%37#0) // can only call when not creating
        let elements_to_encode%0#0: bytes = TemplateVar[bytes](TMPL_STRUCT)
        let elements_to_encode%1#0: uint64 = TemplateVar[uint64](TMPL_AVM_UINT64)
        let elements_to_encode%2#0: bytes = TemplateVar[bytes](TMPL_AVM_STRING)
        let elements_to_encode%3#0: bytes = TemplateVar[bytes](TMPL_ARC4_UINT8)
        let val_as_bytes%1#0: bytes = (itob elements_to_encode%1#0)
        let length%0#0: uint64 = (len elements_to_encode%2#0)
        let as_bytes%0#0: bytes = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 elements_to_encode%2#0)
        let data_length%0#0: uint64 = (len elements_to_encode%0#0)
        let current_tail_offset%1#0: uint64 = (+ 13u data_length%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat 0x000d val_as_bytes%1#0)
        let as_bytes%2#0: bytes = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 elements_to_encode%3#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 elements_to_encode%0#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 encoded_value%0#0)
        let tmp%39#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%6#0)
        (log tmp%39#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@18
    block@14: // bare_routing_L41
        let tmp%40#0: uint64 = (txn OnCompletion)
        goto_nth [block@12, block@12, block@17, block@17, block@17, block@16][tmp%40#0] else goto block@17
    block@16: // transient_L72
        let tmp%41#0: uint64 = (txn ApplicationID)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // can only call when creating
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@18
    block@17: // after_if_else_L41
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#1: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@18
    block@18: // after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router___L1
        return tmp%0#1