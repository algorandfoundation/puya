{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;AA8EK;;AAAA;AAAA;AAAA;;AAAA;AA9EL;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAuGe;;AAAA;AAAA;AAAP;AACA;AAAA;AACO;AAAP;AACO;;;AAAA;AAAA;AAAA;;;AAAO;;AAAA;;;AAAA;AAAA;AAAP;;;;AAAP;AACO;;AAAA;;;AAAQ;;AAAA;AAAR;;;;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQ;;;;;;AAAR;AAAP;AACO;;AAAA;AAAA;AAAY;AAAZ;AAAP;AACO;;AAAK;;AAAL;AAAP;AACO;AAAK;;;AAAL;AAAP;AAjCH;;;;;;;;;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAMO;AADA;AADA;;AADA;;AAHP;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA5DL;;;AAAA;AAAA;AA8DA;;;AACY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAHP;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAEG;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAJH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA9CL;;;AAgDe;;;AAAe;;;AAAf;AAAP;AAFH;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAzCL;;;AA2Ce;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAnCL;;;AAAA;;;AAsCe;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AAHH;;;;;;;;;;;;;;AAAA;AAAA;;AARA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA3BL;;AAAA;;;;;;;;;;;;;;AAAA;;;AA+BK;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 10 TMPL_AVM_UINT64"
    },
    "8": {
      "op": "bytecblock 0x 0x151f7c75 TMPL_ARC4_UINT8 TMPL_AVM_STRING TMPL_STRUCT"
    },
    "32": {
      "op": "intc_1 // 0",
      "stack_out": [
        "d#0"
      ]
    },
    "33": {
      "op": "dupn 3",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0"
      ]
    },
    "35": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0"
      ]
    },
    "36": {
      "op": "dupn 2",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "38": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#2"
      ]
    },
    "40": {
      "op": "bz main_bare_routing@23",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "43": {
      "op": "pushbytess 0x4c5c61ba 0x97e8e4a7 0x76c4de11 0xc1ca7709 0x6de762c2 0x59fc5282 0x9d9eecb0 0x5e8eef9a // method \"create()void\", method \"struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64\", method \"struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)\", method \"emits_error((uint64,string,(byte[],uint8)))void\", method \"emitter()void\", method \"conditional_emit(bool)void\", method \"template_value()((byte[],uint8),uint64,string,uint8)\", method \"with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)"
      ]
    },
    "85": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%2#0"
      ]
    },
    "88": {
      "op": "match main_create_route@5 main_struct_arg_route@6 main_struct_return_route@7 main_emits_error_route@8 main_emitter_route@9 main_conditional_emit_route@10 main_template_value_route@13 main_with_constant_defaults_route@14",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "106": {
      "block": "main_after_if_else@26",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "107": {
      "op": "return",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "108": {
      "block": "main_with_constant_defaults_route@14",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%42#0"
      ]
    },
    "110": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%43#0"
      ]
    },
    "111": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "112": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%44#0"
      ]
    },
    "114": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "115": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "a#0"
      ]
    },
    "118": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "a#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "121": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "a#0",
        "b#0"
      ]
    },
    "122": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "a#0",
        "b#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "125": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "128": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "131": {
      "op": "dup",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0 (copy)"
      ]
    },
    "132": {
      "op": "cover 4",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "134": {
      "op": "bury 11",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "136": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "139": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "140": {
      "op": "intc_1 // 0",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "141": {
      "op": "extract_uint64",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "e.0#0"
      ]
    },
    "142": {
      "op": "bury 8",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "144": {
      "op": "dup",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "145": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "8"
      ]
    },
    "147": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "aggregate%extract_uint16%2#1",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%2#1"
      ]
    },
    "148": {
      "op": "dig 1",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%2#1",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "150": {
      "op": "len",
      "defined_out": [
        "a#0",
        "aggregate%extract_uint16%2#1",
        "aggregate%len%2#1",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%2#1",
        "aggregate%len%2#1"
      ]
    },
    "151": {
      "op": "substring3",
      "defined_out": [
        "a#0",
        "aggregate%substring3%2#1",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "aggregate%substring3%2#1"
      ]
    },
    "152": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "e.1#0"
      ]
    },
    "155": {
      "op": "bury 10",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "157": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "f#0"
      ]
    },
    "160": {
      "op": "bury 9",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "162": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "g#0"
      ]
    },
    "165": {
      "op": "bury 8",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "167": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "170": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "h#0"
      ]
    },
    "171": {
      "op": "bury 6",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "173": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "176": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "i#0"
      ]
    },
    "177": {
      "op": "bury 5",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "179": {
      "op": "uncover 2",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "b#0",
        "c#0",
        "a#0"
      ]
    },
    "181": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "b#0",
        "c#0",
        "a#0",
        "0x"
      ]
    },
    "182": {
      "op": "b!=",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "b#0",
        "c#0",
        "tmp%0#1"
      ]
    },
    "183": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "b#0",
        "c#0"
      ]
    },
    "184": {
      "op": "swap",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "c#0",
        "b#0"
      ]
    },
    "185": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "c#0"
      ]
    },
    "186": {
      "op": "len",
      "defined_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0",
        "tmp%2#1"
      ]
    },
    "187": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0"
      ]
    },
    "188": {
      "op": "extract 0 8",
      "defined_out": [
        "aggregate%extract%2#1",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%extract%2#1"
      ]
    },
    "191": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%extract%2#1",
        "0x"
      ]
    },
    "192": {
      "op": "b!=",
      "defined_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%4#1"
      ]
    },
    "193": {
      "op": "bnz main_bool_true@16",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "196": {
      "op": "dig 6",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "d#0"
      ]
    },
    "198": {
      "op": "extract 8 8",
      "defined_out": [
        "aggregate%extract%3#1",
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%extract%3#1"
      ]
    },
    "201": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%extract%3#1",
        "0x"
      ]
    },
    "202": {
      "op": "b!=",
      "defined_out": [
        "d#0",
        "e.0#0",
        "e.1#0",
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%5#1"
      ]
    },
    "203": {
      "op": "bz main_bool_false@17",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "206": {
      "block": "main_bool_true@16",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "or_result%0#0"
      ]
    },
    "207": {
      "block": "main_bool_merge@18",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "208": {
      "op": "dig 2",
      "defined_out": [
        "e.0#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "e.0#0"
      ]
    },
    "210": {
      "op": "bnz main_bool_true@20",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "213": {
      "op": "dig 5",
      "defined_out": [
        "e.0#0",
        "e.1#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "e.1#0"
      ]
    },
    "215": {
      "op": "len",
      "defined_out": [
        "e.0#0",
        "e.1#0",
        "tmp%7#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%7#1"
      ]
    },
    "216": {
      "op": "bz main_bool_false@21",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "219": {
      "block": "main_bool_true@20",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "or_result%1#0"
      ]
    },
    "220": {
      "block": "main_bool_merge@22",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "or_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "221": {
      "op": "dig 4",
      "defined_out": [
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "f#0"
      ]
    },
    "223": {
      "op": "dup",
      "defined_out": [
        "f#0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "f#0",
        "f#0 (copy)"
      ]
    },
    "224": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "f#0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "f#0",
        "f#0 (copy)",
        "0"
      ]
    },
    "225": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_offset%0#1",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "f#0",
        "aggregate%item_offset%0#1"
      ]
    },
    "226": {
      "op": "dup2",
      "defined_out": [
        "aggregate%item_offset%0#1",
        "aggregate%item_offset%0#1 (copy)",
        "f#0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "f#0",
        "aggregate%item_offset%0#1",
        "f#0 (copy)",
        "aggregate%item_offset%0#1 (copy)"
      ]
    },
    "227": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%item_offset%0#1",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "f#0",
        "aggregate%item_offset%0#1",
        "aggregate%item_length%0#1"
      ]
    },
    "228": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%item_length%0#1",
        "aggregate%item_offset%0#1",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "f#0",
        "aggregate%item_offset%0#1",
        "aggregate%item_length%0#1",
        "2"
      ]
    },
    "229": {
      "op": "+",
      "defined_out": [
        "aggregate%item_head_tail_length%0#1",
        "aggregate%item_offset%0#1",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "f#0",
        "aggregate%item_offset%0#1",
        "aggregate%item_head_tail_length%0#1"
      ]
    },
    "230": {
      "op": "extract3",
      "defined_out": [
        "aggregate%item%0#1",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%item%0#1"
      ]
    },
    "231": {
      "op": "pushbytes 0x00026869",
      "defined_out": [
        "0x00026869",
        "aggregate%item%0#1",
        "f#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%item%0#1",
        "0x00026869"
      ]
    },
    "237": {
      "op": "==",
      "defined_out": [
        "f#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%9#1"
      ]
    },
    "238": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "239": {
      "op": "dig 3",
      "defined_out": [
        "f#0",
        "g#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "g#0"
      ]
    },
    "241": {
      "op": "intc_1 // 0",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "g#0",
        "0"
      ]
    },
    "242": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0",
        "f#0",
        "g#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "array_length%0#0"
      ]
    },
    "243": {
      "op": "intc_2 // 2",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "array_length%0#0",
        "2"
      ]
    },
    "244": {
      "op": "==",
      "defined_out": [
        "f#0",
        "g#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%10#1"
      ]
    },
    "245": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "246": {
      "op": "dig 1",
      "defined_out": [
        "f#0",
        "g#0",
        "h#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "h#0"
      ]
    },
    "248": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "f#0",
        "g#0",
        "h#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "h#0",
        "42"
      ]
    },
    "250": {
      "op": "==",
      "defined_out": [
        "f#0",
        "g#0",
        "h#0",
        "tmp%11#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%11#1"
      ]
    },
    "251": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "252": {
      "op": "dup",
      "defined_out": [
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "i#0"
      ]
    },
    "253": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "f#0",
        "g#0",
        "h#0",
        "i#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "i#0",
        "1234"
      ]
    },
    "256": {
      "op": "==",
      "defined_out": [
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%12#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%12#1"
      ]
    },
    "257": {
      "op": "assert",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "258": {
      "op": "intc_0 // 1",
      "defined_out": [
        "f#0",
        "g#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "259": {
      "op": "return",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "260": {
      "block": "main_bool_false@21",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "or_result%1#0"
      ]
    },
    "261": {
      "op": "b main_bool_merge@22"
    },
    "264": {
      "block": "main_bool_false@17",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "or_result%0#0"
      ]
    },
    "265": {
      "op": "b main_bool_merge@18"
    },
    "268": {
      "block": "main_template_value_route@13",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%32#0"
      ]
    },
    "270": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%33#0"
      ]
    },
    "271": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "272": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%34#0"
      ]
    },
    "274": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "275": {
      "op": "bytec_2 // TMPL_ARC4_UINT8",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0"
      ]
    },
    "276": {
      "op": "bytec_3 // TMPL_AVM_STRING",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0"
      ]
    },
    "277": {
      "op": "intc 4 // TMPL_AVM_UINT64",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0"
      ]
    },
    "279": {
      "op": "bytec 4 // TMPL_STRUCT",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0"
      ]
    },
    "281": {
      "op": "dup",
      "defined_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ]
    },
    "282": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%6#1",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%data_length%6#1"
      ]
    },
    "283": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "aggregate%data_length%6#1",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%data_length%6#1",
        "13"
      ]
    },
    "285": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%6#1"
      ]
    },
    "286": {
      "op": "uncover 2",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%6#1",
        "tmp%37#0"
      ]
    },
    "288": {
      "op": "itob",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%val_as_bytes%1#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%val_as_bytes%1#1"
      ]
    },
    "289": {
      "op": "pushbytes 0x000d",
      "defined_out": [
        "0x000d",
        "aggregate%current_tail_offset%6#1",
        "aggregate%val_as_bytes%1#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%val_as_bytes%1#1",
        "0x000d"
      ]
    },
    "293": {
      "op": "swap",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%6#1",
        "0x000d",
        "aggregate%val_as_bytes%1#1"
      ]
    },
    "294": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1"
      ]
    },
    "295": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%38#0 (copy)",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1",
        "tmp%38#0 (copy)"
      ]
    },
    "297": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1",
        "aggregate%length%4#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1",
        "aggregate%length%4#1"
      ]
    },
    "298": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%11#1",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1",
        "aggregate%as_bytes%11#1"
      ]
    },
    "299": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1",
        "aggregate%length_uint16%4#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1",
        "aggregate%length_uint16%4#1"
      ]
    },
    "302": {
      "op": "uncover 4",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1",
        "aggregate%length_uint16%4#1",
        "tmp%38#0"
      ]
    },
    "304": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1",
        "aggregate%encoded_value%4#1",
        "tmp%36#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%6#1",
        "aggregate%encoded%13#1",
        "aggregate%encoded_value%4#1"
      ]
    },
    "305": {
      "op": "uncover 2",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%encoded%13#1",
        "aggregate%encoded_value%4#1",
        "aggregate%current_tail_offset%6#1"
      ]
    },
    "307": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%12#1",
        "aggregate%encoded%13#1",
        "aggregate%encoded_value%4#1",
        "tmp%36#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%encoded%13#1",
        "aggregate%encoded_value%4#1",
        "aggregate%as_bytes%12#1"
      ]
    },
    "308": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%13#1",
        "aggregate%encoded_value%4#1",
        "aggregate%offset_as_uint16%7#1",
        "tmp%36#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%encoded%13#1",
        "aggregate%encoded_value%4#1",
        "aggregate%offset_as_uint16%7#1"
      ]
    },
    "311": {
      "op": "uncover 2",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%encoded_value%4#1",
        "aggregate%offset_as_uint16%7#1",
        "aggregate%encoded%13#1"
      ]
    },
    "313": {
      "op": "swap",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%encoded_value%4#1",
        "aggregate%encoded%13#1",
        "aggregate%offset_as_uint16%7#1"
      ]
    },
    "314": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%14#1",
        "aggregate%encoded_value%4#1",
        "tmp%36#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%encoded_value%4#1",
        "aggregate%encoded%14#1"
      ]
    },
    "315": {
      "op": "uncover 3",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%36#0",
        "aggregate%encoded_value%4#1",
        "aggregate%encoded%14#1",
        "tmp%39#0"
      ]
    },
    "317": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%15#1",
        "aggregate%encoded_value%4#1",
        "tmp%36#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%36#0",
        "aggregate%encoded_value%4#1",
        "aggregate%encoded%15#1"
      ]
    },
    "318": {
      "op": "uncover 2",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%encoded_value%4#1",
        "aggregate%encoded%15#1",
        "tmp%36#0"
      ]
    },
    "320": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%6#1",
        "aggregate%encoded_value%4#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%encoded_value%4#1",
        "aggregate%concat%6#1"
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%concat%6#1",
        "aggregate%encoded_value%4#1"
      ]
    },
    "322": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%7#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%concat%7#1"
      ]
    },
    "323": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%7#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%concat%7#1",
        "0x151f7c75"
      ]
    },
    "324": {
      "op": "swap",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "0x151f7c75",
        "aggregate%concat%7#1"
      ]
    },
    "325": {
      "op": "concat",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%41#0"
      ]
    },
    "326": {
      "op": "log",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "327": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "328": {
      "op": "return",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "329": {
      "block": "main_conditional_emit_route@10",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%27#0"
      ]
    },
    "331": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%28#0"
      ]
    },
    "332": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "333": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%29#0"
      ]
    },
    "335": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "336": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "339": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "reinterpret_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "340": {
      "op": "getbit",
      "defined_out": [
        "should_emit#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "should_emit#0"
      ]
    },
    "341": {
      "op": "bz main_after_if_else@12",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "344": {
      "op": "pushbytes 0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33",
      "defined_out": [
        "0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "0x11c547ba000000000000002a000000000000002b001200032a000668656c6c6f33"
      ]
    },
    "379": {
      "op": "log",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "380": {
      "block": "main_after_if_else@12",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "381": {
      "op": "return",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "382": {
      "block": "main_emitter_route@9",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%23#0"
      ]
    },
    "384": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%24#0"
      ]
    },
    "385": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "386": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%25#0"
      ]
    },
    "388": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "389": {
      "op": "pushbytes 0xd93f374e00032a000668656c6c6f31",
      "defined_out": [
        "0xd93f374e00032a000668656c6c6f31"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "0xd93f374e00032a000668656c6c6f31"
      ]
    },
    "406": {
      "op": "log",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "407": {
      "op": "pushbytes 0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32",
      "defined_out": [
        "0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "0x1e72af4e0004000b000568656c6c6f00032a000668656c6c6f32"
      ]
    },
    "435": {
      "op": "log",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "436": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "437": {
      "op": "return",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "438": {
      "block": "main_emits_error_route@8",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%19#0"
      ]
    },
    "440": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%20#0"
      ]
    },
    "441": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "442": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%21#0"
      ]
    },
    "444": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "445": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0"
      ]
    },
    "448": {
      "op": "extract 0 8",
      "defined_out": [
        "aggregate%extract%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%extract%0#1"
      ]
    },
    "451": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%extract%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "aggregate%extract%0#1",
        "0x00"
      ]
    },
    "454": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "455": {
      "error": "this will error",
      "op": "assert // this will error",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "456": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "457": {
      "op": "return",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "458": {
      "block": "main_struct_return_route@7",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%13#0"
      ]
    },
    "460": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%14#0"
      ]
    },
    "461": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "462": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%15#0"
      ]
    },
    "464": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "465": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0"
      ]
    },
    "468": {
      "op": "dup",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0",
        "arg#0 (copy)"
      ]
    },
    "469": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "arg#0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0",
        "arg#0 (copy)",
        "10"
      ]
    },
    "470": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#1",
        "arg#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0",
        "aggregate%extract_uint16%1#1"
      ]
    },
    "471": {
      "op": "dig 1",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0",
        "aggregate%extract_uint16%1#1",
        "arg#0 (copy)"
      ]
    },
    "473": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#1",
        "aggregate%len%1#1",
        "arg#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0",
        "aggregate%extract_uint16%1#1",
        "aggregate%len%1#1"
      ]
    },
    "474": {
      "op": "substring3",
      "defined_out": [
        "s#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "s#0"
      ]
    },
    "475": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "s#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "s#0",
        "0x151f7c75"
      ]
    },
    "476": {
      "op": "swap",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "0x151f7c75",
        "s#0"
      ]
    },
    "477": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%18#0"
      ]
    },
    "478": {
      "op": "log",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "479": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "480": {
      "op": "return",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "481": {
      "block": "main_struct_arg_route@6",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%6#0"
      ]
    },
    "483": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%7#0"
      ]
    },
    "484": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "485": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%8#0"
      ]
    },
    "487": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "488": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arg#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0"
      ]
    },
    "491": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "arg#0",
        "shared#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0",
        "shared#0"
      ]
    },
    "494": {
      "op": "dig 1",
      "defined_out": [
        "arg#0",
        "arg#0 (copy)",
        "shared#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0",
        "shared#0",
        "arg#0 (copy)"
      ]
    },
    "496": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "arg#0",
        "arg#0 (copy)",
        "shared#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0",
        "shared#0",
        "arg#0 (copy)",
        "10"
      ]
    },
    "497": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#1",
        "arg#0",
        "shared#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0",
        "shared#0",
        "aggregate%extract_uint16%0#1"
      ]
    },
    "498": {
      "op": "dig 2",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0",
        "shared#0",
        "aggregate%extract_uint16%0#1",
        "arg#0 (copy)"
      ]
    },
    "500": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1",
        "arg#0",
        "shared#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "arg#0",
        "shared#0",
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1"
      ]
    },
    "501": {
      "op": "uncover 3",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "shared#0",
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1",
        "arg#0"
      ]
    },
    "503": {
      "op": "cover 2",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "shared#0",
        "arg#0",
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1"
      ]
    },
    "505": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#1",
        "shared#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "shared#0",
        "aggregate%substring3%0#1"
      ]
    },
    "506": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "507": {
      "error": "this might error",
      "op": "assert // this might error",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "508": {
      "op": "pushbytes 0x151f7c75000000000000002a",
      "defined_out": [
        "0x151f7c75000000000000002a"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "0x151f7c75000000000000002a"
      ]
    },
    "522": {
      "op": "log",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "523": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "524": {
      "op": "return",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "525": {
      "block": "main_create_route@5",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "1"
      ]
    },
    "526": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "1",
        "tmp%3#0"
      ]
    },
    "528": {
      "op": "shl",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%4#0"
      ]
    },
    "529": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%4#0",
        "3"
      ]
    },
    "531": {
      "op": "&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%5#0"
      ]
    },
    "532": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "533": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "534": {
      "op": "return",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "535": {
      "block": "main_bare_routing@23",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%52#0"
      ]
    },
    "537": {
      "op": "switch main_after_if_else@12 main_after_if_else@12 main_after_if_else@26 main_after_if_else@26 main_after_if_else@26 main_transient@25",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "551": {
      "op": "b main_after_if_else@26"
    },
    "554": {
      "block": "main_transient@25",
      "stack_in": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%53#0"
      ]
    },
    "556": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%54#0"
      ]
    },
    "557": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    },
    "558": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "559": {
      "op": "return",
      "stack_out": [
        "d#0",
        "e.1#0",
        "f#0",
        "g#0",
        "e.0#0",
        "h#0",
        "i#0"
      ]
    }
  }
}