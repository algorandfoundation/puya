main test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.arc_56.contract.Contract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.arc_56.contract.Contract.__init__() -> void:
    block@0: // L45
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L42
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@13
    block@2: // abi_routing_L42
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@3, method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64" => block@4, method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)" => block@5, method "emits_error((uint64,string,(byte[],uint8)))void" => block@6, method "emitter()void" => block@7, method "conditional_emit(bool)void" => block@8, method "template_value()((byte[],uint8),uint64,string,uint8)" => block@9, method "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64))void" => block@10, * => block@11}
    block@3: // create_route_L69
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: uint64 = (shl 1u tmp%3#0)
        let tmp%5#0: uint64 = (& tmp%4#0 3u)
        (assert tmp%5#0) // OnCompletion is not one of NoOp, OptIn
        test_cases.arc_56.contract.Contract.create()
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@19
    block@4: // struct_arg_route_L77
        let tmp%6#0: uint64 = (txn OnCompletion)
        let tmp%7#0: bool = (== tmp%6#0 NoOp)
        (assert tmp%7#0) // OnCompletion is not NoOp
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (!= tmp%8#0 0u)
        (assert tmp%9#0) // can only call when not creating
        let tmp%10#0: bytes = (txna ApplicationArgs 1)
        let tmp%11#0: bytes = (txna ApplicationArgs 2)
        let to_encode%0#0: uint64 = test_cases.arc_56.contract.Contract.struct_arg(tmp%10#0, tmp%11#0)
        let val_as_bytes%0#0: bytes = (itob to_encode%0#0)
        let tmp%12#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%12#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@19
    block@5: // struct_return_route_L83
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let tmp%17#0: bytes = (txna ApplicationArgs 1)
        let tmp%18#0: bytes = test_cases.arc_56.contract.Contract.struct_return(tmp%17#0)
        let tmp%19#0: bytes = (concat 0x151f7c75 tmp%18#0)
        (log tmp%19#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@19
    block@6: // emits_error_route_L88
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (== tmp%20#0 NoOp)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (!= tmp%22#0 0u)
        (assert tmp%23#0) // can only call when not creating
        let tmp%24#0: bytes = (txna ApplicationArgs 1)
        test_cases.arc_56.contract.Contract.errors(tmp%24#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@19
    block@7: // emitter_route_L92
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (== tmp%25#0 NoOp)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%28#0) // can only call when not creating
        test_cases.arc_56.contract.Contract.emitter()
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@19
    block@8: // conditional_emit_route_L102
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (== tmp%29#0 NoOp)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // can only call when not creating
        let tmp%33#0: bytes = (txna ApplicationArgs 1)
        let tmp%34#0: bool = (getbit tmp%33#0 0u)
        test_cases.arc_56.contract.Contract.conditional_emit(tmp%34#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@19
    block@9: // template_value_route_L111
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (== tmp%35#0 NoOp)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        let tmp%38#0: bool = (!= tmp%37#0 0u)
        (assert tmp%38#0) // can only call when not creating
        let (elements_to_encode%0#0: bytes, elements_to_encode%1#0: uint64, elements_to_encode%2#0: bytes, elements_to_encode%3#0: bytes) = test_cases.arc_56.contract.Contract.template_value()
        let val_as_bytes%1#0: bytes = (itob elements_to_encode%1#0)
        let length%0#0: uint64 = (len elements_to_encode%2#0)
        let as_bytes%0#0: bytes = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 elements_to_encode%2#0)
        let as_bytes%1#0: bytes = (itob 13u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len elements_to_encode%0#0)
        let current_tail_offset%1#0: uint64 = (+ 13u data_length%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let as_bytes%2#0: bytes = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 elements_to_encode%3#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 elements_to_encode%0#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 encoded_value%0#0)
        let tmp%39#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%6#0)
        (log tmp%39#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@19
    block@10: // with_constant_defaults_route_L120
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (== tmp%40#0 NoOp)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        let tmp%43#0: bool = (!= tmp%42#0 0u)
        (assert tmp%43#0) // can only call when not creating
        let tmp%44#0: bytes = (txna ApplicationArgs 1)
        let tmp%45#0: bytes = (txna ApplicationArgs 2)
        let tmp%46#0: uint64 = (btoi tmp%45#0)
        let tmp%47#0: bytes = (txna ApplicationArgs 3)
        let tmp%48#0: bytes = ((extract 2 0) tmp%47#0)
        let tmp%49#0: bytes = (txna ApplicationArgs 4)
        test_cases.arc_56.contract.Contract.with_constant_defaults(tmp%44#0, tmp%46#0, tmp%48#0, tmp%49#0)
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@19
    block@11: // switch_case_default_L42
        goto block@12
    block@12: // switch_case_next_L42
        goto block@18
    block@13: // bare_routing_L42
        let tmp%50#0: uint64 = (txn OnCompletion)
        switch tmp%50#0 {0u => block@14, 1u => block@14, 5u => block@15, * => block@16}
    block@14: // bare_create_L65
        test_cases.arc_56.contract.Contract.bare_create()
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@19
    block@15: // transient_L73
        let tmp%51#0: uint64 = (txn ApplicationID)
        let tmp%52#0: bool = (== tmp%51#0 0u)
        (assert tmp%52#0) // can only call when creating
        test_cases.arc_56.contract.Contract.transient()
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@19
    block@16: // switch_case_default_L42
        goto block@17
    block@17: // switch_case_next_L42
        goto block@18
    block@18: // after_if_else_L42
        let test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.arc_56.contract.Contract.__puya_arc4_router__%0#0
        goto block@19
    block@19: // after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.arc_56.contract.Contract.create() -> void:
    block@0: // L69
        return 

subroutine test_cases.arc_56.contract.Contract.struct_arg(arg: bytes, shared: bytes) -> uint64:
    block@0: // L77
        let item_start_offset%0#0: uint64 = (extract_uint16 arg#0 10u)
        let item_end_offset%0#0: uint64 = (len arg#0)
        let tmp%0#0: bytes = (substring3 arg#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%1#0: bool = (== tmp%0#0 shared#0)
        (assert tmp%1#0) // this might error
        return 42u

subroutine test_cases.arc_56.contract.Contract.struct_return(arg: bytes) -> bytes:
    block@0: // L83
        let item_start_offset%0#0: uint64 = (extract_uint16 arg#0 10u)
        let item_end_offset%0#0: uint64 = (len arg#0)
        let tmp%0#0: bytes = (substring3 arg#0 item_start_offset%0#0 item_end_offset%0#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 arg#0 10u)
        let item_end_offset%1#0: uint64 = (len arg#0)
        let tmp%1#0: bytes = (substring3 arg#0 item_start_offset%1#0 item_end_offset%1#0)
        let (echo%0#0: bytes, echo%1#0: bytes) = test_cases.arc_56.contract.echo(tmp%1#0)
        let tmp%2#0: bool = (== tmp%0#0 echo%0#0)
        (assert tmp%2#0) // this won't error
        let item_start_offset%2#0: uint64 = (extract_uint16 arg#0 10u)
        let item_end_offset%2#0: uint64 = (len arg#0)
        let tmp%3#0: bytes = (substring3 arg#0 item_start_offset%2#0 item_end_offset%2#0)
        return tmp%3#0

subroutine test_cases.arc_56.contract.echo(s: bytes) -> <bytes, bytes>:
    block@0: // L135
        return s#0 s#0

subroutine test_cases.arc_56.contract.Contract.errors(arg: bytes) -> void:
    block@0: // L88
        let tmp%0#0: bytes = (extract3 arg#0 0u 8u) // on error: Index access is out of bounds
        let tmp%1#0: bool = (== tmp%0#0 0x00)
        (assert tmp%1#0) // this will error
        return 

subroutine test_cases.arc_56.contract.Contract.emitter() -> void:
    block@0: // L92
        let length%0#0: uint64 = (len 0x68656c6c6f31)
        let as_bytes%0#0: bytes = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x68656c6c6f31)
        let as_bytes%1#0: bytes = (itob 3u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x offset_as_uint16%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 0x2a)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        let event%0#0: bytes = (concat method "SharedStruct(byte[],uint8)" encoded_tuple_buffer%3#0)
        (log event%0#0)
        let length%1#0: uint64 = (len "hello")
        let as_bytes%2#0: bytes = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 "hello")
        let length%2#0: uint64 = (len 0x68656c6c6f32)
        let as_bytes%3#0: bytes = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x68656c6c6f32)
        let as_bytes%4#0: bytes = (itob 3u)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_tuple_buffer%5#0: bytes = (concat 0x offset_as_uint16%1#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 0x2a)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%2#0)
        let as_bytes%5#0: bytes = (itob 4u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_tuple_buffer%9#0: bytes = (concat 0x offset_as_uint16%2#0)
        let data_length%2#0: uint64 = (len encoded_value%1#0)
        let current_tail_offset%5#0: uint64 = (+ 4u data_length%2#0)
        let as_bytes%6#0: bytes = (itob current_tail_offset%5#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 offset_as_uint16%3#0)
        let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 encoded_value%1#0)
        let encoded_tuple_buffer%12#0: bytes = (concat encoded_tuple_buffer%11#0 encoded_tuple_buffer%7#0)
        let event%1#0: bytes = (concat method "Anonymous(string,(byte[],uint8))" encoded_tuple_buffer%12#0)
        (log event%1#0)
        return 

subroutine test_cases.arc_56.contract.Contract.conditional_emit(should_emit: bool) -> void:
    block@0: // L102
        goto should_emit#0 ? block@1 : block@2
    block@1: // if_body_L105
        let encoded_tuple_buffer%1#0: bytes = (concat 0x 0x000000000000002a)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 0x000000000000002b)
        let length%0#0: uint64 = (len 0x68656c6c6f33)
        let as_bytes%0#0: bytes = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x68656c6c6f33)
        let as_bytes%1#0: bytes = (itob 3u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat 0x offset_as_uint16%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 0x2a)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 encoded_value%0#0)
        let encoded_tuple_buffer%8#0: bytes = (concat 0x encoded_tuple_buffer%2#0)
        let as_bytes%2#0: bytes = (itob 18u)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 encoded_tuple_buffer%6#0)
        let event%0#0: bytes = (concat method "Anonymous2((uint64,uint64),(byte[],uint8))" encoded_tuple_buffer%10#0)
        (log event%0#0)
        goto block@2
    block@2: // after_if_else_L104
        return 

subroutine test_cases.arc_56.contract.Contract.template_value() -> <bytes, uint64, bytes, bytes>:
    block@0: // L111
        return TemplateVar[bytes](TMPL_STRUCT) TemplateVar[uint64](TMPL_AVM_UINT64) TemplateVar[bytes](TMPL_AVM_STRING) TemplateVar[bytes](TMPL_ARC4_UINT8)

subroutine test_cases.arc_56.contract.Contract.with_constant_defaults(a: bytes, b: uint64, c: bytes, d: bytes) -> void:
    block@0: // L120
        let tmp%0#0: bool = (!= a#0 0x0000000000000000)
        (assert tmp%0#0)
        let tmp%1#0: bool = (!= b#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (len c#0)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        (assert tmp%3#0)
        let tmp%4#0: bytes = (extract3 d#0 0u 8u) // on error: Index access is out of bounds
        let tmp%5#0: bool = (!= tmp%4#0 0x0000000000000000)
        goto tmp%5#0 ? block@2 : block@1
    block@1: // or_contd_L132
        let tmp%6#0: bytes = (extract3 d#0 8u 8u) // on error: Index access is out of bounds
        let tmp%7#0: bool = (!= tmp%6#0 0x0000000000000000)
        goto tmp%7#0 ? block@2 : block@3
    block@2: // bool_true_L132
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L132
        let or_result%0#0: bool = 0u
        goto block@4
    block@4: // bool_merge_L132
        (assert or_result%0#0)
        return 

subroutine test_cases.arc_56.contract.Contract.bare_create() -> void:
    block@0: // L65
        return 

subroutine test_cases.arc_56.contract.Contract.transient() -> void:
    block@0: // L73
        return 