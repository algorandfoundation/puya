main test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.arc_56.contract.Contract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.arc_56.contract.echo(s: Encoded((len+uint8[]),uint8)) -> <Encoded((len+uint8[]),uint8), Encoded((len+uint8[]),uint8)>:
    block@0: // L168
        return s#0 s#0

subroutine test_cases.arc_56.contract.Contract.create[routing]() -> void:
    block@0: // L81
        test_cases.arc_56.contract.Contract.create()
        exit 1u

subroutine test_cases.arc_56.contract.Contract.struct_arg[routing]() -> void:
    block@0: // L89
        let reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let reinterpret_Encoded((len+uint8[]),uint8)%0#0: Encoded((len+uint8[]),uint8) = (txna ApplicationArgs 2)
        let tmp%0#0: uint64 = test_cases.arc_56.contract.Contract.struct_arg(reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0, reinterpret_Encoded((len+uint8[]),uint8)%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.struct_return[routing]() -> void:
    block@0: // L95
        let reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        let tmp%0#0: Encoded((len+uint8[]),uint8) = test_cases.arc_56.contract.Contract.struct_return(reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.errors[routing]() -> void:
    block@0: // L100
        let reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)) = (txna ApplicationArgs 1)
        test_cases.arc_56.contract.Contract.errors(reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.emitter[routing]() -> void:
    block@0: // L104
        test_cases.arc_56.contract.Contract.emitter()
        exit 1u

subroutine test_cases.arc_56.contract.Contract.conditional_emit[routing]() -> void:
    block@0: // L114
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let aggregate%get_bit%0#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let tmp%0#0: bool = aggregate%get_bit%0#0
        test_cases.arc_56.contract.Contract.conditional_emit(tmp%0#0)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.template_value[routing]() -> void:
    block@0: // L123
        let (tmp%0#0: Encoded((len+uint8[]),uint8), tmp%1#0: uint64, tmp%2#0: string, tmp%3#0: Encoded(uint8)) = test_cases.arc_56.contract.Contract.template_value()
        let aggregate%as_bytes%0#0: bytes[8] = (itob 13u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 13u aggregate%data_length%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%2#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%2#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%1#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 tmp%3#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 tmp%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%as_Encoded(((len+uint8[]),uint8),uint64,(len+utf8[]),uint8)%0#0: Encoded(((len+uint8[]),uint8),uint64,(len+utf8[]),uint8) = aggregate%concat%1#0
        let tmp%4#0: Encoded(((len+uint8[]),uint8),uint64,(len+utf8[]),uint8) = aggregate%as_Encoded(((len+uint8[]),uint8),uint64,(len+utf8[]),uint8)%0#0
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.with_constant_defaults[routing]() -> void:
    block@0: // L132
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let tmp%1#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 4)
        let reinterpret_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = (txna ApplicationArgs 5)
        let aggregate%extract%0#0: bytes = (extract3 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 8u)
        let aggregate%len%0#0: uint64 = (len reinterpret_Encoded(uint64,(len+utf8[]))%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 reinterpret_Encoded(uint64,(len+utf8[]))%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let aggregate%item1%0#0: bytes = ((extract 2 0) aggregate%substring3%0#0)
        let tmp%2#0: uint64 = aggregate%item0%0#0
        let tmp%3#0: string = aggregate%item1%0#0
        let reinterpret_Encoded((len+utf8[])[2])%0#0: Encoded((len+utf8[])[2]) = (txna ApplicationArgs 6)
        let reinterpret_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = (txna ApplicationArgs 7)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 8)
        let tmp%4#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 9)
        let tmp%5#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        test_cases.arc_56.contract.Contract.with_constant_defaults(reinterpret_Encoded(uint64)%0#0, tmp%0#0, tmp%1#0, reinterpret_Encoded(uint64,uint64)%0#0, tmp%2#0, tmp%3#0, reinterpret_Encoded((len+utf8[])[2])%0#0, reinterpret_Encoded(len+(len+utf8[])[])%0#0, tmp%4#0, tmp%5#0)
        exit 1u

subroutine test_cases.arc_56.contract.Contract.__init__() -> void:
    block@0: // L57
        return 

subroutine test_cases.arc_56.contract.Contract.bare_create() -> void:
    block@0: // L77
        return 

subroutine test_cases.arc_56.contract.Contract.create() -> void:
    block@0: // L81
        return 

subroutine test_cases.arc_56.contract.Contract.transient() -> void:
    block@0: // L85
        return 

subroutine test_cases.arc_56.contract.Contract.struct_arg(arg: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8)), shared: Encoded((len+uint8[]),uint8)) -> uint64:
    block@0: // L89
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%0#0: uint64 = (len arg#0)
        let aggregate%substring3%0#0: bytes = (substring3 arg#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tuple_item%0#0: Encoded((len+uint8[]),uint8) = aggregate%substring3%0#0
        let tmp%0#0: bool = (== tuple_item%0#0 shared#0)
        (assert tmp%0#0) // this might error
        return 42u

subroutine test_cases.arc_56.contract.Contract.struct_return(arg: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))) -> Encoded((len+uint8[]),uint8):
    block@0: // L95
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%0#0: uint64 = (len arg#0)
        let aggregate%substring3%0#0: bytes = (substring3 arg#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tuple_item%0#0: Encoded((len+uint8[]),uint8) = aggregate%substring3%0#0
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%1#0: uint64 = (len arg#0)
        let aggregate%substring3%1#0: bytes = (substring3 arg#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let tuple_item%1#0: Encoded((len+uint8[]),uint8) = aggregate%substring3%1#0
        let (echo%0#0: Encoded((len+uint8[]),uint8), echo%1#0: Encoded((len+uint8[]),uint8)) = test_cases.arc_56.contract.echo(tuple_item%1#0)
        let tmp%0#0: bool = (== tuple_item%0#0 echo%0#0)
        (assert tmp%0#0) // this won't error
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 arg#0 10u)
        let aggregate%len%2#0: uint64 = (len arg#0)
        let aggregate%substring3%2#0: bytes = (substring3 arg#0 aggregate%extract_uint16%2#0 aggregate%len%2#0)
        let tuple_item%2#0: Encoded((len+uint8[]),uint8) = aggregate%substring3%2#0
        return tuple_item%2#0

subroutine test_cases.arc_56.contract.Contract.errors(arg: Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))) -> void:
    block@0: // L100
        let aggregate%extract%0#0: bytes = (extract3 arg#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let tmp%0#0: bool = (== tuple_item%0#0 0x00)
        (assert tmp%0#0) // this will error
        return 

subroutine test_cases.arc_56.contract.Contract.emitter() -> void:
    block@0: // L104
        let aggregate%length%0#0: uint64 = (len 0x68656c6c6f31)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 0x68656c6c6f31)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x2a)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 tmp%0#0)
        let aggregate%as_Encoded((len+uint8[]),uint8)%0#0: Encoded((len+uint8[]),uint8) = aggregate%concat%0#0
        let tmp%1#0: Encoded((len+uint8[]),uint8) = aggregate%as_Encoded((len+uint8[]),uint8)%0#0
        let event%0#0: bytes = (concat method "SharedStruct(byte[],uint8)" tmp%1#0)
        (log event%0#0)
        let aggregate%length%1#0: uint64 = (len "hello")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%2#0: uint64 = (len 0x68656c6c6f32)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 0x68656c6c6f32)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%2#0
        let tmp%3#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let aggregate%as_bytes%4#0: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%2#0: bytes = (concat 0x aggregate%offset_as_uint16%1#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 0x2a)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%3#0 tmp%3#0)
        let aggregate%as_Encoded((len+uint8[]),uint8)%1#0: Encoded((len+uint8[]),uint8) = aggregate%concat%1#0
        let tmp%4#0: Encoded((len+uint8[]),uint8) = aggregate%as_Encoded((len+uint8[]),uint8)%1#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%4#0: bytes = (concat 0x aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len tmp%2#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 4u aggregate%data_length%2#0)
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%3#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%5#0 tmp%2#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%concat%2#0 tmp%4#0)
        let aggregate%as_Encoded((len+utf8[]),((len+uint8[]),uint8))%0#0: Encoded((len+utf8[]),((len+uint8[]),uint8)) = aggregate%concat%3#0
        let tmp%5#0: Encoded((len+utf8[]),((len+uint8[]),uint8)) = aggregate%as_Encoded((len+utf8[]),((len+uint8[]),uint8))%0#0
        let event%1#0: bytes = (concat method "Anonymous(string,(byte[],uint8))" tmp%5#0)
        (log event%1#0)
        return 

subroutine test_cases.arc_56.contract.Contract.conditional_emit(should_emit: bool) -> void:
    block@0: // L114
        goto should_emit#0 ? block@1 : block@2
    block@1: // if_body_L117
        let aggregate%head%0#0: bytes = (concat 0x 0x000000000000002a)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x000000000000002b)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let aggregate%length%0#0: uint64 = (len 0x68656c6c6f33)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 0x68656c6c6f33)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 3u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 0x2a)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 tmp%1#0)
        let aggregate%as_Encoded((len+uint8[]),uint8)%0#0: Encoded((len+uint8[]),uint8) = aggregate%concat%0#0
        let tmp%2#0: Encoded((len+uint8[]),uint8) = aggregate%as_Encoded((len+uint8[]),uint8)%0#0
        let aggregate%head%4#0: bytes = (concat 0x tmp%0#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob 18u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%5#0 tmp%2#0)
        let aggregate%as_Encoded((uint64,uint64),((len+uint8[]),uint8))%0#0: Encoded((uint64,uint64),((len+uint8[]),uint8)) = aggregate%concat%1#0
        let tmp%3#0: Encoded((uint64,uint64),((len+uint8[]),uint8)) = aggregate%as_Encoded((uint64,uint64),((len+uint8[]),uint8))%0#0
        let event%0#0: bytes = (concat method "Anonymous2((uint64,uint64),(byte[],uint8))" tmp%3#0)
        (log event%0#0)
        goto block@2
    block@2: // after_if_else_L116
        return 

subroutine test_cases.arc_56.contract.Contract.template_value() -> <Encoded((len+uint8[]),uint8), uint64, string, Encoded(uint8)>:
    block@0: // L123
        return TemplateVar[Encoded((len+uint8[]),uint8)](TMPL_STRUCT) TemplateVar[uint64](TMPL_AVM_UINT64) TemplateVar[string](TMPL_AVM_STRING) TemplateVar[Encoded(uint8)](TMPL_ARC4_UINT8)

subroutine test_cases.arc_56.contract.Contract.with_constant_defaults(a: Encoded(uint64), b: uint64, c: bytes, d: Encoded(uint64,uint64), e.0: uint64, e.1: string, f: Encoded((len+utf8[])[2]), g: Encoded(len+(len+utf8[])[]), h: uint64, i: uint64) -> void:
    block@0: // L132
        let reinterpret_biguint%0#0: biguint = a#0
        let tmp%0#0: bool = (b!= reinterpret_biguint%0#0 0b)
        (assert tmp%0#0)
        let tmp%1#0: bool = (!= b#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (len c#0)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        (assert tmp%3#0)
        let aggregate%extract%0#0: bytes = (extract3 d#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let reinterpret_biguint%1#0: biguint = tuple_item%0#0
        let tmp%4#0: bool = (b!= reinterpret_biguint%1#0 0b)
        goto tmp%4#0 ? block@2 : block@1
    block@1: // or_contd_L160
        let aggregate%extract%1#0: bytes = (extract3 d#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let reinterpret_biguint%2#0: biguint = tuple_item%1#0
        let tmp%5#0: bool = (b!= reinterpret_biguint%2#0 0b)
        goto tmp%5#0 ? block@2 : block@3
    block@2: // bool_true_L160
        let or_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L160
        let or_result%0#0: bool = 0u
        goto block@4
    block@4: // bool_merge_L160
        (assert or_result%0#0)
        let tmp%6#0: bool = (!= e.0#0 0u)
        goto tmp%6#0 ? block@6 : block@5
    block@5: // or_contd_L161
        let tmp%7#0: uint64 = (len e.1#0)
        let tmp%8#0: bool = (!= tmp%7#0 0u)
        goto tmp%8#0 ? block@6 : block@7
    block@6: // bool_true_L161
        let or_result%1#0: bool = 1u
        goto block@8
    block@7: // bool_false_L161
        let or_result%1#0: bool = 0u
        goto block@8
    block@8: // bool_merge_L161
        (assert or_result%1#0)
        let aggregate%lt%0#0: bool = (< 0u 2u)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%item_offset_offset%0#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 f#0 aggregate%item_offset_offset%0#0)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 f#0 aggregate%item_offset%0#0)
        let aggregate%item_length_in_bytes%0#0: uint64 = (* aggregate%item_length%0#0 1u)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length_in_bytes%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 f#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let array_item%0#0: Encoded(len+utf8[]) = aggregate%item%0#0
        let aggregate%length%0#0: uint64 = (len "hi")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "hi")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%9#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%10#0: bool = (== array_item%0#0 tmp%9#0)
        (assert tmp%10#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 g#0 0u)
        let tmp%11#0: uint64 = aggregate%array_length%0#0
        let tmp%12#0: bool = (== tmp%11#0 2u)
        (assert tmp%12#0)
        let tmp%13#0: bool = (== h#0 42u)
        (assert tmp%13#0)
        let tmp%14#0: bool = (== i#0 1234u)
        (assert tmp%14#0)
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L54
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@15, 2u => block@21, 3u => block@27, 4u => block@33, 5u => block@34, 6u => block@35, 7u => block@36, 8u => block@37, 9u => block@38, 10u => block@39, 11u => block@40, * => block@43}
    block@2: // switch_case_0_L54
        let tmp%5#0: uint64 = (txn NumAppArgs)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        goto tmp%6#0 ? block@3 : block@4
    block@3: // bare_create_L77
        test_cases.arc_56.contract.Contract.bare_create()
        exit 1u
    block@4: // else_body_L54
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "create()void" => block@5, method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64" => block@6, method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)" => block@7, method "emits_error((uint64,string,(byte[],uint8)))void" => block@8, method "emitter()void" => block@9, method "conditional_emit(bool)void" => block@10, method "template_value()((byte[],uint8),uint64,string,uint8)" => block@11, method "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void" => block@12, * => block@13}
    block@5: // create_route_L81
        test_cases.arc_56.contract.Contract.create[routing]()
        goto block@14
    block@6: // struct_arg_route_L89
        test_cases.arc_56.contract.Contract.struct_arg[routing]()
        goto block@14
    block@7: // struct_return_route_L95
        test_cases.arc_56.contract.Contract.struct_return[routing]()
        goto block@14
    block@8: // emits_error_route_L100
        test_cases.arc_56.contract.Contract.errors[routing]()
        goto block@14
    block@9: // emitter_route_L104
        test_cases.arc_56.contract.Contract.emitter[routing]()
        goto block@14
    block@10: // conditional_emit_route_L114
        test_cases.arc_56.contract.Contract.conditional_emit[routing]()
        goto block@14
    block@11: // template_value_route_L123
        test_cases.arc_56.contract.Contract.template_value[routing]()
        goto block@14
    block@12: // with_constant_defaults_route_L132
        test_cases.arc_56.contract.Contract.with_constant_defaults[routing]()
        goto block@14
    block@13: // switch_case_default_L54
        goto block@14
    block@14: // switch_case_next_L54
        fail // this contract does not implement the given ABI method for call NoOp
    block@15: // switch_case_1_L54
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        goto tmp%9#0 ? block@16 : block@17
    block@16: // bare_create_L77
        test_cases.arc_56.contract.Contract.bare_create()
        exit 1u
    block@17: // else_body_L54
        let tmp%10#0: bytes = (txna ApplicationArgs 0)
        switch tmp%10#0 {method "create()void" => block@18, * => block@19}
    block@18: // create_route_L81
        test_cases.arc_56.contract.Contract.create[routing]()
        goto block@20
    block@19: // switch_case_default_L54
        goto block@20
    block@20: // switch_case_next_L54
        fail // this contract does not implement the given ABI method for create NoOp
    block@21: // switch_case_2_L54
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: bool = (== tmp%11#0 0u)
        goto tmp%12#0 ? block@22 : block@23
    block@22: // bare_create_L77
        test_cases.arc_56.contract.Contract.bare_create()
        exit 1u
    block@23: // else_body_L54
        let tmp%13#0: bytes = (txna ApplicationArgs 0)
        switch tmp%13#0 {method "create()void" => block@24, * => block@25}
    block@24: // create_route_L81
        test_cases.arc_56.contract.Contract.create[routing]()
        goto block@26
    block@25: // switch_case_default_L54
        goto block@26
    block@26: // switch_case_next_L54
        fail // this contract does not implement the given ABI method for call OptIn
    block@27: // switch_case_3_L54
        let tmp%14#0: uint64 = (txn NumAppArgs)
        let tmp%15#0: bool = (== tmp%14#0 0u)
        goto tmp%15#0 ? block@28 : block@29
    block@28: // bare_create_L77
        test_cases.arc_56.contract.Contract.bare_create()
        exit 1u
    block@29: // else_body_L54
        let tmp%16#0: bytes = (txna ApplicationArgs 0)
        switch tmp%16#0 {method "create()void" => block@30, * => block@31}
    block@30: // create_route_L81
        test_cases.arc_56.contract.Contract.create[routing]()
        goto block@32
    block@31: // switch_case_default_L54
        goto block@32
    block@32: // switch_case_next_L54
        fail // this contract does not implement the given ABI method for create OptIn
    block@33: // switch_case_4_L54
        goto block@43
    block@34: // switch_case_5_L54
        goto block@43
    block@35: // switch_case_6_L54
        goto block@43
    block@36: // switch_case_7_L54
        goto block@43
    block@37: // switch_case_8_L54
        goto block@43
    block@38: // switch_case_9_L54
        goto block@43
    block@39: // switch_case_10_L54
        goto block@43
    block@40: // switch_case_11_L54
        let tmp%17#0: uint64 = (txn NumAppArgs)
        let tmp%18#0: bool = (== tmp%17#0 0u)
        goto tmp%18#0 ? block@41 : block@42
    block@41: // transient_L85
        test_cases.arc_56.contract.Contract.transient()
        exit 1u
    block@42: // else_body_L54
        fail // this contract does not implement the given ABI method for create DeleteApplication
    block@43: // switch_case_default_L54
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@44: // after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0