#pragma version 10
#pragma typetrack false

// test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 3 10 TMPL_AVM_UINT64
    bytecblock 0x 0x151f7c75 0x2a 0x0000000000000000 0x68656c6c6f31 "hello" 0x68656c6c6f32 0x68656c6c6f33 TMPL_STRUCT TMPL_AVM_STRING TMPL_ARC4_UINT8
    txn ApplicationID
    bnz main_after_if_else@2

main_call___init__@1:
    callsub __init__

main_after_if_else@2:
    callsub approval_program
    return


// test_cases.arc_56.contract.Contract.__init__() -> void:
__init__:
    // arc_56/contract.py:45
    // def __init__(self) -> None:
    proto 0 0
    retsub


// algopy.arc4.ARC4Contract.approval_program() -> uint64:
approval_program:
    proto 0 1

approval_program_block@1:
    // arc_56/contract.py:42
    // class Contract(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz approval_program_bare_routing@13

approval_program_abi_routing@2:
    // arc_56/contract.py:42
    // class Contract(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x4c5c61ba // method "create()void"
    pushbytes 0x97e8e4a7 // method "struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64"
    pushbytes 0x76c4de11 // method "struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)"
    pushbytes 0xc1ca7709 // method "emits_error((uint64,string,(byte[],uint8)))void"
    pushbytes 0x6de762c2 // method "emitter()void"
    pushbytes 0x59fc5282 // method "conditional_emit(bool)void"
    pushbytes 0x9d9eecb0 // method "template_value()((byte[],uint8),uint64,string,uint8)"
    pushbytes 0xa2c9885f // method "with_constant_defaults(uint64,uint64,byte[],(uint64,uint64))void"
    uncover 8
    match approval_program_create_route@3 approval_program_struct_arg_route@4 approval_program_struct_return_route@5 approval_program_emits_error_route@6 approval_program_emitter_route@7 approval_program_conditional_emit_route@8 approval_program_template_value_route@9 approval_program_with_constant_defaults_route@10

approval_program_switch_case_default@11:

approval_program_switch_case_next@12:

approval_program_after_if_else@18:
    // arc_56/contract.py:42
    // class Contract(ARC4Contract):
    intc_0 // 0

approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19:
    retsub

approval_program_with_constant_defaults_route@10:
    // arc_56/contract.py:120-127
    // @arc4.abimethod(
    //     default_args={
    //         "a": arc4.UInt64(123),
    //         "c": Bytes(b"123"),
    //         "b": UInt64(234),
    //         "d": EventOnly(x=arc4.UInt64(1), y=arc4.UInt64(2)),
    //     }
    // )
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc_56/contract.py:42
    // class Contract(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    // arc_56/contract.py:120-127
    // @arc4.abimethod(
    //     default_args={
    //         "a": arc4.UInt64(123),
    //         "c": Bytes(b"123"),
    //         "b": UInt64(234),
    //         "d": EventOnly(x=arc4.UInt64(1), y=arc4.UInt64(2)),
    //     }
    // )
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub with_constant_defaults
    intc_1 // 1
    b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19

approval_program_template_value_route@9:
    // arc_56/contract.py:111
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub template_value
    cover 3
    cover 2
    swap
    cover 2
    itob
    cover 2
    dup
    len
    itob
    extract 6 2
    swap
    concat
    cover 2
    pushint 13 // 13
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    dig 1
    len
    pushint 13 // 13
    +
    swap
    uncover 3
    concat
    swap
    itob
    extract 6 2
    concat
    uncover 3
    concat
    swap
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19

approval_program_conditional_emit_route@8:
    // arc_56/contract.py:102
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc_56/contract.py:42
    // class Contract(ARC4Contract):
    txna ApplicationArgs 1
    intc_0 // 0
    getbit
    // arc_56/contract.py:102
    // @arc4.abimethod()
    callsub conditional_emit
    intc_1 // 1
    b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19

approval_program_emitter_route@7:
    // arc_56/contract.py:92
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub emitter
    intc_1 // 1
    b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19

approval_program_emits_error_route@6:
    // arc_56/contract.py:88
    // @arc4.abimethod(name="emits_error", readonly=True)
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc_56/contract.py:42
    // class Contract(ARC4Contract):
    txna ApplicationArgs 1
    // arc_56/contract.py:88
    // @arc4.abimethod(name="emits_error", readonly=True)
    callsub errors
    intc_1 // 1
    b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19

approval_program_struct_return_route@5:
    // arc_56/contract.py:83
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc_56/contract.py:42
    // class Contract(ARC4Contract):
    txna ApplicationArgs 1
    // arc_56/contract.py:83
    // @arc4.abimethod(readonly=True)
    callsub struct_return
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19

approval_program_struct_arg_route@4:
    // arc_56/contract.py:77
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // arc_56/contract.py:42
    // class Contract(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // arc_56/contract.py:77
    // @arc4.abimethod()
    callsub struct_arg
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19

approval_program_create_route@3:
    // arc_56/contract.py:69
    // @arc4.abimethod(create="allow", allow_actions=["NoOp", "OptIn"])
    txn OnCompletion
    intc_1 // 1
    swap
    shl
    intc_2 // 3
    &
    assert // OnCompletion is not one of NoOp, OptIn
    callsub create
    intc_1 // 1
    b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19

approval_program_bare_routing@13:
    // arc_56/contract.py:42
    // class Contract(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    intc_1 // 1
    pushint 5 // 5
    uncover 3
    match approval_program_bare_create@14 approval_program_bare_create@14 approval_program_transient@15

approval_program_switch_case_default@16:

approval_program_switch_case_next@17:
    b approval_program_after_if_else@18

approval_program_transient@15:
    // arc_56/contract.py:73
    // @arc4.baremethod(create="require", allow_actions=["DeleteApplication"])
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    callsub transient
    intc_1 // 1
    b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19

approval_program_bare_create@14:
    // arc_56/contract.py:65
    // @arc4.baremethod(create="allow", allow_actions=["NoOp", "OptIn"])
    callsub bare_create
    intc_1 // 1
    b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19


// test_cases.arc_56.contract.Contract.create() -> void:
create:
    // arc_56/contract.py:69-70
    // @arc4.abimethod(create="allow", allow_actions=["NoOp", "OptIn"])
    // def create(self) -> None:
    proto 0 0
    retsub


// test_cases.arc_56.contract.Contract.struct_arg(arg: bytes, shared: bytes) -> uint64:
struct_arg:
    // arc_56/contract.py:77-78
    // @arc4.abimethod()
    // def struct_arg(self, arg: TopLevelStruct, shared: SharedStruct) -> UInt64:
    proto 2 1
    // arc_56/contract.py:80
    // assert arg.shared == shared, "this might error"
    frame_dig -2
    intc_3 // 10
    extract_uint16
    frame_dig -2
    len
    frame_dig -2
    uncover 2
    uncover 2
    substring3
    frame_dig -1
    ==
    assert // this might error
    // arc_56/contract.py:81
    // return UInt64(42)
    pushint 42 // 42
    retsub


// test_cases.arc_56.contract.Contract.struct_return(arg: bytes) -> bytes:
struct_return:
    // arc_56/contract.py:83-84
    // @arc4.abimethod(readonly=True)
    // def struct_return(self, arg: TopLevelStruct) -> SharedStruct:
    proto 1 1
    // arc_56/contract.py:85
    // assert arg.shared == echo(arg.shared), "this won't error"
    frame_dig -1
    intc_3 // 10
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -1
    intc_3 // 10
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    callsub echo
    pop
    ==
    assert // this won't error
    // arc_56/contract.py:86
    // return arg.shared
    frame_dig -1
    intc_3 // 10
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    retsub


// test_cases.arc_56.contract.echo(s: bytes) -> bytes, bytes:
echo:
    // arc_56/contract.py:135-136
    // @subroutine
    // def echo(s: SharedStruct) -> SharedStruct:
    proto 1 2
    // arc_56/contract.py:137
    // return s
    frame_dig -1
    dup
    retsub


// test_cases.arc_56.contract.Contract.errors(arg: bytes) -> void:
errors:
    // arc_56/contract.py:88-89
    // @arc4.abimethod(name="emits_error", readonly=True)
    // def errors(self, arg: TopLevelStruct) -> None:
    proto 1 0
    // arc_56/contract.py:90
    // assert arg.a.bytes == arc4.UInt8(0).bytes, "this will error"
    frame_dig -1
    intc_0 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    pushbytes 0x00
    ==
    assert // this will error
    retsub


// test_cases.arc_56.contract.Contract.emitter() -> void:
emitter:
    // arc_56/contract.py:92-93
    // @arc4.abimethod()
    // def emitter(self) -> None:
    proto 0 0
    // arc_56/contract.py:94
    // arc4.emit(SharedStruct(foo=arc4.DynamicBytes(b"hello1"), bar=arc4.UInt8(42)))
    bytec 4 // 0x68656c6c6f31
    len
    itob
    extract 6 2
    bytec 4 // 0x68656c6c6f31
    concat
    intc_2 // 3
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    bytec_2 // 0x2a
    concat
    swap
    concat
    pushbytes 0xd93f374e // method "SharedStruct(byte[],uint8)"
    swap
    concat
    log
    // arc_56/contract.py:98
    // String("hello"),
    bytec 5 // "hello"
    len
    itob
    extract 6 2
    bytec 5 // "hello"
    concat
    // arc_56/contract.py:99
    // SharedStruct(foo=arc4.DynamicBytes(b"hello2"), bar=arc4.UInt8(42)),
    bytec 6 // 0x68656c6c6f32
    len
    itob
    extract 6 2
    bytec 6 // 0x68656c6c6f32
    concat
    intc_2 // 3
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    bytec_2 // 0x2a
    concat
    swap
    concat
    // arc_56/contract.py:96-100
    // arc4.emit(
    //     "Anonymous",
    //     String("hello"),
    //     SharedStruct(foo=arc4.DynamicBytes(b"hello2"), bar=arc4.UInt8(42)),
    // )
    pushint 4 // 4
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    dig 2
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    pushbytes 0x1e72af4e // method "Anonymous(string,(byte[],uint8))"
    swap
    concat
    log
    retsub


// test_cases.arc_56.contract.Contract.conditional_emit(should_emit: uint64) -> void:
conditional_emit:
    // arc_56/contract.py:102-103
    // @arc4.abimethod()
    // def conditional_emit(self, should_emit: bool) -> None:
    proto 1 0
    // arc_56/contract.py:104
    // if should_emit:
    frame_dig -1
    bz conditional_emit_after_if_else@2

conditional_emit_if_body@1:
    // arc_56/contract.py:107
    // EventOnly(arc4.UInt64(42), arc4.UInt64(43)),
    bytec_0 // 0x
    pushbytes 0x000000000000002a
    concat
    pushbytes 0x000000000000002b
    concat
    // arc_56/contract.py:108
    // SharedStruct(foo=arc4.DynamicBytes(b"hello3"), bar=arc4.UInt8(42)),
    bytec 7 // 0x68656c6c6f33
    len
    itob
    extract 6 2
    bytec 7 // 0x68656c6c6f33
    concat
    intc_2 // 3
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    bytec_2 // 0x2a
    concat
    swap
    concat
    // arc_56/contract.py:105-109
    // arc4.emit(
    //     "Anonymous2",
    //     EventOnly(arc4.UInt64(42), arc4.UInt64(43)),
    //     SharedStruct(foo=arc4.DynamicBytes(b"hello3"), bar=arc4.UInt8(42)),
    // )
    bytec_0 // 0x
    uncover 2
    concat
    pushint 18 // 18
    itob
    extract 6 2
    concat
    swap
    concat
    pushbytes 0x11c547ba // method "Anonymous2((uint64,uint64),(byte[],uint8))"
    swap
    concat
    log

conditional_emit_after_if_else@2:
    retsub


// test_cases.arc_56.contract.Contract.template_value() -> bytes, uint64, bytes, bytes:
template_value:
    // arc_56/contract.py:111-112
    // @arc4.abimethod()
    // def template_value(self) -> tuple[SharedStruct, UInt64, String, arc4.UInt8]:
    proto 0 4
    // arc_56/contract.py:114
    // TemplateVar[SharedStruct]("STRUCT"),
    bytec 8 // TMPL_STRUCT
    // arc_56/contract.py:115
    // TemplateVar[UInt64]("AVM_UINT64"),
    intc 4 // TMPL_AVM_UINT64
    // arc_56/contract.py:116
    // TemplateVar[String]("AVM_STRING"),
    bytec 9 // TMPL_AVM_STRING
    // arc_56/contract.py:117
    // TemplateVar[arc4.UInt8]("ARC4_UINT8"),
    bytec 10 // TMPL_ARC4_UINT8
    // arc_56/contract.py:113-118
    // return (
    //     TemplateVar[SharedStruct]("STRUCT"),
    //     TemplateVar[UInt64]("AVM_UINT64"),
    //     TemplateVar[String]("AVM_STRING"),
    //     TemplateVar[arc4.UInt8]("ARC4_UINT8"),
    // )
    retsub


// test_cases.arc_56.contract.Contract.with_constant_defaults(a: bytes, b: uint64, c: bytes, d: bytes) -> void:
with_constant_defaults:
    // arc_56/contract.py:120-128
    // @arc4.abimethod(
    //     default_args={
    //         "a": arc4.UInt64(123),
    //         "c": Bytes(b"123"),
    //         "b": UInt64(234),
    //         "d": EventOnly(x=arc4.UInt64(1), y=arc4.UInt64(2)),
    //     }
    // )
    // def with_constant_defaults(self, a: arc4.UInt64, b: UInt64, c: Bytes, d: EventOnly) -> None:
    proto 4 0
    // arc_56/contract.py:129
    // assert a
    frame_dig -4
    bytec_3 // 0x0000000000000000
    !=
    assert
    // arc_56/contract.py:130
    // assert b
    frame_dig -3
    intc_0 // 0
    !=
    assert
    // arc_56/contract.py:131
    // assert c
    frame_dig -2
    len
    intc_0 // 0
    !=
    assert
    // arc_56/contract.py:132
    // assert d.x or d.y
    frame_dig -1
    intc_0 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    bytec_3 // 0x0000000000000000
    !=
    bnz with_constant_defaults_bool_true@2

with_constant_defaults_or_contd@1:
    // arc_56/contract.py:132
    // assert d.x or d.y
    frame_dig -1
    pushint 8 // 8
    dup
    extract3 // on error: Index access is out of bounds
    bytec_3 // 0x0000000000000000
    !=
    bz with_constant_defaults_bool_false@3

with_constant_defaults_bool_true@2:
    intc_1 // 1

with_constant_defaults_bool_merge@4:
    // arc_56/contract.py:132
    // assert d.x or d.y
    assert
    retsub

with_constant_defaults_bool_false@3:
    intc_0 // 0
    b with_constant_defaults_bool_merge@4


// test_cases.arc_56.contract.Contract.bare_create() -> void:
bare_create:
    // arc_56/contract.py:65-66
    // @arc4.baremethod(create="allow", allow_actions=["NoOp", "OptIn"])
    // def bare_create(self) -> None:
    proto 0 0
    retsub


// test_cases.arc_56.contract.Contract.transient() -> void:
transient:
    // arc_56/contract.py:73-74
    // @arc4.baremethod(create="require", allow_actions=["DeleteApplication"])
    // def transient(self) -> None:
    proto 0 0
    retsub
