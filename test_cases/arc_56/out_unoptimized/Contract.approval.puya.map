{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuKA;;;AAEI;;AAAA;AAAA;;;;;AAjFJ;;;AAGe;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAP;AAER;;;AAEe;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAmB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAL;;;AAAA;AAAd;AAAP;AACO;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAP;AAER;;;AAEe;;AAAA;AAAA;AAAA;AAAe;;;AAAf;AAAP;;AAI2B;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAjB;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAmD;AAAnD;AAAA;AAAA;AAAV;;;;;;AAAA;AAAA;AAAA;AAII;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACiB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAjB;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAmD;AAAnD;AAAA;AAAA;AAHJ;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAMR;;;AAEA;;AAAA;;;AAGgB;AAAU;;;;;;;;;;AAAV;AAA2B;;;;;;;;;;AAA3B;AACiB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAjB;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAmD;AAAnD;AAAA;AAAA;AAHJ;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AASA;;AACA;;AACA;;AACA;;AAJJ;AAOR;;;AAyBe;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;;;;AAAP;AACO;;AAAA;AAAA;AAAA;;;AAAQ;;AAAA;AAAA;AAAA;AAAR;;;;AAAP;AACS;AAAF;;AAAA;AAAA;AAAE;AAAF;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAQ;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAR;AAAP;AACO;;AAAA;AAAA;AAAY;;AAAZ;AAAP;AACO;;AAAK;;AAAL;AAAP;AACO;;AAAK;;;AAAL;AAAP;;;;;;;;;;AA/GR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;AA8EK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9EL;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AA8EK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5DL;;;AAAA;AAAA;AA4DK;;;AAAA;;;;AAVA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9CL;;;AA8CK;;;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAzCL;;;AAyCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAnCL;;;AAAA;;;AAmCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AARA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;AA3BL;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;;;AA+BK;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AARA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 10 TMPL_AVM_UINT64"
    },
    "8": {
      "op": "bytecblock 0x 0x2a 0x151f7c75 0x68656c6c6f31 \"hello\" 0x68656c6c6f32 0x68656c6c6f33 0x6869 TMPL_STRUCT TMPL_AVM_STRING TMPL_ARC4_UINT8"
    },
    "64": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "66": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "69": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.__init__",
      "op": "callsub __init__"
    },
    "72": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "75": {
      "op": "return",
      "stack_out": []
    },
    "76": {
      "subroutine": "test_cases.arc_56.contract.echo",
      "params": {
        "s#0": "bytes"
      },
      "block": "echo",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "79": {
      "block": "echo_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "s#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)"
      ]
    },
    "81": {
      "op": "dup",
      "stack_out": [
        "s#0 (copy)",
        "s#0 (copy)"
      ]
    },
    "82": {
      "retsub": true,
      "op": "retsub"
    },
    "83": {
      "subroutine": "test_cases.arc_56.contract.Contract.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "84": {
      "subroutine": "test_cases.arc_56.contract.Contract.bare_create",
      "params": {},
      "block": "bare_create_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "85": {
      "subroutine": "test_cases.arc_56.contract.Contract.create",
      "params": {},
      "block": "create_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "86": {
      "subroutine": "test_cases.arc_56.contract.Contract.transient",
      "params": {},
      "block": "transient_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "87": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_arg",
      "params": {
        "arg#0": "bytes",
        "shared#0": "bytes"
      },
      "block": "struct_arg",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "90": {
      "block": "struct_arg_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "92": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "10"
      ]
    },
    "93": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#1"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#1"
      ]
    },
    "94": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%extract_uint16%0#1",
        "arg#0 (copy)"
      ]
    },
    "96": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1"
      ]
    },
    "97": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1",
        "arg#0 (copy)"
      ]
    },
    "99": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%len%0#1",
        "arg#0 (copy)",
        "aggregate%extract_uint16%0#1"
      ]
    },
    "101": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0 (copy)",
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1"
      ]
    },
    "103": {
      "op": "substring3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "104": {
      "op": "frame_dig -1",
      "defined_out": [
        "shared#0 (copy)",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "shared#0 (copy)"
      ]
    },
    "106": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "107": {
      "error": "this might error",
      "op": "assert // this might error",
      "stack_out": []
    },
    "108": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42"
      ],
      "stack_out": [
        "42"
      ]
    },
    "110": {
      "retsub": true,
      "op": "retsub"
    },
    "111": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_return",
      "params": {
        "arg#0": "bytes"
      },
      "block": "struct_return",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "114": {
      "block": "struct_return_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "116": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "10"
      ]
    },
    "117": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#1"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#1"
      ]
    },
    "118": {
      "op": "frame_dig -1",
      "stack_out": [
        "aggregate%extract_uint16%0#1",
        "arg#0 (copy)"
      ]
    },
    "120": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1"
      ]
    },
    "121": {
      "op": "frame_dig -1",
      "stack_out": [
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1",
        "arg#0 (copy)"
      ]
    },
    "123": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%len%0#1",
        "arg#0 (copy)",
        "aggregate%extract_uint16%0#1"
      ]
    },
    "125": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0 (copy)",
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1"
      ]
    },
    "127": {
      "op": "substring3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "128": {
      "op": "frame_dig -1",
      "stack_out": [
        "tuple_item%0#0",
        "arg#0 (copy)"
      ]
    },
    "130": {
      "op": "intc_3 // 10",
      "stack_out": [
        "tuple_item%0#0",
        "arg#0 (copy)",
        "10"
      ]
    },
    "131": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#1",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%extract_uint16%1#1"
      ]
    },
    "132": {
      "op": "frame_dig -1",
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%extract_uint16%1#1",
        "arg#0 (copy)"
      ]
    },
    "134": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#1",
        "aggregate%len%1#1",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%extract_uint16%1#1",
        "aggregate%len%1#1"
      ]
    },
    "135": {
      "op": "frame_dig -1",
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%extract_uint16%1#1",
        "aggregate%len%1#1",
        "arg#0 (copy)"
      ]
    },
    "137": {
      "op": "uncover 2",
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%len%1#1",
        "arg#0 (copy)",
        "aggregate%extract_uint16%1#1"
      ]
    },
    "139": {
      "op": "uncover 2",
      "stack_out": [
        "tuple_item%0#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%1#1",
        "aggregate%len%1#1"
      ]
    },
    "141": {
      "op": "substring3",
      "defined_out": [
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "tuple_item%1#0"
      ]
    },
    "142": {
      "callsub": "test_cases.arc_56.contract.echo",
      "op": "callsub echo",
      "defined_out": [
        "echo%0#0",
        "echo%1#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "echo%0#0",
        "echo%1#0"
      ]
    },
    "145": {
      "op": "pop",
      "stack_out": [
        "tuple_item%0#0",
        "echo%0#0"
      ]
    },
    "146": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "147": {
      "error": "this won't error",
      "op": "assert // this won't error",
      "stack_out": []
    },
    "148": {
      "op": "frame_dig -1",
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "150": {
      "op": "intc_3 // 10",
      "stack_out": [
        "arg#0 (copy)",
        "10"
      ]
    },
    "151": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#1"
      ],
      "stack_out": [
        "aggregate%extract_uint16%2#1"
      ]
    },
    "152": {
      "op": "frame_dig -1",
      "stack_out": [
        "aggregate%extract_uint16%2#1",
        "arg#0 (copy)"
      ]
    },
    "154": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%2#1",
        "aggregate%len%2#1"
      ],
      "stack_out": [
        "aggregate%extract_uint16%2#1",
        "aggregate%len%2#1"
      ]
    },
    "155": {
      "op": "frame_dig -1",
      "stack_out": [
        "aggregate%extract_uint16%2#1",
        "aggregate%len%2#1",
        "arg#0 (copy)"
      ]
    },
    "157": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%len%2#1",
        "arg#0 (copy)",
        "aggregate%extract_uint16%2#1"
      ]
    },
    "159": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0 (copy)",
        "aggregate%extract_uint16%2#1",
        "aggregate%len%2#1"
      ]
    },
    "161": {
      "op": "substring3",
      "defined_out": [
        "tuple_item%2#0"
      ],
      "stack_out": [
        "tuple_item%2#0"
      ]
    },
    "162": {
      "retsub": true,
      "op": "retsub"
    },
    "163": {
      "subroutine": "test_cases.arc_56.contract.Contract.errors",
      "params": {
        "arg#0": "bytes"
      },
      "block": "errors",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "166": {
      "block": "errors_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "168": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "0"
      ]
    },
    "169": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "0",
        "8"
      ]
    },
    "170": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "171": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "0x00"
      ]
    },
    "174": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "175": {
      "error": "this will error",
      "op": "assert // this will error",
      "stack_out": []
    },
    "176": {
      "retsub": true,
      "op": "retsub"
    },
    "177": {
      "subroutine": "test_cases.arc_56.contract.Contract.emitter",
      "params": {},
      "block": "emitter_block@0",
      "stack_in": [],
      "op": "bytec_3 // 0x68656c6c6f31",
      "defined_out": [
        "0x68656c6c6f31"
      ],
      "stack_out": [
        "0x68656c6c6f31"
      ]
    },
    "178": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#1"
      ],
      "stack_out": [
        "aggregate%length%0#1"
      ]
    },
    "179": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#1"
      ]
    },
    "180": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#1"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#1"
      ]
    },
    "183": {
      "op": "bytec_3 // 0x68656c6c6f31",
      "stack_out": [
        "aggregate%length_uint16%0#1",
        "0x68656c6c6f31"
      ]
    },
    "184": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "185": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "187": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#1"
      ]
    },
    "188": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "191": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%offset_as_uint16%0#1",
        "0x"
      ]
    },
    "192": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "193": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded%0#1"
      ]
    },
    "194": {
      "op": "bytec_1 // 0x2a",
      "defined_out": [
        "0x2a",
        "aggregate%encoded%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded%0#1",
        "0x2a"
      ]
    },
    "195": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded%1#1"
      ]
    },
    "196": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%1#1",
        "tmp%0#0"
      ]
    },
    "197": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "198": {
      "op": "pushbytes 0xd93f374e // method \"SharedStruct(byte[],uint8)\"",
      "defined_out": [
        "Method(SharedStruct(byte[],uint8))",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "Method(SharedStruct(byte[],uint8))"
      ]
    },
    "204": {
      "op": "swap",
      "stack_out": [
        "Method(SharedStruct(byte[],uint8))",
        "tmp%1#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "206": {
      "op": "log",
      "stack_out": []
    },
    "207": {
      "op": "bytec 4 // \"hello\"",
      "defined_out": [
        "\"hello\""
      ],
      "stack_out": [
        "\"hello\""
      ]
    },
    "209": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#1"
      ],
      "stack_out": [
        "aggregate%length%1#1"
      ]
    },
    "210": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#1"
      ],
      "stack_out": [
        "aggregate%as_bytes%2#1"
      ]
    },
    "211": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#1"
      ],
      "stack_out": [
        "aggregate%length_uint16%1#1"
      ]
    },
    "214": {
      "op": "bytec 4 // \"hello\"",
      "stack_out": [
        "aggregate%length_uint16%1#1",
        "\"hello\""
      ]
    },
    "216": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "217": {
      "op": "bytec 5 // 0x68656c6c6f32",
      "defined_out": [
        "0x68656c6c6f32",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x68656c6c6f32"
      ]
    },
    "219": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%length%2#1"
      ]
    },
    "220": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%as_bytes%3#1"
      ]
    },
    "221": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%length_uint16%2#1"
      ]
    },
    "224": {
      "op": "bytec 5 // 0x68656c6c6f32",
      "stack_out": [
        "tmp%2#0",
        "aggregate%length_uint16%2#1",
        "0x68656c6c6f32"
      ]
    },
    "226": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "227": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "3"
      ]
    },
    "229": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#1",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%as_bytes%4#1"
      ]
    },
    "230": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%1#1",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "233": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%offset_as_uint16%1#1",
        "0x"
      ]
    },
    "234": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "0x",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "235": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%2#1",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%encoded%2#1"
      ]
    },
    "236": {
      "op": "bytec_1 // 0x2a",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%encoded%2#1",
        "0x2a"
      ]
    },
    "237": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%3#1",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%encoded%3#1"
      ]
    },
    "238": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%3#1",
        "tmp%3#0"
      ]
    },
    "239": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "240": {
      "op": "dig 1",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%2#0 (copy)"
      ]
    },
    "242": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%2#1",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%data_length%2#1"
      ]
    },
    "243": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%data_length%2#1",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%data_length%2#1",
        "4"
      ]
    },
    "245": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%current_tail_offset%2#1"
      ]
    },
    "246": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%current_tail_offset%2#1",
        "4"
      ]
    },
    "248": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#1",
        "aggregate%current_tail_offset%2#1",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%as_bytes%5#1"
      ]
    },
    "249": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%offset_as_uint16%2#1",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%offset_as_uint16%2#1"
      ]
    },
    "252": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%offset_as_uint16%2#1",
        "0x"
      ]
    },
    "253": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%current_tail_offset%2#1",
        "0x",
        "aggregate%offset_as_uint16%2#1"
      ]
    },
    "254": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%4#1",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%current_tail_offset%2#1",
        "aggregate%encoded%4#1"
      ]
    },
    "255": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%encoded%4#1",
        "aggregate%current_tail_offset%2#1"
      ]
    },
    "256": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#1",
        "aggregate%encoded%4#1",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%encoded%4#1",
        "aggregate%as_bytes%6#1"
      ]
    },
    "257": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%4#1",
        "aggregate%offset_as_uint16%3#1",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%encoded%4#1",
        "aggregate%offset_as_uint16%3#1"
      ]
    },
    "260": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%5#1",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%encoded%5#1"
      ]
    },
    "261": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "aggregate%encoded%5#1",
        "tmp%2#0"
      ]
    },
    "263": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%concat%2#1"
      ]
    },
    "264": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%2#1",
        "tmp%4#0"
      ]
    },
    "265": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "266": {
      "op": "pushbytes 0x1e72af4e // method \"Anonymous(string,(byte[],uint8))\"",
      "defined_out": [
        "Method(Anonymous(string,(byte[],uint8)))",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(Anonymous(string,(byte[],uint8)))"
      ]
    },
    "272": {
      "op": "swap",
      "stack_out": [
        "Method(Anonymous(string,(byte[],uint8)))",
        "tmp%5#0"
      ]
    },
    "273": {
      "op": "concat",
      "defined_out": [
        "event%1#0"
      ],
      "stack_out": [
        "event%1#0"
      ]
    },
    "274": {
      "op": "log",
      "stack_out": []
    },
    "275": {
      "retsub": true,
      "op": "retsub"
    },
    "276": {
      "subroutine": "test_cases.arc_56.contract.Contract.conditional_emit",
      "params": {
        "should_emit#0": "uint64"
      },
      "block": "conditional_emit",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "279": {
      "block": "conditional_emit_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "should_emit#0 (copy)"
      ],
      "stack_out": [
        "should_emit#0 (copy)"
      ]
    },
    "281": {
      "op": "bz conditional_emit_after_if_else@2",
      "stack_out": []
    },
    "284": {
      "block": "conditional_emit_if_body@1",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "285": {
      "op": "pushbytes 0x000000000000002a",
      "defined_out": [
        "0x",
        "0x000000000000002a"
      ],
      "stack_out": [
        "0x",
        "0x000000000000002a"
      ]
    },
    "295": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1"
      ]
    },
    "296": {
      "op": "pushbytes 0x000000000000002b",
      "defined_out": [
        "0x000000000000002b",
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1",
        "0x000000000000002b"
      ]
    },
    "306": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "307": {
      "op": "bytec 6 // 0x68656c6c6f33",
      "defined_out": [
        "0x68656c6c6f33",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x68656c6c6f33"
      ]
    },
    "309": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#1"
      ]
    },
    "310": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#1"
      ]
    },
    "311": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#1"
      ]
    },
    "314": {
      "op": "bytec 6 // 0x68656c6c6f33",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#1",
        "0x68656c6c6f33"
      ]
    },
    "316": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "317": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "3"
      ]
    },
    "319": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%as_bytes%1#1"
      ]
    },
    "320": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "323": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%offset_as_uint16%0#1",
        "0x"
      ]
    },
    "324": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "325": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%2#1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%encoded%2#1"
      ]
    },
    "326": {
      "op": "bytec_1 // 0x2a",
      "defined_out": [
        "0x2a",
        "aggregate%encoded%2#1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%encoded%2#1",
        "0x2a"
      ]
    },
    "327": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%3#1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%encoded%3#1"
      ]
    },
    "328": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "aggregate%encoded%3#1",
        "tmp%1#0"
      ]
    },
    "329": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "330": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "0x"
      ]
    },
    "331": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "333": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%4#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%4#1"
      ]
    },
    "334": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "aggregate%encoded%4#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%4#1",
        "18"
      ]
    },
    "336": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#1",
        "aggregate%encoded%4#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%4#1",
        "aggregate%as_bytes%2#1"
      ]
    },
    "337": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded%4#1",
        "aggregate%offset_as_uint16%1#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%4#1",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "340": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%5#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%encoded%5#1"
      ]
    },
    "341": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%5#1",
        "tmp%2#0"
      ]
    },
    "342": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "343": {
      "op": "pushbytes 0x11c547ba // method \"Anonymous2((uint64,uint64),(byte[],uint8))\"",
      "defined_out": [
        "Method(Anonymous2((uint64,uint64),(byte[],uint8)))",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "Method(Anonymous2((uint64,uint64),(byte[],uint8)))"
      ]
    },
    "349": {
      "op": "swap",
      "stack_out": [
        "Method(Anonymous2((uint64,uint64),(byte[],uint8)))",
        "tmp%3#0"
      ]
    },
    "350": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "351": {
      "op": "log",
      "stack_out": []
    },
    "352": {
      "block": "conditional_emit_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "353": {
      "subroutine": "test_cases.arc_56.contract.Contract.template_value",
      "params": {},
      "block": "template_value_block@0",
      "stack_in": [],
      "op": "bytec 8 // TMPL_STRUCT",
      "defined_out": [
        "TMPL_STRUCT"
      ],
      "stack_out": [
        "TMPL_STRUCT"
      ]
    },
    "355": {
      "op": "intc 4 // TMPL_AVM_UINT64",
      "defined_out": [
        "TMPL_AVM_UINT64",
        "TMPL_STRUCT"
      ],
      "stack_out": [
        "TMPL_STRUCT",
        "TMPL_AVM_UINT64"
      ]
    },
    "357": {
      "op": "bytec 9 // TMPL_AVM_STRING",
      "defined_out": [
        "TMPL_AVM_STRING",
        "TMPL_AVM_UINT64",
        "TMPL_STRUCT"
      ],
      "stack_out": [
        "TMPL_STRUCT",
        "TMPL_AVM_UINT64",
        "TMPL_AVM_STRING"
      ]
    },
    "359": {
      "op": "bytec 10 // TMPL_ARC4_UINT8",
      "defined_out": [
        "TMPL_ARC4_UINT8",
        "TMPL_AVM_STRING",
        "TMPL_AVM_UINT64",
        "TMPL_STRUCT"
      ],
      "stack_out": [
        "TMPL_STRUCT",
        "TMPL_AVM_UINT64",
        "TMPL_AVM_STRING",
        "TMPL_ARC4_UINT8"
      ]
    },
    "361": {
      "retsub": true,
      "op": "retsub"
    },
    "362": {
      "subroutine": "test_cases.arc_56.contract.Contract.with_constant_defaults",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64",
        "c#0": "bytes",
        "d#0": "bytes",
        "e.0#0": "uint64",
        "e.1#0": "bytes",
        "f#0": "bytes",
        "g#0": "bytes",
        "h#0": "uint64",
        "i#0": "uint64"
      },
      "block": "with_constant_defaults",
      "stack_in": [],
      "op": "proto 10 0"
    },
    "365": {
      "block": "with_constant_defaults_block@0",
      "stack_in": [],
      "op": "frame_dig -10",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "367": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x"
      ]
    },
    "368": {
      "op": "b!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "assert",
      "stack_out": []
    },
    "370": {
      "op": "frame_dig -9",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "372": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0"
      ]
    },
    "373": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "374": {
      "op": "assert",
      "stack_out": []
    },
    "375": {
      "op": "frame_dig -8",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "c#0 (copy)"
      ]
    },
    "377": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "378": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "379": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "380": {
      "op": "assert",
      "stack_out": []
    },
    "381": {
      "op": "frame_dig -7",
      "defined_out": [
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0 (copy)"
      ]
    },
    "383": {
      "op": "intc_0 // 0",
      "stack_out": [
        "d#0 (copy)",
        "0"
      ]
    },
    "384": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0 (copy)",
        "0",
        "8"
      ]
    },
    "385": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%1#0"
      ]
    },
    "386": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "reinterpret_biguint%1#0",
        "0x"
      ]
    },
    "387": {
      "op": "b!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "388": {
      "op": "bnz with_constant_defaults_bool_true@2",
      "stack_out": []
    },
    "391": {
      "block": "with_constant_defaults_or_contd@1",
      "stack_in": [],
      "op": "frame_dig -7",
      "defined_out": [
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0 (copy)"
      ]
    },
    "393": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0 (copy)",
        "8"
      ]
    },
    "394": {
      "op": "dup",
      "stack_out": [
        "d#0 (copy)",
        "8",
        "8"
      ]
    },
    "395": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "396": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "0x"
      ]
    },
    "397": {
      "op": "b!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "398": {
      "op": "bz with_constant_defaults_bool_false@3",
      "stack_out": []
    },
    "401": {
      "block": "with_constant_defaults_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "402": {
      "block": "with_constant_defaults_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "403": {
      "op": "frame_dig -6",
      "defined_out": [
        "e.0#0 (copy)"
      ],
      "stack_out": [
        "e.0#0 (copy)"
      ]
    },
    "405": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "e.0#0 (copy)"
      ],
      "stack_out": [
        "e.0#0 (copy)",
        "0"
      ]
    },
    "406": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "407": {
      "op": "bnz with_constant_defaults_bool_true@6",
      "stack_out": []
    },
    "410": {
      "block": "with_constant_defaults_or_contd@5",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "e.1#0 (copy)"
      ],
      "stack_out": [
        "e.1#0 (copy)"
      ]
    },
    "412": {
      "op": "len",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "413": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "414": {
      "op": "!=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "415": {
      "op": "bz with_constant_defaults_bool_false@7",
      "stack_out": []
    },
    "418": {
      "block": "with_constant_defaults_bool_true@6",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%1#0"
      ]
    },
    "419": {
      "block": "with_constant_defaults_bool_merge@8",
      "stack_in": [
        "or_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "420": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "421": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "0",
        "2"
      ],
      "stack_out": [
        "0",
        "2"
      ]
    },
    "423": {
      "op": "<",
      "defined_out": [
        "aggregate%lt%0#1"
      ],
      "stack_out": [
        "aggregate%lt%0#1"
      ]
    },
    "424": {
      "error": "index access is out of bounds",
      "op": "assert // index access is out of bounds",
      "stack_out": []
    },
    "425": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "426": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "0",
        "2"
      ]
    },
    "428": {
      "op": "*",
      "defined_out": [
        "aggregate%item_offset_offset%0#1"
      ],
      "stack_out": [
        "aggregate%item_offset_offset%0#1"
      ]
    },
    "429": {
      "op": "frame_dig -4",
      "defined_out": [
        "aggregate%item_offset_offset%0#1",
        "f#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item_offset_offset%0#1",
        "f#0 (copy)"
      ]
    },
    "431": {
      "op": "swap",
      "stack_out": [
        "f#0 (copy)",
        "aggregate%item_offset_offset%0#1"
      ]
    },
    "432": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_offset%0#1"
      ],
      "stack_out": [
        "aggregate%item_offset%0#1"
      ]
    },
    "433": {
      "op": "frame_dig -4",
      "stack_out": [
        "aggregate%item_offset%0#1",
        "f#0 (copy)"
      ]
    },
    "435": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%item_offset%0#1",
        "aggregate%item_offset%0#1 (copy)",
        "f#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item_offset%0#1",
        "f#0 (copy)",
        "aggregate%item_offset%0#1 (copy)"
      ]
    },
    "437": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_length%0#1",
        "aggregate%item_offset%0#1"
      ],
      "stack_out": [
        "aggregate%item_offset%0#1",
        "aggregate%item_length%0#1"
      ]
    },
    "438": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%item_length%0#1",
        "aggregate%item_offset%0#1"
      ],
      "stack_out": [
        "aggregate%item_offset%0#1",
        "aggregate%item_length%0#1",
        "1"
      ]
    },
    "439": {
      "op": "*",
      "defined_out": [
        "aggregate%item_length_in_bytes%0#1",
        "aggregate%item_offset%0#1"
      ],
      "stack_out": [
        "aggregate%item_offset%0#1",
        "aggregate%item_length_in_bytes%0#1"
      ]
    },
    "440": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "aggregate%item_offset%0#1",
        "aggregate%item_length_in_bytes%0#1",
        "2"
      ]
    },
    "442": {
      "op": "+",
      "defined_out": [
        "aggregate%item_head_tail_length%0#1",
        "aggregate%item_offset%0#1"
      ],
      "stack_out": [
        "aggregate%item_offset%0#1",
        "aggregate%item_head_tail_length%0#1"
      ]
    },
    "443": {
      "op": "frame_dig -4",
      "stack_out": [
        "aggregate%item_offset%0#1",
        "aggregate%item_head_tail_length%0#1",
        "f#0 (copy)"
      ]
    },
    "445": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item_head_tail_length%0#1",
        "f#0 (copy)",
        "aggregate%item_offset%0#1"
      ]
    },
    "447": {
      "op": "uncover 2",
      "stack_out": [
        "f#0 (copy)",
        "aggregate%item_offset%0#1",
        "aggregate%item_head_tail_length%0#1"
      ]
    },
    "449": {
      "op": "extract3",
      "defined_out": [
        "array_item%0#0"
      ],
      "stack_out": [
        "array_item%0#0"
      ]
    },
    "450": {
      "op": "bytec 7 // 0x6869",
      "defined_out": [
        "0x6869",
        "array_item%0#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "0x6869"
      ]
    },
    "452": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#1",
        "array_item%0#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "aggregate%length%0#1"
      ]
    },
    "453": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "array_item%0#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "aggregate%as_bytes%0#1"
      ]
    },
    "454": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#1",
        "array_item%0#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "aggregate%length_uint16%0#1"
      ]
    },
    "457": {
      "op": "bytec 7 // 0x6869",
      "stack_out": [
        "array_item%0#0",
        "aggregate%length_uint16%0#1",
        "0x6869"
      ]
    },
    "459": {
      "op": "concat",
      "defined_out": [
        "array_item%0#0",
        "encoded%0#0"
      ],
      "stack_out": [
        "array_item%0#0",
        "encoded%0#0"
      ]
    },
    "460": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "461": {
      "op": "assert",
      "stack_out": []
    },
    "462": {
      "op": "frame_dig -3",
      "defined_out": [
        "g#0 (copy)"
      ],
      "stack_out": [
        "g#0 (copy)"
      ]
    },
    "464": {
      "op": "intc_0 // 0",
      "stack_out": [
        "g#0 (copy)",
        "0"
      ]
    },
    "465": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0"
      ],
      "stack_out": [
        "array_length%0#0"
      ]
    },
    "466": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "array_length%0#0",
        "2"
      ]
    },
    "468": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "469": {
      "op": "assert",
      "stack_out": []
    },
    "470": {
      "op": "frame_dig -2",
      "defined_out": [
        "h#0 (copy)"
      ],
      "stack_out": [
        "h#0 (copy)"
      ]
    },
    "472": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "h#0 (copy)"
      ],
      "stack_out": [
        "h#0 (copy)",
        "42"
      ]
    },
    "474": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "475": {
      "op": "assert",
      "stack_out": []
    },
    "476": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0 (copy)"
      ]
    },
    "478": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0 (copy)",
        "1234"
      ]
    },
    "481": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "482": {
      "op": "assert",
      "stack_out": []
    },
    "483": {
      "retsub": true,
      "op": "retsub"
    },
    "484": {
      "block": "with_constant_defaults_bool_false@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%1#0"
      ]
    },
    "485": {
      "op": "b with_constant_defaults_bool_merge@8"
    },
    "488": {
      "block": "with_constant_defaults_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "489": {
      "op": "b with_constant_defaults_bool_merge@4"
    },
    "492": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "494": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "495": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "496": {
      "op": "bz approval_program_bare_routing@13",
      "stack_out": []
    },
    "499": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "502": {
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)"
      ]
    },
    "508": {
      "op": "pushbytes 0x97e8e4a7 // method \"struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64\"",
      "defined_out": [
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)"
      ]
    },
    "514": {
      "op": "pushbytes 0x76c4de11 // method \"struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)\"",
      "defined_out": [
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))"
      ]
    },
    "520": {
      "op": "pushbytes 0xc1ca7709 // method \"emits_error((uint64,string,(byte[],uint8)))void\"",
      "defined_out": [
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)"
      ]
    },
    "526": {
      "op": "pushbytes 0x6de762c2 // method \"emitter()void\"",
      "defined_out": [
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)"
      ]
    },
    "532": {
      "op": "pushbytes 0x59fc5282 // method \"conditional_emit(bool)void\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)"
      ]
    },
    "538": {
      "op": "pushbytes 0x9d9eecb0 // method \"template_value()((byte[],uint8),uint64,string,uint8)\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))"
      ]
    },
    "544": {
      "op": "pushbytes 0x5e8eef9a // method \"with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)"
      ]
    },
    "550": {
      "op": "uncover 8",
      "stack_out": [
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%2#0"
      ]
    },
    "552": {
      "op": "match approval_program_create_route@3 approval_program_struct_arg_route@4 approval_program_struct_return_route@5 approval_program_emits_error_route@6 approval_program_emitter_route@7 approval_program_conditional_emit_route@8 approval_program_template_value_route@9 approval_program_with_constant_defaults_route@10",
      "stack_out": []
    },
    "570": {
      "block": "approval_program_after_if_else@18",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "571": {
      "block": "approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "572": {
      "block": "approval_program_with_constant_defaults_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "574": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "NoOp"
      ]
    },
    "575": {
      "op": "==",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "576": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "577": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "579": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "0"
      ]
    },
    "580": {
      "op": "!=",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "581": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "582": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "585": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "588": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0"
      ]
    },
    "589": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "592": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "595": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "598": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "601": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "602": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "603": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "604": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#1",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract%0#1"
      ]
    },
    "605": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#1",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%item0%0#1"
      ]
    },
    "606": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#1",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "607": {
      "op": "dup",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#1",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "608": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#1",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "8"
      ]
    },
    "609": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#1",
        "aggregate%item0%0#1",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#1",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#1"
      ]
    },
    "610": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#1",
        "aggregate%extract_uint16%0#1",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "611": {
      "op": "dup",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#1",
        "aggregate%extract_uint16%0#1",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "612": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#1",
        "aggregate%item0%0#1",
        "aggregate%len%0#1",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#1",
        "aggregate%extract_uint16%0#1",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%len%0#1"
      ]
    },
    "613": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#1",
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "614": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#1",
        "aggregate%len%0#1",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#1"
      ]
    },
    "616": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#1",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#1",
        "aggregate%len%0#1"
      ]
    },
    "618": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#1",
        "aggregate%substring3%0#1",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#1",
        "aggregate%substring3%0#1"
      ]
    },
    "619": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "622": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0"
      ]
    },
    "625": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0"
      ]
    },
    "628": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "631": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0"
      ]
    },
    "632": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0",
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "635": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0",
        "tmp%51#0"
      ]
    },
    "636": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0",
        "tmp%51#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "638": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0",
        "tmp%51#0",
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0"
      ]
    },
    "640": {
      "op": "uncover 9",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0",
        "tmp%51#0",
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "642": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0",
        "tmp%51#0",
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "644": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0",
        "tmp%51#0",
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0"
      ]
    },
    "646": {
      "op": "uncover 9",
      "stack_out": [
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0",
        "tmp%51#0",
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "648": {
      "op": "uncover 9",
      "stack_out": [
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0",
        "tmp%51#0",
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0"
      ]
    },
    "650": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%50#0",
        "tmp%51#0",
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0"
      ]
    },
    "652": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%51#0",
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0"
      ]
    },
    "654": {
      "op": "uncover 9",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_Encoded((len+utf8[])[2])%0#0",
        "reinterpret_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%50#0",
        "tmp%51#0"
      ]
    },
    "656": {
      "callsub": "test_cases.arc_56.contract.Contract.with_constant_defaults",
      "op": "callsub with_constant_defaults",
      "stack_out": []
    },
    "659": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "660": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "663": {
      "block": "approval_program_template_value_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "665": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "NoOp"
      ]
    },
    "666": {
      "op": "==",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "667": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "668": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "670": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0"
      ]
    },
    "671": {
      "op": "!=",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "672": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "673": {
      "callsub": "test_cases.arc_56.contract.Contract.template_value",
      "op": "callsub template_value",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "676": {
      "op": "cover 3",
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "678": {
      "op": "cover 2",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "680": {
      "op": "swap",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0"
      ]
    },
    "681": {
      "op": "dup",
      "defined_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ]
    },
    "682": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#1",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%data_length%0#1"
      ]
    },
    "683": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "aggregate%data_length%0#1",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%data_length%0#1",
        "13"
      ]
    },
    "685": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "686": {
      "op": "cover 2",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%37#0",
        "tmp%36#0"
      ]
    },
    "688": {
      "op": "pushint 13 // 13",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%37#0",
        "tmp%36#0",
        "13"
      ]
    },
    "690": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#1",
        "aggregate%current_tail_offset%0#1",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%as_bytes%0#1"
      ]
    },
    "691": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%offset_as_uint16%0#1",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "694": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%current_tail_offset%0#1",
        "aggregate%offset_as_uint16%0#1",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%offset_as_uint16%0#1",
        "0x"
      ]
    },
    "695": {
      "op": "swap",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%37#0",
        "tmp%36#0",
        "0x",
        "aggregate%offset_as_uint16%0#1"
      ]
    },
    "696": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%37#0",
        "tmp%36#0",
        "aggregate%encoded%0#1"
      ]
    },
    "697": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%36#0",
        "aggregate%encoded%0#1",
        "tmp%37#0"
      ]
    },
    "699": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%0#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%36#0",
        "aggregate%encoded%0#1",
        "aggregate%as_Encoded(uint64)%1#1"
      ]
    },
    "700": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%1#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%36#0",
        "aggregate%encoded%1#1"
      ]
    },
    "701": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%1#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%38#0 (copy)",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%36#0",
        "aggregate%encoded%1#1",
        "tmp%38#0 (copy)"
      ]
    },
    "703": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%1#1",
        "aggregate%length%0#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%36#0",
        "aggregate%encoded%1#1",
        "aggregate%length%0#1"
      ]
    },
    "704": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%1#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%36#0",
        "aggregate%encoded%1#1",
        "aggregate%as_bytes%1#1"
      ]
    },
    "705": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%1#1",
        "aggregate%length_uint16%0#1",
        "tmp%36#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%38#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%36#0",
        "aggregate%encoded%1#1",
        "aggregate%length_uint16%0#1"
      ]
    },
    "708": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%39#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%36#0",
        "aggregate%encoded%1#1",
        "aggregate%length_uint16%0#1",
        "tmp%38#0"
      ]
    },
    "710": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded%1#1",
        "tmp%36#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "aggregate%current_tail_offset%0#1",
        "tmp%36#0",
        "aggregate%encoded%1#1",
        "aggregate%as_Encoded(len+utf8[])%0#1"
      ]
    },
    "711": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%encoded%1#1",
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "713": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%as_bytes%2#1",
        "aggregate%encoded%1#1",
        "tmp%36#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%encoded%1#1",
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%as_bytes%2#1"
      ]
    },
    "714": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%encoded%1#1",
        "aggregate%offset_as_uint16%1#1",
        "tmp%36#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%encoded%1#1",
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "717": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%offset_as_uint16%1#1",
        "aggregate%encoded%1#1"
      ]
    },
    "719": {
      "op": "swap",
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%encoded%1#1",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "720": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%encoded%2#1",
        "tmp%36#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%36#0",
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%encoded%2#1"
      ]
    },
    "721": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%36#0",
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%encoded%2#1",
        "tmp%39#0"
      ]
    },
    "723": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%encoded%3#1",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%encoded%3#1"
      ]
    },
    "724": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%encoded%3#1",
        "tmp%36#0"
      ]
    },
    "726": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%concat%0#1"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#1",
        "aggregate%concat%0#1"
      ]
    },
    "727": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#1",
        "aggregate%as_Encoded(len+utf8[])%0#1"
      ]
    },
    "728": {
      "op": "concat",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "729": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "0x151f7c75"
      ]
    },
    "730": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%40#0"
      ]
    },
    "731": {
      "op": "concat",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "732": {
      "op": "log",
      "stack_out": []
    },
    "733": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "734": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "737": {
      "block": "approval_program_conditional_emit_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "739": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "NoOp"
      ]
    },
    "740": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "741": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "742": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "744": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "0"
      ]
    },
    "745": {
      "op": "!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "746": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "747": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "750": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "751": {
      "op": "getbit",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "752": {
      "callsub": "test_cases.arc_56.contract.Contract.conditional_emit",
      "op": "callsub conditional_emit",
      "stack_out": []
    },
    "755": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "756": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "759": {
      "block": "approval_program_emitter_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "761": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "NoOp"
      ]
    },
    "762": {
      "op": "==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "763": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "764": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "766": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0"
      ]
    },
    "767": {
      "op": "!=",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "768": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "769": {
      "callsub": "test_cases.arc_56.contract.Contract.emitter",
      "op": "callsub emitter"
    },
    "772": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "773": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "776": {
      "block": "approval_program_emits_error_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "778": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "NoOp"
      ]
    },
    "779": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "780": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "781": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "783": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0"
      ]
    },
    "784": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "785": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "786": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%2#0"
      ]
    },
    "789": {
      "callsub": "test_cases.arc_56.contract.Contract.errors",
      "op": "callsub errors",
      "stack_out": []
    },
    "792": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "793": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "796": {
      "block": "approval_program_struct_return_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "798": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "799": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "800": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "801": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "803": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "804": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "805": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "806": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%1#0"
      ]
    },
    "809": {
      "callsub": "test_cases.arc_56.contract.Contract.struct_return",
      "op": "callsub struct_return",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "812": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "813": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%17#0"
      ]
    },
    "814": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "815": {
      "op": "log",
      "stack_out": []
    },
    "816": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "817": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "820": {
      "block": "approval_program_struct_arg_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "822": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "NoOp"
      ]
    },
    "823": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "824": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "825": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "827": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "828": {
      "op": "!=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "829": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "830": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ]
    },
    "833": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded((len+uint8[]),uint8)%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0",
        "reinterpret_Encoded((len+uint8[]),uint8)%0#0"
      ]
    },
    "836": {
      "callsub": "test_cases.arc_56.contract.Contract.struct_arg",
      "op": "callsub struct_arg",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "839": {
      "op": "itob",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "840": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "841": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "842": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "843": {
      "op": "log",
      "stack_out": []
    },
    "844": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "845": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "848": {
      "block": "approval_program_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "850": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "1"
      ]
    },
    "851": {
      "op": "swap",
      "stack_out": [
        "1",
        "tmp%3#0"
      ]
    },
    "852": {
      "op": "shl",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "853": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "3"
      ]
    },
    "855": {
      "op": "&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "856": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "857": {
      "callsub": "test_cases.arc_56.contract.Contract.create",
      "op": "callsub create"
    },
    "860": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "861": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "864": {
      "block": "approval_program_bare_routing@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "866": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "0"
      ]
    },
    "867": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "0",
        "1"
      ]
    },
    "868": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "5",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "0",
        "1",
        "5"
      ]
    },
    "870": {
      "op": "uncover 3",
      "stack_out": [
        "0",
        "1",
        "5",
        "tmp%52#0"
      ]
    },
    "872": {
      "op": "match approval_program_bare_create@14 approval_program_bare_create@14 approval_program_transient@15",
      "stack_out": []
    },
    "880": {
      "block": "approval_program_switch_case_next@17",
      "stack_in": [],
      "op": "b approval_program_after_if_else@18"
    },
    "883": {
      "block": "approval_program_transient@15",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "885": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "0"
      ]
    },
    "886": {
      "op": "==",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "887": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "888": {
      "callsub": "test_cases.arc_56.contract.Contract.transient",
      "op": "callsub transient"
    },
    "891": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "892": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "895": {
      "block": "approval_program_bare_create@14",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.bare_create",
      "op": "callsub bare_create"
    },
    "898": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "899": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    }
  }
}