{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuKA;;;AAEI;;AAAA;AAAA;;;;;AAjFJ;;;AAGe;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAP;AAER;;;AAEe;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAmB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAL;;;AAAA;AAAd;AAAP;AACO;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAP;AAER;;;AAEe;;AAAA;AAAA;AAAA;AAAe;;;AAAf;AAAP;;AAI2B;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAjB;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAmD;AAAnD;AAAA;AAAA;AAAV;;;;;;AAAA;AAAA;AAAA;AAII;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACiB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAjB;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAmD;AAAnD;AAAA;AAAA;AAHJ;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AAMR;;;AAEA;;AAAA;;;AAGgB;AAAU;;;;;;;;;;AAAV;AAA2B;;;;;;;;;;AAA3B;AACiB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAjB;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAmD;AAAnD;AAAA;AAAA;AAHJ;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;;AASA;;AACA;;AACA;;AACA;;AAJJ;AAOR;;;AAyBe;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;;;;AAAP;AACO;;AAAA;AAAA;AAAA;;;AAAQ;;AAAA;AAAA;AAAA;AAAR;;;;AAAP;AACO;;AAAE;AAAF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAQ;;;;;;AAAR;AAAP;AACO;;AAAA;AAAA;AAAY;;AAAZ;AAAP;AACO;;AAAK;;AAAL;AAAP;AACO;;AAAK;;;AAAL;AAAP;;;;;;;;;;AA/GR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;AA8EK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9EL;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AA8EK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5DL;;;;AAAA;AA4DK;;;AAAA;;;;AAVA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9CL;;;AA8CK;;;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAzCL;;;AAyCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAnCL;;;AAAA;;;AAmCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AARA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;AA3BL;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;;;AA+BK;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AARA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.arc_56.contract.Contract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 10 TMPL_AVM_UINT64"
    },
    "8": {
      "op": "bytecblock 0x 0x2a 0x151f7c75 0x68656c6c6f31 \"hello\" 0x68656c6c6f32 0x68656c6c6f33 TMPL_STRUCT TMPL_AVM_STRING TMPL_ARC4_UINT8"
    },
    "61": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "63": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "66": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.__init__",
      "op": "callsub __init__"
    },
    "69": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "72": {
      "op": "return",
      "stack_out": []
    },
    "73": {
      "subroutine": "test_cases.arc_56.contract.echo",
      "params": {
        "s#0": "bytes"
      },
      "block": "echo",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "76": {
      "block": "echo_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "s#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)"
      ]
    },
    "78": {
      "op": "dup",
      "stack_out": [
        "s#0 (copy)",
        "s#0 (copy)"
      ]
    },
    "79": {
      "retsub": true,
      "op": "retsub"
    },
    "80": {
      "subroutine": "test_cases.arc_56.contract.Contract.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "81": {
      "subroutine": "test_cases.arc_56.contract.Contract.bare_create",
      "params": {},
      "block": "bare_create_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "82": {
      "subroutine": "test_cases.arc_56.contract.Contract.create",
      "params": {},
      "block": "create_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "83": {
      "subroutine": "test_cases.arc_56.contract.Contract.transient",
      "params": {},
      "block": "transient_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "84": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_arg",
      "params": {
        "arg#0": "bytes",
        "shared#0": "bytes"
      },
      "block": "struct_arg",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "87": {
      "block": "struct_arg_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "89": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "10"
      ]
    },
    "90": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0"
      ]
    },
    "91": {
      "op": "frame_dig -2",
      "stack_out": [
        "item_start_offset%0#0",
        "arg#0 (copy)"
      ]
    },
    "93": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "94": {
      "op": "frame_dig -2",
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "arg#0 (copy)"
      ]
    },
    "96": {
      "op": "uncover 2",
      "stack_out": [
        "item_end_offset%0#0",
        "arg#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "98": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "100": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "101": {
      "op": "frame_dig -1",
      "defined_out": [
        "shared#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "shared#0 (copy)"
      ]
    },
    "103": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "104": {
      "error": "this might error",
      "op": "assert // this might error",
      "stack_out": []
    },
    "105": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42"
      ],
      "stack_out": [
        "42"
      ]
    },
    "107": {
      "retsub": true,
      "op": "retsub"
    },
    "108": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_return",
      "params": {
        "arg#0": "bytes"
      },
      "block": "struct_return",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "111": {
      "block": "struct_return_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "113": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "10"
      ]
    },
    "114": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0"
      ]
    },
    "115": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_start_offset%0#0",
        "arg#0 (copy)"
      ]
    },
    "117": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "118": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "arg#0 (copy)"
      ]
    },
    "120": {
      "op": "uncover 2",
      "stack_out": [
        "item_end_offset%0#0",
        "arg#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "122": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "124": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "125": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "arg#0 (copy)"
      ]
    },
    "127": {
      "op": "intc_3 // 10",
      "stack_out": [
        "tmp%0#0",
        "arg#0 (copy)",
        "10"
      ]
    },
    "128": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0"
      ]
    },
    "129": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "arg#0 (copy)"
      ]
    },
    "131": {
      "op": "len",
      "defined_out": [
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "132": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "arg#0 (copy)"
      ]
    },
    "134": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%1#0",
        "arg#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "136": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "arg#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "138": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "139": {
      "callsub": "test_cases.arc_56.contract.echo",
      "op": "callsub echo",
      "defined_out": [
        "echo%0#0",
        "echo%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "echo%0#0",
        "echo%1#0"
      ]
    },
    "142": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "echo%0#0"
      ]
    },
    "143": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "144": {
      "error": "this won't error",
      "op": "assert // this won't error",
      "stack_out": []
    },
    "145": {
      "op": "frame_dig -1",
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "147": {
      "op": "intc_3 // 10",
      "stack_out": [
        "arg#0 (copy)",
        "10"
      ]
    },
    "148": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%2#0"
      ],
      "stack_out": [
        "item_start_offset%2#0"
      ]
    },
    "149": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_start_offset%2#0",
        "arg#0 (copy)"
      ]
    },
    "151": {
      "op": "len",
      "defined_out": [
        "item_end_offset%2#0",
        "item_start_offset%2#0"
      ],
      "stack_out": [
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "152": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "arg#0 (copy)"
      ]
    },
    "154": {
      "op": "uncover 2",
      "stack_out": [
        "item_end_offset%2#0",
        "arg#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "156": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "158": {
      "op": "substring3",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "159": {
      "retsub": true,
      "op": "retsub"
    },
    "160": {
      "subroutine": "test_cases.arc_56.contract.Contract.errors",
      "params": {
        "arg#0": "bytes"
      },
      "block": "errors",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "163": {
      "block": "errors_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "165": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "0"
      ]
    },
    "166": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "0",
        "8"
      ]
    },
    "167": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "168": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "171": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "172": {
      "error": "this will error",
      "op": "assert // this will error",
      "stack_out": []
    },
    "173": {
      "retsub": true,
      "op": "retsub"
    },
    "174": {
      "subroutine": "test_cases.arc_56.contract.Contract.emitter",
      "params": {},
      "block": "emitter_block@0",
      "stack_in": [],
      "op": "bytec_3 // 0x68656c6c6f31",
      "defined_out": [
        "0x68656c6c6f31"
      ],
      "stack_out": [
        "0x68656c6c6f31"
      ]
    },
    "175": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "176": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "177": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "180": {
      "op": "bytec_3 // 0x68656c6c6f31",
      "stack_out": [
        "length_uint16%0#0",
        "0x68656c6c6f31"
      ]
    },
    "181": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "182": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "3"
      ]
    },
    "184": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "185": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "188": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%0#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "189": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "190": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "191": {
      "op": "bytec_1 // 0x2a",
      "defined_out": [
        "0x2a",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "0x2a"
      ]
    },
    "192": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "193": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ]
    },
    "194": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "195": {
      "op": "pushbytes 0xd93f374e // method \"SharedStruct(byte[],uint8)\"",
      "defined_out": [
        "Method(SharedStruct(byte[],uint8))",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "Method(SharedStruct(byte[],uint8))"
      ]
    },
    "201": {
      "op": "swap",
      "stack_out": [
        "Method(SharedStruct(byte[],uint8))",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "203": {
      "op": "log",
      "stack_out": []
    },
    "204": {
      "op": "bytec 4 // \"hello\"",
      "defined_out": [
        "\"hello\""
      ],
      "stack_out": [
        "\"hello\""
      ]
    },
    "206": {
      "op": "len",
      "defined_out": [
        "length%1#0"
      ],
      "stack_out": [
        "length%1#0"
      ]
    },
    "207": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0"
      ],
      "stack_out": [
        "as_bytes%2#0"
      ]
    },
    "208": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0"
      ],
      "stack_out": [
        "length_uint16%1#0"
      ]
    },
    "211": {
      "op": "bytec 4 // \"hello\"",
      "stack_out": [
        "length_uint16%1#0",
        "\"hello\""
      ]
    },
    "213": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "214": {
      "op": "bytec 5 // 0x68656c6c6f32",
      "defined_out": [
        "0x68656c6c6f32",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x68656c6c6f32"
      ]
    },
    "216": {
      "op": "len",
      "defined_out": [
        "encoded_value%1#0",
        "length%2#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "length%2#0"
      ]
    },
    "217": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "as_bytes%3#0"
      ]
    },
    "218": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%1#0",
        "length_uint16%2#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "length_uint16%2#0"
      ]
    },
    "221": {
      "op": "bytec 5 // 0x68656c6c6f32",
      "stack_out": [
        "encoded_value%1#0",
        "length_uint16%2#0",
        "0x68656c6c6f32"
      ]
    },
    "223": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0"
      ]
    },
    "224": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "3"
      ]
    },
    "226": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "as_bytes%4#0"
      ]
    },
    "227": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "230": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "offset_as_uint16%1#0",
        "0x"
      ]
    },
    "231": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "0x",
        "offset_as_uint16%1#0"
      ]
    },
    "232": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "233": {
      "op": "bytec_1 // 0x2a",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%5#0",
        "0x2a"
      ]
    },
    "234": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "235": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%2#0"
      ]
    },
    "236": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "237": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "4"
      ]
    },
    "239": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "as_bytes%5#0"
      ]
    },
    "240": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "offset_as_uint16%2#0"
      ]
    },
    "243": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "offset_as_uint16%2#0",
        "0x"
      ]
    },
    "244": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "0x",
        "offset_as_uint16%2#0"
      ]
    },
    "245": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "246": {
      "op": "dig 2",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%1#0",
        "encoded_value%1#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%1#0 (copy)"
      ]
    },
    "248": {
      "op": "len",
      "defined_out": [
        "data_length%2#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0",
        "data_length%2#0"
      ]
    },
    "249": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0",
        "data_length%2#0",
        "4"
      ]
    },
    "251": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%5#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0",
        "current_tail_offset%5#0"
      ]
    },
    "252": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0",
        "as_bytes%6#0"
      ]
    },
    "253": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%1#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%9#0",
        "offset_as_uint16%3#0"
      ]
    },
    "256": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "257": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%10#0",
        "encoded_value%1#0"
      ]
    },
    "259": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "260": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "261": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0"
      ]
    },
    "262": {
      "op": "pushbytes 0x1e72af4e // method \"Anonymous(string,(byte[],uint8))\"",
      "defined_out": [
        "Method(Anonymous(string,(byte[],uint8)))",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "Method(Anonymous(string,(byte[],uint8)))"
      ]
    },
    "268": {
      "op": "swap",
      "stack_out": [
        "Method(Anonymous(string,(byte[],uint8)))",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "269": {
      "op": "concat",
      "defined_out": [
        "event%1#0"
      ],
      "stack_out": [
        "event%1#0"
      ]
    },
    "270": {
      "op": "log",
      "stack_out": []
    },
    "271": {
      "retsub": true,
      "op": "retsub"
    },
    "272": {
      "subroutine": "test_cases.arc_56.contract.Contract.conditional_emit",
      "params": {
        "should_emit#0": "uint64"
      },
      "block": "conditional_emit",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "275": {
      "block": "conditional_emit_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "should_emit#0 (copy)"
      ],
      "stack_out": [
        "should_emit#0 (copy)"
      ]
    },
    "277": {
      "op": "bz conditional_emit_after_if_else@2",
      "stack_out": []
    },
    "280": {
      "block": "conditional_emit_if_body@1",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "281": {
      "op": "pushbytes 0x000000000000002a",
      "defined_out": [
        "0x",
        "0x000000000000002a"
      ],
      "stack_out": [
        "0x",
        "0x000000000000002a"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%1#0"
      ]
    },
    "292": {
      "op": "pushbytes 0x000000000000002b",
      "defined_out": [
        "0x000000000000002b",
        "encoded_tuple_buffer%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "0x000000000000002b"
      ]
    },
    "302": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "303": {
      "op": "bytec 6 // 0x68656c6c6f33",
      "defined_out": [
        "0x68656c6c6f33",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x68656c6c6f33"
      ]
    },
    "305": {
      "op": "len",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "length%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "length%0#0"
      ]
    },
    "306": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "as_bytes%0#0"
      ]
    },
    "307": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "length_uint16%0#0"
      ]
    },
    "310": {
      "op": "bytec 6 // 0x68656c6c6f33",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "length_uint16%0#0",
        "0x68656c6c6f33"
      ]
    },
    "312": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ]
    },
    "313": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "3"
      ]
    },
    "315": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "316": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "319": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "320": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "321": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "322": {
      "op": "bytec_1 // 0x2a",
      "defined_out": [
        "0x2a",
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "0x2a"
      ]
    },
    "323": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "324": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ]
    },
    "325": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "326": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_tuple_buffer%6#0",
        "0x"
      ]
    },
    "327": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "329": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "330": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_tuple_buffer%6#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_tuple_buffer%8#0",
        "18"
      ]
    },
    "332": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_tuple_buffer%6#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_tuple_buffer%8#0",
        "as_bytes%2#0"
      ]
    },
    "333": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%1#0"
      ]
    },
    "336": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "337": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "338": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "339": {
      "op": "pushbytes 0x11c547ba // method \"Anonymous2((uint64,uint64),(byte[],uint8))\"",
      "defined_out": [
        "Method(Anonymous2((uint64,uint64),(byte[],uint8)))",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "Method(Anonymous2((uint64,uint64),(byte[],uint8)))"
      ]
    },
    "345": {
      "op": "swap",
      "stack_out": [
        "Method(Anonymous2((uint64,uint64),(byte[],uint8)))",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "346": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "347": {
      "op": "log",
      "stack_out": []
    },
    "348": {
      "block": "conditional_emit_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "349": {
      "subroutine": "test_cases.arc_56.contract.Contract.template_value",
      "params": {},
      "block": "template_value_block@0",
      "stack_in": [],
      "op": "bytec 7 // TMPL_STRUCT",
      "defined_out": [
        "TMPL_STRUCT"
      ],
      "stack_out": [
        "TMPL_STRUCT"
      ]
    },
    "351": {
      "op": "intc 4 // TMPL_AVM_UINT64",
      "defined_out": [
        "TMPL_AVM_UINT64",
        "TMPL_STRUCT"
      ],
      "stack_out": [
        "TMPL_STRUCT",
        "TMPL_AVM_UINT64"
      ]
    },
    "353": {
      "op": "bytec 8 // TMPL_AVM_STRING",
      "defined_out": [
        "TMPL_AVM_STRING",
        "TMPL_AVM_UINT64",
        "TMPL_STRUCT"
      ],
      "stack_out": [
        "TMPL_STRUCT",
        "TMPL_AVM_UINT64",
        "TMPL_AVM_STRING"
      ]
    },
    "355": {
      "op": "bytec 9 // TMPL_ARC4_UINT8",
      "defined_out": [
        "TMPL_ARC4_UINT8",
        "TMPL_AVM_STRING",
        "TMPL_AVM_UINT64",
        "TMPL_STRUCT"
      ],
      "stack_out": [
        "TMPL_STRUCT",
        "TMPL_AVM_UINT64",
        "TMPL_AVM_STRING",
        "TMPL_ARC4_UINT8"
      ]
    },
    "357": {
      "retsub": true,
      "op": "retsub"
    },
    "358": {
      "subroutine": "test_cases.arc_56.contract.Contract.with_constant_defaults",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64",
        "c#0": "bytes",
        "d#0": "bytes",
        "e.0#0": "uint64",
        "e.1#0": "bytes",
        "f#0": "bytes",
        "g#0": "bytes",
        "h#0": "uint64",
        "i#0": "uint64"
      },
      "block": "with_constant_defaults",
      "stack_in": [],
      "op": "proto 10 0"
    },
    "361": {
      "block": "with_constant_defaults_block@0",
      "stack_in": [],
      "op": "frame_dig -10",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "363": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x"
      ]
    },
    "364": {
      "op": "b!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "365": {
      "op": "assert",
      "stack_out": []
    },
    "366": {
      "op": "frame_dig -9",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "368": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0"
      ]
    },
    "369": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "370": {
      "op": "assert",
      "stack_out": []
    },
    "371": {
      "op": "frame_dig -8",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "c#0 (copy)"
      ]
    },
    "373": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "374": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "375": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "376": {
      "op": "assert",
      "stack_out": []
    },
    "377": {
      "op": "frame_dig -7",
      "defined_out": [
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0 (copy)"
      ]
    },
    "379": {
      "op": "intc_0 // 0",
      "stack_out": [
        "d#0 (copy)",
        "0"
      ]
    },
    "380": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0 (copy)",
        "0",
        "8"
      ]
    },
    "381": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%1#0"
      ]
    },
    "382": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "reinterpret_biguint%1#0",
        "0x"
      ]
    },
    "383": {
      "op": "b!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "384": {
      "op": "bnz with_constant_defaults_bool_true@2",
      "stack_out": []
    },
    "387": {
      "block": "with_constant_defaults_or_contd@1",
      "stack_in": [],
      "op": "frame_dig -7",
      "defined_out": [
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0 (copy)"
      ]
    },
    "389": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0 (copy)",
        "8"
      ]
    },
    "390": {
      "op": "dup",
      "stack_out": [
        "d#0 (copy)",
        "8",
        "8"
      ]
    },
    "391": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "392": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "0x"
      ]
    },
    "393": {
      "op": "b!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "394": {
      "op": "bz with_constant_defaults_bool_false@3",
      "stack_out": []
    },
    "397": {
      "block": "with_constant_defaults_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "398": {
      "block": "with_constant_defaults_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "399": {
      "op": "frame_dig -6",
      "defined_out": [
        "e.0#0 (copy)"
      ],
      "stack_out": [
        "e.0#0 (copy)"
      ]
    },
    "401": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "e.0#0 (copy)"
      ],
      "stack_out": [
        "e.0#0 (copy)",
        "0"
      ]
    },
    "402": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "403": {
      "op": "bnz with_constant_defaults_bool_true@6",
      "stack_out": []
    },
    "406": {
      "block": "with_constant_defaults_or_contd@5",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "e.1#0 (copy)"
      ],
      "stack_out": [
        "e.1#0 (copy)"
      ]
    },
    "408": {
      "op": "len",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "409": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "410": {
      "op": "!=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "411": {
      "op": "bz with_constant_defaults_bool_false@7",
      "stack_out": []
    },
    "414": {
      "block": "with_constant_defaults_bool_true@6",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%1#0"
      ]
    },
    "415": {
      "block": "with_constant_defaults_bool_merge@8",
      "stack_in": [
        "or_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "416": {
      "op": "frame_dig -4",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "418": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "419": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "0",
        "2",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "0",
        "2"
      ]
    },
    "421": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset_offset%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset_offset%0#0"
      ]
    },
    "422": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset_offset%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset_offset%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "424": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset_offset%0#0"
      ]
    },
    "425": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "426": {
      "op": "dup2",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%0#0",
        "item_offset%0#0 (copy)"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%0#0 (copy)"
      ]
    },
    "427": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_length%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "item_length%0#0"
      ]
    },
    "428": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_head_and_tail%0#0",
        "item_length%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "item_length%0#0",
        "1"
      ]
    },
    "429": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_length_in_bytes%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "item_length_in_bytes%0#0"
      ]
    },
    "430": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "item_length_in_bytes%0#0",
        "2"
      ]
    },
    "432": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_head_tail_length%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "item_head_tail_length%0#0"
      ]
    },
    "433": {
      "op": "uncover 2",
      "stack_out": [
        "item_offset%0#0",
        "item_head_tail_length%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "435": {
      "op": "uncover 2",
      "stack_out": [
        "item_head_tail_length%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "437": {
      "op": "uncover 2",
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "item_head_tail_length%0#0"
      ]
    },
    "439": {
      "op": "extract3",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "440": {
      "op": "pushbytes 0x00026869",
      "defined_out": [
        "0x00026869",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0x00026869"
      ]
    },
    "446": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "447": {
      "op": "assert",
      "stack_out": []
    },
    "448": {
      "op": "frame_dig -3",
      "defined_out": [
        "g#0 (copy)"
      ],
      "stack_out": [
        "g#0 (copy)"
      ]
    },
    "450": {
      "op": "intc_0 // 0",
      "stack_out": [
        "g#0 (copy)",
        "0"
      ]
    },
    "451": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "452": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "tmp%11#0",
        "2"
      ]
    },
    "454": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "455": {
      "op": "assert",
      "stack_out": []
    },
    "456": {
      "op": "frame_dig -2",
      "defined_out": [
        "h#0 (copy)"
      ],
      "stack_out": [
        "h#0 (copy)"
      ]
    },
    "458": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "h#0 (copy)"
      ],
      "stack_out": [
        "h#0 (copy)",
        "42"
      ]
    },
    "460": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "461": {
      "op": "assert",
      "stack_out": []
    },
    "462": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0 (copy)"
      ]
    },
    "464": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0 (copy)",
        "1234"
      ]
    },
    "467": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "468": {
      "op": "assert",
      "stack_out": []
    },
    "469": {
      "retsub": true,
      "op": "retsub"
    },
    "470": {
      "block": "with_constant_defaults_bool_false@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%1#0"
      ]
    },
    "471": {
      "op": "b with_constant_defaults_bool_merge@8"
    },
    "474": {
      "block": "with_constant_defaults_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "475": {
      "op": "b with_constant_defaults_bool_merge@4"
    },
    "478": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "480": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "481": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "482": {
      "op": "bz approval_program_bare_routing@13",
      "stack_out": []
    },
    "485": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "488": {
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)"
      ]
    },
    "494": {
      "op": "pushbytes 0x97e8e4a7 // method \"struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64\"",
      "defined_out": [
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)"
      ]
    },
    "500": {
      "op": "pushbytes 0x76c4de11 // method \"struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)\"",
      "defined_out": [
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))"
      ]
    },
    "506": {
      "op": "pushbytes 0xc1ca7709 // method \"emits_error((uint64,string,(byte[],uint8)))void\"",
      "defined_out": [
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)"
      ]
    },
    "512": {
      "op": "pushbytes 0x6de762c2 // method \"emitter()void\"",
      "defined_out": [
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)"
      ]
    },
    "518": {
      "op": "pushbytes 0x59fc5282 // method \"conditional_emit(bool)void\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)"
      ]
    },
    "524": {
      "op": "pushbytes 0x9d9eecb0 // method \"template_value()((byte[],uint8),uint64,string,uint8)\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))"
      ]
    },
    "530": {
      "op": "pushbytes 0x5e8eef9a // method \"with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(create()void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)"
      ]
    },
    "536": {
      "op": "uncover 8",
      "stack_out": [
        "Method(create()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%2#0"
      ]
    },
    "538": {
      "op": "match approval_program_create_route@3 approval_program_struct_arg_route@4 approval_program_struct_return_route@5 approval_program_emits_error_route@6 approval_program_emitter_route@7 approval_program_conditional_emit_route@8 approval_program_template_value_route@9 approval_program_with_constant_defaults_route@10",
      "stack_out": []
    },
    "556": {
      "block": "approval_program_after_if_else@18",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "557": {
      "block": "approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "558": {
      "block": "approval_program_with_constant_defaults_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "560": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "NoOp"
      ]
    },
    "561": {
      "op": "==",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "562": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "563": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "565": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "0"
      ]
    },
    "566": {
      "op": "!=",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "567": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "568": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "571": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "574": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0"
      ]
    },
    "575": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "578": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0"
      ]
    },
    "581": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "584": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "tmp%46#0"
      ]
    },
    "587": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%46#0",
        "tmp%46#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "tmp%46#0",
        "tmp%46#0 (copy)"
      ]
    },
    "588": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "tmp%46#0",
        "tmp%46#0 (copy)",
        "0"
      ]
    },
    "589": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%46#0",
        "tmp%46#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "tmp%46#0",
        "tmp%46#0 (copy)",
        "0",
        "8"
      ]
    },
    "590": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "tmp%46#0",
        "item0%0#0"
      ]
    },
    "591": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "tmp%46#0",
        "item0%1#0"
      ]
    },
    "592": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "tmp%46#0"
      ]
    },
    "593": {
      "op": "dup",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "tmp%46#0",
        "tmp%46#0 (copy)"
      ]
    },
    "594": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "tmp%46#0",
        "tmp%46#0 (copy)",
        "8"
      ]
    },
    "595": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%1#0",
        "item_start_offset%0#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "tmp%46#0",
        "item_start_offset%0#0"
      ]
    },
    "596": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item_start_offset%0#0",
        "tmp%46#0"
      ]
    },
    "597": {
      "op": "dup",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item_start_offset%0#0",
        "tmp%46#0",
        "tmp%46#0 (copy)"
      ]
    },
    "598": {
      "op": "len",
      "defined_out": [
        "item0%1#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item_start_offset%0#0",
        "tmp%46#0",
        "item_end_offset%0#0"
      ]
    },
    "599": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tmp%46#0"
      ]
    },
    "600": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item_end_offset%0#0",
        "tmp%46#0",
        "item_start_offset%0#0"
      ]
    },
    "602": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "tmp%46#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "604": {
      "op": "substring3",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%0#0"
      ]
    },
    "605": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0"
      ]
    },
    "608": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0"
      ]
    },
    "611": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "614": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "617": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "618": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "621": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "622": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "624": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0"
      ]
    },
    "626": {
      "op": "uncover 9",
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0"
      ]
    },
    "628": {
      "op": "uncover 9",
      "stack_out": [
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "630": {
      "op": "uncover 9",
      "stack_out": [
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0"
      ]
    },
    "632": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0"
      ]
    },
    "634": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0"
      ]
    },
    "636": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%49#0",
        "tmp%50#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "638": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%50#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "640": {
      "op": "uncover 9",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%43#0",
        "tmp%45#0",
        "reinterpret_bytes[16]%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "642": {
      "callsub": "test_cases.arc_56.contract.Contract.with_constant_defaults",
      "op": "callsub with_constant_defaults",
      "stack_out": []
    },
    "645": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "646": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "649": {
      "block": "approval_program_template_value_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "651": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "NoOp"
      ]
    },
    "652": {
      "op": "==",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "653": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "654": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "656": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "0"
      ]
    },
    "657": {
      "op": "!=",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "658": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "659": {
      "callsub": "test_cases.arc_56.contract.Contract.template_value",
      "op": "callsub template_value",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "662": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "664": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "666": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "667": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0"
      ]
    },
    "669": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "670": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0"
      ]
    },
    "672": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "673": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "length%0#0"
      ]
    },
    "674": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "as_bytes%0#0"
      ]
    },
    "675": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%2#0",
        "length_uint16%0#0"
      ]
    },
    "678": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "length_uint16%0#0",
        "elements_to_encode%2#0"
      ]
    },
    "679": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "encoded_value%0#0"
      ]
    },
    "680": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "682": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "13"
      ]
    },
    "684": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "as_bytes%1#0"
      ]
    },
    "685": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "688": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "689": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "690": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "691": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%1#0",
        "elements_to_encode%0#0 (copy)"
      ]
    },
    "693": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%1#0",
        "data_length%0#0"
      ]
    },
    "694": {
      "op": "pushint 13 // 13",
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%1#0",
        "data_length%0#0",
        "13"
      ]
    },
    "696": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "697": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%0#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "698": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "elements_to_encode%0#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "700": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "elements_to_encode%0#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "701": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "702": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%2#0"
      ]
    },
    "703": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "706": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%3#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "707": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%3#0",
        "elements_to_encode%3#0"
      ]
    },
    "709": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "elements_to_encode%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "710": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "elements_to_encode%0#0"
      ]
    },
    "711": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "712": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ]
    },
    "713": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "714": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "715": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "717": {
      "op": "log",
      "stack_out": []
    },
    "718": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "719": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "722": {
      "block": "approval_program_conditional_emit_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "724": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "NoOp"
      ]
    },
    "725": {
      "op": "==",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "726": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "727": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "729": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "0"
      ]
    },
    "730": {
      "op": "!=",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "731": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "732": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "735": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "0"
      ]
    },
    "736": {
      "op": "getbit",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "737": {
      "callsub": "test_cases.arc_56.contract.Contract.conditional_emit",
      "op": "callsub conditional_emit",
      "stack_out": []
    },
    "740": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "741": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "744": {
      "block": "approval_program_emitter_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "746": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "NoOp"
      ]
    },
    "747": {
      "op": "==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "748": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "749": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "751": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0"
      ]
    },
    "752": {
      "op": "!=",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "753": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "754": {
      "callsub": "test_cases.arc_56.contract.Contract.emitter",
      "op": "callsub emitter"
    },
    "757": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "758": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "761": {
      "block": "approval_program_emits_error_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "763": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "NoOp"
      ]
    },
    "764": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "765": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "766": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "768": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "0"
      ]
    },
    "769": {
      "op": "!=",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "770": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "771": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "774": {
      "callsub": "test_cases.arc_56.contract.Contract.errors",
      "op": "callsub errors",
      "stack_out": []
    },
    "777": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "778": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "781": {
      "block": "approval_program_struct_return_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "783": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "784": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "785": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "786": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "788": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "789": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "790": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "791": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "794": {
      "callsub": "test_cases.arc_56.contract.Contract.struct_return",
      "op": "callsub struct_return",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "797": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "798": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%18#0"
      ]
    },
    "799": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "800": {
      "op": "log",
      "stack_out": []
    },
    "801": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "802": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "805": {
      "block": "approval_program_struct_arg_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "807": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "NoOp"
      ]
    },
    "808": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "809": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "810": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "812": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "813": {
      "op": "!=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "814": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "815": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "818": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "821": {
      "callsub": "test_cases.arc_56.contract.Contract.struct_arg",
      "op": "callsub struct_arg",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "824": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "825": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "826": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "827": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "828": {
      "op": "log",
      "stack_out": []
    },
    "829": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "830": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "833": {
      "block": "approval_program_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "835": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "1"
      ]
    },
    "836": {
      "op": "swap",
      "stack_out": [
        "1",
        "tmp%3#0"
      ]
    },
    "837": {
      "op": "shl",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "838": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "3"
      ]
    },
    "840": {
      "op": "&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "841": {
      "error": "OnCompletion is not one of NoOp, OptIn",
      "op": "assert // OnCompletion is not one of NoOp, OptIn",
      "stack_out": []
    },
    "842": {
      "callsub": "test_cases.arc_56.contract.Contract.create",
      "op": "callsub create"
    },
    "845": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "846": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "849": {
      "block": "approval_program_bare_routing@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "851": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "0"
      ]
    },
    "852": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "0",
        "1"
      ]
    },
    "853": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "5",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "0",
        "1",
        "5"
      ]
    },
    "855": {
      "op": "uncover 3",
      "stack_out": [
        "0",
        "1",
        "5",
        "tmp%51#0"
      ]
    },
    "857": {
      "op": "match approval_program_bare_create@14 approval_program_bare_create@14 approval_program_transient@15",
      "stack_out": []
    },
    "865": {
      "block": "approval_program_switch_case_next@17",
      "stack_in": [],
      "op": "b approval_program_after_if_else@18"
    },
    "868": {
      "block": "approval_program_transient@15",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "870": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "0"
      ]
    },
    "871": {
      "op": "==",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "872": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "873": {
      "callsub": "test_cases.arc_56.contract.Contract.transient",
      "op": "callsub transient"
    },
    "876": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "877": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    },
    "880": {
      "block": "approval_program_bare_create@14",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.bare_create",
      "op": "callsub bare_create"
    },
    "883": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "884": {
      "op": "b approval_program_after_inlined_test_cases.arc_56.contract.Contract.__puya_arc4_router__@19"
    }
  }
}