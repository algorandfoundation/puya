{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;AA8EK;;;;;;AATA;;;;;;AATA;;;;;;AAVA;;;;;;AAJA;;;;;;AALA;;;;;;AANA;;;;;;;;;AARA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AA3BL;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;AA+BK;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AARA;;;AAAA;AAAA;AA2FJ;;;;;;AAEG;;AAAA;;AAAA;;;;AAzFC;;;AAAA;AAAA;;;;AAQA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAKA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;;;AAUA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AASA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AASA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;;;;;;;;;;;;;;AA3CA;;;;;;AAGU;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAP;AAEH;;;;;;AAEU;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAmB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAL;;;AAAA;;AAAd;AAAP;AACO;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAP;;AAAA;AAEH;;;;;;AAEU;;AAAA;AAAA;AAAA;AAAe;;;AAAf;AAAP;;;;;AAI2B;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAjB;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAmD;AAAnD;AAAA;;AAAA;AAAV;;;;;;AAAA;;AAAA;AAAA;AAII;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACiB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAjB;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAmD;AAAnD;AAAA;;AAAA;AAHJ;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;;AAMH;;;;;;AAEL;;AAAA;;;AAAA;;;AAGgB;AAAU;;;;;;;;;;AAAV;AAA2B;;;;;;;;;;AAA3B;AACiB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAjB;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAmD;AAAnD;AAAA;;AAAA;AAHJ;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;;;;;;;;AASA;;AACA;;AACA;;AACA;;AAJJ;AAOH;;;;;;;;AAyBU;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;;;AAAA;;;;;;;;;AAAP;;AAAA;AACO;;AAAA;AAAA;AAAA;;;AAAA;;;AAAQ;;AAAA;AAAA;AAAA;AAAR;;;AAAA;;;;;;;;;AAAP;;AAAA;AACS;AAAF;AAAA;AAAA;AAAE;AAAF;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAQ;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAR;AAAP;AACO;;AAAA;AAAA;AAAY;AAAZ;AAAP;AACO;;AAAK;;AAAL;AAAP;AACO;;AAAK;;;AAAL;AAAP;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 2 TMPL_AVM_UINT64"
    },
    "8": {
      "op": "bytecblock 0x 0x151f7c75 0x2a 0x68656c6c6f31 \"hello\" 0x68656c6c6f32 0x68656c6c6f33 \"hi\" TMPL_STRUCT TMPL_AVM_STRING TMPL_ARC4_UINT8"
    },
    "64": {
      "op": "b main_block@0"
    },
    "67": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "69": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "72": {
      "op": "b main_call___init__@1"
    },
    "75": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.__init__",
      "op": "callsub __init__"
    },
    "78": {
      "op": "b main_after_if_else@2"
    },
    "81": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "b main_block@3"
    },
    "84": {
      "block": "main_block@3",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "86": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "87": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "88": {
      "op": "bz main_bare_routing@18",
      "stack_out": []
    },
    "91": {
      "op": "b main_abi_routing@4"
    },
    "94": {
      "block": "main_abi_routing@4",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "97": {
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create()void)"
      ]
    },
    "103": {
      "op": "uncover 1",
      "stack_out": [
        "Method(create()void)",
        "tmp%2#0"
      ]
    },
    "105": {
      "op": "match main_create_route@5",
      "stack_out": []
    },
    "109": {
      "op": "b main_switch_case_next@6"
    },
    "112": {
      "block": "main_switch_case_next@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "114": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "NoOp"
      ]
    },
    "115": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "116": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "117": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "119": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "120": {
      "op": "!=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "121": {
      "op": "bz main_create_NoOp@16",
      "stack_out": []
    },
    "124": {
      "op": "b main_call_NoOp@7"
    },
    "127": {
      "block": "main_call_NoOp@7",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "130": {
      "op": "pushbytes 0x97e8e4a7 // method \"struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64\"",
      "defined_out": [
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)"
      ]
    },
    "136": {
      "op": "pushbytes 0x76c4de11 // method \"struct_return((uint64,string,(byte[],uint8)))(byte[],uint8)\"",
      "defined_out": [
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))"
      ]
    },
    "142": {
      "op": "pushbytes 0xc1ca7709 // method \"emits_error((uint64,string,(byte[],uint8)))void\"",
      "defined_out": [
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)"
      ]
    },
    "148": {
      "op": "pushbytes 0x6de762c2 // method \"emitter()void\"",
      "defined_out": [
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)"
      ]
    },
    "154": {
      "op": "pushbytes 0x59fc5282 // method \"conditional_emit(bool)void\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)"
      ]
    },
    "160": {
      "op": "pushbytes 0x9d9eecb0 // method \"template_value()((byte[],uint8),uint64,string,uint8)\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))"
      ]
    },
    "166": {
      "op": "pushbytes 0x5e8eef9a // method \"with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void\"",
      "defined_out": [
        "Method(conditional_emit(bool)void)",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)"
      ]
    },
    "172": {
      "op": "uncover 7",
      "stack_out": [
        "Method(struct_arg((uint64,string,(byte[],uint8)),(byte[],uint8))uint64)",
        "Method(struct_return((uint64,string,(byte[],uint8)))(byte[],uint8))",
        "Method(emits_error((uint64,string,(byte[],uint8)))void)",
        "Method(emitter()void)",
        "Method(conditional_emit(bool)void)",
        "Method(template_value()((byte[],uint8),uint64,string,uint8))",
        "Method(with_constant_defaults(uint64,uint64,byte[],(uint64,uint64),(uint64,string),string[2],string[],uint64,uint64)void)",
        "tmp%10#0"
      ]
    },
    "174": {
      "op": "match main_struct_arg_route@8 main_struct_return_route@9 main_emits_error_route@10 main_emitter_route@11 main_conditional_emit_route@12 main_template_value_route@13 main_with_constant_defaults_route@14",
      "stack_out": []
    },
    "190": {
      "op": "b main_switch_case_next@15"
    },
    "193": {
      "block": "main_switch_case_next@15",
      "stack_in": [],
      "op": "b main_after_if_else@17"
    },
    "196": {
      "block": "main_after_if_else@17",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "199": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "200": {
      "block": "main_with_constant_defaults_route@14",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.with_constant_defaults[routing]",
      "op": "callsub with_constant_defaults"
    },
    "203": {
      "op": "b main_switch_case_next@15"
    },
    "206": {
      "block": "main_template_value_route@13",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.template_value[routing]",
      "op": "callsub template_value"
    },
    "209": {
      "op": "b main_switch_case_next@15"
    },
    "212": {
      "block": "main_conditional_emit_route@12",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.conditional_emit[routing]",
      "op": "callsub conditional_emit"
    },
    "215": {
      "op": "b main_switch_case_next@15"
    },
    "218": {
      "block": "main_emitter_route@11",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.emitter[routing]",
      "op": "callsub emitter"
    },
    "221": {
      "op": "b main_switch_case_next@15"
    },
    "224": {
      "block": "main_emits_error_route@10",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.errors[routing]",
      "op": "callsub errors"
    },
    "227": {
      "op": "b main_switch_case_next@15"
    },
    "230": {
      "block": "main_struct_return_route@9",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.struct_return[routing]",
      "op": "callsub struct_return"
    },
    "233": {
      "op": "b main_switch_case_next@15"
    },
    "236": {
      "block": "main_struct_arg_route@8",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.struct_arg[routing]",
      "op": "callsub struct_arg"
    },
    "239": {
      "op": "b main_switch_case_next@15"
    },
    "242": {
      "block": "main_create_NoOp@16",
      "stack_in": [],
      "op": "b main_after_if_else@17"
    },
    "245": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "247": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "1"
      ]
    },
    "248": {
      "op": "uncover 1",
      "stack_out": [
        "1",
        "tmp%3#0"
      ]
    },
    "250": {
      "op": "shl",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "251": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "3"
      ]
    },
    "253": {
      "op": "&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "254": {
      "error": "OnCompletion must be one of NoOp, OptIn",
      "op": "assert // OnCompletion must be one of NoOp, OptIn",
      "stack_out": []
    },
    "255": {
      "callsub": "test_cases.arc_56.contract.Contract.create[routing]",
      "op": "callsub create"
    },
    "258": {
      "op": "b main_switch_case_next@6"
    },
    "261": {
      "block": "main_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "263": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "264": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "NoOp",
        "OptIn",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp",
        "OptIn"
      ]
    },
    "265": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "NoOp",
        "OptIn",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp",
        "OptIn",
        "DeleteApplication"
      ]
    },
    "267": {
      "op": "uncover 3",
      "stack_out": [
        "NoOp",
        "OptIn",
        "DeleteApplication",
        "tmp%11#0"
      ]
    },
    "269": {
      "op": "match main_bare_create@19 main_bare_create@19 main_transient@20",
      "stack_out": []
    },
    "277": {
      "op": "b main_switch_case_next@21"
    },
    "280": {
      "block": "main_switch_case_next@21",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "283": {
      "block": "main_transient@20",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "285": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "0"
      ]
    },
    "286": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "287": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "288": {
      "callsub": "test_cases.arc_56.contract.Contract.transient",
      "op": "callsub transient"
    },
    "291": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "292": {
      "op": "return",
      "stack_out": []
    },
    "293": {
      "block": "main_bare_create@19",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.bare_create",
      "op": "callsub bare_create"
    },
    "296": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "297": {
      "op": "return",
      "stack_out": []
    },
    "298": {
      "subroutine": "test_cases.arc_56.contract.echo",
      "params": {
        "s#0": "bytes"
      },
      "block": "echo",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "301": {
      "op": "b echo_block@0"
    },
    "304": {
      "block": "echo_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "s#0 (copy)"
      ],
      "stack_out": [
        "s#0 (copy)"
      ]
    },
    "306": {
      "op": "frame_dig -1",
      "stack_out": [
        "s#0 (copy)",
        "s#0 (copy)"
      ]
    },
    "308": {
      "retsub": true,
      "op": "retsub"
    },
    "309": {
      "subroutine": "test_cases.arc_56.contract.Contract.create[routing]",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "b create_block@0"
    },
    "312": {
      "block": "create_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.create",
      "op": "callsub test_cases.arc_56.contract.Contract.create"
    },
    "315": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "316": {
      "op": "return",
      "stack_out": []
    },
    "317": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_arg[routing]",
      "params": {},
      "block": "struct_arg",
      "stack_in": [],
      "op": "b struct_arg_block@0"
    },
    "320": {
      "block": "struct_arg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ]
    },
    "323": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded((len+uint8[]),uint8)%0#0",
        "as_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0",
        "as_Encoded((len+uint8[]),uint8)%0#0"
      ]
    },
    "326": {
      "callsub": "test_cases.arc_56.contract.Contract.struct_arg",
      "op": "callsub test_cases.arc_56.contract.Contract.struct_arg",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "329": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "330": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "331": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%3#0"
      ]
    },
    "333": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "334": {
      "op": "log",
      "stack_out": []
    },
    "335": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "336": {
      "op": "return",
      "stack_out": []
    },
    "337": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_return[routing]",
      "params": {},
      "block": "struct_return",
      "stack_in": [],
      "op": "b struct_return_block@0"
    },
    "340": {
      "block": "struct_return_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ]
    },
    "343": {
      "callsub": "test_cases.arc_56.contract.Contract.struct_return",
      "op": "callsub test_cases.arc_56.contract.Contract.struct_return",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "346": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "347": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "349": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "350": {
      "op": "log",
      "stack_out": []
    },
    "351": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "352": {
      "op": "return",
      "stack_out": []
    },
    "353": {
      "subroutine": "test_cases.arc_56.contract.Contract.errors[routing]",
      "params": {},
      "block": "errors",
      "stack_in": [],
      "op": "b errors_block@0"
    },
    "356": {
      "block": "errors_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "as_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,(len+utf8[]),((len+uint8[]),uint8))%0#0"
      ]
    },
    "359": {
      "callsub": "test_cases.arc_56.contract.Contract.errors",
      "op": "callsub test_cases.arc_56.contract.Contract.errors",
      "stack_out": []
    },
    "362": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "363": {
      "op": "return",
      "stack_out": []
    },
    "364": {
      "subroutine": "test_cases.arc_56.contract.Contract.emitter[routing]",
      "params": {},
      "block": "emitter",
      "stack_in": [],
      "op": "b emitter_block@0"
    },
    "367": {
      "block": "emitter_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.emitter",
      "op": "callsub test_cases.arc_56.contract.Contract.emitter"
    },
    "370": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "371": {
      "op": "return",
      "stack_out": []
    },
    "372": {
      "subroutine": "test_cases.arc_56.contract.Contract.conditional_emit[routing]",
      "params": {},
      "block": "conditional_emit",
      "stack_in": [],
      "op": "b conditional_emit_block@0"
    },
    "375": {
      "block": "conditional_emit_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "378": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "379": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "380": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "1"
      ]
    },
    "381": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "382": {
      "error": "invalid number of bytes for bool8",
      "op": "assert // invalid number of bytes for bool8",
      "defined_out": [
        "as_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0"
      ]
    },
    "383": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "384": {
      "op": "getbit",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "385": {
      "callsub": "test_cases.arc_56.contract.Contract.conditional_emit",
      "op": "callsub test_cases.arc_56.contract.Contract.conditional_emit",
      "stack_out": []
    },
    "388": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "389": {
      "op": "return",
      "stack_out": []
    },
    "390": {
      "subroutine": "test_cases.arc_56.contract.Contract.template_value[routing]",
      "params": {},
      "block": "template_value",
      "stack_in": [],
      "op": "b template_value_block@0"
    },
    "393": {
      "block": "template_value_block@0",
      "stack_in": [],
      "callsub": "test_cases.arc_56.contract.Contract.template_value",
      "op": "callsub test_cases.arc_56.contract.Contract.template_value",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "396": {
      "op": "cover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "398": {
      "op": "cover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "400": {
      "op": "cover 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "402": {
      "op": "pushint 13 // 13",
      "defined_out": [
        "13",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "13"
      ]
    },
    "404": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "405": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "408": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "409": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "411": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%head%0#0"
      ]
    },
    "412": {
      "op": "cover 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%head%0#0",
        "tmp%0#0"
      ]
    },
    "414": {
      "op": "dup",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "415": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "416": {
      "op": "pushint 13 // 13",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "aggregate%data_length%0#0",
        "13"
      ]
    },
    "418": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "419": {
      "op": "cover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%0#0"
      ]
    },
    "421": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "423": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "424": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%0#0"
      ]
    },
    "426": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "428": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%1#0"
      ]
    },
    "429": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "431": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0"
      ]
    },
    "432": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "433": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "436": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%2#0"
      ]
    },
    "438": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "439": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "441": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "442": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "445": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%1#0"
      ]
    },
    "447": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "449": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "450": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "tmp%3#0"
      ]
    },
    "452": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0"
      ]
    },
    "453": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0",
        "tmp%0#0"
      ]
    },
    "455": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "456": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "458": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "459": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "460": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%4#0"
      ]
    },
    "462": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "463": {
      "op": "log",
      "stack_out": []
    },
    "464": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "465": {
      "op": "return",
      "stack_out": []
    },
    "466": {
      "subroutine": "test_cases.arc_56.contract.Contract.with_constant_defaults[routing]",
      "params": {},
      "block": "with_constant_defaults",
      "stack_in": [],
      "op": "b with_constant_defaults_block@0"
    },
    "469": {
      "block": "with_constant_defaults_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "472": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "473": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "474": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "475": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "476": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "477": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ]
    },
    "480": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "481": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "len%1#0"
      ]
    },
    "482": {
      "op": "intc_2 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "len%1#0",
        "8"
      ]
    },
    "483": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "484": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "485": {
      "op": "btoi",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0"
      ]
    },
    "486": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "489": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "490": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "0"
      ]
    },
    "491": {
      "op": "extract_uint16",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "length%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "length%0#0"
      ]
    },
    "492": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "as_Encoded(uint64)%0#0",
        "length%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "length%0#0",
        "1"
      ]
    },
    "493": {
      "op": "*",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "mul%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "mul%0#0"
      ]
    },
    "494": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "as_Encoded(uint64)%0#0",
        "mul%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "mul%0#0",
        "2"
      ]
    },
    "495": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "add%0#0"
      ]
    },
    "496": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "add%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "498": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "as_Encoded(uint64)%0#0",
        "len%2#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "add%0#0",
        "len%2#0"
      ]
    },
    "499": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "eq%2#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "eq%2#0"
      ]
    },
    "500": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "as_Encoded(uint64)%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "501": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "504": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "507": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "508": {
      "op": "len",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "len%3#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "len%3#0"
      ]
    },
    "509": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "as_Encoded(uint64)%0#0",
        "len%3#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "len%3#0",
        "16"
      ]
    },
    "511": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "eq%3#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "eq%3#0"
      ]
    },
    "512": {
      "error": "invalid number of bytes for (uint64,uint64)",
      "op": "assert // invalid number of bytes for (uint64,uint64)",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "513": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "516": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "517": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "518": {
      "op": "intc_2 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "519": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "520": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "521": {
      "op": "cover 1",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "523": {
      "op": "dup",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "524": {
      "op": "intc_2 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "8"
      ]
    },
    "525": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "526": {
      "op": "cover 1",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "528": {
      "op": "dup",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "529": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%item0%0#0",
        "aggregate%len%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%len%0#0"
      ]
    },
    "530": {
      "op": "cover 1",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "532": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%len%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "534": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "536": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "537": {
      "op": "extract 2 0",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "540": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0"
      ]
    },
    "543": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0"
      ]
    },
    "546": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%11#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%11#0"
      ]
    },
    "549": {
      "op": "dup",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "550": {
      "op": "len",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "len%4#0",
        "tmp%11#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%11#0",
        "len%4#0"
      ]
    },
    "551": {
      "op": "intc_2 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%11#0",
        "len%4#0",
        "8"
      ]
    },
    "552": {
      "op": "==",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "eq%4#0",
        "tmp%11#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%11#0",
        "eq%4#0"
      ]
    },
    "553": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%2#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%2#0"
      ]
    },
    "554": {
      "op": "btoi",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0"
      ]
    },
    "555": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "558": {
      "op": "dup",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "559": {
      "op": "len",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "len%5#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "len%5#0"
      ]
    },
    "560": {
      "op": "intc_2 // 8",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "len%5#0",
        "8"
      ]
    },
    "561": {
      "op": "==",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "eq%5#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "eq%5#0"
      ]
    },
    "562": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64)%3#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "as_Encoded(uint64)%3#0"
      ]
    },
    "563": {
      "op": "btoi",
      "defined_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "as_Encoded(uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "564": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%14#0",
        "as_Encoded(uint64)%0#0"
      ]
    },
    "566": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%14#0",
        "as_Encoded(uint64)%0#0",
        "tmp%2#0"
      ]
    },
    "568": {
      "op": "uncover 9",
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%14#0",
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "570": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%14#0",
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "572": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%14#0",
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0"
      ]
    },
    "574": {
      "op": "uncover 9",
      "stack_out": [
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%14#0",
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "576": {
      "op": "uncover 9",
      "stack_out": [
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%14#0",
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0"
      ]
    },
    "578": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%12#0",
        "tmp%14#0",
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0"
      ]
    },
    "580": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%14#0",
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0"
      ]
    },
    "582": {
      "op": "uncover 9",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "as_Encoded(uint64,uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "as_Encoded((len+utf8[])[2])%0#0",
        "as_Encoded(len+(len+utf8[])[])%0#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "584": {
      "callsub": "test_cases.arc_56.contract.Contract.with_constant_defaults",
      "op": "callsub test_cases.arc_56.contract.Contract.with_constant_defaults",
      "stack_out": []
    },
    "587": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "588": {
      "op": "return",
      "stack_out": []
    },
    "589": {
      "subroutine": "test_cases.arc_56.contract.Contract.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "592": {
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "593": {
      "subroutine": "test_cases.arc_56.contract.Contract.bare_create",
      "params": {},
      "block": "bare_create",
      "stack_in": [],
      "op": "b bare_create_block@0"
    },
    "596": {
      "block": "bare_create_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "597": {
      "subroutine": "test_cases.arc_56.contract.Contract.create",
      "params": {},
      "block": "test_cases.arc_56.contract.Contract.create",
      "stack_in": [],
      "op": "b test_cases.arc_56.contract.Contract.create_block@0"
    },
    "600": {
      "block": "test_cases.arc_56.contract.Contract.create_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "601": {
      "subroutine": "test_cases.arc_56.contract.Contract.transient",
      "params": {},
      "block": "transient",
      "stack_in": [],
      "op": "b transient_block@0"
    },
    "604": {
      "block": "transient_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "605": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_arg",
      "params": {
        "arg#0": "bytes",
        "shared#0": "bytes"
      },
      "block": "test_cases.arc_56.contract.Contract.struct_arg",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "608": {
      "op": "b test_cases.arc_56.contract.Contract.struct_arg_block@0"
    },
    "611": {
      "block": "test_cases.arc_56.contract.Contract.struct_arg_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "613": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "10"
      ]
    },
    "615": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0"
      ]
    },
    "616": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "arg#0 (copy)"
      ]
    },
    "618": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "619": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "arg#0 (copy)"
      ]
    },
    "621": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%len%0#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "623": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "625": {
      "op": "substring3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "626": {
      "op": "frame_dig -1",
      "defined_out": [
        "shared#0 (copy)",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "shared#0 (copy)"
      ]
    },
    "628": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "629": {
      "error": "this might error",
      "op": "assert // this might error",
      "stack_out": []
    },
    "630": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42"
      ],
      "stack_out": [
        "42"
      ]
    },
    "632": {
      "retsub": true,
      "op": "retsub"
    },
    "633": {
      "subroutine": "test_cases.arc_56.contract.Contract.struct_return",
      "params": {
        "arg#0": "bytes"
      },
      "block": "test_cases.arc_56.contract.Contract.struct_return",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "636": {
      "op": "b test_cases.arc_56.contract.Contract.struct_return_block@0"
    },
    "639": {
      "block": "test_cases.arc_56.contract.Contract.struct_return_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "641": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "10"
      ]
    },
    "643": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0"
      ]
    },
    "644": {
      "op": "frame_dig -1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "arg#0 (copy)"
      ]
    },
    "646": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "647": {
      "op": "frame_dig -1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "arg#0 (copy)"
      ]
    },
    "649": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%len%0#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "651": {
      "op": "uncover 2",
      "stack_out": [
        "arg#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "653": {
      "op": "substring3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "654": {
      "op": "frame_dig -1",
      "stack_out": [
        "tuple_item%0#0",
        "arg#0 (copy)"
      ]
    },
    "656": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tuple_item%0#0",
        "arg#0 (copy)",
        "10"
      ]
    },
    "658": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "659": {
      "op": "frame_dig -1",
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%extract_uint16%1#0",
        "arg#0 (copy)"
      ]
    },
    "661": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0"
      ]
    },
    "662": {
      "op": "frame_dig -1",
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "arg#0 (copy)"
      ]
    },
    "664": {
      "op": "uncover 2",
      "stack_out": [
        "tuple_item%0#0",
        "aggregate%len%1#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "666": {
      "op": "uncover 2",
      "stack_out": [
        "tuple_item%0#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0"
      ]
    },
    "668": {
      "op": "substring3",
      "defined_out": [
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "tuple_item%1#0"
      ]
    },
    "669": {
      "callsub": "test_cases.arc_56.contract.echo",
      "op": "callsub echo",
      "defined_out": [
        "echo%0#0",
        "echo%1#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "echo%0#0",
        "echo%1#0"
      ]
    },
    "672": {
      "op": "cover 2",
      "defined_out": [
        "echo%0#0",
        "echo%1#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "echo%1#0",
        "tuple_item%0#0",
        "echo%0#0"
      ]
    },
    "674": {
      "op": "==",
      "defined_out": [
        "echo%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "echo%1#0",
        "tmp%0#0"
      ]
    },
    "675": {
      "error": "this won't error",
      "op": "assert // this won't error",
      "stack_out": [
        "echo%1#0"
      ]
    },
    "676": {
      "op": "frame_dig -1",
      "stack_out": [
        "echo%1#0",
        "arg#0 (copy)"
      ]
    },
    "678": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "echo%1#0",
        "arg#0 (copy)",
        "10"
      ]
    },
    "680": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "echo%1#0"
      ],
      "stack_out": [
        "echo%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "681": {
      "op": "frame_dig -1",
      "stack_out": [
        "echo%1#0",
        "aggregate%extract_uint16%2#0",
        "arg#0 (copy)"
      ]
    },
    "683": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%len%2#0",
        "echo%1#0"
      ],
      "stack_out": [
        "echo%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%2#0"
      ]
    },
    "684": {
      "op": "frame_dig -1",
      "stack_out": [
        "echo%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%2#0",
        "arg#0 (copy)"
      ]
    },
    "686": {
      "op": "uncover 2",
      "stack_out": [
        "echo%1#0",
        "aggregate%len%2#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "688": {
      "op": "uncover 2",
      "stack_out": [
        "echo%1#0",
        "arg#0 (copy)",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%2#0"
      ]
    },
    "690": {
      "op": "substring3",
      "defined_out": [
        "echo%1#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "echo%1#0",
        "tuple_item%2#0"
      ]
    },
    "691": {
      "op": "uncover 1"
    },
    "693": {
      "retsub": true,
      "op": "retsub"
    },
    "694": {
      "subroutine": "test_cases.arc_56.contract.Contract.errors",
      "params": {
        "arg#0": "bytes"
      },
      "block": "test_cases.arc_56.contract.Contract.errors",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "697": {
      "op": "b test_cases.arc_56.contract.Contract.errors_block@0"
    },
    "700": {
      "block": "test_cases.arc_56.contract.Contract.errors_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)"
      ]
    },
    "702": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "0"
      ]
    },
    "703": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "arg#0 (copy)"
      ],
      "stack_out": [
        "arg#0 (copy)",
        "0",
        "8"
      ]
    },
    "704": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "705": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0",
        "0x00"
      ]
    },
    "708": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "709": {
      "error": "this will error",
      "op": "assert // this will error",
      "stack_out": []
    },
    "710": {
      "retsub": true,
      "op": "retsub"
    },
    "711": {
      "subroutine": "test_cases.arc_56.contract.Contract.emitter",
      "params": {},
      "block": "test_cases.arc_56.contract.Contract.emitter",
      "stack_in": [],
      "op": "b test_cases.arc_56.contract.Contract.emitter_block@0"
    },
    "714": {
      "block": "test_cases.arc_56.contract.Contract.emitter_block@0",
      "stack_in": [],
      "op": "bytec_3 // 0x68656c6c6f31",
      "defined_out": [
        "0x68656c6c6f31"
      ],
      "stack_out": [
        "0x68656c6c6f31"
      ]
    },
    "715": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "716": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "717": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "720": {
      "op": "bytec_3 // 0x68656c6c6f31",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "0x68656c6c6f31"
      ]
    },
    "721": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "722": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "724": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "725": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "728": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "729": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "731": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%0#0"
      ]
    },
    "732": {
      "op": "bytec_2 // 0x2a",
      "defined_out": [
        "0x2a",
        "aggregate%head%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%0#0",
        "0x2a"
      ]
    },
    "733": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%1#0"
      ]
    },
    "734": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%0#0"
      ]
    },
    "736": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "737": {
      "op": "pushbytes 0xd93f374e // method \"SharedStruct(byte[],uint8)\"",
      "defined_out": [
        "Method(SharedStruct(byte[],uint8))",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "Method(SharedStruct(byte[],uint8))"
      ]
    },
    "743": {
      "op": "uncover 1",
      "stack_out": [
        "Method(SharedStruct(byte[],uint8))",
        "tmp%1#0"
      ]
    },
    "745": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "746": {
      "op": "log",
      "stack_out": []
    },
    "747": {
      "op": "bytec 4 // \"hello\"",
      "defined_out": [
        "\"hello\""
      ],
      "stack_out": [
        "\"hello\""
      ]
    },
    "749": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "aggregate%length%1#0"
      ]
    },
    "750": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%2#0"
      ]
    },
    "751": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%1#0"
      ]
    },
    "754": {
      "op": "bytec 4 // \"hello\"",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "\"hello\""
      ]
    },
    "756": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "757": {
      "op": "bytec 5 // 0x68656c6c6f32",
      "defined_out": [
        "0x68656c6c6f32",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x68656c6c6f32"
      ]
    },
    "759": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%length%2#0"
      ]
    },
    "760": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "761": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "764": {
      "op": "bytec 5 // 0x68656c6c6f32",
      "stack_out": [
        "tmp%2#0",
        "aggregate%length_uint16%2#0",
        "0x68656c6c6f32"
      ]
    },
    "766": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "767": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "3"
      ]
    },
    "769": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "770": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "773": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%offset_as_uint16%1#0",
        "0x"
      ]
    },
    "774": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "0x",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "776": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%head%2#0"
      ]
    },
    "777": {
      "op": "bytec_2 // 0x2a",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%head%2#0",
        "0x2a"
      ]
    },
    "778": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "aggregate%head%3#0"
      ]
    },
    "779": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%3#0",
        "tmp%3#0"
      ]
    },
    "781": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "782": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "4"
      ]
    },
    "784": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "785": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%2#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "788": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%offset_as_uint16%2#0",
        "0x"
      ]
    },
    "789": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "0x",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "791": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%head%4#0"
      ]
    },
    "792": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%head%4#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%head%4#0",
        "tmp%2#0 (copy)"
      ]
    },
    "794": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%2#0",
        "aggregate%head%4#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%head%4#0",
        "aggregate%data_length%2#0"
      ]
    },
    "795": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%head%4#0",
        "aggregate%data_length%2#0",
        "4"
      ]
    },
    "797": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%head%4#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "798": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#0",
        "aggregate%head%4#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%head%4#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "799": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%4#0",
        "aggregate%offset_as_uint16%3#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%head%4#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "802": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "aggregate%head%5#0"
      ]
    },
    "803": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "aggregate%head%5#0",
        "tmp%2#0"
      ]
    },
    "805": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%concat%2#0"
      ]
    },
    "806": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%2#0",
        "tmp%4#0"
      ]
    },
    "808": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "809": {
      "op": "pushbytes 0x1e72af4e // method \"Anonymous(string,(byte[],uint8))\"",
      "defined_out": [
        "Method(Anonymous(string,(byte[],uint8)))",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(Anonymous(string,(byte[],uint8)))"
      ]
    },
    "815": {
      "op": "uncover 1",
      "stack_out": [
        "Method(Anonymous(string,(byte[],uint8)))",
        "tmp%5#0"
      ]
    },
    "817": {
      "op": "concat",
      "defined_out": [
        "event%1#0"
      ],
      "stack_out": [
        "event%1#0"
      ]
    },
    "818": {
      "op": "log",
      "stack_out": []
    },
    "819": {
      "retsub": true,
      "op": "retsub"
    },
    "820": {
      "subroutine": "test_cases.arc_56.contract.Contract.conditional_emit",
      "params": {
        "should_emit#0": "uint64"
      },
      "block": "test_cases.arc_56.contract.Contract.conditional_emit",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "823": {
      "op": "b test_cases.arc_56.contract.Contract.conditional_emit_block@0"
    },
    "826": {
      "block": "test_cases.arc_56.contract.Contract.conditional_emit_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "should_emit#0 (copy)"
      ],
      "stack_out": [
        "should_emit#0 (copy)"
      ]
    },
    "828": {
      "op": "bz test_cases.arc_56.contract.Contract.conditional_emit_after_if_else@2",
      "stack_out": []
    },
    "831": {
      "op": "b test_cases.arc_56.contract.Contract.conditional_emit_if_body@1"
    },
    "834": {
      "block": "test_cases.arc_56.contract.Contract.conditional_emit_if_body@1",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "835": {
      "op": "pushbytes 0x000000000000002a",
      "defined_out": [
        "0x",
        "0x000000000000002a"
      ],
      "stack_out": [
        "0x",
        "0x000000000000002a"
      ]
    },
    "845": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "846": {
      "op": "pushbytes 0x000000000000002b",
      "defined_out": [
        "0x000000000000002b",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "0x000000000000002b"
      ]
    },
    "856": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "857": {
      "op": "bytec 6 // 0x68656c6c6f33",
      "defined_out": [
        "0x68656c6c6f33",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x68656c6c6f33"
      ]
    },
    "859": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "860": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "861": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "864": {
      "op": "bytec 6 // 0x68656c6c6f33",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0",
        "0x68656c6c6f33"
      ]
    },
    "866": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "867": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "3"
      ]
    },
    "869": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "870": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "873": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "874": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "876": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%head%2#0"
      ]
    },
    "877": {
      "op": "bytec_2 // 0x2a",
      "defined_out": [
        "0x2a",
        "aggregate%head%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%head%2#0",
        "0x2a"
      ]
    },
    "878": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%head%3#0"
      ]
    },
    "879": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%3#0",
        "tmp%1#0"
      ]
    },
    "881": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "882": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "0x"
      ]
    },
    "883": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "0x",
        "tmp%0#0"
      ]
    },
    "885": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%4#0"
      ]
    },
    "886": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "aggregate%head%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%4#0",
        "18"
      ]
    },
    "888": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%head%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%4#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "889": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%4#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%4#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "892": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%5#0"
      ]
    },
    "893": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%5#0",
        "tmp%2#0"
      ]
    },
    "895": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "896": {
      "op": "pushbytes 0x11c547ba // method \"Anonymous2((uint64,uint64),(byte[],uint8))\"",
      "defined_out": [
        "Method(Anonymous2((uint64,uint64),(byte[],uint8)))",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "Method(Anonymous2((uint64,uint64),(byte[],uint8)))"
      ]
    },
    "902": {
      "op": "uncover 1",
      "stack_out": [
        "Method(Anonymous2((uint64,uint64),(byte[],uint8)))",
        "tmp%3#0"
      ]
    },
    "904": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "905": {
      "op": "log",
      "stack_out": []
    },
    "906": {
      "op": "b test_cases.arc_56.contract.Contract.conditional_emit_after_if_else@2"
    },
    "909": {
      "block": "test_cases.arc_56.contract.Contract.conditional_emit_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "910": {
      "subroutine": "test_cases.arc_56.contract.Contract.template_value",
      "params": {},
      "block": "test_cases.arc_56.contract.Contract.template_value",
      "stack_in": [],
      "op": "b test_cases.arc_56.contract.Contract.template_value_block@0"
    },
    "913": {
      "block": "test_cases.arc_56.contract.Contract.template_value_block@0",
      "stack_in": [],
      "op": "bytec 8 // TMPL_STRUCT",
      "defined_out": [
        "TMPL_STRUCT"
      ],
      "stack_out": [
        "TMPL_STRUCT"
      ]
    },
    "915": {
      "op": "intc 4 // TMPL_AVM_UINT64",
      "defined_out": [
        "TMPL_AVM_UINT64",
        "TMPL_STRUCT"
      ],
      "stack_out": [
        "TMPL_STRUCT",
        "TMPL_AVM_UINT64"
      ]
    },
    "917": {
      "op": "bytec 9 // TMPL_AVM_STRING",
      "defined_out": [
        "TMPL_AVM_STRING",
        "TMPL_AVM_UINT64",
        "TMPL_STRUCT"
      ],
      "stack_out": [
        "TMPL_STRUCT",
        "TMPL_AVM_UINT64",
        "TMPL_AVM_STRING"
      ]
    },
    "919": {
      "op": "bytec 10 // TMPL_ARC4_UINT8",
      "defined_out": [
        "TMPL_ARC4_UINT8",
        "TMPL_AVM_STRING",
        "TMPL_AVM_UINT64",
        "TMPL_STRUCT"
      ],
      "stack_out": [
        "TMPL_STRUCT",
        "TMPL_AVM_UINT64",
        "TMPL_AVM_STRING",
        "TMPL_ARC4_UINT8"
      ]
    },
    "921": {
      "retsub": true,
      "op": "retsub"
    },
    "922": {
      "subroutine": "test_cases.arc_56.contract.Contract.with_constant_defaults",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64",
        "c#0": "bytes",
        "d#0": "bytes",
        "e.0#0": "uint64",
        "e.1#0": "bytes",
        "f#0": "bytes",
        "g#0": "bytes",
        "h#0": "uint64",
        "i#0": "uint64"
      },
      "block": "test_cases.arc_56.contract.Contract.with_constant_defaults",
      "stack_in": [],
      "op": "proto 10 0"
    },
    "925": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "926": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "927": {
      "op": "b test_cases.arc_56.contract.Contract.with_constant_defaults_block@0"
    },
    "930": {
      "block": "test_cases.arc_56.contract.Contract.with_constant_defaults_block@0",
      "stack_in": [
        "or_result%0#0",
        "or_result%1#0"
      ],
      "op": "frame_dig -10",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "932": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "reinterpret_biguint%0#0",
        "0x"
      ]
    },
    "933": {
      "op": "b!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%0#0"
      ]
    },
    "934": {
      "op": "assert",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "935": {
      "op": "frame_dig -9",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "b#0 (copy)"
      ]
    },
    "937": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "b#0 (copy)",
        "0"
      ]
    },
    "938": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%1#0"
      ]
    },
    "939": {
      "op": "assert",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "940": {
      "op": "frame_dig -8",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "c#0 (copy)"
      ]
    },
    "942": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%2#0"
      ]
    },
    "943": {
      "op": "intc_0 // 0",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "944": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%3#0"
      ]
    },
    "945": {
      "op": "assert",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "946": {
      "op": "frame_dig -7",
      "defined_out": [
        "d#0 (copy)"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "d#0 (copy)"
      ]
    },
    "948": {
      "op": "intc_0 // 0",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "d#0 (copy)",
        "0"
      ]
    },
    "949": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "d#0 (copy)"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "d#0 (copy)",
        "0",
        "8"
      ]
    },
    "950": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "951": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "reinterpret_biguint%1#0",
        "0x"
      ]
    },
    "952": {
      "op": "b!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%4#0"
      ]
    },
    "953": {
      "op": "bnz test_cases.arc_56.contract.Contract.with_constant_defaults_bool_true@2",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "956": {
      "op": "b test_cases.arc_56.contract.Contract.with_constant_defaults_or_contd@1"
    },
    "959": {
      "block": "test_cases.arc_56.contract.Contract.with_constant_defaults_or_contd@1",
      "stack_in": [
        "or_result%0#0",
        "or_result%1#0"
      ],
      "op": "frame_dig -7",
      "defined_out": [
        "d#0 (copy)"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "d#0 (copy)"
      ]
    },
    "961": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "d#0 (copy)"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "d#0 (copy)",
        "8"
      ]
    },
    "962": {
      "op": "intc_2 // 8",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "d#0 (copy)",
        "8",
        "8"
      ]
    },
    "963": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "964": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "reinterpret_biguint%2#0",
        "0x"
      ]
    },
    "965": {
      "op": "b!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%5#0"
      ]
    },
    "966": {
      "op": "bz test_cases.arc_56.contract.Contract.with_constant_defaults_bool_false@3",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "969": {
      "op": "b test_cases.arc_56.contract.Contract.with_constant_defaults_bool_true@2"
    },
    "972": {
      "block": "test_cases.arc_56.contract.Contract.with_constant_defaults_bool_true@2",
      "stack_in": [
        "or_result%0#0",
        "or_result%1#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "1"
      ]
    },
    "973": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "975": {
      "op": "b test_cases.arc_56.contract.Contract.with_constant_defaults_bool_merge@4"
    },
    "978": {
      "block": "test_cases.arc_56.contract.Contract.with_constant_defaults_bool_merge@4",
      "stack_in": [
        "or_result%0#0",
        "or_result%1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "or_result%0#0"
      ]
    },
    "980": {
      "op": "assert",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "981": {
      "op": "frame_dig -6",
      "defined_out": [
        "e.0#0 (copy)",
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "e.0#0 (copy)"
      ]
    },
    "983": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "e.0#0 (copy)",
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "e.0#0 (copy)",
        "0"
      ]
    },
    "984": {
      "op": "!=",
      "defined_out": [
        "or_result%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%6#0"
      ]
    },
    "985": {
      "op": "bnz test_cases.arc_56.contract.Contract.with_constant_defaults_bool_true@6",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "988": {
      "op": "b test_cases.arc_56.contract.Contract.with_constant_defaults_or_contd@5"
    },
    "991": {
      "block": "test_cases.arc_56.contract.Contract.with_constant_defaults_or_contd@5",
      "stack_in": [
        "or_result%0#0",
        "or_result%1#0"
      ],
      "op": "frame_dig -5",
      "defined_out": [
        "e.1#0 (copy)"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "e.1#0 (copy)"
      ]
    },
    "993": {
      "op": "len",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%7#0"
      ]
    },
    "994": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%7#0",
        "0"
      ]
    },
    "995": {
      "op": "!=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%8#0"
      ]
    },
    "996": {
      "op": "bz test_cases.arc_56.contract.Contract.with_constant_defaults_bool_false@7",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "999": {
      "op": "b test_cases.arc_56.contract.Contract.with_constant_defaults_bool_true@6"
    },
    "1002": {
      "block": "test_cases.arc_56.contract.Contract.with_constant_defaults_bool_true@6",
      "stack_in": [
        "or_result%0#0",
        "or_result%1#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "1"
      ]
    },
    "1003": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "1005": {
      "op": "b test_cases.arc_56.contract.Contract.with_constant_defaults_bool_merge@8"
    },
    "1008": {
      "block": "test_cases.arc_56.contract.Contract.with_constant_defaults_bool_merge@8",
      "stack_in": [
        "or_result%0#0",
        "or_result%1#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "or_result%1#0"
      ]
    },
    "1010": {
      "op": "assert",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "1011": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "0"
      ]
    },
    "1012": {
      "op": "intc_3 // 2",
      "defined_out": [
        "0",
        "2",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "0",
        "2"
      ]
    },
    "1013": {
      "op": "<",
      "defined_out": [
        "aggregate%lt%0#0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%lt%0#0"
      ]
    },
    "1014": {
      "error": "index access is out of bounds",
      "op": "assert // index access is out of bounds",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "1015": {
      "op": "intc_0 // 0",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "0"
      ]
    },
    "1016": {
      "op": "intc_3 // 2",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "0",
        "2"
      ]
    },
    "1017": {
      "op": "*",
      "defined_out": [
        "aggregate%item_offset_offset%0#0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%item_offset_offset%0#0"
      ]
    },
    "1018": {
      "op": "frame_dig -4",
      "defined_out": [
        "aggregate%item_offset_offset%0#0",
        "f#0 (copy)",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%item_offset_offset%0#0",
        "f#0 (copy)"
      ]
    },
    "1020": {
      "op": "uncover 1",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "f#0 (copy)",
        "aggregate%item_offset_offset%0#0"
      ]
    },
    "1022": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_offset%0#0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "1023": {
      "op": "frame_dig -4",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%item_offset%0#0",
        "f#0 (copy)"
      ]
    },
    "1025": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%item_offset%0#0",
        "aggregate%item_offset%0#0 (copy)",
        "f#0 (copy)",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%item_offset%0#0",
        "f#0 (copy)",
        "aggregate%item_offset%0#0 (copy)"
      ]
    },
    "1027": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%item_length%0#0",
        "aggregate%item_offset%0#0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%item_offset%0#0",
        "aggregate%item_length%0#0"
      ]
    },
    "1028": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%item_length%0#0",
        "aggregate%item_offset%0#0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%item_offset%0#0",
        "aggregate%item_length%0#0",
        "1"
      ]
    },
    "1029": {
      "op": "*",
      "defined_out": [
        "aggregate%item_length_in_bytes%0#0",
        "aggregate%item_offset%0#0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%item_offset%0#0",
        "aggregate%item_length_in_bytes%0#0"
      ]
    },
    "1030": {
      "op": "intc_3 // 2",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%item_offset%0#0",
        "aggregate%item_length_in_bytes%0#0",
        "2"
      ]
    },
    "1031": {
      "op": "+",
      "defined_out": [
        "aggregate%item_head_tail_length%0#0",
        "aggregate%item_offset%0#0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%item_offset%0#0",
        "aggregate%item_head_tail_length%0#0"
      ]
    },
    "1032": {
      "op": "frame_dig -4",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%item_offset%0#0",
        "aggregate%item_head_tail_length%0#0",
        "f#0 (copy)"
      ]
    },
    "1034": {
      "op": "uncover 2",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "aggregate%item_head_tail_length%0#0",
        "f#0 (copy)",
        "aggregate%item_offset%0#0"
      ]
    },
    "1036": {
      "op": "uncover 2",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "f#0 (copy)",
        "aggregate%item_offset%0#0",
        "aggregate%item_head_tail_length%0#0"
      ]
    },
    "1038": {
      "op": "extract3",
      "defined_out": [
        "array_item%0#0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "array_item%0#0"
      ]
    },
    "1039": {
      "op": "bytec 7 // \"hi\"",
      "defined_out": [
        "\"hi\"",
        "array_item%0#0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "array_item%0#0",
        "\"hi\""
      ]
    },
    "1041": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "array_item%0#0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "array_item%0#0",
        "aggregate%length%0#0"
      ]
    },
    "1042": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "array_item%0#0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "array_item%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1043": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "array_item%0#0",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "array_item%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1046": {
      "op": "bytec 7 // \"hi\"",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "array_item%0#0",
        "aggregate%length_uint16%0#0",
        "\"hi\""
      ]
    },
    "1048": {
      "op": "concat",
      "defined_out": [
        "array_item%0#0",
        "or_result%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "array_item%0#0",
        "tmp%9#0"
      ]
    },
    "1049": {
      "op": "==",
      "defined_out": [
        "or_result%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%10#0"
      ]
    },
    "1050": {
      "op": "assert",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "1051": {
      "op": "frame_dig -3",
      "defined_out": [
        "g#0 (copy)",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "g#0 (copy)"
      ]
    },
    "1053": {
      "op": "intc_0 // 0",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "g#0 (copy)",
        "0"
      ]
    },
    "1054": {
      "op": "extract_uint16",
      "defined_out": [
        "or_result%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%11#0"
      ]
    },
    "1055": {
      "op": "intc_3 // 2",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%11#0",
        "2"
      ]
    },
    "1056": {
      "op": "==",
      "defined_out": [
        "or_result%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%12#0"
      ]
    },
    "1057": {
      "op": "assert",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "1058": {
      "op": "frame_dig -2",
      "defined_out": [
        "h#0 (copy)",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "h#0 (copy)"
      ]
    },
    "1060": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "h#0 (copy)",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "h#0 (copy)",
        "42"
      ]
    },
    "1062": {
      "op": "==",
      "defined_out": [
        "or_result%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%13#0"
      ]
    },
    "1063": {
      "op": "assert",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "1064": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "i#0 (copy)"
      ]
    },
    "1066": {
      "op": "pushint 1234 // 1234",
      "defined_out": [
        "1234",
        "i#0 (copy)",
        "or_result%1#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "i#0 (copy)",
        "1234"
      ]
    },
    "1069": {
      "op": "==",
      "defined_out": [
        "or_result%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "tmp%14#0"
      ]
    },
    "1070": {
      "op": "assert",
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "1071": {
      "retsub": true,
      "op": "retsub"
    },
    "1072": {
      "block": "test_cases.arc_56.contract.Contract.with_constant_defaults_bool_false@7",
      "stack_in": [
        "or_result%0#0",
        "or_result%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "0"
      ]
    },
    "1073": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "1075": {
      "op": "b test_cases.arc_56.contract.Contract.with_constant_defaults_bool_merge@8"
    },
    "1078": {
      "block": "test_cases.arc_56.contract.Contract.with_constant_defaults_bool_false@3",
      "stack_in": [
        "or_result%0#0",
        "or_result%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0",
        "0"
      ]
    },
    "1079": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "or_result%0#0",
        "or_result%1#0"
      ]
    },
    "1081": {
      "op": "b test_cases.arc_56.contract.Contract.with_constant_defaults_bool_merge@4"
    }
  }
}