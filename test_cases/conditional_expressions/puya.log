debug: PuyaOptions(paths=['conditional_expressions'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, match_algod_bytecode=False, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, cli_template_definitions=[], template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@2: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L20
debug: Sealing block@3: // switch_case_0_L27
debug: Terminated block@3: // switch_case_0_L27
debug: Sealing block@4: // switch_case_1_L29
debug: Terminated block@4: // switch_case_1_L29
debug: Sealing block@5: // switch_case_default_L25
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Sealing block@2: // for_body_L111
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Terminated block@2: // for_body_L111
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@1: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L92
debug: Added range_item%0#2 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@3) in block@3: // for_footer_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L110
debug: Sealing block@4: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@1: // if_body_L147
debug: Terminated block@1: // if_body_L147
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Sealing block@3: // ternary_true_L150
debug: Terminated block@3: // ternary_true_L150
debug: Sealing block@4: // ternary_false_L150
debug: Terminated block@4: // ternary_false_L150
debug: Sealing block@5: // ternary_merge_L150
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L150
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L150
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L150
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L150
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L150
debug: Terminated block@6: // for_header_L150
debug: Sealing block@7: // for_body_L151
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L150
debug: Terminated block@7: // for_body_L151
debug: Sealing block@8: // for_footer_L150
debug: Terminated block@8: // for_footer_L150
debug: Sealing block@6: // for_header_L150
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added range_item%0#2 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#2 <- block@8) in block@8: // for_footer_L150
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#5: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#5: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L147
debug: Added result#5 to Phi node: let result#4: bytes = φ(result#5 <- block@3) in block@3: // ternary_true_L150
debug: Added result#5 to Phi node: let result#4: bytes = φ(result#5 <- block@3, result#5 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let result#4: bytes = φ(result#5 <- block@3, result#5 <- block@4) (result#4) with result#5
debug: Deleting Phi assignment: let result#4: bytes = φ(result#5 <- block@3, result#5 <- block@4)
debug: Replaced trivial Phi node: let result#4: bytes = φ(result#5 <- block@3, result#5 <- block@4) (result#4) with result#5 in current definition for 1 blocks
debug: Added result#5 to Phi node: let result#2: bytes = φ(result#5 <- block@5) in block@5: // ternary_merge_L150
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#5 <- block@5, result#3 <- block@8) in block@8: // for_footer_L150
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L150
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L150
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0
debug: Deleting Phi assignment: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@8) in block@8: // for_footer_L150
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) in block@8: // for_footer_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@9: // after_for_L150
debug: Terminated block@9: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Sealing block@2: // for_body_L200
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Terminated block@2: // for_body_L200
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@1: // for_header_L199
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L189
debug: Added range_item%0#2 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@3) in block@3: // for_footer_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L199
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@5: // for_header_L204
debug: Terminated block@5: // for_header_L204
debug: Sealing block@6: // for_body_L205
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5: // for_header_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5: // for_header_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5: // for_header_L204
debug: Terminated block@6: // for_body_L205
debug: Sealing block@7: // for_footer_L204
debug: Terminated block@7: // for_footer_L204
debug: Sealing block@5: // for_header_L204
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@4) in block@4: // after_for_L199
debug: Added range_item%1#2 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@4, range_item%1#2 <- block@7) in block@7: // for_footer_L204
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4: // after_for_L199
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7: // for_footer_L204
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4: // after_for_L199
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Sealing block@2: // for_body_L270
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Terminated block@2: // for_body_L270
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@1: // for_header_L269
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L252
debug: Added range_item%0#2 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L269
debug: Terminated block@4: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Sealing block@2: // for_body_L328
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Terminated block@2: // for_body_L328
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@1: // for_header_L327
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L306
debug: Added range_item%0#2 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@3) in block@3: // for_footer_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3: // for_footer_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3: // for_footer_L327
debug: Sealing block@4: // after_for_L327
debug: Terminated block@4: // after_for_L327
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@2: // while_body_L12
debug: Terminated block@2: // while_body_L12
debug: Sealing block@3: // if_body_L13
debug: Terminated block@3: // if_body_L13
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L31
debug: Terminated block@0: // L31
debug: Sealing block@0: // L37
debug: Terminated block@0: // L37
debug: Sealing block@0: // L7
debug: Terminated block@0: // L7
debug: Sealing block@1: // ternary_true_L11
debug: Terminated block@1: // ternary_true_L11
debug: Sealing block@2: // ternary_false_L11
debug: Terminated block@2: // ternary_false_L11
debug: Sealing block@3: // ternary_merge_L11
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@3: // ternary_merge_L11
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1) in block@1: // ternary_true_L11
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2: // ternary_false_L11
debug: Created Phi assignment: let b#1: uint64 = undefined while trying to resolve 'b' in block@3: // ternary_merge_L11
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@1) in block@1: // ternary_true_L11
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@1, b#0 <- block@2) in block@2: // ternary_false_L11
debug: Replacing trivial Phi node: let b#1: uint64 = φ(b#0 <- block@1, b#0 <- block@2) (b#1) with b#0
debug: Deleting Phi assignment: let b#1: uint64 = φ(b#0 <- block@1, b#0 <- block@2)
debug: Replaced trivial Phi node: let b#1: uint64 = φ(b#0 <- block@1, b#0 <- block@2) (b#1) with b#0 in current definition for 1 blocks
debug: Terminated block@3: // ternary_merge_L11
debug: Sealing block@4: // ternary_true_L12
debug: Terminated block@4: // ternary_true_L12
debug: Sealing block@5: // ternary_false_L12
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@3: // ternary_merge_L11
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@1) in block@1: // ternary_true_L11
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@1, a#0 <- block@2) in block@2: // ternary_false_L11
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#0 <- block@1, a#0 <- block@2) (a#1) with a#0
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#0 <- block@1, a#0 <- block@2)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#0 <- block@1, a#0 <- block@2) (a#1) with a#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_false_L12
debug: Sealing block@6: // ternary_merge_L12
debug: Created Phi assignment: let ternary_result%1#2: uint64 = undefined while trying to resolve 'ternary_result%1' in block@6: // ternary_merge_L12
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4) in block@4: // ternary_true_L12
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5) in block@5: // ternary_false_L12
debug: Terminated block@6: // ternary_merge_L12
debug: Sealing block@7: // ternary_true_L14
debug: Terminated block@7: // ternary_true_L14
debug: Sealing block@8: // ternary_false_L14
debug: Terminated block@8: // ternary_false_L14
debug: Sealing block@9: // ternary_merge_L14
debug: Created Phi assignment: let ternary_result%2#2: uint64 = undefined while trying to resolve 'ternary_result%2' in block@9: // ternary_merge_L14
debug: Added ternary_result%2#0 to Phi node: let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7) in block@7: // ternary_true_L14
debug: Added ternary_result%2#1 to Phi node: let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8) in block@8: // ternary_false_L14
debug: Terminated block@9: // ternary_merge_L14
debug: Sealing block@10: // ternary_true_L15
debug: Terminated block@10: // ternary_true_L15
debug: Sealing block@11: // ternary_false_L15
debug: Terminated block@11: // ternary_false_L15
debug: Sealing block@12: // ternary_merge_L15
debug: Created Phi assignment: let ternary_result%3#2: uint64 = undefined while trying to resolve 'ternary_result%3' in block@12: // ternary_merge_L15
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@10) in block@10: // ternary_true_L15
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11) in block@11: // ternary_false_L15
debug: Terminated block@12: // ternary_merge_L15
debug: Sealing block@13: // ternary_true_L17
debug: Terminated block@13: // ternary_true_L17
debug: Sealing block@14: // ternary_false_L17
debug: Terminated block@14: // ternary_false_L17
debug: Sealing block@15: // ternary_merge_L17
debug: Created Phi assignment: let ternary_result%4#2: uint64 = undefined while trying to resolve 'ternary_result%4' in block@15: // ternary_merge_L17
debug: Added ternary_result%4#0 to Phi node: let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@13) in block@13: // ternary_true_L17
debug: Added ternary_result%4#1 to Phi node: let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@13, ternary_result%4#1 <- block@14) in block@14: // ternary_false_L17
debug: Terminated block@15: // ternary_merge_L17
debug: Sealing block@16: // ternary_true_L18
debug: Terminated block@16: // ternary_true_L18
debug: Sealing block@17: // ternary_false_L18
debug: Terminated block@17: // ternary_false_L18
debug: Sealing block@18: // ternary_merge_L18
debug: Created Phi assignment: let ternary_result%5#2: uint64 = undefined while trying to resolve 'ternary_result%5' in block@18: // ternary_merge_L18
debug: Added ternary_result%5#0 to Phi node: let ternary_result%5#2: uint64 = φ(ternary_result%5#0 <- block@16) in block@16: // ternary_true_L18
debug: Added ternary_result%5#1 to Phi node: let ternary_result%5#2: uint64 = φ(ternary_result%5#0 <- block@16, ternary_result%5#1 <- block@17) in block@17: // ternary_false_L18
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@18: // ternary_merge_L18
debug: Created Phi assignment: let b#3: uint64 = undefined while trying to resolve 'b' in block@15: // ternary_merge_L17
debug: Created Phi assignment: let b#4: uint64 = undefined while trying to resolve 'b' in block@12: // ternary_merge_L15
debug: Created Phi assignment: let b#5: uint64 = undefined while trying to resolve 'b' in block@9: // ternary_merge_L14
debug: Created Phi assignment: let b#6: uint64 = undefined while trying to resolve 'b' in block@6: // ternary_merge_L12
debug: Added b#0 to Phi node: let b#6: uint64 = φ(b#0 <- block@4) in block@4: // ternary_true_L12
debug: Added b#0 to Phi node: let b#6: uint64 = φ(b#0 <- block@4, b#0 <- block@5) in block@5: // ternary_false_L12
debug: Replacing trivial Phi node: let b#6: uint64 = φ(b#0 <- block@4, b#0 <- block@5) (b#6) with b#0
debug: Deleting Phi assignment: let b#6: uint64 = φ(b#0 <- block@4, b#0 <- block@5)
debug: Replaced trivial Phi node: let b#6: uint64 = φ(b#0 <- block@4, b#0 <- block@5) (b#6) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#5: uint64 = φ(b#0 <- block@7) in block@7: // ternary_true_L14
debug: Added b#0 to Phi node: let b#5: uint64 = φ(b#0 <- block@7, b#0 <- block@8) in block@8: // ternary_false_L14
debug: Replacing trivial Phi node: let b#5: uint64 = φ(b#0 <- block@7, b#0 <- block@8) (b#5) with b#0
debug: Deleting Phi assignment: let b#5: uint64 = φ(b#0 <- block@7, b#0 <- block@8)
debug: Replaced trivial Phi node: let b#5: uint64 = φ(b#0 <- block@7, b#0 <- block@8) (b#5) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#4: uint64 = φ(b#0 <- block@10) in block@10: // ternary_true_L15
debug: Added b#0 to Phi node: let b#4: uint64 = φ(b#0 <- block@10, b#0 <- block@11) in block@11: // ternary_false_L15
debug: Replacing trivial Phi node: let b#4: uint64 = φ(b#0 <- block@10, b#0 <- block@11) (b#4) with b#0
debug: Deleting Phi assignment: let b#4: uint64 = φ(b#0 <- block@10, b#0 <- block@11)
debug: Replaced trivial Phi node: let b#4: uint64 = φ(b#0 <- block@10, b#0 <- block@11) (b#4) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#3: uint64 = φ(b#0 <- block@13) in block@13: // ternary_true_L17
debug: Added b#0 to Phi node: let b#3: uint64 = φ(b#0 <- block@13, b#0 <- block@14) in block@14: // ternary_false_L17
debug: Replacing trivial Phi node: let b#3: uint64 = φ(b#0 <- block@13, b#0 <- block@14) (b#3) with b#0
debug: Deleting Phi assignment: let b#3: uint64 = φ(b#0 <- block@13, b#0 <- block@14)
debug: Replaced trivial Phi node: let b#3: uint64 = φ(b#0 <- block@13, b#0 <- block@14) (b#3) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@16) in block@16: // ternary_true_L18
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@16, b#0 <- block@17) in block@17: // ternary_false_L18
debug: Replacing trivial Phi node: let b#2: uint64 = φ(b#0 <- block@16, b#0 <- block@17) (b#2) with b#0
debug: Deleting Phi assignment: let b#2: uint64 = φ(b#0 <- block@16, b#0 <- block@17)
debug: Replaced trivial Phi node: let b#2: uint64 = φ(b#0 <- block@16, b#0 <- block@17) (b#2) with b#0 in current definition for 1 blocks
debug: Created Phi assignment: let c#1: uint64 = undefined while trying to resolve 'c' in block@18: // ternary_merge_L18
debug: Created Phi assignment: let c#2: uint64 = undefined while trying to resolve 'c' in block@15: // ternary_merge_L17
debug: Created Phi assignment: let c#3: uint64 = undefined while trying to resolve 'c' in block@12: // ternary_merge_L15
debug: Created Phi assignment: let c#4: uint64 = undefined while trying to resolve 'c' in block@9: // ternary_merge_L14
debug: Created Phi assignment: let c#5: uint64 = undefined while trying to resolve 'c' in block@6: // ternary_merge_L12
debug: Added c#0 to Phi node: let c#5: uint64 = φ(c#0 <- block@4) in block@4: // ternary_true_L12
debug: Added c#0 to Phi node: let c#5: uint64 = φ(c#0 <- block@4, c#0 <- block@5) in block@5: // ternary_false_L12
debug: Replacing trivial Phi node: let c#5: uint64 = φ(c#0 <- block@4, c#0 <- block@5) (c#5) with c#0
debug: Deleting Phi assignment: let c#5: uint64 = φ(c#0 <- block@4, c#0 <- block@5)
debug: Replaced trivial Phi node: let c#5: uint64 = φ(c#0 <- block@4, c#0 <- block@5) (c#5) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#4: uint64 = φ(c#0 <- block@7) in block@7: // ternary_true_L14
debug: Added c#0 to Phi node: let c#4: uint64 = φ(c#0 <- block@7, c#0 <- block@8) in block@8: // ternary_false_L14
debug: Replacing trivial Phi node: let c#4: uint64 = φ(c#0 <- block@7, c#0 <- block@8) (c#4) with c#0
debug: Deleting Phi assignment: let c#4: uint64 = φ(c#0 <- block@7, c#0 <- block@8)
debug: Replaced trivial Phi node: let c#4: uint64 = φ(c#0 <- block@7, c#0 <- block@8) (c#4) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#3: uint64 = φ(c#0 <- block@10) in block@10: // ternary_true_L15
debug: Added c#0 to Phi node: let c#3: uint64 = φ(c#0 <- block@10, c#0 <- block@11) in block@11: // ternary_false_L15
debug: Replacing trivial Phi node: let c#3: uint64 = φ(c#0 <- block@10, c#0 <- block@11) (c#3) with c#0
debug: Deleting Phi assignment: let c#3: uint64 = φ(c#0 <- block@10, c#0 <- block@11)
debug: Replaced trivial Phi node: let c#3: uint64 = φ(c#0 <- block@10, c#0 <- block@11) (c#3) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#2: uint64 = φ(c#0 <- block@13) in block@13: // ternary_true_L17
debug: Added c#0 to Phi node: let c#2: uint64 = φ(c#0 <- block@13, c#0 <- block@14) in block@14: // ternary_false_L17
debug: Replacing trivial Phi node: let c#2: uint64 = φ(c#0 <- block@13, c#0 <- block@14) (c#2) with c#0
debug: Deleting Phi assignment: let c#2: uint64 = φ(c#0 <- block@13, c#0 <- block@14)
debug: Replaced trivial Phi node: let c#2: uint64 = φ(c#0 <- block@13, c#0 <- block@14) (c#2) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#1: uint64 = φ(c#0 <- block@16) in block@16: // ternary_true_L18
debug: Added c#0 to Phi node: let c#1: uint64 = φ(c#0 <- block@16, c#0 <- block@17) in block@17: // ternary_false_L18
debug: Replacing trivial Phi node: let c#1: uint64 = φ(c#0 <- block@16, c#0 <- block@17) (c#1) with c#0
debug: Deleting Phi assignment: let c#1: uint64 = φ(c#0 <- block@16, c#0 <- block@17)
debug: Replaced trivial Phi node: let c#1: uint64 = φ(c#0 <- block@16, c#0 <- block@17) (c#1) with c#0 in current definition for 1 blocks
debug: Terminated block@18: // ternary_merge_L18
debug: Sealing block@19: // ternary_true_L20
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@18: // ternary_merge_L18
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@15: // ternary_merge_L17
debug: Created Phi assignment: let a#4: uint64 = undefined while trying to resolve 'a' in block@12: // ternary_merge_L15
debug: Created Phi assignment: let a#5: uint64 = undefined while trying to resolve 'a' in block@9: // ternary_merge_L14
debug: Created Phi assignment: let a#6: uint64 = undefined while trying to resolve 'a' in block@6: // ternary_merge_L12
debug: Added a#0 to Phi node: let a#6: uint64 = φ(a#0 <- block@4) in block@4: // ternary_true_L12
debug: Added a#0 to Phi node: let a#6: uint64 = φ(a#0 <- block@4, a#0 <- block@5) in block@5: // ternary_false_L12
debug: Replacing trivial Phi node: let a#6: uint64 = φ(a#0 <- block@4, a#0 <- block@5) (a#6) with a#0
debug: Deleting Phi assignment: let a#6: uint64 = φ(a#0 <- block@4, a#0 <- block@5)
debug: Replaced trivial Phi node: let a#6: uint64 = φ(a#0 <- block@4, a#0 <- block@5) (a#6) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#5: uint64 = φ(a#0 <- block@7) in block@7: // ternary_true_L14
debug: Added a#0 to Phi node: let a#5: uint64 = φ(a#0 <- block@7, a#0 <- block@8) in block@8: // ternary_false_L14
debug: Replacing trivial Phi node: let a#5: uint64 = φ(a#0 <- block@7, a#0 <- block@8) (a#5) with a#0
debug: Deleting Phi assignment: let a#5: uint64 = φ(a#0 <- block@7, a#0 <- block@8)
debug: Replaced trivial Phi node: let a#5: uint64 = φ(a#0 <- block@7, a#0 <- block@8) (a#5) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#4: uint64 = φ(a#0 <- block@10) in block@10: // ternary_true_L15
debug: Added a#0 to Phi node: let a#4: uint64 = φ(a#0 <- block@10, a#0 <- block@11) in block@11: // ternary_false_L15
debug: Replacing trivial Phi node: let a#4: uint64 = φ(a#0 <- block@10, a#0 <- block@11) (a#4) with a#0
debug: Deleting Phi assignment: let a#4: uint64 = φ(a#0 <- block@10, a#0 <- block@11)
debug: Replaced trivial Phi node: let a#4: uint64 = φ(a#0 <- block@10, a#0 <- block@11) (a#4) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#3: uint64 = φ(a#0 <- block@13) in block@13: // ternary_true_L17
debug: Added a#0 to Phi node: let a#3: uint64 = φ(a#0 <- block@13, a#0 <- block@14) in block@14: // ternary_false_L17
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#0 <- block@13, a#0 <- block@14) (a#3) with a#0
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#0 <- block@13, a#0 <- block@14)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#0 <- block@13, a#0 <- block@14) (a#3) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#0 <- block@16) in block@16: // ternary_true_L18
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#0 <- block@16, a#0 <- block@17) in block@17: // ternary_false_L18
debug: Replacing trivial Phi node: let a#2: uint64 = φ(a#0 <- block@16, a#0 <- block@17) (a#2) with a#0
debug: Deleting Phi assignment: let a#2: uint64 = φ(a#0 <- block@16, a#0 <- block@17)
debug: Replaced trivial Phi node: let a#2: uint64 = φ(a#0 <- block@16, a#0 <- block@17) (a#2) with a#0 in current definition for 1 blocks
debug: Terminated block@19: // ternary_true_L20
debug: Sealing block@20: // ternary_false_L20
debug: Created Phi assignment: let d#1: uint64 = undefined while trying to resolve 'd' in block@18: // ternary_merge_L18
debug: Created Phi assignment: let d#2: uint64 = undefined while trying to resolve 'd' in block@15: // ternary_merge_L17
debug: Created Phi assignment: let d#3: uint64 = undefined while trying to resolve 'd' in block@12: // ternary_merge_L15
debug: Created Phi assignment: let d#4: uint64 = undefined while trying to resolve 'd' in block@9: // ternary_merge_L14
debug: Added d#0 to Phi node: let d#4: uint64 = φ(d#0 <- block@7) in block@7: // ternary_true_L14
debug: Added d#0 to Phi node: let d#4: uint64 = φ(d#0 <- block@7, d#0 <- block@8) in block@8: // ternary_false_L14
debug: Replacing trivial Phi node: let d#4: uint64 = φ(d#0 <- block@7, d#0 <- block@8) (d#4) with d#0
debug: Deleting Phi assignment: let d#4: uint64 = φ(d#0 <- block@7, d#0 <- block@8)
debug: Replaced trivial Phi node: let d#4: uint64 = φ(d#0 <- block@7, d#0 <- block@8) (d#4) with d#0 in current definition for 1 blocks
debug: Added d#0 to Phi node: let d#3: uint64 = φ(d#0 <- block@10) in block@10: // ternary_true_L15
debug: Added d#0 to Phi node: let d#3: uint64 = φ(d#0 <- block@10, d#0 <- block@11) in block@11: // ternary_false_L15
debug: Replacing trivial Phi node: let d#3: uint64 = φ(d#0 <- block@10, d#0 <- block@11) (d#3) with d#0
debug: Deleting Phi assignment: let d#3: uint64 = φ(d#0 <- block@10, d#0 <- block@11)
debug: Replaced trivial Phi node: let d#3: uint64 = φ(d#0 <- block@10, d#0 <- block@11) (d#3) with d#0 in current definition for 1 blocks
debug: Added d#0 to Phi node: let d#2: uint64 = φ(d#0 <- block@13) in block@13: // ternary_true_L17
debug: Added d#0 to Phi node: let d#2: uint64 = φ(d#0 <- block@13, d#0 <- block@14) in block@14: // ternary_false_L17
debug: Replacing trivial Phi node: let d#2: uint64 = φ(d#0 <- block@13, d#0 <- block@14) (d#2) with d#0
debug: Deleting Phi assignment: let d#2: uint64 = φ(d#0 <- block@13, d#0 <- block@14)
debug: Replaced trivial Phi node: let d#2: uint64 = φ(d#0 <- block@13, d#0 <- block@14) (d#2) with d#0 in current definition for 1 blocks
debug: Added d#0 to Phi node: let d#1: uint64 = φ(d#0 <- block@16) in block@16: // ternary_true_L18
debug: Added d#0 to Phi node: let d#1: uint64 = φ(d#0 <- block@16, d#0 <- block@17) in block@17: // ternary_false_L18
debug: Replacing trivial Phi node: let d#1: uint64 = φ(d#0 <- block@16, d#0 <- block@17) (d#1) with d#0
debug: Deleting Phi assignment: let d#1: uint64 = φ(d#0 <- block@16, d#0 <- block@17)
debug: Replaced trivial Phi node: let d#1: uint64 = φ(d#0 <- block@16, d#0 <- block@17) (d#1) with d#0 in current definition for 1 blocks
debug: Created Phi assignment: let e#1: uint64 = undefined while trying to resolve 'e' in block@18: // ternary_merge_L18
debug: Created Phi assignment: let e#2: uint64 = undefined while trying to resolve 'e' in block@15: // ternary_merge_L17
debug: Created Phi assignment: let e#3: uint64 = undefined while trying to resolve 'e' in block@12: // ternary_merge_L15
debug: Added e#0 to Phi node: let e#3: uint64 = φ(e#0 <- block@10) in block@10: // ternary_true_L15
debug: Added e#0 to Phi node: let e#3: uint64 = φ(e#0 <- block@10, e#0 <- block@11) in block@11: // ternary_false_L15
debug: Replacing trivial Phi node: let e#3: uint64 = φ(e#0 <- block@10, e#0 <- block@11) (e#3) with e#0
debug: Deleting Phi assignment: let e#3: uint64 = φ(e#0 <- block@10, e#0 <- block@11)
debug: Replaced trivial Phi node: let e#3: uint64 = φ(e#0 <- block@10, e#0 <- block@11) (e#3) with e#0 in current definition for 1 blocks
debug: Added e#0 to Phi node: let e#2: uint64 = φ(e#0 <- block@13) in block@13: // ternary_true_L17
debug: Added e#0 to Phi node: let e#2: uint64 = φ(e#0 <- block@13, e#0 <- block@14) in block@14: // ternary_false_L17
debug: Replacing trivial Phi node: let e#2: uint64 = φ(e#0 <- block@13, e#0 <- block@14) (e#2) with e#0
debug: Deleting Phi assignment: let e#2: uint64 = φ(e#0 <- block@13, e#0 <- block@14)
debug: Replaced trivial Phi node: let e#2: uint64 = φ(e#0 <- block@13, e#0 <- block@14) (e#2) with e#0 in current definition for 1 blocks
debug: Added e#0 to Phi node: let e#1: uint64 = φ(e#0 <- block@16) in block@16: // ternary_true_L18
debug: Added e#0 to Phi node: let e#1: uint64 = φ(e#0 <- block@16, e#0 <- block@17) in block@17: // ternary_false_L18
debug: Replacing trivial Phi node: let e#1: uint64 = φ(e#0 <- block@16, e#0 <- block@17) (e#1) with e#0
debug: Deleting Phi assignment: let e#1: uint64 = φ(e#0 <- block@16, e#0 <- block@17)
debug: Replaced trivial Phi node: let e#1: uint64 = φ(e#0 <- block@16, e#0 <- block@17) (e#1) with e#0 in current definition for 1 blocks
debug: Terminated block@20: // ternary_false_L20
debug: Sealing block@21: // ternary_merge_L20
debug: Created Phi assignment: let ternary_result%6#2: uint64 = undefined while trying to resolve 'ternary_result%6' in block@21: // ternary_merge_L20
debug: Added ternary_result%6#0 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@19) in block@19: // ternary_true_L20
debug: Added ternary_result%6#1 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@19, ternary_result%6#1 <- block@20) in block@20: // ternary_false_L20
debug: Created Phi assignment: let a#7: uint64 = undefined while trying to resolve 'a' in block@21: // ternary_merge_L20
debug: Added a#0 to Phi node: let a#7: uint64 = φ(a#0 <- block@19) in block@19: // ternary_true_L20
debug: Added a#0 to Phi node: let a#7: uint64 = φ(a#0 <- block@19, a#0 <- block@20) in block@20: // ternary_false_L20
debug: Replacing trivial Phi node: let a#7: uint64 = φ(a#0 <- block@19, a#0 <- block@20) (a#7) with a#0
debug: Deleting Phi assignment: let a#7: uint64 = φ(a#0 <- block@19, a#0 <- block@20)
debug: Replaced trivial Phi node: let a#7: uint64 = φ(a#0 <- block@19, a#0 <- block@20) (a#7) with a#0 in current definition for 1 blocks
debug: Created Phi assignment: let b#7: uint64 = undefined while trying to resolve 'b' in block@21: // ternary_merge_L20
debug: Added b#0 to Phi node: let b#7: uint64 = φ(b#0 <- block@19) in block@19: // ternary_true_L20
debug: Added b#0 to Phi node: let b#7: uint64 = φ(b#0 <- block@19, b#0 <- block@20) in block@20: // ternary_false_L20
debug: Replacing trivial Phi node: let b#7: uint64 = φ(b#0 <- block@19, b#0 <- block@20) (b#7) with b#0
debug: Deleting Phi assignment: let b#7: uint64 = φ(b#0 <- block@19, b#0 <- block@20)
debug: Replaced trivial Phi node: let b#7: uint64 = φ(b#0 <- block@19, b#0 <- block@20) (b#7) with b#0 in current definition for 1 blocks
debug: Created Phi assignment: let c#6: uint64 = undefined while trying to resolve 'c' in block@21: // ternary_merge_L20
debug: Added c#0 to Phi node: let c#6: uint64 = φ(c#0 <- block@19) in block@19: // ternary_true_L20
debug: Added c#0 to Phi node: let c#6: uint64 = φ(c#0 <- block@19, c#0 <- block@20) in block@20: // ternary_false_L20
debug: Replacing trivial Phi node: let c#6: uint64 = φ(c#0 <- block@19, c#0 <- block@20) (c#6) with c#0
debug: Deleting Phi assignment: let c#6: uint64 = φ(c#0 <- block@19, c#0 <- block@20)
debug: Replaced trivial Phi node: let c#6: uint64 = φ(c#0 <- block@19, c#0 <- block@20) (c#6) with c#0 in current definition for 1 blocks
debug: Created Phi assignment: let d#5: uint64 = undefined while trying to resolve 'd' in block@21: // ternary_merge_L20
debug: Added d#0 to Phi node: let d#5: uint64 = φ(d#0 <- block@19) in block@19: // ternary_true_L20
debug: Added d#0 to Phi node: let d#5: uint64 = φ(d#0 <- block@19, d#0 <- block@20) in block@20: // ternary_false_L20
debug: Replacing trivial Phi node: let d#5: uint64 = φ(d#0 <- block@19, d#0 <- block@20) (d#5) with d#0
debug: Deleting Phi assignment: let d#5: uint64 = φ(d#0 <- block@19, d#0 <- block@20)
debug: Replaced trivial Phi node: let d#5: uint64 = φ(d#0 <- block@19, d#0 <- block@20) (d#5) with d#0 in current definition for 1 blocks
debug: Created Phi assignment: let f#1: uint64 = undefined while trying to resolve 'f' in block@21: // ternary_merge_L20
debug: Created Phi assignment: let f#2: uint64 = undefined while trying to resolve 'f' in block@18: // ternary_merge_L18
debug: Created Phi assignment: let f#3: uint64 = undefined while trying to resolve 'f' in block@15: // ternary_merge_L17
debug: Added f#0 to Phi node: let f#3: uint64 = φ(f#0 <- block@13) in block@13: // ternary_true_L17
debug: Added f#0 to Phi node: let f#3: uint64 = φ(f#0 <- block@13, f#0 <- block@14) in block@14: // ternary_false_L17
debug: Replacing trivial Phi node: let f#3: uint64 = φ(f#0 <- block@13, f#0 <- block@14) (f#3) with f#0
debug: Deleting Phi assignment: let f#3: uint64 = φ(f#0 <- block@13, f#0 <- block@14)
debug: Replaced trivial Phi node: let f#3: uint64 = φ(f#0 <- block@13, f#0 <- block@14) (f#3) with f#0 in current definition for 1 blocks
debug: Added f#0 to Phi node: let f#2: uint64 = φ(f#0 <- block@16) in block@16: // ternary_true_L18
debug: Added f#0 to Phi node: let f#2: uint64 = φ(f#0 <- block@16, f#0 <- block@17) in block@17: // ternary_false_L18
debug: Replacing trivial Phi node: let f#2: uint64 = φ(f#0 <- block@16, f#0 <- block@17) (f#2) with f#0
debug: Deleting Phi assignment: let f#2: uint64 = φ(f#0 <- block@16, f#0 <- block@17)
debug: Replaced trivial Phi node: let f#2: uint64 = φ(f#0 <- block@16, f#0 <- block@17) (f#2) with f#0 in current definition for 1 blocks
debug: Added f#0 to Phi node: let f#1: uint64 = φ(f#0 <- block@19) in block@19: // ternary_true_L20
debug: Added f#0 to Phi node: let f#1: uint64 = φ(f#0 <- block@19, f#0 <- block@20) in block@20: // ternary_false_L20
debug: Replacing trivial Phi node: let f#1: uint64 = φ(f#0 <- block@19, f#0 <- block@20) (f#1) with f#0
debug: Deleting Phi assignment: let f#1: uint64 = φ(f#0 <- block@19, f#0 <- block@20)
debug: Replaced trivial Phi node: let f#1: uint64 = φ(f#0 <- block@19, f#0 <- block@20) (f#1) with f#0 in current definition for 1 blocks
debug: Created Phi assignment: let h#1: uint64 = undefined while trying to resolve 'h' in block@21: // ternary_merge_L20
debug: Added h#0 to Phi node: let h#1: uint64 = φ(h#0 <- block@19) in block@19: // ternary_true_L20
debug: Added h#0 to Phi node: let h#1: uint64 = φ(h#0 <- block@19, h#0 <- block@20) in block@20: // ternary_false_L20
debug: Replacing trivial Phi node: let h#1: uint64 = φ(h#0 <- block@19, h#0 <- block@20) (h#1) with h#0
debug: Deleting Phi assignment: let h#1: uint64 = φ(h#0 <- block@19, h#0 <- block@20)
debug: Replaced trivial Phi node: let h#1: uint64 = φ(h#0 <- block@19, h#0 <- block@20) (h#1) with h#0 in current definition for 1 blocks
debug: Created Phi assignment: let e#4: uint64 = undefined while trying to resolve 'e' in block@21: // ternary_merge_L20
debug: Added e#0 to Phi node: let e#4: uint64 = φ(e#0 <- block@19) in block@19: // ternary_true_L20
debug: Added e#0 to Phi node: let e#4: uint64 = φ(e#0 <- block@19, e#0 <- block@20) in block@20: // ternary_false_L20
debug: Replacing trivial Phi node: let e#4: uint64 = φ(e#0 <- block@19, e#0 <- block@20) (e#4) with e#0
debug: Deleting Phi assignment: let e#4: uint64 = φ(e#0 <- block@19, e#0 <- block@20)
debug: Replaced trivial Phi node: let e#4: uint64 = φ(e#0 <- block@19, e#0 <- block@20) (e#4) with e#0 in current definition for 1 blocks
debug: Created Phi assignment: let g#1: uint64 = undefined while trying to resolve 'g' in block@21: // ternary_merge_L20
debug: Created Phi assignment: let g#2: uint64 = undefined while trying to resolve 'g' in block@18: // ternary_merge_L18
debug: Added g#0 to Phi node: let g#2: uint64 = φ(g#0 <- block@16) in block@16: // ternary_true_L18
debug: Added g#0 to Phi node: let g#2: uint64 = φ(g#0 <- block@16, g#0 <- block@17) in block@17: // ternary_false_L18
debug: Replacing trivial Phi node: let g#2: uint64 = φ(g#0 <- block@16, g#0 <- block@17) (g#2) with g#0
debug: Deleting Phi assignment: let g#2: uint64 = φ(g#0 <- block@16, g#0 <- block@17)
debug: Replaced trivial Phi node: let g#2: uint64 = φ(g#0 <- block@16, g#0 <- block@17) (g#2) with g#0 in current definition for 1 blocks
debug: Added g#0 to Phi node: let g#1: uint64 = φ(g#0 <- block@19) in block@19: // ternary_true_L20
debug: Added g#0 to Phi node: let g#1: uint64 = φ(g#0 <- block@19, g#0 <- block@20) in block@20: // ternary_false_L20
debug: Replacing trivial Phi node: let g#1: uint64 = φ(g#0 <- block@19, g#0 <- block@20) (g#1) with g#0
debug: Deleting Phi assignment: let g#1: uint64 = φ(g#0 <- block@19, g#0 <- block@20)
debug: Replaced trivial Phi node: let g#1: uint64 = φ(g#0 <- block@19, g#0 <- block@20) (g#1) with g#0 in current definition for 1 blocks
debug: Terminated block@21: // ternary_merge_L20
debug: Sealing block@0: // L28
debug: Terminated block@0: // L28
debug: Sealing block@0: // L14
debug: Terminated block@0: // L14
debug: Sealing block@1: // ternary_true_L16
debug: Terminated block@1: // ternary_true_L16
debug: Sealing block@2: // ternary_false_L16
debug: Terminated block@2: // ternary_false_L16
debug: Sealing block@3: // ternary_merge_L16
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@3: // ternary_merge_L16
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1) in block@1: // ternary_true_L16
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2: // ternary_false_L16
debug: Created Phi assignment: let condition#1: bool = undefined while trying to resolve 'condition' in block@3: // ternary_merge_L16
debug: Added condition#0 to Phi node: let condition#1: bool = φ(condition#0 <- block@1) in block@1: // ternary_true_L16
debug: Added condition#0 to Phi node: let condition#1: bool = φ(condition#0 <- block@1, condition#0 <- block@2) in block@2: // ternary_false_L16
debug: Replacing trivial Phi node: let condition#1: bool = φ(condition#0 <- block@1, condition#0 <- block@2) (condition#1) with condition#0
debug: Deleting Phi assignment: let condition#1: bool = φ(condition#0 <- block@1, condition#0 <- block@2)
debug: Replaced trivial Phi node: let condition#1: bool = φ(condition#0 <- block@1, condition#0 <- block@2) (condition#1) with condition#0 in current definition for 1 blocks
debug: Terminated block@3: // ternary_merge_L16
debug: Sealing block@4: // ternary_true_L18
debug: Terminated block@4: // ternary_true_L18
debug: Sealing block@5: // ternary_false_L18
debug: Terminated block@5: // ternary_false_L18
debug: Sealing block@6: // ternary_merge_L18
debug: Created Phi assignment: let ternary_result%1#2: uint64 = undefined while trying to resolve 'ternary_result%1' in block@6: // ternary_merge_L18
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4) in block@4: // ternary_true_L18
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5) in block@5: // ternary_false_L18
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@6: // ternary_merge_L18
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@4) in block@4: // ternary_true_L18
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@4, x#0 <- block@5) in block@5: // ternary_false_L18
debug: Replacing trivial Phi node: let x#1: uint64 = φ(x#0 <- block@4, x#0 <- block@5) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: uint64 = φ(x#0 <- block@4, x#0 <- block@5)
debug: Replaced trivial Phi node: let x#1: uint64 = φ(x#0 <- block@4, x#0 <- block@5) (x#1) with x#0 in current definition for 1 blocks
debug: Created Phi assignment: let condition#2: bool = undefined while trying to resolve 'condition' in block@6: // ternary_merge_L18
debug: Added condition#0 to Phi node: let condition#2: bool = φ(condition#0 <- block@4) in block@4: // ternary_true_L18
debug: Added condition#0 to Phi node: let condition#2: bool = φ(condition#0 <- block@4, condition#0 <- block@5) in block@5: // ternary_false_L18
debug: Replacing trivial Phi node: let condition#2: bool = φ(condition#0 <- block@4, condition#0 <- block@5) (condition#2) with condition#0
debug: Deleting Phi assignment: let condition#2: bool = φ(condition#0 <- block@4, condition#0 <- block@5)
debug: Replaced trivial Phi node: let condition#2: bool = φ(condition#0 <- block@4, condition#0 <- block@5) (condition#2) with condition#0 in current definition for 1 blocks
debug: Terminated block@6: // ternary_merge_L18
debug: Sealing block@7: // ternary_true_L19
debug: Terminated block@7: // ternary_true_L19
debug: Sealing block@8: // ternary_false_L19
debug: Terminated block@8: // ternary_false_L19
debug: Sealing block@9: // ternary_merge_L19
debug: Created Phi assignment: let ternary_result%2#2: uint64 = undefined while trying to resolve 'ternary_result%2' in block@9: // ternary_merge_L19
debug: Added ternary_result%2#0 to Phi node: let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7) in block@7: // ternary_true_L19
debug: Added ternary_result%2#1 to Phi node: let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8) in block@8: // ternary_false_L19
debug: Created Phi assignment: let condition#3: bool = undefined while trying to resolve 'condition' in block@9: // ternary_merge_L19
debug: Added condition#0 to Phi node: let condition#3: bool = φ(condition#0 <- block@7) in block@7: // ternary_true_L19
debug: Added condition#0 to Phi node: let condition#3: bool = φ(condition#0 <- block@7, condition#0 <- block@8) in block@8: // ternary_false_L19
debug: Replacing trivial Phi node: let condition#3: bool = φ(condition#0 <- block@7, condition#0 <- block@8) (condition#3) with condition#0
debug: Deleting Phi assignment: let condition#3: bool = φ(condition#0 <- block@7, condition#0 <- block@8)
debug: Replaced trivial Phi node: let condition#3: bool = φ(condition#0 <- block@7, condition#0 <- block@8) (condition#3) with condition#0 in current definition for 1 blocks
debug: Terminated block@9: // ternary_merge_L19
debug: Sealing block@10: // ternary_true_L20
debug: Terminated block@10: // ternary_true_L20
debug: Sealing block@11: // ternary_false_L20
debug: Terminated block@11: // ternary_false_L20
debug: Sealing block@12: // ternary_merge_L20
debug: Created Phi assignment: let ternary_result%3#2: uint64 = undefined while trying to resolve 'ternary_result%3' in block@12: // ternary_merge_L20
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@10) in block@10: // ternary_true_L20
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11) in block@11: // ternary_false_L20
debug: Created Phi assignment: let x#2: uint64 = undefined while trying to resolve 'x' in block@12: // ternary_merge_L20
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@9: // ternary_merge_L19
debug: Added x#0 to Phi node: let x#3: uint64 = φ(x#0 <- block@7) in block@7: // ternary_true_L19
debug: Added x#0 to Phi node: let x#3: uint64 = φ(x#0 <- block@7, x#0 <- block@8) in block@8: // ternary_false_L19
debug: Replacing trivial Phi node: let x#3: uint64 = φ(x#0 <- block@7, x#0 <- block@8) (x#3) with x#0
debug: Deleting Phi assignment: let x#3: uint64 = φ(x#0 <- block@7, x#0 <- block@8)
debug: Replaced trivial Phi node: let x#3: uint64 = φ(x#0 <- block@7, x#0 <- block@8) (x#3) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@10) in block@10: // ternary_true_L20
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@10, x#0 <- block@11) in block@11: // ternary_false_L20
debug: Replacing trivial Phi node: let x#2: uint64 = φ(x#0 <- block@10, x#0 <- block@11) (x#2) with x#0
debug: Deleting Phi assignment: let x#2: uint64 = φ(x#0 <- block@10, x#0 <- block@11)
debug: Replaced trivial Phi node: let x#2: uint64 = φ(x#0 <- block@10, x#0 <- block@11) (x#2) with x#0 in current definition for 1 blocks
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@12: // ternary_merge_L20
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@10) in block@10: // ternary_true_L20
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@10, y#0 <- block@11) in block@11: // ternary_false_L20
debug: Replacing trivial Phi node: let y#1: uint64 = φ(y#0 <- block@10, y#0 <- block@11) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: uint64 = φ(y#0 <- block@10, y#0 <- block@11)
debug: Replaced trivial Phi node: let y#1: uint64 = φ(y#0 <- block@10, y#0 <- block@11) (y#1) with y#0 in current definition for 1 blocks
debug: Created Phi assignment: let condition#4: bool = undefined while trying to resolve 'condition' in block@12: // ternary_merge_L20
debug: Added condition#0 to Phi node: let condition#4: bool = φ(condition#0 <- block@10) in block@10: // ternary_true_L20
debug: Added condition#0 to Phi node: let condition#4: bool = φ(condition#0 <- block@10, condition#0 <- block@11) in block@11: // ternary_false_L20
debug: Replacing trivial Phi node: let condition#4: bool = φ(condition#0 <- block@10, condition#0 <- block@11) (condition#4) with condition#0
debug: Deleting Phi assignment: let condition#4: bool = φ(condition#0 <- block@10, condition#0 <- block@11)
debug: Replaced trivial Phi node: let condition#4: bool = φ(condition#0 <- block@10, condition#0 <- block@11) (condition#4) with condition#0 in current definition for 1 blocks
debug: Terminated block@12: // ternary_merge_L20
debug: Sealing block@13: // ternary_true_L23
debug: Terminated block@13: // ternary_true_L23
debug: Sealing block@14: // ternary_false_L23
debug: Terminated block@14: // ternary_false_L23
debug: Sealing block@15: // ternary_merge_L23
debug: Created Phi assignment: let ternary_result%4#2: uint64 = undefined while trying to resolve 'ternary_result%4' in block@15: // ternary_merge_L23
debug: Added ternary_result%4#0 to Phi node: let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@13) in block@13: // ternary_true_L23
debug: Added ternary_result%4#1 to Phi node: let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@13, ternary_result%4#1 <- block@14) in block@14: // ternary_false_L23
debug: Created Phi assignment: let condition#5: bool = undefined while trying to resolve 'condition' in block@15: // ternary_merge_L23
debug: Added condition#0 to Phi node: let condition#5: bool = φ(condition#0 <- block@13) in block@13: // ternary_true_L23
debug: Added condition#0 to Phi node: let condition#5: bool = φ(condition#0 <- block@13, condition#0 <- block@14) in block@14: // ternary_false_L23
debug: Replacing trivial Phi node: let condition#5: bool = φ(condition#0 <- block@13, condition#0 <- block@14) (condition#5) with condition#0
debug: Deleting Phi assignment: let condition#5: bool = φ(condition#0 <- block@13, condition#0 <- block@14)
debug: Replaced trivial Phi node: let condition#5: bool = φ(condition#0 <- block@13, condition#0 <- block@14) (condition#5) with condition#0 in current definition for 1 blocks
debug: Terminated block@15: // ternary_merge_L23
debug: Sealing block@16: // ternary_true_L25
debug: Terminated block@16: // ternary_true_L25
debug: Sealing block@17: // ternary_false_L25
debug: Terminated block@17: // ternary_false_L25
debug: Sealing block@18: // ternary_merge_L25
debug: Created Phi assignment: let ternary_result%5#2: bool = undefined while trying to resolve 'ternary_result%5' in block@18: // ternary_merge_L25
debug: Added ternary_result%5#0 to Phi node: let ternary_result%5#2: bool = φ(ternary_result%5#0 <- block@16) in block@16: // ternary_true_L25
debug: Added ternary_result%5#1 to Phi node: let ternary_result%5#2: bool = φ(ternary_result%5#0 <- block@16, ternary_result%5#1 <- block@17) in block@17: // ternary_false_L25
debug: Terminated block@18: // ternary_merge_L25
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Output IR to conditional_expressions/out/MyContract.ssa.ir
info: Optimizing test_cases.conditional_expressions.contract.MyContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: ternary_result%0#2, c#0
debug: Replacing {ternary_result%0#2} with c#0 made 1 modifications
debug: Found equivalence set: ternary_result%1#2, d#0
debug: Replacing {ternary_result%1#2} with d#0 made 1 modifications
debug: Found equivalence set: awst_tmp%0#0, reinterpret_bool%2#0, ternary_result%2#0
debug: Replacing {reinterpret_bool%2#0, ternary_result%2#0} with awst_tmp%0#0 made 2 modifications
debug: Found equivalence set: ternary_result%2#2, e#0
debug: Replacing {ternary_result%2#2} with e#0 made 1 modifications
debug: Found equivalence set: awst_tmp%1#0, reinterpret_bool%3#0, ternary_result%3#0
debug: Replacing {reinterpret_bool%3#0, ternary_result%3#0} with awst_tmp%1#0 made 2 modifications
debug: Found equivalence set: ternary_result%3#2, f#0
debug: Replacing {ternary_result%3#2} with f#0 made 1 modifications
debug: Found equivalence set: awst_tmp%2#0, reinterpret_bool%4#0, ternary_result%4#0
debug: Replacing {reinterpret_bool%4#0, ternary_result%4#0} with awst_tmp%2#0 made 2 modifications
debug: Found equivalence set: ternary_result%4#2, g#0
debug: Replacing {ternary_result%4#2} with g#0 made 1 modifications
debug: Found equivalence set: awst_tmp%3#0, reinterpret_bool%5#0, ternary_result%5#0
debug: Replacing {reinterpret_bool%5#0, ternary_result%5#0} with awst_tmp%3#0 made 2 modifications
debug: Found equivalence set: ternary_result%5#2, h#0
debug: Replacing {ternary_result%5#2} with h#0 made 1 modifications
debug: Found equivalence set: ternary_result%6#2, i#0
debug: Replacing {ternary_result%6#2} with i#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (* 1u 2u) to 2u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable reinterpret_bool%0#0
debug: Removing unused variable reinterpret_bool%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0: // L7 from goto 1u ? block@1 : block@2 to goto block@1
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@3: // ternary_merge_L11 from goto 2u ? block@5 : block@4 to goto block@5
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // ternary_true_L11 with block@0: // L7 in block@3: // ternary_merge_L11
debug: Merged linear block@1: // ternary_true_L11 into block@0: // L7
debug: Replaced predecessor block@5: // ternary_false_L12 with block@3: // ternary_merge_L11 in block@6: // ternary_merge_L12
debug: Merged linear block@5: // ternary_false_L12 into block@3: // ternary_merge_L11
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@7: // ternary_true_L14 because it's used by phi nodes
debug: Not removing empty block block@10: // ternary_true_L15 because it's used by phi nodes
debug: Not removing empty block block@13: // ternary_true_L17 because it's used by phi nodes
debug: Not removing empty block block@16: // ternary_true_L18 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@2: // ternary_false_L11, block@4: // ternary_true_L12
debug: Removed unreachable predecessors from block@3: // ternary_merge_L11
debug: Removed unreachable predecessors from block@6: // ternary_merge_L12
debug: Removing unreachable phi arguments: ternary_result%0#1 <- block@2
debug: Replacing trivial Phi node: let c#0: uint64 = φ(ternary_result%0#0 <- block@0) (c#0) with ternary_result%0#0
debug: Deleting Phi assignment: let c#0: uint64 = φ(ternary_result%0#0 <- block@0)
debug: Removing unreachable phi arguments: ternary_result%1#0 <- block@4
debug: Replacing trivial Phi node: let d#0: uint64 = φ(ternary_result%1#1 <- block@3) (d#0) with ternary_result%1#1
debug: Deleting Phi assignment: let d#0: uint64 = φ(ternary_result%1#1 <- block@3)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.expensive_op
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.side_effecting_op
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to conditional_expressions/out/MyContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (< 2u 1u) to 0u
debug: Simplified (* 2u 1u) to 2u
debug: Simplified (* tmp%2#0 1u) to tmp%2#0
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable ternary_result%0#0
debug: Removing unused variable ternary_result%1#1
debug: Removing unused variable tmp%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // ternary_merge_L11 with block@0: // L7 in block@6: // ternary_merge_L12
debug: Merged linear block@3: // ternary_merge_L11 into block@0: // L7
debug: Replaced predecessor block@6: // ternary_merge_L12 with block@0: // L7 in block@8: // ternary_false_L14
debug: Replaced predecessor block@6: // ternary_merge_L12 with block@0: // L7 in block@7: // ternary_true_L14
debug: Merged linear block@6: // ternary_merge_L12 into block@0: // L7
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@7: // ternary_true_L14 because it's used by phi nodes
debug: Not removing empty block block@10: // ternary_true_L15 because it's used by phi nodes
debug: Not removing empty block block@13: // ternary_true_L17 because it's used by phi nodes
debug: Not removing empty block block@16: // ternary_true_L18 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.expensive_op
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.side_effecting_op
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to conditional_expressions/out/MyContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@18: // ternary_merge_L18 from goto 0u ? block@19 : block@20 to goto block@20
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@20: // ternary_false_L20 with block@18: // ternary_merge_L18 in block@21: // ternary_merge_L20
debug: Merged linear block@20: // ternary_false_L20 into block@18: // ternary_merge_L18
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@7: // ternary_true_L14 because it's used by phi nodes
debug: Not removing empty block block@10: // ternary_true_L15 because it's used by phi nodes
debug: Not removing empty block block@13: // ternary_true_L17 because it's used by phi nodes
debug: Not removing empty block block@16: // ternary_true_L18 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@19: // ternary_true_L20
debug: Removed unreachable predecessors from block@21: // ternary_merge_L20
debug: Removing unreachable phi arguments: ternary_result%6#0 <- block@19
debug: Replacing trivial Phi node: let i#0: uint64 = φ(ternary_result%6#1 <- block@18) (i#0) with ternary_result%6#1
debug: Deleting Phi assignment: let i#0: uint64 = φ(ternary_result%6#1 <- block@18)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.expensive_op
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.side_effecting_op
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to conditional_expressions/out/MyContract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@21: // ternary_merge_L20 into block@18: // ternary_merge_L18
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@7: // ternary_true_L14 because it's used by phi nodes
debug: Not removing empty block block@10: // ternary_true_L15 because it's used by phi nodes
debug: Not removing empty block block@13: // ternary_true_L17 because it's used by phi nodes
debug: Not removing empty block block@16: // ternary_true_L18 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.expensive_op
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.side_effecting_op
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to conditional_expressions/out/MyContract.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@7: // ternary_true_L14 because it's used by phi nodes
debug: Not removing empty block block@10: // ternary_true_L15 because it's used by phi nodes
debug: Not removing empty block block@13: // ternary_true_L17 because it's used by phi nodes
debug: Not removing empty block block@16: // ternary_true_L18 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.expensive_op
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.side_effecting_op
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 5, ending loop
debug: Removing Phis from test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Removing Phis from test_cases.conditional_expressions.contract.MyContract.expensive_op
debug: Removing Phis from test_cases.conditional_expressions.contract.MyContract.side_effecting_op
debug: Removing Phis from test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Coalescing local variables in test_cases.conditional_expressions.contract.MyContract.approval_program using strategy RootOperandGrouping
debug: Coalescing e#0 with [e#1]
debug: Coalescing f#0 with [f#1]
debug: Coalescing g#0 with [g#1]
debug: Coalescing h#0 with [h#1]
debug: Coalescing resulted in 12 replacement/s
debug: Coalescing local variables in test_cases.conditional_expressions.contract.MyContract.expensive_op using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.conditional_expressions.contract.MyContract.side_effecting_op using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.conditional_expressions.contract.MyContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Sequentializing parallel copies in test_cases.conditional_expressions.contract.MyContract.expensive_op
debug: Sequentializing parallel copies in test_cases.conditional_expressions.contract.MyContract.side_effecting_op
debug: Sequentializing parallel copies in test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to conditional_expressions/out/MyContract.destructured.ir
debug: Inserted main_block@0.ops[2]: 'store awst_tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[4]: 'load awst_tmp%0#0' with 'load awst_tmp%0#0 from l-stack (no copy)'
debug: Inserted main_ternary_false@8.ops[2]: 'store ternary_result%2#1 to l-stack (copy)'
debug: Replaced main_ternary_false@8.ops[4]: 'load ternary_result%2#1' with 'load ternary_result%2#1 from l-stack (no copy)'
debug: Inserted main_ternary_merge@9.ops[2]: 'store awst_tmp%1#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@9.ops[4]: 'load awst_tmp%1#0' with 'load awst_tmp%1#0 from l-stack (no copy)'
debug: Inserted main_ternary_false@11.ops[2]: 'store ternary_result%3#1 to l-stack (copy)'
debug: Replaced main_ternary_false@11.ops[4]: 'load ternary_result%3#1' with 'load ternary_result%3#1 from l-stack (no copy)'
debug: Inserted main_ternary_merge@12.ops[2]: 'store awst_tmp%2#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@12.ops[4]: 'load awst_tmp%2#0' with 'load awst_tmp%2#0 from l-stack (no copy)'
debug: Inserted main_ternary_false@14.ops[2]: 'store ternary_result%4#1 to l-stack (copy)'
debug: Replaced main_ternary_false@14.ops[4]: 'load ternary_result%4#1' with 'load ternary_result%4#1 from l-stack (no copy)'
debug: Inserted main_ternary_merge@15.ops[2]: 'store awst_tmp%3#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@15.ops[4]: 'load awst_tmp%3#0' with 'load awst_tmp%3#0 from l-stack (no copy)'
debug: Inserted main_ternary_false@17.ops[2]: 'store ternary_result%5#1 to l-stack (copy)'
debug: Replaced main_ternary_false@17.ops[4]: 'load ternary_result%5#1' with 'load ternary_result%5#1 from l-stack (no copy)'
debug: Inserted main_ternary_merge@18.ops[7]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@18.ops[9]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@18.ops[12]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@18.ops[14]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@18.ops[17]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@18.ops[19]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@18.ops[22]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@18.ops[24]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@18.ops[27]: 'store result#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@18.ops[29]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@18.ops[31]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@18.ops[33]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@18.ops[30]: 'store result#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@18.ops[36]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@18.ops[2]: 'store e#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@18.ops[16]: 'load e#0' with 'load e#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@18.ops[4]: 'store ternary_result%6#1 to l-stack (copy)'
debug: Replaced main_ternary_merge@18.ops[27]: 'load ternary_result%6#1' with 'load ternary_result%6#1 from l-stack (no copy)'
debug: Found 8 edge set/s for test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Allocated 1 variable/s to x-stack: h#0
debug: shared x-stack for main_ternary_true@16 -> main_ternary_merge@18: h#0
debug: shared x-stack for main_ternary_false@17 -> main_ternary_merge@18: h#0
debug: test_cases.conditional_expressions.contract.MyContract.approval_program f-stack entry: ['awst_tmp%1#0', 'awst_tmp%2#0', 'awst_tmp%3#0', 'e#0', 'f#0', 'g#0']
debug: test_cases.conditional_expressions.contract.MyContract.approval_program f-stack on first store: ['awst_tmp%0#0']
debug: Inserted expensive_op_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced expensive_op_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted side_effecting_op_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced side_effecting_op_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Output IR to conditional_expressions/out/Literals.ssa.ir
info: Optimizing test_cases.conditional_expressions.literals.Literals at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.with_variable_condition
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: ternary_result%0#2, x#0, reinterpret_bool%0#0
debug: Replacing {ternary_result%0#2, reinterpret_bool%0#0} with x#0 made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable ternary_result%5#2
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to conditional_expressions/out/Literals.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.with_variable_condition
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable ternary_result%5#0
debug: Removing unused variable ternary_result%5#1
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@16: // ternary_true_L25
debug: replaced goto condition#0 ? block@18 : block@18 with goto block@18
debug: Removed empty block: block@17: // ternary_false_L25
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to conditional_expressions/out/Literals.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.with_variable_condition
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@18: // ternary_merge_L25 into block@15: // ternary_merge_L23
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to conditional_expressions/out/Literals.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.with_variable_condition
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 4, ending loop
debug: Removing Phis from test_cases.conditional_expressions.literals.Literals.approval_program
debug: Removing Phis from test_cases.conditional_expressions.literals.Literals.with_variable_condition
debug: Removing Phis from test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Coalescing local variables in test_cases.conditional_expressions.literals.Literals.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.conditional_expressions.literals.Literals.with_variable_condition using strategy RootOperandGrouping
debug: Coalescing ternary_result%0#0 with [ternary_result%0#1]
debug: Coalescing x#0 with [x#1]
debug: Coalescing ternary_result%1#0 with [ternary_result%1#5, ternary_result%1#1, ternary_result%1#2]
debug: Coalescing ternary_result%2#0 with [ternary_result%2#5, ternary_result%2#1, ternary_result%2#2]
debug: Coalescing ternary_result%3#0 with [ternary_result%3#5, ternary_result%3#1, ternary_result%3#2]
debug: Coalescing ternary_result%4#0 with [ternary_result%4#5, ternary_result%4#1, ternary_result%4#2]
debug: Coalescing resulted in 33 replacement/s
debug: Coalescing local variables in test_cases.conditional_expressions.literals.Literals.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_expressions.literals.Literals.approval_program
debug: Sequentializing parallel copies in test_cases.conditional_expressions.literals.Literals.with_variable_condition
debug: Sequentializing parallel copies in test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to conditional_expressions/out/Literals.destructured.ir
debug: Inserted with_variable_condition_ternary_true@1.ops[1]: 'store ternary_result%0#0 to l-stack (copy)'
debug: Replaced with_variable_condition_ternary_true@1.ops[3]: 'load ternary_result%0#0' with 'load ternary_result%0#0 from l-stack (no copy)'
debug: Inserted with_variable_condition_ternary_false@2.ops[1]: 'store ternary_result%0#0 to l-stack (copy)'
debug: Replaced with_variable_condition_ternary_false@2.ops[3]: 'load ternary_result%0#0' with 'load ternary_result%0#0 from l-stack (no copy)'
debug: Inserted with_variable_condition_ternary_merge@3.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced with_variable_condition_ternary_merge@3.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted with_variable_condition_ternary_merge@6.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced with_variable_condition_ternary_merge@6.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted with_variable_condition_ternary_merge@12.ops[7]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced with_variable_condition_ternary_merge@12.ops[9]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted with_variable_condition_ternary_merge@12.ops[14]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced with_variable_condition_ternary_merge@12.ops[16]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted with_variable_condition_ternary_merge@12.ops[3]: 'store y2#0 to l-stack (copy)'
debug: Replaced with_variable_condition_ternary_merge@12.ops[12]: 'load y2#0' with 'load y2#0 from l-stack (no copy)'
debug: Inserted with_variable_condition_ternary_merge@15.ops[10]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced with_variable_condition_ternary_merge@15.ops[12]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted with_variable_condition_ternary_merge@15.ops[6]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced with_variable_condition_ternary_merge@15.ops[9]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted with_variable_condition_ternary_merge@15.ops[3]: 'store maybe#0 to l-stack (copy)'
debug: Replaced with_variable_condition_ternary_merge@15.ops[9]: 'load maybe#0' with 'load maybe#0 from l-stack (no copy)'
debug: Found 10 edge set/s for test_cases.conditional_expressions.literals.Literals.with_variable_condition
debug: Allocated 4 variable/s to x-stack: ternary_result%1#0, ternary_result%2#0, ternary_result%3#0, ternary_result%4#0
debug: shared x-stack for with_variable_condition_ternary_true@4 -> with_variable_condition_ternary_merge@6: ternary_result%1#0
debug: shared x-stack for with_variable_condition_ternary_false@5 -> with_variable_condition_ternary_merge@6: ternary_result%1#0
debug: shared x-stack for with_variable_condition_ternary_true@7 -> with_variable_condition_ternary_merge@9: ternary_result%2#0
debug: shared x-stack for with_variable_condition_ternary_false@8 -> with_variable_condition_ternary_merge@9: ternary_result%2#0
debug: shared x-stack for with_variable_condition_ternary_true@10 -> with_variable_condition_ternary_merge@12: ternary_result%3#0
debug: shared x-stack for with_variable_condition_ternary_false@11 -> with_variable_condition_ternary_merge@12: ternary_result%3#0
debug: shared x-stack for with_variable_condition_ternary_true@13 -> with_variable_condition_ternary_merge@15: ternary_result%4#0
debug: shared x-stack for with_variable_condition_ternary_false@14 -> with_variable_condition_ternary_merge@15: ternary_result%4#0
debug: test_cases.conditional_expressions.literals.Literals.with_variable_condition f-stack entry: ['x#0', 'y#0']
debug: test_cases.conditional_expressions.literals.Literals.with_variable_condition f-stack on first store: []
info: Writing conditional_expressions/out/MyContract.approval.teal
info: Writing conditional_expressions/out/MyContract.clear.teal
info: Writing conditional_expressions/out/MyContract.approval.bin
info: Writing conditional_expressions/out/MyContract.clear.bin
info: Writing conditional_expressions/out/Literals.approval.teal
info: Writing conditional_expressions/out/Literals.clear.teal
info: Writing conditional_expressions/out/Literals.approval.bin
info: Writing conditional_expressions/out/Literals.clear.bin