// Op                                                     // Op Description                       Stack (out)                                                                                                             X stack             Source code                                                         Source line

#pragma version 8

// test_cases.conditional_expressions.contract.MyContract.approval_program() -> uint64:
main:
        byte ""
        dupn 9                                            // allocate 10 to stack                 (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0 |

main_block@0:
        int 1                                             //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0 | 1                                                         1                                                                   File "conditional_expressions/contract.py", line 8
        dup                                               // store a#0 to l-stack (copy)          (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0 | a#0,a#0                                                   a                                                                   File "conditional_expressions/contract.py", line 8
        swap                                              // store a#0 to f-stack                 (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0 | a#0                                                   a                                                                   File "conditional_expressions/contract.py", line 8
        int 2                                             //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0 | a#0,2                                                 2                                                                   File "conditional_expressions/contract.py", line 9
        swap                                              // store b#0 to f-stack                 (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | a#0                                               b                                                                   File "conditional_expressions/contract.py", line 9
        bz main_ternary_false@2                           //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   a or b                                                              File "conditional_expressions/contract.py", line 11
        // Implicit fall through to main_ternary_true@1   //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   a or b                                                              File "conditional_expressions/contract.py", line 11

main_ternary_true@1:
        dig 1                                             // load a#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | a#0                                               a                                                                   File "conditional_expressions/contract.py", line 8
        b main_ternary_merge@3                            //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%0#0 |      ternary_result%0#0

main_ternary_false@2:
        dup                                               // load b#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | b#0                                               b                                                                   File "conditional_expressions/contract.py", line 9
        // Implicit fall through to main_ternary_merge@3  //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%0#0 |      ternary_result%0#0

main_ternary_merge@3:
        bury 8                                            // store c#0 to f-stack                 (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                               ternary_result%0#0  c                                                                   File "conditional_expressions/contract.py", line 11
        dup                                               // load b#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | b#0                                               b                                                                   File "conditional_expressions/contract.py", line 9
        bnz main_ternary_false@5                          //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   b and a                                                             File "conditional_expressions/contract.py", line 12
        // Implicit fall through to main_ternary_true@4   //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   b and a                                                             File "conditional_expressions/contract.py", line 12

main_ternary_true@4:
        dup                                               // load b#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | b#0                                               b                                                                   File "conditional_expressions/contract.py", line 9
        b main_ternary_merge@6                            //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%1#0 |      ternary_result%1#0

main_ternary_false@5:
        dig 1                                             // load a#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | a#0                                               a                                                                   File "conditional_expressions/contract.py", line 8
        // Implicit fall through to main_ternary_merge@6  //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%1#0 |      ternary_result%1#0

main_ternary_merge@6:
        bury 7                                            // store d#0 to f-stack                 (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                               ternary_result%1#0  d                                                                   File "conditional_expressions/contract.py", line 12
        int 0                                             //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | 0                                                 0                                                                   File "conditional_expressions/contract.py", line 14
        callsub expensive_op                              //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | {expensive_op}                                    self.expensive_op(UInt64(0))                                        File "conditional_expressions/contract.py", line 14
        dup                                               // store awst_tmp%2#0 to l-stack (copy) (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | awst_tmp%2#0,awst_tmp%2#0                         self.expensive_op(UInt64(0))                                        File "conditional_expressions/contract.py", line 14
        bury 13                                           // store awst_tmp%2#0 to f-stack        (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | awst_tmp%2#0                                      self.expensive_op(UInt64(0))                                        File "conditional_expressions/contract.py", line 14
        bz main_ternary_false@8                           //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   self.expensive_op(UInt64(0)) or self.side_effecting_op(UInt64(1))   File "conditional_expressions/contract.py", line 14
        // Implicit fall through to main_ternary_true@7   //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   self.expensive_op(UInt64(0)) or self.side_effecting_op(UInt64(1))   File "conditional_expressions/contract.py", line 14

main_ternary_true@7:
        dig 11                                            // load awst_tmp%2#0 from f-stack       (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | awst_tmp%2#0                                      self.expensive_op(UInt64(0))                                        File "conditional_expressions/contract.py", line 14
        b main_ternary_merge@9                            //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%3#0 |      ternary_result%3#0

main_ternary_false@8:
        int 1                                             //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | 1                                                 1                                                                   File "conditional_expressions/contract.py", line 14
        callsub side_effecting_op                         //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | {side_effecting_op}                               self.side_effecting_op(UInt64(1))                                   File "conditional_expressions/contract.py", line 14
        // Implicit fall through to main_ternary_merge@9  //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%3#0 |      ternary_result%3#0

main_ternary_merge@9:
        bury 6                                            // store e#0 to f-stack                 (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                               ternary_result%3#0  e                                                                   File "conditional_expressions/contract.py", line 14
        int 3                                             //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | 3                                                 3                                                                   File "conditional_expressions/contract.py", line 15
        callsub expensive_op                              //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | {expensive_op}                                    self.expensive_op(UInt64(3))                                        File "conditional_expressions/contract.py", line 15
        dup                                               // store awst_tmp%4#0 to l-stack (copy) (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | awst_tmp%4#0,awst_tmp%4#0                         self.expensive_op(UInt64(3))                                        File "conditional_expressions/contract.py", line 15
        bury 12                                           // store awst_tmp%4#0 to f-stack        (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | awst_tmp%4#0                                      self.expensive_op(UInt64(3))                                        File "conditional_expressions/contract.py", line 15
        bz main_ternary_false@11                          //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   self.expensive_op(UInt64(3)) or self.side_effecting_op(UInt64(42))  File "conditional_expressions/contract.py", line 15
        // Implicit fall through to main_ternary_true@10  //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   self.expensive_op(UInt64(3)) or self.side_effecting_op(UInt64(42))  File "conditional_expressions/contract.py", line 15

main_ternary_true@10:
        dig 10                                            // load awst_tmp%4#0 from f-stack       (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | awst_tmp%4#0                                      self.expensive_op(UInt64(3))                                        File "conditional_expressions/contract.py", line 15
        b main_ternary_merge@12                           //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%5#0 |      ternary_result%5#0

main_ternary_false@11:
        int 42                                            //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | 42                                                42                                                                  File "conditional_expressions/contract.py", line 15
        callsub side_effecting_op                         //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | {side_effecting_op}                               self.side_effecting_op(UInt64(42))                                  File "conditional_expressions/contract.py", line 15
        // Implicit fall through to main_ternary_merge@12 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%5#0 |      ternary_result%5#0

main_ternary_merge@12:
        bury 5                                            // store f#0 to f-stack                 (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                               ternary_result%5#0  f                                                                   File "conditional_expressions/contract.py", line 15
        int 0                                             //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | 0                                                 0                                                                   File "conditional_expressions/contract.py", line 17
        callsub side_effecting_op                         //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | {side_effecting_op}                               self.side_effecting_op(UInt64(0))                                   File "conditional_expressions/contract.py", line 17
        dup                                               // store awst_tmp%6#0 to l-stack (copy) (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | awst_tmp%6#0,awst_tmp%6#0                         self.side_effecting_op(UInt64(0))                                   File "conditional_expressions/contract.py", line 17
        bury 11                                           // store awst_tmp%6#0 to f-stack        (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | awst_tmp%6#0                                      self.side_effecting_op(UInt64(0))                                   File "conditional_expressions/contract.py", line 17
        bnz main_ternary_false@14                         //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   self.side_effecting_op(UInt64(0)) and self.expensive_op(UInt64(42)) File "conditional_expressions/contract.py", line 17
        // Implicit fall through to main_ternary_true@13  //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   self.side_effecting_op(UInt64(0)) and self.expensive_op(UInt64(42)) File "conditional_expressions/contract.py", line 17

main_ternary_true@13:
        dig 9                                             // load awst_tmp%6#0 from f-stack       (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | awst_tmp%6#0                                      self.side_effecting_op(UInt64(0))                                   File "conditional_expressions/contract.py", line 17
        b main_ternary_merge@15                           //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%7#0 |      ternary_result%7#0

main_ternary_false@14:
        int 42                                            //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | 42                                                42                                                                  File "conditional_expressions/contract.py", line 17
        callsub expensive_op                              //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | {expensive_op}                                    self.expensive_op(UInt64(42))                                       File "conditional_expressions/contract.py", line 17
        // Implicit fall through to main_ternary_merge@15 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%7#0 |      ternary_result%7#0

main_ternary_merge@15:
        bury 4                                            // store g#0 to f-stack                 (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                               ternary_result%7#0  g                                                                   File "conditional_expressions/contract.py", line 17
        int 2                                             //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | 2                                                 2                                                                   File "conditional_expressions/contract.py", line 18
        callsub side_effecting_op                         //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | {side_effecting_op}                               self.side_effecting_op(UInt64(2))                                   File "conditional_expressions/contract.py", line 18
        dup                                               // store awst_tmp%8#0 to l-stack (copy) (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | awst_tmp%8#0,awst_tmp%8#0                         self.side_effecting_op(UInt64(2))                                   File "conditional_expressions/contract.py", line 18
        bury 10                                           // store awst_tmp%8#0 to f-stack        (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | awst_tmp%8#0                                      self.side_effecting_op(UInt64(2))                                   File "conditional_expressions/contract.py", line 18
        bnz main_ternary_false@17                         //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   self.side_effecting_op(UInt64(2)) and self.expensive_op(UInt64(3))  File "conditional_expressions/contract.py", line 18
        // Implicit fall through to main_ternary_true@16  //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   self.side_effecting_op(UInt64(2)) and self.expensive_op(UInt64(3))  File "conditional_expressions/contract.py", line 18

main_ternary_true@16:
        dig 8                                             // load awst_tmp%8#0 from f-stack       (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | awst_tmp%8#0                                      self.side_effecting_op(UInt64(2))                                   File "conditional_expressions/contract.py", line 18
        b main_ternary_merge@18                           //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%9#0 |      ternary_result%9#0

main_ternary_false@17:
        int 3                                             //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | 3                                                 3                                                                   File "conditional_expressions/contract.py", line 18
        callsub expensive_op                              //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | {expensive_op}                                    self.expensive_op(UInt64(3))                                        File "conditional_expressions/contract.py", line 18
        // Implicit fall through to main_ternary_merge@18 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%9#0 |      ternary_result%9#0

main_ternary_merge@18:
        bury 3                                            // store h#0 to f-stack                 (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                               ternary_result%9#0  h                                                                   File "conditional_expressions/contract.py", line 18
        dup                                               // load b#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | b#0                                               b                                                                   File "conditional_expressions/contract.py", line 9
        dig 8                                             // load c#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | b#0,c#0                                           c                                                                   File "conditional_expressions/contract.py", line 11
        <                                                 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | {<}                                               b < c else d + e                                                    File "conditional_expressions/contract.py", line 20
        bz main_ternary_false@20                          //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   a if b < c else d + e                                               File "conditional_expressions/contract.py", line 20
        // Implicit fall through to main_ternary_true@19  //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   a if b < c else d + e                                               File "conditional_expressions/contract.py", line 20

main_ternary_true@19:
        dig 1                                             // load a#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | a#0                                               a                                                                   File "conditional_expressions/contract.py", line 8
        b main_ternary_merge@21                           //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%11#0 |     ternary_result%11#0

main_ternary_false@20:
        dig 6                                             // load d#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | d#0                                               d                                                                   File "conditional_expressions/contract.py", line 12
        dig 6                                             // load e#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | d#0,e#0                                           e                                                                   File "conditional_expressions/contract.py", line 14
        +                                                 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | {+}                                               d + e                                                               File "conditional_expressions/contract.py", line 20
        // Implicit fall through to main_ternary_merge@21 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | (𝕏) ternary_result%11#0 |     ternary_result%11#0

main_ternary_merge@21:
        dig 2                                             // load a#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,a#0                       ternary_result%11#0 a                                                                   File "conditional_expressions/contract.py", line 8
        dig 2                                             // load b#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,a#0,b#0                                       b                                                                   File "conditional_expressions/contract.py", line 9
        *                                                 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,{*}                                           a * b                                                               File "conditional_expressions/contract.py", line 22
        dig 9                                             // load c#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,tmp%12#0,c#0                                  c                                                                   File "conditional_expressions/contract.py", line 11
        *                                                 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,{*}                                           a * b * c                                                           File "conditional_expressions/contract.py", line 22
        dig 8                                             // load d#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,tmp%13#0,d#0                                  d                                                                   File "conditional_expressions/contract.py", line 12
        *                                                 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,{*}                                           a * b * c * d                                                       File "conditional_expressions/contract.py", line 22
        dig 6                                             // load f#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,tmp%14#0,f#0                                  f                                                                   File "conditional_expressions/contract.py", line 15
        *                                                 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,{*}                                           a * b * c * d * f                                                   File "conditional_expressions/contract.py", line 22
        dig 4                                             // load h#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,tmp%15#0,h#0                                  h                                                                   File "conditional_expressions/contract.py", line 18
        *                                                 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,{*}                                           a * b * c * d * f * h                                               File "conditional_expressions/contract.py", line 22
        dig 7                                             // load e#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,tmp%16#0,e#0                                  e                                                                   File "conditional_expressions/contract.py", line 14
        -                                                 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,{-}                                           a * b * c * d * f * h - e                                           File "conditional_expressions/contract.py", line 22
        dig 5                                             // load g#0 from f-stack                (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,tmp%17#0,g#0                                  g                                                                   File "conditional_expressions/contract.py", line 17
        -                                                 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | i#0,{-}                                           a * b * c * d * f * h - e - g                                       File "conditional_expressions/contract.py", line 22
        +                                                 //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | {+}                                               a * b * c * d * f * h - e - g + i                                   File "conditional_expressions/contract.py", line 22
        dup                                               // load result#0 from l-stack (copy)    (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | result#0,result#0                                 result                                                              File "conditional_expressions/contract.py", line 22
        itob                                              //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | result#0,{itob}                                   itob(result)                                                        File "conditional_expressions/contract.py", line 24
        log                                               //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 | result#0                                          log(itob(result))                                                   File "conditional_expressions/contract.py", line 24
        return                                            //                                      (𝕗) awst_tmp%2#0,awst_tmp%4#0,awst_tmp%6#0,awst_tmp%8#0,c#0,d#0,e#0,f#0,g#0,h#0,a#0,b#0 |                                                   return result                                                       File "conditional_expressions/contract.py", line 26


// test_cases.conditional_expressions.contract.MyContract.expensive_op(val#0: uint64) -> uint64:
expensive_op:
        proto 1 1                                         //                                      (𝕡) val#0 |                                                                                                                                 def expensive_op(self, val: UInt64) -> UInt64:                      File "conditional_expressions/contract.py", line 32

expensive_op_block@0:
        frame_dig -1                                      // load val#0 from parameters           (𝕡) val#0 | val#0                                                                                                                           val: UInt64                                                         File "conditional_expressions/contract.py", line 32
        int 42                                            //                                      (𝕡) val#0 | val#0,42                                                                                                                        42                                                                  File "conditional_expressions/contract.py", line 33
        !=                                                //                                      (𝕡) val#0 | {!=}                                                                                                                            val != 42, "Can't be 42"                                            File "conditional_expressions/contract.py", line 33
        assert // Can't be 42                             //                                      (𝕡) val#0 |                                                                                                                                 assert val != 42, "Can't be 42"                                     File "conditional_expressions/contract.py", line 33
        byte "expensive_op"                               //                                      (𝕡) val#0 | "expensive_op"                                                                                                                  b"expensive_op"                                                     File "conditional_expressions/contract.py", line 34
        log                                               //                                      (𝕡) val#0 |                                                                                                                                 log(b"expensive_op")                                                File "conditional_expressions/contract.py", line 34
        frame_dig -1                                      // load val#0 from parameters           (𝕡) val#0 | val#0                                                                                                                           val: UInt64                                                         File "conditional_expressions/contract.py", line 32
        retsub                                            //                                      val#0                                                                                                                                       return val                                                          File "conditional_expressions/contract.py", line 35


// test_cases.conditional_expressions.contract.MyContract.side_effecting_op(val#0: uint64) -> uint64:
side_effecting_op:
        proto 1 1                                         //                                      (𝕡) val#0 |                                                                                                                                 def side_effecting_op(self, val: UInt64) -> UInt64:                 File "conditional_expressions/contract.py", line 38

side_effecting_op_block@0:
        frame_dig -1                                      // load val#0 from parameters           (𝕡) val#0 | val#0                                                                                                                           val: UInt64                                                         File "conditional_expressions/contract.py", line 38
        int 42                                            //                                      (𝕡) val#0 | val#0,42                                                                                                                        42                                                                  File "conditional_expressions/contract.py", line 39
        !=                                                //                                      (𝕡) val#0 | {!=}                                                                                                                            val != 42, "Can't be 42"                                            File "conditional_expressions/contract.py", line 39
        assert // Can't be 42                             //                                      (𝕡) val#0 |                                                                                                                                 assert val != 42, "Can't be 42"                                     File "conditional_expressions/contract.py", line 39
        byte "side_effecting_op"                          //                                      (𝕡) val#0 | "side_effecting_op"                                                                                                             b"side_effecting_op"                                                File "conditional_expressions/contract.py", line 40
        log                                               //                                      (𝕡) val#0 |                                                                                                                                 log(b"side_effecting_op")                                           File "conditional_expressions/contract.py", line 40
        frame_dig -1                                      // load val#0 from parameters           (𝕡) val#0 | val#0                                                                                                                           val: UInt64                                                         File "conditional_expressions/contract.py", line 38
        retsub                                            //                                      val#0                                                                                                                                       return val                                                          File "conditional_expressions/contract.py", line 41

