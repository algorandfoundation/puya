#pragma version 10

test_cases.conditional_expressions.literals.Literals.approval_program:
    intcblock 1
    // conditional_expressions/literals.py:6
    // self.with_variable_condition(condition=False)
    pushint 0 // 0
    callsub with_variable_condition
    // conditional_expressions/literals.py:7
    // self.with_variable_condition(condition=True)
    intc_0 // 1
    callsub with_variable_condition
    // conditional_expressions/literals.py:9
    // return True
    intc_0 // 1
    return


// test_cases.conditional_expressions.literals.Literals.with_variable_condition(condition: uint64) -> void:
with_variable_condition:
    // conditional_expressions/literals.py:14-15
    // @subroutine
    // def with_variable_condition(self, *, condition: bool) -> None:
    proto 1 0
    // conditional_expressions/literals.py:19
    // y = x + ((1 if condition else 2) - 1)  # test binary op with non-literal & literal
    frame_dig -1
    !
    frame_dig -1
    dig 1
    +
    // conditional_expressions/literals.py:20
    // y2 = ((1 if condition else 2) - 1) + x  # test binary op with literal & non-literal
    dig 1
    frame_dig -1
    +
    // conditional_expressions/literals.py:21
    // assert y == 1
    dig 1
    intc_0 // 1
    ==
    assert
    // conditional_expressions/literals.py:22
    // assert y2 == 1
    intc_0 // 1
    ==
    assert
    // conditional_expressions/literals.py:23
    // maybe = (1 if condition else 0) < y  # test comparison with non-literal
    frame_dig -1
    >
    // conditional_expressions/literals.py:24
    // assert maybe == (not condition)
    ==
    assert
    retsub
