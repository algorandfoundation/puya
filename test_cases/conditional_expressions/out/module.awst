abstract contract ARC4Contract
{
  clear_state_program(): bool
  {
    return true
  }
}

contract Literals
{
  approval_program(): bool
  {
    this::with_variable_condition(condition=false)
    this::with_variable_condition(condition=true)
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine with_variable_condition(condition: bool): void
  {
    x: uint64 = (condition) ? (1u) : (0u)
    assert(x != 0u == condition)
    assert(x == (condition) ? (1u) : (0u))
    y: uint64 = x + (condition) ? (0u) : (1u)
    y2: uint64 = (condition) ? (0u) : (1u) + x
    assert(y == 1u)
    assert(y2 == 1u)
    maybe: bool = y > (condition) ? (1u) : (0u)
    assert(maybe == !(condition))
    assert((condition) ? (true) : (true))
  }
}

contract MyContract
{
  approval_program(): uint64
  {
    a: uint64 = 1u
    b: uint64 = 2u
    c: uint64 = (a != 0u) ? (a) : (b)
    d: uint64 = (b == 0u) ? (b) : (a)
    e: uint64 = (SINGLE_EVAL(id=0, source=this::expensive_op(0u)) != 0u) ? (SINGLE_EVAL(id=0)) : (this::side_effecting_op(1u))
    f: uint64 = (SINGLE_EVAL(id=1, source=this::expensive_op(3u)) != 0u) ? (SINGLE_EVAL(id=1)) : (this::side_effecting_op(42u))
    g: uint64 = (SINGLE_EVAL(id=2, source=this::side_effecting_op(0u)) == 0u) ? (SINGLE_EVAL(id=2)) : (this::expensive_op(42u))
    h: uint64 = (SINGLE_EVAL(id=3, source=this::side_effecting_op(2u)) == 0u) ? (SINGLE_EVAL(id=3)) : (this::expensive_op(3u))
    i: uint64 = (b < c) ? (a) : (d + e)
    result: uint64 = a * b * c * d * f * h - e - g + i
    log(itob(result))
    return result
  }
  
  clear_state_program(): uint64
  {
    return 0u
  }
  
  subroutine expensive_op(val: uint64): uint64
  {
    assert(val != 42u, comment="Can't be 42")
    log('expensive_op')
    return val
  }
  
  subroutine side_effecting_op(val: uint64): uint64
  {
    assert(val != 42u, comment="Can't be 42")
    log('side_effecting_op')
    return val
  }
}