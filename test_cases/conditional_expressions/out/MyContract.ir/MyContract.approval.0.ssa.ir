main test_cases.conditional_expressions.contract.MyContract.approval_program:
    block@0: // L7
        let a#0: uint64 = 1u
        let b#0: uint64 = 2u
        let tmp%0#0: bool = (!= a#0 0u)
        let select%0#0: uint64 = (select b#0 a#0 tmp%0#0)
        let c#0: uint64 = select%0#0
        let tmp%1#0: bool = (== b#0 0u)
        let select%1#0: uint64 = (select a#0 b#0 tmp%1#0)
        let d#0: uint64 = select%1#0
        let awst_tmp%0#0: uint64 = test_cases.conditional_expressions.contract.MyContract.expensive_op(0u)
        let tmp%2#0: bool = (!= awst_tmp%0#0 0u)
        goto tmp%2#0 ? block@1 : block@2
    block@1: // ternary_true_L14
        let ternary_result%0#0: uint64 = awst_tmp%0#0
        goto block@3
    block@2: // ternary_false_L14
        let ternary_result%0#1: uint64 = test_cases.conditional_expressions.contract.MyContract.side_effecting_op(1u)
        goto block@3
    block@3: // ternary_merge_L14
        let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
        let e#0: uint64 = ternary_result%0#2
        let awst_tmp%1#0: uint64 = test_cases.conditional_expressions.contract.MyContract.expensive_op(3u)
        let tmp%3#0: bool = (!= awst_tmp%1#0 0u)
        goto tmp%3#0 ? block@4 : block@5
    block@4: // ternary_true_L15
        let ternary_result%1#0: uint64 = awst_tmp%1#0
        goto block@6
    block@5: // ternary_false_L15
        let ternary_result%1#1: uint64 = test_cases.conditional_expressions.contract.MyContract.side_effecting_op(42u)
        goto block@6
    block@6: // ternary_merge_L15
        let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5)
        let f#0: uint64 = ternary_result%1#2
        let awst_tmp%2#0: uint64 = test_cases.conditional_expressions.contract.MyContract.side_effecting_op(0u)
        let tmp%4#0: bool = (== awst_tmp%2#0 0u)
        goto tmp%4#0 ? block@7 : block@8
    block@7: // ternary_true_L17
        let ternary_result%2#0: uint64 = awst_tmp%2#0
        goto block@9
    block@8: // ternary_false_L17
        let ternary_result%2#1: uint64 = test_cases.conditional_expressions.contract.MyContract.expensive_op(42u)
        goto block@9
    block@9: // ternary_merge_L17
        let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8)
        let g#0: uint64 = ternary_result%2#2
        let awst_tmp%3#0: uint64 = test_cases.conditional_expressions.contract.MyContract.side_effecting_op(2u)
        let tmp%5#0: bool = (== awst_tmp%3#0 0u)
        goto tmp%5#0 ? block@10 : block@11
    block@10: // ternary_true_L18
        let ternary_result%3#0: uint64 = awst_tmp%3#0
        goto block@12
    block@11: // ternary_false_L18
        let ternary_result%3#1: uint64 = test_cases.conditional_expressions.contract.MyContract.expensive_op(3u)
        goto block@12
    block@12: // ternary_merge_L18
        let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11)
        let h#0: uint64 = ternary_result%3#2
        let tmp%6#0: bool = (< b#0 c#0)
        goto tmp%6#0 ? block@13 : block@14
    block@13: // ternary_true_L20
        let ternary_result%4#0: uint64 = a#0
        goto block@15
    block@14: // ternary_false_L20
        let ternary_result%4#1: uint64 = (+ d#0 e#0)
        goto block@15
    block@15: // ternary_merge_L20
        let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@13, ternary_result%4#1 <- block@14)
        let i#0: uint64 = ternary_result%4#2
        let tmp%7#0: uint64 = (* a#0 b#0)
        let tmp%8#0: uint64 = (* tmp%7#0 c#0)
        let tmp%9#0: uint64 = (* tmp%8#0 d#0)
        let tmp%10#0: uint64 = (* tmp%9#0 f#0)
        let tmp%11#0: uint64 = (* tmp%10#0 h#0)
        let tmp%12#0: uint64 = (- tmp%11#0 e#0)
        let tmp%13#0: uint64 = (- tmp%12#0 g#0)
        let tmp%14#0: uint64 = (+ tmp%13#0 i#0)
        let result#0: uint64 = tmp%14#0
        let tmp%15#0: bytes = (itob result#0)
        (log tmp%15#0)
        return result#0

subroutine test_cases.conditional_expressions.contract.MyContract.expensive_op(val: uint64) -> uint64:
    block@0: // L31
        let tmp%0#0: bool = (!= val#0 42u)
        (assert tmp%0#0) // Can't be 42
        (log "expensive_op")
        return val#0

subroutine test_cases.conditional_expressions.contract.MyContract.side_effecting_op(val: uint64) -> uint64:
    block@0: // L37
        let tmp%0#0: bool = (!= val#0 42u)
        (assert tmp%0#0) // Can't be 42
        (log "side_effecting_op")
        return val#0