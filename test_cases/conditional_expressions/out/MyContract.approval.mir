// Op                                                                          Stack (out)
// test_cases.conditional_expressions.contract.MyContract.approval_program() -> uint64:
main:
    allocate 6 to stack                                                        (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0 |

main_block@0:                                                                  (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0 |
    // conditional_expressions/contract.py:14
    // e = self.expensive_op(UInt64(0)) or self.side_effecting_op(UInt64(1))
    int 0                                                                      (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0 | 0
    callsub expensive_op                                                       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0 | awst_tmp%0#0
    l-store-copy awst_tmp%0#0 0                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0 | awst_tmp%0#0,awst_tmp%0#0
    f-store awst_tmp%0#0                                                       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%0#0
    l-load awst_tmp%0#0 0                                                      (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%0#0
    bz main_ternary_false@2                                                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // Implicit fall through to main_ternary_true@1                            (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_true@1:                                                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    f-load awst_tmp%0#0                                                        (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | e#0
    f-store e#0                                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    b main_ternary_merge@3                                                     (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_false@2:                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // conditional_expressions/contract.py:14
    // e = self.expensive_op(UInt64(0)) or self.side_effecting_op(UInt64(1))
    int 1                                                                      (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 1
    callsub side_effecting_op                                                  (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | e#0
    f-store e#0                                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // Implicit fall through to main_ternary_merge@3                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_merge@3:                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // conditional_expressions/contract.py:15
    // f = self.expensive_op(UInt64(3)) or self.side_effecting_op(UInt64(42))
    int 3                                                                      (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 3
    callsub expensive_op                                                       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%1#0
    l-store-copy awst_tmp%1#0 0                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%1#0,awst_tmp%1#0
    f-store awst_tmp%1#0                                                       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%1#0
    l-load awst_tmp%1#0 0                                                      (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%1#0
    bz main_ternary_false@5                                                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // Implicit fall through to main_ternary_true@4                            (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_true@4:                                                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    f-load awst_tmp%1#0                                                        (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | f#0
    f-store f#0                                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    b main_ternary_merge@6                                                     (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_false@5:                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // conditional_expressions/contract.py:15
    // f = self.expensive_op(UInt64(3)) or self.side_effecting_op(UInt64(42))
    int 42                                                                     (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 42
    callsub side_effecting_op                                                  (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | f#0
    f-store f#0                                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // Implicit fall through to main_ternary_merge@6                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_merge@6:                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // conditional_expressions/contract.py:17
    // g = self.side_effecting_op(UInt64(0)) and self.expensive_op(UInt64(42))
    int 0                                                                      (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 0
    callsub side_effecting_op                                                  (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%2#0
    l-store-copy awst_tmp%2#0 0                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%2#0,awst_tmp%2#0
    f-store awst_tmp%2#0                                                       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%2#0
    l-load awst_tmp%2#0 0                                                      (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%2#0
    bnz main_ternary_false@8                                                   (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // Implicit fall through to main_ternary_true@7                            (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_true@7:                                                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    f-load awst_tmp%2#0                                                        (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | g#0
    f-store g#0                                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    b main_ternary_merge@9                                                     (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_false@8:                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // conditional_expressions/contract.py:17
    // g = self.side_effecting_op(UInt64(0)) and self.expensive_op(UInt64(42))
    int 42                                                                     (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 42
    callsub expensive_op                                                       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | g#0
    f-store g#0                                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // Implicit fall through to main_ternary_merge@9                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_merge@9:                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // conditional_expressions/contract.py:18
    // h = self.side_effecting_op(UInt64(2)) and self.expensive_op(UInt64(3))
    int 2                                                                      (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 2
    callsub side_effecting_op                                                  (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%3#0
    l-store-copy awst_tmp%3#0 0                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%3#0,awst_tmp%3#0
    f-store awst_tmp%3#0                                                       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%3#0
    l-load awst_tmp%3#0 0                                                      (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%3#0
    bnz main_ternary_false@11                                                  (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // Implicit fall through to main_ternary_true@10                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_true@10:                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    f-load awst_tmp%3#0                                                        (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | h#0
    x-store h#0                                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 |
    b main_ternary_merge@12                                                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 |

main_ternary_false@11:                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // conditional_expressions/contract.py:18
    // h = self.side_effecting_op(UInt64(2)) and self.expensive_op(UInt64(3))
    int 3                                                                      (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 3
    callsub expensive_op                                                       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | h#0
    x-store h#0                                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 |
    // Implicit fall through to main_ternary_merge@12                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 |

main_ternary_merge@12:                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 |
    // conditional_expressions/contract.py:8
    // a = UInt64(1)
    int 1                                                                      (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | 1
    // conditional_expressions/contract.py:20
    // i = a if b < c else d + e
    f-load e#0                                                                 (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | 1,e#0
    l-store-copy e#0 1                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | e#0,1,e#0 (copy)
    +                                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | e#0,ternary_result%4#1
    // conditional_expressions/contract.py:9
    // b = UInt64(2)
    int 2                                                                      (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | e#0,ternary_result%4#1,2
    // conditional_expressions/contract.py:22
    // result = a * b * c * d * f * h - e - g + i
    f-load f#0                                                                 (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | e#0,ternary_result%4#1,2,f#0
    *                                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | e#0,ternary_result%4#1,tmp%10#0
    x-load h#0                                                                 (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | e#0,ternary_result%4#1,tmp%10#0,h#0
    *                                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | e#0,ternary_result%4#1,tmp%11#0
    l-load e#0 2                                                               (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,tmp%11#0,e#0
    -                                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,tmp%12#0
    f-load g#0                                                                 (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,tmp%12#0,g#0
    -                                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,tmp%13#0
    l-load ternary_result%4#1 1                                                (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | tmp%13#0,ternary_result%4#1
    +                                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | result#0
    // conditional_expressions/contract.py:24
    // log(op.itob(result))
    l-load-copy result#0 0                                                     (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | result#0,result#0 (copy)
    itob                                                                       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | result#0,tmp%14#0
    log                                                                        (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | result#0
    // conditional_expressions/contract.py:26
    // return result
    l-load result#0 0                                                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | result#0
    return                                                                     (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |


// test_cases.conditional_expressions.contract.MyContract.expensive_op(val: uint64) -> uint64:
expensive_op:                                                                  (𝕡) val#0 |
    // conditional_expressions/contract.py:31-32
    // @subroutine
    // def expensive_op(self, val: UInt64) -> UInt64:
    proto 1 1                                                                  (𝕡) val#0 |

expensive_op_block@0:                                                          (𝕡) val#0 |
    // conditional_expressions/contract.py:33
    // assert val != 42, "Can't be 42"
    p-load val#0                                                               (𝕡) val#0 | val#0 (copy)
    int 42                                                                     (𝕡) val#0 | val#0 (copy),42
    !=                                                                         (𝕡) val#0 | tmp%0#0
    assert // Can't be 42                                                      (𝕡) val#0 |
    // conditional_expressions/contract.py:34
    // log("expensive_op")
    byte "expensive_op"                                                        (𝕡) val#0 | "expensive_op"
    log                                                                        (𝕡) val#0 |
    // conditional_expressions/contract.py:35
    // return val
    p-load val#0                                                               (𝕡) val#0 | val#0 (copy)
    retsub                                                                     val#0 (copy)


// test_cases.conditional_expressions.contract.MyContract.side_effecting_op(val: uint64) -> uint64:
side_effecting_op:                                                             (𝕡) val#0 |
    // conditional_expressions/contract.py:37-38
    // @subroutine
    // def side_effecting_op(self, val: UInt64) -> UInt64:
    proto 1 1                                                                  (𝕡) val#0 |

side_effecting_op_block@0:                                                     (𝕡) val#0 |
    // conditional_expressions/contract.py:39
    // assert val != 42, "Can't be 42"
    p-load val#0                                                               (𝕡) val#0 | val#0 (copy)
    int 42                                                                     (𝕡) val#0 | val#0 (copy),42
    !=                                                                         (𝕡) val#0 | tmp%0#0
    assert // Can't be 42                                                      (𝕡) val#0 |
    // conditional_expressions/contract.py:40
    // log("side_effecting_op")
    byte "side_effecting_op"                                                   (𝕡) val#0 | "side_effecting_op"
    log                                                                        (𝕡) val#0 |
    // conditional_expressions/contract.py:41
    // return val
    p-load val#0                                                               (𝕡) val#0 | val#0 (copy)
    retsub                                                                     val#0 (copy)


