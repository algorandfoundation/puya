// Op                                                 // Op Description                                          Stack (out)                                                                                                            X stack Source code                                                         Source line

#pragma version 10

// test_cases.conditional_expressions.contract.MyContract.approval_program() -> uint64:
main:
    byte ""
    byte ""
    byte ""
    byte ""
    byte ""
    byte ""                                           // allocate 6 to stack                                     (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0 |

main_block@0:
    int 0                                             //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0 | 0                                                                     UInt64(0)                                                           conditional_expressions/contract.py:14
    callsub expensive_op                              //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0 | {expensive_op}                                                        self.expensive_op(UInt64(0))                                        conditional_expressions/contract.py:14
    dup
    cover 1                                           // store awst_tmp%0#0 to l-stack (copy)                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0 | awst_tmp%0#0,awst_tmp%0#0 (copy)                                      self.expensive_op(UInt64(0))                                        conditional_expressions/contract.py:14
    cover 1                                           // store awst_tmp%0#0 to f-stack                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%0#0                                             self.expensive_op(UInt64(0))                                        conditional_expressions/contract.py:14
                                                      // virtual: load awst_tmp%0#0 from l-stack (no copy)       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%0#0                                             self.expensive_op(UInt64(0)) or self.side_effecting_op(UInt64(1))   conditional_expressions/contract.py:14
    bz main_ternary_false@2                           //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |                                                          self.expensive_op(UInt64(0)) or self.side_effecting_op(UInt64(1))   conditional_expressions/contract.py:14
    // Implicit fall through to main_ternary_true@1   //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |                                                          self.expensive_op(UInt64(0)) or self.side_effecting_op(UInt64(1))   conditional_expressions/contract.py:14

main_ternary_true@1:
    dig 0                                             // load awst_tmp%0#0 from f-stack                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%0#0 (copy)
    bury 4                                            // store e#0 to f-stack                                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    b main_ternary_merge@3                            //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_false@2:
    int 1                                             //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 1                                                        UInt64(1)                                                           conditional_expressions/contract.py:14
    callsub side_effecting_op                         //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | {side_effecting_op}                                      self.side_effecting_op(UInt64(1))                                   conditional_expressions/contract.py:14
                                                      // virtual: store ternary_result%0#1 to l-stack (no copy)  (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%0#1                                       self.side_effecting_op(UInt64(1))                                   conditional_expressions/contract.py:14
                                                      // virtual: load ternary_result%0#1 from l-stack (no copy) (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%0#1
    bury 4                                            // store e#0 to f-stack                                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // Implicit fall through to main_ternary_merge@3  //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_merge@3:
    int 3                                             //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 3                                                        UInt64(3)                                                           conditional_expressions/contract.py:15
    callsub expensive_op                              //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | {expensive_op}                                           self.expensive_op(UInt64(3))                                        conditional_expressions/contract.py:15
    dup
    cover 1                                           // store awst_tmp%1#0 to l-stack (copy)                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%1#0,awst_tmp%1#0 (copy)                         self.expensive_op(UInt64(3))                                        conditional_expressions/contract.py:15
    bury 8                                            // store awst_tmp%1#0 to f-stack                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%1#0                                             self.expensive_op(UInt64(3))                                        conditional_expressions/contract.py:15
                                                      // virtual: load awst_tmp%1#0 from l-stack (no copy)       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%1#0                                             self.expensive_op(UInt64(3)) or self.side_effecting_op(UInt64(42))  conditional_expressions/contract.py:15
    bz main_ternary_false@5                           //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |                                                          self.expensive_op(UInt64(3)) or self.side_effecting_op(UInt64(42))  conditional_expressions/contract.py:15
    // Implicit fall through to main_ternary_true@4   //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |                                                          self.expensive_op(UInt64(3)) or self.side_effecting_op(UInt64(42))  conditional_expressions/contract.py:15

main_ternary_true@4:
    dig 6                                             // load awst_tmp%1#0 from f-stack                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%1#0 (copy)
    bury 3                                            // store f#0 to f-stack                                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    b main_ternary_merge@6                            //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_false@5:
    int 42                                            //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 42                                                       UInt64(42)                                                          conditional_expressions/contract.py:15
    callsub side_effecting_op                         //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | {side_effecting_op}                                      self.side_effecting_op(UInt64(42))                                  conditional_expressions/contract.py:15
                                                      // virtual: store ternary_result%1#1 to l-stack (no copy)  (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%1#1                                       self.side_effecting_op(UInt64(42))                                  conditional_expressions/contract.py:15
                                                      // virtual: load ternary_result%1#1 from l-stack (no copy) (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%1#1
    bury 3                                            // store f#0 to f-stack                                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // Implicit fall through to main_ternary_merge@6  //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_merge@6:
    int 0                                             //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 0                                                        UInt64(0)                                                           conditional_expressions/contract.py:17
    callsub side_effecting_op                         //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | {side_effecting_op}                                      self.side_effecting_op(UInt64(0))                                   conditional_expressions/contract.py:17
    dup
    cover 1                                           // store awst_tmp%2#0 to l-stack (copy)                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%2#0,awst_tmp%2#0 (copy)                         self.side_effecting_op(UInt64(0))                                   conditional_expressions/contract.py:17
    bury 7                                            // store awst_tmp%2#0 to f-stack                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%2#0                                             self.side_effecting_op(UInt64(0))                                   conditional_expressions/contract.py:17
                                                      // virtual: load awst_tmp%2#0 from l-stack (no copy)       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%2#0                                             self.side_effecting_op(UInt64(0)) and self.expensive_op(UInt64(42)) conditional_expressions/contract.py:17
    bnz main_ternary_false@8                          //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |                                                          self.side_effecting_op(UInt64(0)) and self.expensive_op(UInt64(42)) conditional_expressions/contract.py:17
    // Implicit fall through to main_ternary_true@7   //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |                                                          self.side_effecting_op(UInt64(0)) and self.expensive_op(UInt64(42)) conditional_expressions/contract.py:17

main_ternary_true@7:
    dig 5                                             // load awst_tmp%2#0 from f-stack                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%2#0 (copy)
    bury 2                                            // store g#0 to f-stack                                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    b main_ternary_merge@9                            //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_false@8:
    int 42                                            //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 42                                                       UInt64(42)                                                          conditional_expressions/contract.py:17
    callsub expensive_op                              //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | {expensive_op}                                           self.expensive_op(UInt64(42))                                       conditional_expressions/contract.py:17
                                                      // virtual: store ternary_result%2#1 to l-stack (no copy)  (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%2#1                                       self.expensive_op(UInt64(42))                                       conditional_expressions/contract.py:17
                                                      // virtual: load ternary_result%2#1 from l-stack (no copy) (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%2#1
    bury 2                                            // store g#0 to f-stack                                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |
    // Implicit fall through to main_ternary_merge@9  //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |

main_ternary_merge@9:
    int 2                                             //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 2                                                        UInt64(2)                                                           conditional_expressions/contract.py:18
    callsub side_effecting_op                         //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | {side_effecting_op}                                      self.side_effecting_op(UInt64(2))                                   conditional_expressions/contract.py:18
    dup
    cover 1                                           // store awst_tmp%3#0 to l-stack (copy)                    (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%3#0,awst_tmp%3#0 (copy)                         self.side_effecting_op(UInt64(2))                                   conditional_expressions/contract.py:18
    bury 6                                            // store awst_tmp%3#0 to f-stack                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%3#0                                             self.side_effecting_op(UInt64(2))                                   conditional_expressions/contract.py:18
                                                      // virtual: load awst_tmp%3#0 from l-stack (no copy)       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%3#0                                             self.side_effecting_op(UInt64(2)) and self.expensive_op(UInt64(3))  conditional_expressions/contract.py:18
    bnz main_ternary_false@11                         //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |                                                          self.side_effecting_op(UInt64(2)) and self.expensive_op(UInt64(3))  conditional_expressions/contract.py:18
    // Implicit fall through to main_ternary_true@10  //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |                                                          self.side_effecting_op(UInt64(2)) and self.expensive_op(UInt64(3))  conditional_expressions/contract.py:18

main_ternary_true@10:
    dig 4                                             // load awst_tmp%3#0 from f-stack                          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | awst_tmp%3#0 (copy)
                                                      // virtual: store h#0 to x-stack                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 |
    b main_ternary_merge@12                           //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 |                                        h#0

main_ternary_false@11:
    int 3                                             //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | 3                                                        UInt64(3)                                                           conditional_expressions/contract.py:18
    callsub expensive_op                              //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | {expensive_op}                                           self.expensive_op(UInt64(3))                                        conditional_expressions/contract.py:18
                                                      // virtual: store ternary_result%3#1 to l-stack (no copy)  (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%3#1                                       self.expensive_op(UInt64(3))                                        conditional_expressions/contract.py:18
                                                      // virtual: load ternary_result%3#1 from l-stack (no copy) (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%3#1
                                                      // virtual: store h#0 to x-stack                           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 |
    // Implicit fall through to main_ternary_merge@12 //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 |                                        h#0

main_ternary_merge@12:
    int 1                                             //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | 1                                      h#0     UInt64(1)                                                           conditional_expressions/contract.py:8
    dig 5                                             // load e#0 from f-stack                                   (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | 1,e#0 (copy)                                   d + e                                                               conditional_expressions/contract.py:20
    dup
    cover 2                                           // store e#0 to l-stack (copy)                             (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | e#0,1,e#0 (copy)                               d + e                                                               conditional_expressions/contract.py:20
    +                                                 //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | e#0,{+}                                        d + e                                                               conditional_expressions/contract.py:20
    cover 1                                           // store ternary_result%4#1 to l-stack (no copy)           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | ternary_result%4#1,e#0                         d + e                                                               conditional_expressions/contract.py:20
    int 2                                             //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | ternary_result%4#1,e#0,2                       UInt64(2)                                                           conditional_expressions/contract.py:9
    dig 6                                             // load f#0 from f-stack                                   (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | ternary_result%4#1,e#0,2,f#0 (copy)            a * b * c * d * f                                                   conditional_expressions/contract.py:22
    *                                                 //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | ternary_result%4#1,e#0,{*}                     a * b * c * d * f                                                   conditional_expressions/contract.py:22
                                                      // virtual: store tmp%10#0 to l-stack (no copy)            (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | ternary_result%4#1,e#0,tmp%10#0                a * b * c * d * f                                                   conditional_expressions/contract.py:22
                                                      // virtual: load tmp%10#0 from l-stack (no copy)           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | (𝕏) h#0 | ternary_result%4#1,e#0,tmp%10#0                a * b * c * d * f * h                                               conditional_expressions/contract.py:22
    uncover 3                                         // load h#0 from x-stack                                   (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,e#0,tmp%10#0,h#0 (copy)               a * b * c * d * f * h                                               conditional_expressions/contract.py:22
    *                                                 //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,e#0,{*}                               a * b * c * d * f * h                                               conditional_expressions/contract.py:22
                                                      // virtual: store tmp%11#0 to l-stack (no copy)            (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,e#0,tmp%11#0                          a * b * c * d * f * h                                               conditional_expressions/contract.py:22
                                                      // virtual: load tmp%11#0 from l-stack (no copy)           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,e#0,tmp%11#0                          a * b * c * d * f * h - e                                           conditional_expressions/contract.py:22
    uncover 1                                         // load e#0 from l-stack (no copy)                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,tmp%11#0,e#0                          a * b * c * d * f * h - e                                           conditional_expressions/contract.py:22
    -                                                 //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,{-}                                   a * b * c * d * f * h - e                                           conditional_expressions/contract.py:22
                                                      // virtual: store tmp%12#0 to l-stack (no copy)            (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,tmp%12#0                              a * b * c * d * f * h - e                                           conditional_expressions/contract.py:22
                                                      // virtual: load tmp%12#0 from l-stack (no copy)           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,tmp%12#0                              a * b * c * d * f * h - e - g                                       conditional_expressions/contract.py:22
    dig 3                                             // load g#0 from f-stack                                   (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,tmp%12#0,g#0 (copy)                   a * b * c * d * f * h - e - g                                       conditional_expressions/contract.py:22
    -                                                 //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,{-}                                   a * b * c * d * f * h - e - g                                       conditional_expressions/contract.py:22
                                                      // virtual: store tmp%13#0 to l-stack (no copy)            (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,tmp%13#0                              a * b * c * d * f * h - e - g                                       conditional_expressions/contract.py:22
                                                      // virtual: load tmp%13#0 from l-stack (no copy)           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | ternary_result%4#1,tmp%13#0                              result = a * b * c * d * f * h - e - g + i                          conditional_expressions/contract.py:22
    uncover 1                                         // load ternary_result%4#1 from l-stack (no copy)          (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | tmp%13#0,ternary_result%4#1                              result = a * b * c * d * f * h - e - g + i                          conditional_expressions/contract.py:22
    +                                                 //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | {+}                                                      a * b * c * d * f * h - e - g + i                                   conditional_expressions/contract.py:22
                                                      // virtual: store result#0 to l-stack (no copy)            (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | result#0                                                 result = a * b * c * d * f * h - e - g + i                          conditional_expressions/contract.py:22
    dig 0                                             // load result#0 from l-stack (copy)                       (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | result#0,result#0 (copy)                                 op.itob(result)                                                     conditional_expressions/contract.py:24
    itob                                              //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | result#0,{itob}                                          op.itob(result)                                                     conditional_expressions/contract.py:24
                                                      // virtual: store tmp%14#0 to l-stack (no copy)            (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | result#0,tmp%14#0                                        op.itob(result)                                                     conditional_expressions/contract.py:24
                                                      // virtual: load tmp%14#0 from l-stack (no copy)           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | result#0,tmp%14#0                                        log(op.itob(result))                                                conditional_expressions/contract.py:24
    log                                               //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | result#0                                                 log(op.itob(result))                                                conditional_expressions/contract.py:24
                                                      // virtual: load result#0 from l-stack (no copy)           (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 | result#0                                                 return result                                                       conditional_expressions/contract.py:26
    return                                            //                                                         (𝕗) awst_tmp%1#0,awst_tmp%2#0,awst_tmp%3#0,e#0,f#0,g#0,awst_tmp%0#0 |                                                          return result                                                       conditional_expressions/contract.py:26


// test_cases.conditional_expressions.contract.MyContract.expensive_op(val: uint64) -> uint64:
expensive_op:
    proto 1 1                                         //                                                         (𝕡) val#0 |                                                                                                                    @subroutine\ndef expensive_op(self, val: UInt64) -> UInt64:         conditional_expressions/contract.py:31-32

expensive_op_block@0:
    frame_dig -1                                      // load val#0 from parameters                              (𝕡) val#0 | val#0 (copy)                                                                                                       val != 42                                                           conditional_expressions/contract.py:33
    int 42                                            //                                                         (𝕡) val#0 | val#0 (copy),42                                                                                                    42                                                                  conditional_expressions/contract.py:33
    !=                                                //                                                         (𝕡) val#0 | {!=}                                                                                                               val != 42                                                           conditional_expressions/contract.py:33
                                                      // virtual: store tmp%0#0 to l-stack (no copy)             (𝕡) val#0 | tmp%0#0                                                                                                            val != 42                                                           conditional_expressions/contract.py:33
                                                      // virtual: load tmp%0#0 from l-stack (no copy)            (𝕡) val#0 | tmp%0#0                                                                                                            assert val != 42, "Can't be 42"                                     conditional_expressions/contract.py:33
    assert // Can't be 42                             //                                                         (𝕡) val#0 |                                                                                                                    assert val != 42, "Can't be 42"                                     conditional_expressions/contract.py:33
    byte "expensive_op"                               //                                                         (𝕡) val#0 | "expensive_op"                                                                                                     "expensive_op"                                                      conditional_expressions/contract.py:34
    log                                               //                                                         (𝕡) val#0 |                                                                                                                    log("expensive_op")                                                 conditional_expressions/contract.py:34
    frame_dig -1                                      // load val#0 from parameters                              (𝕡) val#0 | val#0 (copy)                                                                                                       return val                                                          conditional_expressions/contract.py:35
    retsub                                            //                                                         val#0 (copy)                                                                                                                   return val                                                          conditional_expressions/contract.py:35


// test_cases.conditional_expressions.contract.MyContract.side_effecting_op(val: uint64) -> uint64:
side_effecting_op:
    proto 1 1                                         //                                                         (𝕡) val#0 |                                                                                                                    @subroutine\ndef side_effecting_op(self, val: UInt64) -> UInt64:    conditional_expressions/contract.py:37-38

side_effecting_op_block@0:
    frame_dig -1                                      // load val#0 from parameters                              (𝕡) val#0 | val#0 (copy)                                                                                                       val != 42                                                           conditional_expressions/contract.py:39
    int 42                                            //                                                         (𝕡) val#0 | val#0 (copy),42                                                                                                    42                                                                  conditional_expressions/contract.py:39
    !=                                                //                                                         (𝕡) val#0 | {!=}                                                                                                               val != 42                                                           conditional_expressions/contract.py:39
                                                      // virtual: store tmp%0#0 to l-stack (no copy)             (𝕡) val#0 | tmp%0#0                                                                                                            val != 42                                                           conditional_expressions/contract.py:39
                                                      // virtual: load tmp%0#0 from l-stack (no copy)            (𝕡) val#0 | tmp%0#0                                                                                                            assert val != 42, "Can't be 42"                                     conditional_expressions/contract.py:39
    assert // Can't be 42                             //                                                         (𝕡) val#0 |                                                                                                                    assert val != 42, "Can't be 42"                                     conditional_expressions/contract.py:39
    byte "side_effecting_op"                          //                                                         (𝕡) val#0 | "side_effecting_op"                                                                                                "side_effecting_op"                                                 conditional_expressions/contract.py:40
    log                                               //                                                         (𝕡) val#0 |                                                                                                                    log("side_effecting_op")                                            conditional_expressions/contract.py:40
    frame_dig -1                                      // load val#0 from parameters                              (𝕡) val#0 | val#0 (copy)                                                                                                       return val                                                          conditional_expressions/contract.py:41
    retsub                                            //                                                         val#0 (copy)                                                                                                                   return val                                                          conditional_expressions/contract.py:41

