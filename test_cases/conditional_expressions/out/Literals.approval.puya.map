{
  "version": 3,
  "sources": [
    "../literals.py"
  ],
  "mappings": ";;;;AAK+C;;AAAvC;;;AACuC;AAAvC;;;AAEO;AAAP;AAKR;;;AAKiB;;AAAA;AAAT;;AAAA;;AAAI;AACJ;;AAAA;;AAAK;AACE;;AAAK;AAAL;AAAP;AACa;AAAN;AAAP;AACA;;AAAS;AACF;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.conditional_expressions.literals.Literals.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6": {
      "callsub": "test_cases.conditional_expressions.literals.Literals.with_variable_condition",
      "op": "callsub with_variable_condition",
      "stack_out": []
    },
    "9": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "10": {
      "callsub": "test_cases.conditional_expressions.literals.Literals.with_variable_condition",
      "op": "callsub with_variable_condition",
      "stack_out": []
    },
    "13": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "14": {
      "op": "return",
      "stack_out": []
    },
    "15": {
      "subroutine": "test_cases.conditional_expressions.literals.Literals.with_variable_condition",
      "params": {
        "condition#0": "uint64"
      },
      "block": "with_variable_condition",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "18": {
      "op": "frame_dig -1",
      "defined_out": [
        "condition#0 (copy)"
      ],
      "stack_out": [
        "condition#0 (copy)"
      ]
    },
    "20": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "21": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "condition#0 (copy)"
      ]
    },
    "23": {
      "op": "dig 1",
      "defined_out": [
        "condition#0 (copy)",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "condition#0 (copy)",
        "tmp%4#0 (copy)"
      ]
    },
    "25": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "y#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "y#0"
      ]
    },
    "26": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "y#0",
        "tmp%4#0 (copy)"
      ]
    },
    "28": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "y#0",
        "tmp%4#0 (copy)",
        "condition#0 (copy)"
      ]
    },
    "30": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "y#0",
        "y2#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "y#0",
        "y2#0"
      ]
    },
    "31": {
      "op": "dig 1",
      "defined_out": [
        "tmp%4#0",
        "y#0",
        "y#0 (copy)",
        "y2#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "y#0",
        "y2#0",
        "y#0 (copy)"
      ]
    },
    "33": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%4#0",
        "y#0",
        "y#0 (copy)",
        "y2#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "y#0",
        "y2#0",
        "y#0 (copy)",
        "1"
      ]
    },
    "34": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0",
        "y#0",
        "y2#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "y#0",
        "y2#0",
        "tmp%6#0"
      ]
    },
    "35": {
      "op": "assert",
      "stack_out": [
        "tmp%4#0",
        "y#0",
        "y2#0"
      ]
    },
    "36": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "y#0",
        "y2#0",
        "1"
      ]
    },
    "37": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%7#0",
        "y#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "y#0",
        "tmp%7#0"
      ]
    },
    "38": {
      "op": "assert",
      "stack_out": [
        "tmp%4#0",
        "y#0"
      ]
    },
    "39": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "y#0",
        "condition#0 (copy)"
      ]
    },
    "41": {
      "op": ">",
      "defined_out": [
        "maybe#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe#0"
      ]
    },
    "42": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "43": {
      "op": "assert",
      "stack_out": []
    },
    "44": {
      "retsub": true,
      "op": "retsub"
    }
  }
}