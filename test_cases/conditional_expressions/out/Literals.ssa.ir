contract test_cases.conditional_expressions.literals.Literals:
    program approval:
        subroutine test_cases.conditional_expressions.literals.Literals.approval_program() -> bool:
            block@0: // L5
                test_cases.conditional_expressions.literals.Literals.with_variable_condition(0u)
                test_cases.conditional_expressions.literals.Literals.with_variable_condition(1u)
                return 1u
        
        subroutine test_cases.conditional_expressions.literals.Literals.with_variable_condition(condition: bool) -> void:
            block@0: // L14
                let x#0: uint64 = (select 0u 1u condition#0)
                let tmp%0#0: bool = (!= x#0 0u)
                let tmp%1#0: bool = (== tmp%0#0 condition#0)
                (assert tmp%1#0)
                let tmp%2#0: uint64 = (select 0u 1u condition#0)
                let tmp%3#0: bool = (== x#0 tmp%2#0)
                (assert tmp%3#0)
                let tmp%4#0: uint64 = (select 1u 0u condition#0)
                let y#0: uint64 = (+ x#0 tmp%4#0)
                let tmp%5#0: uint64 = (select 1u 0u condition#0)
                let y2#0: uint64 = (+ tmp%5#0 x#0)
                let tmp%6#0: bool = (== y#0 1u)
                (assert tmp%6#0)
                let tmp%7#0: bool = (== y2#0 1u)
                (assert tmp%7#0)
                let tmp%8#0: uint64 = (select 0u 1u condition#0)
                let maybe#0: bool = (> y#0 tmp%8#0)
                let tmp%9#0: bool = (! condition#0)
                let tmp%10#0: bool = (== maybe#0 tmp%9#0)
                (assert tmp%10#0)
                let tmp%11#0: bool = (select 1u 1u condition#0)
                (assert tmp%11#0)
                return 
    
    program clear-state:
        subroutine test_cases.conditional_expressions.literals.Literals.clear_state_program() -> bool:
            block@0: // L11
                return 1u