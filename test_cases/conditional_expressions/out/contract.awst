contract MyContract
{
  approval_program(): uint64
  {
    a: uint64 = 1u
    b: uint64 = 2u
    c: uint64 = (reinterpret_cast<bool>(a)) ? (a) : (b)
    d: uint64 = (!(reinterpret_cast<bool>(b))) ? (b) : (a)
    e: uint64 = (reinterpret_cast<bool>(SINGLE_EVAL(id=0, source=this::expensive_op(0u)))) ? (SINGLE_EVAL(id=0, source=this::expensive_op(0u))) : (this::side_effecting_op(1u))
    f: uint64 = (reinterpret_cast<bool>(SINGLE_EVAL(id=1, source=this::expensive_op(3u)))) ? (SINGLE_EVAL(id=1, source=this::expensive_op(3u))) : (this::side_effecting_op(42u))
    g: uint64 = (!(reinterpret_cast<bool>(SINGLE_EVAL(id=2, source=this::side_effecting_op(0u))))) ? (SINGLE_EVAL(id=2, source=this::side_effecting_op(0u))) : (this::expensive_op(42u))
    h: uint64 = (!(reinterpret_cast<bool>(SINGLE_EVAL(id=3, source=this::side_effecting_op(2u))))) ? (SINGLE_EVAL(id=3, source=this::side_effecting_op(2u))) : (this::expensive_op(3u))
    i: uint64 = (b < c) ? (a) : (d + e)
    result: uint64 = a * b * c * d * f * h - e - g + i
    log(itob(result))
    return result
  }
  
  clear_state_program(): uint64
  {
    return 0u
  }
  
  subroutine expensive_op(val: uint64): uint64
  {
    assert(val != 42u, comment="Can't be 42")
    log('expensive_op')
    return val
  }
  
  subroutine side_effecting_op(val: uint64): uint64
  {
    assert(val != 42u, comment="Can't be 42")
    log('side_effecting_op')
    return val
  }
}