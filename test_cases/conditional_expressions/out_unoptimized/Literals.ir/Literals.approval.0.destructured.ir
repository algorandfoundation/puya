main test_cases.conditional_expressions.literals.Literals.approval_program:
    block@0: // L5
        test_cases.conditional_expressions.literals.Literals.with_variable_condition(0u)
        test_cases.conditional_expressions.literals.Literals.with_variable_condition(1u)
        return 1u

subroutine test_cases.conditional_expressions.literals.Literals.with_variable_condition(condition: bool) -> void:
    block@0: // L14
        let select%0#0: uint64 = (select 0u 1u condition#0)
        let x#0: uint64 = select%0#0
        let tmp%0#0: bool = (!= x#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 condition#0)
        (assert tmp%1#0)
        let select%1#0: uint64 = (select 0u 1u condition#0)
        let tmp%2#0: bool = (== x#0 select%1#0)
        (assert tmp%2#0)
        let select%2#0: uint64 = (select 1u 0u condition#0)
        let y#0: uint64 = (+ x#0 select%2#0)
        let select%3#0: uint64 = (select 1u 0u condition#0)
        let y2#0: uint64 = (+ select%3#0 x#0)
        let tmp%3#0: bool = (== y#0 1u)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== y2#0 1u)
        (assert tmp%4#0)
        let select%4#0: uint64 = (select 0u 1u condition#0)
        let maybe#0: bool = (> y#0 select%4#0)
        let tmp%5#0: bool = (! condition#0)
        let tmp%6#0: bool = (== maybe#0 tmp%5#0)
        (assert tmp%6#0)
        let select%5#0: bool = (select 1u 1u condition#0)
        (assert select%5#0)
        return 