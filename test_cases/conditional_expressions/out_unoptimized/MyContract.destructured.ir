contract test_cases.conditional_expressions.contract.MyContract:
    program approval:
        subroutine test_cases.conditional_expressions.contract.MyContract.approval_program() -> uint64:
            block@0: // L7
                goto 1u ? block@1 : block@2
            block@1: // ternary_true_L11
                let ternary_result%0#0: uint64 = 1u
                goto block@3
            block@2: // ternary_false_L11
                let ternary_result%0#0: uint64 = 2u
                goto block@3
            block@3: // ternary_merge_L11
                let c#0: uint64 = ternary_result%0#0
                goto 2u ? block@5 : block@4
            block@4: // ternary_true_L12
                let ternary_result%1#0: uint64 = 2u
                goto block@6
            block@5: // ternary_false_L12
                let ternary_result%1#0: uint64 = 1u
                goto block@6
            block@6: // ternary_merge_L12
                let d#0: uint64 = ternary_result%1#0
                let awst_tmp%0#0: uint64 = test_cases.conditional_expressions.contract.MyContract.expensive_op(0u)
                goto awst_tmp%0#0 ? block@7 : block@8
            block@7: // ternary_true_L14
                let ternary_result%2#0: uint64 = awst_tmp%0#0
                goto block@9
            block@8: // ternary_false_L14
                let ternary_result%2#0: uint64 = test_cases.conditional_expressions.contract.MyContract.side_effecting_op(1u)
                goto block@9
            block@9: // ternary_merge_L14
                let e#0: uint64 = ternary_result%2#0
                let awst_tmp%1#0: uint64 = test_cases.conditional_expressions.contract.MyContract.expensive_op(3u)
                goto awst_tmp%1#0 ? block@10 : block@11
            block@10: // ternary_true_L15
                let ternary_result%3#0: uint64 = awst_tmp%1#0
                goto block@12
            block@11: // ternary_false_L15
                let ternary_result%3#0: uint64 = test_cases.conditional_expressions.contract.MyContract.side_effecting_op(42u)
                goto block@12
            block@12: // ternary_merge_L15
                let f#0: uint64 = ternary_result%3#0
                let awst_tmp%2#0: uint64 = test_cases.conditional_expressions.contract.MyContract.side_effecting_op(0u)
                goto awst_tmp%2#0 ? block@14 : block@13
            block@13: // ternary_true_L17
                let ternary_result%4#0: uint64 = awst_tmp%2#0
                goto block@15
            block@14: // ternary_false_L17
                let ternary_result%4#0: uint64 = test_cases.conditional_expressions.contract.MyContract.expensive_op(42u)
                goto block@15
            block@15: // ternary_merge_L17
                let g#0: uint64 = ternary_result%4#0
                let awst_tmp%3#0: uint64 = test_cases.conditional_expressions.contract.MyContract.side_effecting_op(2u)
                goto awst_tmp%3#0 ? block@17 : block@16
            block@16: // ternary_true_L18
                let ternary_result%5#0: uint64 = awst_tmp%3#0
                goto block@18
            block@17: // ternary_false_L18
                let ternary_result%5#0: uint64 = test_cases.conditional_expressions.contract.MyContract.expensive_op(3u)
                goto block@18
            block@18: // ternary_merge_L18
                let h#0: uint64 = ternary_result%5#0
                let tmp%0#0: bool = (< 2u c#0)
                goto tmp%0#0 ? block@19 : block@20
            block@19: // ternary_true_L20
                let ternary_result%6#0: uint64 = 1u
                goto block@21
            block@20: // ternary_false_L20
                let ternary_result%6#0: uint64 = (+ d#0 e#0)
                goto block@21
            block@21: // ternary_merge_L20
                let i#0: uint64 = ternary_result%6#0
                let tmp%1#0: uint64 = (* 1u 2u)
                let tmp%2#0: uint64 = (* tmp%1#0 c#0)
                let tmp%3#0: uint64 = (* tmp%2#0 d#0)
                let tmp%4#0: uint64 = (* tmp%3#0 f#0)
                let tmp%5#0: uint64 = (* tmp%4#0 h#0)
                let tmp%6#0: uint64 = (- tmp%5#0 e#0)
                let tmp%7#0: uint64 = (- tmp%6#0 g#0)
                let result#0: uint64 = (+ tmp%7#0 i#0)
                let tmp%8#0: bytes = (itob result#0)
                (log tmp%8#0)
                return result#0
        
        subroutine test_cases.conditional_expressions.contract.MyContract.expensive_op(val: uint64) -> uint64:
            block@0: // L31
                let tmp%0#0: bool = (!= val#0 42u)
                (assert tmp%0#0) // Can't be 42
                (log "expensive_op")
                return val#0
        
        subroutine test_cases.conditional_expressions.contract.MyContract.side_effecting_op(val: uint64) -> uint64:
            block@0: // L37
                let tmp%0#0: bool = (!= val#0 42u)
                (assert tmp%0#0) // Can't be 42
                (log "side_effecting_op")
                return val#0
    
    program clear-state:
        subroutine test_cases.conditional_expressions.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L28
                return 0u