{
  "version": 3,
  "sources": [
    "../literals.py"
  ],
  "mappings": ";;;;;AAK+C;AAAvC;;;AACuC;AAAvC;;;AAEO;AAAP;AAKR;;;AAEY;AAAA;AAAO;;AAAA;AACJ;AAAA;AAAA;AAAA;;AAAA;AAAP;AACY;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAP;AACS;AAAA;AAAA;;AAAA;AAAL;;AAAA;AAAJ;AACM;AAAA;AAAA;;AAAA;AAAD;AACE;;AAAK;AAAL;AAAP;AACa;AAAN;AAAP;AACS;AAAA;AAAA;;AAAA;AAAA;AACQ;;AAAA;AAAV;AAAP;AACQ;AAAA;AAAA;;AAAA;AAAR;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.conditional_expressions.literals.Literals.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6": {
      "callsub": "test_cases.conditional_expressions.literals.Literals.with_variable_condition",
      "op": "callsub with_variable_condition",
      "stack_out": []
    },
    "9": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "10": {
      "callsub": "test_cases.conditional_expressions.literals.Literals.with_variable_condition",
      "op": "callsub with_variable_condition",
      "stack_out": []
    },
    "13": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "14": {
      "op": "return",
      "stack_out": []
    },
    "15": {
      "subroutine": "test_cases.conditional_expressions.literals.Literals.with_variable_condition",
      "params": {
        "condition#0": "uint64"
      },
      "block": "with_variable_condition",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "18": {
      "block": "with_variable_condition_block@0",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "19": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0",
        "1"
      ],
      "stack_out": [
        "0",
        "1"
      ]
    },
    "20": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "1",
        "condition#0 (copy)"
      ],
      "stack_out": [
        "0",
        "1",
        "condition#0 (copy)"
      ]
    },
    "22": {
      "op": "select",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "23": {
      "op": "dup",
      "defined_out": [
        "x#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "x#0 (copy)"
      ]
    },
    "24": {
      "op": "intc_1 // 0",
      "stack_out": [
        "x#0",
        "x#0 (copy)",
        "0"
      ]
    },
    "25": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%0#0"
      ]
    },
    "26": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "tmp%0#0",
        "condition#0 (copy)"
      ]
    },
    "28": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%1#0"
      ]
    },
    "29": {
      "op": "assert",
      "stack_out": [
        "x#0"
      ]
    },
    "30": {
      "op": "intc_1 // 0",
      "stack_out": [
        "x#0",
        "0"
      ]
    },
    "31": {
      "op": "intc_0 // 1",
      "stack_out": [
        "x#0",
        "0",
        "1"
      ]
    },
    "32": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "0",
        "1",
        "condition#0 (copy)"
      ]
    },
    "34": {
      "op": "select",
      "defined_out": [
        "select%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "select%1#0"
      ]
    },
    "35": {
      "op": "dig 1",
      "stack_out": [
        "x#0",
        "select%1#0",
        "x#0 (copy)"
      ]
    },
    "37": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "tmp%2#0"
      ]
    },
    "38": {
      "op": "assert",
      "stack_out": [
        "x#0"
      ]
    },
    "39": {
      "op": "intc_0 // 1",
      "stack_out": [
        "x#0",
        "1"
      ]
    },
    "40": {
      "op": "intc_1 // 0",
      "stack_out": [
        "x#0",
        "1",
        "0"
      ]
    },
    "41": {
      "op": "frame_dig -1",
      "stack_out": [
        "x#0",
        "1",
        "0",
        "condition#0 (copy)"
      ]
    },
    "43": {
      "op": "select",
      "defined_out": [
        "select%2#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "select%2#0"
      ]
    },
    "44": {
      "op": "dig 1",
      "stack_out": [
        "x#0",
        "select%2#0",
        "x#0 (copy)"
      ]
    },
    "46": {
      "op": "+",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "x#0",
        "y#0"
      ]
    },
    "47": {
      "op": "swap",
      "stack_out": [
        "y#0",
        "x#0"
      ]
    },
    "48": {
      "op": "intc_0 // 1",
      "stack_out": [
        "y#0",
        "x#0",
        "1"
      ]
    },
    "49": {
      "op": "intc_1 // 0",
      "stack_out": [
        "y#0",
        "x#0",
        "1",
        "0"
      ]
    },
    "50": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#0",
        "x#0",
        "1",
        "0",
        "condition#0 (copy)"
      ]
    },
    "52": {
      "op": "select",
      "defined_out": [
        "select%3#0",
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "x#0",
        "select%3#0"
      ]
    },
    "53": {
      "op": "+",
      "defined_out": [
        "y#0",
        "y2#0"
      ],
      "stack_out": [
        "y#0",
        "y2#0"
      ]
    },
    "54": {
      "op": "dig 1",
      "defined_out": [
        "y#0",
        "y#0 (copy)",
        "y2#0"
      ],
      "stack_out": [
        "y#0",
        "y2#0",
        "y#0 (copy)"
      ]
    },
    "56": {
      "op": "intc_0 // 1",
      "stack_out": [
        "y#0",
        "y2#0",
        "y#0 (copy)",
        "1"
      ]
    },
    "57": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "y#0",
        "y2#0"
      ],
      "stack_out": [
        "y#0",
        "y2#0",
        "tmp%3#0"
      ]
    },
    "58": {
      "op": "assert",
      "stack_out": [
        "y#0",
        "y2#0"
      ]
    },
    "59": {
      "op": "intc_0 // 1",
      "stack_out": [
        "y#0",
        "y2#0",
        "1"
      ]
    },
    "60": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "tmp%4#0"
      ]
    },
    "61": {
      "op": "assert",
      "stack_out": [
        "y#0"
      ]
    },
    "62": {
      "op": "intc_1 // 0",
      "stack_out": [
        "y#0",
        "0"
      ]
    },
    "63": {
      "op": "intc_0 // 1",
      "stack_out": [
        "y#0",
        "0",
        "1"
      ]
    },
    "64": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#0",
        "0",
        "1",
        "condition#0 (copy)"
      ]
    },
    "66": {
      "op": "select",
      "defined_out": [
        "select%4#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "select%4#0"
      ]
    },
    "67": {
      "op": ">",
      "defined_out": [
        "maybe#0"
      ],
      "stack_out": [
        "maybe#0"
      ]
    },
    "68": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe#0",
        "condition#0 (copy)"
      ]
    },
    "70": {
      "op": "!",
      "defined_out": [
        "maybe#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe#0",
        "tmp%5#0"
      ]
    },
    "71": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "72": {
      "op": "assert",
      "stack_out": []
    },
    "73": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "74": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "75": {
      "op": "frame_dig -1",
      "stack_out": [
        "1",
        "1",
        "condition#0 (copy)"
      ]
    },
    "77": {
      "op": "select",
      "defined_out": [
        "select%5#0"
      ],
      "stack_out": [
        "select%5#0"
      ]
    },
    "78": {
      "op": "assert",
      "stack_out": []
    },
    "79": {
      "retsub": true,
      "op": "retsub"
    }
  }
}