#pragma version 10

test_cases.conditional_expressions.contract.MyContract.approval_program:
    byte ""
    dupn 9
    // conditional_expressions/contract.py:8
    // a = UInt64(1)
    int 1
    // conditional_expressions/contract.py:11
    // c = a or b
    bz main_ternary_false@2
    // conditional_expressions/contract.py:8
    // a = UInt64(1)
    int 1
    b main_ternary_merge@3

main_ternary_false@2:
    // conditional_expressions/contract.py:9
    // b = UInt64(2)
    int 2

main_ternary_merge@3:
    // conditional_expressions/contract.py:11
    // c = a or b
    bury 6
    // conditional_expressions/contract.py:9
    // b = UInt64(2)
    int 2
    // conditional_expressions/contract.py:12
    // d = b and a
    bnz main_ternary_false@5
    // conditional_expressions/contract.py:9
    // b = UInt64(2)
    int 2
    b main_ternary_merge@6

main_ternary_false@5:
    // conditional_expressions/contract.py:8
    // a = UInt64(1)
    int 1

main_ternary_merge@6:
    // conditional_expressions/contract.py:12
    // d = b and a
    bury 5
    // conditional_expressions/contract.py:14
    // e = self.expensive_op(UInt64(0)) or self.side_effecting_op(UInt64(1))
    int 0
    callsub expensive_op
    dup
    bury 11
    bz main_ternary_false@8
    dig 9
    b main_ternary_merge@9

main_ternary_false@8:
    // conditional_expressions/contract.py:14
    // e = self.expensive_op(UInt64(0)) or self.side_effecting_op(UInt64(1))
    int 1
    callsub side_effecting_op

main_ternary_merge@9:
    // conditional_expressions/contract.py:14
    // e = self.expensive_op(UInt64(0)) or self.side_effecting_op(UInt64(1))
    bury 4
    // conditional_expressions/contract.py:15
    // f = self.expensive_op(UInt64(3)) or self.side_effecting_op(UInt64(42))
    int 3
    callsub expensive_op
    dup
    bury 10
    bz main_ternary_false@11
    dig 8
    b main_ternary_merge@12

main_ternary_false@11:
    // conditional_expressions/contract.py:15
    // f = self.expensive_op(UInt64(3)) or self.side_effecting_op(UInt64(42))
    int 42
    callsub side_effecting_op

main_ternary_merge@12:
    // conditional_expressions/contract.py:15
    // f = self.expensive_op(UInt64(3)) or self.side_effecting_op(UInt64(42))
    bury 3
    // conditional_expressions/contract.py:17
    // g = self.side_effecting_op(UInt64(0)) and self.expensive_op(UInt64(42))
    int 0
    callsub side_effecting_op
    dup
    bury 9
    bnz main_ternary_false@14
    dig 7
    b main_ternary_merge@15

main_ternary_false@14:
    // conditional_expressions/contract.py:17
    // g = self.side_effecting_op(UInt64(0)) and self.expensive_op(UInt64(42))
    int 42
    callsub expensive_op

main_ternary_merge@15:
    // conditional_expressions/contract.py:17
    // g = self.side_effecting_op(UInt64(0)) and self.expensive_op(UInt64(42))
    bury 2
    // conditional_expressions/contract.py:18
    // h = self.side_effecting_op(UInt64(2)) and self.expensive_op(UInt64(3))
    int 2
    callsub side_effecting_op
    dup
    bury 8
    bnz main_ternary_false@17
    dig 6
    b main_ternary_merge@18

main_ternary_false@17:
    // conditional_expressions/contract.py:18
    // h = self.side_effecting_op(UInt64(2)) and self.expensive_op(UInt64(3))
    int 3
    callsub expensive_op

main_ternary_merge@18:
    // conditional_expressions/contract.py:18
    // h = self.side_effecting_op(UInt64(2)) and self.expensive_op(UInt64(3))
    bury 1
    // conditional_expressions/contract.py:9
    // b = UInt64(2)
    int 2
    // conditional_expressions/contract.py:20
    // i = a if b < c else d + e
    dig 6
    <
    bz main_ternary_false@20
    // conditional_expressions/contract.py:8
    // a = UInt64(1)
    int 1
    b main_ternary_merge@21

main_ternary_false@20:
    // conditional_expressions/contract.py:20
    // i = a if b < c else d + e
    dig 4
    dig 4
    +

main_ternary_merge@21:
    // conditional_expressions/contract.py:8
    // a = UInt64(1)
    int 1
    // conditional_expressions/contract.py:9
    // b = UInt64(2)
    int 2
    // conditional_expressions/contract.py:22
    // result = a * b * c * d * f * h - e - g + i
    *
    dig 7
    *
    dig 6
    *
    dig 4
    *
    dig 2
    *
    dig 5
    -
    dig 3
    -
    uncover 1
    +
    // conditional_expressions/contract.py:24
    // log(op.itob(result))
    dup
    itob
    log
    // conditional_expressions/contract.py:26
    // return result
    return


// test_cases.conditional_expressions.contract.MyContract.expensive_op(val: uint64) -> uint64:
expensive_op:
    // conditional_expressions/contract.py:31-32
    // @subroutine
    // def expensive_op(self, val: UInt64) -> UInt64:
    proto 1 1
    // conditional_expressions/contract.py:33
    // assert val != 42, "Can't be 42"
    frame_dig -1
    int 42
    !=
    assert // Can't be 42
    // conditional_expressions/contract.py:34
    // log(b"expensive_op")
    byte "expensive_op"
    log
    // conditional_expressions/contract.py:35
    // return val
    frame_dig -1
    retsub


// test_cases.conditional_expressions.contract.MyContract.side_effecting_op(val: uint64) -> uint64:
side_effecting_op:
    // conditional_expressions/contract.py:37-38
    // @subroutine
    // def side_effecting_op(self, val: UInt64) -> UInt64:
    proto 1 1
    // conditional_expressions/contract.py:39
    // assert val != 42, "Can't be 42"
    frame_dig -1
    int 42
    !=
    assert // Can't be 42
    // conditional_expressions/contract.py:40
    // log(b"side_effecting_op")
    byte "side_effecting_op"
    log
    // conditional_expressions/contract.py:41
    // return val
    frame_dig -1
    retsub
