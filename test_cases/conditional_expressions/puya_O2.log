debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, output_teal_intermediates=False, output_op_statistics=True, debug_level=0, optimization_level=2, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, _disabled_optimizations=(), expand_all_bytes=False, paths=['conditional_expressions'], output_awst=False, output_awst_json=False, output_source_annotations_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.conditional_expressions.literals.Literals.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.conditional_expressions.literals.Literals.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_expressions.literals.Literals.with_variable_condition
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_expressions.literals.Literals.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.conditional_expressions.literals.Literals.__puya_arc4_router__
debug: removing unused subroutine test_cases.conditional_expressions.literals.Literals.approval_program
debug: removing unused subroutine test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Building IR for function test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.conditional_expressions.literals.Literals.__puya_arc4_router__
debug: removing unused subroutine test_cases.conditional_expressions.literals.Literals.approval_program
debug: removing unused subroutine test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: removing unused subroutine test_cases.conditional_expressions.literals.Literals.with_variable_condition
debug: Building IR for function test_cases.conditional_expressions.contract.MyContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Sealing block@0
conditional_expressions/contract.py:11:13 debug: encountered already materialized expression (a), reusing result: a#0
conditional_expressions/contract.py:12:13 debug: encountered already materialized expression (b), reusing result: b#0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@3
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1) in block@1
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let ternary_result%1#2: uint64 = undefined while trying to resolve 'ternary_result%1' in block@6
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4) in block@4
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5) in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Created Phi assignment: let ternary_result%2#2: uint64 = undefined while trying to resolve 'ternary_result%2' in block@9
debug: Added ternary_result%2#0 to Phi node: let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7) in block@7
debug: Added ternary_result%2#1 to Phi node: let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8) in block@8
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Created Phi assignment: let ternary_result%3#2: uint64 = undefined while trying to resolve 'ternary_result%3' in block@12
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@10) in block@10
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11) in block@11
debug: Created Phi assignment: let b#1: uint64 = undefined while trying to resolve 'b' in block@12
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@9
debug: Created Phi assignment: let b#3: uint64 = undefined while trying to resolve 'b' in block@6
debug: Created Phi assignment: let b#4: uint64 = undefined while trying to resolve 'b' in block@3
debug: Added b#0 to Phi node: let b#4: uint64 = φ(b#0 <- block@1) in block@1
debug: Added b#0 to Phi node: let b#4: uint64 = φ(b#0 <- block@1, b#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let b#4: uint64 = φ(b#0 <- block@1, b#0 <- block@2) (b#4) with b#0
debug: Deleting Phi assignment: let b#4: uint64 = φ(b#0 <- block@1, b#0 <- block@2)
debug: Replaced trivial Phi node: let b#4: uint64 = φ(b#0 <- block@1, b#0 <- block@2) (b#4) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#3: uint64 = φ(b#0 <- block@4) in block@4
debug: Added b#0 to Phi node: let b#3: uint64 = φ(b#0 <- block@4, b#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let b#3: uint64 = φ(b#0 <- block@4, b#0 <- block@5) (b#3) with b#0
debug: Deleting Phi assignment: let b#3: uint64 = φ(b#0 <- block@4, b#0 <- block@5)
debug: Replaced trivial Phi node: let b#3: uint64 = φ(b#0 <- block@4, b#0 <- block@5) (b#3) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@7) in block@7
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@7, b#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let b#2: uint64 = φ(b#0 <- block@7, b#0 <- block@8) (b#2) with b#0
debug: Deleting Phi assignment: let b#2: uint64 = φ(b#0 <- block@7, b#0 <- block@8)
debug: Replaced trivial Phi node: let b#2: uint64 = φ(b#0 <- block@7, b#0 <- block@8) (b#2) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@10) in block@10
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@10, b#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let b#1: uint64 = φ(b#0 <- block@10, b#0 <- block@11) (b#1) with b#0
debug: Deleting Phi assignment: let b#1: uint64 = φ(b#0 <- block@10, b#0 <- block@11)
debug: Replaced trivial Phi node: let b#1: uint64 = φ(b#0 <- block@10, b#0 <- block@11) (b#1) with b#0 in current definition for 1 blocks
debug: Created Phi assignment: let c#1: uint64 = undefined while trying to resolve 'c' in block@12
debug: Created Phi assignment: let c#2: uint64 = undefined while trying to resolve 'c' in block@9
debug: Created Phi assignment: let c#3: uint64 = undefined while trying to resolve 'c' in block@6
debug: Created Phi assignment: let c#4: uint64 = undefined while trying to resolve 'c' in block@3
debug: Added c#0 to Phi node: let c#4: uint64 = φ(c#0 <- block@1) in block@1
debug: Added c#0 to Phi node: let c#4: uint64 = φ(c#0 <- block@1, c#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let c#4: uint64 = φ(c#0 <- block@1, c#0 <- block@2) (c#4) with c#0
debug: Deleting Phi assignment: let c#4: uint64 = φ(c#0 <- block@1, c#0 <- block@2)
debug: Replaced trivial Phi node: let c#4: uint64 = φ(c#0 <- block@1, c#0 <- block@2) (c#4) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#3: uint64 = φ(c#0 <- block@4) in block@4
debug: Added c#0 to Phi node: let c#3: uint64 = φ(c#0 <- block@4, c#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let c#3: uint64 = φ(c#0 <- block@4, c#0 <- block@5) (c#3) with c#0
debug: Deleting Phi assignment: let c#3: uint64 = φ(c#0 <- block@4, c#0 <- block@5)
debug: Replaced trivial Phi node: let c#3: uint64 = φ(c#0 <- block@4, c#0 <- block@5) (c#3) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#2: uint64 = φ(c#0 <- block@7) in block@7
debug: Added c#0 to Phi node: let c#2: uint64 = φ(c#0 <- block@7, c#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let c#2: uint64 = φ(c#0 <- block@7, c#0 <- block@8) (c#2) with c#0
debug: Deleting Phi assignment: let c#2: uint64 = φ(c#0 <- block@7, c#0 <- block@8)
debug: Replaced trivial Phi node: let c#2: uint64 = φ(c#0 <- block@7, c#0 <- block@8) (c#2) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#1: uint64 = φ(c#0 <- block@10) in block@10
debug: Added c#0 to Phi node: let c#1: uint64 = φ(c#0 <- block@10, c#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let c#1: uint64 = φ(c#0 <- block@10, c#0 <- block@11) (c#1) with c#0
debug: Deleting Phi assignment: let c#1: uint64 = φ(c#0 <- block@10, c#0 <- block@11)
debug: Replaced trivial Phi node: let c#1: uint64 = φ(c#0 <- block@10, c#0 <- block@11) (c#1) with c#0 in current definition for 1 blocks
debug: Terminated block@12
debug: Sealing block@13
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@12
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@9
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@6
debug: Created Phi assignment: let a#4: uint64 = undefined while trying to resolve 'a' in block@3
debug: Added a#0 to Phi node: let a#4: uint64 = φ(a#0 <- block@1) in block@1
debug: Added a#0 to Phi node: let a#4: uint64 = φ(a#0 <- block@1, a#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let a#4: uint64 = φ(a#0 <- block@1, a#0 <- block@2) (a#4) with a#0
debug: Deleting Phi assignment: let a#4: uint64 = φ(a#0 <- block@1, a#0 <- block@2)
debug: Replaced trivial Phi node: let a#4: uint64 = φ(a#0 <- block@1, a#0 <- block@2) (a#4) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#3: uint64 = φ(a#0 <- block@4) in block@4
debug: Added a#0 to Phi node: let a#3: uint64 = φ(a#0 <- block@4, a#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#0 <- block@4, a#0 <- block@5) (a#3) with a#0
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#0 <- block@4, a#0 <- block@5)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#0 <- block@4, a#0 <- block@5) (a#3) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#0 <- block@7) in block@7
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#0 <- block@7, a#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let a#2: uint64 = φ(a#0 <- block@7, a#0 <- block@8) (a#2) with a#0
debug: Deleting Phi assignment: let a#2: uint64 = φ(a#0 <- block@7, a#0 <- block@8)
debug: Replaced trivial Phi node: let a#2: uint64 = φ(a#0 <- block@7, a#0 <- block@8) (a#2) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@10) in block@10
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@10, a#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#0 <- block@10, a#0 <- block@11) (a#1) with a#0
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#0 <- block@10, a#0 <- block@11)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#0 <- block@10, a#0 <- block@11) (a#1) with a#0 in current definition for 1 blocks
debug: Terminated block@13
debug: Sealing block@14
debug: Created Phi assignment: let d#1: uint64 = undefined while trying to resolve 'd' in block@12
debug: Created Phi assignment: let d#2: uint64 = undefined while trying to resolve 'd' in block@9
debug: Created Phi assignment: let d#3: uint64 = undefined while trying to resolve 'd' in block@6
debug: Created Phi assignment: let d#4: uint64 = undefined while trying to resolve 'd' in block@3
debug: Added d#0 to Phi node: let d#4: uint64 = φ(d#0 <- block@1) in block@1
debug: Added d#0 to Phi node: let d#4: uint64 = φ(d#0 <- block@1, d#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let d#4: uint64 = φ(d#0 <- block@1, d#0 <- block@2) (d#4) with d#0
debug: Deleting Phi assignment: let d#4: uint64 = φ(d#0 <- block@1, d#0 <- block@2)
debug: Replaced trivial Phi node: let d#4: uint64 = φ(d#0 <- block@1, d#0 <- block@2) (d#4) with d#0 in current definition for 1 blocks
debug: Added d#0 to Phi node: let d#3: uint64 = φ(d#0 <- block@4) in block@4
debug: Added d#0 to Phi node: let d#3: uint64 = φ(d#0 <- block@4, d#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let d#3: uint64 = φ(d#0 <- block@4, d#0 <- block@5) (d#3) with d#0
debug: Deleting Phi assignment: let d#3: uint64 = φ(d#0 <- block@4, d#0 <- block@5)
debug: Replaced trivial Phi node: let d#3: uint64 = φ(d#0 <- block@4, d#0 <- block@5) (d#3) with d#0 in current definition for 1 blocks
debug: Added d#0 to Phi node: let d#2: uint64 = φ(d#0 <- block@7) in block@7
debug: Added d#0 to Phi node: let d#2: uint64 = φ(d#0 <- block@7, d#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let d#2: uint64 = φ(d#0 <- block@7, d#0 <- block@8) (d#2) with d#0
debug: Deleting Phi assignment: let d#2: uint64 = φ(d#0 <- block@7, d#0 <- block@8)
debug: Replaced trivial Phi node: let d#2: uint64 = φ(d#0 <- block@7, d#0 <- block@8) (d#2) with d#0 in current definition for 1 blocks
debug: Added d#0 to Phi node: let d#1: uint64 = φ(d#0 <- block@10) in block@10
debug: Added d#0 to Phi node: let d#1: uint64 = φ(d#0 <- block@10, d#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let d#1: uint64 = φ(d#0 <- block@10, d#0 <- block@11) (d#1) with d#0
debug: Deleting Phi assignment: let d#1: uint64 = φ(d#0 <- block@10, d#0 <- block@11)
debug: Replaced trivial Phi node: let d#1: uint64 = φ(d#0 <- block@10, d#0 <- block@11) (d#1) with d#0 in current definition for 1 blocks
debug: Created Phi assignment: let e#1: uint64 = undefined while trying to resolve 'e' in block@12
debug: Created Phi assignment: let e#2: uint64 = undefined while trying to resolve 'e' in block@9
debug: Created Phi assignment: let e#3: uint64 = undefined while trying to resolve 'e' in block@6
debug: Added e#0 to Phi node: let e#3: uint64 = φ(e#0 <- block@4) in block@4
debug: Added e#0 to Phi node: let e#3: uint64 = φ(e#0 <- block@4, e#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let e#3: uint64 = φ(e#0 <- block@4, e#0 <- block@5) (e#3) with e#0
debug: Deleting Phi assignment: let e#3: uint64 = φ(e#0 <- block@4, e#0 <- block@5)
debug: Replaced trivial Phi node: let e#3: uint64 = φ(e#0 <- block@4, e#0 <- block@5) (e#3) with e#0 in current definition for 1 blocks
debug: Added e#0 to Phi node: let e#2: uint64 = φ(e#0 <- block@7) in block@7
debug: Added e#0 to Phi node: let e#2: uint64 = φ(e#0 <- block@7, e#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let e#2: uint64 = φ(e#0 <- block@7, e#0 <- block@8) (e#2) with e#0
debug: Deleting Phi assignment: let e#2: uint64 = φ(e#0 <- block@7, e#0 <- block@8)
debug: Replaced trivial Phi node: let e#2: uint64 = φ(e#0 <- block@7, e#0 <- block@8) (e#2) with e#0 in current definition for 1 blocks
debug: Added e#0 to Phi node: let e#1: uint64 = φ(e#0 <- block@10) in block@10
debug: Added e#0 to Phi node: let e#1: uint64 = φ(e#0 <- block@10, e#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let e#1: uint64 = φ(e#0 <- block@10, e#0 <- block@11) (e#1) with e#0
debug: Deleting Phi assignment: let e#1: uint64 = φ(e#0 <- block@10, e#0 <- block@11)
debug: Replaced trivial Phi node: let e#1: uint64 = φ(e#0 <- block@10, e#0 <- block@11) (e#1) with e#0 in current definition for 1 blocks
debug: Terminated block@14
debug: Sealing block@15
debug: Created Phi assignment: let ternary_result%4#2: uint64 = undefined while trying to resolve 'ternary_result%4' in block@15
debug: Added ternary_result%4#0 to Phi node: let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@13) in block@13
debug: Added ternary_result%4#1 to Phi node: let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@13, ternary_result%4#1 <- block@14) in block@14
debug: Created Phi assignment: let a#5: uint64 = undefined while trying to resolve 'a' in block@15
debug: Added a#0 to Phi node: let a#5: uint64 = φ(a#0 <- block@13) in block@13
debug: Added a#0 to Phi node: let a#5: uint64 = φ(a#0 <- block@13, a#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let a#5: uint64 = φ(a#0 <- block@13, a#0 <- block@14) (a#5) with a#0
debug: Deleting Phi assignment: let a#5: uint64 = φ(a#0 <- block@13, a#0 <- block@14)
debug: Replaced trivial Phi node: let a#5: uint64 = φ(a#0 <- block@13, a#0 <- block@14) (a#5) with a#0 in current definition for 1 blocks
debug: Created Phi assignment: let b#5: uint64 = undefined while trying to resolve 'b' in block@15
debug: Added b#0 to Phi node: let b#5: uint64 = φ(b#0 <- block@13) in block@13
debug: Added b#0 to Phi node: let b#5: uint64 = φ(b#0 <- block@13, b#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let b#5: uint64 = φ(b#0 <- block@13, b#0 <- block@14) (b#5) with b#0
debug: Deleting Phi assignment: let b#5: uint64 = φ(b#0 <- block@13, b#0 <- block@14)
debug: Replaced trivial Phi node: let b#5: uint64 = φ(b#0 <- block@13, b#0 <- block@14) (b#5) with b#0 in current definition for 1 blocks
debug: Created Phi assignment: let c#5: uint64 = undefined while trying to resolve 'c' in block@15
debug: Added c#0 to Phi node: let c#5: uint64 = φ(c#0 <- block@13) in block@13
debug: Added c#0 to Phi node: let c#5: uint64 = φ(c#0 <- block@13, c#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let c#5: uint64 = φ(c#0 <- block@13, c#0 <- block@14) (c#5) with c#0
debug: Deleting Phi assignment: let c#5: uint64 = φ(c#0 <- block@13, c#0 <- block@14)
debug: Replaced trivial Phi node: let c#5: uint64 = φ(c#0 <- block@13, c#0 <- block@14) (c#5) with c#0 in current definition for 1 blocks
debug: Created Phi assignment: let d#5: uint64 = undefined while trying to resolve 'd' in block@15
debug: Added d#0 to Phi node: let d#5: uint64 = φ(d#0 <- block@13) in block@13
debug: Added d#0 to Phi node: let d#5: uint64 = φ(d#0 <- block@13, d#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let d#5: uint64 = φ(d#0 <- block@13, d#0 <- block@14) (d#5) with d#0
debug: Deleting Phi assignment: let d#5: uint64 = φ(d#0 <- block@13, d#0 <- block@14)
debug: Replaced trivial Phi node: let d#5: uint64 = φ(d#0 <- block@13, d#0 <- block@14) (d#5) with d#0 in current definition for 1 blocks
debug: Created Phi assignment: let f#1: uint64 = undefined while trying to resolve 'f' in block@15
debug: Created Phi assignment: let f#2: uint64 = undefined while trying to resolve 'f' in block@12
debug: Created Phi assignment: let f#3: uint64 = undefined while trying to resolve 'f' in block@9
debug: Added f#0 to Phi node: let f#3: uint64 = φ(f#0 <- block@7) in block@7
debug: Added f#0 to Phi node: let f#3: uint64 = φ(f#0 <- block@7, f#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let f#3: uint64 = φ(f#0 <- block@7, f#0 <- block@8) (f#3) with f#0
debug: Deleting Phi assignment: let f#3: uint64 = φ(f#0 <- block@7, f#0 <- block@8)
debug: Replaced trivial Phi node: let f#3: uint64 = φ(f#0 <- block@7, f#0 <- block@8) (f#3) with f#0 in current definition for 1 blocks
debug: Added f#0 to Phi node: let f#2: uint64 = φ(f#0 <- block@10) in block@10
debug: Added f#0 to Phi node: let f#2: uint64 = φ(f#0 <- block@10, f#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let f#2: uint64 = φ(f#0 <- block@10, f#0 <- block@11) (f#2) with f#0
debug: Deleting Phi assignment: let f#2: uint64 = φ(f#0 <- block@10, f#0 <- block@11)
debug: Replaced trivial Phi node: let f#2: uint64 = φ(f#0 <- block@10, f#0 <- block@11) (f#2) with f#0 in current definition for 1 blocks
debug: Added f#0 to Phi node: let f#1: uint64 = φ(f#0 <- block@13) in block@13
debug: Added f#0 to Phi node: let f#1: uint64 = φ(f#0 <- block@13, f#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let f#1: uint64 = φ(f#0 <- block@13, f#0 <- block@14) (f#1) with f#0
debug: Deleting Phi assignment: let f#1: uint64 = φ(f#0 <- block@13, f#0 <- block@14)
debug: Replaced trivial Phi node: let f#1: uint64 = φ(f#0 <- block@13, f#0 <- block@14) (f#1) with f#0 in current definition for 1 blocks
debug: Created Phi assignment: let h#1: uint64 = undefined while trying to resolve 'h' in block@15
debug: Added h#0 to Phi node: let h#1: uint64 = φ(h#0 <- block@13) in block@13
debug: Added h#0 to Phi node: let h#1: uint64 = φ(h#0 <- block@13, h#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let h#1: uint64 = φ(h#0 <- block@13, h#0 <- block@14) (h#1) with h#0
debug: Deleting Phi assignment: let h#1: uint64 = φ(h#0 <- block@13, h#0 <- block@14)
debug: Replaced trivial Phi node: let h#1: uint64 = φ(h#0 <- block@13, h#0 <- block@14) (h#1) with h#0 in current definition for 1 blocks
debug: Created Phi assignment: let e#4: uint64 = undefined while trying to resolve 'e' in block@15
debug: Added e#0 to Phi node: let e#4: uint64 = φ(e#0 <- block@13) in block@13
debug: Added e#0 to Phi node: let e#4: uint64 = φ(e#0 <- block@13, e#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let e#4: uint64 = φ(e#0 <- block@13, e#0 <- block@14) (e#4) with e#0
debug: Deleting Phi assignment: let e#4: uint64 = φ(e#0 <- block@13, e#0 <- block@14)
debug: Replaced trivial Phi node: let e#4: uint64 = φ(e#0 <- block@13, e#0 <- block@14) (e#4) with e#0 in current definition for 1 blocks
debug: Created Phi assignment: let g#1: uint64 = undefined while trying to resolve 'g' in block@15
debug: Created Phi assignment: let g#2: uint64 = undefined while trying to resolve 'g' in block@12
debug: Added g#0 to Phi node: let g#2: uint64 = φ(g#0 <- block@10) in block@10
debug: Added g#0 to Phi node: let g#2: uint64 = φ(g#0 <- block@10, g#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let g#2: uint64 = φ(g#0 <- block@10, g#0 <- block@11) (g#2) with g#0
debug: Deleting Phi assignment: let g#2: uint64 = φ(g#0 <- block@10, g#0 <- block@11)
debug: Replaced trivial Phi node: let g#2: uint64 = φ(g#0 <- block@10, g#0 <- block@11) (g#2) with g#0 in current definition for 1 blocks
debug: Added g#0 to Phi node: let g#1: uint64 = φ(g#0 <- block@13) in block@13
debug: Added g#0 to Phi node: let g#1: uint64 = φ(g#0 <- block@13, g#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let g#1: uint64 = φ(g#0 <- block@13, g#0 <- block@14) (g#1) with g#0
debug: Deleting Phi assignment: let g#1: uint64 = φ(g#0 <- block@13, g#0 <- block@14)
debug: Replaced trivial Phi node: let g#1: uint64 = φ(g#0 <- block@13, g#0 <- block@14) (g#1) with g#0 in current definition for 1 blocks
debug: Terminated block@15
debug: Building IR for function test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_expressions.contract.MyContract.expensive_op
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_expressions.contract.MyContract.side_effecting_op
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Sealing block@0
conditional_expressions/contract.py:11:13 debug: encountered already materialized expression (a), reusing result: a#0
conditional_expressions/contract.py:12:13 debug: encountered already materialized expression (b), reusing result: b#0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@3
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1) in block@1
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let ternary_result%1#2: uint64 = undefined while trying to resolve 'ternary_result%1' in block@6
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4) in block@4
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5) in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Created Phi assignment: let ternary_result%2#2: uint64 = undefined while trying to resolve 'ternary_result%2' in block@9
debug: Added ternary_result%2#0 to Phi node: let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7) in block@7
debug: Added ternary_result%2#1 to Phi node: let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8) in block@8
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Created Phi assignment: let ternary_result%3#2: uint64 = undefined while trying to resolve 'ternary_result%3' in block@12
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@10) in block@10
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11) in block@11
debug: Created Phi assignment: let b#1: uint64 = undefined while trying to resolve 'b' in block@12
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@9
debug: Created Phi assignment: let b#3: uint64 = undefined while trying to resolve 'b' in block@6
debug: Created Phi assignment: let b#4: uint64 = undefined while trying to resolve 'b' in block@3
debug: Added b#0 to Phi node: let b#4: uint64 = φ(b#0 <- block@1) in block@1
debug: Added b#0 to Phi node: let b#4: uint64 = φ(b#0 <- block@1, b#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let b#4: uint64 = φ(b#0 <- block@1, b#0 <- block@2) (b#4) with b#0
debug: Deleting Phi assignment: let b#4: uint64 = φ(b#0 <- block@1, b#0 <- block@2)
debug: Replaced trivial Phi node: let b#4: uint64 = φ(b#0 <- block@1, b#0 <- block@2) (b#4) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#3: uint64 = φ(b#0 <- block@4) in block@4
debug: Added b#0 to Phi node: let b#3: uint64 = φ(b#0 <- block@4, b#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let b#3: uint64 = φ(b#0 <- block@4, b#0 <- block@5) (b#3) with b#0
debug: Deleting Phi assignment: let b#3: uint64 = φ(b#0 <- block@4, b#0 <- block@5)
debug: Replaced trivial Phi node: let b#3: uint64 = φ(b#0 <- block@4, b#0 <- block@5) (b#3) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@7) in block@7
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@7, b#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let b#2: uint64 = φ(b#0 <- block@7, b#0 <- block@8) (b#2) with b#0
debug: Deleting Phi assignment: let b#2: uint64 = φ(b#0 <- block@7, b#0 <- block@8)
debug: Replaced trivial Phi node: let b#2: uint64 = φ(b#0 <- block@7, b#0 <- block@8) (b#2) with b#0 in current definition for 1 blocks
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@10) in block@10
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@10, b#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let b#1: uint64 = φ(b#0 <- block@10, b#0 <- block@11) (b#1) with b#0
debug: Deleting Phi assignment: let b#1: uint64 = φ(b#0 <- block@10, b#0 <- block@11)
debug: Replaced trivial Phi node: let b#1: uint64 = φ(b#0 <- block@10, b#0 <- block@11) (b#1) with b#0 in current definition for 1 blocks
debug: Created Phi assignment: let c#1: uint64 = undefined while trying to resolve 'c' in block@12
debug: Created Phi assignment: let c#2: uint64 = undefined while trying to resolve 'c' in block@9
debug: Created Phi assignment: let c#3: uint64 = undefined while trying to resolve 'c' in block@6
debug: Created Phi assignment: let c#4: uint64 = undefined while trying to resolve 'c' in block@3
debug: Added c#0 to Phi node: let c#4: uint64 = φ(c#0 <- block@1) in block@1
debug: Added c#0 to Phi node: let c#4: uint64 = φ(c#0 <- block@1, c#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let c#4: uint64 = φ(c#0 <- block@1, c#0 <- block@2) (c#4) with c#0
debug: Deleting Phi assignment: let c#4: uint64 = φ(c#0 <- block@1, c#0 <- block@2)
debug: Replaced trivial Phi node: let c#4: uint64 = φ(c#0 <- block@1, c#0 <- block@2) (c#4) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#3: uint64 = φ(c#0 <- block@4) in block@4
debug: Added c#0 to Phi node: let c#3: uint64 = φ(c#0 <- block@4, c#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let c#3: uint64 = φ(c#0 <- block@4, c#0 <- block@5) (c#3) with c#0
debug: Deleting Phi assignment: let c#3: uint64 = φ(c#0 <- block@4, c#0 <- block@5)
debug: Replaced trivial Phi node: let c#3: uint64 = φ(c#0 <- block@4, c#0 <- block@5) (c#3) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#2: uint64 = φ(c#0 <- block@7) in block@7
debug: Added c#0 to Phi node: let c#2: uint64 = φ(c#0 <- block@7, c#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let c#2: uint64 = φ(c#0 <- block@7, c#0 <- block@8) (c#2) with c#0
debug: Deleting Phi assignment: let c#2: uint64 = φ(c#0 <- block@7, c#0 <- block@8)
debug: Replaced trivial Phi node: let c#2: uint64 = φ(c#0 <- block@7, c#0 <- block@8) (c#2) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#1: uint64 = φ(c#0 <- block@10) in block@10
debug: Added c#0 to Phi node: let c#1: uint64 = φ(c#0 <- block@10, c#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let c#1: uint64 = φ(c#0 <- block@10, c#0 <- block@11) (c#1) with c#0
debug: Deleting Phi assignment: let c#1: uint64 = φ(c#0 <- block@10, c#0 <- block@11)
debug: Replaced trivial Phi node: let c#1: uint64 = φ(c#0 <- block@10, c#0 <- block@11) (c#1) with c#0 in current definition for 1 blocks
debug: Terminated block@12
debug: Sealing block@13
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@12
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@9
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@6
debug: Created Phi assignment: let a#4: uint64 = undefined while trying to resolve 'a' in block@3
debug: Added a#0 to Phi node: let a#4: uint64 = φ(a#0 <- block@1) in block@1
debug: Added a#0 to Phi node: let a#4: uint64 = φ(a#0 <- block@1, a#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let a#4: uint64 = φ(a#0 <- block@1, a#0 <- block@2) (a#4) with a#0
debug: Deleting Phi assignment: let a#4: uint64 = φ(a#0 <- block@1, a#0 <- block@2)
debug: Replaced trivial Phi node: let a#4: uint64 = φ(a#0 <- block@1, a#0 <- block@2) (a#4) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#3: uint64 = φ(a#0 <- block@4) in block@4
debug: Added a#0 to Phi node: let a#3: uint64 = φ(a#0 <- block@4, a#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#0 <- block@4, a#0 <- block@5) (a#3) with a#0
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#0 <- block@4, a#0 <- block@5)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#0 <- block@4, a#0 <- block@5) (a#3) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#0 <- block@7) in block@7
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#0 <- block@7, a#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let a#2: uint64 = φ(a#0 <- block@7, a#0 <- block@8) (a#2) with a#0
debug: Deleting Phi assignment: let a#2: uint64 = φ(a#0 <- block@7, a#0 <- block@8)
debug: Replaced trivial Phi node: let a#2: uint64 = φ(a#0 <- block@7, a#0 <- block@8) (a#2) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@10) in block@10
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@10, a#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#0 <- block@10, a#0 <- block@11) (a#1) with a#0
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#0 <- block@10, a#0 <- block@11)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#0 <- block@10, a#0 <- block@11) (a#1) with a#0 in current definition for 1 blocks
debug: Terminated block@13
debug: Sealing block@14
debug: Created Phi assignment: let d#1: uint64 = undefined while trying to resolve 'd' in block@12
debug: Created Phi assignment: let d#2: uint64 = undefined while trying to resolve 'd' in block@9
debug: Created Phi assignment: let d#3: uint64 = undefined while trying to resolve 'd' in block@6
debug: Created Phi assignment: let d#4: uint64 = undefined while trying to resolve 'd' in block@3
debug: Added d#0 to Phi node: let d#4: uint64 = φ(d#0 <- block@1) in block@1
debug: Added d#0 to Phi node: let d#4: uint64 = φ(d#0 <- block@1, d#0 <- block@2) in block@2
debug: Replacing trivial Phi node: let d#4: uint64 = φ(d#0 <- block@1, d#0 <- block@2) (d#4) with d#0
debug: Deleting Phi assignment: let d#4: uint64 = φ(d#0 <- block@1, d#0 <- block@2)
debug: Replaced trivial Phi node: let d#4: uint64 = φ(d#0 <- block@1, d#0 <- block@2) (d#4) with d#0 in current definition for 1 blocks
debug: Added d#0 to Phi node: let d#3: uint64 = φ(d#0 <- block@4) in block@4
debug: Added d#0 to Phi node: let d#3: uint64 = φ(d#0 <- block@4, d#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let d#3: uint64 = φ(d#0 <- block@4, d#0 <- block@5) (d#3) with d#0
debug: Deleting Phi assignment: let d#3: uint64 = φ(d#0 <- block@4, d#0 <- block@5)
debug: Replaced trivial Phi node: let d#3: uint64 = φ(d#0 <- block@4, d#0 <- block@5) (d#3) with d#0 in current definition for 1 blocks
debug: Added d#0 to Phi node: let d#2: uint64 = φ(d#0 <- block@7) in block@7
debug: Added d#0 to Phi node: let d#2: uint64 = φ(d#0 <- block@7, d#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let d#2: uint64 = φ(d#0 <- block@7, d#0 <- block@8) (d#2) with d#0
debug: Deleting Phi assignment: let d#2: uint64 = φ(d#0 <- block@7, d#0 <- block@8)
debug: Replaced trivial Phi node: let d#2: uint64 = φ(d#0 <- block@7, d#0 <- block@8) (d#2) with d#0 in current definition for 1 blocks
debug: Added d#0 to Phi node: let d#1: uint64 = φ(d#0 <- block@10) in block@10
debug: Added d#0 to Phi node: let d#1: uint64 = φ(d#0 <- block@10, d#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let d#1: uint64 = φ(d#0 <- block@10, d#0 <- block@11) (d#1) with d#0
debug: Deleting Phi assignment: let d#1: uint64 = φ(d#0 <- block@10, d#0 <- block@11)
debug: Replaced trivial Phi node: let d#1: uint64 = φ(d#0 <- block@10, d#0 <- block@11) (d#1) with d#0 in current definition for 1 blocks
debug: Created Phi assignment: let e#1: uint64 = undefined while trying to resolve 'e' in block@12
debug: Created Phi assignment: let e#2: uint64 = undefined while trying to resolve 'e' in block@9
debug: Created Phi assignment: let e#3: uint64 = undefined while trying to resolve 'e' in block@6
debug: Added e#0 to Phi node: let e#3: uint64 = φ(e#0 <- block@4) in block@4
debug: Added e#0 to Phi node: let e#3: uint64 = φ(e#0 <- block@4, e#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let e#3: uint64 = φ(e#0 <- block@4, e#0 <- block@5) (e#3) with e#0
debug: Deleting Phi assignment: let e#3: uint64 = φ(e#0 <- block@4, e#0 <- block@5)
debug: Replaced trivial Phi node: let e#3: uint64 = φ(e#0 <- block@4, e#0 <- block@5) (e#3) with e#0 in current definition for 1 blocks
debug: Added e#0 to Phi node: let e#2: uint64 = φ(e#0 <- block@7) in block@7
debug: Added e#0 to Phi node: let e#2: uint64 = φ(e#0 <- block@7, e#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let e#2: uint64 = φ(e#0 <- block@7, e#0 <- block@8) (e#2) with e#0
debug: Deleting Phi assignment: let e#2: uint64 = φ(e#0 <- block@7, e#0 <- block@8)
debug: Replaced trivial Phi node: let e#2: uint64 = φ(e#0 <- block@7, e#0 <- block@8) (e#2) with e#0 in current definition for 1 blocks
debug: Added e#0 to Phi node: let e#1: uint64 = φ(e#0 <- block@10) in block@10
debug: Added e#0 to Phi node: let e#1: uint64 = φ(e#0 <- block@10, e#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let e#1: uint64 = φ(e#0 <- block@10, e#0 <- block@11) (e#1) with e#0
debug: Deleting Phi assignment: let e#1: uint64 = φ(e#0 <- block@10, e#0 <- block@11)
debug: Replaced trivial Phi node: let e#1: uint64 = φ(e#0 <- block@10, e#0 <- block@11) (e#1) with e#0 in current definition for 1 blocks
debug: Terminated block@14
debug: Sealing block@15
debug: Created Phi assignment: let ternary_result%4#2: uint64 = undefined while trying to resolve 'ternary_result%4' in block@15
debug: Added ternary_result%4#0 to Phi node: let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@13) in block@13
debug: Added ternary_result%4#1 to Phi node: let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@13, ternary_result%4#1 <- block@14) in block@14
debug: Created Phi assignment: let a#5: uint64 = undefined while trying to resolve 'a' in block@15
debug: Added a#0 to Phi node: let a#5: uint64 = φ(a#0 <- block@13) in block@13
debug: Added a#0 to Phi node: let a#5: uint64 = φ(a#0 <- block@13, a#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let a#5: uint64 = φ(a#0 <- block@13, a#0 <- block@14) (a#5) with a#0
debug: Deleting Phi assignment: let a#5: uint64 = φ(a#0 <- block@13, a#0 <- block@14)
debug: Replaced trivial Phi node: let a#5: uint64 = φ(a#0 <- block@13, a#0 <- block@14) (a#5) with a#0 in current definition for 1 blocks
debug: Created Phi assignment: let b#5: uint64 = undefined while trying to resolve 'b' in block@15
debug: Added b#0 to Phi node: let b#5: uint64 = φ(b#0 <- block@13) in block@13
debug: Added b#0 to Phi node: let b#5: uint64 = φ(b#0 <- block@13, b#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let b#5: uint64 = φ(b#0 <- block@13, b#0 <- block@14) (b#5) with b#0
debug: Deleting Phi assignment: let b#5: uint64 = φ(b#0 <- block@13, b#0 <- block@14)
debug: Replaced trivial Phi node: let b#5: uint64 = φ(b#0 <- block@13, b#0 <- block@14) (b#5) with b#0 in current definition for 1 blocks
debug: Created Phi assignment: let c#5: uint64 = undefined while trying to resolve 'c' in block@15
debug: Added c#0 to Phi node: let c#5: uint64 = φ(c#0 <- block@13) in block@13
debug: Added c#0 to Phi node: let c#5: uint64 = φ(c#0 <- block@13, c#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let c#5: uint64 = φ(c#0 <- block@13, c#0 <- block@14) (c#5) with c#0
debug: Deleting Phi assignment: let c#5: uint64 = φ(c#0 <- block@13, c#0 <- block@14)
debug: Replaced trivial Phi node: let c#5: uint64 = φ(c#0 <- block@13, c#0 <- block@14) (c#5) with c#0 in current definition for 1 blocks
debug: Created Phi assignment: let d#5: uint64 = undefined while trying to resolve 'd' in block@15
debug: Added d#0 to Phi node: let d#5: uint64 = φ(d#0 <- block@13) in block@13
debug: Added d#0 to Phi node: let d#5: uint64 = φ(d#0 <- block@13, d#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let d#5: uint64 = φ(d#0 <- block@13, d#0 <- block@14) (d#5) with d#0
debug: Deleting Phi assignment: let d#5: uint64 = φ(d#0 <- block@13, d#0 <- block@14)
debug: Replaced trivial Phi node: let d#5: uint64 = φ(d#0 <- block@13, d#0 <- block@14) (d#5) with d#0 in current definition for 1 blocks
debug: Created Phi assignment: let f#1: uint64 = undefined while trying to resolve 'f' in block@15
debug: Created Phi assignment: let f#2: uint64 = undefined while trying to resolve 'f' in block@12
debug: Created Phi assignment: let f#3: uint64 = undefined while trying to resolve 'f' in block@9
debug: Added f#0 to Phi node: let f#3: uint64 = φ(f#0 <- block@7) in block@7
debug: Added f#0 to Phi node: let f#3: uint64 = φ(f#0 <- block@7, f#0 <- block@8) in block@8
debug: Replacing trivial Phi node: let f#3: uint64 = φ(f#0 <- block@7, f#0 <- block@8) (f#3) with f#0
debug: Deleting Phi assignment: let f#3: uint64 = φ(f#0 <- block@7, f#0 <- block@8)
debug: Replaced trivial Phi node: let f#3: uint64 = φ(f#0 <- block@7, f#0 <- block@8) (f#3) with f#0 in current definition for 1 blocks
debug: Added f#0 to Phi node: let f#2: uint64 = φ(f#0 <- block@10) in block@10
debug: Added f#0 to Phi node: let f#2: uint64 = φ(f#0 <- block@10, f#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let f#2: uint64 = φ(f#0 <- block@10, f#0 <- block@11) (f#2) with f#0
debug: Deleting Phi assignment: let f#2: uint64 = φ(f#0 <- block@10, f#0 <- block@11)
debug: Replaced trivial Phi node: let f#2: uint64 = φ(f#0 <- block@10, f#0 <- block@11) (f#2) with f#0 in current definition for 1 blocks
debug: Added f#0 to Phi node: let f#1: uint64 = φ(f#0 <- block@13) in block@13
debug: Added f#0 to Phi node: let f#1: uint64 = φ(f#0 <- block@13, f#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let f#1: uint64 = φ(f#0 <- block@13, f#0 <- block@14) (f#1) with f#0
debug: Deleting Phi assignment: let f#1: uint64 = φ(f#0 <- block@13, f#0 <- block@14)
debug: Replaced trivial Phi node: let f#1: uint64 = φ(f#0 <- block@13, f#0 <- block@14) (f#1) with f#0 in current definition for 1 blocks
debug: Created Phi assignment: let h#1: uint64 = undefined while trying to resolve 'h' in block@15
debug: Added h#0 to Phi node: let h#1: uint64 = φ(h#0 <- block@13) in block@13
debug: Added h#0 to Phi node: let h#1: uint64 = φ(h#0 <- block@13, h#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let h#1: uint64 = φ(h#0 <- block@13, h#0 <- block@14) (h#1) with h#0
debug: Deleting Phi assignment: let h#1: uint64 = φ(h#0 <- block@13, h#0 <- block@14)
debug: Replaced trivial Phi node: let h#1: uint64 = φ(h#0 <- block@13, h#0 <- block@14) (h#1) with h#0 in current definition for 1 blocks
debug: Created Phi assignment: let e#4: uint64 = undefined while trying to resolve 'e' in block@15
debug: Added e#0 to Phi node: let e#4: uint64 = φ(e#0 <- block@13) in block@13
debug: Added e#0 to Phi node: let e#4: uint64 = φ(e#0 <- block@13, e#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let e#4: uint64 = φ(e#0 <- block@13, e#0 <- block@14) (e#4) with e#0
debug: Deleting Phi assignment: let e#4: uint64 = φ(e#0 <- block@13, e#0 <- block@14)
debug: Replaced trivial Phi node: let e#4: uint64 = φ(e#0 <- block@13, e#0 <- block@14) (e#4) with e#0 in current definition for 1 blocks
debug: Created Phi assignment: let g#1: uint64 = undefined while trying to resolve 'g' in block@15
debug: Created Phi assignment: let g#2: uint64 = undefined while trying to resolve 'g' in block@12
debug: Added g#0 to Phi node: let g#2: uint64 = φ(g#0 <- block@10) in block@10
debug: Added g#0 to Phi node: let g#2: uint64 = φ(g#0 <- block@10, g#0 <- block@11) in block@11
debug: Replacing trivial Phi node: let g#2: uint64 = φ(g#0 <- block@10, g#0 <- block@11) (g#2) with g#0
debug: Deleting Phi assignment: let g#2: uint64 = φ(g#0 <- block@10, g#0 <- block@11)
debug: Replaced trivial Phi node: let g#2: uint64 = φ(g#0 <- block@10, g#0 <- block@11) (g#2) with g#0 in current definition for 1 blocks
debug: Added g#0 to Phi node: let g#1: uint64 = φ(g#0 <- block@13) in block@13
debug: Added g#0 to Phi node: let g#1: uint64 = φ(g#0 <- block@13, g#0 <- block@14) in block@14
debug: Replacing trivial Phi node: let g#1: uint64 = φ(g#0 <- block@13, g#0 <- block@14) (g#1) with g#0
debug: Deleting Phi assignment: let g#1: uint64 = φ(g#0 <- block@13, g#0 <- block@14)
debug: Replaced trivial Phi node: let g#1: uint64 = φ(g#0 <- block@13, g#0 <- block@14) (g#1) with g#0 in current definition for 1 blocks
debug: Terminated block@15
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.conditional_expressions.contract.MyContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.conditional_expressions.contract.MyContract.approval_program
debug: removing unused subroutine test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Building IR for function test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.conditional_expressions.contract.MyContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.conditional_expressions.contract.MyContract.approval_program
debug: removing unused subroutine test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: removing unused subroutine test_cases.conditional_expressions.contract.MyContract.expensive_op
debug: removing unused subroutine test_cases.conditional_expressions.contract.MyContract.side_effecting_op
debug: optimizing approval program of test_cases.conditional_expressions.literals.Literals at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.approval_program
debug: Optimizer: Perform Subroutine Inlining
conditional_expressions/literals.py:6:9 debug: constant function call to test_cases.conditional_expressions.literals.Literals.with_variable_condition in test_cases.conditional_expressions.literals.Literals.approval_program
conditional_expressions/literals.py:7:9 debug: constant function call to test_cases.conditional_expressions.literals.Literals.with_variable_condition in test_cases.conditional_expressions.literals.Literals.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: select%0#0, x#0
debug: selected x#0 from equivalence set
debug: Found equivalence set: tmp%3#0, y#0
debug: selected y#0 from equivalence set
debug: Found equivalence set: tmp%4#0, y2#0
debug: selected y2#0 from equivalence set
debug: Found equivalence set: tmp%7#0, maybe#0
debug: selected maybe#0 from equivalence set
debug: Found equivalence set: select%0#1, x#1
debug: selected x#1 from equivalence set
debug: Found equivalence set: tmp%3#1, y#1
debug: selected y#1 from equivalence set
debug: Found equivalence set: tmp%4#1, y2#1
debug: selected y2#1 from equivalence set
debug: Found equivalence set: tmp%7#1, maybe#1
debug: selected maybe#1 from equivalence set
debug: Copy propagation made 8 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable condition#0
debug: Removing unused variable condition#1
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (select 0u 1u 0u) to 0u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (select 0u 1u 0u) to 0u
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (select 1u 0u 0u) to 1u
debug: Simplified (+ 0u 1u) to 1u
debug: Simplified (select 1u 0u 0u) to 1u
debug: Simplified (+ 1u 0u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (select 0u 1u 0u) to 0u
debug: Simplified (> 1u 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (select 1u 1u 0u) to 1u
debug: Simplified (select 0u 1u 1u) to 1u
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (select 0u 1u 1u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (select 1u 0u 1u) to 0u
debug: Simplified (+ 1u 0u) to 1u
debug: Simplified (select 1u 0u 1u) to 0u
debug: Simplified (+ 0u 1u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (select 0u 1u 1u) to 1u
debug: Simplified (> 1u 1u) to 0u
debug: Simplified (! 1u) to 0u
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (select 1u 1u 1u) to 1u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@2 with block@0 in block@3
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@3 with block@0 in block@4
debug: Merged linear block@3 into block@0
debug: Merged linear block@4 into block@0
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.with_variable_condition
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: select%0#0, x#0
debug: selected x#0 from equivalence set
debug: Found equivalence set: tmp%3#0, y#0
debug: selected y#0 from equivalence set
debug: Found equivalence set: tmp%4#0, y2#0
debug: selected y2#0 from equivalence set
debug: Found equivalence set: tmp%7#0, maybe#0
debug: selected maybe#0 from equivalence set
debug: Copy propagation made 4 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (select 0u 1u condition#0) to condition#0
debug: Simplified (!= condition#0 0u) to condition#0
debug: Simplified (== condition#0 condition#0) to 1u
debug: Simplified (select 0u 1u condition#0) to condition#0
debug: Simplified (== condition#0 condition#0) to 1u
debug: Simplified (select 1u 0u condition#0) to (! condition#0)
debug: Simplified (select 1u 0u condition#0) to (! condition#0)
debug: Simplified (select 0u 1u condition#0) to condition#0
debug: Simplified (select 1u 1u condition#0) to 1u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let select%3#0: uint64 = (! condition#0) with copy of existing registers (Register(source_location=conditional_expressions/literals.py:19:17-44, ir_type=uint64, name='select%2', version=0),)
debug: Replacing redundant declaration let tmp%8#0: bool = (! condition#0) with copy of existing registers (Register(source_location=conditional_expressions/literals.py:19:17-44, ir_type=uint64, name='select%2', version=0),)
debug: Found equivalence set: condition#0, x#0, tmp%0#0, select%1#0, select%4#0
debug: selected condition#0 from equivalence set
debug: Found equivalence set: select%2#0, select%3#0, tmp%8#0
debug: selected select%2#0 from equivalence set
debug: Copy propagation made 2 modifications
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine test_cases.conditional_expressions.literals.Literals.with_variable_condition
debug: Unused subroutines removed
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable x#0
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable select%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable select%2#0
debug: Removing unused variable y#0
debug: Removing unused variable select%3#0
debug: Removing unused variable y2#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable select%4#0
debug: Removing unused variable maybe#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%9#0
debug: Removing unused variable select%5#0
debug: Removing unused variable x#1
debug: Removing unused variable tmp%0#1
debug: Removing unused variable tmp%1#1
debug: Removing unused variable select%1#1
debug: Removing unused variable tmp%2#1
debug: Removing unused variable select%2#1
debug: Removing unused variable y#1
debug: Removing unused variable select%3#1
debug: Removing unused variable y2#1
debug: Removing unused variable tmp%5#1
debug: Removing unused variable tmp%6#1
debug: Removing unused variable select%4#1
debug: Removing unused variable maybe#1
debug: Removing unused variable tmp%8#1
debug: Removing unused variable tmp%9#1
debug: Removing unused variable select%5#1
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 3, ending loop
debug: optimizing clear program of test_cases.conditional_expressions.literals.Literals at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.conditional_expressions.literals.Literals
debug: lowering array IR nodes in clear program of test_cases.conditional_expressions.literals.Literals
debug: optimizing approval program of test_cases.conditional_expressions.literals.Literals at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.conditional_expressions.literals.Literals at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.conditional_expressions.literals.Literals
conditional_expressions/literals.py:5 debug: auto reserving slots in test_cases.conditional_expressions.literals.Literals.approval_program, []
debug: Slot allocation not required
debug: removing local static slots in clear program of test_cases.conditional_expressions.literals.Literals
conditional_expressions/literals.py:11 debug: auto reserving slots in test_cases.conditional_expressions.literals.Literals.clear_state_program, []
debug: Slot allocation not required
debug: Performing SSA IR destructuring for test_cases.conditional_expressions.literals.Literals.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_expressions.literals.Literals.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_expressions.literals.Literals.approval_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to conditional_expressions/out_O2/Literals.ir/Literals.approval.400.destructured.ir
debug: Performing SSA IR destructuring for test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_expressions.literals.Literals.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_expressions.literals.Literals.clear_state_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to conditional_expressions/out_O2/Literals.ir/Literals.clear.400.destructured.ir
conditional_expressions/literals.py:5 debug: optimizing TEAL subroutine ops test_cases.conditional_expressions.literals.Literals.approval_program() -> uint64:
conditional_expressions/literals.py:5 debug: optimizing TEAL subroutine blocks test_cases.conditional_expressions.literals.Literals.approval_program() -> uint64:
debug: inlining single reference block main_block@0 into main
conditional_expressions/literals.py:11 debug: optimizing TEAL subroutine ops test_cases.conditional_expressions.literals.Literals.clear_state_program() -> uint64:
conditional_expressions/literals.py:11 debug: optimizing TEAL subroutine blocks test_cases.conditional_expressions.literals.Literals.clear_state_program() -> uint64:
debug: inlining single reference block main_block@0 into main
debug: optimizing approval program of test_cases.conditional_expressions.contract.MyContract at level 2
debug: Begin optimization pass 1/100
debug: marking simple function test_cases.conditional_expressions.contract.MyContract.expensive_op for inlining (complexity=3 <= threshold=3)
debug: marking simple function test_cases.conditional_expressions.contract.MyContract.side_effecting_op for inlining (complexity=3 <= threshold=3)
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
conditional_expressions/contract.py:18:51 debug: inlining call to test_cases.conditional_expressions.contract.MyContract.expensive_op in test_cases.conditional_expressions.contract.MyContract.approval_program
conditional_expressions/contract.py:18:13 debug: inlining call to test_cases.conditional_expressions.contract.MyContract.side_effecting_op in test_cases.conditional_expressions.contract.MyContract.approval_program
conditional_expressions/contract.py:17:51 debug: inlining call to test_cases.conditional_expressions.contract.MyContract.expensive_op in test_cases.conditional_expressions.contract.MyContract.approval_program
conditional_expressions/contract.py:17:13 debug: inlining call to test_cases.conditional_expressions.contract.MyContract.side_effecting_op in test_cases.conditional_expressions.contract.MyContract.approval_program
conditional_expressions/contract.py:15:45 debug: inlining call to test_cases.conditional_expressions.contract.MyContract.side_effecting_op in test_cases.conditional_expressions.contract.MyContract.approval_program
conditional_expressions/contract.py:15:13 debug: inlining call to test_cases.conditional_expressions.contract.MyContract.expensive_op in test_cases.conditional_expressions.contract.MyContract.approval_program
conditional_expressions/contract.py:14:45 debug: inlining call to test_cases.conditional_expressions.contract.MyContract.side_effecting_op in test_cases.conditional_expressions.contract.MyContract.approval_program
conditional_expressions/contract.py:14:13 debug: inlining call to test_cases.conditional_expressions.contract.MyContract.expensive_op in test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: select%0#0, c#0
debug: selected c#0 from equivalence set
debug: Found equivalence set: select%1#0, d#0
debug: selected d#0 from equivalence set
debug: Found equivalence set: ternary_result%0#2, e#0
debug: selected e#0 from equivalence set
debug: Found equivalence set: ternary_result%1#2, f#0
debug: selected f#0 from equivalence set
debug: Found equivalence set: ternary_result%2#2, g#0
debug: selected g#0 from equivalence set
debug: Found equivalence set: ternary_result%3#2, h#0
debug: selected h#0 from equivalence set
debug: Found equivalence set: ternary_result%4#2, i#0
debug: selected i#0 from equivalence set
debug: Found equivalence set: tmp%14#0, result#0
debug: selected result#0 from equivalence set
debug: Copy propagation made 8 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable val#7
debug: Removing unused variable awst_tmp%0#0
debug: Removing unused variable val#6
debug: Removing unused variable val#5
debug: Removing unused variable awst_tmp%1#0
debug: Removing unused variable val#4
debug: Removing unused variable val#3
debug: Removing unused variable awst_tmp%2#0
debug: Removing unused variable val#2
debug: Removing unused variable val#1
debug: Removing unused variable awst_tmp%3#0
debug: Removing unused variable val#0
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (!= 1u 0u) to 1u
debug: Simplified (select 2u 1u 1u) to 1u
debug: Simplified (== 2u 0u) to 0u
debug: Simplified (select 1u 2u 0u) to 1u
debug: Simplified (!= 0u 42u) to 1u
debug: Simplified (!= 0u 0u) to 0u
debug: Simplified (!= 1u 42u) to 1u
debug: Simplified (!= 3u 42u) to 1u
debug: Simplified (!= 3u 0u) to 1u
debug: Simplified (!= 42u 42u) to 0u
debug: Simplified (!= 0u 42u) to 1u
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (!= 42u 42u) to 0u
debug: Simplified (!= 2u 42u) to 1u
debug: Simplified (== 2u 0u) to 0u
debug: Simplified (!= 3u 42u) to 1u
debug: Simplified (< 2u 1u) to 0u
debug: Simplified (* 1u 2u) to 2u
debug: Simplified (* 2u 1u) to 2u
debug: Simplified (* 2u 1u) to 2u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@31 from goto 0u ? block@1 : block@2 to goto block@2
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@27 from goto 1u ? block@4 : block@5 to goto block@4
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@23 from goto 1u ? block@7 : block@8 to goto block@7
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@19 from goto 0u ? block@10 : block@11 to goto block@11
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@12 from goto 0u ? block@13 : block@14 to goto block@14
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@30 with block@0 in block@31
debug: Merged linear block@30 into block@0
debug: Replaced predecessor block@31 with block@0 in block@2
debug: Merged linear block@31 into block@0
debug: Replaced predecessor block@2 with block@0 in block@28
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@28 with block@0 in block@29
debug: Merged linear block@28 into block@0
debug: Replaced predecessor block@29 with block@0 in block@3
debug: Merged linear block@29 into block@0
debug: Replaced predecessor block@26 with block@3 in block@27
debug: Merged linear block@26 into block@3
debug: Replaced predecessor block@27 with block@3 in block@4
debug: Merged linear block@27 into block@3
debug: Replaced predecessor block@4 with block@3 in block@6
debug: Merged linear block@4 into block@3
debug: Replaced predecessor block@24 with block@5 in block@25
debug: Merged linear block@24 into block@5
debug: Replaced predecessor block@25 with block@5 in block@6
debug: Merged linear block@25 into block@5
debug: Replaced predecessor block@22 with block@6 in block@23
debug: Merged linear block@22 into block@6
debug: Replaced predecessor block@23 with block@6 in block@7
debug: Merged linear block@23 into block@6
debug: Replaced predecessor block@7 with block@6 in block@9
debug: Merged linear block@7 into block@6
debug: Replaced predecessor block@20 with block@8 in block@21
debug: Merged linear block@20 into block@8
debug: Replaced predecessor block@21 with block@8 in block@9
debug: Merged linear block@21 into block@8
debug: Replaced predecessor block@18 with block@9 in block@19
debug: Merged linear block@18 into block@9
debug: Replaced predecessor block@19 with block@9 in block@11
debug: Merged linear block@19 into block@9
debug: Replaced predecessor block@11 with block@9 in block@16
debug: Merged linear block@11 into block@9
debug: Replaced predecessor block@16 with block@9 in block@17
debug: Merged linear block@16 into block@9
debug: Replaced predecessor block@17 with block@9 in block@12
debug: Merged linear block@17 into block@9
debug: Replaced predecessor block@14 with block@12 in block@15
debug: Merged linear block@14 into block@12
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@1, block@5, block@8, block@10, block@13
debug: Removed unreachable predecessors from block@3
debug: Removed unreachable predecessors from block@6
debug: Removed unreachable predecessors from block@9
debug: Removed unreachable predecessors from block@12
debug: Removed unreachable predecessors from block@15
debug: Removing unreachable phi arguments: ternary_result%0#0 <- block@1
debug: Replacing trivial Phi node: let e#0: uint64 = φ(ternary_result%0#1 <- block@0) (e#0) with ternary_result%0#1
debug: Deleting Phi assignment: let e#0: uint64 = φ(ternary_result%0#1 <- block@0)
debug: Removing unreachable phi arguments: ternary_result%1#1 <- block@5
debug: Replacing trivial Phi node: let f#0: uint64 = φ(ternary_result%1#0 <- block@3) (f#0) with ternary_result%1#0
debug: Deleting Phi assignment: let f#0: uint64 = φ(ternary_result%1#0 <- block@3)
debug: Removing unreachable phi arguments: ternary_result%2#1 <- block@8
debug: Replacing trivial Phi node: let g#0: uint64 = φ(ternary_result%2#0 <- block@6) (g#0) with ternary_result%2#0
debug: Deleting Phi assignment: let g#0: uint64 = φ(ternary_result%2#0 <- block@6)
debug: Removing unreachable phi arguments: ternary_result%3#0 <- block@10
debug: Replacing trivial Phi node: let h#0: uint64 = φ(ternary_result%3#1 <- block@9) (h#0) with ternary_result%3#1
debug: Deleting Phi assignment: let h#0: uint64 = φ(ternary_result%3#1 <- block@9)
debug: Removing unreachable phi arguments: ternary_result%4#0 <- block@13
debug: Replacing trivial Phi node: let i#0: uint64 = φ(ternary_result%4#1 <- block@12) (i#0) with ternary_result%4#1
debug: Deleting Phi assignment: let i#0: uint64 = φ(ternary_result%4#1 <- block@12)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.expensive_op
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.side_effecting_op
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine test_cases.conditional_expressions.contract.MyContract.expensive_op
debug: removing unused subroutine test_cases.conditional_expressions.contract.MyContract.side_effecting_op
debug: Unused subroutines removed
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable c#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable d#0
debug: Removing unused variable tmp%0#8
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%0#7
debug: Removing unused variable ternary_result%0#1
debug: Removing unused variable tmp%0#6
debug: Removing unused variable tmp%3#0
debug: Removing unused variable ternary_result%1#0
debug: Removing unused variable tmp%0#4
debug: Removing unused variable tmp%4#0
debug: Removing unused variable ternary_result%2#0
debug: Removing unused variable tmp%0#2
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%0#1
debug: Removing unused variable ternary_result%3#1
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%9#0
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (+ 1u 1u) to 2u
debug: Simplified (* 2u 3u) to 6u
debug: Simplified (* 6u 3u) to 18u
debug: Simplified (- 18u 1u) to 17u
debug: Simplified (- 17u 0u) to 17u
debug: Simplified (+ 17u 2u) to 19u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3 with block@0 in block@6
debug: Merged linear block@3 into block@0
debug: Replaced predecessor block@6 with block@0 in block@9
debug: Merged linear block@6 into block@0
debug: Replaced predecessor block@9 with block@0 in block@12
debug: Merged linear block@9 into block@0
debug: Replaced predecessor block@12 with block@0 in block@15
debug: Merged linear block@12 into block@0
debug: Merged linear block@15 into block@0
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable ternary_result%4#1
debug: Removing unused variable tmp%10#0
debug: Removing unused variable tmp%11#0
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%13#0
debug: Removing unused variable result#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 4, ending loop
debug: optimizing clear program of test_cases.conditional_expressions.contract.MyContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.conditional_expressions.contract.MyContract
debug: lowering array IR nodes in clear program of test_cases.conditional_expressions.contract.MyContract
debug: optimizing approval program of test_cases.conditional_expressions.contract.MyContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.conditional_expressions.contract.MyContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.conditional_expressions.contract.MyContract
conditional_expressions/contract.py:7 debug: auto reserving slots in test_cases.conditional_expressions.contract.MyContract.approval_program, []
debug: Slot allocation not required
debug: removing local static slots in clear program of test_cases.conditional_expressions.contract.MyContract
conditional_expressions/contract.py:28 debug: auto reserving slots in test_cases.conditional_expressions.contract.MyContract.clear_state_program, []
debug: Slot allocation not required
debug: Performing SSA IR destructuring for test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_expressions.contract.MyContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_expressions.contract.MyContract.approval_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to conditional_expressions/out_O2/MyContract.ir/MyContract.approval.400.destructured.ir
debug: Performing SSA IR destructuring for test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.conditional_expressions.contract.MyContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.conditional_expressions.contract.MyContract.clear_state_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to conditional_expressions/out_O2/MyContract.ir/MyContract.clear.400.destructured.ir
debug: Inserted main_block@0.ops[14]: 'l-store-copy tmp%15#0 0'
debug: Replaced main_block@0.ops[16]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
conditional_expressions/contract.py:7 debug: optimizing TEAL subroutine ops test_cases.conditional_expressions.contract.MyContract.approval_program() -> uint64:
conditional_expressions/contract.py:7 debug: optimizing TEAL subroutine blocks test_cases.conditional_expressions.contract.MyContract.approval_program() -> uint64:
debug: inlining single reference block main_block@0 into main
conditional_expressions/contract.py:28 debug: optimizing TEAL subroutine ops test_cases.conditional_expressions.contract.MyContract.clear_state_program() -> uint64:
conditional_expressions/contract.py:28 debug: optimizing TEAL subroutine blocks test_cases.conditional_expressions.contract.MyContract.clear_state_program() -> uint64:
debug: inlining single reference block main_block@0 into main
info: Writing conditional_expressions/out_O2/Literals.approval.teal
info: Writing conditional_expressions/out_O2/Literals.clear.teal
info: Writing conditional_expressions/out_O2/Literals.approval.bin
info: Writing conditional_expressions/out_O2/Literals.clear.bin
info: Writing conditional_expressions/out_O2/Literals.approval.stats.txt
info: Writing conditional_expressions/out_O2/Literals.clear.stats.txt
info: Writing conditional_expressions/out_O2/Literals.approval.puya.map
info: Writing conditional_expressions/out_O2/Literals.clear.puya.map
info: Writing conditional_expressions/out_O2/MyContract.approval.teal
info: Writing conditional_expressions/out_O2/MyContract.clear.teal
info: Writing conditional_expressions/out_O2/MyContract.approval.bin
info: Writing conditional_expressions/out_O2/MyContract.clear.bin
info: Writing conditional_expressions/out_O2/MyContract.approval.stats.txt
info: Writing conditional_expressions/out_O2/MyContract.clear.stats.txt
info: Writing conditional_expressions/out_O2/MyContract.approval.puya.map
info: Writing conditional_expressions/out_O2/MyContract.clear.puya.map