main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.__init__()
        goto block@2
    block@2: // after_if_else_L1
        goto block@3
    block@3: // L37
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@4 : block@18
    block@4: // abi_routing_L37
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@5 : block@16
    block@5: // call_NoOp_L37
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "getListingsMbr()uint64" => block@6, method "allowAsset(pay,uint64)void" => block@7, method "firstDeposit(pay,axfer,uint64,uint64)void" => block@8, method "deposit(axfer,uint64)void" => block@9, method "setPrice(uint64,uint64,uint64)void" => block@10, method "buy(address,uint64,uint64,pay,uint64)void" => block@11, method "withdraw(uint64,uint64)void" => block@12, method "bid(address,uint64,uint64,pay,uint64,uint64)void" => block@13, method "acceptBid(uint64,uint64)void" => block@14, * => block@15}
    block@6: // getListingsMbr_route_L78
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.get_listings_mbr[routing]()
        goto block@15
    block@7: // allowAsset_route_L82
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.allow_asset[routing]()
        goto block@15
    block@8: // firstDeposit_route_L93
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.first_deposit[routing]()
        goto block@15
    block@9: // deposit_route_L120
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.deposit[routing]()
        goto block@15
    block@10: // setPrice_route_L137
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.set_price[routing]()
        goto block@15
    block@11: // buy_route_L150
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.buy[routing]()
        goto block@15
    block@12: // withdraw_route_L181
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw[routing]()
        goto block@15
    block@13: // bid_route_L200
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid[routing]()
        goto block@15
    block@14: // acceptBid_route_L236
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid[routing]()
        goto block@15
    block@15: // switch_case_next_L37
        goto block@17
    block@16: // create_NoOp_L37
        goto block@17
    block@17: // after_if_else_L37
        goto block@19
    block@18: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        goto block@21
    block@21: // L1
        goto block@22
    block@22: // after_inlined_test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.__algopy_default_create_L1
        exit 1u
    block@19: // after_if_else_L37
        exit 0u
    block@20: // after_inlined_test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.__puya_arc4_router___L1
        let tmp%1#0: bool = undefined
        return tmp%1#0

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.get_listings_mbr[routing]() -> void:
    block@0: // L78
        let tmp%0#0: uint64 = test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.get_listings_mbr()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.allow_asset[routing]() -> void:
    block@0: // L82
        let tmp%0#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.allow_asset(gtxn_idx%0#0, tmp%1#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.first_deposit[routing]() -> void:
    block@0: // L93
        let tmp%0#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%0#0 2u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%1#0: uint64 = (txn GroupIndex)
        let gtxn_idx%1#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 axfer)
        (assert gtxn_type_matches%1#0) // transaction type is axfer
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%3#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.first_deposit(gtxn_idx%0#0, gtxn_idx%1#0, tmp%2#0, tmp%3#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.deposit[routing]() -> void:
    block@0: // L120
        let tmp%0#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 axfer)
        (assert gtxn_type_matches%0#0) // transaction type is axfer
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.deposit(gtxn_idx%0#0, tmp%1#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.set_price[routing]() -> void:
    block@0: // L137
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.set_price(tmp%0#0, tmp%1#0, tmp%2#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.buy[routing]() -> void:
    block@0: // L150
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let tmp%0#0: account = reinterpret_Encoded(uint8[32])%0#0
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%3#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%3#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let tmp%4#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.buy(tmp%0#0, tmp%1#0, tmp%2#0, gtxn_idx%0#0, tmp%4#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw[routing]() -> void:
    block@0: // L181
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw(tmp%0#0, tmp%1#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid[routing]() -> void:
    block@0: // L200
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let tmp%0#0: account = reinterpret_Encoded(uint8[32])%0#0
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%3#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%3#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let tmp%4#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let tmp%5#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid(tmp%0#0, tmp%1#0, tmp%2#0, gtxn_idx%0#0, tmp%4#0, tmp%5#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid[routing]() -> void:
    block@0: // L236
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid(tmp%0#0, tmp%1#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.__init__() -> void:
    block@0: // L38
        (log "init")
        return 

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.listings_box_mbr() -> uint64:
    block@0: // L42
        return 50500u

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.quantity_price(quantity: uint64, price: uint64, asset_decimals: uint64) -> uint64:
    block@0: // L67
        let (tmp%0#0: uint64, tmp%1#0: uint64) = (mulw price#0 quantity#0)
        let amount_not_scaled_high#0: uint64 = tmp%0#0
        let amount_not_scaled_low#0: uint64 = tmp%1#0
        let (tmp%2#0: uint64, tmp%3#0: uint64) = (expw 10u asset_decimals#0)
        let scaling_factor_high#0: uint64 = tmp%2#0
        let scaling_factor_low#0: uint64 = tmp%3#0
        let (tmp%4#0: uint64, tmp%5#0: uint64, tmp%6#0: uint64, tmp%7#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let _quotient_high#0: uint64 = tmp%4#0
        let amount_to_be_paid#0: uint64 = tmp%5#0
        let tmp%8#0: bool = (== _quotient_high#0 0u)
        (assert tmp%8#0)
        return amount_to_be_paid#0

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.get_listings_mbr() -> uint64:
    block@0: // L78
        let tmp%0#0: uint64 = test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.listings_box_mbr()
        return tmp%0#0

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.allow_asset(mbr_pay: uint64, asset: uint64) -> void:
    block@0: // L82
        let tmp%0#0: account = (global CurrentApplicationAddress)
        let (tmp%1#0: uint64, tmp%2#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 asset#0)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0)
        let tmp%4#0: account = ((gtxns Receiver) mbr_pay#0)
        let tmp%5#0: account = (global CurrentApplicationAddress)
        let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = ((gtxns Amount) mbr_pay#0)
        let tmp%8#0: uint64 = (global AssetOptInMinBalance)
        let tmp%9#0: bool = (== tmp%7#0 tmp%8#0)
        (assert tmp%9#0)
        itxn_begin
        let inner_txn_params%0%%param_XferAsset_idx_0#0: uint64 = asset#0
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (global CurrentApplicationAddress)
        ((itxn_field AssetAmount) 0u)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) inner_txn_params%0%%param_XferAsset_idx_0#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L89
        itxn_submit
        return 

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.first_deposit(mbr_pay: uint64, xfer: uint64, unitary_price: uint64, nonce: uint64) -> void:
    block@0: // L93
        let tmp%0#0: account = ((gtxns Sender) mbr_pay#0)
        let tmp%1#0: account = (txn Sender)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0)
        let tmp%3#0: account = ((gtxns Receiver) mbr_pay#0)
        let tmp%4#0: account = (global CurrentApplicationAddress)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = ((gtxns Amount) mbr_pay#0)
        let tmp%7#0: uint64 = test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.listings_box_mbr()
        let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: account = (txn Sender)
        let tmp%10#0: uint64 = ((gtxns XferAsset) xfer#0)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%9#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%10#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0: Encoded(uint8[32],uint64,uint64) = aggregate%head%2#0
        let tmp%11#0: Encoded(uint8[32],uint64,uint64) = aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0
        let key#0: Encoded(uint8[32],uint64,uint64) = tmp%11#0
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        let tmp%12#0: bool = (! maybe_exists%0#0)
        (assert tmp%12#0)
        let tmp%13#0: account = ((gtxns Sender) xfer#0)
        let tmp%14#0: account = (txn Sender)
        let tmp%15#0: bool = (== tmp%13#0 tmp%14#0)
        (assert tmp%15#0)
        let tmp%16#0: account = ((gtxns AssetReceiver) xfer#0)
        let tmp%17#0: account = (global CurrentApplicationAddress)
        let tmp%18#0: bool = (== tmp%16#0 tmp%17#0)
        (assert tmp%18#0)
        let tmp%19#0: uint64 = ((gtxns AssetAmount) xfer#0)
        let tmp%20#0: bool = (> tmp%19#0 0u)
        (assert tmp%20#0)
        let tmp%21#0: uint64 = ((gtxns AssetAmount) xfer#0)
        let tmp%22#0: account = (global ZeroAddress)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%21#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob unitary_price#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = tmp%22#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32],uint64,uint64)%0#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = aggregate%head%7#0
        let tmp%23#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint8[32],uint64,uint64)%0#0
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 key#0)
        (box_put box_prefixed_key%1#0 tmp%23#0)
        return 

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.deposit(xfer: uint64, nonce: uint64) -> void:
    block@0: // L120
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: uint64 = ((gtxns XferAsset) xfer#0)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0: Encoded(uint8[32],uint64,uint64) = aggregate%head%2#0
        let tmp%2#0: Encoded(uint8[32],uint64,uint64) = aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0
        let key#0: Encoded(uint8[32],uint64,uint64) = tmp%2#0
        let tmp%3#0: account = ((gtxns Sender) xfer#0)
        let tmp%4#0: account = (txn Sender)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0)
        let tmp%6#0: account = ((gtxns AssetReceiver) xfer#0)
        let tmp%7#0: account = (global CurrentApplicationAddress)
        let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: uint64 = ((gtxns AssetAmount) xfer#0)
        let tmp%10#0: bool = (> tmp%9#0 0u)
        (assert tmp%10#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.listings entry exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let existing#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = storage_value%0#0
        let aggregate%extract%0#0: bytes = (extract3 existing#0 48u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#0: bytes = (extract3 existing#0 56u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#0: bytes = (extract3 existing#0 16u 32u)
        let tuple_item%2#0: Encoded(uint8[32]) = aggregate%extract%2#0
        let values%2#0: account = tuple_item%2#0
        let aggregate%extract%3#0: bytes = (extract3 existing#0 8u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let aggregate%extract%4#0: bytes = (extract3 existing#0 0u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%4#0
        let values%4#0: uint64 = (btoi tuple_item%4#0)
        let tmp%11#0: uint64 = ((gtxns AssetAmount) xfer#0)
        let tmp%12#0: uint64 = (+ values%4#0 tmp%11#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%12#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob values%3#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = values%2#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob values%0#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32],uint64,uint64)%0#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = aggregate%head%7#0
        let tmp%13#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint8[32],uint64,uint64)%0#0
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 key#0)
        (box_put box_prefixed_key%1#0 tmp%13#0)
        return 

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.set_price(asset: uint64, nonce: uint64, unitary_price: uint64) -> void:
    block@0: // L137
        let tmp%0#0: account = (txn Sender)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0: Encoded(uint8[32],uint64,uint64) = aggregate%head%2#0
        let tmp%1#0: Encoded(uint8[32],uint64,uint64) = aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0
        let key#0: Encoded(uint8[32],uint64,uint64) = tmp%1#0
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.listings entry exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let existing#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = storage_value%0#0
        let aggregate%extract%0#0: bytes = (extract3 existing#0 48u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let aggregate%extract%1#0: bytes = (extract3 existing#0 56u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#0: bytes = (extract3 existing#0 16u 32u)
        let tuple_item%2#0: Encoded(uint8[32]) = aggregate%extract%2#0
        let values%2#0: account = tuple_item%2#0
        let aggregate%extract%3#0: bytes = (extract3 existing#0 0u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob values%3#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob unitary_price#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = values%2#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob values%0#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32],uint64,uint64)%0#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = aggregate%head%7#0
        let tmp%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint8[32],uint64,uint64)%0#0
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 key#0)
        (box_put box_prefixed_key%1#0 tmp%2#0)
        return 

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.buy(owner: account, asset: uint64, nonce: uint64, buy_pay: uint64, quantity: uint64) -> void:
    block@0: // L150
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = owner#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0: Encoded(uint8[32],uint64,uint64) = aggregate%head%2#0
        let tmp%0#0: Encoded(uint8[32],uint64,uint64) = aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0
        let key#0: Encoded(uint8[32],uint64,uint64) = tmp%0#0
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.listings entry exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let listing#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = storage_value%0#0
        let aggregate%extract%0#0: bytes = (extract3 listing#0 8u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let tmp%1#0: uint64 = test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.quantity_price(quantity#0, values%0#0, value%0#0)
        let amount_to_be_paid#0: uint64 = tmp%1#0
        let tmp%2#0: account = ((gtxns Sender) buy_pay#0)
        let tmp%3#0: account = (txn Sender)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0)
        let tmp%5#0: account = ((gtxns Receiver) buy_pay#0)
        let tmp%6#0: bool = (== tmp%5#0 owner#0)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = ((gtxns Amount) buy_pay#0)
        let tmp%8#0: bool = (== tmp%7#0 amount_to_be_paid#0)
        (assert tmp%8#0)
        let aggregate%extract%1#0: bytes = (extract3 listing#0 48u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#0: bytes = (extract3 listing#0 56u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let aggregate%extract%3#0: bytes = (extract3 listing#0 16u 32u)
        let tuple_item%3#0: Encoded(uint8[32]) = aggregate%extract%3#0
        let values%3#0: account = tuple_item%3#0
        let aggregate%extract%4#0: bytes = (extract3 listing#0 8u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%4#0
        let values%4#0: uint64 = (btoi tuple_item%4#0)
        let aggregate%extract%5#0: bytes = (extract3 listing#0 0u 8u)
        let tuple_item%5#0: Encoded(uint64) = aggregate%extract%5#0
        let values%5#0: uint64 = (btoi tuple_item%5#0)
        let tmp%9#0: uint64 = (- values%5#0 quantity#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%9#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob values%4#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = values%3#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob values%1#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob values%2#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32],uint64,uint64)%0#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = aggregate%head%7#0
        let tmp%10#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint8[32],uint64,uint64)%0#0
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 key#0)
        (box_put box_prefixed_key%1#0 tmp%10#0)
        itxn_begin
        let inner_txn_params%0%%param_XferAsset_idx_0#0: uint64 = asset#0
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (txn Sender)
        let inner_txn_params%0%%param_AssetAmount_idx_0#0: uint64 = quantity#0
        ((itxn_field AssetAmount) inner_txn_params%0%%param_AssetAmount_idx_0#0)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) inner_txn_params%0%%param_XferAsset_idx_0#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L177
        itxn_submit
        return 

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw(asset: uint64, nonce: uint64) -> void:
    block@0: // L181
        let tmp%0#0: account = (txn Sender)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0: Encoded(uint8[32],uint64,uint64) = aggregate%head%2#0
        let tmp%1#0: Encoded(uint8[32],uint64,uint64) = aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0
        let key#0: Encoded(uint8[32],uint64,uint64) = tmp%1#0
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.listings entry exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let listing#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = storage_value%0#0
        let aggregate%extract%0#0: bytes = (extract3 listing#0 16u 32u)
        let tuple_item%0#0: Encoded(uint8[32]) = aggregate%extract%0#0
        let values%0#0: account = tuple_item%0#0
        let tmp%2#0: account = (global ZeroAddress)
        let tmp%3#0: bool = (!= values%0#0 tmp%2#0)
        goto tmp%3#0 ? block@1 : block@3
    block@1: // if_body_L187
        let aggregate%extract%1#0: bytes = (extract3 listing#0 48u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#0: bytes = (extract3 listing#0 56u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let tmp%4#0: uint64 = test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.quantity_price(values%1#0, values%2#0, value%0#0)
        let current_bid_deposit#0: uint64 = tmp%4#0
        itxn_begin
        let aggregate%extract%3#0: bytes = (extract3 listing#0 16u 32u)
        let tuple_item%3#0: Encoded(uint8[32]) = aggregate%extract%3#0
        let values%3#0: account = tuple_item%3#0
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = values%3#0
        let inner_txn_params%0%%param_Amount_idx_0#0: uint64 = current_bid_deposit#0
        ((itxn_field Amount) inner_txn_params%0%%param_Amount_idx_0#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L190
        itxn_submit
        goto block@3
    block@3: // after_if_else_L186
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 key#0)
        (box_del box_prefixed_key%1#0)
        itxn_begin
        let inner_txn_params%1%%param_Receiver_idx_0#0: account = (txn Sender)
        let inner_txn_params%1%%param_Amount_idx_0#0: uint64 = test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.listings_box_mbr()
        ((itxn_field Amount) inner_txn_params%1%%param_Amount_idx_0#0)
        ((itxn_field Receiver) inner_txn_params%1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L194
        itxn_submit
        itxn_begin
        let inner_txn_params%2%%param_XferAsset_idx_0#0: uint64 = asset#0
        let inner_txn_params%2%%param_AssetReceiver_idx_0#0: account = (txn Sender)
        let aggregate%extract%4#0: bytes = (extract3 listing#0 0u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%4#0
        let values%4#0: uint64 = (btoi tuple_item%4#0)
        let inner_txn_params%2%%param_AssetAmount_idx_0#0: uint64 = values%4#0
        ((itxn_field AssetAmount) inner_txn_params%2%%param_AssetAmount_idx_0#0)
        ((itxn_field AssetReceiver) inner_txn_params%2%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) inner_txn_params%2%%param_XferAsset_idx_0#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L196
        itxn_submit
        return 

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid(owner: account, asset: uint64, nonce: uint64, bid_pay: uint64, quantity: uint64, unitary_price: uint64) -> void:
    block@0: // L200
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = owner#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0: Encoded(uint8[32],uint64,uint64) = aggregate%head%2#0
        let tmp%0#0: Encoded(uint8[32],uint64,uint64) = aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0
        let key#0: Encoded(uint8[32],uint64,uint64) = tmp%0#0
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.listings entry exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let listing#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = storage_value%0#0
        let aggregate%extract%0#0: bytes = (extract3 listing#0 16u 32u)
        let tuple_item%0#0: Encoded(uint8[32]) = aggregate%extract%0#0
        let values%0#0: account = tuple_item%0#0
        let tmp%1#0: account = (global ZeroAddress)
        let tmp%2#0: bool = (!= values%0#0 tmp%1#0)
        goto tmp%2#0 ? block@1 : block@3
    block@1: // if_body_L214
        let aggregate%extract%1#0: bytes = (extract3 listing#0 56u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%3#0: bool = (> unitary_price#0 values%1#0)
        (assert tmp%3#0)
        let aggregate%extract%2#0: bytes = (extract3 listing#0 48u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let aggregate%extract%3#0: bytes = (extract3 listing#0 56u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let tmp%4#0: uint64 = test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.quantity_price(values%2#0, values%3#0, value%0#0)
        let current_bid_amount#0: uint64 = tmp%4#0
        itxn_begin
        let aggregate%extract%4#0: bytes = (extract3 listing#0 16u 32u)
        let tuple_item%4#0: Encoded(uint8[32]) = aggregate%extract%4#0
        let values%4#0: account = tuple_item%4#0
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = values%4#0
        let inner_txn_params%0%%param_Amount_idx_0#0: uint64 = current_bid_amount#0
        ((itxn_field Amount) inner_txn_params%0%%param_Amount_idx_0#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L220
        itxn_submit
        goto block@3
    block@3: // after_if_else_L213
        let (value%1#0: uint64, check%1#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%1#0) // asset exists
        let tmp%5#0: uint64 = test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.quantity_price(quantity#0, unitary_price#0, value%1#0)
        let amount_to_be_bid#0: uint64 = tmp%5#0
        let tmp%6#0: account = ((gtxns Sender) bid_pay#0)
        let tmp%7#0: account = (txn Sender)
        let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: account = ((gtxns Receiver) bid_pay#0)
        let tmp%10#0: account = (global CurrentApplicationAddress)
        let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = ((gtxns Amount) bid_pay#0)
        let tmp%13#0: bool = (== tmp%12#0 amount_to_be_bid#0)
        (assert tmp%13#0)
        let aggregate%extract%5#0: bytes = (extract3 listing#0 0u 8u)
        let tuple_item%5#0: Encoded(uint64) = aggregate%extract%5#0
        let values%5#0: uint64 = (btoi tuple_item%5#0)
        let aggregate%extract%6#0: bytes = (extract3 listing#0 8u 8u)
        let tuple_item%6#0: Encoded(uint64) = aggregate%extract%6#0
        let values%6#0: uint64 = (btoi tuple_item%6#0)
        let tmp%14#0: account = (txn Sender)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob values%5#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob values%6#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = tmp%14#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob quantity#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob unitary_price#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32],uint64,uint64)%0#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = aggregate%head%7#0
        let tmp%15#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint8[32],uint64,uint64)%0#0
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 key#0)
        (box_put box_prefixed_key%1#0 tmp%15#0)
        return 

subroutine test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid(asset: uint64, nonce: uint64) -> void:
    block@0: // L236
        let tmp%0#0: account = (txn Sender)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0: Encoded(uint8[32],uint64,uint64) = aggregate%head%2#0
        let tmp%1#0: Encoded(uint8[32],uint64,uint64) = aggregate%as_Encoded(uint8[32],uint64,uint64)%0#0
        let key#0: Encoded(uint8[32],uint64,uint64) = tmp%1#0
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 key#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.listings entry exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let listing#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = storage_value%0#0
        let aggregate%extract%0#0: bytes = (extract3 listing#0 16u 32u)
        let tuple_item%0#0: Encoded(uint8[32]) = aggregate%extract%0#0
        let values%0#0: account = tuple_item%0#0
        let tmp%2#0: account = (global ZeroAddress)
        let tmp%3#0: bool = (!= values%0#0 tmp%2#0)
        (assert tmp%3#0)
        let aggregate%extract%1#0: bytes = (extract3 listing#0 0u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let aggregate%extract%2#0: bytes = (extract3 listing#0 48u 8u)
        let tuple_item%2#0: Encoded(uint64) = aggregate%extract%2#0
        let values%2#0: uint64 = (btoi tuple_item%2#0)
        let tmp%4#0: bool = (< values%1#0 values%2#0)
        goto tmp%4#0 ? block@1 : block@2
    block@1: // ternary_true_L243
        let aggregate%extract%3#0: bytes = (extract3 listing#0 0u 8u)
        let tuple_item%3#0: Encoded(uint64) = aggregate%extract%3#0
        let values%3#0: uint64 = (btoi tuple_item%3#0)
        let ternary_result%0#0: uint64 = values%3#0
        goto block@3
    block@2: // ternary_false_L243
        let aggregate%extract%4#0: bytes = (extract3 listing#0 48u 8u)
        let tuple_item%4#0: Encoded(uint64) = aggregate%extract%4#0
        let values%4#0: uint64 = (btoi tuple_item%4#0)
        let ternary_result%0#0: uint64 = values%4#0
        goto block@3
    block@3: // ternary_merge_L243
        let min_quantity#0: uint64 = ternary_result%0#0
        let aggregate%extract%5#0: bytes = (extract3 listing#0 56u 8u)
        let tuple_item%5#0: Encoded(uint64) = aggregate%extract%5#0
        let values%5#0: uint64 = (btoi tuple_item%5#0)
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let tmp%5#0: uint64 = test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.quantity_price(min_quantity#0, values%5#0, value%0#0)
        let best_bid_amount#0: uint64 = tmp%5#0
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        let inner_txn_params%0%%param_Amount_idx_0#0: uint64 = best_bid_amount#0
        ((itxn_field Amount) inner_txn_params%0%%param_Amount_idx_0#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L249
        itxn_submit
        itxn_begin
        let inner_txn_params%1%%param_XferAsset_idx_0#0: uint64 = asset#0
        let aggregate%extract%6#0: bytes = (extract3 listing#0 16u 32u)
        let tuple_item%6#0: Encoded(uint8[32]) = aggregate%extract%6#0
        let values%6#0: account = tuple_item%6#0
        let inner_txn_params%1%%param_AssetReceiver_idx_0#0: account = values%6#0
        let inner_txn_params%1%%param_AssetAmount_idx_0#0: uint64 = min_quantity#0
        ((itxn_field AssetAmount) inner_txn_params%1%%param_AssetAmount_idx_0#0)
        ((itxn_field AssetReceiver) inner_txn_params%1%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) inner_txn_params%1%%param_XferAsset_idx_0#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L251
        itxn_submit
        let aggregate%extract%7#0: bytes = (extract3 listing#0 16u 32u)
        let tuple_item%7#0: Encoded(uint8[32]) = aggregate%extract%7#0
        let values%7#0: account = tuple_item%7#0
        let aggregate%extract%8#0: bytes = (extract3 listing#0 56u 8u)
        let tuple_item%8#0: Encoded(uint64) = aggregate%extract%8#0
        let values%8#0: uint64 = (btoi tuple_item%8#0)
        let aggregate%extract%9#0: bytes = (extract3 listing#0 8u 8u)
        let tuple_item%9#0: Encoded(uint64) = aggregate%extract%9#0
        let values%9#0: uint64 = (btoi tuple_item%9#0)
        let aggregate%extract%10#0: bytes = (extract3 listing#0 0u 8u)
        let tuple_item%10#0: Encoded(uint64) = aggregate%extract%10#0
        let values%10#0: uint64 = (btoi tuple_item%10#0)
        let tmp%6#0: uint64 = (- values%10#0 min_quantity#0)
        let aggregate%extract%11#0: bytes = (extract3 listing#0 48u 8u)
        let tuple_item%11#0: Encoded(uint64) = aggregate%extract%11#0
        let values%11#0: uint64 = (btoi tuple_item%11#0)
        let tmp%7#0: uint64 = (- values%11#0 min_quantity#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%6#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob values%9#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = values%7#0
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%7#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob values%8#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32],uint64,uint64)%0#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = aggregate%head%7#0
        let tmp%8#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint8[32],uint64,uint64)%0#0
        let box_prefixed_key%1#0: bytes = (concat 0x6c697374696e6773 key#0)
        (box_put box_prefixed_key%1#0 tmp%8#0)
        return 