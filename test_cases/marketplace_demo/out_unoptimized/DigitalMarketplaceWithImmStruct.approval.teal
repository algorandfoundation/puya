#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 8 0 1 32
    bytecblock 0x 0x6c697374696e6773
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_call___init__@1

main_call___init__@1:
    callsub __init__
    b main_after_if_else@2

main_after_if_else@2:
    b main_block@3

main_block@3:
    // marketplace_demo/marketplace_with_immutable_struct.py:37
    // class DigitalMarketplaceWithImmStruct(arc4.ARC4Contract):
    txn NumAppArgs
    intc_1 // 0
    !=
    bz main___algopy_default_create@18
    b main_abi_routing@4

main_abi_routing@4:
    // marketplace_demo/marketplace_with_immutable_struct.py:37
    // class DigitalMarketplaceWithImmStruct(arc4.ARC4Contract):
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    bz main_create_NoOp@16
    b main_call_NoOp@5

main_call_NoOp@5:
    // marketplace_demo/marketplace_with_immutable_struct.py:37
    // class DigitalMarketplaceWithImmStruct(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xd98ef6a9 // method "getListingsMbr()uint64"
    pushbytes 0x6a4e7fca // method "allowAsset(pay,uint64)void"
    pushbytes 0x12f08c98 // method "firstDeposit(pay,axfer,uint64,uint64)void"
    pushbytes 0x9b4b8234 // method "deposit(axfer,uint64)void"
    pushbytes 0x4d8b23d8 // method "setPrice(uint64,uint64,uint64)void"
    pushbytes 0x52ac5df7 // method "buy(address,uint64,uint64,pay,uint64)void"
    pushbytes 0xe3aeb25c // method "withdraw(uint64,uint64)void"
    pushbytes 0x3234b711 // method "bid(address,uint64,uint64,pay,uint64,uint64)void"
    pushbytes 0xcc826346 // method "acceptBid(uint64,uint64)void"
    uncover 9
    match main_getListingsMbr_route@6 main_allowAsset_route@7 main_firstDeposit_route@8 main_deposit_route@9 main_setPrice_route@10 main_buy_route@11 main_withdraw_route@12 main_bid_route@13 main_acceptBid_route@14
    b main_switch_case_next@15

main_switch_case_next@15:
    b main_after_if_else@17

main_after_if_else@17:
    b main_after_if_else@19

main_after_if_else@19:
    // marketplace_demo/marketplace_with_immutable_struct.py:37
    // class DigitalMarketplaceWithImmStruct(arc4.ARC4Contract):
    err

main_acceptBid_route@14:
    // marketplace_demo/marketplace_with_immutable_struct.py:236
    // @arc4.abimethod(name="acceptBid")
    callsub accept_bid
    b main_switch_case_next@15

main_bid_route@13:
    // marketplace_demo/marketplace_with_immutable_struct.py:200
    // @arc4.abimethod
    callsub bid
    b main_switch_case_next@15

main_withdraw_route@12:
    // marketplace_demo/marketplace_with_immutable_struct.py:181
    // @arc4.abimethod
    callsub withdraw
    b main_switch_case_next@15

main_buy_route@11:
    // marketplace_demo/marketplace_with_immutable_struct.py:150
    // @arc4.abimethod
    callsub buy
    b main_switch_case_next@15

main_setPrice_route@10:
    // marketplace_demo/marketplace_with_immutable_struct.py:137
    // @arc4.abimethod(name="setPrice")
    callsub set_price
    b main_switch_case_next@15

main_deposit_route@9:
    // marketplace_demo/marketplace_with_immutable_struct.py:120
    // @arc4.abimethod
    callsub deposit
    b main_switch_case_next@15

main_firstDeposit_route@8:
    // marketplace_demo/marketplace_with_immutable_struct.py:93
    // @arc4.abimethod(name="firstDeposit")
    callsub first_deposit
    b main_switch_case_next@15

main_allowAsset_route@7:
    // marketplace_demo/marketplace_with_immutable_struct.py:82
    // @arc4.abimethod(name="allowAsset")
    callsub allow_asset
    b main_switch_case_next@15

main_getListingsMbr_route@6:
    // marketplace_demo/marketplace_with_immutable_struct.py:78
    // @arc4.abimethod(readonly=True, name="getListingsMbr")
    callsub get_listings_mbr
    b main_switch_case_next@15

main_create_NoOp@16:
    b main_after_if_else@17

main___algopy_default_create@18:
    txn OnCompletion
    intc_1 // NoOp
    ==
    txn ApplicationID
    intc_1 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b main_block@21

main_block@21:
    b main_after_inlined_test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.__algopy_default_create@22

main_after_inlined_test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.__algopy_default_create@22:
    intc_2 // 1
    return


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.get_listings_mbr[routing]() -> void:
get_listings_mbr:
    b get_listings_mbr_block@0

get_listings_mbr_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:78
    // @arc4.abimethod(readonly=True, name="getListingsMbr")
    callsub test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.get_listings_mbr
    itob
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_2 // 1
    return


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.allow_asset[routing]() -> void:
allow_asset:
    b allow_asset_block@0

allow_asset_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:82
    // @arc4.abimethod(name="allowAsset")
    txn GroupIndex
    intc_2 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    callsub test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.allow_asset
    intc_2 // 1
    return


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.first_deposit[routing]() -> void:
first_deposit:
    b first_deposit_block@0

first_deposit_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:93
    // @arc4.abimethod(name="firstDeposit")
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_2 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_2 // 1
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 2
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.first_deposit
    intc_2 // 1
    return


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.deposit[routing]() -> void:
deposit:
    b deposit_block@0

deposit_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:120
    // @arc4.abimethod
    txn GroupIndex
    intc_2 // 1
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    callsub test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.deposit
    intc_2 // 1
    return


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.set_price[routing]() -> void:
set_price:
    b set_price_block@0

set_price_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:137
    // @arc4.abimethod(name="setPrice")
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 2
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 3
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.set_price
    intc_2 // 1
    return


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.buy[routing]() -> void:
buy:
    b buy_block@0

buy_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:150
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 2
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 3
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txn GroupIndex
    intc_2 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 4
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    callsub test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.buy
    intc_2 // 1
    return


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw[routing]() -> void:
withdraw:
    b withdraw_block@0

withdraw_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:181
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 2
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    callsub test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw
    intc_2 // 1
    return


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid[routing]() -> void:
bid:
    b bid_block@0

bid_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:200
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    intc_3 // 32
    ==
    assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
    txna ApplicationArgs 2
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 3
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txn GroupIndex
    intc_2 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 4
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 5
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    uncover 5
    uncover 5
    uncover 5
    uncover 5
    uncover 5
    uncover 5
    callsub test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid
    intc_2 // 1
    return


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid[routing]() -> void:
accept_bid:
    b accept_bid_block@0

accept_bid_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:236
    // @arc4.abimethod(name="acceptBid")
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 2
    dup
    len
    intc_0 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    callsub test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid
    intc_2 // 1
    return


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.__init__() -> void:
__init__:
    b __init___block@0

__init___block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:39
    // log("init")
    pushbytes "init"
    log
    retsub


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.listings_box_mbr() -> uint64:
listings_box_mbr:
    b listings_box_mbr_block@0

listings_box_mbr_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:44-65
    // return UInt64(
    //     2_500
    //     +
    //     # fmt: off
    //     # Key length
    //     (
    //         8
    //         + 32
    //         + 8
    //         + 8
    //         +
    //         # Value length
    //         8
    //         + 8
    //         + 32
    //         + 8
    //         + 8
    //     )
    //     *
    //     # fmt: on
    //     400
    // )
    pushint 50500 // 50500
    retsub


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.quantity_price(quantity: uint64, price: uint64, asset_decimals: uint64) -> uint64:
quantity_price:
    // marketplace_demo/marketplace_with_immutable_struct.py:67-68
    // @subroutine
    // def quantity_price(self, quantity: UInt64, price: UInt64, asset_decimals: UInt64) -> UInt64:
    proto 3 1
    b quantity_price_block@0

quantity_price_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:69
    // amount_not_scaled_high, amount_not_scaled_low = op.mulw(price, quantity)
    frame_dig -2
    frame_dig -3
    mulw
    // marketplace_demo/marketplace_with_immutable_struct.py:70
    // scaling_factor_high, scaling_factor_low = op.expw(10, asset_decimals)
    pushint 10 // 10
    frame_dig -1
    expw
    // marketplace_demo/marketplace_with_immutable_struct.py:71-73
    // _quotient_high, amount_to_be_paid, _remainder_high, _remainder_low = op.divmodw(
    //     amount_not_scaled_high, amount_not_scaled_low, scaling_factor_high, scaling_factor_low
    // )
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    divmodw
    cover 3
    cover 2
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:74
    // assert _quotient_high == 0
    intc_1 // 0
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:76
    // return amount_to_be_paid
    frame_bury 0
    retsub


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.get_listings_mbr() -> uint64:
test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.get_listings_mbr:
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.get_listings_mbr_block@0

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.get_listings_mbr_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:80
    // return self.listings_box_mbr()
    callsub listings_box_mbr
    retsub


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.allow_asset(mbr_pay: uint64, asset: uint64) -> void:
test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.allow_asset:
    // marketplace_demo/marketplace_with_immutable_struct.py:82-83
    // @arc4.abimethod(name="allowAsset")
    // def allow_asset(self, mbr_pay: gtxn.PaymentTransaction, asset: Asset) -> None:
    proto 2 0
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.allow_asset_block@0

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.allow_asset_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:84
    // assert not Global.current_application_address.is_opted_in(asset)
    global CurrentApplicationAddress
    frame_dig -1
    asset_holding_get AssetBalance
    !
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:86
    // assert mbr_pay.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:87
    // assert mbr_pay.amount == Global.asset_opt_in_min_balance
    frame_dig -2
    gtxns Amount
    global AssetOptInMinBalance
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:89-91
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=Global.current_application_address, asset_amount=0
    // ).submit()
    itxn_begin
    // marketplace_demo/marketplace_with_immutable_struct.py:90
    // xfer_asset=asset, asset_receiver=Global.current_application_address, asset_amount=0
    frame_dig -1
    global CurrentApplicationAddress
    intc_1 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // marketplace_demo/marketplace_with_immutable_struct.py:89
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.allow_asset_next_txn@1

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.allow_asset_next_txn@1:
    // marketplace_demo/marketplace_with_immutable_struct.py:89-91
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=Global.current_application_address, asset_amount=0
    // ).submit()
    itxn_submit
    retsub


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.first_deposit(mbr_pay: uint64, xfer: uint64, unitary_price: uint64, nonce: uint64) -> void:
test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.first_deposit:
    // marketplace_demo/marketplace_with_immutable_struct.py:93-100
    // @arc4.abimethod(name="firstDeposit")
    // def first_deposit(
    //     self,
    //     mbr_pay: gtxn.PaymentTransaction,
    //     xfer: gtxn.AssetTransferTransaction,
    //     unitary_price: UInt64,
    //     nonce: UInt64,
    // ) -> None:
    proto 4 0
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.first_deposit_block@0

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.first_deposit_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:101
    // assert mbr_pay.sender == Txn.sender
    frame_dig -4
    gtxns Sender
    txn Sender
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:102
    // assert mbr_pay.receiver == Global.current_application_address
    frame_dig -4
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:103
    // assert mbr_pay.amount == self.listings_box_mbr()
    frame_dig -4
    gtxns Amount
    callsub listings_box_mbr
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:105
    // key = ListingKey(owner=Txn.sender, asset=xfer.xfer_asset.id, nonce=nonce)
    txn Sender
    frame_dig -3
    gtxns XferAsset
    cover 1
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    frame_dig -1
    itob
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:106
    // assert key not in self.listings
    bytec_1 // 0x6c697374696e6773
    dig 1
    concat
    box_len
    cover 1
    cover 2
    !
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:108
    // assert xfer.sender == Txn.sender
    frame_dig -3
    gtxns Sender
    txn Sender
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:109
    // assert xfer.asset_receiver == Global.current_application_address
    frame_dig -3
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:110
    // assert xfer.asset_amount > 0
    frame_dig -3
    gtxns AssetAmount
    intc_1 // 0
    >
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:113
    // deposited=xfer.asset_amount,
    frame_dig -3
    gtxns AssetAmount
    // marketplace_demo/marketplace_with_immutable_struct.py:115
    // bidder=Account(),
    global ZeroAddress
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:112-118
    // self.listings[key] = ListingValue(
    //     deposited=xfer.asset_amount,
    //     unitaryPrice=unitary_price,
    //     bidder=Account(),
    //     bid=UInt64(),
    //     bidUnitaryPrice=UInt64(),
    // )
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -2
    itob
    concat
    uncover 1
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:116
    // bid=UInt64(),
    intc_1 // 0
    // marketplace_demo/marketplace_with_immutable_struct.py:112-118
    // self.listings[key] = ListingValue(
    //     deposited=xfer.asset_amount,
    //     unitaryPrice=unitary_price,
    //     bidder=Account(),
    //     bid=UInt64(),
    //     bidUnitaryPrice=UInt64(),
    // )
    itob
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:117
    // bidUnitaryPrice=UInt64(),
    intc_1 // 0
    // marketplace_demo/marketplace_with_immutable_struct.py:112-118
    // self.listings[key] = ListingValue(
    //     deposited=xfer.asset_amount,
    //     unitaryPrice=unitary_price,
    //     bidder=Account(),
    //     bid=UInt64(),
    //     bidUnitaryPrice=UInt64(),
    // )
    itob
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:112
    // self.listings[key] = ListingValue(
    bytec_1 // 0x6c697374696e6773
    uncover 2
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:112-118
    // self.listings[key] = ListingValue(
    //     deposited=xfer.asset_amount,
    //     unitaryPrice=unitary_price,
    //     bidder=Account(),
    //     bid=UInt64(),
    //     bidUnitaryPrice=UInt64(),
    // )
    uncover 1
    box_put
    retsub


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.deposit(xfer: uint64, nonce: uint64) -> void:
test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.deposit:
    // marketplace_demo/marketplace_with_immutable_struct.py:120-121
    // @arc4.abimethod
    // def deposit(self, xfer: gtxn.AssetTransferTransaction, nonce: UInt64) -> None:
    proto 2 0
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.deposit_block@0

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.deposit_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:122
    // key = ListingKey(owner=Txn.sender, asset=xfer.xfer_asset.id, nonce=nonce)
    txn Sender
    frame_dig -2
    gtxns XferAsset
    cover 1
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    frame_dig -1
    itob
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:124
    // assert xfer.sender == Txn.sender
    frame_dig -2
    gtxns Sender
    txn Sender
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:125
    // assert xfer.asset_receiver == Global.current_application_address
    frame_dig -2
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:126
    // assert xfer.asset_amount > 0
    frame_dig -2
    gtxns AssetAmount
    intc_1 // 0
    >
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:128
    // existing = self.listings[key]
    bytec_1 // 0x6c697374696e6773
    dig 1
    concat
    box_get
    assert // check self.listings entry exists
    // marketplace_demo/marketplace_with_immutable_struct.py:130
    // bid=existing.bid,
    dup
    pushint 48 // 48
    intc_0 // 8
    extract3
    btoi
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:131
    // bidUnitaryPrice=existing.bidUnitaryPrice,
    dup
    pushint 56 // 56
    intc_0 // 8
    extract3
    btoi
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:132
    // bidder=existing.bidder,
    dup
    pushint 16 // 16
    intc_3 // 32
    extract3
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:133
    // unitaryPrice=existing.unitaryPrice,
    dup
    intc_0 // 8
    intc_0 // 8
    extract3
    btoi
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:134
    // deposited=existing.deposited + xfer.asset_amount,
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    frame_dig -2
    gtxns AssetAmount
    +
    // marketplace_demo/marketplace_with_immutable_struct.py:129-135
    // self.listings[key] = ListingValue(
    //     bid=existing.bid,
    //     bidUnitaryPrice=existing.bidUnitaryPrice,
    //     bidder=existing.bidder,
    //     unitaryPrice=existing.unitaryPrice,
    //     deposited=existing.deposited + xfer.asset_amount,
    // )
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    uncover 1
    concat
    uncover 2
    itob
    concat
    uncover 1
    itob
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:129
    // self.listings[key] = ListingValue(
    bytec_1 // 0x6c697374696e6773
    uncover 2
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:129-135
    // self.listings[key] = ListingValue(
    //     bid=existing.bid,
    //     bidUnitaryPrice=existing.bidUnitaryPrice,
    //     bidder=existing.bidder,
    //     unitaryPrice=existing.unitaryPrice,
    //     deposited=existing.deposited + xfer.asset_amount,
    // )
    uncover 1
    box_put
    retsub


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.set_price(asset: uint64, nonce: uint64, unitary_price: uint64) -> void:
test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.set_price:
    // marketplace_demo/marketplace_with_immutable_struct.py:137-138
    // @arc4.abimethod(name="setPrice")
    // def set_price(self, asset: Asset, nonce: UInt64, unitary_price: UInt64) -> None:
    proto 3 0
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.set_price_block@0

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.set_price_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:139
    // key = ListingKey(owner=Txn.sender, asset=asset.id, nonce=nonce)
    txn Sender
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -3
    itob
    concat
    frame_dig -2
    itob
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:141
    // existing = self.listings[key]
    bytec_1 // 0x6c697374696e6773
    dig 1
    concat
    box_get
    assert // check self.listings entry exists
    // marketplace_demo/marketplace_with_immutable_struct.py:143
    // bid=existing.bid,
    dup
    pushint 48 // 48
    intc_0 // 8
    extract3
    btoi
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:144
    // bidUnitaryPrice=existing.bidUnitaryPrice,
    dup
    pushint 56 // 56
    intc_0 // 8
    extract3
    btoi
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:145
    // bidder=existing.bidder,
    dup
    pushint 16 // 16
    intc_3 // 32
    extract3
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:146
    // deposited=existing.deposited,
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    // marketplace_demo/marketplace_with_immutable_struct.py:142-148
    // self.listings[key] = ListingValue(
    //     bid=existing.bid,
    //     bidUnitaryPrice=existing.bidUnitaryPrice,
    //     bidder=existing.bidder,
    //     deposited=existing.deposited,
    //     unitaryPrice=unitary_price,
    // )
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -1
    itob
    concat
    uncover 1
    concat
    uncover 2
    itob
    concat
    uncover 1
    itob
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:142
    // self.listings[key] = ListingValue(
    bytec_1 // 0x6c697374696e6773
    uncover 2
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:142-148
    // self.listings[key] = ListingValue(
    //     bid=existing.bid,
    //     bidUnitaryPrice=existing.bidUnitaryPrice,
    //     bidder=existing.bidder,
    //     deposited=existing.deposited,
    //     unitaryPrice=unitary_price,
    // )
    uncover 1
    box_put
    retsub


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.buy(owner: bytes, asset: uint64, nonce: uint64, buy_pay: uint64, quantity: uint64) -> void:
test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.buy:
    // marketplace_demo/marketplace_with_immutable_struct.py:150-158
    // @arc4.abimethod
    // def buy(
    //     self,
    //     owner: Account,
    //     asset: Asset,
    //     nonce: UInt64,
    //     buy_pay: gtxn.PaymentTransaction,
    //     quantity: UInt64,
    // ) -> None:
    proto 5 0
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.buy_block@0

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.buy_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:159
    // key = ListingKey(owner=owner, asset=asset.id, nonce=nonce)
    frame_dig -5
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -4
    itob
    concat
    frame_dig -3
    itob
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:161
    // listing = self.listings[key]
    bytec_1 // 0x6c697374696e6773
    dig 1
    concat
    box_get
    assert // check self.listings entry exists
    // marketplace_demo/marketplace_with_immutable_struct.py:163
    // amount_to_be_paid = self.quantity_price(quantity, listing.unitaryPrice, asset.decimals)
    dup
    intc_0 // 8
    intc_0 // 8
    extract3
    btoi
    frame_dig -4
    asset_params_get AssetDecimals
    assert // asset exists
    frame_dig -1
    uncover 2
    uncover 2
    callsub quantity_price
    // marketplace_demo/marketplace_with_immutable_struct.py:165
    // assert buy_pay.sender == Txn.sender
    frame_dig -2
    gtxns Sender
    txn Sender
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:166
    // assert buy_pay.receiver == owner
    frame_dig -2
    gtxns Receiver
    frame_dig -5
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:167
    // assert buy_pay.amount == amount_to_be_paid
    frame_dig -2
    gtxns Amount
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:170
    // bid=listing.bid,
    dup
    pushint 48 // 48
    intc_0 // 8
    extract3
    btoi
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:171
    // bidUnitaryPrice=listing.bidUnitaryPrice,
    dup
    pushint 56 // 56
    intc_0 // 8
    extract3
    btoi
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:172
    // bidder=listing.bidder,
    dup
    pushint 16 // 16
    intc_3 // 32
    extract3
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:173
    // unitaryPrice=listing.unitaryPrice,
    dup
    intc_0 // 8
    intc_0 // 8
    extract3
    btoi
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:174
    // deposited=listing.deposited - quantity,
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    frame_dig -1
    -
    // marketplace_demo/marketplace_with_immutable_struct.py:169-175
    // self.listings[key] = ListingValue(
    //     bid=listing.bid,
    //     bidUnitaryPrice=listing.bidUnitaryPrice,
    //     bidder=listing.bidder,
    //     unitaryPrice=listing.unitaryPrice,
    //     deposited=listing.deposited - quantity,
    // )
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    uncover 1
    concat
    uncover 2
    itob
    concat
    uncover 1
    itob
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:169
    // self.listings[key] = ListingValue(
    bytec_1 // 0x6c697374696e6773
    uncover 2
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:169-175
    // self.listings[key] = ListingValue(
    //     bid=listing.bid,
    //     bidUnitaryPrice=listing.bidUnitaryPrice,
    //     bidder=listing.bidder,
    //     unitaryPrice=listing.unitaryPrice,
    //     deposited=listing.deposited - quantity,
    // )
    uncover 1
    box_put
    // marketplace_demo/marketplace_with_immutable_struct.py:177-179
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=Txn.sender, asset_amount=quantity
    // ).submit()
    itxn_begin
    // marketplace_demo/marketplace_with_immutable_struct.py:178
    // xfer_asset=asset, asset_receiver=Txn.sender, asset_amount=quantity
    frame_dig -4
    txn Sender
    frame_dig -1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // marketplace_demo/marketplace_with_immutable_struct.py:177
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.buy_next_txn@1

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.buy_next_txn@1:
    // marketplace_demo/marketplace_with_immutable_struct.py:177-179
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=Txn.sender, asset_amount=quantity
    // ).submit()
    itxn_submit
    retsub


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw(asset: uint64, nonce: uint64) -> void:
test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw:
    // marketplace_demo/marketplace_with_immutable_struct.py:181-182
    // @arc4.abimethod
    // def withdraw(self, asset: Asset, nonce: UInt64) -> None:
    proto 2 0
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_block@0

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:183
    // key = ListingKey(owner=Txn.sender, asset=asset.id, nonce=nonce)
    txn Sender
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -2
    itob
    concat
    frame_dig -1
    itob
    concat
    dup
    // marketplace_demo/marketplace_with_immutable_struct.py:185
    // listing = self.listings[key]
    bytec_1 // 0x6c697374696e6773
    uncover 1
    concat
    box_get
    assert // check self.listings entry exists
    dup
    // marketplace_demo/marketplace_with_immutable_struct.py:186
    // if listing.bidder != Account():
    pushint 16 // 16
    intc_3 // 32
    extract3
    global ZeroAddress
    !=
    bz test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_after_if_else@3
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_if_body@1

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_if_body@1:
    // marketplace_demo/marketplace_with_immutable_struct.py:188
    // listing.bid, listing.bidUnitaryPrice, asset.decimals
    frame_dig 1
    dup
    pushint 48 // 48
    intc_0 // 8
    extract3
    btoi
    cover 1
    dup
    pushint 56 // 56
    intc_0 // 8
    extract3
    btoi
    frame_dig -2
    asset_params_get AssetDecimals
    assert // asset exists
    // marketplace_demo/marketplace_with_immutable_struct.py:187-189
    // current_bid_deposit = self.quantity_price(
    //     listing.bid, listing.bidUnitaryPrice, asset.decimals
    // )
    uncover 3
    uncover 2
    uncover 2
    callsub quantity_price
    // marketplace_demo/marketplace_with_immutable_struct.py:190
    // itxn.Payment(receiver=listing.bidder, amount=current_bid_deposit).submit()
    itxn_begin
    uncover 1
    pushint 16 // 16
    intc_3 // 32
    extract3
    uncover 1
    itxn_field Amount
    itxn_field Receiver
    intc_2 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_next_txn@2

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_next_txn@2:
    // marketplace_demo/marketplace_with_immutable_struct.py:190
    // itxn.Payment(receiver=listing.bidder, amount=current_bid_deposit).submit()
    itxn_submit
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_after_if_else@3

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_after_if_else@3:
    // marketplace_demo/marketplace_with_immutable_struct.py:192
    // del self.listings[key]
    bytec_1 // 0x6c697374696e6773
    frame_dig 0
    concat
    box_del
    pop
    // marketplace_demo/marketplace_with_immutable_struct.py:194
    // itxn.Payment(receiver=Txn.sender, amount=self.listings_box_mbr()).submit()
    itxn_begin
    txn Sender
    callsub listings_box_mbr
    itxn_field Amount
    itxn_field Receiver
    intc_2 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_next_txn@4

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_next_txn@4:
    // marketplace_demo/marketplace_with_immutable_struct.py:194
    // itxn.Payment(receiver=Txn.sender, amount=self.listings_box_mbr()).submit()
    itxn_submit
    // marketplace_demo/marketplace_with_immutable_struct.py:196-198
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=Txn.sender, asset_amount=listing.deposited
    // ).submit()
    itxn_begin
    // marketplace_demo/marketplace_with_immutable_struct.py:197
    // xfer_asset=asset, asset_receiver=Txn.sender, asset_amount=listing.deposited
    frame_dig -2
    txn Sender
    frame_dig 1
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // marketplace_demo/marketplace_with_immutable_struct.py:196
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_next_txn@5

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.withdraw_next_txn@5:
    // marketplace_demo/marketplace_with_immutable_struct.py:196-198
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=Txn.sender, asset_amount=listing.deposited
    // ).submit()
    itxn_submit
    retsub


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid(owner: bytes, asset: uint64, nonce: uint64, bid_pay: uint64, quantity: uint64, unitary_price: uint64) -> void:
test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid:
    // marketplace_demo/marketplace_with_immutable_struct.py:200-209
    // @arc4.abimethod
    // def bid(
    //     self,
    //     owner: Account,
    //     asset: Asset,
    //     nonce: UInt64,
    //     bid_pay: gtxn.PaymentTransaction,
    //     quantity: UInt64,
    //     unitary_price: UInt64,
    // ) -> None:
    proto 6 0
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid_block@0

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:210
    // key = ListingKey(owner=owner, asset=asset.id, nonce=nonce)
    frame_dig -6
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -5
    itob
    concat
    frame_dig -4
    itob
    concat
    dup
    // marketplace_demo/marketplace_with_immutable_struct.py:212
    // listing = self.listings[key]
    bytec_1 // 0x6c697374696e6773
    uncover 1
    concat
    box_get
    assert // check self.listings entry exists
    dup
    // marketplace_demo/marketplace_with_immutable_struct.py:213
    // if listing.bidder != Account():
    pushint 16 // 16
    intc_3 // 32
    extract3
    global ZeroAddress
    !=
    bz test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid_after_if_else@3
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid_if_body@1

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid_if_body@1:
    // marketplace_demo/marketplace_with_immutable_struct.py:214
    // assert unitary_price > listing.bidUnitaryPrice
    frame_dig 1
    dup
    pushint 56 // 56
    intc_0 // 8
    extract3
    btoi
    frame_dig -1
    <
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:217
    // listing.bid, listing.bidUnitaryPrice, asset.decimals
    dup
    pushint 48 // 48
    intc_0 // 8
    extract3
    btoi
    cover 1
    dup
    pushint 56 // 56
    intc_0 // 8
    extract3
    btoi
    frame_dig -5
    asset_params_get AssetDecimals
    assert // asset exists
    // marketplace_demo/marketplace_with_immutable_struct.py:216-218
    // current_bid_amount = self.quantity_price(
    //     listing.bid, listing.bidUnitaryPrice, asset.decimals
    // )
    uncover 3
    uncover 2
    uncover 2
    callsub quantity_price
    // marketplace_demo/marketplace_with_immutable_struct.py:220
    // itxn.Payment(receiver=listing.bidder, amount=current_bid_amount).submit()
    itxn_begin
    uncover 1
    pushint 16 // 16
    intc_3 // 32
    extract3
    uncover 1
    itxn_field Amount
    itxn_field Receiver
    intc_2 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid_next_txn@2

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid_next_txn@2:
    // marketplace_demo/marketplace_with_immutable_struct.py:220
    // itxn.Payment(receiver=listing.bidder, amount=current_bid_amount).submit()
    itxn_submit
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid_after_if_else@3

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.bid_after_if_else@3:
    // marketplace_demo/marketplace_with_immutable_struct.py:222
    // amount_to_be_bid = self.quantity_price(quantity, unitary_price, asset.decimals)
    frame_dig -5
    asset_params_get AssetDecimals
    assert // asset exists
    frame_dig -2
    frame_dig -1
    uncover 2
    callsub quantity_price
    // marketplace_demo/marketplace_with_immutable_struct.py:224
    // assert bid_pay.sender == Txn.sender
    frame_dig -3
    gtxns Sender
    txn Sender
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:225
    // assert bid_pay.receiver == Global.current_application_address
    frame_dig -3
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:226
    // assert bid_pay.amount == amount_to_be_bid
    frame_dig -3
    gtxns Amount
    ==
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:229
    // deposited=listing.deposited,
    frame_dig 1
    dup
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:230
    // unitaryPrice=listing.unitaryPrice,
    intc_0 // 8
    intc_0 // 8
    extract3
    btoi
    // marketplace_demo/marketplace_with_immutable_struct.py:231
    // bidder=Txn.sender,
    txn Sender
    cover 2
    // marketplace_demo/marketplace_with_immutable_struct.py:228-234
    // self.listings[key] = ListingValue(
    //     deposited=listing.deposited,
    //     unitaryPrice=listing.unitaryPrice,
    //     bidder=Txn.sender,
    //     bid=quantity,
    //     bidUnitaryPrice=unitary_price,
    // )
    uncover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    uncover 1
    concat
    frame_dig -2
    itob
    concat
    frame_dig -1
    itob
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:228
    // self.listings[key] = ListingValue(
    bytec_1 // 0x6c697374696e6773
    frame_dig 0
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:228-234
    // self.listings[key] = ListingValue(
    //     deposited=listing.deposited,
    //     unitaryPrice=listing.unitaryPrice,
    //     bidder=Txn.sender,
    //     bid=quantity,
    //     bidUnitaryPrice=unitary_price,
    // )
    uncover 1
    box_put
    retsub


// test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid(asset: uint64, nonce: uint64) -> void:
test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid:
    // marketplace_demo/marketplace_with_immutable_struct.py:236-237
    // @arc4.abimethod(name="acceptBid")
    // def accept_bid(self, asset: Asset, nonce: UInt64) -> None:
    proto 2 0
    bytec_0 // ""
    bytec_0 // ""
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_block@0

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_block@0:
    // marketplace_demo/marketplace_with_immutable_struct.py:238
    // key = ListingKey(owner=Txn.sender, asset=asset.id, nonce=nonce)
    txn Sender
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -2
    itob
    concat
    frame_dig -1
    itob
    concat
    dup
    // marketplace_demo/marketplace_with_immutable_struct.py:240
    // listing = self.listings[key]
    bytec_1 // 0x6c697374696e6773
    uncover 1
    concat
    box_get
    assert // check self.listings entry exists
    dupn 2
    // marketplace_demo/marketplace_with_immutable_struct.py:241
    // assert listing.bidder != Account()
    pushint 16 // 16
    intc_3 // 32
    extract3
    global ZeroAddress
    !=
    assert
    // marketplace_demo/marketplace_with_immutable_struct.py:243
    // min_quantity = listing.deposited if listing.deposited < listing.bid else listing.bid
    dup
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    cover 1
    pushint 48 // 48
    intc_0 // 8
    extract3
    btoi
    <
    bz test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_ternary_false@2
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_ternary_true@1

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_ternary_true@1:
    // marketplace_demo/marketplace_with_immutable_struct.py:243
    // min_quantity = listing.deposited if listing.deposited < listing.bid else listing.bid
    frame_dig 3
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    frame_bury 1
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_ternary_merge@3

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_ternary_merge@3:
    // marketplace_demo/marketplace_with_immutable_struct.py:243
    // min_quantity = listing.deposited if listing.deposited < listing.bid else listing.bid
    frame_dig 1
    dup
    frame_bury 0
    // marketplace_demo/marketplace_with_immutable_struct.py:246
    // min_quantity, listing.bidUnitaryPrice, asset.decimals
    frame_dig 3
    pushint 56 // 56
    intc_0 // 8
    extract3
    btoi
    frame_dig -2
    asset_params_get AssetDecimals
    assert // asset exists
    // marketplace_demo/marketplace_with_immutable_struct.py:245-247
    // best_bid_amount = self.quantity_price(
    //     min_quantity, listing.bidUnitaryPrice, asset.decimals
    // )
    uncover 2
    uncover 2
    uncover 2
    callsub quantity_price
    // marketplace_demo/marketplace_with_immutable_struct.py:249
    // itxn.Payment(receiver=Txn.sender, amount=best_bid_amount).submit()
    itxn_begin
    txn Sender
    cover 1
    itxn_field Amount
    itxn_field Receiver
    intc_2 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_next_txn@4

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_next_txn@4:
    // marketplace_demo/marketplace_with_immutable_struct.py:249
    // itxn.Payment(receiver=Txn.sender, amount=best_bid_amount).submit()
    itxn_submit
    // marketplace_demo/marketplace_with_immutable_struct.py:251-253
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=listing.bidder, asset_amount=min_quantity
    // ).submit()
    itxn_begin
    // marketplace_demo/marketplace_with_immutable_struct.py:252
    // xfer_asset=asset, asset_receiver=listing.bidder, asset_amount=min_quantity
    frame_dig -2
    frame_dig 3
    pushint 16 // 16
    intc_3 // 32
    extract3
    frame_dig 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // marketplace_demo/marketplace_with_immutable_struct.py:251
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_next_txn@5

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_next_txn@5:
    // marketplace_demo/marketplace_with_immutable_struct.py:251-253
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=listing.bidder, asset_amount=min_quantity
    // ).submit()
    itxn_submit
    // marketplace_demo/marketplace_with_immutable_struct.py:256
    // bidder=listing.bidder,
    frame_dig 3
    dup
    pushint 16 // 16
    intc_3 // 32
    extract3
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:257
    // bidUnitaryPrice=listing.bidUnitaryPrice,
    dup
    pushint 56 // 56
    intc_0 // 8
    extract3
    btoi
    cover 2
    // marketplace_demo/marketplace_with_immutable_struct.py:258
    // unitaryPrice=listing.unitaryPrice,
    dup
    intc_0 // 8
    intc_0 // 8
    extract3
    btoi
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:259
    // deposited=listing.deposited - min_quantity,
    dup
    intc_1 // 0
    intc_0 // 8
    extract3
    btoi
    frame_dig 0
    dup
    cover 3
    -
    cover 2
    // marketplace_demo/marketplace_with_immutable_struct.py:260
    // bid=listing.bid - min_quantity,
    pushint 48 // 48
    intc_0 // 8
    extract3
    btoi
    uncover 1
    -
    cover 1
    // marketplace_demo/marketplace_with_immutable_struct.py:255-261
    // self.listings[key] = ListingValue(
    //     bidder=listing.bidder,
    //     bidUnitaryPrice=listing.bidUnitaryPrice,
    //     unitaryPrice=listing.unitaryPrice,
    //     deposited=listing.deposited - min_quantity,
    //     bid=listing.bid - min_quantity,
    // )
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 2
    itob
    concat
    uncover 2
    concat
    uncover 1
    itob
    concat
    uncover 1
    itob
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:255
    // self.listings[key] = ListingValue(
    bytec_1 // 0x6c697374696e6773
    frame_dig 2
    concat
    // marketplace_demo/marketplace_with_immutable_struct.py:255-261
    // self.listings[key] = ListingValue(
    //     bidder=listing.bidder,
    //     bidUnitaryPrice=listing.bidUnitaryPrice,
    //     unitaryPrice=listing.unitaryPrice,
    //     deposited=listing.deposited - min_quantity,
    //     bid=listing.bid - min_quantity,
    // )
    uncover 1
    box_put
    retsub

test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_ternary_false@2:
    // marketplace_demo/marketplace_with_immutable_struct.py:243
    // min_quantity = listing.deposited if listing.deposited < listing.bid else listing.bid
    frame_dig 3
    pushint 48 // 48
    intc_0 // 8
    extract3
    btoi
    frame_bury 1
    b test_cases.marketplace_demo.marketplace_with_immutable_struct.DigitalMarketplaceWithImmStruct.accept_bid_ternary_merge@3
