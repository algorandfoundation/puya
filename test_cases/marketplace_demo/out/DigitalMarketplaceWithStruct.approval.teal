#pragma version 10
#pragma typetrack false

// test_cases.marketplace_demo.marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 4 10 50500
    bytecblock 0x6c697374696e6773
    txn ApplicationID
    bnz after_if_else@2
    // marketplace_demo/marketplace_with_mutable_struct.py:39
    // log("init")
    pushbytes "init"
    log

after_if_else@2:
    // marketplace_demo/marketplace_with_mutable_struct.py:37
    // class DigitalMarketplaceWithStruct(arc4.ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // marketplace_demo/marketplace_with_mutable_struct.py:37
    // class DigitalMarketplaceWithStruct(arc4.ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_NoOp:
    // marketplace_demo/marketplace_with_mutable_struct.py:37
    // class DigitalMarketplaceWithStruct(arc4.ARC4Contract):
    txn NumAppArgs
    !
    return // on error: this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // marketplace_demo/marketplace_with_mutable_struct.py:37
    // class DigitalMarketplaceWithStruct(arc4.ARC4Contract):
    pushbytess 0xd98ef6a9 0x6a4e7fca 0x12f08c98 0x9b4b8234 0x4d8b23d8 0x52ac5df7 0xe3aeb25c 0x3234b711 0xcc826346 // method "getListingsMbr()uint64", method "allowAsset(pay,uint64)void", method "firstDeposit(pay,axfer,uint64,uint64)void", method "deposit(axfer,uint64)void", method "setPrice(uint64,uint64,uint64)void", method "buy(address,uint64,uint64,pay,uint64)void", method "withdraw(uint64,uint64)void", method "bid(address,uint64,uint64,pay,uint64,uint64)void", method "acceptBid(uint64,uint64)void"
    txna ApplicationArgs 0
    match getListingsMbr_route@5 allow_asset first_deposit deposit set_price buy withdraw bid accept_bid
    err // this contract does not implement the given ABI method for call NoOp

getListingsMbr_route@5:
    // marketplace_demo/marketplace_with_mutable_struct.py:78
    // @arc4.abimethod(readonly=True, name="getListingsMbr")
    pushbytes 0x151f7c75000000000000c544
    log
    intc_0 // 1
    return


// test_cases.marketplace_demo.marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.allow_asset[routing]() -> void:
allow_asset:
    // marketplace_demo/marketplace_with_mutable_struct.py:82
    // @arc4.abimethod(name="allowAsset")
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // marketplace_demo/marketplace_with_mutable_struct.py:84
    // assert not Global.current_application_address.is_opted_in(asset)
    global CurrentApplicationAddress
    dig 1
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:86
    // assert mbr_pay.receiver == Global.current_application_address
    dig 1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:87
    // assert mbr_pay.amount == Global.asset_opt_in_min_balance
    swap
    gtxns Amount
    global AssetOptInMinBalance
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:89-91
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=Global.current_application_address, asset_amount=0
    // ).submit()
    itxn_begin
    // marketplace_demo/marketplace_with_mutable_struct.py:90
    // xfer_asset=asset, asset_receiver=Global.current_application_address, asset_amount=0
    global CurrentApplicationAddress
    intc_1 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // marketplace_demo/marketplace_with_mutable_struct.py:89
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // marketplace_demo/marketplace_with_mutable_struct.py:89-91
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=Global.current_application_address, asset_amount=0
    // ).submit()
    itxn_submit
    // marketplace_demo/marketplace_with_mutable_struct.py:82
    // @arc4.abimethod(name="allowAsset")
    intc_0 // 1
    return


// test_cases.marketplace_demo.marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.first_deposit[routing]() -> void:
first_deposit:
    // marketplace_demo/marketplace_with_mutable_struct.py:93
    // @arc4.abimethod(name="firstDeposit")
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // marketplace_demo/marketplace_with_mutable_struct.py:101
    // assert mbr_pay.sender == Txn.sender
    dig 3
    gtxns Sender
    txn Sender
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:102
    // assert mbr_pay.receiver == Global.current_application_address
    dig 3
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:103
    // assert mbr_pay.amount == self.listings_box_mbr()
    uncover 3
    gtxns Amount
    // marketplace_demo/marketplace_with_mutable_struct.py:44-65
    // return UInt64(
    //     2_500
    //     +
    //     # fmt: off
    //     # Key length
    //     (
    //         8
    //         + 32
    //         + 8
    //         + 8
    //         +
    //         # Value length
    //         8
    //         + 8
    //         + 32
    //         + 8
    //         + 8
    //     )
    //     *
    //     # fmt: on
    //     400
    // )
    intc 4 // 50500
    // marketplace_demo/marketplace_with_mutable_struct.py:103
    // assert mbr_pay.amount == self.listings_box_mbr()
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:105
    // key = ListingKey(owner=Txn.sender, asset=xfer.xfer_asset.id, nonce=nonce)
    txn Sender
    dig 3
    gtxns XferAsset
    itob
    concat
    swap
    itob
    concat
    // marketplace_demo/marketplace_with_mutable_struct.py:106
    // assert key not in self.listings
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    box_len
    bury 1
    !
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:108
    // assert xfer.sender == Txn.sender
    dig 2
    gtxns Sender
    txn Sender
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:109
    // assert xfer.asset_receiver == Global.current_application_address
    dig 2
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:110
    // assert xfer.asset_amount > 0
    uncover 2
    gtxns AssetAmount
    dup
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:115
    // bidder=Account(),
    global ZeroAddress
    // marketplace_demo/marketplace_with_mutable_struct.py:112-118
    // self.listings[key] = ListingValue(
    //     deposited=xfer.asset_amount,
    //     unitaryPrice=unitary_price,
    //     bidder=Account(),
    //     bid=UInt64(),
    //     bidUnitaryPrice=UInt64(),
    // )
    swap
    itob
    uncover 3
    itob
    concat
    swap
    concat
    // marketplace_demo/marketplace_with_mutable_struct.py:116
    // bid=UInt64(),
    intc_1 // 0
    // marketplace_demo/marketplace_with_mutable_struct.py:112-118
    // self.listings[key] = ListingValue(
    //     deposited=xfer.asset_amount,
    //     unitaryPrice=unitary_price,
    //     bidder=Account(),
    //     bid=UInt64(),
    //     bidUnitaryPrice=UInt64(),
    // )
    itob
    swap
    dig 1
    concat
    swap
    concat
    box_put
    // marketplace_demo/marketplace_with_mutable_struct.py:93
    // @arc4.abimethod(name="firstDeposit")
    intc_0 // 1
    return


// test_cases.marketplace_demo.marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.deposit[routing]() -> void:
deposit:
    // marketplace_demo/marketplace_with_mutable_struct.py:120
    // @arc4.abimethod
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    // marketplace_demo/marketplace_with_mutable_struct.py:122
    // key = ListingKey(owner=Txn.sender, asset=xfer.xfer_asset.id, nonce=nonce)
    txn Sender
    dig 2
    gtxns XferAsset
    itob
    concat
    swap
    itob
    concat
    // marketplace_demo/marketplace_with_mutable_struct.py:124
    // assert xfer.sender == Txn.sender
    dig 1
    gtxns Sender
    txn Sender
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:125
    // assert xfer.asset_receiver == Global.current_application_address
    dig 1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:126
    // assert xfer.asset_amount > 0
    swap
    gtxns AssetAmount
    dup
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:128
    // existing = self.listings[key].copy()  # only mutable structs are copied
    bytec_0 // 0x6c697374696e6773
    uncover 2
    concat
    dup
    box_get
    assert // check self.listings entry exists
    // marketplace_demo/marketplace_with_mutable_struct.py:130
    // bid=existing.bid,
    dup
    extract 48 8
    // marketplace_demo/marketplace_with_mutable_struct.py:131
    // bidUnitaryPrice=existing.bidUnitaryPrice,
    dig 1
    extract 56 8
    // marketplace_demo/marketplace_with_mutable_struct.py:132
    // bidder=existing.bidder,
    dig 2
    extract 16 32
    // marketplace_demo/marketplace_with_mutable_struct.py:133
    // unitaryPrice=existing.unitaryPrice,
    dig 3
    extract 8 8
    // marketplace_demo/marketplace_with_mutable_struct.py:134
    // deposited=existing.deposited + xfer.asset_amount,
    uncover 4
    intc_1 // 0
    extract_uint64
    uncover 6
    +
    // marketplace_demo/marketplace_with_mutable_struct.py:129-135
    // self.listings[key] = ListingValue(
    //     bid=existing.bid,
    //     bidUnitaryPrice=existing.bidUnitaryPrice,
    //     bidder=existing.bidder,
    //     unitaryPrice=existing.unitaryPrice,
    //     deposited=existing.deposited + xfer.asset_amount,
    // )
    itob
    swap
    concat
    swap
    concat
    uncover 2
    concat
    swap
    concat
    box_put
    // marketplace_demo/marketplace_with_mutable_struct.py:120
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.marketplace_demo.marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.set_price[routing]() -> void:
set_price:
    // marketplace_demo/marketplace_with_mutable_struct.py:137
    // @arc4.abimethod(name="setPrice")
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // marketplace_demo/marketplace_with_mutable_struct.py:139
    // key = ListingKey(owner=Txn.sender, asset=asset.id, nonce=nonce)
    txn Sender
    uncover 3
    itob
    concat
    uncover 2
    itob
    concat
    // marketplace_demo/marketplace_with_mutable_struct.py:141
    // existing = self.listings[key].copy()
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    box_get
    assert // check self.listings entry exists
    // marketplace_demo/marketplace_with_mutable_struct.py:143
    // bid=existing.bid,
    dup
    extract 48 8
    // marketplace_demo/marketplace_with_mutable_struct.py:144
    // bidUnitaryPrice=existing.bidUnitaryPrice,
    dig 1
    extract 56 8
    // marketplace_demo/marketplace_with_mutable_struct.py:145
    // bidder=existing.bidder,
    dig 2
    extract 16 32
    // marketplace_demo/marketplace_with_mutable_struct.py:146
    // deposited=existing.deposited,
    uncover 3
    extract 0 8
    // marketplace_demo/marketplace_with_mutable_struct.py:142-148
    // self.listings[key] = ListingValue(
    //     bid=existing.bid,
    //     bidUnitaryPrice=existing.bidUnitaryPrice,
    //     bidder=existing.bidder,
    //     deposited=existing.deposited,
    //     unitaryPrice=unitary_price,
    // )
    uncover 5
    itob
    concat
    swap
    concat
    uncover 2
    concat
    swap
    concat
    box_put
    // marketplace_demo/marketplace_with_mutable_struct.py:137
    // @arc4.abimethod(name="setPrice")
    intc_0 // 1
    return


// test_cases.marketplace_demo.marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.buy[routing]() -> void:
buy:
    // marketplace_demo/marketplace_with_mutable_struct.py:150
    // @arc4.abimethod
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 4
    btoi
    // marketplace_demo/marketplace_with_mutable_struct.py:159
    // key = ListingKey(owner=owner, asset=asset.id, nonce=nonce)
    dig 3
    itob
    dig 5
    swap
    concat
    uncover 3
    itob
    concat
    // marketplace_demo/marketplace_with_mutable_struct.py:161
    // listing = self.listings[key].copy()
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    box_get
    assert // check self.listings entry exists
    // marketplace_demo/marketplace_with_mutable_struct.py:163
    // amount_to_be_paid = self.quantity_price(quantity, listing.unitaryPrice, asset.decimals)
    dup
    pushint 8 // 8
    extract_uint64
    dig 5
    asset_params_get AssetDecimals
    assert // asset exists
    // marketplace_demo/marketplace_with_mutable_struct.py:69
    // amount_not_scaled_high, amount_not_scaled_low = op.mulw(price, quantity)
    dig 1
    dig 5
    mulw
    // marketplace_demo/marketplace_with_mutable_struct.py:70
    // scaling_factor_high, scaling_factor_low = op.expw(10, asset_decimals)
    intc_3 // 10
    uncover 3
    expw
    // marketplace_demo/marketplace_with_mutable_struct.py:71-73
    // _quotient_high, amount_to_be_paid, _remainder_high, _remainder_low = op.divmodw(
    //     amount_not_scaled_high, amount_not_scaled_low, scaling_factor_high, scaling_factor_low
    // )
    divmodw
    popn 2
    swap
    // marketplace_demo/marketplace_with_mutable_struct.py:74
    // assert _quotient_high == 0
    !
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:165
    // assert buy_pay.sender == Txn.sender
    dig 5
    gtxns Sender
    txn Sender
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:166
    // assert buy_pay.receiver == owner
    dig 5
    gtxns Receiver
    uncover 8
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:167
    // assert buy_pay.amount == amount_to_be_paid
    uncover 5
    gtxns Amount
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:170
    // bid=listing.bid,
    dig 1
    extract 48 8
    // marketplace_demo/marketplace_with_mutable_struct.py:171
    // bidUnitaryPrice=listing.bidUnitaryPrice,
    dig 2
    extract 56 8
    // marketplace_demo/marketplace_with_mutable_struct.py:172
    // bidder=listing.bidder,
    dig 3
    extract 16 32
    // marketplace_demo/marketplace_with_mutable_struct.py:174
    // deposited=listing.deposited - quantity,
    uncover 4
    intc_1 // 0
    extract_uint64
    dig 6
    -
    // marketplace_demo/marketplace_with_mutable_struct.py:169-175
    // self.listings[key] = ListingValue(
    //     bid=listing.bid,
    //     bidUnitaryPrice=listing.bidUnitaryPrice,
    //     bidder=listing.bidder,
    //     unitaryPrice=listing.unitaryPrice,
    //     deposited=listing.deposited - quantity,
    // )
    itob
    uncover 4
    itob
    concat
    swap
    concat
    uncover 2
    concat
    swap
    concat
    box_put
    // marketplace_demo/marketplace_with_mutable_struct.py:177-179
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=Txn.sender, asset_amount=quantity
    // ).submit()
    itxn_begin
    // marketplace_demo/marketplace_with_mutable_struct.py:178
    // xfer_asset=asset, asset_receiver=Txn.sender, asset_amount=quantity
    txn Sender
    itxn_field AssetReceiver
    itxn_field AssetAmount
    itxn_field XferAsset
    // marketplace_demo/marketplace_with_mutable_struct.py:177
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // marketplace_demo/marketplace_with_mutable_struct.py:177-179
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=Txn.sender, asset_amount=quantity
    // ).submit()
    itxn_submit
    // marketplace_demo/marketplace_with_mutable_struct.py:150
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.marketplace_demo.marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.withdraw[routing]() -> void:
withdraw:
    // marketplace_demo/marketplace_with_mutable_struct.py:181
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    dup
    txna ApplicationArgs 2
    btoi
    // marketplace_demo/marketplace_with_mutable_struct.py:183
    // key = ListingKey(owner=Txn.sender, asset=asset.id, nonce=nonce)
    txn Sender
    uncover 2
    itob
    concat
    swap
    itob
    concat
    // marketplace_demo/marketplace_with_mutable_struct.py:185
    // listing = self.listings[key].copy()
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    box_get
    swap
    dup
    uncover 2
    assert // check self.listings entry exists
    // marketplace_demo/marketplace_with_mutable_struct.py:186
    // if listing.bidder != Account():
    extract 16 32
    dup
    global ZeroAddress
    !=
    bz withdraw_after_if_else@4
    // marketplace_demo/marketplace_with_mutable_struct.py:188
    // listing.bid, listing.bidUnitaryPrice, asset.decimals
    dig 1
    dup
    pushint 48 // 48
    extract_uint64
    swap
    pushint 56 // 56
    extract_uint64
    dig 5
    asset_params_get AssetDecimals
    assert // asset exists
    // marketplace_demo/marketplace_with_mutable_struct.py:69
    // amount_not_scaled_high, amount_not_scaled_low = op.mulw(price, quantity)
    swap
    uncover 2
    mulw
    // marketplace_demo/marketplace_with_mutable_struct.py:70
    // scaling_factor_high, scaling_factor_low = op.expw(10, asset_decimals)
    intc_3 // 10
    uncover 3
    expw
    // marketplace_demo/marketplace_with_mutable_struct.py:71-73
    // _quotient_high, amount_to_be_paid, _remainder_high, _remainder_low = op.divmodw(
    //     amount_not_scaled_high, amount_not_scaled_low, scaling_factor_high, scaling_factor_low
    // )
    divmodw
    popn 2
    swap
    // marketplace_demo/marketplace_with_mutable_struct.py:74
    // assert _quotient_high == 0
    !
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:190
    // itxn.Payment(receiver=listing.bidder, amount=current_bid_deposit).submit()
    itxn_begin
    itxn_field Amount
    dup
    itxn_field Receiver
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit

withdraw_after_if_else@4:
    // marketplace_demo/marketplace_with_mutable_struct.py:192
    // del self.listings[key]
    dig 2
    box_del
    pop
    // marketplace_demo/marketplace_with_mutable_struct.py:194
    // itxn.Payment(receiver=Txn.sender, amount=self.listings_box_mbr()).submit()
    itxn_begin
    txn Sender
    // marketplace_demo/marketplace_with_mutable_struct.py:44-65
    // return UInt64(
    //     2_500
    //     +
    //     # fmt: off
    //     # Key length
    //     (
    //         8
    //         + 32
    //         + 8
    //         + 8
    //         +
    //         # Value length
    //         8
    //         + 8
    //         + 32
    //         + 8
    //         + 8
    //     )
    //     *
    //     # fmt: on
    //     400
    // )
    intc 4 // 50500
    itxn_field Amount
    itxn_field Receiver
    // marketplace_demo/marketplace_with_mutable_struct.py:194
    // itxn.Payment(receiver=Txn.sender, amount=self.listings_box_mbr()).submit()
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    // marketplace_demo/marketplace_with_mutable_struct.py:196-198
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=Txn.sender, asset_amount=listing.deposited
    // ).submit()
    itxn_begin
    // marketplace_demo/marketplace_with_mutable_struct.py:197
    // xfer_asset=asset, asset_receiver=Txn.sender, asset_amount=listing.deposited
    txn Sender
    dig 2
    intc_1 // 0
    extract_uint64
    itxn_field AssetAmount
    itxn_field AssetReceiver
    dig 3
    itxn_field XferAsset
    // marketplace_demo/marketplace_with_mutable_struct.py:196
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // marketplace_demo/marketplace_with_mutable_struct.py:196-198
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=Txn.sender, asset_amount=listing.deposited
    // ).submit()
    itxn_submit
    // marketplace_demo/marketplace_with_mutable_struct.py:181
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.marketplace_demo.marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.bid[routing]() -> void:
bid:
    // marketplace_demo/marketplace_with_mutable_struct.py:200
    // @arc4.abimethod
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    dup
    cover 2
    txna ApplicationArgs 3
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    cover 4
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 4
    btoi
    cover 3
    txna ApplicationArgs 5
    btoi
    cover 3
    // marketplace_demo/marketplace_with_mutable_struct.py:210
    // key = ListingKey(owner=owner, asset=asset.id, nonce=nonce)
    swap
    itob
    uncover 2
    swap
    concat
    swap
    itob
    concat
    // marketplace_demo/marketplace_with_mutable_struct.py:212
    // listing = self.listings[key].copy()
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    box_get
    swap
    dup
    uncover 2
    assert // check self.listings entry exists
    // marketplace_demo/marketplace_with_mutable_struct.py:213
    // if listing.bidder != Account():
    extract 16 32
    dup
    global ZeroAddress
    !=
    bz bid_after_if_else@4
    // marketplace_demo/marketplace_with_mutable_struct.py:214
    // assert unitary_price > listing.bidUnitaryPrice
    dig 1
    dup
    pushint 56 // 56
    extract_uint64
    dig 5
    dig 1
    >
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:217
    // listing.bid, listing.bidUnitaryPrice, asset.decimals
    swap
    pushint 48 // 48
    extract_uint64
    dig 8
    asset_params_get AssetDecimals
    assert // asset exists
    // marketplace_demo/marketplace_with_mutable_struct.py:69
    // amount_not_scaled_high, amount_not_scaled_low = op.mulw(price, quantity)
    cover 2
    mulw
    // marketplace_demo/marketplace_with_mutable_struct.py:70
    // scaling_factor_high, scaling_factor_low = op.expw(10, asset_decimals)
    intc_3 // 10
    uncover 3
    expw
    // marketplace_demo/marketplace_with_mutable_struct.py:71-73
    // _quotient_high, amount_to_be_paid, _remainder_high, _remainder_low = op.divmodw(
    //     amount_not_scaled_high, amount_not_scaled_low, scaling_factor_high, scaling_factor_low
    // )
    divmodw
    popn 2
    swap
    // marketplace_demo/marketplace_with_mutable_struct.py:74
    // assert _quotient_high == 0
    !
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:220
    // itxn.Payment(receiver=listing.bidder, amount=current_bid_amount).submit()
    itxn_begin
    itxn_field Amount
    dup
    itxn_field Receiver
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit

bid_after_if_else@4:
    // marketplace_demo/marketplace_with_mutable_struct.py:222
    // amount_to_be_bid = self.quantity_price(quantity, unitary_price, asset.decimals)
    dig 6
    asset_params_get AssetDecimals
    assert // asset exists
    // marketplace_demo/marketplace_with_mutable_struct.py:69
    // amount_not_scaled_high, amount_not_scaled_low = op.mulw(price, quantity)
    dig 4
    dup
    cover 2
    dig 7
    dup
    cover 3
    mulw
    // marketplace_demo/marketplace_with_mutable_struct.py:70
    // scaling_factor_high, scaling_factor_low = op.expw(10, asset_decimals)
    intc_3 // 10
    uncover 3
    expw
    // marketplace_demo/marketplace_with_mutable_struct.py:71-73
    // _quotient_high, amount_to_be_paid, _remainder_high, _remainder_low = op.divmodw(
    //     amount_not_scaled_high, amount_not_scaled_low, scaling_factor_high, scaling_factor_low
    // )
    divmodw
    popn 2
    swap
    // marketplace_demo/marketplace_with_mutable_struct.py:74
    // assert _quotient_high == 0
    !
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:224
    // assert bid_pay.sender == Txn.sender
    dig 8
    dup
    gtxns Sender
    txn Sender
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:225
    // assert bid_pay.receiver == Global.current_application_address
    dup
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:226
    // assert bid_pay.amount == amount_to_be_bid
    gtxns Amount
    ==
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:229
    // deposited=listing.deposited,
    dig 3
    dup
    extract 0 8
    // marketplace_demo/marketplace_with_mutable_struct.py:230
    // unitaryPrice=listing.unitaryPrice,
    swap
    extract 8 8
    // marketplace_demo/marketplace_with_mutable_struct.py:231
    // bidder=Txn.sender,
    txn Sender
    // marketplace_demo/marketplace_with_mutable_struct.py:228-234
    // self.listings[key] = ListingValue(
    //     deposited=listing.deposited,
    //     unitaryPrice=listing.unitaryPrice,
    //     bidder=Txn.sender,
    //     bid=quantity,
    //     bidUnitaryPrice=unitary_price,
    // )
    cover 2
    concat
    swap
    concat
    swap
    itob
    concat
    swap
    itob
    concat
    dig 3
    swap
    box_put
    // marketplace_demo/marketplace_with_mutable_struct.py:200
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.marketplace_demo.marketplace_with_mutable_struct.DigitalMarketplaceWithStruct.accept_bid[routing]() -> void:
accept_bid:
    // marketplace_demo/marketplace_with_mutable_struct.py:236
    // @arc4.abimethod(name="acceptBid")
    txna ApplicationArgs 1
    btoi
    dup
    txna ApplicationArgs 2
    btoi
    // marketplace_demo/marketplace_with_mutable_struct.py:238
    // key = ListingKey(owner=Txn.sender, asset=asset.id, nonce=nonce)
    txn Sender
    uncover 2
    itob
    concat
    swap
    itob
    concat
    // marketplace_demo/marketplace_with_mutable_struct.py:240
    // listing = self.listings[key].copy()
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    box_get
    swap
    dup
    uncover 2
    assert // check self.listings entry exists
    // marketplace_demo/marketplace_with_mutable_struct.py:241
    // assert listing.bidder != Account()
    dup
    extract 16 32
    dup
    cover 2
    global ZeroAddress
    !=
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:243
    // min_quantity = listing.deposited if listing.deposited < listing.bid else listing.bid
    dup
    intc_1 // 0
    extract_uint64
    dup
    uncover 2
    pushint 48 // 48
    extract_uint64
    dup
    cover 2
    <
    bz accept_bid_ternary_false@3
    dig 1

accept_bid_ternary_merge@4:
    // marketplace_demo/marketplace_with_mutable_struct.py:246
    // min_quantity, listing.bidUnitaryPrice, asset.decimals
    dig 4
    dup
    pushint 56 // 56
    extract_uint64
    dig 8
    dup
    cover 2
    asset_params_get AssetDecimals
    assert // asset exists
    // marketplace_demo/marketplace_with_mutable_struct.py:69
    // amount_not_scaled_high, amount_not_scaled_low = op.mulw(price, quantity)
    dig 1
    uncover 5
    dup
    cover 3
    mulw
    // marketplace_demo/marketplace_with_mutable_struct.py:70
    // scaling_factor_high, scaling_factor_low = op.expw(10, asset_decimals)
    intc_3 // 10
    uncover 3
    expw
    // marketplace_demo/marketplace_with_mutable_struct.py:71-73
    // _quotient_high, amount_to_be_paid, _remainder_high, _remainder_low = op.divmodw(
    //     amount_not_scaled_high, amount_not_scaled_low, scaling_factor_high, scaling_factor_low
    // )
    divmodw
    popn 2
    swap
    // marketplace_demo/marketplace_with_mutable_struct.py:74
    // assert _quotient_high == 0
    !
    assert
    // marketplace_demo/marketplace_with_mutable_struct.py:249
    // itxn.Payment(receiver=Txn.sender, amount=best_bid_amount).submit()
    itxn_begin
    txn Sender
    itxn_field Receiver
    itxn_field Amount
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    // marketplace_demo/marketplace_with_mutable_struct.py:251-253
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=listing.bidder, asset_amount=min_quantity
    // ).submit()
    itxn_begin
    dup
    itxn_field AssetAmount
    dig 6
    dup
    cover 2
    itxn_field AssetReceiver
    uncover 3
    itxn_field XferAsset
    // marketplace_demo/marketplace_with_mutable_struct.py:251
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // marketplace_demo/marketplace_with_mutable_struct.py:251-253
    // itxn.AssetTransfer(
    //     xfer_asset=asset, asset_receiver=listing.bidder, asset_amount=min_quantity
    // ).submit()
    itxn_submit
    // marketplace_demo/marketplace_with_mutable_struct.py:258
    // unitaryPrice=listing.unitaryPrice,
    uncover 3
    extract 8 8
    // marketplace_demo/marketplace_with_mutable_struct.py:259
    // deposited=listing.deposited - min_quantity,
    dig 5
    dig 2
    -
    // marketplace_demo/marketplace_with_mutable_struct.py:260
    // bid=listing.bid - min_quantity,
    dig 5
    uncover 3
    -
    // marketplace_demo/marketplace_with_mutable_struct.py:255-261
    // self.listings[key] = ListingValue(
    //     bidder=listing.bidder,
    //     bidUnitaryPrice=listing.bidUnitaryPrice,
    //     unitaryPrice=listing.unitaryPrice,
    //     deposited=listing.deposited - min_quantity,
    //     bid=listing.bid - min_quantity,
    // )
    swap
    itob
    uncover 2
    concat
    uncover 2
    concat
    swap
    itob
    concat
    swap
    itob
    concat
    dig 5
    swap
    box_put
    // marketplace_demo/marketplace_with_mutable_struct.py:236
    // @arc4.abimethod(name="acceptBid")
    intc_0 // 1
    return

accept_bid_ternary_false@3:
    dup
    b accept_bid_ternary_merge@4
