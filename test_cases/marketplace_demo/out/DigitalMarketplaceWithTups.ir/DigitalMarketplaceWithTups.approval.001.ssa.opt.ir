main test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (log "init")
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bool = test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__()
        return tmp%0#1

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__() -> bool:
    block@0: // L38
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%0#0 ? block@1 : block@16
    block@1: // abi_routing_L38
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%4#0 ? block@2 : block@15
    block@2: // call_NoOp_L38
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "getListingsMbr()uint64" => block@3, method "allowAsset(pay,uint64)void" => block@4, method "firstDeposit(pay,axfer,uint64,uint64)void" => block@5, method "deposit(axfer,uint64)void" => block@6, method "setPrice(uint64,uint64,uint64)void" => block@7, method "buy(address,uint64,uint64,pay,uint64)void" => block@8, method "withdraw(uint64,uint64)void" => block@9, method "bid(address,uint64,uint64,pay,uint64,uint64)void" => block@10, method "acceptBid(uint64,uint64)void" => block@11, * => block@15}
    block@3: // getListingsMbr_route_L79
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.get_listings_mbr[routing]()
        goto block@15
    block@4: // allowAsset_route_L83
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.allow_asset[routing]()
        goto block@15
    block@5: // firstDeposit_route_L94
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.first_deposit[routing]()
        goto block@15
    block@6: // deposit_route_L121
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.deposit[routing]()
        goto block@15
    block@7: // setPrice_route_L138
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.set_price[routing]()
        goto block@15
    block@8: // buy_route_L151
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.buy[routing]()
        goto block@15
    block@9: // withdraw_route_L182
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.withdraw[routing]()
        goto block@15
    block@10: // bid_route_L201
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.bid[routing]()
        goto block@15
    block@11: // acceptBid_route_L237
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.accept_bid[routing]()
        goto block@15
    block@15: // after_if_else_L38
        fail
    block@16: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.get_listings_mbr[routing]() -> void:
    block@0: // L79
        let tmp%0#1: uint64 = test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.listings_box_mbr()
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#1)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.allow_asset[routing]() -> void:
    block@0: // L83
        let tmp%0#0: uint64 = (txn GroupIndex)
        let mbr_pay#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) mbr_pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let tmp%0#1: account = (global CurrentApplicationAddress)
        let (tmp%1#1: uint64, tmp%2#0: bool) = ((asset_holding_get AssetBalance) tmp%0#1 asset#0)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0)
        let tmp%4#0: account = ((gtxns Receiver) mbr_pay#0)
        let tmp%5#0: account = (global CurrentApplicationAddress)
        let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = ((gtxns Amount) mbr_pay#0)
        let tmp%8#0: uint64 = (global AssetOptInMinBalance)
        let tmp%9#0: bool = (== tmp%7#0 tmp%8#0)
        (assert tmp%9#0)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (global CurrentApplicationAddress)
        ((itxn_field AssetAmount) 0u)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.first_deposit[routing]() -> void:
    block@0: // L94
        let tmp%0#0: uint64 = (txn GroupIndex)
        let mbr_pay#0: uint64 = (- tmp%0#0 2u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) mbr_pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%1#0: uint64 = (txn GroupIndex)
        let xfer#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) xfer#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 axfer)
        (assert gtxn_type_matches%1#0) // transaction type is axfer
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let unitary_price#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let tmp%0#1: account = ((gtxns Sender) mbr_pay#0)
        let tmp%1#1: account = (txn Sender)
        let tmp%2#1: bool = (== tmp%0#1 tmp%1#1)
        (assert tmp%2#1)
        let tmp%3#1: account = ((gtxns Receiver) mbr_pay#0)
        let tmp%4#0: account = (global CurrentApplicationAddress)
        let tmp%5#0: bool = (== tmp%3#1 tmp%4#0)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = ((gtxns Amount) mbr_pay#0)
        let tmp%7#0: uint64 = test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.listings_box_mbr()
        let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let key.owner#0: account = (txn Sender)
        let key.asset#0: uint64 = ((gtxns XferAsset) xfer#0)
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = bytes_encode<(uint8[32],uint64,uint64)>(key.owner#0, key.asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        let tmp%11#0: bool = (! maybe_exists%0#0)
        (assert tmp%11#0)
        let tmp%12#0: account = ((gtxns Sender) xfer#0)
        let tmp%13#0: account = (txn Sender)
        let tmp%14#0: bool = (== tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let tmp%15#0: account = ((gtxns AssetReceiver) xfer#0)
        let tmp%16#0: account = (global CurrentApplicationAddress)
        let tmp%17#0: bool = (== tmp%15#0 tmp%16#0)
        (assert tmp%17#0)
        let tmp%18#0: uint64 = ((gtxns AssetAmount) xfer#0)
        let tmp%19#0: bool = (> tmp%18#0 0u)
        (assert tmp%18#0)
        let tmp%21#0: account = (global ZeroAddress)
        let encoded_for_storage%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = bytes_encode<(uint64,uint64,uint8[32],uint64,uint64)>(tmp%18#0, unitary_price#0, tmp%21#0, 0u, 0u)
        box_write(box_prefixed_key%0#0, encoded_for_storage%2#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.deposit[routing]() -> void:
    block@0: // L121
        let tmp%0#0: uint64 = (txn GroupIndex)
        let xfer#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) xfer#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 axfer)
        (assert gtxn_type_matches%0#0) // transaction type is axfer
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let nonce#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let key.owner#0: account = (txn Sender)
        let key.asset#0: uint64 = ((gtxns XferAsset) xfer#0)
        let tmp%2#0: account = ((gtxns Sender) xfer#0)
        let tmp%3#0: account = (txn Sender)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0)
        let tmp%5#0: account = ((gtxns AssetReceiver) xfer#0)
        let tmp%6#0: account = (global CurrentApplicationAddress)
        let tmp%7#0: bool = (== tmp%5#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: uint64 = ((gtxns AssetAmount) xfer#0)
        let tmp%9#0: bool = (> tmp%8#0 0u)
        (assert tmp%8#0)
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = bytes_encode<(uint8[32],uint64,uint64)>(key.owner#0, key.asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let storage_value%0#0: bytes = box_read(box_prefixed_key%0#0)
        let (existing.deposited#0: uint64, existing.unitaryPrice#0: uint64, existing.bidder#0: account, existing.bid#0: uint64, existing.bidUnitaryPrice#0: uint64) = decode_bytes<(uint64,uint64,account,uint64,uint64,)>(storage_value%0#0)
        let tmp%16#0: uint64 = (+ existing.deposited#0 tmp%8#0)
        let encoded_for_storage%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = bytes_encode<(uint64,uint64,uint8[32],uint64,uint64)>(tmp%16#0, existing.unitaryPrice#0, existing.bidder#0, existing.bid#0, existing.bidUnitaryPrice#0)
        box_write(box_prefixed_key%0#0, encoded_for_storage%2#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.set_price[routing]() -> void:
    block@0: // L138
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let unitary_price#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        let key.owner#0: account = (txn Sender)
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = bytes_encode<(uint8[32],uint64,uint64)>(key.owner#0, asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let storage_value%0#0: bytes = box_read(box_prefixed_key%0#0)
        let (existing.deposited#0: uint64, existing.unitaryPrice#0: uint64, existing.bidder#0: account, existing.bid#0: uint64, existing.bidUnitaryPrice#0: uint64) = decode_bytes<(uint64,uint64,account,uint64,uint64,)>(storage_value%0#0)
        let encoded_for_storage%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = bytes_encode<(uint64,uint64,uint8[32],uint64,uint64)>(existing.deposited#0, unitary_price#0, existing.bidder#0, existing.bid#0, existing.bidUnitaryPrice#0)
        box_write(box_prefixed_key%0#0, encoded_for_storage%2#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.buy[routing]() -> void:
    block@0: // L151
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let owner#0: account = decode_bytes<account>(reinterpret_Encoded(uint8[32])%0#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let asset#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let nonce#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let tmp%3#0: uint64 = (txn GroupIndex)
        let buy_pay#0: uint64 = (- tmp%3#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) buy_pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let quantity#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = bytes_encode<(uint8[32],uint64,uint64)>(owner#0, asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let storage_value%0#0: bytes = box_read(box_prefixed_key%0#0)
        let (listing.deposited#0: uint64, listing.unitaryPrice#0: uint64, listing.bidder#0: account, listing.bid#0: uint64, listing.bidUnitaryPrice#0: uint64) = decode_bytes<(uint64,uint64,account,uint64,uint64,)>(storage_value%0#0)
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let amount_to_be_paid#0: uint64 = test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.quantity_price(quantity#0, listing.unitaryPrice#0, value%0#0)
        let tmp%6#0: account = ((gtxns Sender) buy_pay#0)
        let tmp%7#0: account = (txn Sender)
        let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: account = ((gtxns Receiver) buy_pay#0)
        let tmp%10#0: bool = (== tmp%9#0 owner#0)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = ((gtxns Amount) buy_pay#0)
        let tmp%12#0: bool = (== tmp%11#0 amount_to_be_paid#0)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (- listing.deposited#0 quantity#0)
        let encoded_for_storage%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = bytes_encode<(uint64,uint64,uint8[32],uint64,uint64)>(tmp%13#0, listing.unitaryPrice#0, listing.bidder#0, listing.bid#0, listing.bidUnitaryPrice#0)
        box_write(box_prefixed_key%0#0, encoded_for_storage%2#0)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (txn Sender)
        ((itxn_field AssetAmount) quantity#0)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.withdraw[routing]() -> void:
    block@0: // L182
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let key.owner#0: account = (txn Sender)
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = bytes_encode<(uint8[32],uint64,uint64)>(key.owner#0, asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let storage_value%0#0: bytes = box_read(box_prefixed_key%0#0)
        let (listing.deposited#0: uint64, listing.unitaryPrice#0: uint64, listing.bidder#0: account, listing.bid#0: uint64, listing.bidUnitaryPrice#0: uint64) = decode_bytes<(uint64,uint64,account,uint64,uint64,)>(storage_value%0#0)
        let tmp%6#0: account = (global ZeroAddress)
        let tmp%7#0: bool = (!= listing.bidder#0 tmp%6#0)
        goto tmp%7#0 ? block@2 : block@4
    block@2: // if_body_L188
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let current_bid_deposit#0: uint64 = test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.quantity_price(listing.bid#0, listing.bidUnitaryPrice#0, value%0#0)
        itxn_begin
        ((itxn_field Amount) current_bid_deposit#0)
        ((itxn_field Receiver) listing.bidder#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@4
    block@4: // after_if_else_L187
        (box_del box_prefixed_key%0#0)
        itxn_begin
        let inner_txn_params%1%%param_Receiver_idx_0#0: account = (txn Sender)
        let inner_txn_params%1%%param_Amount_idx_0#0: uint64 = test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.listings_box_mbr()
        ((itxn_field Amount) inner_txn_params%1%%param_Amount_idx_0#0)
        ((itxn_field Receiver) inner_txn_params%1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let inner_txn_params%2%%param_AssetReceiver_idx_0#0: account = (txn Sender)
        ((itxn_field AssetAmount) listing.deposited#0)
        ((itxn_field AssetReceiver) inner_txn_params%2%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.bid[routing]() -> void:
    block@0: // L201
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let owner#0: account = decode_bytes<account>(reinterpret_Encoded(uint8[32])%0#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let asset#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let nonce#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let tmp%3#0: uint64 = (txn GroupIndex)
        let bid_pay#0: uint64 = (- tmp%3#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) bid_pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let quantity#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let unitary_price#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%3#0)
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = bytes_encode<(uint8[32],uint64,uint64)>(owner#0, asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let storage_value%0#0: bytes = box_read(box_prefixed_key%0#0)
        let (listing.deposited#0: uint64, listing.unitaryPrice#0: uint64, listing.bidder#0: account, listing.bid#0: uint64, listing.bidUnitaryPrice#0: uint64) = decode_bytes<(uint64,uint64,account,uint64,uint64,)>(storage_value%0#0)
        let tmp%5#1: account = (global ZeroAddress)
        let tmp%6#0: bool = (!= listing.bidder#0 tmp%5#1)
        goto tmp%6#0 ? block@2 : block@4
    block@2: // if_body_L215
        let tmp%7#0: bool = (> unitary_price#0 listing.bidUnitaryPrice#0)
        (assert tmp%7#0)
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let current_bid_amount#0: uint64 = test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.quantity_price(listing.bid#0, listing.bidUnitaryPrice#0, value%0#0)
        itxn_begin
        ((itxn_field Amount) current_bid_amount#0)
        ((itxn_field Receiver) listing.bidder#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@4
    block@4: // after_if_else_L214
        let (value%1#0: uint64, check%1#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%1#0) // asset exists
        let amount_to_be_bid#0: uint64 = test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.quantity_price(quantity#0, unitary_price#0, value%1#0)
        let tmp%10#0: account = ((gtxns Sender) bid_pay#0)
        let tmp%11#0: account = (txn Sender)
        let tmp%12#0: bool = (== tmp%10#0 tmp%11#0)
        (assert tmp%12#0)
        let tmp%13#0: account = ((gtxns Receiver) bid_pay#0)
        let tmp%14#0: account = (global CurrentApplicationAddress)
        let tmp%15#0: bool = (== tmp%13#0 tmp%14#0)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = ((gtxns Amount) bid_pay#0)
        let tmp%17#0: bool = (== tmp%16#0 amount_to_be_bid#0)
        (assert tmp%17#0)
        let tmp%18#0: account = (txn Sender)
        let encoded_for_storage%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = bytes_encode<(uint64,uint64,uint8[32],uint64,uint64)>(listing.deposited#0, listing.unitaryPrice#0, tmp%18#0, quantity#0, unitary_price#0)
        box_write(box_prefixed_key%0#0, encoded_for_storage%2#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.accept_bid[routing]() -> void:
    block@0: // L237
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let key.owner#0: account = (txn Sender)
        let encoded_for_storage%0#0: Encoded(uint8[32],uint64,uint64) = bytes_encode<(uint8[32],uint64,uint64)>(key.owner#0, asset#0, nonce#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 encoded_for_storage%0#0)
        let storage_value%0#0: bytes = box_read(box_prefixed_key%0#0)
        let (listing.deposited#0: uint64, listing.unitaryPrice#0: uint64, listing.bidder#0: account, listing.bid#0: uint64, listing.bidUnitaryPrice#0: uint64) = decode_bytes<(uint64,uint64,account,uint64,uint64,)>(storage_value%0#0)
        let tmp%6#0: account = (global ZeroAddress)
        let tmp%7#0: bool = (!= listing.bidder#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (< listing.deposited#0 listing.bid#0)
        goto tmp%8#0 ? block@2 : block@3
    block@2: // ternary_true_L244
        goto block@4
    block@3: // ternary_false_L244
        goto block@4
    block@4: // ternary_merge_L244
        let min_quantity#0: uint64 = φ(listing.deposited#0 <- block@2, listing.bid#0 <- block@3)
        let (value%0#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let best_bid_amount#0: uint64 = test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.quantity_price(min_quantity#0, listing.bidUnitaryPrice#0, value%0#0)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) best_bid_amount#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field AssetAmount) min_quantity#0)
        ((itxn_field AssetReceiver) listing.bidder#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%10#0: uint64 = (- listing.deposited#0 min_quantity#0)
        let tmp%11#0: uint64 = (- listing.bid#0 min_quantity#0)
        let encoded_for_storage%2#0: Encoded(uint64,uint64,uint8[32],uint64,uint64) = bytes_encode<(uint64,uint64,uint8[32],uint64,uint64)>(tmp%10#0, listing.unitaryPrice#0, listing.bidder#0, tmp%11#0, listing.bidUnitaryPrice#0)
        box_write(box_prefixed_key%0#0, encoded_for_storage%2#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.listings_box_mbr() -> uint64:
    block@0: // L43
        return 50500u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.quantity_price(quantity: uint64, price: uint64, asset_decimals: uint64) -> uint64:
    block@0: // L68
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw price#0 quantity#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#0: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#0: bool = (! _quotient_high#0)
        (assert tmp%8#0)
        return amount_to_be_paid#0