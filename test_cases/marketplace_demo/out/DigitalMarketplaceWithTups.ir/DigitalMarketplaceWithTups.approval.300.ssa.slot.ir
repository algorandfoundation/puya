main test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (log "init")
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#2)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@4, block@15, block@16, block@16, block@16, block@16, block@16, block@16, block@16, block@16, block@16, block@16][tmp%4#0] else goto block@16
    block@4: // switch_case_0_L38
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "getListingsMbr()uint64" => block@5, method "allowAsset(pay,uint64)void" => block@6, method "firstDeposit(pay,axfer,uint64,uint64)void" => block@7, method "deposit(axfer,uint64)void" => block@8, method "setPrice(uint64,uint64,uint64)void" => block@9, method "buy(address,uint64,uint64,pay,uint64)void" => block@10, method "withdraw(uint64,uint64)void" => block@11, method "bid(address,uint64,uint64,pay,uint64,uint64)void" => block@12, method "acceptBid(uint64,uint64)void" => block@13, * => block@14}
    block@5: // getListingsMbr_route_L79
        (log 0x151f7c75000000000000c544)
        exit 1u
    block@6: // allowAsset_route_L83
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.allow_asset[routing]()
        goto block@14
    block@7: // firstDeposit_route_L94
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.first_deposit[routing]()
        goto block@14
    block@8: // deposit_route_L121
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.deposit[routing]()
        goto block@14
    block@9: // setPrice_route_L138
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.set_price[routing]()
        goto block@14
    block@10: // buy_route_L151
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.buy[routing]()
        goto block@14
    block@11: // withdraw_route_L182
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.withdraw[routing]()
        goto block@14
    block@12: // bid_route_L201
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.bid[routing]()
        goto block@14
    block@13: // acceptBid_route_L237
        test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.accept_bid[routing]()
        goto block@14
    block@14: // switch_case_next_L38
        fail // this contract does not implement the given ABI method for call NoOp
    block@15: // switch_case_1_L38
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@16: // switch_case_default_L38
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.allow_asset[routing]() -> void:
    block@0: // L83
        let tmp%0#0: uint64 = (txn GroupIndex)
        let mbr_pay#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) mbr_pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%0#1: account = (global CurrentApplicationAddress)
        let (tmp%1#1: uint64, tmp%2#0: bool) = ((asset_holding_get AssetBalance) tmp%0#1 asset#0)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0)
        let tmp%4#0: account = ((gtxns Receiver) mbr_pay#0)
        let tmp%5#0: account = (global CurrentApplicationAddress)
        let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = ((gtxns Amount) mbr_pay#0)
        let tmp%8#0: uint64 = (global AssetOptInMinBalance)
        let tmp%9#0: bool = (== tmp%7#0 tmp%8#0)
        (assert tmp%9#0)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (global CurrentApplicationAddress)
        ((itxn_field AssetAmount) 0u)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.first_deposit[routing]() -> void:
    block@0: // L94
        let tmp%0#0: uint64 = (txn GroupIndex)
        let mbr_pay#0: uint64 = (- tmp%0#0 2u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) mbr_pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%1#0: uint64 = (txn GroupIndex)
        let xfer#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) xfer#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 axfer)
        (assert gtxn_type_matches%1#0) // transaction type is axfer
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let unitary_price#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%0#1: account = ((gtxns Sender) mbr_pay#0)
        let tmp%1#1: account = (txn Sender)
        let tmp%2#1: bool = (== tmp%0#1 tmp%1#1)
        (assert tmp%2#1)
        let tmp%3#1: account = ((gtxns Receiver) mbr_pay#0)
        let tmp%4#0: account = (global CurrentApplicationAddress)
        let tmp%5#0: bool = (== tmp%3#1 tmp%4#0)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = ((gtxns Amount) mbr_pay#0)
        let tmp%8#0: bool = (== tmp%6#0 50500u)
        (assert tmp%8#0)
        let key.owner#0: account = (txn Sender)
        let key.asset#0: uint64 = ((gtxns XferAsset) xfer#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob key.asset#0)
        let aggregate%head%1#0: bytes = (concat key.owner#0 aggregate%val_as_bytes%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 aggregate%head%2#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        let tmp%11#0: bool = (! maybe_exists%0#0)
        (assert tmp%11#0)
        let tmp%12#0: account = ((gtxns Sender) xfer#0)
        let tmp%13#0: account = (txn Sender)
        let tmp%14#0: bool = (== tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let tmp%15#0: account = ((gtxns AssetReceiver) xfer#0)
        let tmp%16#0: account = (global CurrentApplicationAddress)
        let tmp%17#0: bool = (== tmp%15#0 tmp%16#0)
        (assert tmp%17#0)
        let tmp%18#0: uint64 = ((gtxns AssetAmount) xfer#0)
        (assert tmp%18#0)
        let tmp%21#0: account = (global ZeroAddress)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%18#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob unitary_price#0)
        let aggregate%head%4#0: bytes = (concat aggregate%val_as_bytes%2#0 aggregate%val_as_bytes%3#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 tmp%21#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob 0u)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%val_as_bytes%4#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%val_as_bytes%4#0)
        (box_put box_prefixed_key%0#0 aggregate%head%7#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.deposit[routing]() -> void:
    block@0: // L121
        let tmp%0#0: uint64 = (txn GroupIndex)
        let xfer#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) xfer#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 axfer)
        (assert gtxn_type_matches%0#0) // transaction type is axfer
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let key.owner#0: account = (txn Sender)
        let key.asset#0: uint64 = ((gtxns XferAsset) xfer#0)
        let tmp%2#0: account = ((gtxns Sender) xfer#0)
        let tmp%3#0: account = (txn Sender)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0)
        let tmp%5#0: account = ((gtxns AssetReceiver) xfer#0)
        let tmp%6#0: account = (global CurrentApplicationAddress)
        let tmp%7#0: bool = (== tmp%5#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: uint64 = ((gtxns AssetAmount) xfer#0)
        (assert tmp%8#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob key.asset#0)
        let aggregate%head%1#0: bytes = (concat key.owner#0 aggregate%val_as_bytes%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 aggregate%head%2#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.listings entry exists
        let existing.deposited#0: uint64 = (extract_uint64 aggregate%box_get%0#0 0u)
        let aggregate%extract%1#0: bytes = ((extract 8 8) aggregate%box_get%0#0)
        let existing.bidder#0: account = ((extract 16 32) aggregate%box_get%0#0)
        let aggregate%extract%3#0: bytes = ((extract 48 8) aggregate%box_get%0#0)
        let aggregate%extract%4#0: bytes = ((extract 56 8) aggregate%box_get%0#0)
        let tmp%16#0: uint64 = (+ existing.deposited#0 tmp%8#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%16#0)
        let aggregate%head%4#0: bytes = (concat aggregate%val_as_bytes%2#0 aggregate%extract%1#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 existing.bidder#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%extract%3#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%extract%4#0)
        (box_put box_prefixed_key%0#0 aggregate%head%7#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.set_price[routing]() -> void:
    block@0: // L138
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let unitary_price#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let key.owner#0: account = (txn Sender)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%head%1#0: bytes = (concat key.owner#0 aggregate%val_as_bytes%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 aggregate%head%2#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.listings entry exists
        let aggregate%extract%0#0: bytes = ((extract 0 8) aggregate%box_get%0#0)
        let existing.bidder#0: account = ((extract 16 32) aggregate%box_get%0#0)
        let aggregate%extract%3#0: bytes = ((extract 48 8) aggregate%box_get%0#0)
        let aggregate%extract%4#0: bytes = ((extract 56 8) aggregate%box_get%0#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob unitary_price#0)
        let aggregate%head%4#0: bytes = (concat aggregate%extract%0#0 aggregate%val_as_bytes%3#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 existing.bidder#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%extract%3#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%extract%4#0)
        (box_put box_prefixed_key%0#0 aggregate%head%7#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.buy[routing]() -> void:
    block@0: // L151
        let owner#0: account = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%3#0: uint64 = (txn GroupIndex)
        let buy_pay#0: uint64 = (- tmp%3#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) buy_pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let quantity#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%head%1#0: bytes = (concat owner#0 aggregate%val_as_bytes%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 aggregate%head%2#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.listings entry exists
        let listing.deposited#0: uint64 = (extract_uint64 aggregate%box_get%0#0 0u)
        let listing.unitaryPrice#0: uint64 = (extract_uint64 aggregate%box_get%0#0 8u)
        let listing.bidder#0: account = ((extract 16 32) aggregate%box_get%0#0)
        let aggregate%extract%3#0: bytes = ((extract 48 8) aggregate%box_get%0#0)
        let aggregate%extract%4#0: bytes = ((extract 56 8) aggregate%box_get%0#0)
        let (asset_decimals#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw listing.unitaryPrice#0 quantity#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#1: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#1: bool = (! _quotient_high#0)
        (assert tmp%8#1)
        let tmp%6#0: account = ((gtxns Sender) buy_pay#0)
        let tmp%7#0: account = (txn Sender)
        let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: account = ((gtxns Receiver) buy_pay#0)
        let tmp%10#0: bool = (== tmp%9#0 owner#0)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = ((gtxns Amount) buy_pay#0)
        let tmp%12#0: bool = (== tmp%11#0 amount_to_be_paid#1)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (- listing.deposited#0 quantity#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%13#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob listing.unitaryPrice#0)
        let aggregate%head%4#0: bytes = (concat aggregate%val_as_bytes%2#0 aggregate%val_as_bytes%3#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 listing.bidder#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%extract%3#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%extract%4#0)
        (box_put box_prefixed_key%0#0 aggregate%head%7#0)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (txn Sender)
        ((itxn_field AssetAmount) quantity#0)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.withdraw[routing]() -> void:
    block@0: // L182
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let key.owner#0: account = (txn Sender)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%head%1#0: bytes = (concat key.owner#0 aggregate%val_as_bytes%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 aggregate%head%2#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.listings entry exists
        let listing.deposited#0: uint64 = (extract_uint64 aggregate%box_get%0#0 0u)
        let listing.bidder#0: account = ((extract 16 32) aggregate%box_get%0#0)
        let listing.bid#0: uint64 = (extract_uint64 aggregate%box_get%0#0 48u)
        let listing.bidUnitaryPrice#0: uint64 = (extract_uint64 aggregate%box_get%0#0 56u)
        let tmp%6#0: account = (global ZeroAddress)
        let tmp%7#0: bool = (!= listing.bidder#0 tmp%6#0)
        goto tmp%7#0 ? block@2 : block@4
    block@2: // if_body_L188
        let (asset_decimals#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw listing.bidUnitaryPrice#0 listing.bid#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#0: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#0: bool = (! _quotient_high#0)
        (assert tmp%8#0)
        itxn_begin
        ((itxn_field Amount) amount_to_be_paid#0)
        ((itxn_field Receiver) listing.bidder#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@4
    block@4: // after_if_else_L187
        (box_del box_prefixed_key%0#0)
        itxn_begin
        let inner_txn_params%1%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) 50500u)
        ((itxn_field Receiver) inner_txn_params%1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let inner_txn_params%2%%param_AssetReceiver_idx_0#0: account = (txn Sender)
        ((itxn_field AssetAmount) listing.deposited#0)
        ((itxn_field AssetReceiver) inner_txn_params%2%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.bid[routing]() -> void:
    block@0: // L201
        let owner#0: account = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%3#0: uint64 = (txn GroupIndex)
        let bid_pay#0: uint64 = (- tmp%3#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) bid_pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let quantity#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let unitary_price#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%head%1#0: bytes = (concat owner#0 aggregate%val_as_bytes%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 aggregate%head%2#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.listings entry exists
        let aggregate%extract%0#0: bytes = ((extract 0 8) aggregate%box_get%0#0)
        let aggregate%extract%1#0: bytes = ((extract 8 8) aggregate%box_get%0#0)
        let listing.bidder#0: account = ((extract 16 32) aggregate%box_get%0#0)
        let listing.bid#0: uint64 = (extract_uint64 aggregate%box_get%0#0 48u)
        let listing.bidUnitaryPrice#0: uint64 = (extract_uint64 aggregate%box_get%0#0 56u)
        let tmp%5#1: account = (global ZeroAddress)
        let tmp%6#0: bool = (!= listing.bidder#0 tmp%5#1)
        goto tmp%6#0 ? block@2 : block@4
    block@2: // if_body_L215
        let tmp%7#0: bool = (> unitary_price#0 listing.bidUnitaryPrice#0)
        (assert tmp%7#0)
        let (asset_decimals#1: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let (amount_not_scaled_high#1: uint64, amount_not_scaled_low#1: uint64) = (mulw listing.bidUnitaryPrice#0 listing.bid#0)
        let (scaling_factor_high#1: uint64, scaling_factor_low#1: uint64) = (expw 10u asset_decimals#1)
        let (_quotient_high#1: uint64, amount_to_be_paid#1: uint64, _remainder_high#1: uint64, _remainder_low#1: uint64) = (divmodw amount_not_scaled_high#1 amount_not_scaled_low#1 scaling_factor_high#1 scaling_factor_low#1)
        let tmp%8#1: bool = (! _quotient_high#1)
        (assert tmp%8#1)
        itxn_begin
        ((itxn_field Amount) amount_to_be_paid#1)
        ((itxn_field Receiver) listing.bidder#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@4
    block@4: // after_if_else_L214
        let (asset_decimals#0: uint64, check%1#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%1#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw unitary_price#0 quantity#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#0: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#0: bool = (! _quotient_high#0)
        (assert tmp%8#0)
        let tmp%10#0: account = ((gtxns Sender) bid_pay#0)
        let tmp%11#0: account = (txn Sender)
        let tmp%12#0: bool = (== tmp%10#0 tmp%11#0)
        (assert tmp%12#0)
        let tmp%13#0: account = ((gtxns Receiver) bid_pay#0)
        let tmp%14#0: account = (global CurrentApplicationAddress)
        let tmp%15#0: bool = (== tmp%13#0 tmp%14#0)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = ((gtxns Amount) bid_pay#0)
        let tmp%17#0: bool = (== tmp%16#0 amount_to_be_paid#0)
        (assert tmp%17#0)
        let tmp%18#0: account = (txn Sender)
        let aggregate%head%4#0: bytes = (concat aggregate%extract%0#0 aggregate%extract%1#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 tmp%18#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob quantity#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%val_as_bytes%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob unitary_price#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%val_as_bytes%5#0)
        (box_put box_prefixed_key%0#0 aggregate%head%7#0)
        exit 1u

subroutine test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.accept_bid[routing]() -> void:
    block@0: // L237
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let key.owner#0: account = (txn Sender)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%head%1#0: bytes = (concat key.owner#0 aggregate%val_as_bytes%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob nonce#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%val_as_bytes%1#0)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 aggregate%head%2#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.listings entry exists
        let listing.deposited#0: uint64 = (extract_uint64 aggregate%box_get%0#0 0u)
        let aggregate%extract%1#0: bytes = ((extract 8 8) aggregate%box_get%0#0)
        let listing.bidder#0: account = ((extract 16 32) aggregate%box_get%0#0)
        let listing.bid#0: uint64 = (extract_uint64 aggregate%box_get%0#0 48u)
        let listing.bidUnitaryPrice#0: uint64 = (extract_uint64 aggregate%box_get%0#0 56u)
        let tmp%6#0: account = (global ZeroAddress)
        let tmp%7#0: bool = (!= listing.bidder#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (< listing.deposited#0 listing.bid#0)
        goto tmp%8#0 ? block@2 : block@3
    block@2: // ternary_true_L244
        goto block@4
    block@3: // ternary_false_L244
        goto block@4
    block@4: // ternary_merge_L244
        let min_quantity#0: uint64 = φ(listing.deposited#0 <- block@2, listing.bid#0 <- block@3)
        let (asset_decimals#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw listing.bidUnitaryPrice#0 min_quantity#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#0: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#1: bool = (! _quotient_high#0)
        (assert tmp%8#1)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) amount_to_be_paid#0)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field AssetAmount) min_quantity#0)
        ((itxn_field AssetReceiver) listing.bidder#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%10#0: uint64 = (- listing.deposited#0 min_quantity#0)
        let tmp%11#0: uint64 = (- listing.bid#0 min_quantity#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%10#0)
        let aggregate%head%4#0: bytes = (concat aggregate%val_as_bytes%2#0 aggregate%extract%1#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 listing.bidder#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%11#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%val_as_bytes%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob listing.bidUnitaryPrice#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%val_as_bytes%5#0)
        (box_put box_prefixed_key%0#0 aggregate%head%7#0)
        exit 1u