{
    "name": "DigitalMarketplaceWithImmStruct",
    "structs": {
        "ListingKey": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            },
            {
                "name": "nonce",
                "type": "uint64"
            }
        ],
        "ListingValue": [
            {
                "name": "deposited",
                "type": "uint64"
            },
            {
                "name": "unitaryPrice",
                "type": "uint64"
            },
            {
                "name": "bidder",
                "type": "address"
            },
            {
                "name": "bid",
                "type": "uint64"
            },
            {
                "name": "bidUnitaryPrice",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "getListingsMbr",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "allowAsset",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_pay"
                },
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "firstDeposit",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_pay"
                },
                {
                    "type": "axfer",
                    "name": "xfer"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit",
            "args": [
                {
                    "type": "axfer",
                    "name": "xfer"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPrice",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "account",
                    "name": "owner"
                },
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "pay",
                    "name": "buy_pay"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bid",
            "args": [
                {
                    "type": "account",
                    "name": "owner"
                },
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "pay",
                    "name": "bid_pay"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "acceptBid",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "listings": {
                    "keyType": "ListingKey",
                    "valueType": "ListingValue",
                    "prefix": "bGlzdGluZ3M="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        113,
                        135,
                        181,
                        203,
                        245,
                        271,
                        297,
                        338,
                        366
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        701,
                        843,
                        969,
                        1002,
                        1135
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        395
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        116,
                        138,
                        184,
                        206,
                        248,
                        274,
                        300,
                        341,
                        369
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        580,
                        639,
                        692,
                        819,
                        939,
                        1096
                    ],
                    "errorMessage": "check self.listings entry exists"
                },
                {
                    "pc": [
                        284,
                        321
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        164,
                        232,
                        311,
                        351
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAQAEMMSKAyYBCGxpc3RpbmdzMRhAAAeABGluaXSwMRtBAV2CCQTZjvapBFbvz7UEEvCMmASbS4I0BFoFvFcEFi/CMgTLyBnlBIJNS60E3WGSBDYaAI4JAP8A4wC6AKAAhgBcAEYAGAACI0MxGRREMRhENhoBF8AwNhoCF4gDsCJDMRkURDEYRDYaARfAHDYaAhfAMDYaAxcxFiIJSTgQIhJENhoEFzYaBReIAuQiQzEZFEQxGEQ2GgEXwDA2GgIXiAJXIkMxGRREMRhENhoBF8AcNhoCF8AwNhoDFzEWIglJOBAiEkQ2GgQXiAGxIkMxGRREMRhENhoBF8AwNhoCFzYaAxeIAWMiQzEZFEQxGEQxFiIJSTgQJBJENhoBF4gA9SJDMRkURDEYRDEWgQIJSTgQIhJEMRYiCUk4ECQSRDYaARc2GgIXiAByIkMxGRREMRhEMRYiCUk4ECISRDYaARfAMIgAJSJDMRkURDEYRIAMFR98dQAAAAAAAMVEsCJDMRlA/uQxGBREIkOKAgAyCov/cABFARREi/44BzIKEkSL/jgIMhASRLEyCiOyErIUi/+yESSyECOyAbOJigQAi/w4ADEAEkSL/DgHMgoSRIv8OAghBBJEMQCL/TgRFlCL/xZQKExQSb1FARREi/04ADEAEkSL/TgUMgoSRIv9OBJJRDIDTBaL/hZQTFAjFkxLAVBMUL+JigIAMQCL/jgRFlCL/xZQi/44ADEAEkSL/jgUMgoSRIv+OBJJRChPAlBJvkRJJVtLAYE4W0sCVxAgSwOBCFtPBCNbTwYIFkwWUExQTwIWUEwWUL+JigMAMQCL/RZQi/4WUChMUEm+REklW0sBgThbSwJXECBPAyNbFov/FlBMUE8CFlBMFlC/iYoFAIv8Fov7TFCL/RZQKExQSb5ESYEIW4v8cQFESwGL/x2BCk8DlR9GAkwURIv+OAAxABJEi/44B4v7EkSL/jgIEkRLASVbSwKBOFtLA1cQIE8EI1uL/wkWTwQWUExQTwIWUEwWUL+xMQCL/7ISshSL/LIRJLIQI7IBs4mKAgAxAIv+FlCL/xZQKExQSb5MSU8CRFcQIEkyAxNBACuLAUklW0yBOFuL/nEBRExPAh2BCk8DlR9GAkwURLGyCIsCsgcishAjsgGziwC8SLExACEEsgiyByKyECOyAbOxMQCLASNbshKyFIv+shEkshAjsgGziYoGAIv7Fov6TFCL/BZQKExQSb5MSU8CRFcQIEkyAxNBADCLAUmBOFuL/0sBDURMJVuL+3EBRE4CHYEKTwOVH0YCTBREsbIIiwKyByKyECOyAbOL+3EBRIv/i/4dgQpPA5UfRgJMFESL/TgAMQASRIv9OAcyChJEi/04CBJEiwFJI1tMgQhbMQBPAhZPAhZQTFCL/hZQi/8WUIsATL+JigIAMQCL/hZQi/8WUChMUEm+TElPAkRJVxAgSU4CMgMTREkjW0lPAiVbSU4CDEEAZ4sDiwFJgThbi/5xAURLAU8ESU4DHYEKTwOVH0YCTBREsTEAsgeyCCKyECOyAbOxSbISiwJJTgKyFIv+shEkshAjsgGzTwOBCFuLA0sCCYsETwMJTBZPAhZQTwJQTBZQTBZQiwBMv4mLBEL/lg==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}