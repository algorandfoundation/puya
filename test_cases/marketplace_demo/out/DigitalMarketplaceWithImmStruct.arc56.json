{
    "name": "DigitalMarketplaceWithImmStruct",
    "structs": {
        "ListingKey": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            },
            {
                "name": "nonce",
                "type": "uint64"
            }
        ],
        "ListingValue": [
            {
                "name": "deposited",
                "type": "uint64"
            },
            {
                "name": "unitaryPrice",
                "type": "uint64"
            },
            {
                "name": "bidder",
                "type": "address"
            },
            {
                "name": "bid",
                "type": "uint64"
            },
            {
                "name": "bidUnitaryPrice",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "getListingsMbr",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "allowAsset",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_pay"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "firstDeposit",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_pay"
                },
                {
                    "type": "axfer",
                    "name": "xfer"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit",
            "args": [
                {
                    "type": "axfer",
                    "name": "xfer"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPrice",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "pay",
                    "name": "buy_pay"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bid",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "pay",
                    "name": "bid_pay"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "acceptBid",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "listings": {
                    "keyType": "ListingKey",
                    "valueType": "ListingValue",
                    "prefix": "bGlzdGluZ3M="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        41
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        140
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        575,
                        729,
                        915,
                        947,
                        1099
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        389,
                        471,
                        567,
                        704,
                        884,
                        1056
                    ],
                    "errorMessage": "check self.listings entry exists"
                },
                {
                    "pc": [
                        160,
                        234,
                        243,
                        349,
                        436,
                        445,
                        454,
                        521,
                        530,
                        549,
                        674,
                        684,
                        818,
                        830,
                        851,
                        862,
                        1026,
                        1036
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        513,
                        810
                    ],
                    "errorMessage": "invalid number of bytes for uint8[32]"
                },
                {
                    "pc": [
                        226,
                        341
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        152,
                        216,
                        541,
                        843
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAFAQgABMSKAyYBCGxpc3RpbmdzMRhAAAeABGluaXSwMRtBAF8xGRREMRhEggkE2Y72qQRqTn/KBBLwjJgEm0uCNARNiyPYBFKsXfcE466yXAQyNLcRBMyCY0Y2GgCOCQABABwAWwDZAToBhgIoAq8DiACADBUffHUAAAAAAADFRLAiQzEZFDEYFBBEIkMxFiIJSTgQIhJENhoBSRUjEkQXMgpLAXAARQEUREsBOAcyChJETDgIMhASRLEyCiSyErIUshElshAksgGzIkMxFoECCUk4ECISRDEWIglJOBAlEkQ2GgFJFSMSRBc2GgJJFSMSRBdLAzgAMQASREsDOAcyChJETwM4CCEEEkQxAEsDOBEWUEwWUChMUEm9RQEUREsCOAAxABJESwI4FDIKEkRPAjgSSUQyA0wWTwMWUExQJBZMSwFQTFC/IkMxFiIJSTgQJRJENhoBSRUjEkQXMQBLAjgRFlBMFlBLATgAMQASREsBOBQyChJETDgSSUQoTwJQSb5ESVcwCEsBVzgISwJXECBLA1cICE8EJFtPBggWTFBMUE8CUExQvyJDNhoBSRUjEkQXNhoCSRUjEkQXNhoDSRUjEkQXMQBPAxZQTwIWUChMUEm+RElXMAhLAVc4CEsCVxAgTwNXAAhPBRZQTFBPAlBMUL8iQzYaAUkVgSASRDYaAkkVIxJEFzYaA0kVIxJEFzEWIglJOBAiEkQ2GgRJFSMSRBdLAxZLBUxQTwMWUChMUEm+REkjW0sFcQFESwFLBR2BCk8DlR9GAkwUREsFOAAxABJESwU4B08IEkRPBTgIEkRLAVcwCEsCVzgISwNXECBPBCRbSwYJFk8EFlBMUE8CUExQv7ExALIUshKyESWyECSyAbMiQzYaAUkVIxJEF0k2GgJJFSMSRBcxAE8CFlBMFlAoTFBJvkxJTwJEVxAgSTIDE0EAK0sBSYEwW0yBOFtLBXEBRExPAh2BCk8DlR9GAkwURLGyCEmyByKyECSyAbNLArxIsTEAIQSyCLIHIrIQJLIBs7ExAEsCJFuyErIUSwOyESWyECSyAbMiQzYaAUkVgSASRDYaAkkVIxJEF0lOAjYaA0kVIxJEFzEWIglJTgQ4ECISRDYaBEkVIxJEF04DNhoFSRUjEkQXTgNMFk8CTFBMFlAoTFBJvkxJTwJEVxAgSTIDE0EAMEsBSYE4W0sFSwENREyBMFtLCHEBRE4CHYEKTwOVH0YCTBREsbIISbIHIrIQJLIBs0sGcQFESwRJTgJLB0lOAx2BCk8DlR9GAkwUREsISTgAMQASREk4BzIKEkQ4CBJESwNJVwAITFcICDEATgJQTFBMFlBMFlBLA0y/IkM2GgFJFSMSRBdJNhoCSRUjEkQXMQBPAhZQTBZQKExQSb5MSU8CRElXECBJTgIyAxNESSRbSU8CgTBbSU4CDEEAaksBSwRJgThbSwhJTgJxAURLAU8FSU4DHYEKTwOVH0YCTBREsTEAsgeyCCKyECSyAbOxSbISSwZJTgKyFE8DshElshAksgGzTwNXCAhLBUsCCUsFTwMJTBZPAlBPAlBMFlBMFlBLBUy/IkNJQv+U",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}