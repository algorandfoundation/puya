{
    "name": "DigitalMarketplaceWithImmStruct",
    "structs": {
        "ListingKey": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            },
            {
                "name": "nonce",
                "type": "uint64"
            }
        ],
        "ListingValue": [
            {
                "name": "deposited",
                "type": "uint64"
            },
            {
                "name": "unitaryPrice",
                "type": "uint64"
            },
            {
                "name": "bidder",
                "type": "address"
            },
            {
                "name": "bid",
                "type": "uint64"
            },
            {
                "name": "bidUnitaryPrice",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "getListingsMbr",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "allowAsset",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_pay"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "firstDeposit",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_pay"
                },
                {
                    "type": "axfer",
                    "name": "xfer"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit",
            "args": [
                {
                    "type": "axfer",
                    "name": "xfer"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPrice",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "pay",
                    "name": "buy_pay"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bid",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "pay",
                    "name": "bid_pay"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "acceptBid",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "listings": {
                    "keyType": "ListingKey",
                    "valueType": "ListingValue",
                    "prefix": "bGlzdGluZ3M="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        41
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        140
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        573,
                        727,
                        913,
                        945,
                        1097
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        387,
                        469,
                        565,
                        702,
                        882,
                        1054
                    ],
                    "errorMessage": "check self.listings entry exists"
                },
                {
                    "pc": [
                        158,
                        232,
                        241,
                        347,
                        434,
                        443,
                        452,
                        519,
                        528,
                        547,
                        672,
                        682,
                        816,
                        828,
                        849,
                        860,
                        1024,
                        1034
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        511,
                        808
                    ],
                    "errorMessage": "invalid number of bytes for uint8[32]"
                },
                {
                    "pc": [
                        224,
                        339
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        150,
                        214,
                        539,
                        841
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAFAQgABMSKAyYBCGxpc3RpbmdzMRhAAAeABGluaXSwMRtBAF8xGRREMRhEggkE2Y72qQRqTn/KBBLwjJgEm0uCNARNiyPYBFKsXfcE466yXAQyNLcRBMyCY0Y2GgCOCQABABoAWQDXATgBhAImAq0DhgCADBUffHUAAAAAAADFRLAiQzEZFDEYFBBDMRYiCUk4ECISRDYaAUkVIxJEFzIKSwFwAEUBFERLATgHMgoSREw4CDIQEkSxMgokshKyFLIRJbIQJLIBsyJDMRaBAglJOBAiEkQxFiIJSTgQJRJENhoBSRUjEkQXNhoCSRUjEkQXSwM4ADEAEkRLAzgHMgoSRE8DOAghBBJEMQBLAzgRFlBMFlAoTFBJvUUBFERLAjgAMQASREsCOBQyChJETwI4EklEMgNMFk8DFlBMUCQWTEsBUExQvyJDMRYiCUk4ECUSRDYaAUkVIxJEFzEASwI4ERZQTBZQSwE4ADEAEkRLATgUMgoSREw4EklEKE8CUEm+RElXMAhLAVc4CEsCVxAgSwNXCAhPBCRbTwYIFkxQTFBPAlBMUL8iQzYaAUkVIxJEFzYaAkkVIxJEFzYaA0kVIxJEFzEATwMWUE8CFlAoTFBJvkRJVzAISwFXOAhLAlcQIE8DVwAITwUWUExQTwJQTFC/IkM2GgFJFYEgEkQ2GgJJFSMSRBc2GgNJFSMSRBcxFiIJSTgQIhJENhoESRUjEkQXSwMWSwVMUE8DFlAoTFBJvkRJI1tLBXEBREsBSwUdgQpPA5UfRgJMFERLBTgAMQASREsFOAdPCBJETwU4CBJESwFXMAhLAlc4CEsDVxAgTwQkW0sGCRZPBBZQTFBPAlBMUL+xMQCyFLISshElshAksgGzIkM2GgFJFSMSRBdJNhoCSRUjEkQXMQBPAhZQTBZQKExQSb5MSU8CRFcQIEkyAxNBACtLAUmBMFtMgThbSwVxAURMTwIdgQpPA5UfRgJMFESxsghJsgcishAksgGzSwK8SLExACEEsgiyByKyECSyAbOxMQBLAiRbshKyFEsDshElshAksgGzIkM2GgFJFYEgEkQ2GgJJFSMSRBdJTgI2GgNJFSMSRBcxFiIJSU4EOBAiEkQ2GgRJFSMSRBdOAzYaBUkVIxJEF04DTBZPAkxQTBZQKExQSb5MSU8CRFcQIEkyAxNBADBLAUmBOFtLBUsBDURMgTBbSwhxAUROAh2BCk8DlR9GAkwURLGyCEmyByKyECSyAbNLBnEBREsESU4CSwdJTgMdgQpPA5UfRgJMFERLCEk4ADEAEkRJOAcyChJEOAgSREsDSVcACExXCAgxAE4CUExQTBZQTBZQSwNMvyJDNhoBSRUjEkQXSTYaAkkVIxJEFzEATwIWUEwWUChMUEm+TElPAkRJVxAgSU4CMgMTREkkW0lPAoEwW0lOAgxBAGpLAUsESYE4W0sISU4CcQFESwFPBUlOAx2BCk8DlR9GAkwURLExALIHsggishAksgGzsUmyEksGSU4CshRPA7IRJbIQJLIBs08DVwgISwVLAglLBU8DCUwWTwJQTwJQTBZQTBZQSwVMvyJDSUL/lA==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}