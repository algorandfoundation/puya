{
    "name": "DigitalMarketplaceWithStruct",
    "structs": {
        "ListingKey": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            },
            {
                "name": "nonce",
                "type": "uint64"
            }
        ],
        "ListingValue": [
            {
                "name": "deposited",
                "type": "uint64"
            },
            {
                "name": "unitaryPrice",
                "type": "uint64"
            },
            {
                "name": "bidder",
                "type": "address"
            },
            {
                "name": "bid",
                "type": "uint64"
            },
            {
                "name": "bidUnitaryPrice",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "getListingsMbr",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "allowAsset",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_pay"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "firstDeposit",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_pay"
                },
                {
                    "type": "axfer",
                    "name": "xfer"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit",
            "args": [
                {
                    "type": "axfer",
                    "name": "xfer"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPrice",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "pay",
                    "name": "buy_pay"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bid",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "pay",
                    "name": "bid_pay"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "acceptBid",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "listings": {
                    "keyType": "ListingKey",
                    "valueType": "ListingValue",
                    "prefix": "bGlzdGluZ3M="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        113,
                        133,
                        174,
                        194,
                        231,
                        255,
                        281,
                        322,
                        348
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        680,
                        821,
                        947,
                        979,
                        1109
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        377
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        116,
                        136,
                        177,
                        197,
                        234,
                        258,
                        284,
                        325,
                        351
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        562,
                        619,
                        671,
                        796,
                        916,
                        1069
                    ],
                    "errorMessage": "check self.listings entry exists"
                },
                {
                    "pc": [
                        268,
                        305
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        157,
                        218,
                        295,
                        335
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAQAECsSKAyYBCGxpc3RpbmdzMRhAAAeABGluaXSwMRtBAUuCCQTZjvapBGpOf8oEEvCMmASbS4I0BE2LI9gEUqxd9wTjrrJcBDI0txEEzIJjRjYaAI4JAO0A0wCqAJAAeABTAD8AFgACI0MxGRREMRhENhoBFzYaAheIA5ciQzEZFEQxGEQ2GgE2GgIXNhoDFzEWIglJOBAiEkQ2GgQXNhoFF4gC1CJDMRkURDEYRDYaARc2GgIXiAJJIkMxGRREMRhENhoBNhoCFzYaAxcxFiIJSTgQIhJENhoEF4gBqiJDMRkURDEYRDYaARc2GgIXNhoDF4gBXyJDMRkURDEYRDEWIglJOBAkEkQ2GgEXiADzIkMxGRREMRhEMRaBAglJOBAiEkQxFiIJSTgQJBJENhoBFzYaAheIAHAiQzEZFEQxGEQxFiIJSTgQIhJENhoBF4gAJSJDMRkURDEYRIAMFR98dQAAAAAAAMVEsCJDMRlA/vYxGBREIkOKAgAyCov/cABFARREi/44BzIKEkSL/jgIMhASRLEyCiOyErIUi/+yESSyECOyAbOJigQAi/w4ADEAEkSL/DgHMgoSRIv8OAghBBJEMQCL/TgRFlCL/xZQKExQSb1FARREi/04ADEAEkSL/TgUMgoSRIv9OBJJRDIDTBaL/hZQTFAjFkxLAVBMUL+JigIAMQCL/jgRFlCL/xZQi/44ADEAEkSL/jgUMgoSRIv+OBJJRChPAlBJvkRJVzAISwFXOAhLAlcQIEsDVwgITwQjW08GCBZMUExQTwJQTFC/iYoDADEAi/0WUIv+FlAoTFBJvkRJVzAISwFXOAhLAlcQIE8DVwAIi/8WUExQTwJQTFC/iYoFAIv8Fov7TFCL/RZQKExQSb5ESYEIW4v8cQFESwGL/x0lTwOVH0YCTBREi/44ADEAEkSL/jgHi/sSRIv+OAgSREsBVzAISwJXOAhLA1cQIE8EI1uL/wkWTwQWUExQTwJQTFC/sTEAi/+yErIUi/yyESSyECOyAbOJigIAMQCL/hZQi/8WUChMUEm+TElPAkRXECBJMgMTQQAriwFJgTBbTIE4W4v+cQFETE8CHSVPA5UfRgJMFESxsgiLArIHIrIQI7IBs4sAvEixMQAhBLIIsgcishAjsgGzsTEAiwEjW7ISshSL/rIRJLIQI7IBs4mKBgCL+xaL+kxQi/wWUChMUEm+TElPAkRXECBJMgMTQQAwiwFJgThbi/9LAQ1ETIEwW4v7cQFETgIdJU8DlR9GAkwURLGyCIsCsgcishAjsgGzi/txAUSL/4v+HSVPA5UfRgJMFESL/TgAMQASRIv9OAcyChJEi/04CBJEiwFJVwAITFcICDEATgJQTFCL/hZQi/8WUIsATL+JigIAMQCL/hZQi/8WUChMUEm+TElPAkRJVxAgSU4CMgMTREkjW0lPAoEwW0lOAgxBAGWLA4sBSYE4W4v+cQFESwFPBElOAx0lTwOVH0YCTBREsTEAsgeyCCKyECOyAbOxSbISiwJJTgKyFIv+shEkshAjsgGzTwNXCAiLA0sCCYsETwMJTBZPAlBPAlBMFlBMFlCLAEy/iYsEQv+Y",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}