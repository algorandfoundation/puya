{
    "name": "DigitalMarketplaceWithStruct",
    "structs": {
        "ListingKey": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            },
            {
                "name": "nonce",
                "type": "uint64"
            }
        ],
        "ListingValue": [
            {
                "name": "deposited",
                "type": "uint64"
            },
            {
                "name": "unitaryPrice",
                "type": "uint64"
            },
            {
                "name": "bidder",
                "type": "address"
            },
            {
                "name": "bid",
                "type": "uint64"
            },
            {
                "name": "bidUnitaryPrice",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "getListingsMbr",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "allowAsset",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_pay"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "firstDeposit",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_pay"
                },
                {
                    "type": "axfer",
                    "name": "xfer"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit",
            "args": [
                {
                    "type": "axfer",
                    "name": "xfer"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPrice",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "pay",
                    "name": "buy_pay"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bid",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "pay",
                    "name": "bid_pay"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                },
                {
                    "type": "uint64",
                    "name": "unitary_price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "acceptBid",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "listings": {
                    "keyType": "ListingKey",
                    "valueType": "ListingValue",
                    "prefix": "bGlzdGluZ3M="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        41
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        140
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        518,
                        661,
                        820,
                        851,
                        992
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        367,
                        434,
                        509,
                        636,
                        789,
                        949
                    ],
                    "errorMessage": "check self.listings entry exists"
                },
                {
                    "pc": [
                        219,
                        324
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        150,
                        209,
                        488,
                        758
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAQAECsSKAyYBCGxpc3RpbmdzMRhAAAeABGluaXSwMRtBAF8xGRREMRhEggkE2Y72qQRqTn/KBBLwjJgEm0uCNARNiyPYBFKsXfcE466yXAQyNLcRBMyCY0Y2GgCOCQABABoAVADIASQBYQHuAmoDJwCADBUffHUAAAAAAADFRLAiQzEZFDEYFBBDMRYiCUk4ECISRDYaARcyCksBcABFARRESwE4BzIKEkRMOAgyEBJEsTIKI7ISshSyESSyECOyAbMiQzEWgQIJSTgQIhJEMRYiCUk4ECQSRDYaARc2GgIXSwM4ADEAEkRLAzgHMgoSRE8DOAghBBJEMQBLAzgRFlBMFlAoTFBJvUUBFERLAjgAMQASREsCOBQyChJETwI4EklEMgNMFk8DFlBMUCMWTEsBUExQvyJDMRYiCUk4ECQSRDYaARcxAEsCOBEWUEwWUEsBOAAxABJESwE4FDIKEkRMOBJJRChPAlBJvkRJVzAISwFXOAhLAlcQIEsDVwgITwQjW08GCBZMUExQTwJQTFC/IkM2GgEXNhoCFzYaAxcxAE8DFlBPAhZQKExQSb5ESVcwCEsBVzgISwJXECBPA1cACE8FFlBMUE8CUExQvyJDNhoBNhoCFzYaAxcxFiIJSTgQIhJENhoEF0sDFksFTFBPAxZQKExQSb5ESYEIW0sFcQFESwFLBR0lTwOVH0YCTBRESwU4ADEAEkRLBTgHTwgSRE8FOAgSREsBVzAISwJXOAhLA1cQIE8EI1tLBgkWTwQWUExQTwJQTFC/sTEAshSyErIRJLIQI7IBsyJDNhoBF0k2GgIXMQBPAhZQTBZQKExQSb5MSU8CRFcQIEkyAxNBACpLAUmBMFtMgThbSwVxAURMTwIdJU8DlR9GAkwURLGyCEmyByKyECOyAbNLArxIsTEAIQSyCLIHIrIQI7IBs7ExAEsCI1uyErIUSwOyESSyECOyAbMiQzYaATYaAhdJTgI2GgMXMRYiCUlOBDgQIhJENhoEF04DNhoFF04DTBZPAkxQTBZQKExQSb5MSU8CRFcQIEkyAxNBAC9LAUmBOFtLBUsBDURMgTBbSwhxAUROAh0lTwOVH0YCTBREsbIISbIHIrIQI7IBs0sGcQFESwRJTgJLB0lOAx0lTwOVH0YCTBRESwhJOAAxABJESTgHMgoSRDgIEkRLA0lXAAhMVwgIMQBOAlBMUEwWUEwWUEsDTL8iQzYaARdJNhoCFzEATwIWUEwWUChMUEm+TElPAkRJVxAgSU4CMgMTREkjW0lPAoEwW0lOAgxBAGlLAUsESYE4W0sISU4CcQFESwFPBUlOAx0lTwOVH0YCTBREsTEAsgeyCCKyECOyAbOxSbISSwZJTgKyFE8DshEkshAjsgGzTwNXCAhLBUsCCUsFTwMJTBZPAlBPAlBMFlBMFlBLBUy/IkNJQv+V",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}