main marketplace_with_tups.DigitalMarketplaceWithTups.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (log "init")
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@21
    block@4: // abi_routing_L17
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "getListingsMbr()uint64" => block@5, method "allowAsset(pay,asset)void" => block@6, method "firstDeposit(pay,axfer,uint64,uint64)void" => block@7, method "deposit(axfer,uint64)void" => block@8, method "setPrice(asset,uint64,uint64)void" => block@9, method "buy(account,asset,uint64,pay,uint64)void" => block@10, method "withdraw(asset,uint64)void" => block@11, method "bid(account,asset,uint64,pay,uint64,uint64)void" => block@14, method "acceptBid(asset,uint64)void" => block@17, * => block@23}
    block@5: // getListingsMbr_route_L56
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x151f7c75000000000000c544)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0
        goto block@24
    block@6: // allowAsset_route_L60
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let tmp%14#0: uint64 = (txn GroupIndex)
        let mbr_pay#0: uint64 = (- tmp%14#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) mbr_pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let asset#0: uint64 = ((txnas Assets) tmp%15#0)
        let tmp%0#9: account = (global CurrentApplicationAddress)
        let (tmp%1#8: uint64, tmp%2#7: bool) = ((asset_holding_get AssetBalance) tmp%0#9 asset#0)
        let tmp%3#8: bool = (! tmp%2#7)
        (assert tmp%3#8)
        let tmp%4#7: account = ((gtxns Receiver) mbr_pay#0)
        let tmp%5#2: account = (global CurrentApplicationAddress)
        let tmp%6#2: bool = (== tmp%4#7 tmp%5#2)
        (assert tmp%6#2)
        let tmp%7#7: uint64 = ((gtxns Amount) mbr_pay#0)
        let tmp%8#5: uint64 = (global AssetOptInMinBalance)
        let tmp%9#6: bool = (== tmp%7#7 tmp%8#5)
        (assert tmp%9#6)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (global CurrentApplicationAddress)
        ((itxn_field AssetAmount) 0u)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0
        goto block@24
    block@7: // firstDeposit_route_L73
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let tmp%21#0: uint64 = (txn GroupIndex)
        let mbr_pay#0: uint64 = (- tmp%21#0 2u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) mbr_pay#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let tmp%22#0: uint64 = (txn GroupIndex)
        let xfer#0: uint64 = (- tmp%22#0 1u)
        let gtxn_type%2#0: uint64 = ((gtxns TypeEnum) xfer#0)
        let gtxn_type_matches%2#0: bool = (== gtxn_type%2#0 axfer)
        (assert gtxn_type_matches%2#0) // transaction type is axfer
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let unitary_price#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%0#9: account = ((gtxns Sender) mbr_pay#0)
        let tmp%1#7: account = (txn Sender)
        let tmp%2#7: bool = (== tmp%0#9 tmp%1#7)
        (assert tmp%2#7)
        let tmp%3#6: account = ((gtxns Receiver) mbr_pay#0)
        let tmp%4#7: account = (global CurrentApplicationAddress)
        let tmp%5#7: bool = (== tmp%3#6 tmp%4#7)
        (assert tmp%5#7)
        let tmp%6#6: uint64 = ((gtxns Amount) mbr_pay#0)
        let tmp%8#1: bool = (== tmp%6#6 50500u)
        (assert tmp%8#1)
        let key.owner#0: account = (txn Sender)
        let key.asset#5: uint64 = ((gtxns XferAsset) xfer#0)
        let array%val_as_bytes%1#1: bytes[8] = (itob key.asset#5)
        let array%encoded%1#1: Encoded(uint8[32],uint64) = (concat key.owner#0 array%val_as_bytes%1#1)
        let array%val_as_bytes%2#1: bytes[8] = (itob nonce#0)
        let array%encoded%2#1: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%1#1 array%val_as_bytes%2#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 array%encoded%2#1)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        let tmp%11#0: bool = (! maybe_exists%0#0)
        (assert tmp%11#0)
        let tmp%12#4: account = ((gtxns Sender) xfer#0)
        let tmp%13#1: account = (txn Sender)
        let tmp%14#3: bool = (== tmp%12#4 tmp%13#1)
        (assert tmp%14#3)
        let tmp%15#3: account = ((gtxns AssetReceiver) xfer#0)
        let tmp%16#3: account = (global CurrentApplicationAddress)
        let tmp%17#1: bool = (== tmp%15#3 tmp%16#3)
        (assert tmp%17#1)
        let tmp%18#2: uint64 = ((gtxns AssetAmount) xfer#0)
        (assert tmp%18#2)
        let tmp%21#1: account = (global ZeroAddress)
        let array%val_as_bytes%5#1: bytes[8] = (itob tmp%18#2)
        let array%val_as_bytes%6#1: bytes[8] = (itob unitary_price#0)
        let array%encoded%9#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%5#1 array%val_as_bytes%6#1)
        let array%encoded%10#1: Encoded(uint64,uint64,uint8[32]) = (concat array%encoded%9#1 tmp%21#1)
        let array%val_as_bytes%7#1: bytes[8] = (itob 0u)
        let array%encoded%11#1: Encoded(uint64,uint64,uint8[32],uint64) = (concat array%encoded%10#1 array%val_as_bytes%7#1)
        let array%encoded%12#1: Encoded(uint64,uint64,uint8[32],uint64,uint64) = (concat array%encoded%11#1 array%val_as_bytes%7#1)
        (box_put box_prefixed_key%0#0 array%encoded%12#1)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0
        goto block@24
    block@8: // deposit_route_L98
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        let tmp%29#0: uint64 = (txn GroupIndex)
        let xfer#0: uint64 = (- tmp%29#0 1u)
        let gtxn_type%3#0: uint64 = ((gtxns TypeEnum) xfer#0)
        let gtxn_type_matches%3#0: bool = (== gtxn_type%3#0 axfer)
        (assert gtxn_type_matches%3#0) // transaction type is axfer
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let key.owner#0: account = (txn Sender)
        let key.asset#5: uint64 = ((gtxns XferAsset) xfer#0)
        let tmp%2#6: account = ((gtxns Sender) xfer#0)
        let tmp%3#6: account = (txn Sender)
        let tmp%4#0: bool = (== tmp%2#6 tmp%3#6)
        (assert tmp%4#0)
        let tmp%5#2: account = ((gtxns AssetReceiver) xfer#0)
        let tmp%6#1: account = (global CurrentApplicationAddress)
        let tmp%7#1: bool = (== tmp%5#2 tmp%6#1)
        (assert tmp%7#1)
        let tmp%8#5: uint64 = ((gtxns AssetAmount) xfer#0)
        (assert tmp%8#5)
        let array%val_as_bytes%9#1: bytes[8] = (itob key.asset#5)
        let array%encoded%15#1: Encoded(uint8[32],uint64) = (concat key.owner#0 array%val_as_bytes%9#1)
        let array%val_as_bytes%10#1: bytes[8] = (itob nonce#0)
        let array%encoded%16#1: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%15#1 array%val_as_bytes%10#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 array%encoded%16#1)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let existing.deposited#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let existing.unitaryPrice#1: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let existing.bidder#0: account = ((extract 16 32) maybe_value%0#0)
        let existing.bid#0: uint64 = (extract_uint64 maybe_value%0#0 48u)
        let existing.bidUnitaryPrice#0: uint64 = (extract_uint64 maybe_value%0#0 56u)
        let tmp%16#1: uint64 = (+ existing.deposited#0 tmp%8#5)
        let array%val_as_bytes%13#1: bytes[8] = (itob tmp%16#1)
        let array%val_as_bytes%14#1: bytes[8] = (itob existing.unitaryPrice#1)
        let array%encoded%23#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%13#1 array%val_as_bytes%14#1)
        let array%encoded%24#1: Encoded(uint64,uint64,uint8[32]) = (concat array%encoded%23#1 existing.bidder#0)
        let array%val_as_bytes%15#1: bytes[8] = (itob existing.bid#0)
        let array%encoded%25#1: Encoded(uint64,uint64,uint8[32],uint64) = (concat array%encoded%24#1 array%val_as_bytes%15#1)
        let array%val_as_bytes%16#1: bytes[8] = (itob existing.bidUnitaryPrice#0)
        let array%encoded%26#1: Encoded(uint64,uint64,uint8[32],uint64,uint64) = (concat array%encoded%25#1 array%val_as_bytes%16#1)
        (box_put box_prefixed_key%0#0 array%encoded%26#1)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0
        goto block@24
    block@9: // setPrice_route_L119
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%35#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let asset#0: uint64 = ((txnas Assets) tmp%35#0)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let unitary_price#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let key.owner#0: account = (txn Sender)
        let array%val_as_bytes%17#1: bytes[8] = (itob asset#0)
        let array%encoded%29#1: Encoded(uint8[32],uint64) = (concat key.owner#0 array%val_as_bytes%17#1)
        let array%val_as_bytes%18#1: bytes[8] = (itob nonce#0)
        let array%encoded%30#1: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%29#1 array%val_as_bytes%18#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 array%encoded%30#1)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let existing.deposited#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let existing.bidder#0: account = ((extract 16 32) maybe_value%0#0)
        let existing.bid#0: uint64 = (extract_uint64 maybe_value%0#0 48u)
        let existing.bidUnitaryPrice#0: uint64 = (extract_uint64 maybe_value%0#0 56u)
        let array%val_as_bytes%21#1: bytes[8] = (itob existing.deposited#0)
        let array%val_as_bytes%22#1: bytes[8] = (itob unitary_price#0)
        let array%encoded%37#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%21#1 array%val_as_bytes%22#1)
        let array%encoded%38#1: Encoded(uint64,uint64,uint8[32]) = (concat array%encoded%37#1 existing.bidder#0)
        let array%val_as_bytes%23#1: bytes[8] = (itob existing.bid#0)
        let array%encoded%39#1: Encoded(uint64,uint64,uint8[32],uint64) = (concat array%encoded%38#1 array%val_as_bytes%23#1)
        let array%val_as_bytes%24#1: bytes[8] = (itob existing.bidUnitaryPrice#0)
        let array%encoded%40#1: Encoded(uint64,uint64,uint8[32],uint64,uint64) = (concat array%encoded%39#1 array%val_as_bytes%24#1)
        (box_put box_prefixed_key%0#0 array%encoded%40#1)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0
        goto block@24
    block@10: // buy_route_L136
        let tmp%39#0: uint64 = (txn OnCompletion)
        let tmp%40#0: bool = (! tmp%39#0)
        (assert tmp%40#0) // OnCompletion is not NoOp
        let tmp%41#0: uint64 = (txn ApplicationID)
        (assert tmp%41#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%43#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let owner#0: account = ((txnas Accounts) tmp%43#0)
        let reinterpret_Encoded(uint8)%3#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%45#0: uint64 = (btoi reinterpret_Encoded(uint8)%3#0)
        let asset#0: uint64 = ((txnas Assets) tmp%45#0)
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%5#0)
        let tmp%48#0: uint64 = (txn GroupIndex)
        let buy_pay#0: uint64 = (- tmp%48#0 1u)
        let gtxn_type%4#0: uint64 = ((gtxns TypeEnum) buy_pay#0)
        let gtxn_type_matches%4#0: bool = (== gtxn_type%4#0 pay)
        (assert gtxn_type_matches%4#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let quantity#0: uint64 = (btoi reinterpret_Encoded(uint64)%6#0)
        let array%val_as_bytes%25#1: bytes[8] = (itob asset#0)
        let array%encoded%43#1: Encoded(uint8[32],uint64) = (concat owner#0 array%val_as_bytes%25#1)
        let array%val_as_bytes%26#1: bytes[8] = (itob nonce#0)
        let array%encoded%44#1: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%43#1 array%val_as_bytes%26#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 array%encoded%44#1)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let listing.deposited#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let listing.unitaryPrice#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let listing.bidder#0: account = ((extract 16 32) maybe_value%0#0)
        let listing.bid#0: uint64 = (extract_uint64 maybe_value%0#0 48u)
        let listing.bidUnitaryPrice#0: uint64 = (extract_uint64 maybe_value%0#0 56u)
        let (asset_decimals#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw listing.unitaryPrice#0 quantity#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#1: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#1: bool = (! _quotient_high#0)
        (assert tmp%8#1)
        let tmp%6#1: account = ((gtxns Sender) buy_pay#0)
        let tmp%7#4: account = (txn Sender)
        let tmp%8#1: bool = (== tmp%6#1 tmp%7#4)
        (assert tmp%8#1)
        let tmp%9#3: account = ((gtxns Receiver) buy_pay#0)
        let tmp%10#3: bool = (== tmp%9#3 owner#0)
        (assert tmp%10#3)
        let tmp%11#1: uint64 = ((gtxns Amount) buy_pay#0)
        let tmp%12#1: bool = (== tmp%11#1 amount_to_be_paid#1)
        (assert tmp%12#1)
        let tmp%13#2: uint64 = (- listing.deposited#0 quantity#0)
        let array%val_as_bytes%29#1: bytes[8] = (itob tmp%13#2)
        let array%val_as_bytes%30#1: bytes[8] = (itob listing.unitaryPrice#0)
        let array%encoded%51#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%29#1 array%val_as_bytes%30#1)
        let array%encoded%52#1: Encoded(uint64,uint64,uint8[32]) = (concat array%encoded%51#1 listing.bidder#0)
        let array%val_as_bytes%31#1: bytes[8] = (itob listing.bid#0)
        let array%encoded%53#1: Encoded(uint64,uint64,uint8[32],uint64) = (concat array%encoded%52#1 array%val_as_bytes%31#1)
        let array%val_as_bytes%32#1: bytes[8] = (itob listing.bidUnitaryPrice#0)
        let array%encoded%54#1: Encoded(uint64,uint64,uint8[32],uint64,uint64) = (concat array%encoded%53#1 array%val_as_bytes%32#1)
        (box_put box_prefixed_key%0#0 array%encoded%54#1)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (txn Sender)
        ((itxn_field AssetAmount) quantity#0)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0
        goto block@24
    block@11: // withdraw_route_L170
        let tmp%50#0: uint64 = (txn OnCompletion)
        let tmp%51#0: bool = (! tmp%50#0)
        (assert tmp%51#0) // OnCompletion is not NoOp
        let tmp%52#0: uint64 = (txn ApplicationID)
        (assert tmp%52#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%4#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%54#0: uint64 = (btoi reinterpret_Encoded(uint8)%4#0)
        let asset#0: uint64 = ((txnas Assets) tmp%54#0)
        let reinterpret_Encoded(uint64)%7#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%7#0)
        let key.owner#0: account = (txn Sender)
        let array%val_as_bytes%33#1: bytes[8] = (itob asset#0)
        let array%encoded%57#1: Encoded(uint8[32],uint64) = (concat key.owner#0 array%val_as_bytes%33#1)
        let array%val_as_bytes%34#1: bytes[8] = (itob nonce#0)
        let array%encoded%58#1: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%57#1 array%val_as_bytes%34#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 array%encoded%58#1)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let listing.deposited#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let listing.bidder#0: account = ((extract 16 32) maybe_value%0#0)
        let listing.bid#0: uint64 = (extract_uint64 maybe_value%0#0 48u)
        let listing.bidUnitaryPrice#0: uint64 = (extract_uint64 maybe_value%0#0 56u)
        let tmp%6#1: account = (global ZeroAddress)
        let tmp%7#1: bool = (!= listing.bidder#0 tmp%6#1)
        goto tmp%7#1 ? block@12 : block@13
    block@12: // if_body_L180
        let (asset_decimals#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw listing.bidUnitaryPrice#0 listing.bid#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#1: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#1: bool = (! _quotient_high#0)
        (assert tmp%8#1)
        itxn_begin
        ((itxn_field Amount) amount_to_be_paid#1)
        ((itxn_field Receiver) listing.bidder#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@13
    block@13: // after_if_else_L179
        (box_del box_prefixed_key%0#0)
        itxn_begin
        let inner_txn_params%1%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) 50500u)
        ((itxn_field Receiver) inner_txn_params%1%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        let inner_txn_params%2%%param_AssetReceiver_idx_0#0: account = (txn Sender)
        ((itxn_field AssetAmount) listing.deposited#0)
        ((itxn_field AssetReceiver) inner_txn_params%2%%param_AssetReceiver_idx_0#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0
        goto block@24
    block@14: // bid_route_L197
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        (assert tmp%59#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%5#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%61#0: uint64 = (btoi reinterpret_Encoded(uint8)%5#0)
        let owner#0: account = ((txnas Accounts) tmp%61#0)
        let reinterpret_Encoded(uint8)%6#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%63#0: uint64 = (btoi reinterpret_Encoded(uint8)%6#0)
        let asset#0: uint64 = ((txnas Assets) tmp%63#0)
        let reinterpret_Encoded(uint64)%8#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%8#0)
        let tmp%66#0: uint64 = (txn GroupIndex)
        let bid_pay#0: uint64 = (- tmp%66#0 1u)
        let gtxn_type%5#0: uint64 = ((gtxns TypeEnum) bid_pay#0)
        let gtxn_type_matches%5#0: bool = (== gtxn_type%5#0 pay)
        (assert gtxn_type_matches%5#0) // transaction type is pay
        let reinterpret_Encoded(uint64)%9#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let quantity#0: uint64 = (btoi reinterpret_Encoded(uint64)%9#0)
        let reinterpret_Encoded(uint64)%10#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let unitary_price#0: uint64 = (btoi reinterpret_Encoded(uint64)%10#0)
        let array%val_as_bytes%37#1: bytes[8] = (itob asset#0)
        let array%encoded%65#1: Encoded(uint8[32],uint64) = (concat owner#0 array%val_as_bytes%37#1)
        let array%val_as_bytes%38#1: bytes[8] = (itob nonce#0)
        let array%encoded%66#1: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%65#1 array%val_as_bytes%38#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 array%encoded%66#1)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let listing.deposited#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let listing.unitaryPrice#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let listing.bidder#0: account = ((extract 16 32) maybe_value%0#0)
        let listing.bid#0: uint64 = (extract_uint64 maybe_value%0#0 48u)
        let listing.bidUnitaryPrice#0: uint64 = (extract_uint64 maybe_value%0#0 56u)
        let tmp%5#2: account = (global ZeroAddress)
        let tmp%6#2: bool = (!= listing.bidder#0 tmp%5#2)
        goto tmp%6#2 ? block@15 : block@16
    block@15: // if_body_L207
        let tmp%7#1: bool = (> unitary_price#0 listing.bidUnitaryPrice#0)
        (assert tmp%7#1)
        let (asset_decimals#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw listing.bidUnitaryPrice#0 listing.bid#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#1: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#1: bool = (! _quotient_high#0)
        (assert tmp%8#1)
        itxn_begin
        ((itxn_field Amount) amount_to_be_paid#1)
        ((itxn_field Receiver) listing.bidder#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@16
    block@16: // after_if_else_L206
        let (asset_decimals#0: uint64, check%1#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%1#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw unitary_price#0 quantity#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#1: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#1: bool = (! _quotient_high#0)
        (assert tmp%8#1)
        let tmp%10#2: account = ((gtxns Sender) bid_pay#0)
        let tmp%11#2: account = (txn Sender)
        let tmp%12#1: bool = (== tmp%10#2 tmp%11#2)
        (assert tmp%12#1)
        let tmp%13#1: account = ((gtxns Receiver) bid_pay#0)
        let tmp%14#1: account = (global CurrentApplicationAddress)
        let tmp%15#1: bool = (== tmp%13#1 tmp%14#1)
        (assert tmp%15#1)
        let tmp%16#1: uint64 = ((gtxns Amount) bid_pay#0)
        let tmp%17#1: bool = (== tmp%16#1 amount_to_be_paid#1)
        (assert tmp%17#1)
        let tmp%18#1: account = (txn Sender)
        let array%val_as_bytes%41#1: bytes[8] = (itob listing.deposited#0)
        let array%val_as_bytes%42#1: bytes[8] = (itob listing.unitaryPrice#0)
        let array%encoded%73#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%41#1 array%val_as_bytes%42#1)
        let array%encoded%74#1: Encoded(uint64,uint64,uint8[32]) = (concat array%encoded%73#1 tmp%18#1)
        let array%val_as_bytes%43#1: bytes[8] = (itob quantity#0)
        let array%encoded%75#1: Encoded(uint64,uint64,uint8[32],uint64) = (concat array%encoded%74#1 array%val_as_bytes%43#1)
        let array%val_as_bytes%44#1: bytes[8] = (itob unitary_price#0)
        let array%encoded%76#1: Encoded(uint64,uint64,uint8[32],uint64,uint64) = (concat array%encoded%75#1 array%val_as_bytes%44#1)
        (box_put box_prefixed_key%0#0 array%encoded%76#1)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0
        goto block@24
    block@17: // acceptBid_route_L235
        let tmp%69#0: uint64 = (txn OnCompletion)
        let tmp%70#0: bool = (! tmp%69#0)
        (assert tmp%70#0) // OnCompletion is not NoOp
        let tmp%71#0: uint64 = (txn ApplicationID)
        (assert tmp%71#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%7#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%73#0: uint64 = (btoi reinterpret_Encoded(uint8)%7#0)
        let asset#0: uint64 = ((txnas Assets) tmp%73#0)
        let reinterpret_Encoded(uint64)%11#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let nonce#0: uint64 = (btoi reinterpret_Encoded(uint64)%11#0)
        let key.owner#0: account = (txn Sender)
        let array%val_as_bytes%45#1: bytes[8] = (itob asset#0)
        let array%encoded%79#1: Encoded(uint8[32],uint64) = (concat key.owner#0 array%val_as_bytes%45#1)
        let array%val_as_bytes%46#1: bytes[8] = (itob nonce#0)
        let array%encoded%80#1: Encoded(uint8[32],uint64,uint64) = (concat array%encoded%79#1 array%val_as_bytes%46#1)
        let box_prefixed_key%0#0: bytes = (concat 0x6c697374696e6773 array%encoded%80#1)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%0#0)
        (assert maybe_exists%0#0) // check self.listings entry exists
        let listing.deposited#0: uint64 = (extract_uint64 maybe_value%0#0 0u)
        let listing.unitaryPrice#0: uint64 = (extract_uint64 maybe_value%0#0 8u)
        let listing.bidder#0: account = ((extract 16 32) maybe_value%0#0)
        let listing.bid#0: uint64 = (extract_uint64 maybe_value%0#0 48u)
        let listing.bidUnitaryPrice#0: uint64 = (extract_uint64 maybe_value%0#0 56u)
        let tmp%6#1: account = (global ZeroAddress)
        let tmp%7#1: bool = (!= listing.bidder#0 tmp%6#1)
        (assert tmp%7#1)
        let tmp%8#1: bool = (< listing.deposited#0 listing.bid#0)
        goto tmp%8#1 ? block@18 : block@19
    block@18: // ternary_true_L246
        let min_quantity#0: uint64 = listing.deposited#0
        goto block@20
    block@19: // ternary_false_L246
        let min_quantity#0: uint64 = listing.bid#0
        goto block@20
    block@20: // ternary_merge_L246
        let (asset_decimals#0: uint64, check%0#0: bool) = ((asset_params_get AssetDecimals) asset#0)
        (assert check%0#0) // asset exists
        let (amount_not_scaled_high#0: uint64, amount_not_scaled_low#0: uint64) = (mulw listing.bidUnitaryPrice#0 min_quantity#0)
        let (scaling_factor_high#0: uint64, scaling_factor_low#0: uint64) = (expw 10u asset_decimals#0)
        let (_quotient_high#0: uint64, amount_to_be_paid#1: uint64, _remainder_high#0: uint64, _remainder_low#0: uint64) = (divmodw amount_not_scaled_high#0 amount_not_scaled_low#0 scaling_factor_high#0 scaling_factor_low#0)
        let tmp%8#1: bool = (! _quotient_high#0)
        (assert tmp%8#1)
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Amount) amount_to_be_paid#1)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field AssetAmount) min_quantity#0)
        ((itxn_field AssetReceiver) listing.bidder#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%10#0: uint64 = (- listing.deposited#0 min_quantity#0)
        let tmp%11#1: uint64 = (- listing.bid#0 min_quantity#0)
        let array%val_as_bytes%49#1: bytes[8] = (itob tmp%10#0)
        let array%val_as_bytes%50#1: bytes[8] = (itob listing.unitaryPrice#0)
        let array%encoded%87#1: Encoded(uint64,uint64) = (concat array%val_as_bytes%49#1 array%val_as_bytes%50#1)
        let array%encoded%88#1: Encoded(uint64,uint64,uint8[32]) = (concat array%encoded%87#1 listing.bidder#0)
        let array%val_as_bytes%51#1: bytes[8] = (itob tmp%11#1)
        let array%encoded%89#1: Encoded(uint64,uint64,uint8[32],uint64) = (concat array%encoded%88#1 array%val_as_bytes%51#1)
        let array%val_as_bytes%52#1: bytes[8] = (itob listing.bidUnitaryPrice#0)
        let array%encoded%90#1: Encoded(uint64,uint64,uint8[32],uint64,uint64) = (concat array%encoded%89#1 array%val_as_bytes%52#1)
        (box_put box_prefixed_key%0#0 array%encoded%90#1)
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0
        goto block@24
    block@21: // bare_routing_L17
        let tmp%76#0: uint64 = (txn OnCompletion)
        goto tmp%76#0 ? block@23 : block@22
    block@22: // __algopy_default_create_L1
        let tmp%77#0: uint64 = (txn ApplicationID)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0) // can only call when creating
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0
        goto block@24
    block@23: // after_if_else_L17
        let marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router__%0#0
        goto block@24
    block@24: // after_inlined_marketplace_with_tups.DigitalMarketplaceWithTups.__puya_arc4_router___L1
        return tmp%0#0