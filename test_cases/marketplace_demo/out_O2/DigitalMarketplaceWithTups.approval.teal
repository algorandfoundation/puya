#pragma version 10
#pragma typetrack false

// test_cases.marketplace_demo.marketplace_with_tups.DigitalMarketplaceWithTups.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 4 10 50500
    bytecblock 0x6c697374696e6773
    intc_1 // 0
    dupn 4
    pushbytes ""
    dupn 6
    txn ApplicationID
    bnz main_after_if_else@2
    pushbytes "init"
    log

main_after_if_else@2:
    txn NumAppArgs
    bz main_bare_routing@21
    pushbytess 0xd98ef6a9 0x6a4e7fca 0x12f08c98 0x9b4b8234 0x4d8b23d8 0x52ac5df7 0xe3aeb25c 0x3234b711 0xcc826346 // method "getListingsMbr()uint64", method "allowAsset(pay,uint64)void", method "firstDeposit(pay,axfer,uint64,uint64)void", method "deposit(axfer,uint64)void", method "setPrice(uint64,uint64,uint64)void", method "buy(address,uint64,uint64,pay,uint64)void", method "withdraw(uint64,uint64)void", method "bid(address,uint64,uint64,pay,uint64,uint64)void", method "acceptBid(uint64,uint64)void"
    txna ApplicationArgs 0
    match main_getListingsMbr_route@5 main_allowAsset_route@6 main_firstDeposit_route@7 main_deposit_route@8 main_setPrice_route@9 main_buy_route@10 main_withdraw_route@11 main_bid_route@14 main_acceptBid_route@17

main_after_if_else@23:
    err

main_acceptBid_route@17:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    dup
    bury 8
    txna ApplicationArgs 2
    btoi
    txn Sender
    uncover 2
    itob
    concat
    swap
    itob
    concat
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    bury 10
    box_get
    assert // check self.listings entry exists
    dup
    intc_1 // 0
    extract_uint64
    dup
    cover 2
    bury 5
    dup
    extract 8 8
    bury 12
    dup
    extract 16 32
    dup
    cover 2
    bury 11
    dup
    pushint 48 // 48
    extract_uint64
    dup
    cover 3
    bury 9
    pushint 56 // 56
    extract_uint64
    bury 7
    global ZeroAddress
    !=
    assert
    <
    bz main_ternary_false@19
    dig 2

main_ternary_merge@20:
    dig 7
    dup
    asset_params_get AssetDecimals
    assert // asset exists
    dig 6
    dup
    cover 3
    uncover 4
    dup
    cover 3
    mulw
    intc_3 // 10
    uncover 3
    expw
    divmodw
    popn 2
    swap
    !
    assert
    itxn_begin
    txn Sender
    itxn_field Receiver
    itxn_field Amount
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    itxn_begin
    dup
    itxn_field AssetAmount
    dig 10
    dup
    cover 2
    itxn_field AssetReceiver
    uncover 2
    itxn_field XferAsset
    intc_2 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    dig 5
    dig 1
    -
    dig 8
    uncover 2
    -
    swap
    itob
    dig 13
    concat
    uncover 2
    concat
    swap
    itob
    concat
    swap
    itob
    concat
    dig 9
    swap
    box_put
    intc_0 // 1
    return

main_ternary_false@19:
    dig 4
    b main_ternary_merge@20

main_bid_route@14:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    dup
    bury 9
    txna ApplicationArgs 3
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    bury 10
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 4
    btoi
    bury 5
    txna ApplicationArgs 5
    btoi
    bury 4
    swap
    itob
    uncover 2
    swap
    concat
    swap
    itob
    concat
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    bury 10
    box_get
    assert // check self.listings entry exists
    dup
    extract 0 8
    bury 13
    dup
    extract 8 8
    bury 12
    dup
    extract 16 32
    dup
    cover 2
    bury 10
    dup
    pushint 48 // 48
    extract_uint64
    bury 7
    pushint 56 // 56
    extract_uint64
    bury 5
    global ZeroAddress
    !=
    bz main_after_if_else@16
    dup
    dig 4
    dup
    cover 2
    >
    assert
    dig 7
    asset_params_get AssetDecimals
    assert // asset exists
    swap
    dig 6
    mulw
    intc_3 // 10
    uncover 3
    expw
    divmodw
    popn 2
    swap
    !
    assert
    itxn_begin
    itxn_field Amount
    dig 7
    itxn_field Receiver
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit

main_after_if_else@16:
    dig 6
    asset_params_get AssetDecimals
    assert // asset exists
    dig 1
    dup
    cover 2
    dig 4
    dup
    cover 3
    mulw
    intc_3 // 10
    uncover 3
    expw
    divmodw
    popn 2
    swap
    !
    assert
    dig 8
    dup
    gtxns Sender
    txn Sender
    ==
    assert
    dup
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    gtxns Amount
    ==
    assert
    txn Sender
    dig 14
    dig 14
    concat
    swap
    concat
    swap
    itob
    concat
    swap
    itob
    concat
    dig 9
    swap
    box_put
    intc_0 // 1
    return

main_withdraw_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    dup
    bury 8
    txna ApplicationArgs 2
    btoi
    txn Sender
    uncover 2
    itob
    concat
    swap
    itob
    concat
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    bury 10
    box_get
    assert // check self.listings entry exists
    dup
    intc_1 // 0
    extract_uint64
    bury 4
    dup
    extract 16 32
    dup
    cover 2
    bury 10
    dup
    pushint 48 // 48
    extract_uint64
    bury 7
    pushint 56 // 56
    extract_uint64
    bury 5
    global ZeroAddress
    !=
    bz main_after_if_else@13
    dig 6
    asset_params_get AssetDecimals
    assert // asset exists
    dig 4
    dig 6
    mulw
    intc_3 // 10
    uncover 3
    expw
    divmodw
    popn 2
    swap
    !
    assert
    itxn_begin
    itxn_field Amount
    dig 7
    itxn_field Receiver
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit

main_after_if_else@13:
    dig 8
    box_del
    pop
    itxn_begin
    txn Sender
    intc 4 // 50500
    itxn_field Amount
    itxn_field Receiver
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    itxn_begin
    txn Sender
    dig 3
    itxn_field AssetAmount
    itxn_field AssetReceiver
    dig 6
    itxn_field XferAsset
    intc_2 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    intc_0 // 1
    return

main_buy_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 4
    btoi
    dig 3
    itob
    dig 5
    swap
    concat
    uncover 3
    itob
    concat
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    box_get
    assert // check self.listings entry exists
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    pushint 8 // 8
    extract_uint64
    dig 2
    extract 16 32
    dig 3
    extract 48 8
    uncover 4
    extract 56 8
    dig 8
    asset_params_get AssetDecimals
    assert // asset exists
    dig 4
    dig 8
    mulw
    intc_3 // 10
    uncover 3
    expw
    divmodw
    popn 2
    swap
    !
    assert
    dig 8
    gtxns Sender
    txn Sender
    ==
    assert
    dig 8
    gtxns Receiver
    uncover 11
    ==
    assert
    uncover 8
    gtxns Amount
    ==
    assert
    uncover 4
    dig 6
    -
    itob
    uncover 4
    itob
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    box_put
    itxn_begin
    txn Sender
    itxn_field AssetReceiver
    itxn_field AssetAmount
    itxn_field XferAsset
    intc_2 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    intc_0 // 1
    return

main_setPrice_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txn Sender
    uncover 3
    itob
    concat
    uncover 2
    itob
    concat
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    box_get
    assert // check self.listings entry exists
    dup
    extract 0 8
    dig 1
    extract 16 32
    dig 2
    extract 48 8
    uncover 3
    extract 56 8
    uncover 5
    itob
    uncover 4
    swap
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    box_put
    intc_0 // 1
    return

main_deposit_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txn Sender
    dig 2
    gtxns XferAsset
    dig 3
    gtxns Sender
    txn Sender
    ==
    assert
    dig 3
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert
    uncover 3
    gtxns AssetAmount
    dup
    assert
    swap
    itob
    uncover 2
    swap
    concat
    uncover 2
    itob
    concat
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    box_get
    assert // check self.listings entry exists
    dup
    intc_1 // 0
    extract_uint64
    dig 1
    extract 8 8
    dig 2
    extract 16 32
    dig 3
    extract 48 8
    uncover 4
    extract 56 8
    uncover 4
    uncover 6
    +
    itob
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    box_put
    intc_0 // 1
    return

main_firstDeposit_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    dig 3
    gtxns Sender
    txn Sender
    ==
    assert
    dig 3
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    uncover 3
    gtxns Amount
    intc 4 // 50500
    ==
    assert
    txn Sender
    dig 3
    gtxns XferAsset
    itob
    concat
    swap
    itob
    concat
    bytec_0 // 0x6c697374696e6773
    swap
    concat
    dup
    box_len
    bury 1
    !
    assert
    dig 2
    gtxns Sender
    txn Sender
    ==
    assert
    dig 2
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert
    uncover 2
    gtxns AssetAmount
    dup
    assert
    global ZeroAddress
    swap
    itob
    uncover 3
    itob
    concat
    swap
    concat
    intc_1 // 0
    itob
    swap
    dig 1
    concat
    swap
    concat
    box_put
    intc_0 // 1
    return

main_allowAsset_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    global CurrentApplicationAddress
    dig 1
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    dig 1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    swap
    gtxns Amount
    global AssetOptInMinBalance
    ==
    assert
    itxn_begin
    global CurrentApplicationAddress
    intc_1 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    intc_2 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    intc_0 // 1
    return

main_getListingsMbr_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c75000000000000c544
    log
    intc_0 // 1
    return

main_bare_routing@21:
    txn OnCompletion
    bnz main_after_if_else@23
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
