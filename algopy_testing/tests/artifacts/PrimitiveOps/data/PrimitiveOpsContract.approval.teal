#pragma version 10

tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.approval_program:
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@31
    method "verify_uint64_init(byte[])uint64"
    method "verify_uint64_add(uint64,uint64)uint64"
    method "verify_uint64_sub(uint64,uint64)uint64"
    method "verify_uint64_mul(uint64,uint64)uint64"
    method "verify_uint64_div(uint64,uint64)uint64"
    method "verify_uint64_mod(uint64,uint64)uint64"
    method "verify_uint64_and(uint64,uint64)uint64"
    method "verify_uint64_or(uint64,uint64)uint64"
    method "verify_uint64_xor(uint64,uint64)uint64"
    method "verify_uint64_not(uint64)uint64"
    method "verify_uint64_lshift(uint64,uint64)uint64"
    method "verify_uint64_rshift(uint64,uint64)uint64"
    method "verify_uint64_pow(uint64,uint64)uint64"
    method "verify_uint64_eq(uint64,uint64)bool"
    method "verify_uint64_ne(uint64,uint64)bool"
    method "verify_uint64_lt(uint64,uint64)bool"
    method "verify_uint64_le(uint64,uint64)bool"
    method "verify_uint64_gt(uint64,uint64)bool"
    method "verify_uint64_ge(uint64,uint64)bool"
    method "verify_bytes_init(uint64)byte[]"
    method "verify_bytes_add(byte[],byte[])byte[]"
    method "verify_bytes_eq(byte[],byte[])bool"
    method "verify_bytes_ne(byte[],byte[])bool"
    method "verify_bytes_and(byte[],byte[])byte[]"
    method "verify_bytes_or(byte[],byte[])byte[]"
    method "verify_bytes_xor(byte[],byte[])byte[]"
    method "verify_bytes_not(byte[])byte[]"
    txna ApplicationArgs 0
    match main_verify_uint64_init_route@2 main_verify_uint64_add_route@3 main_verify_uint64_sub_route@4 main_verify_uint64_mul_route@5 main_verify_uint64_div_route@6 main_verify_uint64_mod_route@7 main_verify_uint64_and_route@8 main_verify_uint64_or_route@9 main_verify_uint64_xor_route@10 main_verify_uint64_not_route@11 main_verify_uint64_lshift_route@12 main_verify_uint64_rshift_route@13 main_verify_uint64_pow_route@14 main_verify_uint64_eq_route@15 main_verify_uint64_ne_route@16 main_verify_uint64_lt_route@17 main_verify_uint64_le_route@18 main_verify_uint64_gt_route@19 main_verify_uint64_ge_route@20 main_verify_bytes_init_route@21 main_verify_bytes_add_route@22 main_verify_bytes_eq_route@23 main_verify_bytes_ne_route@24 main_verify_bytes_and_route@25 main_verify_bytes_or_route@26 main_verify_bytes_xor_route@27 main_verify_bytes_not_route@28
    err // reject transaction

main_verify_uint64_init_route@2:
    // tests/artifacts/PrimitiveOps/contract.py:5
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:5
    // @arc4.abimethod()
    callsub verify_uint64_init
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_add_route@3:
    // tests/artifacts/PrimitiveOps/contract.py:10
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:10
    // @arc4.abimethod()
    callsub verify_uint64_add
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_sub_route@4:
    // tests/artifacts/PrimitiveOps/contract.py:15
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:15
    // @arc4.abimethod()
    callsub verify_uint64_sub
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_mul_route@5:
    // tests/artifacts/PrimitiveOps/contract.py:20
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:20
    // @arc4.abimethod()
    callsub verify_uint64_mul
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_div_route@6:
    // tests/artifacts/PrimitiveOps/contract.py:25
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:25
    // @arc4.abimethod()
    callsub verify_uint64_div
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_mod_route@7:
    // tests/artifacts/PrimitiveOps/contract.py:30
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:30
    // @arc4.abimethod()
    callsub verify_uint64_mod
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_and_route@8:
    // tests/artifacts/PrimitiveOps/contract.py:35
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:35
    // @arc4.abimethod()
    callsub verify_uint64_and
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_or_route@9:
    // tests/artifacts/PrimitiveOps/contract.py:40
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:40
    // @arc4.abimethod()
    callsub verify_uint64_or
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_xor_route@10:
    // tests/artifacts/PrimitiveOps/contract.py:45
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:45
    // @arc4.abimethod()
    callsub verify_uint64_xor
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_not_route@11:
    // tests/artifacts/PrimitiveOps/contract.py:50
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:50
    // @arc4.abimethod()
    callsub verify_uint64_not
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_lshift_route@12:
    // tests/artifacts/PrimitiveOps/contract.py:55
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:55
    // @arc4.abimethod()
    callsub verify_uint64_lshift
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_rshift_route@13:
    // tests/artifacts/PrimitiveOps/contract.py:60
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:60
    // @arc4.abimethod()
    callsub verify_uint64_rshift
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_pow_route@14:
    // tests/artifacts/PrimitiveOps/contract.py:65
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:65
    // @arc4.abimethod()
    callsub verify_uint64_pow
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_eq_route@15:
    // tests/artifacts/PrimitiveOps/contract.py:70
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:70
    // @arc4.abimethod()
    callsub verify_uint64_eq
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_ne_route@16:
    // tests/artifacts/PrimitiveOps/contract.py:75
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:75
    // @arc4.abimethod()
    callsub verify_uint64_ne
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_lt_route@17:
    // tests/artifacts/PrimitiveOps/contract.py:80
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:80
    // @arc4.abimethod()
    callsub verify_uint64_lt
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_le_route@18:
    // tests/artifacts/PrimitiveOps/contract.py:85
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:85
    // @arc4.abimethod()
    callsub verify_uint64_le
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_gt_route@19:
    // tests/artifacts/PrimitiveOps/contract.py:90
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:90
    // @arc4.abimethod()
    callsub verify_uint64_gt
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_ge_route@20:
    // tests/artifacts/PrimitiveOps/contract.py:95
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:95
    // @arc4.abimethod()
    callsub verify_uint64_ge
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_bytes_init_route@21:
    // tests/artifacts/PrimitiveOps/contract.py:100
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:100
    // @arc4.abimethod()
    callsub verify_bytes_init
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_bytes_add_route@22:
    // tests/artifacts/PrimitiveOps/contract.py:105
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:105
    // @arc4.abimethod()
    callsub verify_bytes_add
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_bytes_eq_route@23:
    // tests/artifacts/PrimitiveOps/contract.py:110
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:110
    // @arc4.abimethod()
    callsub verify_bytes_eq
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_bytes_ne_route@24:
    // tests/artifacts/PrimitiveOps/contract.py:115
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:115
    // @arc4.abimethod()
    callsub verify_bytes_ne
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_bytes_and_route@25:
    // tests/artifacts/PrimitiveOps/contract.py:120
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:120
    // @arc4.abimethod()
    callsub verify_bytes_and
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_bytes_or_route@26:
    // tests/artifacts/PrimitiveOps/contract.py:125
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:125
    // @arc4.abimethod()
    callsub verify_bytes_or
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_bytes_xor_route@27:
    // tests/artifacts/PrimitiveOps/contract.py:130
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:130
    // @arc4.abimethod()
    callsub verify_bytes_xor
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_bytes_not_route@28:
    // tests/artifacts/PrimitiveOps/contract.py:135
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:135
    // @arc4.abimethod()
    callsub verify_bytes_not
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@31:
    // tests/artifacts/PrimitiveOps/contract.py:4
    // class PrimitiveOpsContract(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_init(raw_value: bytes) -> uint64:
verify_uint64_init:
    // tests/artifacts/PrimitiveOps/contract.py:5-6
    // @arc4.abimethod()
    // def verify_uint64_init(self, raw_value: Bytes) -> UInt64:
    proto 1 1
    // tests/artifacts/PrimitiveOps/contract.py:7
    // result = op.btoi(raw_value)
    frame_dig -1
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:8
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_add(a: uint64, b: uint64) -> uint64:
verify_uint64_add:
    // tests/artifacts/PrimitiveOps/contract.py:10-11
    // @arc4.abimethod()
    // def verify_uint64_add(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:12
    // result = a + b
    frame_dig -2
    frame_dig -1
    +
    // tests/artifacts/PrimitiveOps/contract.py:13
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_sub(a: uint64, b: uint64) -> uint64:
verify_uint64_sub:
    // tests/artifacts/PrimitiveOps/contract.py:15-16
    // @arc4.abimethod()
    // def verify_uint64_sub(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:17
    // result = a - b
    frame_dig -2
    frame_dig -1
    -
    // tests/artifacts/PrimitiveOps/contract.py:18
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_mul(a: uint64, b: uint64) -> uint64:
verify_uint64_mul:
    // tests/artifacts/PrimitiveOps/contract.py:20-21
    // @arc4.abimethod()
    // def verify_uint64_mul(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:22
    // result = a * b
    frame_dig -2
    frame_dig -1
    *
    // tests/artifacts/PrimitiveOps/contract.py:23
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_div(a: uint64, b: uint64) -> uint64:
verify_uint64_div:
    // tests/artifacts/PrimitiveOps/contract.py:25-26
    // @arc4.abimethod()
    // def verify_uint64_div(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:27
    // result = a // b
    frame_dig -2
    frame_dig -1
    /
    // tests/artifacts/PrimitiveOps/contract.py:28
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_mod(a: uint64, b: uint64) -> uint64:
verify_uint64_mod:
    // tests/artifacts/PrimitiveOps/contract.py:30-31
    // @arc4.abimethod()
    // def verify_uint64_mod(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:32
    // result = a % b
    frame_dig -2
    frame_dig -1
    %
    // tests/artifacts/PrimitiveOps/contract.py:33
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_and(a: uint64, b: uint64) -> uint64:
verify_uint64_and:
    // tests/artifacts/PrimitiveOps/contract.py:35-36
    // @arc4.abimethod()
    // def verify_uint64_and(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:37
    // result = a & b
    frame_dig -2
    frame_dig -1
    &
    // tests/artifacts/PrimitiveOps/contract.py:38
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_or(a: uint64, b: uint64) -> uint64:
verify_uint64_or:
    // tests/artifacts/PrimitiveOps/contract.py:40-41
    // @arc4.abimethod()
    // def verify_uint64_or(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:42
    // result = a | b
    frame_dig -2
    frame_dig -1
    |
    // tests/artifacts/PrimitiveOps/contract.py:43
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_xor(a: uint64, b: uint64) -> uint64:
verify_uint64_xor:
    // tests/artifacts/PrimitiveOps/contract.py:45-46
    // @arc4.abimethod()
    // def verify_uint64_xor(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:47
    // result = a ^ b
    frame_dig -2
    frame_dig -1
    ^
    // tests/artifacts/PrimitiveOps/contract.py:48
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_not(a: uint64) -> uint64:
verify_uint64_not:
    // tests/artifacts/PrimitiveOps/contract.py:50-51
    // @arc4.abimethod()
    // def verify_uint64_not(self, a: UInt64) -> UInt64:
    proto 1 1
    // tests/artifacts/PrimitiveOps/contract.py:52
    // result = ~a
    frame_dig -1
    ~
    // tests/artifacts/PrimitiveOps/contract.py:53
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_lshift(a: uint64, b: uint64) -> uint64:
verify_uint64_lshift:
    // tests/artifacts/PrimitiveOps/contract.py:55-56
    // @arc4.abimethod()
    // def verify_uint64_lshift(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:57
    // result = a << b
    frame_dig -2
    frame_dig -1
    shl
    // tests/artifacts/PrimitiveOps/contract.py:58
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_rshift(a: uint64, b: uint64) -> uint64:
verify_uint64_rshift:
    // tests/artifacts/PrimitiveOps/contract.py:60-61
    // @arc4.abimethod()
    // def verify_uint64_rshift(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:62
    // result = a >> b
    frame_dig -2
    frame_dig -1
    shr
    // tests/artifacts/PrimitiveOps/contract.py:63
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_pow(a: uint64, b: uint64) -> uint64:
verify_uint64_pow:
    // tests/artifacts/PrimitiveOps/contract.py:65-66
    // @arc4.abimethod()
    // def verify_uint64_pow(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:67
    // result = a**b
    frame_dig -2
    frame_dig -1
    exp
    // tests/artifacts/PrimitiveOps/contract.py:68
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_eq(a: uint64, b: uint64) -> uint64:
verify_uint64_eq:
    // tests/artifacts/PrimitiveOps/contract.py:70-71
    // @arc4.abimethod()
    // def verify_uint64_eq(self, a: UInt64, b: UInt64) -> bool:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:72
    // result = a == b
    frame_dig -2
    frame_dig -1
    ==
    // tests/artifacts/PrimitiveOps/contract.py:73
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_ne(a: uint64, b: uint64) -> uint64:
verify_uint64_ne:
    // tests/artifacts/PrimitiveOps/contract.py:75-76
    // @arc4.abimethod()
    // def verify_uint64_ne(self, a: UInt64, b: UInt64) -> bool:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:77
    // result = a != b
    frame_dig -2
    frame_dig -1
    !=
    // tests/artifacts/PrimitiveOps/contract.py:78
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_lt(a: uint64, b: uint64) -> uint64:
verify_uint64_lt:
    // tests/artifacts/PrimitiveOps/contract.py:80-81
    // @arc4.abimethod()
    // def verify_uint64_lt(self, a: UInt64, b: UInt64) -> bool:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:82
    // result = a < b
    frame_dig -2
    frame_dig -1
    <
    // tests/artifacts/PrimitiveOps/contract.py:83
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_le(a: uint64, b: uint64) -> uint64:
verify_uint64_le:
    // tests/artifacts/PrimitiveOps/contract.py:85-86
    // @arc4.abimethod()
    // def verify_uint64_le(self, a: UInt64, b: UInt64) -> bool:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:87
    // result = a <= b
    frame_dig -2
    frame_dig -1
    <=
    // tests/artifacts/PrimitiveOps/contract.py:88
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_gt(a: uint64, b: uint64) -> uint64:
verify_uint64_gt:
    // tests/artifacts/PrimitiveOps/contract.py:90-91
    // @arc4.abimethod()
    // def verify_uint64_gt(self, a: UInt64, b: UInt64) -> bool:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:92
    // result = a > b
    frame_dig -2
    frame_dig -1
    >
    // tests/artifacts/PrimitiveOps/contract.py:93
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_ge(a: uint64, b: uint64) -> uint64:
verify_uint64_ge:
    // tests/artifacts/PrimitiveOps/contract.py:95-96
    // @arc4.abimethod()
    // def verify_uint64_ge(self, a: UInt64, b: UInt64) -> bool:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:97
    // result = a >= b
    frame_dig -2
    frame_dig -1
    >=
    // tests/artifacts/PrimitiveOps/contract.py:98
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_init(raw_value: uint64) -> bytes:
verify_bytes_init:
    // tests/artifacts/PrimitiveOps/contract.py:100-101
    // @arc4.abimethod()
    // def verify_bytes_init(self, raw_value: UInt64) -> Bytes:
    proto 1 1
    // tests/artifacts/PrimitiveOps/contract.py:102
    // result = op.itob(raw_value)
    frame_dig -1
    itob
    // tests/artifacts/PrimitiveOps/contract.py:103
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_add(a: bytes, b: bytes) -> bytes:
verify_bytes_add:
    // tests/artifacts/PrimitiveOps/contract.py:105-106
    // @arc4.abimethod()
    // def verify_bytes_add(self, a: Bytes, b: Bytes) -> Bytes:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:107
    // result = a + b
    frame_dig -2
    frame_dig -1
    concat
    // tests/artifacts/PrimitiveOps/contract.py:108
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_eq(a: bytes, b: bytes) -> uint64:
verify_bytes_eq:
    // tests/artifacts/PrimitiveOps/contract.py:110-111
    // @arc4.abimethod()
    // def verify_bytes_eq(self, a: Bytes, b: Bytes) -> bool:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:112
    // result = a == b
    frame_dig -2
    frame_dig -1
    ==
    // tests/artifacts/PrimitiveOps/contract.py:113
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_ne(a: bytes, b: bytes) -> uint64:
verify_bytes_ne:
    // tests/artifacts/PrimitiveOps/contract.py:115-116
    // @arc4.abimethod()
    // def verify_bytes_ne(self, a: Bytes, b: Bytes) -> bool:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:117
    // result = a != b
    frame_dig -2
    frame_dig -1
    !=
    // tests/artifacts/PrimitiveOps/contract.py:118
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_and(a: bytes, b: bytes) -> bytes:
verify_bytes_and:
    // tests/artifacts/PrimitiveOps/contract.py:120-121
    // @arc4.abimethod()
    // def verify_bytes_and(self, a: Bytes, b: Bytes) -> Bytes:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:122
    // result = a & b
    frame_dig -2
    frame_dig -1
    b&
    // tests/artifacts/PrimitiveOps/contract.py:123
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_or(a: bytes, b: bytes) -> bytes:
verify_bytes_or:
    // tests/artifacts/PrimitiveOps/contract.py:125-126
    // @arc4.abimethod()
    // def verify_bytes_or(self, a: Bytes, b: Bytes) -> Bytes:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:127
    // result = a | b
    frame_dig -2
    frame_dig -1
    b|
    // tests/artifacts/PrimitiveOps/contract.py:128
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_xor(a: bytes, b: bytes) -> bytes:
verify_bytes_xor:
    // tests/artifacts/PrimitiveOps/contract.py:130-131
    // @arc4.abimethod()
    // def verify_bytes_xor(self, a: Bytes, b: Bytes) -> Bytes:
    proto 2 1
    // tests/artifacts/PrimitiveOps/contract.py:132
    // result = a ^ b
    frame_dig -2
    frame_dig -1
    b^
    // tests/artifacts/PrimitiveOps/contract.py:133
    // return result
    retsub


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_not(a: bytes) -> bytes:
verify_bytes_not:
    // tests/artifacts/PrimitiveOps/contract.py:135-136
    // @arc4.abimethod()
    // def verify_bytes_not(self, a: Bytes) -> Bytes:
    proto 1 1
    // tests/artifacts/PrimitiveOps/contract.py:137
    // result = ~a
    frame_dig -1
    b~
    // tests/artifacts/PrimitiveOps/contract.py:138
    // return result
    retsub
