{
    "hints": {
        "verify_addw(uint64,uint64)(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_base64_decode_standard(byte[])byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_base64_decode_url(byte[])byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_bytes_bitlen(byte[],uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_uint64_bitlen(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_bsqrt(byte[])byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_btoi(byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_bzero(uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_concat(byte[],byte[],uint64,uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_divmodw(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_divw(uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_err()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_exp(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_expw(uint64,uint64)(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_extract(byte[],uint64,uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_extract_from_2(byte[])byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_extract_uint16(byte[],uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_extract_uint32(byte[],uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_extract_uint64(byte[],uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_getbit_bytes(byte[],uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_getbit_uint64(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_getbyte(byte[],uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_itob(uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_mulw(uint64,uint64)(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_replace(byte[],uint64,byte[])byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_select_bytes(byte[],byte[],uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_select_uint64(uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_setbit_bytes(byte[],uint64,uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_setbit_uint64(uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_setbyte(byte[],uint64,uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_shl(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_shr(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_sqrt(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_substring(byte[],uint64,uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_json_ref_string(byte[],byte[])byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_json_ref_uint64(byte[],byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_json_ref_object(byte[],byte[])byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0cy5hcnRpZmFjdHMuTWlzY2VsbGFuZW91c09wcy5jb250cmFjdC5NaXNjZWxsYW5lb3VzT3BzQ29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHRlc3RzL2FydGlmYWN0cy9NaXNjZWxsYW5lb3VzT3BzL2NvbnRyYWN0LnB5OjQKICAgIC8vIGNsYXNzIE1pc2NlbGxhbmVvdXNPcHNDb250cmFjdChBUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "MiscellaneousOpsContract",
        "methods": [
            {
                "name": "verify_addw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "verify_base64_decode_standard",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_base64_decode_url",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_bytes_bitlen",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "pad_a_size"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_uint64_bitlen",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_bsqrt",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_btoi",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_bzero",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_concat",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "pad_a_size"
                    },
                    {
                        "type": "uint64",
                        "name": "pad_b_size"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_divmodw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "c"
                    },
                    {
                        "type": "uint64",
                        "name": "d"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "verify_divw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "c"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_err",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "verify_exp",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_expw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "verify_extract",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "c"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_extract_from_2",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_extract_uint16",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_extract_uint32",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_extract_uint64",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_getbit_bytes",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_getbit_uint64",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_getbyte",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_itob",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_mulw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "verify_replace",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "byte[]",
                        "name": "c"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_select_bytes",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "c"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_select_uint64",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "c"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_setbit_bytes",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "c"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_setbit_uint64",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "c"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_setbyte",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "c"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_shl",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_shr",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_sqrt",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_substring",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "uint64",
                        "name": "c"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_json_ref_string",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_json_ref_uint64",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_json_ref_object",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "byte[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}