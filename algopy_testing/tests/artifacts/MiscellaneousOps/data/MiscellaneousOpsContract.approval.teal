#pragma version 10

tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.approval_program:
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@41
    method "verify_addw(uint64,uint64)(uint64,uint64)"
    method "verify_base64_decode_standard(byte[])byte[]"
    method "verify_base64_decode_url(byte[])byte[]"
    method "verify_bytes_bitlen(byte[],uint64)uint64"
    method "verify_uint64_bitlen(uint64)uint64"
    method "verify_bsqrt(byte[])byte[]"
    method "verify_btoi(byte[])uint64"
    method "verify_bzero(uint64)byte[]"
    method "verify_concat(byte[],byte[],uint64,uint64)byte[]"
    method "verify_divmodw(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64)"
    method "verify_divw(uint64,uint64,uint64)uint64"
    method "verify_err()void"
    method "verify_exp(uint64,uint64)uint64"
    method "verify_expw(uint64,uint64)(uint64,uint64)"
    method "verify_extract(byte[],uint64,uint64)byte[]"
    method "verify_extract_from_2(byte[])byte[]"
    method "verify_extract_uint16(byte[],uint64)uint64"
    method "verify_extract_uint32(byte[],uint64)uint64"
    method "verify_extract_uint64(byte[],uint64)uint64"
    method "verify_getbit_bytes(byte[],uint64)uint64"
    method "verify_getbit_uint64(uint64,uint64)uint64"
    method "verify_getbyte(byte[],uint64)uint64"
    method "verify_itob(uint64)byte[]"
    method "verify_mulw(uint64,uint64)(uint64,uint64)"
    method "verify_replace(byte[],uint64,byte[])byte[]"
    method "verify_select_bytes(byte[],byte[],uint64)byte[]"
    method "verify_select_uint64(uint64,uint64,uint64)uint64"
    method "verify_setbit_bytes(byte[],uint64,uint64)byte[]"
    method "verify_setbit_uint64(uint64,uint64,uint64)uint64"
    method "verify_setbyte(byte[],uint64,uint64)byte[]"
    method "verify_shl(uint64,uint64)uint64"
    method "verify_shr(uint64,uint64)uint64"
    method "verify_sqrt(uint64)uint64"
    method "verify_substring(byte[],uint64,uint64)byte[]"
    method "verify_json_ref_string(byte[],byte[])byte[]"
    method "verify_json_ref_uint64(byte[],byte[])uint64"
    method "verify_json_ref_object(byte[],byte[])byte[]"
    txna ApplicationArgs 0
    match main_verify_addw_route@2 main_verify_base64_decode_standard_route@3 main_verify_base64_decode_url_route@4 main_verify_bytes_bitlen_route@5 main_verify_uint64_bitlen_route@6 main_verify_bsqrt_route@7 main_verify_btoi_route@8 main_verify_bzero_route@9 main_verify_concat_route@10 main_verify_divmodw_route@11 main_verify_divw_route@12 main_verify_err_route@13 main_verify_exp_route@14 main_verify_expw_route@15 main_verify_extract_route@16 main_verify_extract_from_2_route@17 main_verify_extract_uint16_route@18 main_verify_extract_uint32_route@19 main_verify_extract_uint64_route@20 main_verify_getbit_bytes_route@21 main_verify_getbit_uint64_route@22 main_verify_getbyte_route@23 main_verify_itob_route@24 main_verify_mulw_route@25 main_verify_replace_route@26 main_verify_select_bytes_route@27 main_verify_select_uint64_route@28 main_verify_setbit_bytes_route@29 main_verify_setbit_uint64_route@30 main_verify_setbyte_route@31 main_verify_shl_route@32 main_verify_shr_route@33 main_verify_sqrt_route@34 main_verify_substring_route@35 main_verify_json_ref_string_route@36 main_verify_json_ref_uint64_route@37 main_verify_json_ref_object_route@38
    err // reject transaction

main_verify_addw_route@2:
    // tests/artifacts/MiscellaneousOps/contract.py:5
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:5
    // @arc4.abimethod()
    callsub verify_addw
    swap
    itob
    swap
    itob
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_base64_decode_standard_route@3:
    // tests/artifacts/MiscellaneousOps/contract.py:10
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // tests/artifacts/MiscellaneousOps/contract.py:10
    // @arc4.abimethod()
    callsub verify_base64_decode_standard
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_base64_decode_url_route@4:
    // tests/artifacts/MiscellaneousOps/contract.py:15
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // tests/artifacts/MiscellaneousOps/contract.py:15
    // @arc4.abimethod()
    callsub verify_base64_decode_url
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_bytes_bitlen_route@5:
    // tests/artifacts/MiscellaneousOps/contract.py:20
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:20
    // @arc4.abimethod()
    callsub verify_bytes_bitlen
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_uint64_bitlen_route@6:
    // tests/artifacts/MiscellaneousOps/contract.py:26
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:26
    // @arc4.abimethod()
    callsub verify_uint64_bitlen
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_bsqrt_route@7:
    // tests/artifacts/MiscellaneousOps/contract.py:31
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // tests/artifacts/MiscellaneousOps/contract.py:31
    // @arc4.abimethod()
    callsub verify_bsqrt
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_btoi_route@8:
    // tests/artifacts/MiscellaneousOps/contract.py:37
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // tests/artifacts/MiscellaneousOps/contract.py:37
    // @arc4.abimethod()
    callsub verify_btoi
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_bzero_route@9:
    // tests/artifacts/MiscellaneousOps/contract.py:42
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:42
    // @arc4.abimethod()
    callsub verify_bzero
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_concat_route@10:
    // tests/artifacts/MiscellaneousOps/contract.py:47
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:47
    // @arc4.abimethod()
    callsub verify_concat
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_divmodw_route@11:
    // tests/artifacts/MiscellaneousOps/contract.py:55
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:55
    // @arc4.abimethod()
    callsub verify_divmodw
    cover 3
    cover 2
    swap
    itob
    cover 2
    itob
    swap
    itob
    swap
    uncover 3
    itob
    cover 3
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_divw_route@12:
    // tests/artifacts/MiscellaneousOps/contract.py:62
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:62
    // @arc4.abimethod()
    callsub verify_divw
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_err_route@13:
    // tests/artifacts/MiscellaneousOps/contract.py:67
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub verify_err
    int 1
    return

main_verify_exp_route@14:
    // tests/artifacts/MiscellaneousOps/contract.py:71
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:71
    // @arc4.abimethod()
    callsub verify_exp
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_expw_route@15:
    // tests/artifacts/MiscellaneousOps/contract.py:76
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:76
    // @arc4.abimethod()
    callsub verify_expw
    swap
    itob
    swap
    itob
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_extract_route@16:
    // tests/artifacts/MiscellaneousOps/contract.py:81
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:81
    // @arc4.abimethod()
    callsub verify_extract
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_extract_from_2_route@17:
    // tests/artifacts/MiscellaneousOps/contract.py:86
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // tests/artifacts/MiscellaneousOps/contract.py:86
    // @arc4.abimethod()
    callsub verify_extract_from_2
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_extract_uint16_route@18:
    // tests/artifacts/MiscellaneousOps/contract.py:91
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:91
    // @arc4.abimethod()
    callsub verify_extract_uint16
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_extract_uint32_route@19:
    // tests/artifacts/MiscellaneousOps/contract.py:96
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:96
    // @arc4.abimethod()
    callsub verify_extract_uint32
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_extract_uint64_route@20:
    // tests/artifacts/MiscellaneousOps/contract.py:101
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:101
    // @arc4.abimethod()
    callsub verify_extract_uint64
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_getbit_bytes_route@21:
    // tests/artifacts/MiscellaneousOps/contract.py:106
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:106
    // @arc4.abimethod()
    callsub verify_getbit_bytes
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_getbit_uint64_route@22:
    // tests/artifacts/MiscellaneousOps/contract.py:111
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:111
    // @arc4.abimethod()
    callsub verify_getbit_uint64
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_getbyte_route@23:
    // tests/artifacts/MiscellaneousOps/contract.py:116
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:116
    // @arc4.abimethod()
    callsub verify_getbyte
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_itob_route@24:
    // tests/artifacts/MiscellaneousOps/contract.py:121
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:121
    // @arc4.abimethod()
    callsub verify_itob
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_mulw_route@25:
    // tests/artifacts/MiscellaneousOps/contract.py:126
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:126
    // @arc4.abimethod()
    callsub verify_mulw
    swap
    itob
    swap
    itob
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_replace_route@26:
    // tests/artifacts/MiscellaneousOps/contract.py:131
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    // tests/artifacts/MiscellaneousOps/contract.py:131
    // @arc4.abimethod()
    callsub verify_replace
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_select_bytes_route@27:
    // tests/artifacts/MiscellaneousOps/contract.py:136
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:136
    // @arc4.abimethod()
    callsub verify_select_bytes
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_select_uint64_route@28:
    // tests/artifacts/MiscellaneousOps/contract.py:141
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:141
    // @arc4.abimethod()
    callsub verify_select_uint64
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_setbit_bytes_route@29:
    // tests/artifacts/MiscellaneousOps/contract.py:146
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:146
    // @arc4.abimethod()
    callsub verify_setbit_bytes
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_setbit_uint64_route@30:
    // tests/artifacts/MiscellaneousOps/contract.py:151
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:151
    // @arc4.abimethod()
    callsub verify_setbit_uint64
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_setbyte_route@31:
    // tests/artifacts/MiscellaneousOps/contract.py:156
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:156
    // @arc4.abimethod()
    callsub verify_setbyte
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_shl_route@32:
    // tests/artifacts/MiscellaneousOps/contract.py:161
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:161
    // @arc4.abimethod()
    callsub verify_shl
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_shr_route@33:
    // tests/artifacts/MiscellaneousOps/contract.py:166
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:166
    // @arc4.abimethod()
    callsub verify_shr
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_sqrt_route@34:
    // tests/artifacts/MiscellaneousOps/contract.py:171
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:171
    // @arc4.abimethod()
    callsub verify_sqrt
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_substring_route@35:
    // tests/artifacts/MiscellaneousOps/contract.py:176
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:176
    // @arc4.abimethod()
    callsub verify_substring
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_json_ref_string_route@36:
    // tests/artifacts/MiscellaneousOps/contract.py:181
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/MiscellaneousOps/contract.py:181
    // @arc4.abimethod()
    callsub verify_json_ref_string
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_json_ref_uint64_route@37:
    // tests/artifacts/MiscellaneousOps/contract.py:186
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/MiscellaneousOps/contract.py:186
    // @arc4.abimethod()
    callsub verify_json_ref_uint64
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_verify_json_ref_object_route@38:
    // tests/artifacts/MiscellaneousOps/contract.py:191
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/MiscellaneousOps/contract.py:191
    // @arc4.abimethod()
    callsub verify_json_ref_object
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@41:
    // tests/artifacts/MiscellaneousOps/contract.py:4
    // class MiscellaneousOpsContract(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_addw(a: uint64, b: uint64) -> uint64, uint64:
verify_addw:
    // tests/artifacts/MiscellaneousOps/contract.py:5-6
    // @arc4.abimethod()
    // def verify_addw(self, a: UInt64, b: UInt64) -> tuple[UInt64, UInt64]:
    proto 2 2
    // tests/artifacts/MiscellaneousOps/contract.py:7
    // result = op.addw(a, b)
    frame_dig -2
    frame_dig -1
    addw
    // tests/artifacts/MiscellaneousOps/contract.py:8
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_base64_decode_standard(a: bytes) -> bytes:
verify_base64_decode_standard:
    // tests/artifacts/MiscellaneousOps/contract.py:10-11
    // @arc4.abimethod()
    // def verify_base64_decode_standard(self, a: Bytes) -> Bytes:
    proto 1 1
    // tests/artifacts/MiscellaneousOps/contract.py:12
    // result = op.base64_decode(op.Base64.StdEncoding, a)
    frame_dig -1
    base64_decode StdEncoding
    // tests/artifacts/MiscellaneousOps/contract.py:13
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_base64_decode_url(a: bytes) -> bytes:
verify_base64_decode_url:
    // tests/artifacts/MiscellaneousOps/contract.py:15-16
    // @arc4.abimethod()
    // def verify_base64_decode_url(self, a: Bytes) -> Bytes:
    proto 1 1
    // tests/artifacts/MiscellaneousOps/contract.py:17
    // result = op.base64_decode(op.Base64.URLEncoding, a)
    frame_dig -1
    base64_decode URLEncoding
    // tests/artifacts/MiscellaneousOps/contract.py:18
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_bytes_bitlen(a: bytes, pad_a_size: uint64) -> uint64:
verify_bytes_bitlen:
    // tests/artifacts/MiscellaneousOps/contract.py:20-21
    // @arc4.abimethod()
    // def verify_bytes_bitlen(self, a: Bytes, pad_a_size: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:22
    // a = op.bzero(pad_a_size) + a
    frame_dig -1
    bzero
    frame_dig -2
    concat
    dup
    frame_bury -2
    // tests/artifacts/MiscellaneousOps/contract.py:23
    // result = op.bitlen(a)
    bitlen
    // tests/artifacts/MiscellaneousOps/contract.py:24
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_uint64_bitlen(a: uint64) -> uint64:
verify_uint64_bitlen:
    // tests/artifacts/MiscellaneousOps/contract.py:26-27
    // @arc4.abimethod()
    // def verify_uint64_bitlen(self, a: UInt64) -> UInt64:
    proto 1 1
    // tests/artifacts/MiscellaneousOps/contract.py:28
    // result = op.bitlen(a)
    frame_dig -1
    bitlen
    // tests/artifacts/MiscellaneousOps/contract.py:29
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_bsqrt(a: bytes) -> bytes:
verify_bsqrt:
    // tests/artifacts/MiscellaneousOps/contract.py:31-32
    // @arc4.abimethod()
    // def verify_bsqrt(self, a: Bytes) -> Bytes:
    proto 1 1
    // tests/artifacts/MiscellaneousOps/contract.py:34
    // result = op.bsqrt(a_biguint)
    frame_dig -1
    bsqrt
    // tests/artifacts/MiscellaneousOps/contract.py:35
    // return result.bytes
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_btoi(a: bytes) -> uint64:
verify_btoi:
    // tests/artifacts/MiscellaneousOps/contract.py:37-38
    // @arc4.abimethod()
    // def verify_btoi(self, a: Bytes) -> UInt64:
    proto 1 1
    // tests/artifacts/MiscellaneousOps/contract.py:39
    // result = op.btoi(a)
    frame_dig -1
    btoi
    // tests/artifacts/MiscellaneousOps/contract.py:40
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_bzero(a: uint64) -> bytes:
verify_bzero:
    // tests/artifacts/MiscellaneousOps/contract.py:42-43
    // @arc4.abimethod()
    // def verify_bzero(self, a: UInt64) -> Bytes:
    proto 1 1
    // tests/artifacts/MiscellaneousOps/contract.py:44
    // result = op.bzero(a)
    frame_dig -1
    bzero
    // tests/artifacts/MiscellaneousOps/contract.py:45
    // return op.sha256(result)
    sha256
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_concat(a: bytes, b: bytes, pad_a_size: uint64, pad_b_size: uint64) -> bytes:
verify_concat:
    // tests/artifacts/MiscellaneousOps/contract.py:47-48
    // @arc4.abimethod()
    // def verify_concat(self, a: Bytes, b: Bytes, pad_a_size: UInt64, pad_b_size: UInt64) -> Bytes:
    proto 4 1
    // tests/artifacts/MiscellaneousOps/contract.py:49
    // a = op.bzero(pad_a_size) + a
    frame_dig -2
    bzero
    frame_dig -4
    concat
    frame_bury -4
    // tests/artifacts/MiscellaneousOps/contract.py:50
    // b = op.bzero(pad_b_size) + b
    frame_dig -1
    bzero
    frame_dig -3
    concat
    frame_bury -3
    // tests/artifacts/MiscellaneousOps/contract.py:51
    // result = a + b
    frame_dig -4
    frame_dig -3
    concat
    // tests/artifacts/MiscellaneousOps/contract.py:52
    // result = op.sha256(result)
    sha256
    // tests/artifacts/MiscellaneousOps/contract.py:53
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_divmodw(a: uint64, b: uint64, c: uint64, d: uint64) -> uint64, uint64, uint64, uint64:
verify_divmodw:
    // tests/artifacts/MiscellaneousOps/contract.py:55-58
    // @arc4.abimethod()
    // def verify_divmodw(
    //     self, a: UInt64, b: UInt64, c: UInt64, d: UInt64
    // ) -> tuple[UInt64, UInt64, UInt64, UInt64]:
    proto 4 4
    // tests/artifacts/MiscellaneousOps/contract.py:59
    // result = op.divmodw(a, b, c, d)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    divmodw
    // tests/artifacts/MiscellaneousOps/contract.py:60
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_divw(a: uint64, b: uint64, c: uint64) -> uint64:
verify_divw:
    // tests/artifacts/MiscellaneousOps/contract.py:62-63
    // @arc4.abimethod()
    // def verify_divw(self, a: UInt64, b: UInt64, c: UInt64) -> UInt64:
    proto 3 1
    // tests/artifacts/MiscellaneousOps/contract.py:64
    // result = op.divw(a, b, c)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    divw
    // tests/artifacts/MiscellaneousOps/contract.py:65
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_err() -> void:
verify_err:
    // tests/artifacts/MiscellaneousOps/contract.py:67-68
    // @arc4.abimethod()
    // def verify_err(self) -> None:
    proto 0 0
    // tests/artifacts/MiscellaneousOps/contract.py:69
    // op.err()
    err


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_exp(a: uint64, b: uint64) -> uint64:
verify_exp:
    // tests/artifacts/MiscellaneousOps/contract.py:71-72
    // @arc4.abimethod()
    // def verify_exp(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:73
    // result = op.exp(a, b)
    frame_dig -2
    frame_dig -1
    exp
    // tests/artifacts/MiscellaneousOps/contract.py:74
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_expw(a: uint64, b: uint64) -> uint64, uint64:
verify_expw:
    // tests/artifacts/MiscellaneousOps/contract.py:76-77
    // @arc4.abimethod()
    // def verify_expw(self, a: UInt64, b: UInt64) -> tuple[UInt64, UInt64]:
    proto 2 2
    // tests/artifacts/MiscellaneousOps/contract.py:78
    // result = op.expw(a, b)
    frame_dig -2
    frame_dig -1
    expw
    // tests/artifacts/MiscellaneousOps/contract.py:79
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_extract(a: bytes, b: uint64, c: uint64) -> bytes:
verify_extract:
    // tests/artifacts/MiscellaneousOps/contract.py:81-82
    // @arc4.abimethod()
    // def verify_extract(self, a: Bytes, b: UInt64, c: UInt64) -> Bytes:
    proto 3 1
    // tests/artifacts/MiscellaneousOps/contract.py:83
    // result = op.extract(a, b, c)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    extract3
    // tests/artifacts/MiscellaneousOps/contract.py:84
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_extract_from_2(a: bytes) -> bytes:
verify_extract_from_2:
    // tests/artifacts/MiscellaneousOps/contract.py:86-87
    // @arc4.abimethod()
    // def verify_extract_from_2(self, a: Bytes) -> Bytes:
    proto 1 1
    // tests/artifacts/MiscellaneousOps/contract.py:88
    // result = op.extract(a, 2, 0)
    frame_dig -1
    extract 2 0
    // tests/artifacts/MiscellaneousOps/contract.py:89
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_extract_uint16(a: bytes, b: uint64) -> uint64:
verify_extract_uint16:
    // tests/artifacts/MiscellaneousOps/contract.py:91-92
    // @arc4.abimethod()
    // def verify_extract_uint16(self, a: Bytes, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:93
    // result = op.extract_uint16(a, b)
    frame_dig -2
    frame_dig -1
    extract_uint16
    // tests/artifacts/MiscellaneousOps/contract.py:94
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_extract_uint32(a: bytes, b: uint64) -> uint64:
verify_extract_uint32:
    // tests/artifacts/MiscellaneousOps/contract.py:96-97
    // @arc4.abimethod()
    // def verify_extract_uint32(self, a: Bytes, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:98
    // result = op.extract_uint32(a, b)
    frame_dig -2
    frame_dig -1
    extract_uint32
    // tests/artifacts/MiscellaneousOps/contract.py:99
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_extract_uint64(a: bytes, b: uint64) -> uint64:
verify_extract_uint64:
    // tests/artifacts/MiscellaneousOps/contract.py:101-102
    // @arc4.abimethod()
    // def verify_extract_uint64(self, a: Bytes, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:103
    // result = op.extract_uint64(a, b)
    frame_dig -2
    frame_dig -1
    extract_uint64
    // tests/artifacts/MiscellaneousOps/contract.py:104
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_getbit_bytes(a: bytes, b: uint64) -> uint64:
verify_getbit_bytes:
    // tests/artifacts/MiscellaneousOps/contract.py:106-107
    // @arc4.abimethod()
    // def verify_getbit_bytes(self, a: Bytes, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:108
    // result = op.getbit(a, b)
    frame_dig -2
    frame_dig -1
    getbit
    // tests/artifacts/MiscellaneousOps/contract.py:109
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_getbit_uint64(a: uint64, b: uint64) -> uint64:
verify_getbit_uint64:
    // tests/artifacts/MiscellaneousOps/contract.py:111-112
    // @arc4.abimethod()
    // def verify_getbit_uint64(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:113
    // result = op.getbit(a, b)
    frame_dig -2
    frame_dig -1
    getbit
    // tests/artifacts/MiscellaneousOps/contract.py:114
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_getbyte(a: bytes, b: uint64) -> uint64:
verify_getbyte:
    // tests/artifacts/MiscellaneousOps/contract.py:116-117
    // @arc4.abimethod()
    // def verify_getbyte(self, a: Bytes, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:118
    // result = op.getbyte(a, b)
    frame_dig -2
    frame_dig -1
    getbyte
    // tests/artifacts/MiscellaneousOps/contract.py:119
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_itob(a: uint64) -> bytes:
verify_itob:
    // tests/artifacts/MiscellaneousOps/contract.py:121-122
    // @arc4.abimethod()
    // def verify_itob(self, a: UInt64) -> Bytes:
    proto 1 1
    // tests/artifacts/MiscellaneousOps/contract.py:123
    // result = op.itob(a)
    frame_dig -1
    itob
    // tests/artifacts/MiscellaneousOps/contract.py:124
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_mulw(a: uint64, b: uint64) -> uint64, uint64:
verify_mulw:
    // tests/artifacts/MiscellaneousOps/contract.py:126-127
    // @arc4.abimethod()
    // def verify_mulw(self, a: UInt64, b: UInt64) -> tuple[UInt64, UInt64]:
    proto 2 2
    // tests/artifacts/MiscellaneousOps/contract.py:128
    // result = op.mulw(a, b)
    frame_dig -2
    frame_dig -1
    mulw
    // tests/artifacts/MiscellaneousOps/contract.py:129
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_replace(a: bytes, b: uint64, c: bytes) -> bytes:
verify_replace:
    // tests/artifacts/MiscellaneousOps/contract.py:131-132
    // @arc4.abimethod()
    // def verify_replace(self, a: Bytes, b: UInt64, c: Bytes) -> Bytes:
    proto 3 1
    // tests/artifacts/MiscellaneousOps/contract.py:133
    // result = op.replace(a, b, c)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    replace3
    // tests/artifacts/MiscellaneousOps/contract.py:134
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_select_bytes(a: bytes, b: bytes, c: uint64) -> bytes:
verify_select_bytes:
    // tests/artifacts/MiscellaneousOps/contract.py:136-137
    // @arc4.abimethod()
    // def verify_select_bytes(self, a: Bytes, b: Bytes, c: UInt64) -> Bytes:
    proto 3 1
    // tests/artifacts/MiscellaneousOps/contract.py:138
    // result = op.select_bytes(a, b, c)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    select
    // tests/artifacts/MiscellaneousOps/contract.py:139
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_select_uint64(a: uint64, b: uint64, c: uint64) -> uint64:
verify_select_uint64:
    // tests/artifacts/MiscellaneousOps/contract.py:141-142
    // @arc4.abimethod()
    // def verify_select_uint64(self, a: UInt64, b: UInt64, c: UInt64) -> UInt64:
    proto 3 1
    // tests/artifacts/MiscellaneousOps/contract.py:143
    // result = op.select_uint64(a, b, c)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    select
    // tests/artifacts/MiscellaneousOps/contract.py:144
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_setbit_bytes(a: bytes, b: uint64, c: uint64) -> bytes:
verify_setbit_bytes:
    // tests/artifacts/MiscellaneousOps/contract.py:146-147
    // @arc4.abimethod()
    // def verify_setbit_bytes(self, a: Bytes, b: UInt64, c: UInt64) -> Bytes:
    proto 3 1
    // tests/artifacts/MiscellaneousOps/contract.py:148
    // result = op.setbit_bytes(a, b, c)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    setbit
    // tests/artifacts/MiscellaneousOps/contract.py:149
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_setbit_uint64(a: uint64, b: uint64, c: uint64) -> uint64:
verify_setbit_uint64:
    // tests/artifacts/MiscellaneousOps/contract.py:151-152
    // @arc4.abimethod()
    // def verify_setbit_uint64(self, a: UInt64, b: UInt64, c: UInt64) -> UInt64:
    proto 3 1
    // tests/artifacts/MiscellaneousOps/contract.py:153
    // result = op.setbit_uint64(a, b, c)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    setbit
    // tests/artifacts/MiscellaneousOps/contract.py:154
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_setbyte(a: bytes, b: uint64, c: uint64) -> bytes:
verify_setbyte:
    // tests/artifacts/MiscellaneousOps/contract.py:156-157
    // @arc4.abimethod()
    // def verify_setbyte(self, a: Bytes, b: UInt64, c: UInt64) -> Bytes:
    proto 3 1
    // tests/artifacts/MiscellaneousOps/contract.py:158
    // result = op.setbyte(a, b, c)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    setbyte
    // tests/artifacts/MiscellaneousOps/contract.py:159
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_shl(a: uint64, b: uint64) -> uint64:
verify_shl:
    // tests/artifacts/MiscellaneousOps/contract.py:161-162
    // @arc4.abimethod()
    // def verify_shl(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:163
    // result = op.shl(a, b)
    frame_dig -2
    frame_dig -1
    shl
    // tests/artifacts/MiscellaneousOps/contract.py:164
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_shr(a: uint64, b: uint64) -> uint64:
verify_shr:
    // tests/artifacts/MiscellaneousOps/contract.py:166-167
    // @arc4.abimethod()
    // def verify_shr(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:168
    // result = op.shr(a, b)
    frame_dig -2
    frame_dig -1
    shr
    // tests/artifacts/MiscellaneousOps/contract.py:169
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_sqrt(a: uint64) -> uint64:
verify_sqrt:
    // tests/artifacts/MiscellaneousOps/contract.py:171-172
    // @arc4.abimethod()
    // def verify_sqrt(self, a: UInt64) -> UInt64:
    proto 1 1
    // tests/artifacts/MiscellaneousOps/contract.py:173
    // result = op.sqrt(a)
    frame_dig -1
    sqrt
    // tests/artifacts/MiscellaneousOps/contract.py:174
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_substring(a: bytes, b: uint64, c: uint64) -> bytes:
verify_substring:
    // tests/artifacts/MiscellaneousOps/contract.py:176-177
    // @arc4.abimethod()
    // def verify_substring(self, a: Bytes, b: UInt64, c: UInt64) -> Bytes:
    proto 3 1
    // tests/artifacts/MiscellaneousOps/contract.py:178
    // result = op.substring(a, b, c)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    substring3
    // tests/artifacts/MiscellaneousOps/contract.py:179
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_json_ref_string(a: bytes, b: bytes) -> bytes:
verify_json_ref_string:
    // tests/artifacts/MiscellaneousOps/contract.py:181-182
    // @arc4.abimethod()
    // def verify_json_ref_string(self, a: Bytes, b: Bytes) -> Bytes:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:183
    // result = op.JsonRef.json_string(a, b)
    frame_dig -2
    frame_dig -1
    json_ref JSONString
    // tests/artifacts/MiscellaneousOps/contract.py:184
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_json_ref_uint64(a: bytes, b: bytes) -> uint64:
verify_json_ref_uint64:
    // tests/artifacts/MiscellaneousOps/contract.py:186-187
    // @arc4.abimethod()
    // def verify_json_ref_uint64(self, a: Bytes, b: Bytes) -> UInt64:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:188
    // result = op.JsonRef.json_uint64(a, b)
    frame_dig -2
    frame_dig -1
    json_ref JSONUint64
    // tests/artifacts/MiscellaneousOps/contract.py:189
    // return result
    retsub


// tests.artifacts.MiscellaneousOps.contract.MiscellaneousOpsContract.verify_json_ref_object(a: bytes, b: bytes) -> bytes:
verify_json_ref_object:
    // tests/artifacts/MiscellaneousOps/contract.py:191-192
    // @arc4.abimethod()
    // def verify_json_ref_object(self, a: Bytes, b: Bytes) -> Bytes:
    proto 2 1
    // tests/artifacts/MiscellaneousOps/contract.py:193
    // result = op.JsonRef.json_object(a, b)
    frame_dig -2
    frame_dig -1
    json_ref JSONObject
    // tests/artifacts/MiscellaneousOps/contract.py:194
    // return result
    retsub
