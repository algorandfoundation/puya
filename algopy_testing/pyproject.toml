[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "algorand-python-testing"
version = "0.1.0"
description = 'Algorand Python testing library'
readme = "README.md"
requires-python = ">=3.12"
license = "AGPL-3.0-or-later"
authors = [
  { name = "Algorand Foundation", email = "contact@algorand.foundation" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Testing",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    # ==========================================================================
    # Below is used for implementing algopy crypto ops matching AVM.
    # Versions pinned for compatibility with py-algorand-sdk pre reqs
    # https://github.com/algorand/py-algorand-sdk/blob/master/setup.py
    # ==========================================================================
    "pycryptodomex>=3.6.0,<4",
    "pynacl>=1.4.0,<2",
    "ecdsa>=0.17.0",
    "coincurve>=19.0.1"
]

[project.urls]
Documentation = "https://github.com/algorandfoundation/puya/tree/main/algopy_testing#README.md"
Issues = "https://github.com/algorandfoundation/puya/issues"
Source = "https://github.com/algorandfoundation/puya/tree/main/algopy_testing"

# adds dependency on stubs when building wheel via hatch_build.py
[tool.hatch.build.hooks.custom]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/algopy", 'src/algopy_testing']

[[tool.hatch.envs.all.matrix]]
python = ["3.12"]

# default dev environment
[tool.hatch.envs.default]
type = "virtual"
path = ".venv"
python = "3.12"
dependencies = [
    "puyapy@{root:uri}/..",
    "pytest>=7.4",
    "pytest-mock>=3.10.0",
    "pytest-xdist[psutil]>=3.3",
    "py-algorand-sdk>=2.4.0",
    "algokit-utils>=2.2.1",
    "pytest-cov>=4.1.0",
    "prettytable>=3.9.0",
    "hatchling", # used for hatch_build.py
    "hypothesis>=6.100.1",
    "mypy==1.10",
]
pre-install-commands = [
  "pip install -e ../stubs",
]

[tool.hatch.envs.default.env-vars]
COVERAGE_CORE = "sysmon"

[tool.hatch.envs.default.scripts]
refresh_test_artifacts = "python scripts/refresh_test_artifacts.py"
check_stubs_cov = "python scripts/check_stubs_cov.py"
pre_commit = [
    "hatch run lint:fix",
    "mypy ."
]
check = [
    "hatch run lint:check",
    "mypy ."
]
tests = "pytest --cov --cov-report xml"

# isolated environments for dev tooling
[tool.hatch.envs.lint]
detached = true
path = ".venv.lint"
dependencies = [
    "black",
    "ruff==0.4.2",
    "ruff-lsp",
]

[tool.hatch.envs.lint.scripts]
check = [
  "black --check .",
  "ruff check",
]
fix = [
  "black .",
  "ruff check --fix",
]
check_examples = [ 'black --check examples', 'ruff check examples']
fix_examples = [ 'black examples', 'ruff check --fix examples']

# cicd environment
[tool.hatch.envs.cicd]
path = ".venv.cicd"
dependencies = [
    "algokit",
]
[tool.hatch.envs.cicd.scripts]
localnet_start = [
    "algokit localnet start",
]


# Examples environment
[tool.hatch.envs.examples]
type = "virtual"
path = ".venv.examples"
python = "3.12"
dev-mode= true
detached = true
dependencies = [
    "algorand-python @ {root:uri}/../stubs",
    "algorand-python-testing @ {root:uri}",
    "pytest>=7.4",
    "pytest-mock>=3.10.0",
    "pytest-xdist[psutil]>=3.3",
    "py-algorand-sdk>=2.4.0",
    "algokit-utils>=2.2.1",
    "pytest-cov>=4.1.0",
    "mypy==1.10",
]

[tool.hatch.envs.examples.scripts]
tests = "pytest examples"
pre_commit = [
    "hatch run lint:fix_examples",
    "hatch run mypy examples",
]
check = [
    "hatch run lint:check_examples",
    "hatch run mypy examples",
]


# tool configurations
[tool.black]
line-length = 99

[tool.ruff]
target-version = "py312"
line-length = 99

[tool.ruff.lint]
select = [
    "F",     # pyflakes
    "E",
    "W",     # pycodestyle
    "C90",   # mccabe
    "I",     # isort
    "N",     # PEP8 naming
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "INT",   # flake8-gettext
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "TRY",   # tryceratops
    "PERF",  # Perflint
    "LOG",   # flake8-logging
    "RUF",   # Ruff-specific rules
]
ignore = [
    "ANN401",  # allow typing.Any, used heavily in to align with stubs
    "ANN101",  # no type for self
    "ANN102",  # no type for cls
    "SIM108",  # allow if-else in place of ternary
    "SLF001", # allow private member access, used to access context manager internally
    "PLR2004", # magic values... can't configure to ignore simple low value ints like 2
    "PLW2901", # allow updating loop value...
    "PYI025",  # I can tell the difference between set and Set thank you very much
    "UP040",   # TypeAlias -> type keyword, waiting for mypy support
    "TRY003",  # allow long exception messages in Exception constructor
    "RET503",  # false negatives when involving typing.Never, covered by mypy anyway
    "RET504",
    "RET505",  # stylistic choices for readability
    "S101",    # allow asserts
]
unfixable = [
    "F841", # don't delete unused local variables automatically
]
[tool.ruff.lint.per-file-ignores]
"src/**" = [
    "PT", # no pytest rules
]
"scripts/**/*.py" = ["T201"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-none-returning = true
mypy-init-return = true

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.mypy]
python_version = "3.12"
strict = true
untyped_calls_exclude = [
    "algosdk",
]
files = ["src", "tests", "examples"]
exclude = ["tests/artifacts"]

[[tool.mypy.overrides]]
module = [
  "tests.artifacts.*",
]
follow_imports = "skip"

[tool.pytest.ini_options]
addopts = "-n auto --cov-config=.coveragerc"
