{
    "ops": {
        "!": {
            "name": "!",
            "size": 1,
            "doc": [
                "A == 0 yields 1; else 0"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "!=": {
            "name": "!=",
            "size": 1,
            "doc": [
                "A is not equal to B => {0 or 1}"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "%": {
            "name": "%",
            "size": 1,
            "doc": [
                "A modulo B. Fail if B == 0."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "&": {
            "name": "&",
            "size": 1,
            "doc": [
                "A bitwise-and B"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "&&": {
            "name": "&&",
            "size": 1,
            "doc": [
                "A is not zero and B is not zero => {0 or 1}"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "*": {
            "name": "*",
            "size": 1,
            "doc": [
                "A times B. Fail on overflow.",
                "Overflow is an error condition which halts execution and fails the transaction. Full precision is available from `mulw`."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "+": {
            "name": "+",
            "size": 1,
            "doc": [
                "A plus B. Fail on overflow.",
                "Overflow is an error condition which halts execution and fails the transaction. Full precision is available from `addw`."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "-": {
            "name": "-",
            "size": 1,
            "doc": [
                "A minus B. Fail if B > A."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "/": {
            "name": "/",
            "size": 1,
            "doc": [
                "A divided by B (truncated division). Fail if B == 0.",
                "`divmodw` is available to divide the two-element values produced by `mulw` and `addw`."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "<": {
            "name": "<",
            "size": 1,
            "doc": [
                "A less than B => {0 or 1}"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "<=": {
            "name": "<=",
            "size": 1,
            "doc": [
                "A less than or equal to B => {0 or 1}"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "==": {
            "name": "==",
            "size": 1,
            "doc": [
                "A is equal to B => {0 or 1}"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        ">": {
            "name": ">",
            "size": 1,
            "doc": [
                "A greater than B => {0 or 1}"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        ">=": {
            "name": ">=",
            "size": 1,
            "doc": [
                "A greater than or equal to B => {0 or 1}"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "^": {
            "name": "^",
            "size": 1,
            "doc": [
                "A bitwise-xor B"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "acct_params_get": {
            "name": "acct_params_get",
            "size": 2,
            "doc": [
                "X is field F from account A. Y is 1 if A owns positive algos, else 0"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 6,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "address_or_index",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "acct_params",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "account params field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "addw": {
            "name": "addw",
            "size": 1,
            "doc": [
                "A plus B as a 128-bit result. X is the carry-bit, Y is the low-order 64 bits."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "app_global_del": {
            "name": "app_global_del",
            "size": 1,
            "doc": [
                "delete key A from the global state of the current application",
                "params: state key.",
                "",
                "Deleting a key which is already absent has no effect on the application global state. (In particular, it does _not_ cause the program to fail.)"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "stateKey",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "app_global_get": {
            "name": "app_global_get",
            "size": 1,
            "doc": [
                "global state of the key A in the current application",
                "params: state key. Return: value. The value is zero (of type uint64) if the key does not exist."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "stateKey",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "app_global_get_ex": {
            "name": "app_global_get_ex",
            "size": 1,
            "doc": [
                "X is the global state of application A, key B. Y is 1 if key existed, else 0",
                "params: Txn.ForeignApps offset (or, since v4, an _available_ application id), state key. Return: did_exist flag (top of the stack, 1 if the application and key existed and 0 otherwise), value. The value is zero (of type uint64) if the key does not exist."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "application",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "stateKey",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "app_global_put": {
            "name": "app_global_put",
            "size": 1,
            "doc": [
                "write B to key A in the global state of the current application"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "stateKey",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "app_local_del": {
            "name": "app_local_del",
            "size": 1,
            "doc": [
                "delete key B from account A's local state of the current application",
                "params: Txn.Accounts offset (or, since v4, an _available_ account address), state key.",
                "",
                "Deleting a key which is already absent has no effect on the application local state. (In particular, it does _not_ cause the program to fail.)"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "address_or_index",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "stateKey",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "app_local_get": {
            "name": "app_local_get",
            "size": 1,
            "doc": [
                "local state of the key B in the current application in account A",
                "params: Txn.Accounts offset (or, since v4, an _available_ account address), state key. Return: value. The value is zero (of type uint64) if the key does not exist."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "address_or_index",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "stateKey",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "app_local_get_ex": {
            "name": "app_local_get_ex",
            "size": 1,
            "doc": [
                "X is the local state of application B, key C in account A. Y is 1 if key existed, else 0",
                "params: Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset), state key. Return: did_exist flag (top of the stack, 1 if the application and key existed and 0 otherwise), value. The value is zero (of type uint64) if the key does not exist."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "address_or_index",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "application",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "stateKey",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "app_local_put": {
            "name": "app_local_put",
            "size": 1,
            "doc": [
                "write C to key B in account A's local state of the current application",
                "params: Txn.Accounts offset (or, since v4, an _available_ account address), state key, value."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "address_or_index",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "stateKey",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "app_opted_in": {
            "name": "app_opted_in",
            "size": 1,
            "doc": [
                "1 if account A is opted in to application B, else 0",
                "params: Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset). Return: 1 if opted in and 0 otherwise."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "address_or_index",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "application",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "app_params_get": {
            "name": "app_params_get",
            "size": 2,
            "doc": [
                "X is field F from app A. Y is 1 if A exists, else 0",
                "params: Txn.ForeignApps offset or an _available_ app id. Return: did_exist flag (1 if the application existed and 0 otherwise), value."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "application",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "app_params",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "app params field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "arg": {
            "name": "arg",
            "size": 2,
            "doc": [
                "Nth LogicSig argument"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "sig",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "N",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "an arg index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "arg_0": {
            "name": "arg_0",
            "size": 1,
            "doc": [
                "LogicSig argument 0"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "sig",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "arg_1": {
            "name": "arg_1",
            "size": 1,
            "doc": [
                "LogicSig argument 1"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "sig",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "arg_2": {
            "name": "arg_2",
            "size": 1,
            "doc": [
                "LogicSig argument 2"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "sig",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "arg_3": {
            "name": "arg_3",
            "size": 1,
            "doc": [
                "LogicSig argument 3"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "sig",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "args": {
            "name": "args",
            "size": 1,
            "doc": [
                "Ath LogicSig argument"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "sig",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "assert": {
            "name": "assert",
            "size": 1,
            "doc": [
                "immediately fail unless A is a non-zero number"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "asset_holding_get": {
            "name": "asset_holding_get",
            "size": 2,
            "doc": [
                "X is field F from account A's holding of asset B. Y is 1 if A is opted into B, else 0",
                "params: Txn.Accounts offset (or, since v4, an _available_ address), asset id (or, since v4, a Txn.ForeignAssets offset). Return: did_exist flag (1 if the asset existed and 0 otherwise), value."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "address_or_index",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "asset",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "asset_holding",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "asset holding field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "asset_params_get": {
            "name": "asset_params_get",
            "size": 2,
            "doc": [
                "X is field F from asset A. Y is 1 if A exists, else 0",
                "params: Txn.ForeignAssets offset (or, since v4, an _available_ asset id. Return: did_exist flag (1 if the asset existed and 0 otherwise), value."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "asset",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "asset_params",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "asset params field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "b": {
            "name": "b",
            "size": 3,
            "doc": [
                "branch unconditionally to TARGET",
                "See `bnz` for details on how branches work. `b` always jumps to the offset."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "TARGET",
                    "immediate_type": "label",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "branch offset"
                }
            ],
            "stack_outputs": []
        },
        "b!=": {
            "name": "b!=",
            "size": 1,
            "doc": [
                "0 if A is equal to B, else 1. A and B are interpreted as big-endian unsigned integers"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "bigint",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "bigint",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "b%": {
            "name": "b%",
            "size": 1,
            "doc": [
                "A modulo B. A and B are interpreted as big-endian unsigned integers. Fail if B is zero."
            ],
            "cost": {
                "value": 20,
                "doc": "20"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "bigint",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "bigint",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bigint",
                    "doc": null
                }
            ]
        },
        "b&": {
            "name": "b&",
            "size": 1,
            "doc": [
                "A bitwise-and B. A and B are zero-left extended to the greater of their lengths"
            ],
            "cost": {
                "value": 6,
                "doc": "6"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Logic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "b*": {
            "name": "b*",
            "size": 1,
            "doc": [
                "A times B. A and B are interpreted as big-endian unsigned integers."
            ],
            "cost": {
                "value": 20,
                "doc": "20"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "bigint",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "bigint",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "b+": {
            "name": "b+",
            "size": 1,
            "doc": [
                "A plus B. A and B are interpreted as big-endian unsigned integers"
            ],
            "cost": {
                "value": 10,
                "doc": "10"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "bigint",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "bigint",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "b-": {
            "name": "b-",
            "size": 1,
            "doc": [
                "A minus B. A and B are interpreted as big-endian unsigned integers. Fail on underflow."
            ],
            "cost": {
                "value": 10,
                "doc": "10"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "bigint",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "bigint",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bigint",
                    "doc": null
                }
            ]
        },
        "b/": {
            "name": "b/",
            "size": 1,
            "doc": [
                "A divided by B (truncated division). A and B are interpreted as big-endian unsigned integers. Fail if B is zero."
            ],
            "cost": {
                "value": 20,
                "doc": "20"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "bigint",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "bigint",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bigint",
                    "doc": null
                }
            ]
        },
        "b<": {
            "name": "b<",
            "size": 1,
            "doc": [
                "1 if A is less than B, else 0. A and B are interpreted as big-endian unsigned integers"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "bigint",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "bigint",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "b<=": {
            "name": "b<=",
            "size": 1,
            "doc": [
                "1 if A is less than or equal to B, else 0. A and B are interpreted as big-endian unsigned integers"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "bigint",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "bigint",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "b==": {
            "name": "b==",
            "size": 1,
            "doc": [
                "1 if A is equal to B, else 0. A and B are interpreted as big-endian unsigned integers"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "bigint",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "bigint",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "b>": {
            "name": "b>",
            "size": 1,
            "doc": [
                "1 if A is greater than B, else 0. A and B are interpreted as big-endian unsigned integers"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "bigint",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "bigint",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "b>=": {
            "name": "b>=",
            "size": 1,
            "doc": [
                "1 if A is greater than or equal to B, else 0. A and B are interpreted as big-endian unsigned integers"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "bigint",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "bigint",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "b^": {
            "name": "b^",
            "size": 1,
            "doc": [
                "A bitwise-xor B. A and B are zero-left extended to the greater of their lengths"
            ],
            "cost": {
                "value": 6,
                "doc": "6"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Logic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "balance": {
            "name": "balance",
            "size": 1,
            "doc": [
                "balance for account A, in microalgos. The balance is observed after the effects of previous transactions in the group, and after the fee for the current transaction is deducted. Changes caused by inner transactions are observable immediately following `itxn_submit`",
                "params: Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset). Return: value."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "address_or_index",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "base64_decode": {
            "name": "base64_decode",
            "size": 2,
            "doc": [
                "decode A which was base64-encoded using _encoding_ E. Fail if A is not base64 encoded with encoding E",
                "*Warning*: Usage should be restricted to very rare use cases. In almost all cases, smart contracts should directly handle non-encoded byte-strings.\tThis opcode should only be used in cases where base64 is the only available option, e.g. interoperability with a third-party that only signs base64 strings.",
                "",
                " Decodes A using the base64 encoding E. Specify the encoding with an immediate arg either as URL and Filename Safe (`URLEncoding`) or Standard (`StdEncoding`). See [RFC 4648 sections 4 and 5](https://rfc-editor.org/rfc/rfc4648.html#section-4). It is assumed that the encoding ends with the exact number of `=` padding characters as required by the RFC. When padding occurs, any unused pad bits in the encoding must be set to zero or the decoding will fail. The special cases of `\\n` and `\\r` are allowed but completely ignored. An error will result when attempting to decode a string with a character that is not in the encoding alphabet or not one of `=`, `\\r`, or `\\n`."
            ],
            "cost": {
                "value": null,
                "doc": "1 + 1 per 16 bytes of A"
            },
            "min_avm_version": 7,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "E",
                    "immediate_type": "arg_enum",
                    "arg_enum": "base64",
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "encoding index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "bitlen": {
            "name": "bitlen",
            "size": 1,
            "doc": [
                "The highest set bit in A. If A is a byte-array, it is interpreted as a big-endian unsigned integer. bitlen of 0 is 0, bitlen of 8 is 4",
                "bitlen interprets arrays as big-endian integers, unlike setbit/getbit"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "block": {
            "name": "block",
            "size": 2,
            "doc": [
                "field F of block A. Fail unless A falls between txn.LastValid-1002 and txn.FirstValid (exclusive)"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 7,
            "halts": false,
            "mode": "any",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "block",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": " block field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "bnz": {
            "name": "bnz",
            "size": 3,
            "doc": [
                "branch to TARGET if value A is not zero",
                "The `bnz` instruction opcode 0x40 is followed by two immediate data bytes which are a high byte first and low byte second which together form a 16 bit offset which the instruction may branch to. For a bnz instruction at `pc`, if the last element of the stack is not zero then branch to instruction at `pc + 3 + N`, else proceed to next instruction at `pc + 3`. Branch targets must be aligned instructions. (e.g. Branching to the second byte of a 2 byte op will be rejected.) Starting at v4, the offset is treated as a signed 16 bit integer allowing for backward branches and looping. In prior version (v1 to v3), branch offsets are limited to forward branches only, 0-0x7fff.",
                "",
                "At v2 it became allowed to branch to the end of the program exactly after the last instruction: bnz to byte N (with 0-indexing) was illegal for a TEAL program with N bytes before v2, and is legal after it. This change eliminates the need for a last instruction of no-op as a branch target at the end. (Branching beyond the end--in other words, to a byte larger than N--is still illegal and will cause the program to fail.)"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "TARGET",
                    "immediate_type": "label",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "branch offset"
                }
            ],
            "stack_outputs": []
        },
        "box_create": {
            "name": "box_create",
            "size": 1,
            "doc": [
                "create a box named A, of length B. Fail if the name A is empty or B exceeds 32,768. Returns 0 if A already existed, else 1",
                "Newly created boxes are filled with 0 bytes. `box_create` will fail if the referenced box already exists with a different size. Otherwise, existing boxes are unchanged by `box_create`."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "app",
            "groups": [
                "Box Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "boxName",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "box_del": {
            "name": "box_del",
            "size": 1,
            "doc": [
                "delete box named A if it exists. Return 1 if A existed, 0 otherwise"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "app",
            "groups": [
                "Box Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "boxName",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "box_extract": {
            "name": "box_extract",
            "size": 1,
            "doc": [
                "read C bytes from box A, starting at offset B. Fail if A does not exist, or the byte range is outside A's size."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "app",
            "groups": [
                "Box Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "boxName",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "box_get": {
            "name": "box_get",
            "size": 1,
            "doc": [
                "X is the contents of box A if A exists, else ''. Y is 1 if A exists, else 0.",
                "For boxes that exceed 4,096 bytes, consider `box_create`, `box_extract`, and `box_replace`"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "app",
            "groups": [
                "Box Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "boxName",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "box_len": {
            "name": "box_len",
            "size": 1,
            "doc": [
                "X is the length of box A if A exists, else 0. Y is 1 if A exists, else 0."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "app",
            "groups": [
                "Box Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "boxName",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "box_put": {
            "name": "box_put",
            "size": 1,
            "doc": [
                "replaces the contents of box A with byte-array B. Fails if A exists and len(B) != len(box A). Creates A if it does not exist",
                "For boxes that exceed 4,096 bytes, consider `box_create`, `box_extract`, and `box_replace`"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "app",
            "groups": [
                "Box Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "boxName",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "box_replace": {
            "name": "box_replace",
            "size": 1,
            "doc": [
                "write byte-array C into box A, starting at offset B. Fail if A does not exist, or the byte range is outside A's size."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "app",
            "groups": [
                "Box Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "boxName",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "box_resize": {
            "name": "box_resize",
            "size": 1,
            "doc": [
                "change the size of box named A to be of length B, adding zero bytes to end or removing bytes from the end, as needed. Fail if the name A is empty, A is not an existing box, or B exceeds 32,768."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 10,
            "halts": false,
            "mode": "app",
            "groups": [
                "Box Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "boxName",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "box_splice": {
            "name": "box_splice",
            "size": 1,
            "doc": [
                "set box A to contain its previous bytes up to index B, followed by D, followed by the original bytes of A that began at index B+C.",
                "Boxes are of constant length. If C < len(D), then len(D)-C bytes will be removed from the end. If C > len(D), zero bytes will be appended to the end to reach the box length."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 10,
            "halts": false,
            "mode": "app",
            "groups": [
                "Box Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "boxName",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "D",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "bsqrt": {
            "name": "bsqrt",
            "size": 1,
            "doc": [
                "The largest integer I such that I^2 <= A. A and I are interpreted as big-endian unsigned integers"
            ],
            "cost": {
                "value": 40,
                "doc": "40"
            },
            "min_avm_version": 6,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "bigint",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bigint",
                    "doc": null
                }
            ]
        },
        "btoi": {
            "name": "btoi",
            "size": 1,
            "doc": [
                "converts big-endian byte array A to uint64. Fails if len(A) > 8. Padded by leading 0s if len(A) < 8.",
                "`btoi` fails if the input is longer than 8 bytes."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "bury": {
            "name": "bury",
            "size": 2,
            "doc": [
                "replace the Nth value from the top of the stack with A. bury 0 fails."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "N",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "depth"
                }
            ],
            "stack_outputs": []
        },
        "bytec": {
            "name": "bytec",
            "size": 2,
            "doc": [
                "Ith constant from bytecblock"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "I",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "an index in the bytecblock"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "bytec_0": {
            "name": "bytec_0",
            "size": 1,
            "doc": [
                "constant 0 from bytecblock"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "bytec_1": {
            "name": "bytec_1",
            "size": 1,
            "doc": [
                "constant 1 from bytecblock"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "bytec_2": {
            "name": "bytec_2",
            "size": 1,
            "doc": [
                "constant 2 from bytecblock"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "bytec_3": {
            "name": "bytec_3",
            "size": 1,
            "doc": [
                "constant 3 from bytecblock"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "bytecblock": {
            "name": "bytecblock",
            "size": 0,
            "doc": [
                "prepare block of byte-array constants for use by bytec",
                "`bytecblock` loads the following program bytes into an array of byte-array constants in the evaluator. These constants can be referred to by `bytec` and `bytec_*` which will push the value onto the stack. Subsequent calls to `bytecblock` reset and replace the bytes constants available to the script."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "BYTES ...",
                    "immediate_type": "bytes_array",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "a block of byte constant values"
                }
            ],
            "stack_outputs": []
        },
        "bz": {
            "name": "bz",
            "size": 3,
            "doc": [
                "branch to TARGET if value A is zero",
                "See `bnz` for details on how branches work. `bz` inverts the behavior of `bnz`."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "TARGET",
                    "immediate_type": "label",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "branch offset"
                }
            ],
            "stack_outputs": []
        },
        "bzero": {
            "name": "bzero",
            "size": 1,
            "doc": [
                "zero filled byte-array of length A"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "b|": {
            "name": "b|",
            "size": 1,
            "doc": [
                "A bitwise-or B. A and B are zero-left extended to the greater of their lengths"
            ],
            "cost": {
                "value": 6,
                "doc": "6"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Logic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "b~": {
            "name": "b~",
            "size": 1,
            "doc": [
                "A with all bits inverted"
            ],
            "cost": {
                "value": 4,
                "doc": "4"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Logic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "callsub": {
            "name": "callsub",
            "size": 3,
            "doc": [
                "branch unconditionally to TARGET, saving the next instruction on the call stack",
                "The call stack is separate from the data stack. Only `callsub`, `retsub`, and `proto` manipulate it."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "TARGET",
                    "immediate_type": "label",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "branch offset"
                }
            ],
            "stack_outputs": []
        },
        "concat": {
            "name": "concat",
            "size": 1,
            "doc": [
                "join A and B",
                "`concat` fails if the result would be greater than 4096 bytes."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "cover": {
            "name": "cover",
            "size": 2,
            "doc": [
                "remove top of stack, and place it deeper in the stack such that N elements are above it. Fails if stack depth <= N."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "N",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "depth"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "dig": {
            "name": "dig",
            "size": 2,
            "doc": [
                "Nth value from the top of the stack. dig 0 is equivalent to dup"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "N",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "depth"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "divmodw": {
            "name": "divmodw",
            "size": 1,
            "doc": [
                "W,X = (A,B / C,D); Y,Z = (A,B modulo C,D)",
                "The notation J,K indicates that two uint64 values J and K are interpreted as a uint128 value, with J as the high uint64 and K the low."
            ],
            "cost": {
                "value": 20,
                "doc": "20"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "D",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "W",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "Z",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "divw": {
            "name": "divw",
            "size": 1,
            "doc": [
                "A,B / C. Fail if C == 0 or if result overflows.",
                "The notation A,B indicates that A and B are interpreted as a uint128 value, with A as the high uint64 and B the low."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 6,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "dup": {
            "name": "dup",
            "size": 1,
            "doc": [
                "duplicate A"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "dup2": {
            "name": "dup2",
            "size": 1,
            "doc": [
                "duplicate A and B"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "W",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "Z",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "dupn": {
            "name": "dupn",
            "size": 2,
            "doc": [
                "duplicate A, N times"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "N",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "copy count"
                }
            ],
            "stack_outputs": []
        },
        "ec_add": {
            "name": "ec_add",
            "size": 2,
            "doc": [
                "for curve points A and B, return the curve point A + B",
                "A and B are curve points in affine representation: field element X concatenated with field element Y. Field element `Z` is encoded as follows.",
                "For the base field elements (Fp), `Z` is encoded as a big-endian number and must be lower than the field modulus.",
                "For the quadratic field extension (Fp2), `Z` is encoded as the concatenation of the individual encoding of the coefficients. For an Fp2 element of the form `Z = Z0 + Z1 i`, where `i` is a formal quadratic non-residue, the encoding of Z is the concatenation of the encoding of `Z0` and `Z1` in this order. (`Z0` and `Z1` must be less than the field modulus).",
                "",
                "The point at infinity is encoded as `(X,Y) = (0,0)`.",
                "Groups G1 and G2 are denoted additively.",
                "",
                "Fails if A or B is not in G.",
                "A and/or B are allowed to be the point at infinity.",
                "Does _not_ check if A and B are in the main prime-order subgroup."
            ],
            "cost": {
                "value": null,
                "doc": "BN254g1=125; BN254g2=170; BLS12_381g1=205; BLS12_381g2=290"
            },
            "min_avm_version": 10,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "G",
                    "immediate_type": "arg_enum",
                    "arg_enum": "EC",
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "curve index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "ec_map_to": {
            "name": "ec_map_to",
            "size": 2,
            "doc": [
                "maps field element A to group G",
                "BN254 points are mapped by the SVDW map. BLS12-381 points are mapped by the SSWU map.",
                "G1 element inputs are base field elements and G2 element inputs are quadratic field elements, with nearly the same encoding rules (for field elements) as defined in `ec_add`. There is one difference of encoding rule: G1 element inputs do not need to be 0-padded if they fit in less than 32 bytes for BN254 and less than 48 bytes for BLS12-381. (As usual, the empty byte array represents 0.) G2 elements inputs need to be always have the required size."
            ],
            "cost": {
                "value": null,
                "doc": "BN254g1=630; BN254g2=3300; BLS12_381g1=1950; BLS12_381g2=8150"
            },
            "min_avm_version": 10,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "G",
                    "immediate_type": "arg_enum",
                    "arg_enum": "EC",
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "curve index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "ec_multi_scalar_mul": {
            "name": "ec_multi_scalar_mul",
            "size": 2,
            "doc": [
                "for curve points A and scalars B, return curve point B0A0 + B1A1 + B2A2 + ... + BnAn",
                "A is a list of concatenated points, encoded and checked as described in `ec_add`. B is a list of concatenated scalars which, unlike ec_scalar_mul, must all be exactly 32 bytes long.",
                "The name `ec_multi_scalar_mul` was chosen to reflect common usage, but a more consistent name would be `ec_multi_scalar_mul`. AVM values are limited to 4096 bytes, so `ec_multi_scalar_mul` is limited by the size of the points in the group being operated upon."
            ],
            "cost": {
                "value": null,
                "doc": "BN254g1=3600 + 90 per 32 bytes of B; BN254g2=7200 + 270 per 32 bytes of B; BLS12_381g1=6500 + 95 per 32 bytes of B; BLS12_381g2=14850 + 485 per 32 bytes of B"
            },
            "min_avm_version": 10,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "G",
                    "immediate_type": "arg_enum",
                    "arg_enum": "EC",
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "curve index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "ec_pairing_check": {
            "name": "ec_pairing_check",
            "size": 2,
            "doc": [
                "1 if the product of the pairing of each point in A with its respective point in B is equal to the identity element of the target group Gt, else 0",
                "A and B are concatenated points, encoded and checked as described in `ec_add`. A contains points of the group G, B contains points of the associated group (G2 if G is G1, and vice versa). Fails if A and B have a different number of points, or if any point is not in its described group or outside the main prime-order subgroup - a stronger condition than other opcodes. AVM values are limited to 4096 bytes, so `ec_pairing_check` is limited by the size of the points in the groups being operated upon."
            ],
            "cost": {
                "value": null,
                "doc": "BN254g1=8000 + 7400 per 64 bytes of B; BN254g2=8000 + 7400 per 128 bytes of B; BLS12_381g1=13000 + 10000 per 96 bytes of B; BLS12_381g2=13000 + 10000 per 192 bytes of B"
            },
            "min_avm_version": 10,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "G",
                    "immediate_type": "arg_enum",
                    "arg_enum": "EC",
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "curve index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "ec_scalar_mul": {
            "name": "ec_scalar_mul",
            "size": 2,
            "doc": [
                "for curve point A and scalar B, return the curve point BA, the point A multiplied by the scalar B.",
                "A is a curve point encoded and checked as described in `ec_add`. Scalar B is interpreted as a big-endian unsigned integer. Fails if B exceeds 32 bytes."
            ],
            "cost": {
                "value": null,
                "doc": "BN254g1=1810; BN254g2=3430; BLS12_381g1=2950; BLS12_381g2=6530"
            },
            "min_avm_version": 10,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "G",
                    "immediate_type": "arg_enum",
                    "arg_enum": "EC",
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "curve index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "ec_subgroup_check": {
            "name": "ec_subgroup_check",
            "size": 2,
            "doc": [
                "1 if A is in the main prime-order subgroup of G (including the point at infinity) else 0. Program fails if A is not in G at all."
            ],
            "cost": {
                "value": null,
                "doc": "BN254g1=20; BN254g2=3100; BLS12_381g1=1850; BLS12_381g2=2340"
            },
            "min_avm_version": 10,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "G",
                    "immediate_type": "arg_enum",
                    "arg_enum": "EC",
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "curve index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "ecdsa_pk_decompress": {
            "name": "ecdsa_pk_decompress",
            "size": 2,
            "doc": [
                "decompress pubkey A into components X, Y",
                "The 33 byte public key in a compressed form to be decompressed into X and Y (top) components. All values are big-endian encoded."
            ],
            "cost": {
                "value": null,
                "doc": "Secp256k1=650; Secp256r1=2400"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[33]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "V",
                    "immediate_type": "arg_enum",
                    "arg_enum": "ECDSA",
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "curve index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[32]byte",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "[32]byte",
                    "doc": null
                }
            ]
        },
        "ecdsa_pk_recover": {
            "name": "ecdsa_pk_recover",
            "size": 2,
            "doc": [
                "for (data A, recovery id B, signature C, D) recover a public key",
                "S (top) and R elements of a signature, recovery id and data (bottom) are expected on the stack and used to deriver a public key. All values are big-endian encoded. The signed data must be 32 bytes long."
            ],
            "cost": {
                "value": 2000,
                "doc": "2000"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[32]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "[32]byte",
                    "doc": null
                },
                {
                    "name": "D",
                    "stack_type": "[32]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "V",
                    "immediate_type": "arg_enum",
                    "arg_enum": "ECDSA",
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "curve index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[32]byte",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "[32]byte",
                    "doc": null
                }
            ]
        },
        "ecdsa_verify": {
            "name": "ecdsa_verify",
            "size": 2,
            "doc": [
                "for (data A, signature B, C and pubkey D, E) verify the signature of the data against the pubkey => {0 or 1}",
                "The 32 byte Y-component of a public key is the last element on the stack, preceded by X-component of a pubkey, preceded by S and R components of a signature, preceded by the data that is fifth element on the stack. All values are big-endian encoded. The signed data must be 32 bytes long, and signatures in lower-S form are only accepted."
            ],
            "cost": {
                "value": null,
                "doc": "Secp256k1=1700; Secp256r1=2500"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[32]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[32]byte",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "[32]byte",
                    "doc": null
                },
                {
                    "name": "D",
                    "stack_type": "[32]byte",
                    "doc": null
                },
                {
                    "name": "E",
                    "stack_type": "[32]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "V",
                    "immediate_type": "arg_enum",
                    "arg_enum": "ECDSA",
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "curve index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "ed25519verify": {
            "name": "ed25519verify",
            "size": 1,
            "doc": [
                "for (data A, signature B, pubkey C) verify the signature of (\"ProgData\" || program_hash || data) against the pubkey => {0 or 1}",
                "The 32 byte public key is the last element on the stack, preceded by the 64 byte signature at the second-to-last element on the stack, preceded by the data which was signed at the third-to-last element on the stack."
            ],
            "cost": {
                "value": 1900,
                "doc": "1900"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[64]byte",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "[32]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "ed25519verify_bare": {
            "name": "ed25519verify_bare",
            "size": 1,
            "doc": [
                "for (data A, signature B, pubkey C) verify the signature of the data against the pubkey => {0 or 1}"
            ],
            "cost": {
                "value": 1900,
                "doc": "1900"
            },
            "min_avm_version": 7,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[64]byte",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "[32]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "err": {
            "name": "err",
            "size": 1,
            "doc": [
                "Fail immediately."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": true,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": []
        },
        "exp": {
            "name": "exp",
            "size": 1,
            "doc": [
                "A raised to the Bth power. Fail if A == B == 0 and on overflow"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "expw": {
            "name": "expw",
            "size": 1,
            "doc": [
                "A raised to the Bth power as a 128-bit result in two uint64s. X is the high 64 bits, Y is the low. Fail if A == B == 0 or if the results exceeds 2^128-1"
            ],
            "cost": {
                "value": 10,
                "doc": "10"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "extract": {
            "name": "extract",
            "size": 3,
            "doc": [
                "A range of bytes from A starting at S up to but not including S+L. If L is 0, then extract to the end of the string. If S or S+L is larger than the array length, the program fails"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "S",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "start position"
                },
                {
                    "name": "L",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "length"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "extract3": {
            "name": "extract3",
            "size": 1,
            "doc": [
                "A range of bytes from A starting at B up to but not including B+C. If B+C is larger than the array length, the program fails",
                "`extract3` can be called using `extract` with no immediates."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "extract_uint16": {
            "name": "extract_uint16",
            "size": 1,
            "doc": [
                "A uint16 formed from a range of big-endian bytes from A starting at B up to but not including B+2. If B+2 is larger than the array length, the program fails"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "extract_uint32": {
            "name": "extract_uint32",
            "size": 1,
            "doc": [
                "A uint32 formed from a range of big-endian bytes from A starting at B up to but not including B+4. If B+4 is larger than the array length, the program fails"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "extract_uint64": {
            "name": "extract_uint64",
            "size": 1,
            "doc": [
                "A uint64 formed from a range of big-endian bytes from A starting at B up to but not including B+8. If B+8 is larger than the array length, the program fails"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "frame_bury": {
            "name": "frame_bury",
            "size": 2,
            "doc": [
                "replace the Nth (signed) value from the frame pointer in the stack with A"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "I",
                    "immediate_type": "int8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "frame slot"
                }
            ],
            "stack_outputs": []
        },
        "frame_dig": {
            "name": "frame_dig",
            "size": 2,
            "doc": [
                "Nth (signed) value from the frame pointer."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "I",
                    "immediate_type": "int8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "frame slot"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "gaid": {
            "name": "gaid",
            "size": 2,
            "doc": [
                "ID of the asset or application created in the Tth transaction of the current group",
                "`gaid` fails unless the requested transaction created an asset or application and T < GroupIndex."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "app",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "T",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "transaction group index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "application",
                    "doc": null
                }
            ]
        },
        "gaids": {
            "name": "gaids",
            "size": 1,
            "doc": [
                "ID of the asset or application created in the Ath transaction of the current group",
                "`gaids` fails unless the requested transaction created an asset or application and A < GroupIndex."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "app",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "application",
                    "doc": null
                }
            ]
        },
        "getbit": {
            "name": "getbit",
            "size": 1,
            "doc": [
                "Bth bit of (byte-array or integer) A. If B is greater than or equal to the bit length of the value (8*byte length), the program fails",
                "see explanation of bit ordering in setbit"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "getbyte": {
            "name": "getbyte",
            "size": 1,
            "doc": [
                "Bth byte of A, as an integer. If B is greater than or equal to the array length, the program fails"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "gitxn": {
            "name": "gitxn",
            "size": 3,
            "doc": [
                "field F of the Tth transaction in the last inner group submitted"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 6,
            "halts": false,
            "mode": "app",
            "groups": [
                "Inner Transactions"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "T",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "transaction group index"
                },
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txn",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "gitxna": {
            "name": "gitxna",
            "size": 4,
            "doc": [
                "Ith value of the array field F from the Tth transaction in the last inner group submitted"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 6,
            "halts": false,
            "mode": "app",
            "groups": [
                "Inner Transactions"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "T",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "transaction group index"
                },
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txna",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                },
                {
                    "name": "I",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "transaction field array index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "gitxnas": {
            "name": "gitxnas",
            "size": 3,
            "doc": [
                "Ath value of the array field F from the Tth transaction in the last inner group submitted"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 6,
            "halts": false,
            "mode": "app",
            "groups": [
                "Inner Transactions"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "T",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "transaction group index"
                },
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txna",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "gload": {
            "name": "gload",
            "size": 3,
            "doc": [
                "Ith scratch space value of the Tth transaction in the current group",
                "`gload` fails unless the requested transaction is an ApplicationCall and T < GroupIndex."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "app",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "T",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "transaction group index"
                },
                {
                    "name": "I",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "position in scratch space to load from"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "gloads": {
            "name": "gloads",
            "size": 2,
            "doc": [
                "Ith scratch space value of the Ath transaction in the current group",
                "`gloads` fails unless the requested transaction is an ApplicationCall and A < GroupIndex."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "app",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "I",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "position in scratch space to load from"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "gloadss": {
            "name": "gloadss",
            "size": 1,
            "doc": [
                "Bth scratch space value of the Ath transaction in the current group"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 6,
            "halts": false,
            "mode": "app",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "global": {
            "name": "global",
            "size": 2,
            "doc": [
                "global field F"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "global",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "a global field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "gtxn": {
            "name": "gtxn",
            "size": 3,
            "doc": [
                "field F of the Tth transaction in the current group",
                "for notes on transaction fields available, see `txn`. If this transaction is _i_ in the group, `gtxn i field` is equivalent to `txn field`."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "T",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "transaction group index"
                },
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txn",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "gtxna": {
            "name": "gtxna",
            "size": 4,
            "doc": [
                "Ith value of the array field F from the Tth transaction in the current group",
                "`gtxna` can be called using `gtxn` with 3 immediates."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "T",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "transaction group index"
                },
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txna",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                },
                {
                    "name": "I",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "transaction field array index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "gtxnas": {
            "name": "gtxnas",
            "size": 3,
            "doc": [
                "Ath value of the array field F from the Tth transaction in the current group"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "T",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "transaction group index"
                },
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txna",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "gtxns": {
            "name": "gtxns",
            "size": 2,
            "doc": [
                "field F of the Ath transaction in the current group",
                "for notes on transaction fields available, see `txn`. If top of stack is _i_, `gtxns field` is equivalent to `gtxn _i_ field`. gtxns exists so that _i_ can be calculated, often based on the index of the current transaction."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txn",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "gtxnsa": {
            "name": "gtxnsa",
            "size": 3,
            "doc": [
                "Ith value of the array field F from the Ath transaction in the current group",
                "`gtxnsa` can be called using `gtxns` with 2 immediates."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txna",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                },
                {
                    "name": "I",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "transaction field array index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "gtxnsas": {
            "name": "gtxnsas",
            "size": 2,
            "doc": [
                "Bth value of the array field F from the Ath transaction in the current group"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txna",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "intc": {
            "name": "intc",
            "size": 2,
            "doc": [
                "Ith constant from intcblock"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "I",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "an index in the intcblock"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "intc_0": {
            "name": "intc_0",
            "size": 1,
            "doc": [
                "constant 0 from intcblock"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "intc_1": {
            "name": "intc_1",
            "size": 1,
            "doc": [
                "constant 1 from intcblock"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "intc_2": {
            "name": "intc_2",
            "size": 1,
            "doc": [
                "constant 2 from intcblock"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "intc_3": {
            "name": "intc_3",
            "size": 1,
            "doc": [
                "constant 3 from intcblock"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "intcblock": {
            "name": "intcblock",
            "size": 0,
            "doc": [
                "prepare block of uint64 constants for use by intc",
                "`intcblock` loads following program bytes into an array of integer constants in the evaluator. These integer constants can be referred to by `intc` and `intc_*` which will push the value onto the stack. Subsequent calls to `intcblock` reset and replace the integer constants available to the script."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "UINT ...",
                    "immediate_type": "uint64_array",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "a block of int constant values"
                }
            ],
            "stack_outputs": []
        },
        "itob": {
            "name": "itob",
            "size": 1,
            "doc": [
                "converts uint64 A to big-endian byte array, always of length 8"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[8]byte",
                    "doc": null
                }
            ]
        },
        "itxn": {
            "name": "itxn",
            "size": 2,
            "doc": [
                "field F of the last inner transaction"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "app",
            "groups": [
                "Inner Transactions"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txn",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "itxn_begin": {
            "name": "itxn_begin",
            "size": 1,
            "doc": [
                "begin preparation of a new inner transaction in a new transaction group",
                "`itxn_begin` initializes Sender to the application address; Fee to the minimum allowable, taking into account MinTxnFee and credit from overpaying in earlier transactions; FirstValid/LastValid to the values in the invoking transaction, and all other fields to zero or empty values."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "app",
            "groups": [
                "Inner Transactions"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": []
        },
        "itxn_field": {
            "name": "itxn_field",
            "size": 2,
            "doc": [
                "set field F of the current inner transaction to A",
                "`itxn_field` fails if A is of the wrong type for F, including a byte array of the wrong size for use as an address when F is an address field. `itxn_field` also fails if A is an account, asset, or app that is not _available_, or an attempt is made extend an array field beyond the limit imposed by consensus parameters. (Addresses set into asset params of acfg transactions need not be _available_.)"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "app",
            "groups": [
                "Inner Transactions"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "itxn_field",
                    "modifies_stack_input": 0,
                    "modifies_stack_output": null,
                    "doc": "transaction field index"
                }
            ],
            "stack_outputs": []
        },
        "itxn_next": {
            "name": "itxn_next",
            "size": 1,
            "doc": [
                "begin preparation of a new inner transaction in the same transaction group",
                "`itxn_next` initializes the transaction exactly as `itxn_begin` does"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 6,
            "halts": false,
            "mode": "app",
            "groups": [
                "Inner Transactions"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": []
        },
        "itxn_submit": {
            "name": "itxn_submit",
            "size": 1,
            "doc": [
                "execute the current inner transaction group. Fail if executing this group would exceed the inner transaction limit, or if any transaction in the group fails.",
                "`itxn_submit` resets the current transaction so that it can not be resubmitted. A new `itxn_begin` is required to prepare another inner transaction."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "app",
            "groups": [
                "Inner Transactions"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": []
        },
        "itxna": {
            "name": "itxna",
            "size": 3,
            "doc": [
                "Ith value of the array field F of the last inner transaction"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "app",
            "groups": [
                "Inner Transactions"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txna",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                },
                {
                    "name": "I",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "a transaction field array index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "itxnas": {
            "name": "itxnas",
            "size": 2,
            "doc": [
                "Ath value of the array field F of the last inner transaction"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 6,
            "halts": false,
            "mode": "app",
            "groups": [
                "Inner Transactions"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txna",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "json_ref": {
            "name": "json_ref",
            "size": 2,
            "doc": [
                "key B's value, of type R, from a [valid](jsonspec.md) utf-8 encoded json object A",
                "*Warning*: Usage should be restricted to very rare use cases, as JSON decoding is expensive and quite limited. In addition, JSON objects are large and not optimized for size.",
                "",
                "Almost all smart contracts should use simpler and smaller methods (such as the [ABI](https://arc.algorand.foundation/ARCs/arc-0004). This opcode should only be used in cases where JSON is only available option, e.g. when a third-party only signs JSON."
            ],
            "cost": {
                "value": null,
                "doc": "25 + 2 per 7 bytes of A"
            },
            "min_avm_version": 7,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "R",
                    "immediate_type": "arg_enum",
                    "arg_enum": "json_ref",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "return type index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "keccak256": {
            "name": "keccak256",
            "size": 1,
            "doc": [
                "Keccak256 hash of value A, yields [32]byte"
            ],
            "cost": {
                "value": 130,
                "doc": "130"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[32]byte",
                    "doc": null
                }
            ]
        },
        "len": {
            "name": "len",
            "size": 1,
            "doc": [
                "yields length of byte value A"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "load": {
            "name": "load",
            "size": 2,
            "doc": [
                "Ith scratch space value. All scratch spaces are 0 at program start."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "I",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "position in scratch space to load from"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "loads": {
            "name": "loads",
            "size": 1,
            "doc": [
                "Ath scratch space value.  All scratch spaces are 0 at program start."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "log": {
            "name": "log",
            "size": 1,
            "doc": [
                "write A to log state of the current application",
                "`log` fails if called more than MaxLogCalls times in a program, or if the sum of logged bytes exceeds 1024 bytes."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "match": {
            "name": "match",
            "size": 0,
            "doc": [
                "given match cases from A[1] to A[N], branch to the Ith label where A[I] = B. Continue to the following instruction if no matches are found.",
                "`match` consumes N+1 values from the stack. Let the top stack value be B. The following N values represent an ordered list of match cases/constants (A), where the first value (A[0]) is the deepest in the stack. The immediate arguments are an ordered list of N labels (T). `match` will branch to target T[I], where A[I] = B. If there are no matches then execution continues on to the next instruction."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "TARGET ...",
                    "immediate_type": "label_array",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "list of labels"
                }
            ],
            "stack_outputs": []
        },
        "min_balance": {
            "name": "min_balance",
            "size": 1,
            "doc": [
                "minimum required balance for account A, in microalgos. Required balance is affected by ASA, App, and Box usage. When creating or opting into an app, the minimum balance grows before the app code runs, therefore the increase is visible there. When deleting or closing out, the minimum balance decreases after the app executes. Changes caused by inner transactions or box usage are observable immediately following the opcode effecting the change.",
                "params: Txn.Accounts offset (or, since v4, an _available_ account address), _available_ application id (or, since v4, a Txn.ForeignApps offset). Return: value."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "app",
            "groups": [
                "State Access"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "address_or_index",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "mulw": {
            "name": "mulw",
            "size": 1,
            "doc": [
                "A times B as a 128-bit result in two uint64s. X is the high 64 bits, Y is the low"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "pop": {
            "name": "pop",
            "size": 1,
            "doc": [
                "discard A"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "popn": {
            "name": "popn",
            "size": 2,
            "doc": [
                "remove N values from the top of the stack"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "N",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "stack depth"
                }
            ],
            "stack_outputs": []
        },
        "proto": {
            "name": "proto",
            "size": 3,
            "doc": [
                "Prepare top call frame for a retsub that will assume A args and R return values.",
                "Fails unless the last instruction executed was a `callsub`."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "A",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "number of arguments"
                },
                {
                    "name": "R",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "number of return values"
                }
            ],
            "stack_outputs": []
        },
        "pushbytes": {
            "name": "pushbytes",
            "size": 0,
            "doc": [
                "immediate BYTES",
                "pushbytes args are not added to the bytecblock during assembly processes"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "BYTES",
                    "immediate_type": "bytes",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "a byte constant"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "pushbytess": {
            "name": "pushbytess",
            "size": 0,
            "doc": [
                "push sequences of immediate byte arrays to stack (first byte array being deepest)",
                "pushbytess args are not added to the bytecblock during assembly processes"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "BYTES ...",
                    "immediate_type": "bytes_array",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "a list of byte constants"
                }
            ],
            "stack_outputs": []
        },
        "pushint": {
            "name": "pushint",
            "size": 0,
            "doc": [
                "immediate UINT",
                "pushint args are not added to the intcblock during assembly processes"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "UINT",
                    "immediate_type": "uint64",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "an int constant"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "pushints": {
            "name": "pushints",
            "size": 0,
            "doc": [
                "push sequence of immediate uints to stack in the order they appear (first uint being deepest)",
                "pushints args are not added to the intcblock during assembly processes"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "UINT ...",
                    "immediate_type": "uint64_array",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "a list of int constants"
                }
            ],
            "stack_outputs": []
        },
        "replace2": {
            "name": "replace2",
            "size": 2,
            "doc": [
                "Copy of A with the bytes starting at S replaced by the bytes of B. Fails if S+len(B) exceeds len(A)",
                "`replace2` can be called using `replace` with 1 immediate."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 7,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "S",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "start position"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "replace3": {
            "name": "replace3",
            "size": 1,
            "doc": [
                "Copy of A with the bytes starting at B replaced by the bytes of C. Fails if B+len(C) exceeds len(A)",
                "`replace3` can be called using `replace` with no immediates."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 7,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "retsub": {
            "name": "retsub",
            "size": 1,
            "doc": [
                "pop the top instruction from the call stack and branch to it",
                "If the current frame was prepared by `proto A R`, `retsub` will remove the 'A' arguments from the stack, move the `R` return values down, and pop any stack locations above the relocated return values."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [],
            "immediate_args": [],
            "stack_outputs": []
        },
        "return": {
            "name": "return",
            "size": 1,
            "doc": [
                "use A as success value; end"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": true,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "select": {
            "name": "select",
            "size": 1,
            "doc": [
                "selects one of two values based on top-of-stack: B if C != 0, else A"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "setbit": {
            "name": "setbit",
            "size": 1,
            "doc": [
                "Copy of (byte-array or integer) A, with the Bth bit set to (0 or 1) C. If B is greater than or equal to the bit length of the value (8*byte length), the program fails",
                "When A is a uint64, index 0 is the least significant bit. Setting bit 3 to 1 on the integer 0 yields 8, or 2^3. When A is a byte array, index 0 is the leftmost bit of the leftmost byte. Setting bits 0 through 11 to 1 in a 4-byte-array of 0s yields the byte array 0xfff00000. Setting bit 3 to 1 on the 1-byte-array 0x00 yields the byte array 0x10."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "setbyte": {
            "name": "setbyte",
            "size": 1,
            "doc": [
                "Copy of A with the Bth byte set to small integer (between 0..255) C. If B is greater than or equal to the array length, the program fails"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "sha256": {
            "name": "sha256",
            "size": 1,
            "doc": [
                "SHA256 hash of value A, yields [32]byte"
            ],
            "cost": {
                "value": 35,
                "doc": "35"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[32]byte",
                    "doc": null
                }
            ]
        },
        "sha3_256": {
            "name": "sha3_256",
            "size": 1,
            "doc": [
                "SHA3_256 hash of value A, yields [32]byte"
            ],
            "cost": {
                "value": 130,
                "doc": "130"
            },
            "min_avm_version": 7,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[32]byte",
                    "doc": null
                }
            ]
        },
        "sha512_256": {
            "name": "sha512_256",
            "size": 1,
            "doc": [
                "SHA512_256 hash of value A, yields [32]byte"
            ],
            "cost": {
                "value": 45,
                "doc": "45"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[32]byte",
                    "doc": null
                }
            ]
        },
        "shl": {
            "name": "shl",
            "size": 1,
            "doc": [
                "A times 2^B, modulo 2^64"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "shr": {
            "name": "shr",
            "size": 1,
            "doc": [
                "A divided by 2^B"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "sqrt": {
            "name": "sqrt",
            "size": 1,
            "doc": [
                "The largest integer I such that I^2 <= A"
            ],
            "cost": {
                "value": 4,
                "doc": "4"
            },
            "min_avm_version": 4,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "store": {
            "name": "store",
            "size": 2,
            "doc": [
                "store A to the Ith scratch space"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "I",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "position in scratch space to store to"
                }
            ],
            "stack_outputs": []
        },
        "stores": {
            "name": "stores",
            "size": 1,
            "doc": [
                "store B to the Ath scratch space"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": []
        },
        "substring": {
            "name": "substring",
            "size": 3,
            "doc": [
                "A range of bytes from A starting at S up to but not including E. If E < S, or either is larger than the array length, the program fails"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "S",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "start position"
                },
                {
                    "name": "E",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "end position"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "substring3": {
            "name": "substring3",
            "size": 1,
            "doc": [
                "A range of bytes from A starting at B up to but not including C. If C < B, or either is larger than the array length, the program fails"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "any",
            "groups": [
                "Byte Array Manipulation"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[]byte",
                    "doc": null
                }
            ]
        },
        "swap": {
            "name": "swap",
            "size": 1,
            "doc": [
                "swaps A and B on stack"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 3,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "switch": {
            "name": "switch",
            "size": 0,
            "doc": [
                "branch to the Ath label. Continue at following instruction if index A exceeds the number of labels."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 8,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "TARGET ...",
                    "immediate_type": "label_array",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "list of labels"
                }
            ],
            "stack_outputs": []
        },
        "txn": {
            "name": "txn",
            "size": 2,
            "doc": [
                "field F of current transaction"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txn",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "txna": {
            "name": "txna",
            "size": 3,
            "doc": [
                "Ith value of the array field F of the current transaction",
                "`txna` can be called using `txn` with 2 immediates."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 2,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txna",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                },
                {
                    "name": "I",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "transaction field array index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "txnas": {
            "name": "txnas",
            "size": 2,
            "doc": [
                "Ath value of the array field F of the current transaction"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Loading Values"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "F",
                    "immediate_type": "arg_enum",
                    "arg_enum": "txna",
                    "modifies_stack_input": null,
                    "modifies_stack_output": 0,
                    "doc": "transaction field index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "uncover": {
            "name": "uncover",
            "size": 2,
            "doc": [
                "remove the value at depth N in the stack and shift above items down so the Nth deep value is on top of the stack. Fails if stack depth <= N."
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 5,
            "halts": false,
            "mode": "any",
            "groups": [
                "Flow Control"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "any",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "N",
                    "immediate_type": "uint8",
                    "arg_enum": null,
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": "depth"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "any",
                    "doc": null
                }
            ]
        },
        "vrf_verify": {
            "name": "vrf_verify",
            "size": 2,
            "doc": [
                "Verify the proof B of message A against pubkey C. Returns vrf output and verification flag.",
                "`VrfAlgorand` is the VRF used in Algorand. It is ECVRF-ED25519-SHA512-Elligator2, specified in the IETF internet draft [draft-irtf-cfrg-vrf-03](https://datatracker.ietf.org/doc/draft-irtf-cfrg-vrf/03/)."
            ],
            "cost": {
                "value": 5700,
                "doc": "5700"
            },
            "min_avm_version": 7,
            "halts": false,
            "mode": "any",
            "groups": [
                "Cryptography"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "[]byte",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "[80]byte",
                    "doc": null
                },
                {
                    "name": "C",
                    "stack_type": "[32]byte",
                    "doc": null
                }
            ],
            "immediate_args": [
                {
                    "name": "S",
                    "immediate_type": "arg_enum",
                    "arg_enum": "vrf_verify",
                    "modifies_stack_input": null,
                    "modifies_stack_output": null,
                    "doc": " parameters index"
                }
            ],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "[64]byte",
                    "doc": null
                },
                {
                    "name": "Y",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "|": {
            "name": "|",
            "size": 1,
            "doc": [
                "A bitwise-or B"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        },
        "||": {
            "name": "||",
            "size": 1,
            "doc": [
                "A is not zero or B is not zero => {0 or 1}"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                },
                {
                    "name": "B",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "bool",
                    "doc": null
                }
            ]
        },
        "~": {
            "name": "~",
            "size": 1,
            "doc": [
                "bitwise invert value A"
            ],
            "cost": {
                "value": 1,
                "doc": "1"
            },
            "min_avm_version": 1,
            "halts": false,
            "mode": "any",
            "groups": [
                "Arithmetic"
            ],
            "stack_inputs": [
                {
                    "name": "A",
                    "stack_type": "uint64",
                    "doc": null
                }
            ],
            "immediate_args": [],
            "stack_outputs": [
                {
                    "name": "X",
                    "stack_type": "uint64",
                    "doc": null
                }
            ]
        }
    },
    "arg_enums": {
        "acct_params": [
            {
                "name": "AcctBalance",
                "doc": "Account balance in microalgos",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AcctMinBalance",
                "doc": "Minimum required balance for account, in microalgos",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AcctAuthAddr",
                "doc": "Address the account is rekeyed to.",
                "stack_type": "address",
                "mode": "app"
            },
            {
                "name": "AcctTotalNumUint",
                "doc": "The total number of uint64 values allocated by this account in Global and Local States.",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AcctTotalNumByteSlice",
                "doc": "The total number of byte array values allocated by this account in Global and Local States.",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AcctTotalExtraAppPages",
                "doc": "The number of extra app code pages used by this account.",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AcctTotalAppsCreated",
                "doc": "The number of existing apps created by this account.",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AcctTotalAppsOptedIn",
                "doc": "The number of apps this account is opted into.",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AcctTotalAssetsCreated",
                "doc": "The number of existing ASAs created by this account.",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AcctTotalAssets",
                "doc": "The numbers of ASAs held by this account (including ASAs this account created).",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AcctTotalBoxes",
                "doc": "The number of existing boxes created by this account's app.",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AcctTotalBoxBytes",
                "doc": "The total number of bytes used by this account's app's box keys and values.",
                "stack_type": "uint64",
                "mode": "app"
            }
        ],
        "app_params": [
            {
                "name": "AppApprovalProgram",
                "doc": "Bytecode of Approval Program",
                "stack_type": "[]byte",
                "mode": "app"
            },
            {
                "name": "AppClearStateProgram",
                "doc": "Bytecode of Clear State Program",
                "stack_type": "[]byte",
                "mode": "app"
            },
            {
                "name": "AppGlobalNumUint",
                "doc": "Number of uint64 values allowed in Global State",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AppGlobalNumByteSlice",
                "doc": "Number of byte array values allowed in Global State",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AppLocalNumUint",
                "doc": "Number of uint64 values allowed in Local State",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AppLocalNumByteSlice",
                "doc": "Number of byte array values allowed in Local State",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AppExtraProgramPages",
                "doc": "Number of Extra Program Pages of code space",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AppCreator",
                "doc": "Creator address",
                "stack_type": "address",
                "mode": "app"
            },
            {
                "name": "AppAddress",
                "doc": "Address for which this application has authority",
                "stack_type": "address",
                "mode": "app"
            }
        ],
        "asset_holding": [
            {
                "name": "AssetBalance",
                "doc": "Amount of the asset unit held by this account",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AssetFrozen",
                "doc": "Is the asset frozen or not",
                "stack_type": "bool",
                "mode": "app"
            }
        ],
        "asset_params": [
            {
                "name": "AssetTotal",
                "doc": "Total number of units of this asset",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AssetDecimals",
                "doc": "See AssetParams.Decimals",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "AssetDefaultFrozen",
                "doc": "Frozen by default or not",
                "stack_type": "bool",
                "mode": "app"
            },
            {
                "name": "AssetUnitName",
                "doc": "Asset unit name",
                "stack_type": "[]byte",
                "mode": "app"
            },
            {
                "name": "AssetName",
                "doc": "Asset name",
                "stack_type": "[]byte",
                "mode": "app"
            },
            {
                "name": "AssetURL",
                "doc": "URL with additional info about the asset",
                "stack_type": "[]byte",
                "mode": "app"
            },
            {
                "name": "AssetMetadataHash",
                "doc": "Arbitrary commitment",
                "stack_type": "[32]byte",
                "mode": "app"
            },
            {
                "name": "AssetManager",
                "doc": "Manager address",
                "stack_type": "address",
                "mode": "app"
            },
            {
                "name": "AssetReserve",
                "doc": "Reserve address",
                "stack_type": "address",
                "mode": "app"
            },
            {
                "name": "AssetFreeze",
                "doc": "Freeze address",
                "stack_type": "address",
                "mode": "app"
            },
            {
                "name": "AssetClawback",
                "doc": "Clawback address",
                "stack_type": "address",
                "mode": "app"
            },
            {
                "name": "AssetCreator",
                "doc": "Creator address",
                "stack_type": "address",
                "mode": "app"
            }
        ],
        "base64": [
            {
                "name": "URLEncoding",
                "doc": null,
                "stack_type": null,
                "mode": "any"
            },
            {
                "name": "StdEncoding",
                "doc": null,
                "stack_type": null,
                "mode": "any"
            }
        ],
        "block": [
            {
                "name": "BlkSeed",
                "doc": null,
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "BlkTimestamp",
                "doc": null,
                "stack_type": "uint64",
                "mode": "any"
            }
        ],
        "EC": [
            {
                "name": "BN254g1",
                "doc": "G1 of the BN254 curve. Points encoded as 32 byte X following by 32 byte Y",
                "stack_type": null,
                "mode": "any"
            },
            {
                "name": "BN254g2",
                "doc": "G2 of the BN254 curve. Points encoded as 64 byte X following by 64 byte Y",
                "stack_type": null,
                "mode": "any"
            },
            {
                "name": "BLS12_381g1",
                "doc": "G1 of the BLS 12-381 curve. Points encoded as 48 byte X following by 48 byte Y",
                "stack_type": null,
                "mode": "any"
            },
            {
                "name": "BLS12_381g2",
                "doc": "G2 of the BLS 12-381 curve. Points encoded as 96 byte X following by 96 byte Y",
                "stack_type": null,
                "mode": "any"
            }
        ],
        "ECDSA": [
            {
                "name": "Secp256k1",
                "doc": "secp256k1 curve, used in Bitcoin",
                "stack_type": null,
                "mode": "any"
            },
            {
                "name": "Secp256r1",
                "doc": "secp256r1 curve, NIST standard",
                "stack_type": null,
                "mode": "any"
            }
        ],
        "txn": [
            {
                "name": "Sender",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "Fee",
                "doc": "microalgos",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "FirstValid",
                "doc": "round number",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "FirstValidTime",
                "doc": "UNIX timestamp of block before txn.FirstValid. Fails if negative",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "LastValid",
                "doc": "round number",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "Note",
                "doc": "Any data up to 1024 bytes",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "Lease",
                "doc": "32 byte lease value",
                "stack_type": "[32]byte",
                "mode": "any"
            },
            {
                "name": "Receiver",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "Amount",
                "doc": "microalgos",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "CloseRemainderTo",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "VotePK",
                "doc": "32 byte address",
                "stack_type": "[32]byte",
                "mode": "any"
            },
            {
                "name": "SelectionPK",
                "doc": "32 byte address",
                "stack_type": "[32]byte",
                "mode": "any"
            },
            {
                "name": "VoteFirst",
                "doc": "The first round that the participation key is valid.",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "VoteLast",
                "doc": "The last round that the participation key is valid.",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "VoteKeyDilution",
                "doc": "Dilution for the 2-level participation key",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "Type",
                "doc": "Transaction type as bytes",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "TypeEnum",
                "doc": "Transaction type as integer",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "XferAsset",
                "doc": "Asset ID",
                "stack_type": "asset",
                "mode": "any"
            },
            {
                "name": "AssetAmount",
                "doc": "value in Asset's units",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "AssetSender",
                "doc": "32 byte address. Source of assets if Sender is the Asset's Clawback address.",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "AssetReceiver",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "AssetCloseTo",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "GroupIndex",
                "doc": "Position of this transaction within an atomic transaction group. A stand-alone transaction is implicitly element 0 in a group of 1",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "TxID",
                "doc": "The computed ID for this transaction. 32 bytes.",
                "stack_type": "[32]byte",
                "mode": "any"
            },
            {
                "name": "ApplicationID",
                "doc": "ApplicationID from ApplicationCall transaction",
                "stack_type": "application",
                "mode": "any"
            },
            {
                "name": "OnCompletion",
                "doc": "ApplicationCall transaction on completion action",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "ApplicationArgs",
                "doc": "Arguments passed to the application in the ApplicationCall transaction",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "NumAppArgs",
                "doc": "Number of ApplicationArgs",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "Accounts",
                "doc": "Accounts listed in the ApplicationCall transaction",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "NumAccounts",
                "doc": "Number of Accounts",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "ApprovalProgram",
                "doc": "Approval program",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "ClearStateProgram",
                "doc": "Clear state program",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "RekeyTo",
                "doc": "32 byte Sender's new AuthAddr",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "ConfigAsset",
                "doc": "Asset ID in asset config transaction",
                "stack_type": "asset",
                "mode": "any"
            },
            {
                "name": "ConfigAssetTotal",
                "doc": "Total number of units of this asset created",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "ConfigAssetDecimals",
                "doc": "Number of digits to display after the decimal place when displaying the asset",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "ConfigAssetDefaultFrozen",
                "doc": "Whether the asset's slots are frozen by default or not, 0 or 1",
                "stack_type": "bool",
                "mode": "any"
            },
            {
                "name": "ConfigAssetUnitName",
                "doc": "Unit name of the asset",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "ConfigAssetName",
                "doc": "The asset name",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "ConfigAssetURL",
                "doc": "URL",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "ConfigAssetMetadataHash",
                "doc": "32 byte commitment to unspecified asset metadata",
                "stack_type": "[32]byte",
                "mode": "any"
            },
            {
                "name": "ConfigAssetManager",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "ConfigAssetReserve",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "ConfigAssetFreeze",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "ConfigAssetClawback",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "FreezeAsset",
                "doc": "Asset ID being frozen or un-frozen",
                "stack_type": "asset",
                "mode": "any"
            },
            {
                "name": "FreezeAssetAccount",
                "doc": "32 byte address of the account whose asset slot is being frozen or un-frozen",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "FreezeAssetFrozen",
                "doc": "The new frozen value, 0 or 1",
                "stack_type": "bool",
                "mode": "any"
            },
            {
                "name": "Assets",
                "doc": "Foreign Assets listed in the ApplicationCall transaction",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "NumAssets",
                "doc": "Number of Assets",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "Applications",
                "doc": "Foreign Apps listed in the ApplicationCall transaction",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "NumApplications",
                "doc": "Number of Applications",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "GlobalNumUint",
                "doc": "Number of global state integers in ApplicationCall",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "GlobalNumByteSlice",
                "doc": "Number of global state byteslices in ApplicationCall",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "LocalNumUint",
                "doc": "Number of local state integers in ApplicationCall",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "LocalNumByteSlice",
                "doc": "Number of local state byteslices in ApplicationCall",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "ExtraProgramPages",
                "doc": "Number of additional pages for each of the application's approval and clear state programs. An ExtraProgramPages of 1 means 2048 more total bytes, or 1024 for each program.",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "Nonparticipation",
                "doc": "Marks an account nonparticipating for rewards",
                "stack_type": "bool",
                "mode": "any"
            },
            {
                "name": "Logs",
                "doc": "Log messages emitted by an application call (only with `itxn` in v5). Application mode only",
                "stack_type": "[]byte",
                "mode": "app"
            },
            {
                "name": "NumLogs",
                "doc": "Number of Logs (only with `itxn` in v5). Application mode only",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "CreatedAssetID",
                "doc": "Asset ID allocated by the creation of an ASA (only with `itxn` in v5). Application mode only",
                "stack_type": "asset",
                "mode": "app"
            },
            {
                "name": "CreatedApplicationID",
                "doc": "ApplicationID allocated by the creation of an application (only with `itxn` in v5). Application mode only",
                "stack_type": "application",
                "mode": "app"
            },
            {
                "name": "LastLog",
                "doc": "The last message emitted. Empty bytes if none were emitted. Application mode only",
                "stack_type": "[]byte",
                "mode": "app"
            },
            {
                "name": "StateProofPK",
                "doc": "64 byte state proof public key",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "ApprovalProgramPages",
                "doc": "Approval Program as an array of pages",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "NumApprovalProgramPages",
                "doc": "Number of Approval Program pages",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "ClearStateProgramPages",
                "doc": "ClearState Program as an array of pages",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "NumClearStateProgramPages",
                "doc": "Number of ClearState Program pages",
                "stack_type": "uint64",
                "mode": "any"
            }
        ],
        "txna": [
            {
                "name": "ApplicationArgs",
                "doc": "Arguments passed to the application in the ApplicationCall transaction",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "Accounts",
                "doc": "Accounts listed in the ApplicationCall transaction",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "Assets",
                "doc": "Foreign Assets listed in the ApplicationCall transaction",
                "stack_type": "asset",
                "mode": "any"
            },
            {
                "name": "Applications",
                "doc": "Foreign Apps listed in the ApplicationCall transaction",
                "stack_type": "application",
                "mode": "any"
            },
            {
                "name": "Logs",
                "doc": "Log messages emitted by an application call (only with `itxn` in v5). Application mode only",
                "stack_type": "[]byte",
                "mode": "app"
            },
            {
                "name": "ApprovalProgramPages",
                "doc": "Approval Program as an array of pages",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "ClearStateProgramPages",
                "doc": "ClearState Program as an array of pages",
                "stack_type": "[]byte",
                "mode": "any"
            }
        ],
        "global": [
            {
                "name": "MinTxnFee",
                "doc": "microalgos",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "MinBalance",
                "doc": "microalgos",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "MaxTxnLife",
                "doc": "rounds",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "ZeroAddress",
                "doc": "32 byte address of all zero bytes",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "GroupSize",
                "doc": "Number of transactions in this atomic transaction group. At least 1",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "LogicSigVersion",
                "doc": "Maximum supported version",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "Round",
                "doc": "Current round number. Application mode only.",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "LatestTimestamp",
                "doc": "Last confirmed block UNIX timestamp. Fails if negative. Application mode only.",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "CurrentApplicationID",
                "doc": "ID of current application executing. Application mode only.",
                "stack_type": "application",
                "mode": "app"
            },
            {
                "name": "CreatorAddress",
                "doc": "Address of the creator of the current application. Application mode only.",
                "stack_type": "address",
                "mode": "app"
            },
            {
                "name": "CurrentApplicationAddress",
                "doc": "Address that the current application controls. Application mode only.",
                "stack_type": "address",
                "mode": "app"
            },
            {
                "name": "GroupID",
                "doc": "ID of the transaction group. 32 zero bytes if the transaction is not part of a group.",
                "stack_type": "[32]byte",
                "mode": "any"
            },
            {
                "name": "OpcodeBudget",
                "doc": "The remaining cost that can be spent by opcodes in this program.",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "CallerApplicationID",
                "doc": "The application ID of the application that called this application. 0 if this application is at the top-level. Application mode only.",
                "stack_type": "uint64",
                "mode": "app"
            },
            {
                "name": "CallerApplicationAddress",
                "doc": "The application address of the application that called this application. ZeroAddress if this application is at the top-level. Application mode only.",
                "stack_type": "address",
                "mode": "app"
            },
            {
                "name": "AssetCreateMinBalance",
                "doc": "The additional minimum balance required to create (and opt-in to) an asset.",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "AssetOptInMinBalance",
                "doc": "The additional minimum balance required to opt-in to an asset.",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "GenesisHash",
                "doc": "The Genesis Hash for the network.",
                "stack_type": "[32]byte",
                "mode": "any"
            }
        ],
        "itxn_field": [
            {
                "name": "Sender",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "Fee",
                "doc": "microalgos",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "Note",
                "doc": "Any data up to 1024 bytes",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "Receiver",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "Amount",
                "doc": "microalgos",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "CloseRemainderTo",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "VotePK",
                "doc": "32 byte address",
                "stack_type": "[32]byte",
                "mode": "any"
            },
            {
                "name": "SelectionPK",
                "doc": "32 byte address",
                "stack_type": "[32]byte",
                "mode": "any"
            },
            {
                "name": "VoteFirst",
                "doc": "The first round that the participation key is valid.",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "VoteLast",
                "doc": "The last round that the participation key is valid.",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "VoteKeyDilution",
                "doc": "Dilution for the 2-level participation key",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "Type",
                "doc": "Transaction type as bytes",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "TypeEnum",
                "doc": "Transaction type as integer",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "XferAsset",
                "doc": "Asset ID",
                "stack_type": "asset",
                "mode": "any"
            },
            {
                "name": "AssetAmount",
                "doc": "value in Asset's units",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "AssetSender",
                "doc": "32 byte address. Source of assets if Sender is the Asset's Clawback address.",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "AssetReceiver",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "AssetCloseTo",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "ApplicationID",
                "doc": "ApplicationID from ApplicationCall transaction",
                "stack_type": "application",
                "mode": "any"
            },
            {
                "name": "OnCompletion",
                "doc": "ApplicationCall transaction on completion action",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "ApplicationArgs",
                "doc": "Arguments passed to the application in the ApplicationCall transaction",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "Accounts",
                "doc": "Accounts listed in the ApplicationCall transaction",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "ApprovalProgram",
                "doc": "Approval program",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "ClearStateProgram",
                "doc": "Clear state program",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "RekeyTo",
                "doc": "32 byte Sender's new AuthAddr",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "ConfigAsset",
                "doc": "Asset ID in asset config transaction",
                "stack_type": "asset",
                "mode": "any"
            },
            {
                "name": "ConfigAssetTotal",
                "doc": "Total number of units of this asset created",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "ConfigAssetDecimals",
                "doc": "Number of digits to display after the decimal place when displaying the asset",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "ConfigAssetDefaultFrozen",
                "doc": "Whether the asset's slots are frozen by default or not, 0 or 1",
                "stack_type": "bool",
                "mode": "any"
            },
            {
                "name": "ConfigAssetUnitName",
                "doc": "Unit name of the asset",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "ConfigAssetName",
                "doc": "The asset name",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "ConfigAssetURL",
                "doc": "URL",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "ConfigAssetMetadataHash",
                "doc": "32 byte commitment to unspecified asset metadata",
                "stack_type": "[32]byte",
                "mode": "any"
            },
            {
                "name": "ConfigAssetManager",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "ConfigAssetReserve",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "ConfigAssetFreeze",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "ConfigAssetClawback",
                "doc": "32 byte address",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "FreezeAsset",
                "doc": "Asset ID being frozen or un-frozen",
                "stack_type": "asset",
                "mode": "any"
            },
            {
                "name": "FreezeAssetAccount",
                "doc": "32 byte address of the account whose asset slot is being frozen or un-frozen",
                "stack_type": "address",
                "mode": "any"
            },
            {
                "name": "FreezeAssetFrozen",
                "doc": "The new frozen value, 0 or 1",
                "stack_type": "bool",
                "mode": "any"
            },
            {
                "name": "Assets",
                "doc": "Foreign Assets listed in the ApplicationCall transaction",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "Applications",
                "doc": "Foreign Apps listed in the ApplicationCall transaction",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "GlobalNumUint",
                "doc": "Number of global state integers in ApplicationCall",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "GlobalNumByteSlice",
                "doc": "Number of global state byteslices in ApplicationCall",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "LocalNumUint",
                "doc": "Number of local state integers in ApplicationCall",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "LocalNumByteSlice",
                "doc": "Number of local state byteslices in ApplicationCall",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "ExtraProgramPages",
                "doc": "Number of additional pages for each of the application's approval and clear state programs. An ExtraProgramPages of 1 means 2048 more total bytes, or 1024 for each program.",
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "Nonparticipation",
                "doc": "Marks an account nonparticipating for rewards",
                "stack_type": "bool",
                "mode": "any"
            },
            {
                "name": "StateProofPK",
                "doc": "64 byte state proof public key",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "ApprovalProgramPages",
                "doc": "Approval Program as an array of pages",
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "ClearStateProgramPages",
                "doc": "ClearState Program as an array of pages",
                "stack_type": "[]byte",
                "mode": "any"
            }
        ],
        "json_ref": [
            {
                "name": "JSONString",
                "doc": null,
                "stack_type": "[]byte",
                "mode": "any"
            },
            {
                "name": "JSONUint64",
                "doc": null,
                "stack_type": "uint64",
                "mode": "any"
            },
            {
                "name": "JSONObject",
                "doc": null,
                "stack_type": "[]byte",
                "mode": "any"
            }
        ],
        "vrf_verify": [
            {
                "name": "VrfAlgorand",
                "doc": null,
                "stack_type": null,
                "mode": "any"
            }
        ]
    }
}