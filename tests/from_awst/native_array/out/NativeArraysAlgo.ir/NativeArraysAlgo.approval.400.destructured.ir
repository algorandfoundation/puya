main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "buildArray()uint64[]" => block@3, method "doThings()void" => block@4, * => block@11}
    block@3: // buildArray_route_L29
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        (log 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004)
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0
        goto block@12
    block@4: // doThings_route_L41
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings()
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0
        goto block@12
    block@7: // bare_routing_L5
        let tmp%13#0: uint64 = (txn OnCompletion)
        goto tmp%13#0 ? block@11 : block@8
    block@8: // __algots__.defaultCreate_L5
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // can only call when creating
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0
        goto block@12
    block@11: // after_if_else_L5
        let tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router__%0#0
        goto block@12
    block@12: // after_inlined_tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.__puya_arc4_router___L1
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let tmp%5#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#0: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#0

subroutine tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
    block@0: // L41
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 5u)
        let (tmp%2#0: bytes, arr#2: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005, 8u)
        let tmp%4#0: uint64 = (btoi tmp%2#0)
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        let array_length%1#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%6#0: bool = (== array_length%1#0 4u)
        goto tmp%6#0 ? block@1 : block@6
    block@1: // and_contd_L46
        let values%0#0: uint64 = (extract_uint64 arr#2 2u)
        let tmp%7#0: bool = (== values%0#0 1u)
        goto tmp%7#0 ? block@2 : block@6
    block@2: // and_contd_L46
        let values%1#0: uint64 = (extract_uint64 arr#2 10u)
        let tmp%8#0: bool = (== values%1#0 2u)
        goto tmp%8#0 ? block@3 : block@6
    block@3: // and_contd_L46
        let values%2#0: uint64 = (extract_uint64 arr#2 18u)
        let tmp%9#0: bool = (== values%2#0 3u)
        goto tmp%9#0 ? block@4 : block@6
    block@4: // and_contd_L46
        let values%3#0: uint64 = (extract_uint64 arr#2 26u)
        let tmp%10#0: bool = (== values%3#0 4u)
        goto tmp%10#0 ? block@5 : block@6
    block@5: // bool_true_L46
        let and_result%0#0: bool = 1u
        goto block@7
    block@6: // bool_false_L46
        let and_result%0#0: bool = 0u
        goto block@7
    block@7: // bool_merge_L46
        (assert and_result%0#0) // assert target is match for conditions
        let aggregate%array_trimmed%4#0: bytes = ((extract 2 0) arr#2)
        let values%4#0: uint64 = (extract_uint64 arr#2 2u)
        let tmp%11#0: bool = (== values%4#0 1u)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = (- array_length%1#0 1u)
        let aggregate%bytes_offset%5#0: uint64 = (* tmp%12#0 8u)
        let values%5#0: uint64 = (extract_uint64 aggregate%array_trimmed%4#0 aggregate%bytes_offset%5#0)
        let tmp%13#0: bool = (== values%5#0 4u)
        (assert tmp%13#0)
        let concat%1#0: Encoded(len+uint64[]) = (concat arr#2 aggregate%val_as_bytes%0#0) // on error: max array length exceeded
        let add%1#0: uint64 = (+ array_length%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#2: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let array_length%4#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%15#0: bool = (== array_length%4#0 5u)
        goto tmp%15#0 ? block@8 : block@14
    block@8: // and_contd_L55
        let values%6#0: uint64 = (extract_uint64 arr#2 2u)
        let tmp%16#0: bool = (== values%6#0 1u)
        goto tmp%16#0 ? block@9 : block@14
    block@9: // and_contd_L55
        let values%7#0: uint64 = (extract_uint64 arr#2 10u)
        let tmp%17#0: bool = (== values%7#0 2u)
        goto tmp%17#0 ? block@10 : block@14
    block@10: // and_contd_L55
        let values%8#0: uint64 = (extract_uint64 arr#2 18u)
        let tmp%18#0: bool = (== values%8#0 3u)
        goto tmp%18#0 ? block@11 : block@14
    block@11: // and_contd_L55
        let values%9#0: uint64 = (extract_uint64 arr#2 26u)
        let tmp%19#0: bool = (== values%9#0 4u)
        goto tmp%19#0 ? block@12 : block@14
    block@12: // and_contd_L55
        let values%10#0: uint64 = (extract_uint64 arr#2 34u)
        let tmp%20#0: bool = (== values%10#0 5u)
        goto tmp%20#0 ? block@13 : block@14
    block@13: // bool_true_L55
        let and_result%1#0: bool = 1u
        goto block@15
    block@14: // bool_false_L55
        let and_result%1#0: bool = 0u
        goto block@15
    block@15: // bool_merge_L55
        (assert and_result%1#0) // assert target is match for conditions
        let (tmp%21#0: bytes, arr#2: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#2, 8u)
        let top#0: uint64 = (btoi tmp%21#0)
        let tmp%24#0: bool = (== top#0 5u)
        (assert tmp%24#0)
        let array_length%5#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%25#0: bool = (== array_length%5#0 1u)
        goto tmp%25#0 ? block@16 : block@18
    block@16: // and_contd_L61
        let values%11#0: uint64 = (extract_uint64 arr#2 2u)
        let tmp%26#0: bool = (== values%11#0 1u)
        goto tmp%26#0 ? block@17 : block@18
    block@17: // bool_true_L61
        let and_result%2#0: bool = 1u
        goto block@19
    block@18: // bool_false_L61
        let and_result%2#0: bool = 0u
        goto block@19
    block@19: // bool_merge_L61
        (assert and_result%2#0) // assert target is match for conditions
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 10u)
        let arr#2: Encoded(len+uint64[]) = ((replace2 10) arr#2 aggregate%val_as_bytes%1#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#2)
        let concat%2#0: Encoded(len+uint64[]) = (concat arr#2 extract_to_end%0#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%2#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob 11u)
        let concat%3#0: Encoded(len+uint64[]) = (concat replace%2#0 aggregate%val_as_bytes%5#0) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 replace%2#0 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%3#0: bytes = ((replace2 0) concat%3#0 as_u16_bytes%3#0)
        let concat%4#0: Encoded(len+uint64[]) = (concat replace%3#0 0x000000000000000c000000000000000d) // on error: max array length exceeded
        let extract_to_end%3#0: bytes = ((extract 2 0) concat%4#0)
        let len%1#0: uint64 = (len extract_to_end%3#0)
        let div_floor%1#0: uint64 = (/ len%1#0 8u)
        let as_bytes%4#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let arr#2: Encoded(len+uint64[]) = ((replace2 0) concat%4#0 as_u16_bytes%4#0)
        let array_length%8#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%29#0: bool = (== array_length%8#0 11u)
        goto tmp%29#0 ? block@20 : block@32
    block@20: // and_contd_L74
        let values%14#0: uint64 = (extract_uint64 arr#2 2u)
        let tmp%30#0: bool = (== values%14#0 1u)
        goto tmp%30#0 ? block@21 : block@32
    block@21: // and_contd_L74
        let values%15#0: uint64 = (extract_uint64 arr#2 10u)
        let tmp%31#0: bool = (== values%15#0 10u)
        goto tmp%31#0 ? block@22 : block@32
    block@22: // and_contd_L74
        let values%16#0: uint64 = (extract_uint64 arr#2 18u)
        let tmp%32#0: bool = (== values%16#0 3u)
        goto tmp%32#0 ? block@23 : block@32
    block@23: // and_contd_L74
        let values%17#0: uint64 = (extract_uint64 arr#2 26u)
        let tmp%33#0: bool = (== values%17#0 4u)
        goto tmp%33#0 ? block@24 : block@32
    block@24: // and_contd_L74
        let values%18#0: uint64 = (extract_uint64 arr#2 34u)
        let tmp%34#0: bool = (== values%18#0 1u)
        goto tmp%34#0 ? block@25 : block@32
    block@25: // and_contd_L74
        let values%19#0: uint64 = (extract_uint64 arr#2 42u)
        let tmp%35#0: bool = (== values%19#0 10u)
        goto tmp%35#0 ? block@26 : block@32
    block@26: // and_contd_L74
        let values%20#0: uint64 = (extract_uint64 arr#2 50u)
        let tmp%36#0: bool = (== values%20#0 3u)
        goto tmp%36#0 ? block@27 : block@32
    block@27: // and_contd_L74
        let values%21#0: uint64 = (extract_uint64 arr#2 58u)
        let tmp%37#0: bool = (== values%21#0 4u)
        goto tmp%37#0 ? block@28 : block@32
    block@28: // and_contd_L74
        let values%22#0: uint64 = (extract_uint64 arr#2 66u)
        let tmp%38#0: bool = (== values%22#0 11u)
        goto tmp%38#0 ? block@29 : block@32
    block@29: // and_contd_L74
        let values%23#0: uint64 = (extract_uint64 arr#2 74u)
        let tmp%39#0: bool = (== values%23#0 12u)
        goto tmp%39#0 ? block@30 : block@32
    block@30: // and_contd_L74
        let values%24#0: uint64 = (extract_uint64 arr#2 82u)
        let tmp%40#0: bool = (== values%24#0 13u)
        goto tmp%40#0 ? block@31 : block@32
    block@31: // bool_true_L74
        let and_result%3#0: bool = 1u
        goto block@33
    block@32: // bool_false_L74
        let and_result%3#0: bool = 0u
        goto block@33
    block@33: // bool_merge_L74
        (assert and_result%3#0) // assert target is match for conditions
        let extract_to_end%11#0: bytes = ((extract 2 0) arr#2)
        let concat%10#0: Encoded(len+uint64[]) = (concat 0x00040000000000000000000000000000000000000000000000000000000000000000 extract_to_end%11#0) // on error: max array length exceeded
        let extract_to_end%12#0: bytes = ((extract 2 0) concat%10#0)
        let len%6#0: uint64 = (len extract_to_end%12#0)
        let div_floor%6#0: uint64 = (/ len%6#0 8u)
        let as_bytes%13#0: bytes[8] = (itob div_floor%6#0)
        let as_u16_bytes%13#0: bytes = ((extract 6 2) as_bytes%13#0)
        let arr8#0: Encoded(len+uint64[]) = ((replace2 0) concat%10#0 as_u16_bytes%13#0)
        let array_length%24#0: uint64 = (extract_uint16 arr8#0 0u)
        let tmp%87#0: bool = (== array_length%24#0 15u)
        goto tmp%87#0 ? block@88 : block@104
    block@88: // and_contd_L93
        let values%64#0: uint64 = (extract_uint64 arr8#0 2u)
        goto values%64#0 ? block@104 : block@89
    block@89: // and_contd_L93
        let values%65#0: uint64 = (extract_uint64 arr8#0 10u)
        goto values%65#0 ? block@104 : block@90
    block@90: // and_contd_L93
        let values%66#0: uint64 = (extract_uint64 arr8#0 18u)
        goto values%66#0 ? block@104 : block@91
    block@91: // and_contd_L93
        let values%67#0: uint64 = (extract_uint64 arr8#0 26u)
        goto values%67#0 ? block@104 : block@92
    block@92: // and_contd_L93
        let values%68#0: uint64 = (extract_uint64 arr8#0 34u)
        let tmp%92#0: bool = (== values%68#0 1u)
        goto tmp%92#0 ? block@93 : block@104
    block@93: // and_contd_L93
        let values%69#0: uint64 = (extract_uint64 arr8#0 42u)
        let tmp%93#0: bool = (== values%69#0 10u)
        goto tmp%93#0 ? block@94 : block@104
    block@94: // and_contd_L93
        let values%70#0: uint64 = (extract_uint64 arr8#0 50u)
        let tmp%94#0: bool = (== values%70#0 3u)
        goto tmp%94#0 ? block@95 : block@104
    block@95: // and_contd_L93
        let values%71#0: uint64 = (extract_uint64 arr8#0 58u)
        let tmp%95#0: bool = (== values%71#0 4u)
        goto tmp%95#0 ? block@96 : block@104
    block@96: // and_contd_L93
        let values%72#0: uint64 = (extract_uint64 arr8#0 66u)
        let tmp%96#0: bool = (== values%72#0 1u)
        goto tmp%96#0 ? block@97 : block@104
    block@97: // and_contd_L93
        let values%73#0: uint64 = (extract_uint64 arr8#0 74u)
        let tmp%97#0: bool = (== values%73#0 10u)
        goto tmp%97#0 ? block@98 : block@104
    block@98: // and_contd_L93
        let values%74#0: uint64 = (extract_uint64 arr8#0 82u)
        let tmp%98#0: bool = (== values%74#0 3u)
        goto tmp%98#0 ? block@99 : block@104
    block@99: // and_contd_L93
        let values%75#0: uint64 = (extract_uint64 arr8#0 90u)
        let tmp%99#0: bool = (== values%75#0 4u)
        goto tmp%99#0 ? block@100 : block@104
    block@100: // and_contd_L93
        let values%76#0: uint64 = (extract_uint64 arr8#0 98u)
        let tmp%100#0: bool = (== values%76#0 11u)
        goto tmp%100#0 ? block@101 : block@104
    block@101: // and_contd_L93
        let values%77#0: uint64 = (extract_uint64 arr8#0 106u)
        let tmp%101#0: bool = (== values%77#0 12u)
        goto tmp%101#0 ? block@102 : block@104
    block@102: // and_contd_L93
        let values%78#0: uint64 = (extract_uint64 arr8#0 114u)
        let tmp%102#0: bool = (== values%78#0 13u)
        goto tmp%102#0 ? block@103 : block@104
    block@103: // bool_true_L93
        let and_result%9#0: bool = 1u
        goto block@105
    block@104: // bool_false_L93
        let and_result%9#0: bool = 0u
        goto block@105
    block@105: // bool_merge_L93
        (assert and_result%9#0) // assert target is match for conditions
        let concat%11#0: Encoded(len+uint64[]) = (concat 0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005 extract_to_end%11#0) // on error: max array length exceeded
        let extract_to_end%14#0: bytes = ((extract 2 0) concat%11#0)
        let len%7#0: uint64 = (len extract_to_end%14#0)
        let div_floor%7#0: uint64 = (/ len%7#0 8u)
        let as_bytes%14#0: bytes[8] = (itob div_floor%7#0)
        let as_u16_bytes%14#0: bytes = ((extract 6 2) as_bytes%14#0)
        let arr5#0: Encoded(len+uint64[]) = ((replace2 0) concat%11#0 as_u16_bytes%14#0)
        let array_length%28#0: uint64 = (extract_uint16 arr5#0 0u)
        let tmp%103#0: bool = (== array_length%28#0 16u)
        goto tmp%103#0 ? block@106 : block@123
    block@106: // and_contd_L96
        let values%79#0: uint64 = (extract_uint64 arr5#0 2u)
        let tmp%104#0: bool = (== values%79#0 1u)
        goto tmp%104#0 ? block@107 : block@123
    block@107: // and_contd_L96
        let values%80#0: uint64 = (extract_uint64 arr5#0 10u)
        let tmp%105#0: bool = (== values%80#0 2u)
        goto tmp%105#0 ? block@108 : block@123
    block@108: // and_contd_L96
        let values%81#0: uint64 = (extract_uint64 arr5#0 18u)
        let tmp%106#0: bool = (== values%81#0 3u)
        goto tmp%106#0 ? block@109 : block@123
    block@109: // and_contd_L96
        let values%82#0: uint64 = (extract_uint64 arr5#0 26u)
        let tmp%107#0: bool = (== values%82#0 4u)
        goto tmp%107#0 ? block@110 : block@123
    block@110: // and_contd_L96
        let values%83#0: uint64 = (extract_uint64 arr5#0 34u)
        let tmp%108#0: bool = (== values%83#0 5u)
        goto tmp%108#0 ? block@111 : block@123
    block@111: // and_contd_L96
        let values%84#0: uint64 = (extract_uint64 arr5#0 42u)
        let tmp%109#0: bool = (== values%84#0 1u)
        goto tmp%109#0 ? block@112 : block@123
    block@112: // and_contd_L96
        let values%85#0: uint64 = (extract_uint64 arr5#0 50u)
        let tmp%110#0: bool = (== values%85#0 10u)
        goto tmp%110#0 ? block@113 : block@123
    block@113: // and_contd_L96
        let values%86#0: uint64 = (extract_uint64 arr5#0 58u)
        let tmp%111#0: bool = (== values%86#0 3u)
        goto tmp%111#0 ? block@114 : block@123
    block@114: // and_contd_L96
        let values%87#0: uint64 = (extract_uint64 arr5#0 66u)
        let tmp%112#0: bool = (== values%87#0 4u)
        goto tmp%112#0 ? block@115 : block@123
    block@115: // and_contd_L96
        let values%88#0: uint64 = (extract_uint64 arr5#0 74u)
        let tmp%113#0: bool = (== values%88#0 1u)
        goto tmp%113#0 ? block@116 : block@123
    block@116: // and_contd_L96
        let values%89#0: uint64 = (extract_uint64 arr5#0 82u)
        let tmp%114#0: bool = (== values%89#0 10u)
        goto tmp%114#0 ? block@117 : block@123
    block@117: // and_contd_L96
        let values%90#0: uint64 = (extract_uint64 arr5#0 90u)
        let tmp%115#0: bool = (== values%90#0 3u)
        goto tmp%115#0 ? block@118 : block@123
    block@118: // and_contd_L96
        let values%91#0: uint64 = (extract_uint64 arr5#0 98u)
        let tmp%116#0: bool = (== values%91#0 4u)
        goto tmp%116#0 ? block@119 : block@123
    block@119: // and_contd_L96
        let values%92#0: uint64 = (extract_uint64 arr5#0 106u)
        let tmp%117#0: bool = (== values%92#0 11u)
        goto tmp%117#0 ? block@120 : block@123
    block@120: // and_contd_L96
        let values%93#0: uint64 = (extract_uint64 arr5#0 114u)
        let tmp%118#0: bool = (== values%93#0 12u)
        goto tmp%118#0 ? block@121 : block@123
    block@121: // and_contd_L96
        let values%94#0: uint64 = (extract_uint64 arr5#0 122u)
        let tmp%119#0: bool = (== values%94#0 13u)
        goto tmp%119#0 ? block@122 : block@123
    block@122: // bool_true_L96
        let and_result%10#0: bool = 1u
        goto block@124
    block@123: // bool_false_L96
        let and_result%10#0: bool = 0u
        goto block@124
    block@124: // bool_merge_L96
        (assert and_result%10#0) // assert target is match for conditions
        return 