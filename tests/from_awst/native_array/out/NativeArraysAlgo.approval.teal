#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 10 4
    bytecblock 0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x0f4c11ca 0x13a588c8 // method "buildArray()uint64[]", method "doThings()void"
    txna ApplicationArgs 0
    match main_buildArray_route@3 main_doThings_route@4

main_after_if_else@11:
    intc_1 // 0
    return

main_doThings_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub doThings
    intc_0 // 1
    return

main_buildArray_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004
    log
    intc_0 // 1
    return

main_bare_routing@7:
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes:
dynamic_array_pop_fixed_size:
    proto 2 1
    frame_dig -2
    len
    frame_dig -1
    -
    frame_dig -2
    intc_1 // 0
    uncover 2
    substring3
    dup
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    -
    itob
    extract 6 0
    replace2 0
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings() -> void:
doThings:
    proto 0 0
    intc_1 // 0
    dupn 2
    pushbytes ""
    dup
    pushint 5 // 5
    itob
    bytec_0 // 0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005
    pushint 8 // 8
    callsub dynamic_array_pop_fixed_size
    dup
    intc_1 // 0
    extract_uint16
    dup
    intc_3 // 4
    ==
    bz doThings_bool_false@6
    frame_dig 6
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@6
    frame_dig 6
    intc_2 // 10
    extract_uint64
    pushint 2 // 2
    ==
    bz doThings_bool_false@6
    frame_dig 6
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@6
    frame_dig 6
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@6
    intc_0 // 1

doThings_bool_merge@7:
    assert // assert target is match for conditions
    frame_dig 6
    dup
    extract 2 0
    dig 1
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    assert
    frame_dig 7
    intc_0 // 1
    -
    pushint 8 // 8
    *
    extract_uint64
    intc_3 // 4
    ==
    assert
    frame_dig 5
    concat // on error: max array length exceeded
    dup
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    dup
    frame_bury 6
    intc_1 // 0
    extract_uint16
    dup
    frame_bury 3
    pushint 5 // 5
    ==
    bz doThings_bool_false@14
    frame_dig 6
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@14
    frame_dig 6
    intc_2 // 10
    extract_uint64
    pushint 2 // 2
    ==
    bz doThings_bool_false@14
    frame_dig 6
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@14
    frame_dig 6
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@14
    frame_dig 6
    pushint 34 // 34
    extract_uint64
    pushint 5 // 5
    ==
    bz doThings_bool_false@14
    intc_0 // 1

doThings_bool_merge@15:
    assert // assert target is match for conditions
    frame_dig 3
    intc_0 // 1
    -
    frame_dig 6
    dup
    cover 2
    extract 2 0
    swap
    pushint 8 // 8
    *
    extract_uint64
    swap
    pushint 8 // 8
    callsub dynamic_array_pop_fixed_size
    dup
    cover 2
    frame_bury 6
    pushint 5 // 5
    ==
    assert
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    ==
    bz doThings_bool_false@18
    frame_dig 6
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@18
    intc_0 // 1

doThings_bool_merge@19:
    assert // assert target is match for conditions
    intc_2 // 10
    itob
    frame_dig 6
    swap
    replace2 10
    dup
    extract 2 0
    dig 1
    intc_1 // 0
    extract_uint16
    cover 2
    concat // on error: max array length exceeded
    dup
    intc_1 // 0
    extract_uint16
    uncover 2
    +
    itob
    extract 6 2
    replace2 0
    pushint 11 // 11
    itob
    concat // on error: max array length exceeded
    dup
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    pushbytes 0x000000000000000c000000000000000d
    concat // on error: max array length exceeded
    dup
    intc_1 // 0
    extract_uint16
    pushint 2 // 2
    +
    itob
    extract 6 2
    replace2 0
    dup
    frame_bury 6
    intc_1 // 0
    extract_uint16
    dup
    frame_bury 4
    pushint 11 // 11
    ==
    bz doThings_bool_false@32
    frame_dig 6
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@32
    frame_dig 6
    intc_2 // 10
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@32
    frame_dig 6
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@32
    frame_dig 6
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@32
    frame_dig 6
    pushint 34 // 34
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@32
    frame_dig 6
    pushint 42 // 42
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@32
    frame_dig 6
    pushint 50 // 50
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@32
    frame_dig 6
    pushint 58 // 58
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@32
    frame_dig 6
    pushint 66 // 66
    extract_uint64
    pushint 11 // 11
    ==
    bz doThings_bool_false@32
    frame_dig 6
    pushint 74 // 74
    extract_uint64
    pushint 12 // 12
    ==
    bz doThings_bool_false@32
    frame_dig 6
    pushint 82 // 82
    extract_uint64
    pushint 13 // 13
    ==
    bz doThings_bool_false@32
    intc_0 // 1

doThings_bool_merge@33:
    assert // assert target is match for conditions
    frame_dig 6
    extract 2 0
    dup
    frame_bury 2
    pushbytes 0x00040000000000000000000000000000000000000000000000000000000000000000
    swap
    concat // on error: max array length exceeded
    dup
    intc_1 // 0
    extract_uint16
    frame_dig 4
    +
    itob
    extract 6 2
    replace2 0
    dup
    frame_bury 1
    intc_1 // 0
    extract_uint16
    pushint 15 // 15
    ==
    bz doThings_bool_false@104
    frame_dig 1
    pushint 2 // 2
    extract_uint64
    bnz doThings_bool_false@104
    frame_dig 1
    intc_2 // 10
    extract_uint64
    bnz doThings_bool_false@104
    frame_dig 1
    pushint 18 // 18
    extract_uint64
    bnz doThings_bool_false@104
    frame_dig 1
    pushint 26 // 26
    extract_uint64
    bnz doThings_bool_false@104
    frame_dig 1
    pushint 34 // 34
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@104
    frame_dig 1
    pushint 42 // 42
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@104
    frame_dig 1
    pushint 50 // 50
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@104
    frame_dig 1
    pushint 58 // 58
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@104
    frame_dig 1
    pushint 66 // 66
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@104
    frame_dig 1
    pushint 74 // 74
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@104
    frame_dig 1
    pushint 82 // 82
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@104
    frame_dig 1
    pushint 90 // 90
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@104
    frame_dig 1
    pushint 98 // 98
    extract_uint64
    pushint 11 // 11
    ==
    bz doThings_bool_false@104
    frame_dig 1
    pushint 106 // 106
    extract_uint64
    pushint 12 // 12
    ==
    bz doThings_bool_false@104
    frame_dig 1
    pushint 114 // 114
    extract_uint64
    pushint 13 // 13
    ==
    bz doThings_bool_false@104
    intc_0 // 1

doThings_bool_merge@105:
    assert // assert target is match for conditions
    bytec_0 // 0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005
    frame_dig 2
    concat // on error: max array length exceeded
    dup
    intc_1 // 0
    extract_uint16
    frame_dig 4
    +
    itob
    extract 6 2
    replace2 0
    dup
    frame_bury 0
    intc_1 // 0
    extract_uint16
    pushint 16 // 16
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@123
    frame_dig 0
    intc_2 // 10
    extract_uint64
    pushint 2 // 2
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 34 // 34
    extract_uint64
    pushint 5 // 5
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 42 // 42
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 50 // 50
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 58 // 58
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 66 // 66
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 74 // 74
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 82 // 82
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 90 // 90
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 98 // 98
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 106 // 106
    extract_uint64
    pushint 11 // 11
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 114 // 114
    extract_uint64
    pushint 12 // 12
    ==
    bz doThings_bool_false@123
    frame_dig 0
    pushint 122 // 122
    extract_uint64
    pushint 13 // 13
    ==
    bz doThings_bool_false@123
    intc_0 // 1

doThings_bool_merge@124:
    assert // assert target is match for conditions
    retsub

doThings_bool_false@123:
    intc_1 // 0
    b doThings_bool_merge@124

doThings_bool_false@104:
    intc_1 // 0
    b doThings_bool_merge@105

doThings_bool_false@32:
    intc_1 // 0
    b doThings_bool_merge@33

doThings_bool_false@18:
    intc_1 // 0
    b doThings_bool_merge@19

doThings_bool_false@14:
    intc_1 // 0
    b doThings_bool_merge@15

doThings_bool_false@6:
    intc_1 // 0
    b doThings_bool_merge@7
