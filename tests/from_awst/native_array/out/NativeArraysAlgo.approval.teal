#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 10 4
    bytecblock 0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005
    txn NumAppArgs
    bz __algots__.defaultCreate@10
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x0f4c11ca 0x13a588c8 // method "buildArray()uint64[]", method "doThings()void"
    txna ApplicationArgs 0
    match buildArray_route@4 doThings
    err

buildArray_route@4:
    pushbytes 0x151f7c7500040000000000000001000000000000000200000000000000030000000000000004
    log
    intc_0 // 1
    return

__algots__.defaultCreate@10:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:
    proto 2 2
    frame_dig -2
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    -
    itob
    extract 6 0
    frame_dig -2
    swap
    replace2 0
    dup
    len
    frame_dig -1
    -
    dup2
    frame_dig -1
    extract3
    uncover 2
    intc_1 // 0
    uncover 3
    substring3
    retsub


// tests/approvals/native-arrays.algo.ts::NativeArraysAlgo.doThings[routing]() -> void:
doThings:
    intc_1 // 0
    dupn 2
    pushint 5 // 5
    itob
    bytec_0 // 0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005
    pushint 8 // 8
    callsub dynamic_array_pop_fixed_size
    dup
    uncover 2
    btoi
    pushint 5 // 5
    ==
    assert
    intc_1 // 0
    extract_uint16
    dup
    intc_3 // 4
    ==
    bz doThings_bool_false@7
    dig 1
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@7
    dig 1
    intc_2 // 10
    extract_uint64
    pushint 2 // 2
    ==
    bz doThings_bool_false@7
    dig 1
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@7
    dig 1
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@7
    intc_0 // 1

doThings_bool_merge@8:
    assert // assert target is match for conditions
    dig 1
    dup
    extract 2 0
    dig 1
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    assert
    dig 2
    dup
    cover 2
    intc_0 // 1
    -
    pushint 8 // 8
    *
    extract_uint64
    intc_3 // 4
    ==
    assert
    swap
    dig 4
    concat // on error: max array length exceeded
    swap
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    dup
    bury 3
    intc_1 // 0
    extract_uint16
    pushint 5 // 5
    ==
    bz doThings_bool_false@15
    dig 1
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@15
    dig 1
    intc_2 // 10
    extract_uint64
    pushint 2 // 2
    ==
    bz doThings_bool_false@15
    dig 1
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@15
    dig 1
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@15
    dig 1
    pushint 34 // 34
    extract_uint64
    pushint 5 // 5
    ==
    bz doThings_bool_false@15
    intc_0 // 1

doThings_bool_merge@16:
    assert // assert target is match for conditions
    dig 1
    pushint 8 // 8
    callsub dynamic_array_pop_fixed_size
    dup
    cover 2
    bury 4
    btoi
    pushint 5 // 5
    ==
    assert
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    ==
    bz doThings_bool_false@19
    dig 1
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@19
    intc_0 // 1

doThings_bool_merge@20:
    assert // assert target is match for conditions
    intc_2 // 10
    itob
    dig 2
    swap
    replace2 10 // on error: index access is out of bounds
    dup
    extract 2 0
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    replace2 0
    pushint 11 // 11
    itob
    dig 1
    swap
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    pushbytes 0x000000000000000c000000000000000d
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    replace2 0
    dup
    bury 3
    intc_1 // 0
    extract_uint16
    pushint 11 // 11
    ==
    bz doThings_bool_false@33
    dig 1
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@33
    dig 1
    intc_2 // 10
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@33
    dig 1
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@33
    dig 1
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@33
    dig 1
    pushint 34 // 34
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@33
    dig 1
    pushint 42 // 42
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@33
    dig 1
    pushint 50 // 50
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@33
    dig 1
    pushint 58 // 58
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@33
    dig 1
    pushint 66 // 66
    extract_uint64
    pushint 11 // 11
    ==
    bz doThings_bool_false@33
    dig 1
    pushint 74 // 74
    extract_uint64
    pushint 12 // 12
    ==
    bz doThings_bool_false@33
    dig 1
    pushint 82 // 82
    extract_uint64
    pushint 13 // 13
    ==
    bz doThings_bool_false@33
    intc_0 // 1

doThings_bool_merge@34:
    assert // assert target is match for conditions
    dig 1
    extract 2 0
    dup
    bury 5
    pushbytes 0x00040000000000000000000000000000000000000000000000000000000000000000
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    replace2 0
    dup
    bury 6
    intc_1 // 0
    extract_uint16
    pushint 15 // 15
    ==
    bz doThings_bool_false@105
    dig 4
    pushint 2 // 2
    extract_uint64
    bnz doThings_bool_false@105
    dig 4
    intc_2 // 10
    extract_uint64
    bnz doThings_bool_false@105
    dig 4
    pushint 18 // 18
    extract_uint64
    bnz doThings_bool_false@105
    dig 4
    pushint 26 // 26
    extract_uint64
    bnz doThings_bool_false@105
    dig 4
    pushint 34 // 34
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@105
    dig 4
    pushint 42 // 42
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@105
    dig 4
    pushint 50 // 50
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@105
    dig 4
    pushint 58 // 58
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@105
    dig 4
    pushint 66 // 66
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@105
    dig 4
    pushint 74 // 74
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@105
    dig 4
    pushint 82 // 82
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@105
    dig 4
    pushint 90 // 90
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@105
    dig 4
    pushint 98 // 98
    extract_uint64
    pushint 11 // 11
    ==
    bz doThings_bool_false@105
    dig 4
    pushint 106 // 106
    extract_uint64
    pushint 12 // 12
    ==
    bz doThings_bool_false@105
    dig 4
    pushint 114 // 114
    extract_uint64
    pushint 13 // 13
    ==
    bz doThings_bool_false@105
    intc_0 // 1

doThings_bool_merge@106:
    assert // assert target is match for conditions
    bytec_0 // 0x000500000000000000010000000000000002000000000000000300000000000000040000000000000005
    dig 4
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    pushint 8 // 8
    /
    itob
    extract 6 2
    replace2 0
    dup
    bury 7
    intc_1 // 0
    extract_uint16
    pushint 16 // 16
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 2 // 2
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@124
    dig 5
    intc_2 // 10
    extract_uint64
    pushint 2 // 2
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 18 // 18
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 26 // 26
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 34 // 34
    extract_uint64
    pushint 5 // 5
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 42 // 42
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 50 // 50
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 58 // 58
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 66 // 66
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 74 // 74
    extract_uint64
    intc_0 // 1
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 82 // 82
    extract_uint64
    intc_2 // 10
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 90 // 90
    extract_uint64
    pushint 3 // 3
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 98 // 98
    extract_uint64
    intc_3 // 4
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 106 // 106
    extract_uint64
    pushint 11 // 11
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 114 // 114
    extract_uint64
    pushint 12 // 12
    ==
    bz doThings_bool_false@124
    dig 5
    pushint 122 // 122
    extract_uint64
    pushint 13 // 13
    ==
    bz doThings_bool_false@124
    intc_0 // 1
    return // on error: assert target is match for conditions

doThings_bool_false@124:
    intc_1 // 0
    return // on error: assert target is match for conditions

doThings_bool_false@105:
    intc_1 // 0
    b doThings_bool_merge@106

doThings_bool_false@33:
    intc_1 // 0
    b doThings_bool_merge@34

doThings_bool_false@19:
    intc_1 // 0
    b doThings_bool_merge@20

doThings_bool_false@15:
    intc_1 // 0
    b doThings_bool_merge@16

doThings_bool_false@7:
    intc_1 // 0
    b doThings_bool_merge@8
