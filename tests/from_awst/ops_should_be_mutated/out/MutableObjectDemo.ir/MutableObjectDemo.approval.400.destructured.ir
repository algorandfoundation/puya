main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L3
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "setPlugin(string)void" => block@3, * => block@10}
    block@3: // setPlugin_route_L6
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%7#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        tests/approvals/mutable-object.algo.ts::MutableObjectDemo.setPlugin(tmp%7#0)
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0
        goto block@11
    block@6: // bare_routing_L3
        let tmp%8#0: uint64 = (txn OnCompletion)
        goto tmp%8#0 ? block@10 : block@7
    block@7: // __algots__.defaultCreate_L3
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // can only call when creating
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0
        goto block@11
    block@10: // after_if_else_L3
        let tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_tests/approvals/mutable-object.algo.ts::MutableObjectDemo.__puya_arc4_router___L1
        return tmp%0#0

subroutine tests/approvals/mutable-object.algo.ts::MutableObjectDemo.setPlugin(key: string) -> void:
    block@0: // L6
        let box_prefixed_key%0#0: bytes = (concat "plugins" key#0)
        (box_put box_prefixed_key%0#0 0x0000000000000001)
        return 