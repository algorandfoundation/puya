#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 32 1
    bytecblock 0x151f7c75
    txn NumAppArgs
    bz main___algots__.defaultCreate@13
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x25bb3465 0x63fbedbe 0x5c6f499c 0xd71280ea 0xa78000de 0xb976788f // method "hashAddresses(byte[32],byte[32])byte[32]", method "receiveB32(byte[32])byte[32]", method "receiveBytes(byte[],uint64)void", method "returnLength(byte[32])uint64", method "test()void", method "testArray()void"
    txna ApplicationArgs 0
    match hashAddresses receiveB32 receiveBytes returnLength test testArray
    err

main___algots__.defaultCreate@13:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.hashAddresses[routing]() -> void:
hashAddresses:
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 32
    ==
    assert // invalid number of bytes for uint8[32]
    txna ApplicationArgs 2
    dup
    len
    intc_0 // 32
    ==
    assert // invalid number of bytes for uint8[32]
    concat
    sha512_256
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32[routing]() -> void:
receiveB32:
    txna ApplicationArgs 1
    dup
    len
    intc_0 // 32
    ==
    assert // invalid number of bytes for uint8[32]
    callsub tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32
    dup
    len
    intc_0 // 32
    ==
    assert // invalid size
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes[routing]() -> void:
receiveBytes:
    txna ApplicationArgs 1
    dup
    pushint 0 // 0
    extract_uint16
    pushint 2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+uint8[])
    extract 2 0
    txna ApplicationArgs 2
    dup
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    swap
    len
    ==
    return


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.returnLength[routing]() -> void:
returnLength:
    txna ApplicationArgs 1
    len
    dup
    intc_0 // 32
    ==
    assert // invalid number of bytes for uint8[32]
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test[routing]() -> void:
test:
    txn Sender
    callsub tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32
    pop
    pushbytes "abcdefghabcdefghabcdefghabcdefgh"
    callsub tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32
    pop
    intc_1 // 1
    return


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.testArray[routing]() -> void:
testArray:
    txn Sender
    dupn 2
    dig 2
    uncover 2
    concat
    concat // on error: max array length exceeded
    extract 0 32 // on error: index access is out of bounds
    b&
    txn Sender
    ==
    return


// tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32(b: bytes) -> bytes:
tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32:
    proto 1 1
    frame_dig -1
    len
    intc_0 // 32
    ==
    assert
    frame_dig -1
    sha512_256
    retsub
