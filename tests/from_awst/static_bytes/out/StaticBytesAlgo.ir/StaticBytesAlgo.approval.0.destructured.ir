main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L14
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "hashAddresses(byte[32],byte[32])byte[32]" => block@3, method "receiveB32(byte[32])byte[32]" => block@4, method "receiveBytes(byte[],uint64)void" => block@5, method "returnLength(byte[32])uint64" => block@6, method "test()void" => block@7, method "testArray()void" => block@8, * => block@15}
    block@3: // hashAddresses_route_L15
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txna ApplicationArgs 2)
        let to_encode%0#0: bytes[32] = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.hashAddresses(reinterpret_Encoded(uint8[32])%0#0, reinterpret_Encoded(uint8[32])%1#0)
        let length%0#0: uint64 = (len to_encode%0#0)
        let lengths_equal%0#0: bool = (== length%0#0 32u)
        (assert lengths_equal%0#0) // invalid size
        let tmp%7#0: bytes = (concat 0x151f7c75 to_encode%0#0)
        (log tmp%7#0)
        let tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0
        goto block@16
    block@4: // receiveB32_route_L19
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32])%2#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let to_encode%1#0: bytes[32] = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32(reinterpret_Encoded(uint8[32])%2#0)
        let length%1#0: uint64 = (len to_encode%1#0)
        let lengths_equal%1#0: bool = (== length%1#0 32u)
        (assert lengths_equal%1#0) // invalid size
        let tmp%12#0: bytes = (concat 0x151f7c75 to_encode%1#0)
        (log tmp%12#0)
        let tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0
        goto block@16
    block@5: // receiveBytes_route_L23
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%17#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%18#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes(tmp%17#0, tmp%18#0)
        let tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0
        goto block@16
    block@6: // returnLength_route_L27
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let reinterpret_Encoded(uint8[32])%3#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let to_encode%2#0: uint64 = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.returnLength(reinterpret_Encoded(uint8[32])%3#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%2#0)
        let tmp%23#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%23#0)
        let tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0
        goto block@16
    block@7: // test_route_L31
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test()
        let tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0
        goto block@16
    block@8: // testArray_route_L41
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.testArray()
        let tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0
        goto block@16
    block@11: // bare_routing_L14
        let tmp%32#0: uint64 = (txn OnCompletion)
        goto tmp%32#0 ? block@15 : block@12
    block@12: // __algots__.defaultCreate_L14
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // can only call when creating
        let tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0
        goto block@16
    block@15: // after_if_else_L14
        let tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router__%0#0
        goto block@16
    block@16: // after_inlined_tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.__puya_arc4_router___L1
        return tmp%0#0

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.hashAddresses(a1: bytes[32], a2: bytes[32]) -> bytes[32]:
    block@0: // L15
        let tmp%0#0: bytes = (concat a1#0 a2#0)
        let tmp%1#0: bytes[32] = (sha512_256 tmp%0#0)
        return tmp%1#0

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32(b: bytes[32]) -> bytes[32]:
    block@0: // L19
        let tmp%0#0: uint64 = (len b#0)
        let tmp%1#0: bool = (== tmp%0#0 32u)
        (assert tmp%1#0)
        let tmp%2#0: bytes[32] = (sha512_256 b#0)
        return tmp%2#0

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes(b: bytes, length: uint64) -> void:
    block@0: // L23
        let tmp%0#0: uint64 = (len b#0)
        let tmp%1#0: bool = (== tmp%0#0 length#0)
        (assert tmp%1#0)
        return 

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.returnLength(b: bytes[32]) -> uint64:
    block@0: // L27
        let tmp%0#0: uint64 = (len b#0)
        return tmp%0#0

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.test() -> void:
    block@0: // L31
        let tmp%0#0: bytes[32] = (txn Sender)
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32(tmp%0#0)
        let tmp%1#0: bytes[32] = (txn Sender)
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveBytes(tmp%1#0, 32u)
        tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.receiveB32("abcdefghabcdefghabcdefghabcdefgh")
        return 

subroutine tests/approvals/static-bytes.algo.ts::StaticBytesAlgo.testArray() -> void:
    block@0: // L41
        let a.0#0: bytes[32] = (txn Sender)
        let a.1#0: bytes[32] = (txn Sender)
        let tmp%2#0: bytes[32] = (txn Sender)
        let encoded%3#0: Encoded((uint8[32],uint8[32])) = (concat a.0#0 a.1#0)
        let array%array_contents%0#1: bytes = (concat tmp%2#0 encoded%3#0) // on error: max array length exceeded
        write(local.0, array%array_contents%0#1)
        let encoded_element%0#0: bytes = ((extract 0 32) array%array_contents%0#1) // on error: index access is out of bounds
        let bitAnd#0: bytes[32] = (b& a.0#0 encoded_element%0#0)
        let tmp%4#0: bytes[32] = (txn Sender)
        let tmp%5#0: bool = (== bitAnd#0 tmp%4#0)
        (assert tmp%5#0)
        return 