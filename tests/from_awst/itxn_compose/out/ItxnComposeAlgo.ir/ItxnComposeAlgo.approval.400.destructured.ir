main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L18
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "distribute(address[],pay,uint64)void" => block@4, method "conditionalBegin(uint64)void" => block@5, * => block@8}
    block@4: // distribute_route_L19
        tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.distribute[routing]()
        goto block@8
    block@5: // conditionalBegin_route_L53
        tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.conditionalBegin[routing]()
        goto block@8
    block@8: // after_if_else_L18
        fail
    block@9: // __algots__.defaultCreate_L18
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.distribute[routing]() -> void:
    block@0: // L19
        let addresses#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 addresses#0 0u)
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 32u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len addresses#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint8[32][])
        let tmp%1#0: uint64 = (txn GroupIndex)
        let funds#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) funds#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let verifier#0: uint64 = (btoi tmp%2#0)
        let tmp%0#1: account = ((gtxns Receiver) funds#0)
        let tmp%1#1: account = (global CurrentApplicationAddress)
        let tmp%2#1: bool = (== tmp%0#1 tmp%1#1)
        (assert tmp%2#1) // assert target is match for conditions
        (assert aggregate%array_length%0#0) // must provide some accounts
        let tmp%3#1: uint64 = ((gtxns Amount) funds#0)
        let share#0: uint64 = (/ tmp%3#1 aggregate%array_length%0#0)
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) addresses#0)
        let payFields.receiver#0: bytes = ((extract 2 32) addresses#0)
        itxn_begin
        ((itxn_field Receiver) payFields.receiver#0)
        ((itxn_field Amount) share#0)
        ((itxn_field TypeEnum) 1u)
        ((itxn_field Fee) 0u)
        let value_internal%0#0: uint64 = 1u
        let i#0: uint64 = value_internal%0#0
        goto block@2
    block@2: // for_header_L32
        let continue_looping%0#0: bool = (< i#0 aggregate%array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L32
        let aggregate%bytes_offset%1#0: uint64 = (* i#0 32u)
        let addr#0: Encoded(uint8[32]) = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%1#0 32u) // on error: index access is out of bounds
        itxn_next
        ((itxn_field Amount) share#0)
        ((itxn_field TypeEnum) 1u)
        ((itxn_field Receiver) addr#0)
        ((itxn_field Fee) 0u)
        let value_internal%0#0: uint64 = (+ i#0 1u)
        let i#0: uint64 = value_internal%0#0
        goto block@2
    block@5: // after_for_L32
        itxn_next
        ((itxn_field ApplicationArgs) method "verify()void")
        ((itxn_field ApplicationID) verifier#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ConfigAssetName) "abc")
        ((itxn_field TypeEnum) 3u)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u

subroutine tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.conditionalBegin[routing]() -> void:
    block@0: // L53
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let count#0: uint64 = (btoi tmp%0#0)
        itxn_begin
        ((itxn_field ApplicationArgs) method "helloCreate(string)void")
        ((itxn_field ApplicationArgs) 0x00024869)
        ((itxn_field GlobalNumByteSlice) 1u)
        ((itxn_field ClearStateProgramPages) C4EBQw==)
        ((itxn_field ApprovalProgramPages) CyADAQACJgEIZ3JlZXRpbmcxGEAABCiAAGeCAgQkN408BKDoGHI2GgCOAgAwACUxGRREMRhBAA6ABNCiggA2GgCOAQA6AIAEAJIlrjYaAI4BABcAMRmBBBIxGBBEIkMxGYEFEjEYEEQiQzYaAUkjWSQISwEVEkRXAgAoTGciQzYaAUkjWSQISwEVEkRXAgAjKGVEgAEgUExQSRUWVwYCTFCABBUffHVMULAiQw==)
        ((itxn_field OnCompletion) 0u)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let appId#0: uint64 = (gitxn 0 CreatedApplicationID)
        let value_internal%0#0: uint64 = 0u
        let i#0: uint64 = value_internal%0#0
        goto block@3
    block@3: // for_header_L57
        let continue_looping%0#0: bool = (< i#0 count#0)
        goto continue_looping%0#0 ? block@4 : block@9
    block@4: // for_body_L57
        goto i#0 ? block@6 : block@5
    block@5: // if_body_L58
        itxn_begin
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) 0x0002686f)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@7
    block@6: // else_body_L60
        itxn_next
        ((itxn_field ApplicationArgs) method "greet(string)string")
        ((itxn_field ApplicationArgs) 0x0002686f)
        ((itxn_field ApplicationID) appId#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@7
    block@7: // after_if_else_L58
        let value_internal%0#0: uint64 = (+ i#0 1u)
        let i#0: uint64 = value_internal%0#0
        goto block@3
    block@9: // after_for_L57
        itxn_submit
        exit 1u