#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 6 32
    bytecblock 0xd0a28200 0x0002686f
    txn NumAppArgs
    bz __algots__.defaultCreate@10
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x1ecad34c 0x90d29762 // method "distribute(address[],pay,uint64)void", method "conditionalBegin(uint64)void"
    txna ApplicationArgs 0
    match distribute conditionalBegin
    err

__algots__.defaultCreate@10:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.distribute[routing]() -> void:
distribute:
    txna ApplicationArgs 1
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 2
    btoi
    cover 2
    dup
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // assert target is match for conditions
    dig 1
    intc_1 // 0
    extract_uint16
    dup
    cover 3
    dup
    assert // must provide some accounts
    swap
    gtxns Amount
    swap
    /
    dup
    cover 2
    dig 1
    extract 2 0
    cover 2
    swap
    extract 2 32
    itxn_begin
    itxn_field Receiver
    itxn_field Amount
    intc_0 // 1
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    intc_0 // 1

distribute_for_header@2:
    dup
    dig 4
    <
    bz distribute_after_for@5
    dupn 2
    intc_3 // 32
    *
    dig 3
    swap
    intc_3 // 32
    extract3 // on error: index access is out of bounds
    itxn_next
    dig 4
    itxn_field Amount
    intc_0 // 1
    itxn_field TypeEnum
    itxn_field Receiver
    intc_1 // 0
    itxn_field Fee
    intc_0 // 1
    +
    bury 1
    b distribute_for_header@2

distribute_after_for@5:
    itxn_next
    pushbytes 0x65a9aecc // method "verify()void"
    itxn_field ApplicationArgs
    dig 4
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_next
    pushbytes "abc"
    itxn_field ConfigAssetName
    pushint 3 // 3
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    intc_0 // 1
    return


// tests/approvals/itxn-compose.algo.ts::ItxnComposeAlgo.conditionalBegin[routing]() -> void:
conditionalBegin:
    txna ApplicationArgs 1
    btoi
    itxn_begin
    pushbytes 0x009225ae // method "helloCreate(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x00024869
    itxn_field ApplicationArgs
    intc_0 // 1
    itxn_field GlobalNumByteSlice
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiYBCGdyZWV0aW5nMRhAAAQogABnggIEJDeNPASg6BhyNhoAjgIALgAlMRkURDEYQQAOgATQooIANhoAjgEALQCABACSJa42GgCOAQATADEZgQQSMRgQQzEZgQUSMRgQQzYaAVcCAChMZ4EBQzYaAVcCAIEAKGVEgAEgUExQSRUWVwYCTFCABBUffHVMULCBAUM=)
    itxn_field ApprovalProgramPages
    intc_1 // 0
    itxn_field OnCompletion
    intc_2 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    gitxn 0 CreatedApplicationID
    intc_1 // 0

conditionalBegin_for_header@3:
    dup
    dig 3
    <
    bz conditionalBegin_after_for@9
    dup
    bnz conditionalBegin_else_body@6
    itxn_begin
    bytec_0 // method "greet(string)string"
    itxn_field ApplicationArgs
    bytec_1 // 0x0002686f
    itxn_field ApplicationArgs
    dig 1
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee

conditionalBegin_after_if_else@7:
    dup
    intc_0 // 1
    +
    bury 1
    b conditionalBegin_for_header@3

conditionalBegin_else_body@6:
    itxn_next
    bytec_0 // method "greet(string)string"
    itxn_field ApplicationArgs
    bytec_1 // 0x0002686f
    itxn_field ApplicationArgs
    dig 1
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    b conditionalBegin_after_if_else@7

conditionalBegin_after_for@9:
    itxn_submit
    intc_0 // 1
    return
