main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@6, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19, block@19][tmp%4#0] else goto block@19
    block@2: // switch_case_0_L68
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "verify()void" => block@3, * => block@5}
    block@3: // verify_route_L69
        tests/approvals/itxn-compose.algo.ts::VerifierContract.verify[routing]()
        goto block@5
    block@5: // switch_case_next_L68
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L68
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@19: // switch_case_default_L68
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine tests/approvals/itxn-compose.algo.ts::VerifierContract.verify[routing]() -> void:
    block@0: // L69
        let i#0: uint64 = 0u
        goto block@2
    block@2: // while_top_L70
        let tmp%0#0: uint64 = (txn GroupIndex)
        let tmp%1#0: bool = (< i#0 tmp%0#0)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // while_body_L70
        let tmp%2#0: uint64 = ((gtxns TypeEnum) i#0)
        let tmp%3#0: bool = (== tmp%2#0 1u)
        (assert tmp%3#0) // Txn must be pay
        let i#0: uint64 = (+ i#0 1u)
        goto block@2
    block@4: // after_while_L70
        exit 1u