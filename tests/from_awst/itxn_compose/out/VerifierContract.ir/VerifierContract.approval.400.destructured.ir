main @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L68
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "verify()void" => block@3, * => block@4}
    block@3: // verify_route_L69
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        tests/approvals/itxn-compose.algo.ts::VerifierContract.verify[routing]()
        goto block@4
    block@4: // switch_case_next_L68
        fail
    block@5: // __algots__.defaultCreate_L68
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine tests/approvals/itxn-compose.algo.ts::VerifierContract.verify[routing]() -> void:
    block@0: // L69
        let i#0: uint64 = 0u
        goto block@2
    block@2: // while_top_L70
        let tmp%0#0: uint64 = (txn GroupIndex)
        let tmp%1#0: bool = (< i#0 tmp%0#0)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // while_body_L70
        let tmp%2#0: uint64 = ((gtxns TypeEnum) i#0)
        let tmp%3#0: bool = (== tmp%2#0 1u)
        (assert tmp%3#0) // Txn must be pay
        let i#0: uint64 = (+ i#0 1u)
        goto block@2
    block@4: // after_while_L70
        exit 1u