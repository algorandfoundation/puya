# ruff: noqa
# fmt: off
# type: ignore

## case: test_tuple_errors
import typing
from algopy import *


class MyNamedTuple(typing.NamedTuple):
    x: UInt64
    y: Bytes


@subroutine
def test_tuple1() -> None:
    tup = (UInt64(), Bytes())
    tup.count(UInt64(1)) ## E: unsupported member access

@subroutine
def test_tuple1b() -> None:
    bad = (UInt64(), Bytes()).count(UInt64(1)) ## E: unsupported member access

@subroutine
def test_tuple1c() -> None:
    bad = (UInt64(), Bytes()).what # type: ignore[attr-defined, misc] ## E: unrecognised member access

@subroutine
def test_tuple1d() -> None:
    tup = (UInt64(), Bytes())
    bad = tup.what # type: ignore[attr-defined, misc] ## E: unrecognised member access

@subroutine
def test_named_tuple1() -> None:
    tup = MyNamedTuple(UInt64(), Bytes())
    tup.count(UInt64(1)) ## E: unsupported member access

@subroutine
def test_named_tuple1b() -> None:
    MyNamedTuple._make((UInt64(), Bytes())) ## E: unsupported member access

@subroutine
def test_named_tuple1c() -> None:
    tup = MyNamedTuple(UInt64(), Bytes())
    x = String(tup._fields[0]) ## E: unsupported member access

@subroutine
def test_named_tuple1d() -> None:
    tup = MyNamedTuple(UInt64(), Bytes())
    tup._asdict() ## E: unsupported member access

@subroutine
def test_tuple2() -> None:
    log((UInt64(), Bytes()))  ## E: cannot serialize tuple[algopy.UInt64, algopy.Bytes]

@subroutine
def test_tuple2b() -> None:
    tup = (UInt64(), Bytes())
    log(tup)  ## E: cannot serialize tuple[algopy.UInt64, algopy.Bytes]

@subroutine
def test_tuple3() -> None:
    tup = UInt64(), Bytes()
    tup2 = tup * UInt64(2) ## E: can't multiply sequence by non-int-literal

@subroutine
def test_tuple3b() -> None:
    tup = (UInt64(), Bytes()) * UInt64(2) ## E: can't multiply sequence by non-int-literal

@subroutine
def test_tuple4() -> None:
    tup = (UInt64(), Bytes())
    del tup ## E: tuple[algopy.UInt64, algopy.Bytes] is not valid as del target

@subroutine
def test_tuple4b() -> None:
    a, b = UInt64(), Bytes()
    del (a, b) ## E: cannot delete tuple literal
@subroutine
def test_tuple5() -> None:
    tup = (UInt64(), Bytes())
    -tup  # type: ignore[operator] ## E: tuple[algopy.UInt64, algopy.Bytes] does not support unary '-' operator

@subroutine
def test_tuple5b() -> None:
    tup = -(UInt64(), Bytes(),) # type: ignore[operator, misc] ## E: bad operand type for unary -: 'tuple'

@subroutine
def test_tuple6() -> None:
    tup = (UInt64(), Bytes())
    tup += ( ## E: tuple[algopy.UInt64, algopy.Bytes] does not support augmented assignment
        UInt64(2),
    )  # type:ignore[assignment]

@subroutine
def test_tuple8() -> None:
    a, b = UInt64(), Bytes()
    assert (a, b) != (b, a) # type: ignore[comparison-overlap] ## E: items at index 0 do not support comparison with operator '!='

@subroutine
def test_tuple9() -> None:
    a, b = UInt64(), Bytes()
    abc = (a, b) + Bytes() # type: ignore[operator, misc] ## E: can only concatenate tuple with other tuples

@subroutine
def test_tuple10() -> None:
    a, b = UInt64(), Bytes()
    abc = (a, b) + Bytes()  # type: ignore[operator, misc] ## E: can only concatenate tuple with other tuples

@subroutine
def test_tuple11() -> None:
    a, b = (UInt64(), UInt64())
    abc = (a, b) or (b, a)

@subroutine
def test_slice1() -> None:
    tip = UInt64(), Bytes()
    top = tip[1:1] ## E: empty slices are not supported

@subroutine
def test_slice1b() -> None:
    # this ok, including for coverage
    top = (UInt64(), Bytes())[:]

@subroutine
def test_slice2() -> None:
    tip = UInt64(), Bytes()
    top = tip[:1]

@subroutine
def test_slice3() -> None:
    tip = UInt64(), Bytes()
    top = tip[UInt64(1):] ## E: tuples can only be indexed with literal values

@subroutine
def test_slice4() -> None:
    tip = UInt64(), Bytes()
    top = tip[:1:2] ## E: stride is not supported

@subroutine
def test_index1() -> None:
    tip = UInt64(), Bytes()
    top = tip[2] # type: ignore[misc] ## E: tuple index out of range

@subroutine
def test_index2() -> None:
    tip = UInt64(), Bytes()
    top = tip[UInt64(1)] ## E: tuples can only be indexed by int constants

@subroutine
def iterate_tuple(base: gtxn.TransactionBase) -> None:
    for a in (base, gtxn.PaymentTransaction(1)):
        assert a.fee > 0
    for b in (gtxn.PaymentTransaction(1), gtxn.KeyRegistrationTransaction(2)): ## E: unable to iterate heterogeneous tuple without common base type
        assert b.fee > 0

## case: bad_named_tuple
from algopy import UInt64
import typing

class NotAllowed(typing.NamedTuple):
    an_int: UInt64
    id: int ## E: Python literals of type int cannot be used as runtime values
    flag: bool = True ## E: unsupported syntax for typing.NamedTuple member declaration


## case: mutable_tuple_element_requires_copy_in_replace
import typing
from algopy import *


class MyNamedTuple(typing.NamedTuple):
    x: UInt64
    y: arc4.DynamicBytes


@subroutine
def testing123() -> None:
    tup = MyNamedTuple(UInt64(), arc4.DynamicBytes())
    bad = tup._replace() ## E: mutable field 'y' requires explicit copy
