# ruff: noqa
# fmt: off
# type: ignore

## case: test_typing_interactions

import typing

from algopy import Account, Bytes, UInt64, subroutine

SOME_ADDRESS = "VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA"
SOME_ADDRESS_PADDED = SOME_ADDRESS + "=="


@subroutine
def typing_interactions() -> None:
    typing.reveal_type(UInt64(1)) ## N: Revealed type is "algopy._primitives.UInt64"
    typing.reveal_type((UInt64(1), Bytes(b""))) ## N: Revealed type is "tuple[algopy._primitives.UInt64, algopy._primitives.Bytes]"
    typing.assert_type(UInt64(1), UInt64) ## W: use of typing.assert_type has no effect on compilation

    assert typing.cast(Bytes, Account(SOME_ADDRESS)) == Bytes.from_base64(SOME_ADDRESS_PADDED) ## W: use of typing.cast, output may be invalid or insecure TEAL \
                                                                                               ## E: unsupported comparison '==' between types

## case: test_unreachable

from algopy import Contract, UInt64, op


class ContractWithUnreachableCode(Contract):
    def approval_program(self) -> UInt64:
        x = UInt64(0)
        if x:
            return x
        else:
            op.err()
            return x ## E: unreachable code

    def clear_state_program(self) -> bool:
        op.exit(1)
        return True ## E: unreachable code

## case: test_invalid_address_literal

from algopy import arc4, Account, Bytes, Contract


class ContractWithInvalidAddressLiteral(Contract):
    def approval_program(self) -> bool:
        some_address = arc4.Address("ABC") ## E: Invalid address value. Address literals should be 58 characters and not include base32 padding
        return True

    def clear_state_program(self) -> bool:
        some_address = Account("ABC") ## E: invalid address value - should have length 58 and not include base32 padding
        return True


## case: test_arc4_mutable_iteration

from algopy import *

@subroutine
def okay1() -> None:
    arr = arc4.DynamicBytes()
    for b in arr:
        assert b

@subroutine
def baddie1() -> None:
    arr_of_arr = arc4.DynamicArray[arc4.DynamicBytes]()
    for arr in arr_of_arr: ## E: cannot directly iterate an ARC-4 array of mutable objects, construct a for-loop over the indexes instead \
                           ## N: use `algopy.urange(<array>.length)` to iterate by index
        arr.append(arc4.Byte(1))


@subroutine
def okay2() -> None:
    arr_of_tup = arc4.DynamicArray[arc4.Tuple[arc4.UInt64, arc4.UInt64]]()
    for tup in arr_of_tup:
        assert tup[0] == tup[1]


@subroutine
def baddie2() -> None:
    arr_of_tup_with_arr = arc4.DynamicArray[arc4.Tuple[arc4.DynamicBytes, arc4.UInt64]]()
    for tup in arr_of_tup_with_arr: ## E: cannot directly iterate an ARC-4 array of mutable objects, construct a for-loop over the indexes instead \
                                    ## N: use `algopy.urange(<array>.length)` to iterate by index
        tup[0].append(arc4.Byte(1))


## case: test_mutable_ref_param_reassignment_in_tuple_fails
from algopy import arc4

class Baddie(arc4.ARC4Contract):
    @arc4.abimethod
    def okay(self, arr: arc4.DynamicBytes) -> None:
        arr = arc4.DynamicBytes.from_bytes(arr.bytes)
        self.not_okay(arr)

    @arc4.abimethod()
    def not_okay(self, arr2: arc4.DynamicBytes) -> None:
        (arr2, foo) = (arc4.DynamicBytes.from_bytes(arr2.bytes), arc4.UInt64(1))
        arr2.append(arc4.Byte(1))
        assert foo


## case: test_state_proxies_outside_init_fail
from algopy import GlobalState, LocalState, Txn, UInt64, arc4

class Baddie(arc4.ARC4Contract):
    def __init__(self) -> None:
        self.global_a = GlobalState(UInt64)
        self.local_b = LocalState(UInt64)

    @arc4.abimethod
    def okay(self) -> None:
        self.global_a.value = UInt64(123)
        self.local_b[Txn.sender] = UInt64(456)

    @arc4.abimethod()
    def not_okay1(self) -> None:
        self.global_c = GlobalState(UInt64) ## E: algopy.GlobalState can only be assigned to a member variable in the __init__ method

    @arc4.abimethod()
    def not_okay2(self) -> None:
        self.local_d = LocalState(UInt64) ## E: algopy.LocalState can only be assigned to a member variable in the __init__ method


## case: bad_intrinsic_call
from algopy import *

@subroutine
def baddie() -> None:
    result = op.setbit_bytes(UInt64(0), 0, 0, 1) # type: ignore[call-arg,arg-type] ## E: expected 3 arguments, got 4
    result = op.setbit_bytes(UInt64(0), 0, 0, unknown=1) # type: ignore[call-arg,arg-type] ## E: expected 3 arguments, got 4
    result = op.setbit_bytes(0, 0, 0, unknown=1) # type: ignore[call-arg,arg-type] ## E: expected 3 arguments, got 4
    result = op.setbit_bytes(b"", 0) # type: ignore[call-arg] ## E: expected 3 arguments, got 2

    result2 = op.GITxn.application_args(UInt64(0), UInt64(0)) # type: ignore[arg-type] ## E: argument must be a literal int value

    foo = arc4.arc4_signature(String("foo(uint64)uint64")) # type: ignore[arg-type] ## E: unexpected argument type

    result3 = op.GITxn.fee() # type: ignore[call-arg] ## E: expected 1 argument, got 0


## case: non_existent_members
from algopy import *

@subroutine
def uint64() -> None:
    UInt64().foo # type: ignore[attr-defined] ## E: unrecognised member of algopy.UInt64: foo

@subroutine
def biguint() -> None:
    BigUInt().foo # type: ignore[attr-defined] ## E: unrecognised member of algopy.BigUInt: foo

@subroutine
def bytes_() -> None:
    Bytes().foo # type: ignore[attr-defined] ## E: unrecognised member of algopy.Bytes: foo

@subroutine
def string() -> None:
    String().foo # type: ignore[attr-defined] ## E: unrecognised member of algopy.String: foo

@subroutine
def account() -> None:
    Account().foo # type: ignore[attr-defined] ## E: unrecognised member of algopy.Account: foo

@subroutine
def asset() -> None:
    Asset().foo # type: ignore[attr-defined] ## E: unrecognised member of algopy.Asset: foo

@subroutine
def application() -> None:
    Application().foo # type: ignore[attr-defined] ## E: unrecognised member of algopy.Application: foo


## case: invalid_constructor_args
from algopy import *

@subroutine
def invalid_constructor_args() -> None:
    a = UInt64("a") # type: ignore[arg-type] ## E: unexpected argument type
    b = BigUInt("b") # type: ignore[arg-type] ## E: unexpected argument type
    c = Bytes(3) # type: ignore[arg-type] ## E: unexpected argument type
    d = String(4) # type: ignore[arg-type] ## E: unexpected argument type
    e = Account(5) # type: ignore[arg-type] ## E: unexpected argument type
    f = Asset("f") # type: ignore[arg-type] ## E: unexpected argument type
    g = Application("g") # type: ignore[arg-type] ## E: unexpected argument type
    # the next check is just to make sure we didn't throw on the line above
    h = 1 ## E: a Python literal is not valid at this location


## case: unsupported_type_comparisons
from algopy import *

@subroutine
def compare_biguint_string() -> None:
    assert BigUInt() != String() # type: ignore[operator,misc] ## E: unsupported comparison '!=' between types


## case: float_div
from algopy import *

@subroutine
def float_div() -> None:
    assert UInt64(10) / 2 # type: ignore[operator] ## E: To maintain semantic compatibility with Python, only the truncating division operator (//) is supported
    assert BigUInt(5) / 2 # type: ignore[operator] ## E: To maintain semantic compatibility with Python, only the truncating division operator (//) is supported

    x = 1 ## E: a Python literal is not valid at this location


## case: unsupported_math_operators
from algopy import *

@subroutine
def unsupported_biguint_operator() -> None:
    assert BigUInt() ** 2 # type: ignore[operator,misc] ## E: unsupported operation ** between types

@subroutine
def unsupported_uint64_operator() -> None:
    assert UInt64() @ 2 # type: ignore[operator,misc] ## E: unsupported operation @ between types


## case: super_with_data_member
from algopy import *

class Base(ARC4Contract):
    def __init__(self) -> None:
        self.foo = UInt64(1)


class Derived(Base):
    def __init__(self) -> None:
        self.foo2 = 2 * super().foo ## E: super() is only supported for calling functions


## case: redefinition
from algopy import *

class Base(ARC4Contract):
    def __init__(self) -> None:
        self.foo = UInt64(1)
        self.bar = UInt64(2)
        self.foo_p = GlobalState(UInt64(1)) ## N: previous definition of foo_p was here
        self.bar_p = GlobalState(UInt64(2)) ## N: previous definition of bar_p was here

class Derived1(Base):
    def __init__(self) -> None:
        super().__init__()
        self.foo = UInt64(2) # ok

class Derived2(Base):
    def __init__(self) -> None:
        super().__init__()
        self.bar = Bytes(b"bbb") # type: ignore[assignment] ## E: assignment target type differs from expression value type

class Derived3(Base):
    def __init__(self) -> None:
        super().__init__()
        self.foo_p = GlobalState(UInt64(3)) ## E: redefinition of foo_p

class Derived4(Base):
    def __init__(self) -> None:
        super().__init__()
        self.bar_p = GlobalState(Bytes(b"bbb")) # type: ignore[arg-type] ## E: redefinition of bar_p

class Base2(ARC4Contract):
    def __init__(self) -> None:
        if Txn.num_app_args:
            self.foo = UInt64(1)
            self.foo_p = GlobalState(UInt64(1)) ## N: previous definition of foo_p was here
        else:
            self.foo = UInt64(2)
            self.foo_p = GlobalState(UInt64(2)) ## E: redefinition of foo_p


## case: void_state_decl
from algopy import *

class Con(Contract):
    x: None ## E: type is not suitable for storage

    def approval_program(self) -> bool:
        return True

    def clear_state_program(self) -> bool:
        return True


## case: void_state
from algopy import *

class Con(Contract):
    x: None

    def approval_program(self) -> bool:
        self.x = log(b"")  # type: ignore[func-returns-value] ## E: None indicates an empty return and cannot be assigned
        return True

    def clear_state_program(self) -> bool:
        assert self.x ## E: expression is always False
        return True


## case: subtyping
import typing
from algopy import *

@subroutine
def gtxn_or_with_cast(base: gtxn.TransactionBase) -> UInt64:
    t1 = typing.assert_type( ## W: use of typing.assert_type has no effect on compilation
        base or gtxn.PaymentTransaction(1), ## E: expression is always True
        gtxn.TransactionBase,
    )
    return t1.fee


@subroutine
def txn_var_to_arc4() -> bool:
    t = (arc4.UInt64(0), arc4.UInt64(1))
    if not t[0]:
        t = arc4.Tuple(t) ## E: 't' already has type tuple[algopy.arc4.UIntN[typing.Literal[64]], algopy.arc4.UIntN[typing.Literal[64]]] which is not compatible with algopy.arc4.Tuple[algopy.arc4.UIntN[typing.Literal[64]], algopy.arc4.UIntN[typing.Literal[64]]]
    return t[1] == 1


@subroutine
def arc4_byte_or_uint8() -> None:
    a = typing.assert_type(arc4.Byte() or arc4.UInt8(1), arc4.UInt8) ## W: use of typing.assert_type has no effect on compilation
    assert a == 1


@subroutine
def or_with_uint64_subtypes() -> None:
    assert OnCompleteAction.NoOp or TransactionType.ApplicationCall
    typing.assert_type( ## W: use of typing.assert_type has no effect on compilation
        OnCompleteAction.NoOp or TransactionType.ApplicationCall, ## E: expression would produce a union type, which isn't supported unless evaluating a boolean condition
        OnCompleteAction | TransactionType,
    )


@subroutine
def uint64_subtype_augmented_assignment() -> None:
    x = OnCompleteAction.NoOp
    x += 1 ## E: Result type of + incompatible in assignment  [misc]


## case: type_unions_in_signatures
from algopy import *

@subroutine
def user_sub_with_union(x: arc4.UInt16 | arc4.UInt32) -> UInt64: ## E: type unions are unsupported at this location
    return x.native

@subroutine
def user_sub_with_union_result() -> arc4.UInt16 | arc4.UInt32: ## E: type unions are unsupported at this location
    return arc4.UInt16(123)


## case: bool_binary_op_errors
from algopy import *


@subroutine
def unresolveable() -> None:
    empty = Bytes()
    one = UInt64(1)
    assert bool(op.bitlen(empty or one)) ## E: type unions are unsupported at this location
    bad = empty or one ## E: expression would produce a union type, which isn't supported unless evaluating a boolean condition


## case: iterate_tuple_mutable_types

from algopy import *


class TupleIterationMutation(ARC4Contract):

    @arc4.abimethod()
    def test_iteration_mutation(self, param: tuple[arc4.DynamicBytes, arc4.DynamicBytes, arc4.DynamicBytes]) -> None:
        items = get_dynamic_bytes()
        a, b, c = get_dynamic_bytes()

        # not ok as both item and items[n] refer to the same values
        for item in items: ## E: tuple of mutable ARC-4 values cannot be iterated
            item.append(arc4.Byte())

        for item in param: ## E: tuple of mutable ARC-4 values cannot be iterated
            item.append(arc4.Byte())

        for item in (a, b, c): ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a tuple expression
            item.append(arc4.Byte())

        for outer in Bytes(b" "):
            for item in items: ## E: tuple of mutable ARC-4 values cannot be iterated
                item.append(arc4.Byte())

        for item in items: ## E: tuple of mutable ARC-4 values cannot be iterated
            for inner in Bytes(b" "):
                item.append(arc4.Byte())

        for item in reversed(items): ## E: tuple of mutable ARC-4 values cannot be iterated
            item.append(arc4.Byte())

        for idx, item in uenumerate(items): ## E: tuple of mutable ARC-4 values cannot be iterated
            item.append(arc4.Byte(idx + 1))

        # scenarios that are ok as there is no other reference
        for item in (a.copy(), b.copy(), c.copy()):
            item.append(arc4.Byte())

        for item in get_dynamic_bytes():
            item.append(arc4.Byte())

        for outer in Bytes(b" "):
            for item in get_dynamic_bytes():
                item.append(arc4.Byte())

        for item in get_dynamic_bytes():
            for inner in Bytes(b" "):
                item.append(arc4.Byte())

        for item in reversed(get_dynamic_bytes()):
            item.append(arc4.Byte())

        for idx, item in uenumerate(get_dynamic_bytes()):
                item.append(arc4.Byte(idx + 1))



@subroutine
def get_dynamic_bytes() -> tuple[arc4.DynamicBytes, arc4.DynamicBytes, arc4.DynamicBytes]:
    return (arc4.DynamicBytes(), arc4.DynamicBytes(), arc4.DynamicBytes())


## case: infinite_loop
from algopy import *

class Loop(arc4.ARC4Contract):
    @arc4.abimethod
    def infinite(self) -> None:
        while True: ## E: infinite loop detected
            if hmm():
                break

    @arc4.abimethod
    def finite(self) -> None:
        foo = UInt64()
        while True:
            if foo > 5:
                break
            foo += 1

@subroutine(inline=True)
def hmm() -> bool:
    return False

## case: size_of_dynamic_types
from algopy import *

class DynamicSize(arc4.ARC4Contract):
    @arc4.abimethod
    def test(self) -> None:
        assert size_of(arc4.String) == 0 ## E: arc4.dynamic_array<arc4.uint8> is dynamically sized
        assert size_of(Bytes) == 0 ## E: bytes is dynamically sized
        assert size_of(String) == 0 ## E: string is dynamically sized
        assert size_of(tuple[Bytes, bool]) == 0 ## E: tuple<bytes,bool> is dynamically sized
        assert size_of(Array[UInt64]) == 0 ## E: ref_array<uint64> is dynamically sized
        assert size_of(arc4.Tuple[arc4.UInt64, arc4.DynamicBytes]) == 0 ## E: arc4.tuple<arc4.uint64,arc4.dynamic_array<arc4.uint8>> is dynamically sized


## case: mutable_tuple_element_in_storage
import typing

from algopy import *

class TupleWithMutable(typing.NamedTuple):
    arr: arc4.DynamicArray[arc4.UInt64]
    bar: UInt64

class NestedTuples(ARC4Contract):
    def __init__(self) -> None:
        self.box = Box(TupleWithMutable)
        self.glob = GlobalState(TupleWithMutable)
        self.loc = LocalState(TupleWithMutable)
        self.tup = TupleWithMutable(
            arr=arc4.DynamicArray(arc4.UInt64(0)),
            bar=UInt64(),
        )
        self.box.value = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))
        self.glob.value = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))
        self.loc[Txn.sender] = self.tup._replace(arr=arc4.DynamicArray(arc4.UInt64(0)))

    @arc4.abimethod()
    def mutate_tuple(self) -> None:
        self.tup.arr.append(arc4.UInt64(1)) ## E: updating mutable elements within a tuple in storage is not supported

    @arc4.abimethod()
    def mutate_box(self) -> None:
        self.box.value.arr.append(arc4.UInt64(1)) ## E: updating mutable elements within a tuple in storage is not supported

    @arc4.abimethod()
    def mutate_global(self) -> None:
        self.glob.value.arr.append(arc4.UInt64(1)) ## E: updating mutable elements within a tuple in storage is not supported

    @arc4.abimethod()
    def mutate_local(self) -> None:
        self.loc[Txn.sender].arr.append(arc4.UInt64(1)) ## E: updating mutable elements within a tuple in storage is not supported
