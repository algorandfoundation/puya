## case: test_typing_interactions

import typing

from algopy import Account, Bytes, UInt64, subroutine

SOME_ADDRESS = "VCMJKWOY5P5P7SKMZFFOCEROPJCZOTIJMNIYNUCKH7LRO45JMJP6UYBIJA"
SOME_ADDRESS_PADDED = SOME_ADDRESS + "=="


@subroutine
def typing_interactions() -> None:
    typing.reveal_type(UInt64(1)) ## N: Revealed type is "algopy._primitives.UInt64" \
                                  ## N: algopy type is "uint64"
    typing.reveal_type((UInt64(1), Bytes(b""))) ## N: Revealed type is "tuple[algopy._primitives.UInt64, algopy._primitives.Bytes]" \
                                                ## N: algopy type is "tuple<uint64,bytes>"
    typing.assert_type(UInt64(1), UInt64) ## W: use of typing.assert_type has no effect on compilation \
                                          ## W: expression result is ignored

    assert typing.cast(Bytes, Account(SOME_ADDRESS)) == Bytes.from_base64(SOME_ADDRESS_PADDED) ## E: Unsupported comparison == between types \
                                                                                               ## W: use of typing.cast, output may be invalid or insecure TEAL

## case: test_unreachable

from algopy import Contract, UInt64, op


class ContractWithUnreachableCode(Contract):
    def approval_program(self) -> UInt64:
        x = UInt64(0)
        if x:
            return x
        else:
            op.err()
            return x ## E: Unreachable code

    def clear_state_program(self) -> bool:
        op.exit(1)
        return True ## E: Unreachable code

## case: test_invalid_address_literal

from algopy import arc4, Account, Bytes, Contract


class ContractWithInvalidAddressLiteral(Contract):
    def approval_program(self) -> bool:
        some_address = arc4.Address("ABC") ## E: Invalid address value. Address literals should be 58 characters and not include base32 padding
        return True

    def clear_state_program(self) -> bool:
        some_address = Account("ABC") ## E: Invalid address value. Address literals should be 58 characters and not include base32 padding
        return True

## case: test_undefined_variable

from algopy import Contract, Txn


class ContractWithUndefinedVariable(Contract):
    def approval_program(self) -> bool: ## E: Undefined register: undefined#1. This can be caused by attempting to reference variables that are only defined in other execution paths.
        if Txn.num_app_args:
            undefined = True
            return undefined
        return undefined

    def clear_state_program(self) -> bool:
        return True
