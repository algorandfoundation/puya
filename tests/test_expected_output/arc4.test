# ruff: noqa
# fmt: off
# type: ignore

## case: test_invalid_arc4_struct_member_type
from algopy import *

class BadStruct(arc4.Struct):  ## E: Invalid ARC4 Struct declaration, the following fields are not ARC4 encoded types: a, c
    a: UInt64
    b: arc4.UInt64
    c: bool

## case: test_invalid_arc4_struct_empty
from algopy import *

class BadStruct2(arc4.Struct):  ## E: arc4.Struct needs at least one element
    pass

## case: test_invalid_arc4_member_syntax
from algopy import *

class BadStruct3(arc4.Struct):
    x: arc4.UInt64 = arc4.UInt64(1) ## E: Unsupported syntax for algopy.arc4.Struct member declaration

## case: test_emit_errors
from algopy import arc4, subroutine

class Event(arc4.Struct):
    a: arc4.String
    b: arc4.UInt8

class Event2(arc4.Struct):
    a: arc4.String

@subroutine
def typed_ok() -> None:
    arc4.emit(Event(arc4.String("a"), arc4.UInt8(1)))
    arc4.emit("Event(string,uint8)", "a", 1)
    arc4.emit("Event(string,uint8)", "a", 255)

@subroutine
def abi_call_tuple_ok() -> None:
    event, txn = arc4.abi_call[Event]("foo()(string,uint8)")

@subroutine
def abi_call_wrong_return() -> None:
    event, txn = arc4.abi_call[Event]("foo()(string,uint64)") ## E: Method selector from args 'foo()(string,uint8)' does not match provided method selector: 'foo()(string,uint64)'

@subroutine
def wrong_arg_type1() -> None:
    arc4.emit("Event(string,uint64)", arc4.String("a"), arc4.UInt8(1)) ## E: Expected type algopy.arc4.UIntN[typing.Literal[64]], got type algopy.arc4.UIntN[typing.Literal[8]]

@subroutine
def wrong_arg_type2() -> None:
    arc4.emit("Event(string,uint8)", b"a", 1) ## E: can't covert literal to algopy.arc4.String

@subroutine
def wrong_arg_type3() -> None:
    arc4.emit("Event(string,uint8)", "a", 256) ## E: invalid algopy.arc4.UIntN[typing.Literal[8]] value

@subroutine
def wrong_arg_type4() -> None:
    arc4.emit("Event(string,uint8)", Event(arc4.String("a"), arc4.UInt8(1))) ## E: number of arguments (1) does not match signature (2)

@subroutine
def wrong_arg_type5() -> None:
    arc4.emit("Event2(string)", Event2(arc4.String("a"))) ## E: Expected type algopy.arc4.String, got type test_emit_errors.Event2

@subroutine
def wrong_number_args() -> None:
    arc4.emit("Event(string,uint8)", "a", 1, 2) ## E: number of arguments (3) does not match signature (2)

@subroutine
def invalid_signature1() -> None:
    arc4.emit("(string,uint8)", "a", 1) ## E: Invalid signature: name=''

@subroutine
def invalid_signature2() -> None:
    arc4.emit("string,uint8", "a", 1) ## E: Invalid signature: name='string,uint8'

@subroutine
def invalid_signature3() -> None:
    arc4.emit("9bad_name(string,uint8)", "a", 1) ## E: Invalid signature: name='9bad_name'

@subroutine
def invalid_signature4() -> None:
    arc4.emit("Event(string,uint8)void", arc4.String("a"), arc4.UInt8(1)) ## E: Invalid event signature, type specified after args 'void'

@subroutine
def invalid_signature5() -> None:
    arc4.emit("Event(string,uint8)uint64", arc4.String("a"), arc4.UInt8(1)) ## E: Invalid event signature, type specified after args 'uint64'

@subroutine
def invalid_signature6() -> None:
    arc4.emit("Event(string,uint8)(string,uint64)", arc4.String("a"), arc4.UInt8(1)) ## E: Invalid event signature, type specified after args '(string,uint64)'


## case: test_bad_uint_sizes

import typing

from algopy import arc4, subroutine

A: typing.TypeAlias = arc4.UIntN[typing.Literal[72]] ## E: Max bit size of algopy.arc4.UIntN is 64, got 72
B: typing.TypeAlias = arc4.BigUIntN[typing.Literal[520]] ## E: Bit size must be between 8 and 512 inclusive
# TODO: add test for non-8-multiple

C: typing.TypeAlias = arc4.UFixedNxM[typing.Literal[72], typing.Literal[10]] ## E: Max bit size of algopy.arc4.UFixedNxM is 64, got 72
D: typing.TypeAlias = arc4.BigUFixedNxM[typing.Literal[520], typing.Literal[10]] ## E: Bit size must be between 8 and 512 inclusive
# TODO: add test for non-8-multiple

E: typing.TypeAlias = arc4.UFixedNxM[typing.Literal[64], typing.Literal[0]] ## E: Precision must be between 1 and 160 inclusive
F: typing.TypeAlias = arc4.BigUFixedNxM[typing.Literal[512], typing.Literal[0]] ## E: Precision must be between 1 and 160 inclusive

@subroutine
def testA(x: A) -> None: ## E: Max bit size of algopy.arc4.UIntN is 64, got 72
    assert x

@subroutine
def testB(x: B) -> None: ## E: Bit size must be between 8 and 512 inclusive
    assert x

@subroutine
def testC(x: C) -> None: ## E: Max bit size of algopy.arc4.UFixedNxM is 64, got 72
    assert x

@subroutine
def testD(x: D) -> None: ## E: Bit size must be between 8 and 512 inclusive
    assert x

@subroutine
def testE(x: E) -> None: ## E: Precision must be between 1 and 160 inclusive
    assert x

@subroutine
def testF(x: F) -> None: ## E: Precision must be between 1 and 160 inclusive
    assert x

## case: test_arc4_tuple_immutable
from algopy import arc4

class NotOkay(arc4.ARC4Contract):
    @arc4.abimethod
    def not_okay(self) -> None:
        t = arc4.Tuple((arc4.UInt64(1), arc4.UInt8(1)))
        t[0] = arc4.UInt64(2)  # type: ignore ## E: expression is not valid as an assignment target


## case: arc4_copy

import typing
from algopy import GlobalState, LocalState, Txn, arc4, subroutine

IntArray: typing.TypeAlias = arc4.DynamicArray[arc4.UInt64]


class Arc4CopyContract(arc4.ARC4Contract):
    def __init__(self) -> None:
        self.global_a = IntArray()
        self.global_b = GlobalState(IntArray())
        self.local = LocalState(IntArray)

    @subroutine
    def method_a(self, a: IntArray) -> None:
        a.append(arc4.UInt64(5))

    @arc4.abimethod
    def test(self) -> None:
        # Local does not need copy

        local_array = IntArray()
        self.method_a(local_array)

        # Require copy when reassigning

        copy1 = local_array ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        assert (copy2 := local_array).length, "this isn't ok" ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        valid_tuple = (local_array.copy(),)
        copy3 = valid_tuple[0] ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        copy4 = self.global_a ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        copy5 = self.global_b.value ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable

        # Require copy when building a collection

        my_tuple = (local_array, local_array) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a tuple expression
        copy_in_tuple = arc4.Tuple(valid_tuple) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a constructor
        copy_in_array1 = arc4.DynamicArray(local_array) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to an array constructor
        copy_in_array2 = arc4.StaticArray(local_array) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to an array constructor

        # State vars should require copy

        self.method_a(self.global_a) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine from state
        self.method_a(self.global_b.value) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine from state
        self.method_a(self.local[Txn.sender]) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine from state

        # Tuple items require a copy when passing

        self.method_a(valid_tuple[0]) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine

        # Require copy when reassigning tuple elements

        destructured_a, destructured_b = my_tuple ## E: tuples containing a mutable reference to an ARC4-encoded value cannot be unpacked, use index access instead
        destructured_a = my_tuple[0] ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        destructured_b = my_tuple[1] ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable

        # Can't create copies by iterating
        valid_array_of_arrays = arc4.DynamicArray(local_array.copy())

        for an_array in valid_array_of_arrays: ## E: Cannot directly iterate an ARC4 array of mutable objects, construct a for-loop over the indexes via urange(<array>.length) instead
            assert an_array.length

## case: copy_arc4_struct
from algopy import GlobalState, LocalState, Txn, arc4, subroutine, uenumerate


class InnerStruct(arc4.Struct):
    number: arc4.UInt64

class OuterStruct(arc4.Struct):
    number: arc4.UInt64
    inner: InnerStruct

@subroutine
def method_bool(b: bool) -> None:
    pass

@subroutine
def method_num(num: arc4.UInt64) -> None:
    pass

@subroutine
def method_inner(inner: InnerStruct) -> None:
    pass

@subroutine
def method_outer(outer: OuterStruct) -> None:
    pass

@subroutine
def method_tup(tup: tuple[InnerStruct, bool]) -> None:
    pass

@subroutine
def new_inner() -> InnerStruct:
    return InnerStruct(number=arc4.UInt64(1))

@subroutine
def new_outer() -> OuterStruct:
    return OuterStruct(number=arc4.UInt64(2), inner=new_inner())

@subroutine
def new_inner_in_tup() -> tuple[InnerStruct, bool]:
    return new_inner(), True

class Arc4StructCopyTests(arc4.ARC4Contract):
    def __init__(self) -> None:
        self.global_inner = InnerStruct(number=arc4.UInt64(1))
        self.global_outer = OuterStruct(number=arc4.UInt64(2), inner=InnerStruct(number=arc4.UInt64(3)))
        self.global_proxy = GlobalState(OuterStruct(number=arc4.UInt64(1), inner=InnerStruct(number=arc4.UInt64(2))))
        self.local = LocalState(OuterStruct)

    @arc4.abimethod
    def test(self) -> None:
        # **INIT**
        var_inner = InnerStruct(number=arc4.UInt64(4))
        var_outer = OuterStruct(number=arc4.UInt64(5), inner=InnerStruct(number=arc4.UInt64(6)))

        number = arc4.UInt64(42)
        bad_outer_from_locals = OuterStruct(number, var_inner) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a struct constructor
        ok_outer_from_locals = OuterStruct(number, var_inner.copy())

        # **FUNCTION LOCALS**

        bad_inner = var_inner ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        inner_copy = var_inner.copy()
        var_outer.inner = var_inner ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        var_outer.inner = var_inner.copy()

        # **METHOD ARGS**

        method_inner(var_inner)
        method_outer(var_outer)
        method_inner(var_inner.copy())
        method_outer(var_outer.copy())
        method_num(var_inner.number)
        method_num(var_outer.number)
        method_num(var_outer.inner.number)

        method_inner(var_outer.inner) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine
        method_inner(var_outer.inner.copy())

        method_inner(new_inner())
        method_outer(new_outer())
        method_inner(new_outer().inner)

        method_inner(self.global_inner)## E: copy_arc4_struct.InnerStruct must be copied using .copy() when being passed to a subroutine from state ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine from state
        method_inner(self.global_inner.copy())
        method_inner(self.global_outer.inner) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine
        method_inner(self.global_outer.inner.copy())
        method_num(self.global_outer.number)
        method_num(self.global_outer.inner.number)

        method_outer(self.global_proxy.value) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine from state
        method_outer(self.global_proxy.value.copy())
        method_inner(self.global_proxy.value.inner) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine
        method_inner(self.global_proxy.value.inner.copy())
        method_outer(self.global_proxy.maybe()[0]) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine
        method_bool(self.global_proxy.maybe()[1])
        method_outer(self.global_proxy.get(new_outer())) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine
        method_outer(self.global_proxy.get(new_outer()).copy())
        method_num(self.global_proxy.value.number)
        method_num(self.global_proxy.value.inner.number)
        bad_inner = self.global_proxy.value.inner ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        bad_inner = self.global_proxy.value.inner.copy()
        maybe_outer = self.global_proxy.maybe() ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        bad_outer, bol = self.global_proxy.maybe() ## E: tuples containing a mutable reference to an ARC4-encoded value cannot be unpacked, use index access instead
        bol = self.global_proxy.maybe()[1]
        bad_outer = self.global_proxy.get(new_outer()) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        var_outer = self.global_proxy.get(new_outer()).copy()

        method_outer(self.local[Txn.sender]) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine from state
        method_outer(self.local[Txn.sender].copy())
        method_inner(self.local[Txn.sender].inner) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine
        method_inner(self.local[Txn.sender].inner.copy())
        method_outer(self.local.maybe(0)[0]) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine
        method_bool(self.local.maybe(0)[1])
        method_outer(self.local.get(0, new_outer())) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine
        method_outer(self.local.get(0, new_outer()).copy())
        method_num(self.local[Txn.sender].number)
        method_num(self.local[Txn.sender].inner.number)
        bad_inner = self.local[Txn.sender].inner ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        maybe_outer = self.local.maybe(0) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        bad_outer, bol = self.local.maybe(0) ## E: tuples containing a mutable reference to an ARC4-encoded value cannot be unpacked, use index access instead
        bol = self.local.maybe(0)[1]
        bad_outer = self.local.get(0, new_outer()) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        var_outer = self.local.get(0, new_outer()).copy()

        method_tup(new_inner_in_tup())
        var_inner, bol = new_inner_in_tup()
        maybe_inner = new_inner_in_tup()
        method_tup(maybe_inner)

        # **TUPLES ASSIGNMENT**
        # where t is some var with type tuple[...], and (...) is some tuple expression:
        # t = (...)
        # t = t
        # (...) = t
        # (...) = (...)

        tup = (var_inner, var_outer) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a tuple expression
        tup = (var_inner.copy(), var_outer.copy())
        tup = (new_inner(), new_outer())
        tup2 = tup ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        (a, b) = tup ## E: tuples containing a mutable reference to an ARC4-encoded value cannot be unpacked, use index access instead
        (a, b) = (var_inner, var_outer) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a tuple expression
        (a, b) = (new_inner(), new_outer())

        # **TUPLE INDEXING**

        a = tup[0] ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        a = tup[1].inner ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        a = tup[0].copy()
        a = tup[1].inner.copy()
        method_inner(tup[0]) ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a subroutine
        method_inner(tup[0].copy())
        self.global_inner = tup[0] ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        self.global_inner = tup[0].copy()
        self.global_proxy.value = tup[1] ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        self.global_proxy.value = tup[1].copy()
        self.global_outer.inner = tup[0] ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being assigned to another variable
        self.global_outer.inner = tup[0].copy()

        # **ITERATION**

        for s in (var_inner, var_outer.inner): ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a tuple expression
            assert s.number

        for s in (new_inner(), new_outer().inner):
            assert s.number

        for s in (var_inner.copy(), var_outer.inner.copy()):
            assert s.number

        for idx, s in uenumerate((var_inner, var_outer.inner)): ## E: mutable reference to ARC4-encoded value must be copied using .copy() when being passed to a tuple expression
            assert idx >= 0
            assert s.number

        for idx, s in uenumerate((var_inner.copy(), var_outer.inner.copy())):
            assert idx >= 0
            assert s.number


## case: abi_decorator_not_arc4_contract

from algopy import arc4, Contract

class MyContract(Contract): ## W: Class abi_decorator_not_arc4_contract.MyContract is implicitly abstract
    @arc4.abimethod ## E: decorator is only valid in subclasses of algopy.ARC4Contract
    def abi(self) -> None: ## E: missing @algopy.subroutine decorator
        pass

    @arc4.baremethod # type: ignore[type-var] ## E: decorator is only valid in subclasses of algopy.ARC4Contract
    def bare(self) -> None: ## E: missing @algopy.subroutine decorator
        pass


## case: bad_signatures
from algopy import *

class MyContract(ARC4Contract):
    @arc4.abimethod(name=1) # type: ignore[misc,call-overload] ## E: invalid name option: 1
    def a(self) -> None:
        pass

    @arc4.baremethod(allow_actions=[]) ## E: empty allow_actions
    def b(self) -> None:
        pass

    @arc4.abimethod ## E: invalid type for an ARC4 method: algopy.BoxRef
    def c(self, box: BoxRef) -> None:
        pass

    @arc4.abimethod ## E: invalid type for an ARC4 method: algopy.BoxRef
    def d(self, arg: Bytes) -> BoxRef:
        return BoxRef(key=arg)

    @arc4.baremethod # type: ignore[arg-type] ## E: bare methods should have no arguments or return values
    def e(self, x: UInt64) -> None:
        pass

    @arc4.baremethod # type: ignore[arg-type] ## E: bare methods should have no arguments or return values
    def f(self) -> UInt64:
        return UInt64(0)


## case: test_bad_string
from algopy import Bytes, arc4, subroutine

@subroutine
def invalid_string_args() -> arc4.String:
    return arc4.String(b"bad")  # type: ignore[arg-type] ## E: invalid/unhandled arguments

@subroutine
def invalid_aug_operator() -> None:
    a = arc4.String()
    a -= arc4.String()  # type: ignore[operator] ## E: unsupported operator
