# ruff: noqa
# fmt: off
# type: ignore

## case: test_invalid_arc4_struct_member_type
from algopy import *

class BadStruct(arc4.Struct): ## E: invalid ARC-4 Struct declaration, the following fields are not persistable: a, b
    a: gtxn.Transaction
    b: itxn.Payment
    c: bool


## case: test_invalid_arc4_member_syntax
from algopy import *

class BadStruct3(arc4.Struct):
    x: arc4.UInt64 = arc4.UInt64(1) ## E: unsupported syntax for algopy.arc4.Struct member declaration

## case: test_emit_errors
from algopy import *

class Event(arc4.Struct):
    a: arc4.String
    b: arc4.UInt8

class Event2(arc4.Struct):
    a: arc4.String

@subroutine
def typed_ok() -> None:
    arc4.emit(Event(arc4.String("a"), arc4.UInt8(1)))
    arc4.emit("Event(string,uint8)", "a", 1)
    arc4.emit("Event(string,uint8)", "a", 255)

@subroutine
def abi_call_tuple_ok() -> None:
    event, txn = arc4.abi_call[Event]("foo()(string,uint8)", app_id=1)

@subroutine
def abi_call_wrong_return() -> None:
    event, txn = arc4.abi_call[Event]("foo()(string,uint64)", app_id=1) ## E: method selector from args 'foo()(string,uint8)' does not match provided method selector: 'foo()(string,uint64)'

@subroutine
def abi_call_none_return() -> None:
    arc4.abi_call[None]("foo()(string,uint64)", app_id=1) # type: ignore[index] ## E: invalid return type for an ARC-4 method: typing.Never


@subroutine
def wrong_arg_type2() -> None:
    arc4.emit("Event(string,uint8)", b"a", 1) ## E: can't covert literal to algopy.arc4.String

@subroutine
def wrong_arg_type3() -> None:
    arc4.emit("Event(string,uint8)", "a", 256) ## E: invalid algopy.arc4.UIntN[typing.Literal[8]] value

@subroutine
def wrong_arg_type4() -> None:
    arc4.emit("Event(string,uint8)", Event(arc4.String("a"), arc4.UInt8(1))) ## E: expected 2 ABI arguments, got 1

@subroutine
def wrong_number_args() -> None:
    arc4.emit("Event(string,uint8)", "a", 1, 2) ## E: expected 2 ABI arguments, got 3

@subroutine
def invalid_signature() -> None:
    arc4.emit("(string,uint8)", "a", 1) ## E: invalid signature: name=''
    arc4.emit("string,uint8", "a", 1) ## E: invalid signature: name='string,uint8'
    arc4.emit("9bad_name(string,uint8)", "a", 1) ## E: invalid signature: name='9bad_name'

@subroutine
def invalid_signature4() -> None:
    arc4.emit("Event(string,uint8)void", arc4.String("a"), arc4.UInt8(1)) ## E: event signatures cannot include return types

@subroutine
def invalid_signature5() -> None:
    arc4.emit("Event(string,uint8)uint64", arc4.String("a"), arc4.UInt8(1)) ## E: event signatures cannot include return types

@subroutine
def invalid_signature6() -> None:
    arc4.emit("Event(string,uint8)(string,uint64)", arc4.String("a"), arc4.UInt8(1)) ## E: event signatures cannot include return types

@subroutine
def dont_copy_array() -> None:
    a = arc4.DynamicBytes()
    arc4.emit("Event(byte[])", a)  # this should not need a .copy()

## case: test_emit_errors_ir
from algopy import *

class Event(arc4.Struct):
    a: arc4.String
    b: arc4.UInt8

class Event2(arc4.Struct):
    a: arc4.String

@subroutine
def wrong_arg_type1() -> None:
    arc4.emit("Event(string,uint64)", arc4.String("a"), arc4.UInt128(1)) ## E: expected type algopy.arc4.UIntN[typing.Literal[64]], got type algopy.arc4.BigUIntN[typing.Literal[128]]

@subroutine
def wrong_arg_type5() -> None:
    arc4.emit("Event2(string)", Event2(arc4.String("a"))) ## E: expected type algopy.arc4.String, got type test_emit_errors_ir.Event2

class MyContract(ARC4Contract):
    @arc4.abimethod()
    def foo(self) -> None:
        wrong_arg_type1()
        wrong_arg_type5()

## case: test_bad_uint_sizes

import typing

from algopy import arc4, subroutine

A: typing.TypeAlias = arc4.UIntN[typing.Literal[72]] ## E: max bit size of algopy.arc4.UIntN is 64, got 72
B: typing.TypeAlias = arc4.BigUIntN[typing.Literal[520]] ## E: Bit size must be between 8 and 512 inclusive
# TODO: add test for non-8-multiple

C: typing.TypeAlias = arc4.UFixedNxM[typing.Literal[72], typing.Literal[10]] ## E: max bit size of algopy.arc4.UFixedNxM is 64, got 72
D: typing.TypeAlias = arc4.BigUFixedNxM[typing.Literal[520], typing.Literal[10]] ## E: Bit size must be between 8 and 512 inclusive
# TODO: add test for non-8-multiple

E: typing.TypeAlias = arc4.UFixedNxM[typing.Literal[64], typing.Literal[0]] ## E: Precision must be between 1 and 160 inclusive
F: typing.TypeAlias = arc4.BigUFixedNxM[typing.Literal[512], typing.Literal[0]] ## E: Precision must be between 1 and 160 inclusive

@subroutine
def testA(x: A) -> None: ## E: max bit size of algopy.arc4.UIntN is 64, got 72
    assert x

@subroutine
def testB(x: B) -> None: ## E: Bit size must be between 8 and 512 inclusive
    assert x

@subroutine
def testC(x: C) -> None: ## E: max bit size of algopy.arc4.UFixedNxM is 64, got 72
    assert x

@subroutine
def testD(x: D) -> None: ## E: Bit size must be between 8 and 512 inclusive
    assert x

@subroutine
def testE(x: E) -> None: ## E: Precision must be between 1 and 160 inclusive
    assert x

@subroutine
def testF(x: F) -> None: ## E: Precision must be between 1 and 160 inclusive
    assert x

## case: test_arc4_tuple_immutable
from algopy import arc4

class NotOkay(arc4.ARC4Contract):
    @arc4.abimethod
    def not_okay(self) -> None:
        t = arc4.Tuple((arc4.UInt64(1), arc4.UInt8(1)))
        t[0] = arc4.UInt64(2)  # type: ignore ## E: expression is not valid as an assignment target


## case: arc4_copy

import typing
from algopy import GlobalState, LocalState, Txn, arc4, subroutine

IntArray: typing.TypeAlias = arc4.DynamicArray[arc4.UInt64]


class Arc4CopyContract(arc4.ARC4Contract):
    def __init__(self) -> None:
        self.global_a = IntArray()
        self.global_b = GlobalState(IntArray())
        self.local = LocalState(IntArray)

    @subroutine
    def method_a(self, a: IntArray) -> None:
        a.append(arc4.UInt64(5))

    @arc4.abimethod
    def test(self) -> None:
        # Local does not need copy
        local_array = IntArray()
        self.method_a(local_array)

        # Require copy when reassigning
        copy1 = local_array ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        assert (copy2 := local_array).length, "this isn't ok" ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        valid_tuple = (local_array.copy(),)

        valid_tuple_copy: tuple[arc4.DynamicArray[arc4.UInt64]] = tuple(valid_tuple) # type: ignore[assignment] ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a tuple expression
        copy3 = valid_tuple[0] ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        copy4 = self.global_a ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        copy5 = self.global_b.value ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable

        # Require copy when building a collection
        my_tuple = (local_array, local_array) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a tuple expression
        copy_in_tuple = arc4.Tuple(valid_tuple) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a constructor
        copy_in_array1 = arc4.DynamicArray(local_array) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to an array constructor
        copy_in_array2 = arc4.StaticArray(local_array) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to an array constructor

        # State vars should require copy
        self.method_a(self.global_a) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine from state
        self.method_a(self.global_b.value) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine from state
        self.method_a(self.local[Txn.sender]) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine from state

        # Tuple items require a copy when passing
        self.method_a(valid_tuple[0]) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine

        # Require copy when reassigning tuple elements
        destructured_a, destructured_b = my_tuple ## E: tuples containing a mutable reference to an ARC-4-encoded value cannot be unpacked, use index access instead
        destructured_a = my_tuple[0] ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        destructured_b = my_tuple[1] ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable

        # Can't create copies by iterating
        valid_array_of_arrays = arc4.DynamicArray(local_array.copy())

        for an_array in valid_array_of_arrays: ## N: use `algopy.urange(<array>.length)` to iterate by index \
                                               ## E: cannot directly iterate an ARC-4 array of mutable objects, construct a for-loop over the indexes instead
            assert an_array.length

## case: copy_arc4_struct
from algopy import *

class FrozenMutable(arc4.Struct, frozen=True):
    mutable: arc4.DynamicBytes
    number: arc4.UInt64

class FrozenImmutable(arc4.Struct, frozen=True):
    number: arc4.UInt64
    string: arc4.String

class InnerStruct(arc4.Struct):
    number: arc4.UInt64

class OuterStruct(arc4.Struct):
    number: arc4.UInt64
    inner: InnerStruct

@subroutine
def method_bool(b: bool) -> None:
    pass

@subroutine
def method_num(num: arc4.UInt64) -> None:
    pass

@subroutine
def method_inner(inner: InnerStruct) -> None:
    pass

@subroutine
def method_outer(outer: OuterStruct) -> None:
    pass

@subroutine
def method_tup(tup: tuple[InnerStruct, bool]) -> None:
    pass

@subroutine
def method_mutable_struct(mut: FrozenMutable) -> None:
    pass

@subroutine
def method_immutable_struct(mut: FrozenImmutable) -> None:
    pass

@subroutine
def method_immutable(tup: tuple[InnerStruct, bool]) -> None:
    pass

@subroutine
def new_inner() -> InnerStruct:
    return InnerStruct(number=arc4.UInt64(1))

@subroutine
def new_outer() -> OuterStruct:
    return OuterStruct(number=arc4.UInt64(2), inner=new_inner())

@subroutine
def new_inner_in_tup() -> tuple[InnerStruct, bool]:
    return new_inner(), True

@subroutine
def struct_replace() -> None:
    frozen_mut = FrozenMutable(arc4.DynamicBytes(), arc4.UInt64())
    frozen_mut = frozen_mut._replace(mutable=arc4.DynamicBytes(b"ok"))
    frozen_mut = frozen_mut._replace(number=arc4.UInt64(1)) ## E: mutable field 'mutable' requires explicit copy

    frozen_imm = FrozenImmutable(arc4.UInt64(), arc4.String())
    frozen_imm = frozen_imm._replace()
    frozen_imm = frozen_imm._replace(number=frozen_mut.number, string=arc4.String("hi"))

    thawed_imm = InnerStruct(arc4.UInt64())

    thawed_imm = thawed_imm._replace()
    one = arc4.UInt64(1)
    thawed_imm = thawed_imm._replace(number=one)

    thawed_mut = OuterStruct(arc4.UInt64(), thawed_imm.copy())
    thawed_mut = thawed_mut._replace(inner=thawed_imm.copy())
    thawed_mut = thawed_mut._replace() ## E: mutable field 'inner' requires explicit copy


class Arc4StructCopyTests(arc4.ARC4Contract):
    def __init__(self) -> None:
        self.global_inner = InnerStruct(number=arc4.UInt64(1))
        self.global_outer = OuterStruct(number=arc4.UInt64(2), inner=InnerStruct(number=arc4.UInt64(3)))
        self.global_proxy = GlobalState(OuterStruct(number=arc4.UInt64(1), inner=InnerStruct(number=arc4.UInt64(2))))
        self.global_mutable = FrozenMutable(arc4.DynamicBytes(), arc4.UInt64(0))
        self.global_immutable = FrozenImmutable(arc4.UInt64(42), arc4.String("abc"))
        self.global_mutable_proxy = GlobalState(FrozenMutable(arc4.DynamicBytes(), arc4.UInt64(0)))
        self.local = LocalState(OuterStruct)

    @arc4.abimethod
    def test(self) -> None:
        # **INIT**
        var_inner = InnerStruct(number=arc4.UInt64(4))
        var_outer = OuterStruct(number=arc4.UInt64(5), inner=InnerStruct(number=arc4.UInt64(6)))
        var_mutable_struct = FrozenMutable(arc4.DynamicBytes(), arc4.UInt64(0))
        var_immutable_struct = FrozenImmutable(arc4.UInt64(12), arc4.String("abc"))

        number = arc4.UInt64(42)
        bad_outer_from_locals = OuterStruct(number, var_inner) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a struct constructor
        ok_outer_from_locals = OuterStruct(number, var_inner.copy())
        ok_immutable = var_immutable_struct
        ok_mutable = var_mutable_struct.copy()

        # **FUNCTION LOCALS**
        bad_inner = var_inner ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        inner_copy = var_inner.copy()
        var_outer.inner = var_inner ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        var_outer.inner = var_inner.copy()

        # **METHOD ARGS**
        method_inner(var_inner)
        method_outer(var_outer)
        method_inner(var_inner.copy())
        method_outer(var_outer.copy())
        method_num(var_inner.number)
        method_num(var_outer.number)
        method_num(var_outer.inner.number)

        method_mutable_struct(var_mutable_struct)
        method_mutable_struct(var_mutable_struct.copy())
        method_immutable_struct(var_immutable_struct)
        method_mutable_struct(self.global_mutable) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine from state
        method_mutable_struct(self.global_mutable_proxy.value) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine from state
        method_mutable_struct(self.global_mutable_proxy.value.copy())
        method_immutable_struct(self.global_immutable)

        method_inner(var_outer.inner) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine
        method_inner(var_outer.inner.copy())

        method_inner(new_inner())
        method_outer(new_outer())
        method_inner(new_outer().inner)

        method_inner(self.global_inner)## E: copy_arc4_struct.InnerStruct must be copied using .copy() when being passed to a subroutine from state ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine from state
        method_inner(self.global_inner.copy())
        method_inner(self.global_outer.inner) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine
        method_inner(self.global_outer.inner.copy())
        method_num(self.global_outer.number)
        method_num(self.global_outer.inner.number)

        method_outer(self.global_proxy.value) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine from state
        method_outer(self.global_proxy.value.copy())
        method_inner(self.global_proxy.value.inner) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine
        method_inner(self.global_proxy.value.inner.copy())
        method_outer(self.global_proxy.maybe()[0]) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine
        method_bool(self.global_proxy.maybe()[1])
        method_outer(self.global_proxy.get(new_outer())) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine
        method_outer(self.global_proxy.get(new_outer()).copy())
        method_num(self.global_proxy.value.number)
        method_num(self.global_proxy.value.inner.number)
        bad_inner = self.global_proxy.value.inner ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        bad_inner = self.global_proxy.value.inner.copy()
        maybe_outer = self.global_proxy.maybe() ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        bad_outer, bol = self.global_proxy.maybe() ## E: tuples containing a mutable reference to an ARC-4-encoded value cannot be unpacked, use index access instead
        bol = self.global_proxy.maybe()[1]
        bad_outer = self.global_proxy.get(new_outer()) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        var_outer = self.global_proxy.get(new_outer()).copy()
        bad_mutable = self.global_mutable ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        bad_mutable = self.global_mutable.copy()
        bad_mutable = self.global_mutable_proxy.value ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        bad_mutable = self.global_mutable_proxy.value.copy()

        method_outer(self.local[Txn.sender]) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine from state
        method_outer(self.local[Txn.sender].copy())
        method_inner(self.local[Txn.sender].inner) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine
        method_inner(self.local[Txn.sender].inner.copy())
        method_outer(self.local.maybe(0)[0]) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine
        method_bool(self.local.maybe(0)[1])
        method_outer(self.local.get(0, new_outer())) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine
        method_outer(self.local.get(0, new_outer()).copy())
        method_num(self.local[Txn.sender].number)
        method_num(self.local[Txn.sender].inner.number)
        bad_inner = self.local[Txn.sender].inner ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        maybe_outer = self.local.maybe(0) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        bad_outer, bol = self.local.maybe(0) ## E: tuples containing a mutable reference to an ARC-4-encoded value cannot be unpacked, use index access instead
        bol = self.local.maybe(0)[1]
        bad_outer = self.local.get(0, new_outer()) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        var_outer = self.local.get(0, new_outer()).copy()

        method_tup(new_inner_in_tup())
        var_inner, bol = new_inner_in_tup()
        maybe_inner = new_inner_in_tup()
        method_tup(maybe_inner)

        # **TUPLES ASSIGNMENT**
        # where t is some var with type tuple[...], and (...) is some tuple expression:
        # t = (...)
        # t = t
        # (...) = t
        # (...) = (...)
        tup = (var_inner, var_outer) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a tuple expression
        tup = (var_inner.copy(), var_outer.copy())
        tup = (new_inner(), new_outer())
        tup2 = tup ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        (a, b) = tup ## E: tuples containing a mutable reference to an ARC-4-encoded value cannot be unpacked, use index access instead
        (a, b) = (var_inner, var_outer) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a tuple expression
        (a, b) = (new_inner(), new_outer())

        # **TUPLE INDEXING**
        a = tup[0] ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        a = tup[1].inner ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        a = tup[0].copy()
        a = tup[1].inner.copy()
        method_inner(tup[0]) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a subroutine
        method_inner(tup[0].copy())
        self.global_inner = tup[0] ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        self.global_inner = tup[0].copy()
        self.global_proxy.value = tup[1] ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        self.global_proxy.value = tup[1].copy()
        self.global_outer.inner = tup[0] ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being assigned to another variable
        self.global_outer.inner = tup[0].copy()

        # **ITERATION**
        for s in (var_inner, var_outer.inner): ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a tuple expression
            assert s.number

        for s in (new_inner(), new_outer().inner):
            assert s.number

        for s in (var_inner.copy(), var_outer.inner.copy()):
            assert s.number

        for idx, s in uenumerate((var_inner, var_outer.inner)): ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being passed to a tuple expression
            assert idx >= 0
            assert s.number

        for idx, s in uenumerate((var_inner.copy(), var_outer.inner.copy())):
            assert idx >= 0
            assert s.number


## case: abi_decorator_not_arc4_contract

from algopy import arc4, Contract

class MyContract(Contract): ## W: Class abi_decorator_not_arc4_contract.MyContract is implicitly abstract
    @arc4.abimethod ## E: decorator is only valid in subclasses of algopy.arc4.ARC4Contract
    def abi(self) -> None: ## E: missing @algopy.subroutine decorator
        pass

    @arc4.baremethod # type: ignore[type-var] ## E: decorator is only valid in subclasses of algopy.arc4.ARC4Contract
    def bare(self) -> None: ## E: missing @algopy.subroutine decorator
        pass


## case: bad_signatures
from algopy import *

class MyContract(ARC4Contract): ## E: Non-abstract ARC-4 contract has no methods that can be called to create the contract, but does have a NoOp bare method, so one couldn't be inserted. In order to allow creating the contract add either an @abimethod or @baremethod decorated method with create="require" or create="allow"
    @arc4.abimethod(name=1) # type: ignore[misc,call-overload] ## E: unexpected argument type
    def a(self) -> None:  # type: ignore[misc]
        pass

    @arc4.baremethod(allow_actions=[]) ## E: empty allow_actions
    def b(self) -> None:
        pass

    @arc4.abimethod ## E: invalid type for an ARC-4 method: algopy.BoxRef
    def c(self, box: BoxRef) -> None:
        pass

    @arc4.abimethod ## E: invalid type for an ARC-4 method: algopy.BoxRef
    def d(self, arg: Bytes) -> BoxRef:
        return BoxRef(key=arg)

    @arc4.baremethod # type: ignore[arg-type] ## E: bare methods should have no arguments or return values
    def e(self, x: UInt64) -> None:
        pass

    @arc4.baremethod # type: ignore[arg-type] ## E: bare methods should have no arguments or return values
    def f(self) -> UInt64:
        return UInt64(0)


## case: test_string
from algopy import arc4, subroutine

@subroutine
def invalid_aug_operator() -> None:
    a = arc4.String()
    a -= arc4.String()  # type: ignore[operator] ## E: unsupported operator for type: '-'


## case: test_abi_call_literal
import typing
from algopy import *

class Logger(ARC4Contract):

    @arc4.abimethod
    def primitive_types(self, a: UInt64, b: BigUInt, c: Bytes, d: String, e: arc4.UInt64, f: arc4.Bool) -> None:
        log(a, b, c, d, e, f)

    @arc4.abimethod
    def dynamic_bytes(self, a: Bytes) -> None:
        log(a)

    @arc4.abimethod
    def static_bytes(self, a: arc4.StaticArray[arc4.Byte, typing.Literal[2]]) -> None:
        log(a)

    @arc4.abimethod
    def log_asset_account_app(self, asset: Asset, account: Account, app: Application) -> None:
        log(asset.name, account.bytes, app.address)

    @arc4.abimethod
    def acfg_arg(self, acfg: gtxn.AssetConfigTransaction) -> None:
        pass

@subroutine
def test_ref_types_with_literal() -> None:
    arc4.abi_call(
        Logger.log_asset_account_app,
        1234,
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
        4567,
        app_id=4242,
    )

@subroutine
def test_txn_arg_with_gtxn() -> None:
    arc4.abi_call(
        Logger.acfg_arg,
        gtxn.AssetConfigTransaction(0), ## E: expected type algopy.itxn.AssetConfig, got type algopy.gtxn.AssetConfigTransaction
        app_id=1,
    )

@subroutine
def test_txn_arg_with_literal() -> None:
    arc4.abi_call(
        Logger.acfg_arg,
        1, ## E: expected type algopy.itxn.AssetConfig, got type int
        app_id=1,
    )

@subroutine
def test_txn_arg_with_wrong_literal_type() -> None:
    arc4.abi_call(
        Logger.acfg_arg,
        "", ## E: expected type algopy.itxn.AssetConfig, got type str
        app_id=1,
    )

@subroutine
def test_primitive_types() -> None:
    arc4.abi_call(
        Logger.primitive_types,
        1, 2, b"3", "4", 5, True,
        app_id=1,
    )

@subroutine
def test_dynamic_bytes_bad_literal() -> None:
    arc4.abi_call(
        Logger.dynamic_bytes,
        1, ## E: can't covert literal to algopy.arc4.DynamicBytes
        app_id=1,
    )

@subroutine
def test_static_bytes_bad_literal() -> None:
    arc4.abi_call(
        Logger.static_bytes,
        2, ## E: can't covert literal to algopy.arc4.StaticArray[algopy.arc4.Byte, typing.Literal[2]]
        app_id=1,
    )


## case: test_bool_eval
import typing
from algopy import *


class MyStruct(arc4.Struct):
    x: arc4.UInt512

@subroutine
def constant_bool() -> None:
    assert not arc4.StaticArray[arc4.UInt16, typing.Literal[0]]() ## E: expression is always True
    assert arc4.StaticArray(arc4.UInt16(0)) ## E: expression is always True

    assert not arc4.StaticArray[arc4.Bool, typing.Literal[0]]() ## E: expression is always True
    assert arc4.StaticArray(arc4.Bool(False)) ## E: expression is always True

    assert MyStruct(x=arc4.UInt512(0)) ## E: expression is always True

    assert arc4.Tuple((arc4.Bool(False),)) ## E: expression is always True

## case: test_address_immutable
from algopy import *

class MyTest(ARC4Contract):
    @arc4.abimethod
    def test(self) -> None:
        some_address = arc4.Address()

        this_is_ok = some_address[0]
        assert this_is_ok == 0
        some_address[0] = arc4.Byte(123) ## E: expression is not valid as an assignment target - object is immutable

## case: test_mutable_params_passed_only_once
from algopy import *

class MyTest(ARC4Contract):
    @arc4.abimethod
    def test(self) -> None:
        my_array = arc4.DynamicBytes()
        self.double_use_not_allowed(my_array, my_array) ## E: mutable values cannot be passed more than once to a subroutine
        # if we allowed this, the following would fail
        assert my_array[0] == 42
        assert my_array[1] == 43


    @subroutine
    def double_use_not_allowed(self, arr1: arc4.DynamicBytes, arr2: arc4.DynamicBytes) -> None:
        arr1.append(arc4.Byte(42))
        arr2.append(arc4.Byte(43))


## case: bad_array_types
import typing
from algopy import *


@subroutine
def a() -> None:
    assert not arc4.StaticArray[int, typing.Literal[1]](1) ## E: Python literals of type int cannot be used as runtime values

@subroutine
def b() -> None:
    assert not arc4.StaticArray(1) ## E: Python literals of type int cannot be used as runtime values


@subroutine
def c() -> None:
    assert not arc4.DynamicArray(1) ## E: Python literals of type int cannot be used as runtime values


@subroutine
def d() -> None:
    assert not arc4.DynamicArray[int]() ## E: Python literals of type int cannot be used as runtime values


## case: bad_default_args1
from algopy import *

class DefaultArgsContract1(ARC4Contract):
    @arc4.abimethod(default_args={ ## E: 'a' is not a parameter of bad_default_args1.DefaultArgsContract1.name_mismatch
        "a": UInt64(1),
    })
    def name_mismatch(self, x: UInt64) -> None:
        assert x

## case: bad_default_args2
from algopy import *

class DefaultArgsContract2(ARC4Contract):
    @arc4.abimethod(default_args={
        "x": arc4.UInt64(1), ## E: mismatch between parameter type and default value type
    })
    def type_mismatch(self, x: UInt64) -> None:
        assert x

## case: bad_default_args3
from algopy import *

class DefaultArgsContract3(ARC4Contract):
    @arc4.abimethod(default_args={
        "x": TemplateVar[UInt64]("NO"), ## E: could not determine constant value
    })
    def use_template_var(self, x: UInt64) -> None:
        assert x

## case: bad_default_args4
from algopy import *

@subroutine
def constant_method() -> UInt64:
    return UInt64(42)

class DefaultArgsContract4(ARC4Contract):
    @arc4.abimethod(default_args={
        "x":  UInt64(-1), ## E: invalid algopy.UInt64 value
    })
    def parse_failure(self, x: UInt64) -> None:
        assert x

## case: bad_arc4_tuple_arguments
import typing
from algopy import *

TestTuple: typing.TypeAlias = arc4.Tuple[arc4.UInt8, arc4.UInt8, arc4.String, arc4.String, arc4.UInt8]

class Arc4TuplesTypeContract(ARC4Contract):
    @arc4.abimethod
    def foobar(self) -> None:
        x = TestTuple((UInt64(1), UInt64(1), Bytes(b""), Bytes(b""), UInt64(1))) ## E: unexpected argument type
        log(x)

## case: struct_member_ordering
import typing
from algopy import *

class MyStruct(arc4.Struct):
    foo: arc4.UInt64
    bar: arc4.Bool


class Client(arc4.ARC4Client, typing.Protocol):

    @arc4.abimethod
    def check(self, arg: arc4.DynamicArray[MyStruct]) -> None: ...

@subroutine
def incorrect_positional() -> MyStruct:
    return MyStruct(arc4.Bool(), arc4.UInt64()) # type: ignore[arg-type] ## E: unexpected argument type

## case: struct_member_ordering2
import typing
from algopy import *

class MyStruct(arc4.Struct):
    foo: arc4.UInt64
    bar: arc4.Bool


class Client(arc4.ARC4Client, typing.Protocol):

    @arc4.abimethod
    def check(self, arg: arc4.DynamicArray[MyStruct]) -> None: ...


@subroutine
def correct_kwarg() -> MyStruct:
    return MyStruct(bar=arc4.Bool(), foo=arc4.UInt64())

@subroutine
def correct_array_positional() -> None:
    arc4.abi_call(Client.check, ImmutableArray((UInt64(), True)), app_id=1234)

class Caller(arc4.ARC4Contract):
    @arc4.abimethod
    def incorrect_array_positional(self) -> None:
        arc4.abi_call(Client.check, ImmutableArray((True, UInt64())), app_id=1234) ## E: expected type algopy.arc4.DynamicArray[struct_member_ordering2.MyStruct], got type algopy.ImmutableArray[tuple[bool, algopy.UInt64]]


## case: array_encoding
import typing
from algopy import *

class Client(arc4.ARC4Client, typing.Protocol):

    @arc4.abimethod
    def take_arc4_uint8(self, arr: arc4.DynamicArray[arc4.UInt8]) -> None: ...

class Caller(arc4.ARC4Contract):
    @arc4.abimethod
    def stack_uint64_to_arc4_uint8(self) -> None:
        arr = ImmutableArray[UInt64]()
        arc4.abi_call(Client.take_arc4_uint8, arr, app_id=1234) ## E: expected type algopy.arc4.DynamicArray[algopy.arc4.UIntN[typing.Literal[8]]], got type algopy.ImmutableArray[algopy.UInt64]

## case: abimethod_reference_type_in_tuple
from algopy import *

class ARC4Reference(arc4.ARC4Contract):
    @arc4.abimethod()
    def test(self,
        arg: tuple[Account, Asset],
        arg2: tuple[Account, Application],
    ) -> None:
        pass


## case: abimethod_reference_type_in_array
from algopy import *

class ARC4Reference(arc4.ARC4Contract):
    @arc4.abimethod()
    def test(self,
        arg: ImmutableArray[Asset],
    ) -> None:
        pass

## case: return_txn_type
from algopy import *

class ReferenceReturn(arc4.ARC4Contract):
    @arc4.abimethod ## E: transactions are not supported as a return type
    def txn(self) -> gtxn.Transaction:
        return gtxn.Transaction(1)


## case: invalid_arc4_type_in_abi_call
from algopy import *

@subroutine
def caller() -> None:
    arc4.abi_call( ## E: algopy.itxn.PaymentInnerTransaction is not an ARC-4 type and no implicit ARC-4 conversion possible
        "foo",
        itxn.Payment(receiver=Txn.sender).submit(),
        app_id=1234,
    )

## case: mutable_elements_append_concat_extend
from algopy import *

class Foo(Struct):
    a: UInt64
    b: UInt64

@subroutine
def caller() -> None:
    arr = Array[Foo]()
    foo = Foo(Txn.num_app_args, Txn.num_app_args)
    arr.append(foo) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being extended
    arr.extend(arr) ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being extended
    arr2 = arr + arr ## E: mutable reference to ARC-4-encoded value must be copied using .copy() when being concat

## case: modify_frozen_struct
from algopy import *

class Bar(Struct):
    foo: UInt64

class Frozen(Struct, frozen=True):
    bar: Bar

@subroutine
def no() -> None:
    arr = Array[Frozen]()
    assert arr.length == 0

    for i in urange(5):
        arr.append(Frozen(Bar(i)))

    arr[0].bar = Bar(UInt64(1)) # type: ignore[misc] ## E: expression is not valid as an assignment target - object is frozen

## case: modify_immutable_struct
from algopy import *

class Imm(Struct, frozen=True):
    bar: UInt64

@subroutine
def no() -> None:
    arr = Array[Imm]()
    assert arr.length == 0

    for i in urange(5):
        arr.append(Imm(i))

    arr[0].bar = UInt64(1) # type: ignore[misc] ## E: expression is not valid as an assignment target - object is immutable
