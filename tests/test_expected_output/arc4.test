# ruff: noqa
# fmt: off
# type: ignore

## case: test_emit_errors

from algopy import arc4, subroutine

class Event(arc4.Struct):
    a: arc4.String
    b: arc4.UInt8

class Event2(arc4.Struct):
    a: arc4.String

@subroutine
def typed_ok() -> None:
    arc4.emit(Event(arc4.String("a"), arc4.UInt8(1)))
    arc4.emit("Event(string,uint8)", "a", 1)
    arc4.emit("Event(string,uint8)", "a", 255)

@subroutine
def abi_call_tuple_ok() -> None:
    event, txn = arc4.abi_call[Event]("foo()(string,uint8)")

@subroutine
def abi_call_wrong_return() -> None:
    event, txn = arc4.abi_call[Event]("foo()(string,uint64)") ## E: Method selector from args 'foo()(string,uint8)' does not match provided method selector: 'foo()(string,uint64)'

@subroutine
def wrong_arg_type1() -> None:
    arc4.emit("Event(string,uint64)", arc4.String("a"), arc4.UInt8(1)) ## E: Expected type algopy.arc4.UInt64, got type algopy.arc4.UInt8

@subroutine
def wrong_arg_type2() -> None:
    arc4.emit("Event(string,uint8)", b"a", 1) ## E: Can't construct algopy.arc4.String from Python literal b'a'

@subroutine
def wrong_arg_type3() -> None:
    arc4.emit("Event(string,uint8)", "a", 256) ## E: Invalid algopy.arc4.UInt8 value: 256

@subroutine
def wrong_arg_type4() -> None:
    arc4.emit("Event(string,uint8)", Event(arc4.String("a"), arc4.UInt8(1))) ## E: Number of arguments (1) does not match signature (2)

@subroutine
def wrong_arg_type5() -> None:
    arc4.emit("Event2(string)", Event2(arc4.String("a"))) ## E: Expected type algopy.arc4.String, got type test_emit_errors.Event2

@subroutine
def wrong_number_args() -> None:
    arc4.emit("Event(string,uint8)", "a", 1, 2) ## E: Number of arguments (3) does not match signature (2)

@subroutine
def invalid_signature1() -> None:
    arc4.emit("(string,uint8)", "a", 1) ## E: Invalid signature: name=''

@subroutine
def invalid_signature2() -> None:
    arc4.emit("string,uint8", "a", 1) ## E: Invalid signature: name='string,uint8'

@subroutine
def invalid_signature3() -> None:
    arc4.emit("9bad_name(string,uint8)", "a", 1) ## E: Invalid signature: name='9bad_name'

@subroutine
def invalid_signature4() -> None:
    arc4.emit("Event(string,uint8)void", arc4.String("a"), arc4.UInt8(1)) ## E: Invalid signature, trailing text after args 'void'

@subroutine
def invalid_signature5() -> None:
    arc4.emit("Event(string,uint8)uint64", arc4.String("a"), arc4.UInt8(1)) ## E: Invalid signature, trailing text after args 'uint64'

@subroutine
def invalid_signature6() -> None:
    arc4.emit("Event(string,uint8)(string,uint64)", arc4.String("a"), arc4.UInt8(1)) ## E: Invalid signature, trailing text after args '(string,uint64)'


## case: test_bad_uint_sizes

import typing

from algopy import arc4, subroutine

A: typing.TypeAlias = arc4.UIntN[typing.Literal[72]]
B: typing.TypeAlias = arc4.BigUIntN[typing.Literal[64]]

C: typing.TypeAlias = arc4.UFixedNxM[typing.Literal[72], typing.Literal[10]]
D: typing.TypeAlias = arc4.BigUFixedNxM[typing.Literal[64], typing.Literal[10]]


@subroutine
def testA(x: A) -> None: ## E: UIntN scale must be >=8 and <=64 bits, and be a multiple of 8
    assert x

@subroutine
def testB(x: B) -> None: ## E: BigUIntN scale must be >64 and <=512 bits, and be a multiple of 8
    assert x

@subroutine
def testC(x: C) -> None: ## E: UFixedNxM scale must be >=8 and <=64 bits, and be a multiple of 8
    assert x

@subroutine
def testD(x: D) -> None: ## E: BigUFixedNxM scale must be >64 and <=512 bits, and be a multiple of 8
    assert x
