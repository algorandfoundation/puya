
## case: test_cant_instantiate_inner_transaction

from algopy import Contract, itxn


class MyContract(Contract):
    def approval_program(self) -> bool:
        txn = itxn.InnerTransactionResult()  ## E: algopy.itxn.InnerTransactionResult cannot be instantiated directly, create a algopy.itxn.InnerTransaction and submit instead
        return True

    def clear_state_program(self) -> bool:
        return True


## case: test_inner_txn_cant_be_aliased

from algopy import Contract, TransactionType, itxn, subroutine


class MyContract(Contract):
    def approval_program(self) -> bool:
        params = itxn.InnerTransaction(type=TransactionType.Payment)
        txn = params.submit()
        self.cant_pass_inner_txn(txn) ## E: Inner Transactions cannot be used as a subroutine argument or return value.
        txn2 = self.cant_return_inner_txn() ## E: Inner Transactions can not be used like this.
        if (txn3 := params.submit()).created_app: ## E: Inner Transactions cannot be used in assignment expressions.
            pass
        txn4 = txn ## E: Inner Transactions can not be used like this.
        return True

    def clear_state_program(self) -> bool:
        return True

    @subroutine
    def cant_pass_inner_txn(self, txn: itxn.InnerTransactionResult) -> None: ## E: Inner Transactions cannot be used as a subroutine argument or return value.
        assert txn.type

    @subroutine ## E: Inner Transactions cannot be used as a subroutine argument or return value.
    def cant_return_inner_txn(self) -> itxn.InnerTransactionResult:
        return itxn.InnerTransaction(type=TransactionType.Payment).submit()

## case: test_inner_txn_local_only

from algopy import ARC4Contract, TransactionType, itxn, arc4


class MyContract(ARC4Contract):

    @arc4.abimethod()
    def non_local_fields(self) -> None:
        self.fields = itxn.InnerTransaction(type=TransactionType.Payment) ## E: Inner Transactions can only be assigned to local variables
        txn = self.fields.submit()

    @arc4.abimethod()
    def non_local_itxn(self) -> None:
        fields = itxn.InnerTransaction(type=TransactionType.Payment)
        self.txn = fields.submit() ## E: Inner Transactions can only be assigned to local variables

## case: test_inner_txn_param_cant_be_aliased

from algopy import Contract, TransactionType, itxn, subroutine


class MyContract(Contract):
    def approval_program(self) -> bool:
        params = itxn.InnerTransaction(type=TransactionType.Payment)
        self.cant_pass_inner_txn_params(params) ## E: Inner Transactions cannot be used as a subroutine argument or return value.
        params2 = self.cant_return_inner_txn_params() ## E: Inner Transactions can not be used like this.
        if (params3 := itxn.InnerTransaction(type=TransactionType.Payment)).submit().created_app: ## E: Inner Transactions cannot be used in assignment expressions.
            pass
        params4 = params ## E: Inner Transaction fields must be copied using .copy() when assigning to a new local.
        txn = (params5 := itxn.InnerTransaction(type=TransactionType.Payment)).submit() ## E: Inner Transactions cannot be used in assignment expressions.
        return True

    def clear_state_program(self) -> bool:
        return True

    @subroutine
    def cant_pass_inner_txn_params(self, txn: itxn.InnerTransaction) -> None: ## E: Inner Transactions cannot be used as a subroutine argument or return value.
        pass

    @subroutine ## E: Inner Transactions cannot be used as a subroutine argument or return value.
    def cant_return_inner_txn_params(self) -> itxn.InnerTransaction:
        return itxn.InnerTransaction(type=TransactionType.Payment)

## case: test_inner_txn_param_loop_modified

from algopy import Contract, TransactionType, itxn, subroutine


class MyContract(Contract):
    def approval_program(self) -> bool: ## E: Missing return statement  [return]
        params = itxn.InnerTransaction(type=TransactionType.Payment)
        while True:
            txn = params.submit()
            params.set(fee=1) ## E: Inner Transaction fields cannot be modified after submission while in a loop.
            if txn.fee == 1:
                break

    def clear_state_program(self) -> bool:
        return True

## case: test_abi_call_errors

from algopy import arc4, subroutine

class Client(arc4.ARC4Client):

    @arc4.abimethod
    def foo(self, uint: arc4.UInt64) -> None:
        raise NotImplementedError


@subroutine
def wrong_arg_type1() -> None:
    arc4.abi_call(Client.foo, b"") ## E: Invalid algopy.arc4.UInt64 value: b''

@subroutine
def wrong_arg_type2() -> None:
    arc4.abi_call(Client.foo, "") ## E: Invalid algopy.arc4.UInt64 value: ''

@subroutine
def wrong_arg_type3() -> None:
    arc4.abi_call("foo(uint64)void", b"") ## E: Invalid algopy.arc4.UInt64 value: b''

@subroutine
def wrong_arg_type4() -> None:
    arc4.abi_call("foo(uint8)void", 256) ## E: Invalid algopy.arc4.UInt8 value: 256

@subroutine
def wrong_arg_type5() -> None:
    arc4.abi_call("foo", 2 ** 64 + 1) ## E: Invalid algopy.arc4.UInt64 value: 18446744073709551617

@subroutine
def method_selector_mismatch() -> None:
    arc4.abi_call[arc4.UInt64]("foo(uint8)void", 1) ## E: Method selector from args 'foo(uint8)uint64' does not match provided method selector: 'foo(uint8)void'

@subroutine
def allowed_coercions() -> None:
    arc4.abi_call("foo", 256) # value inferred from args
    arc4.abi_call(Client.foo, 1)

## case: test_stale_itxn_array_read
from algopy import (
    ARC4Contract,
    Bytes,
    OnCompleteAction,
    arc4,
    itxn,
    op,
    subroutine,
)

ALWAYS_APPROVE = (
    b"\x09"  # pragma version 9
    b"\x81\x01"  # pushint 1
)

class MyContract(ARC4Contract):

    @arc4.abimethod
    def test1(self) -> None:
        create_app_txn = itxn.ApplicationCall(
            approval_program=ALWAYS_APPROVE,
            clear_state_program=ALWAYS_APPROVE,
            app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
            note=b"different param set",
            fee=0,
        ).submit()

        assert create_app_txn.app_args(0) == b"1", "correct args used 1"

        create_app_txn2 = itxn.ApplicationCall( ## W: Inner Transaction 'create_app_txn' potentially becomes stale here.
            approval_program=ALWAYS_APPROVE,
            clear_state_program=ALWAYS_APPROVE,
            on_completion=OnCompleteAction.DeleteApplication,
            app_args=(Bytes(b"42"),),
            fee=0,
        ).submit()

        assert create_app_txn2.app_args(0) == b"42", "correct args used 2"
        assert create_app_txn.app_args(0) == b"1", "this is an error" ## E: Inner Transaction array field can not be reliably accessed due to other inner transaction  submissions or subroutine calls. Move array field access closer to 'create_app_txn' definition.

        some_sub_that_may_submit_another_inner_txn() ## W: Inner Transaction 'create_app_txn2' potentially becomes stale here.

        assert create_app_txn2.app_args(0) == b"42", "this is an error" ## E: Inner Transaction array field can not be reliably accessed due to other inner transaction  submissions or subroutine calls. Move array field access closer to 'create_app_txn2' definition.

    @arc4.abimethod
    def test2(self) -> None:
        create_app_txn = itxn.ApplicationCall(
            approval_program=ALWAYS_APPROVE,
            clear_state_program=ALWAYS_APPROVE,
            app_args=(Bytes(b"42"), Bytes(b"4"), Bytes(b"5")),
            note=b"different param set",
            fee=0,
        ).submit()

        if create_app_txn.last_log != b"":
            create_app_txn = itxn.ApplicationCall(
                approval_program=ALWAYS_APPROVE,
                clear_state_program=ALWAYS_APPROVE,
                on_completion=OnCompleteAction.DeleteApplication,
                app_args=(Bytes(b"42"),),
                fee=0,
            ).submit()

        assert create_app_txn.app_args(0) == b"42", "correct args used"

        some_sub_that_may_submit_another_inner_txn() ## W: Inner Transaction 'create_app_txn' potentially becomes stale here.

        assert create_app_txn.app_args(0) == b"42", "correct args used" ## E: Inner Transaction array field can not be reliably accessed due to other inner transaction  submissions or subroutine calls. Move array field access closer to 'create_app_txn' definition.

@subroutine
def some_sub_that_may_submit_another_inner_txn() -> None:
    pass

## case: test_non_constant_group_index
from algopy import ARC4Contract, Bytes, Txn, arc4, itxn

ALWAYS_APPROVE = (
    b"\x09"  # pragma version 9
    b"\x81\x01"  # pushint 1
)

class MyContract(ARC4Contract):

    @arc4.abimethod
    def test1(self) -> None:
        txn_1 = itxn.ApplicationCall(
            approval_program=ALWAYS_APPROVE,
            clear_state_program=ALWAYS_APPROVE,
            app_args=(Bytes(b"1"), Bytes(b"2")),
            note=b"first param set",
            fee=0,
        )
        txn_2 = itxn.ApplicationCall(
            approval_program=ALWAYS_APPROVE,
            clear_state_program=ALWAYS_APPROVE,
            app_args=(Bytes(b"3"), Bytes(b"4"), Bytes(b"5")),
            note=b"different param set",
            fee=0,
        )
        if Txn.num_app_args:
            create_1, create_2 = itxn.submit_txns(txn_1, txn_2) ## N: Potential cause of field access with non-constant group index
        else:
            create_2, create_1 = itxn.submit_txns(txn_1, txn_2) ## N: Potential cause of field access with non-constant group index

        assert create_1.num_app_args > 2
        assert create_1.app_args(0) == b"1" ## E: Inner transaction field access with non constant group index, to resolve move field access to same code path where the inner transaction is submitted


## case: test_unassigned_create_itxn

from algopy import *

ALWAYS_APPROVE = (
    b"\x09"  # pragma version 9
    b"\x81\x01"  # pushint 1
)

class FieldTupleContract(ARC4Contract):
    @arc4.abimethod
    def test_assign_tuple(self) -> None:
        itxn.ApplicationCall( ## W: expression result is ignored \
                              ## E: statement has no effect, did you forget to submit?
            approval_program=ALWAYS_APPROVE,
            clear_state_program=ALWAYS_APPROVE,
            on_completion=OnCompleteAction.DeleteApplication,
            app_args=(Bytes(b"1a"), Bytes(b"2a")),
            fee=0,
        )