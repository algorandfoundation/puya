# ruff: noqa
# fmt: off
# type: ignore
## case: test_array_element_support
import typing
from algopy import *

MutableFixed = arc4.StaticArray[arc4.Byte, typing.Literal[8]]
MutableDynamic = arc4.DynamicArray[arc4.UInt64]

class ArrayContract(arc4.ARC4Contract):

    def __init__(self) -> None:
        self.wont_work = ReferenceArray[UInt64]() ## E: type is not suitable for storage

    @arc4.abimethod
    def array_log(self) -> None:
        log(ReferenceArray[UInt64]()) ## E: cannot serialize algopy.ReferenceArray[algopy.UInt64], try using .freeze() to get an immutable array


    @arc4.abimethod
    def array_emit(self) -> None:
        arc4.emit("test", ReferenceArray[UInt64]()) ## E: algopy.ReferenceArray[algopy.UInt64] is not an ARC-4 type and no implicit ARC-4 conversion possible

    @arc4.abimethod
    def array_fixed(self) -> None:
        arr = ReferenceArray[UInt64]()

    @arc4.abimethod
    def array_dynamic(self) -> None:
        arr = ReferenceArray[Bytes]()

    @arc4.abimethod
    def array_nested(self) -> None:
        arr = ReferenceArray[ReferenceArray[Bytes]]() ## E: arrays must have immutable elements

    @arc4.abimethod
    def array_mutable_fixed(self) -> None:
        arr = ReferenceArray[MutableFixed]() ## E: arrays must have immutable elements

    @arc4.abimethod
    def array_mutable_dynamic(self) -> None:
        arr = ReferenceArray[MutableDynamic]() ## E: arrays must have immutable elements

    @arc4.abimethod
    def array_arc4_bool(self) -> None:
        arr = ReferenceArray[arc4.Bool]()

    @arc4.abimethod
    def array_bool(self) -> None:
        arr = ReferenceArray[bool]()

    @arc4.abimethod
    def imm_array_fixed(self) -> None:
        arr = ImmutableArray[UInt64]()

    @arc4.abimethod
    def imm_array_dynamic(self) -> None:
        arr = ImmutableArray[Bytes]()

    @arc4.abimethod
    def imm_array_nested(self) -> None:
        arr = ImmutableArray[ImmutableArray[Bytes]]()

    @arc4.abimethod
    def imm_array_mutable_fixed(self) -> None:
        arr = ImmutableArray[MutableFixed]() ## E: immutable arrays must have immutable elements

    @arc4.abimethod
    def imm_array_mutable_dynamic(self) -> None:
        arr = ImmutableArray[MutableDynamic]() ## E: immutable arrays must have immutable elements

    @arc4.abimethod
    def imm_array_arc4_bool(self) -> None:
        arr = ImmutableArray[arc4.Bool]()

    @arc4.abimethod
    def imm_array_bool(self) -> None:
        arr = ImmutableArray[bool]()

    @arc4.abimethod
    def imm_txn_arg(self, arr: ImmutableArray[gtxn.Transaction]) -> None: ## E: arrays can only contain persistable elements
        pass

    @arc4.abimethod
    def imm_itxn_arg(self, arr: ImmutableArray[itxn.Payment]) -> None: ## E: arrays can only contain persistable elements
        pass

    @arc4.abimethod
    def imm_itxn2_arg(self, arr: ImmutableArray[itxn.PaymentInnerTransaction]) -> None: ## E: arrays can only contain persistable elements
        pass

    @arc4.abimethod ## E: invalid type for an ARC-4 method: algopy.ReferenceArray[algopy.gtxn.Transaction]
    def arr_txn_arg(self, arr: ReferenceArray[gtxn.Transaction]) -> None:
        pass

    @arc4.abimethod ## E: invalid type for an ARC-4 method: algopy.ReferenceArray[algopy.itxn.Payment]
    def arr_itxn_arg(self, arr: ReferenceArray[itxn.Payment]) -> None:
        pass

    @arc4.abimethod ## E: invalid type for an ARC-4 method: algopy.ReferenceArray[algopy.itxn.PaymentInnerTransaction]
    def arr_itxn2_arg(self, arr: ReferenceArray[itxn.PaymentInnerTransaction]) -> None:
        pass

    @arc4.abimethod ## E: invalid type for an ARC-4 method: algopy.ReferenceArray[algopy.Asset]
    def arr_asset_arg(self, arr: ReferenceArray[Asset]) -> None:
        pass

    @arc4.abimethod ## E: invalid type for an ARC-4 method: algopy.ReferenceArray[algopy.Account]
    def arr_account_arg(self, arr: ReferenceArray[Account]) -> None:
        pass

    @arc4.abimethod()
    def test_reference_array_extend_with_arc4_bool(self) -> None:
        arr = ReferenceArray[arc4.Bool]()
        dyn_arr = arc4.DynamicArray[arc4.Bool]()
        arr.extend(dyn_arr) ## E: extending a reference array with an ARC-4 encoded bool type is not supported

## case: test_imm_array_txn
from algopy import *

class MyContract(arc4.ARC4Contract):

    @arc4.abimethod
    def imm_txn_expr(self, txn: gtxn.Transaction) -> None:
        arr = ImmutableArray[gtxn.Transaction]() ## E: arrays can only contain persistable elements
        arr = arr.append(txn)

## case: test_imm_array_itxn
from algopy import *

class MyContract(arc4.ARC4Contract):
    @arc4.abimethod
    def imm_itxn_expr(self) -> None:
        arr = ImmutableArray[itxn.Payment]() ## E: arrays can only contain persistable elements

## case: test_imm_array_itxn_result
from algopy import *

class MyContract(arc4.ARC4Contract):
    @arc4.abimethod
    def imm_itxn2_expr(self) -> None:
        arr = ImmutableArray[itxn.PaymentInnerTransaction]() ## E: arrays can only contain persistable elements


## case: test_array_txn
from algopy import *

class MyContract(arc4.ARC4Contract):

    @arc4.abimethod
    def imm_txn_expr(self, txn: gtxn.Transaction) -> None:
        arr = ReferenceArray[gtxn.Transaction]()
        arr.append(txn)
        imm_arr = arr.freeze() ## E: arrays can only contain persistable elements

## case: test_array_itxn
from algopy import *

class MyContract(arc4.ARC4Contract):
    @arc4.abimethod
    def imm_itxn_expr(self) -> None:
        arr = ReferenceArray[itxn.Payment]() ## E: unencodable type
        pay = itxn.Payment(receiver=Txn.sender)
        arr.append(pay)

## case: test_array_itxn_result
from algopy import *

class MyContract(arc4.ARC4Contract):
    @arc4.abimethod
    def imm_itxn2_expr(self) -> None:
        arr = ReferenceArray[itxn.PaymentInnerTransaction]() ## E: unencodable type


## case: test_fixed_array_errors
import typing
from algopy import *

FixedUInt64Of3 = FixedArray[UInt64, typing.Literal[3]]

class MyContract(arc4.ARC4Contract):
    @arc4.abimethod
    def truthiness_is_static(self, arr: FixedUInt64Of3) -> None:
        assert arr ## E: expression is always True

    @arc4.abimethod
    def full_requires_params(self, value: UInt64) -> FixedUInt64Of3:
        return FixedArray.full(value) ## E: generic type requires parameters

    @arc4.abimethod
    def invalid_arg_element_types(self, tup: tuple[String, String, String]) -> FixedUInt64Of3:
        return FixedUInt64Of3(tup) # type: ignore[arg-type] ## E: iterable element type does not match collection type

    @arc4.abimethod
    def no_implicit_arc4_conversion(self) -> FixedUInt64Of3:
        return FixedUInt64Of3(arc4.StaticArray(arc4.UInt64(0), arc4.UInt64(1), arc4.UInt64(2))) # type: ignore[arg-type] ## E: iterable element type does not match collection type

    @arc4.abimethod
    def non_iterable_arg_type(self) -> FixedUInt64Of3:
        return FixedUInt64Of3(UInt64(1)) # type: ignore[arg-type] ## E: expression is not iterable

    @arc4.abimethod
    def wrong_size(self) -> FixedUInt64Of3:
        return FixedUInt64Of3(()) ## E: cannot determine item type of empty tuple

    @arc4.abimethod
    def wrong_size2(self) -> FixedUInt64Of3:
        return FixedUInt64Of3((UInt64(1),)) ## E: argument has incorrect length

## case: modify_immutable_array
from algopy import *

@subroutine
def no() -> None:
    arr = ImmutableArray[tuple[UInt64, UInt64]]()
    assert arr.length == 0

    for i in urange(5):
        arr = arr.append((i + 1, i + 2))

    arr[0] = (UInt64(123), UInt64(345))  # type: ignore[index] ## E: expression is not valid as an assignment target - object is immutable


## case: missing_type_args

from algopy import *

@subroutine
def dyn_arr() -> None:
    arr = arc4.DynamicArray() # type: ignore[var-annotated] ## E: empty arrays require a type annotation to be instantiated

@subroutine
def static_arr() -> None:
    arr = arc4.StaticArray() # type: ignore[var-annotated] ## E: empty arrays require a type annotation to be instantiated

@subroutine
def arr() -> None:
    arr = Array() # type: ignore[var-annotated] ## E: empty arrays require a type annotation to be instantiated

@subroutine
def fixed_arr() -> None:
    arr = FixedArray(()) # type: ignore[var-annotated] ## E: cannot determine item type of empty tuple

@subroutine
def fixed_arr2() -> None:
    dyn_arr = Array[UInt64]()
    arr = FixedArray(dyn_arr) # type: ignore[var-annotated] ## E: requires a statically sized argument


## case: array_init

from algopy import *

@subroutine
def copy() -> None:
    arr = Array(Bytes()) ## E: unsupported collection type
