# ruff: noqa
# fmt: off
# type: ignore
## case: test_array_element_support
import typing
from algopy import *

MutableFixed = arc4.StaticArray[arc4.Byte, typing.Literal[8]]
MutableDynamic = arc4.DynamicArray[arc4.UInt64]

class ArrayContract(arc4.ARC4Contract):

    def __init__(self) -> None:
        self.wont_work = Array[UInt64]() ## E: type is not suitable for storage

    @arc4.abimethod
    def array_log(self) -> None:
        log(Array[UInt64]()) ## E: cannot serialize algopy.Array[algopy.UInt64], try using .freeze() to get an immutable array


    @arc4.abimethod
    def array_emit(self) -> None:
        arc4.emit("test", Array[UInt64]()) ## E: algopy.Array[algopy.UInt64] is not an ARC-4 type and no implicit ARC-4 conversion possible

    @arc4.abimethod
    def array_fixed(self) -> None:
        arr = Array[UInt64]()

    @arc4.abimethod
    def array_dynamic(self) -> None:
        arr = Array[Bytes]()

    @arc4.abimethod
    def array_nested(self) -> None:
        arr = Array[Array[Bytes]]() ## E: arrays must have immutable elements

    @arc4.abimethod
    def array_mutable_fixed(self) -> None:
        arr = Array[MutableFixed]() ## E: arrays must have immutable elements

    @arc4.abimethod
    def array_mutable_dynamic(self) -> None:
        arr = Array[MutableDynamic]() ## E: arrays must have immutable elements

    @arc4.abimethod
    def array_arc4_bool(self) -> None:
        arr = Array[arc4.Bool]()

    @arc4.abimethod
    def array_bool(self) -> None:
        arr = Array[bool]()

    @arc4.abimethod
    def imm_array_fixed(self) -> None:
        arr = ImmutableArray[UInt64]()

    @arc4.abimethod
    def imm_array_dynamic(self) -> None:
        arr = ImmutableArray[Bytes]()

    @arc4.abimethod
    def imm_array_nested(self) -> None:
        arr = ImmutableArray[ImmutableArray[Bytes]]()

    @arc4.abimethod
    def imm_array_mutable_fixed(self) -> None:
        arr = ImmutableArray[MutableFixed]() ## E: immutable arrays must have immutable elements

    @arc4.abimethod
    def imm_array_mutable_dynamic(self) -> None:
        arr = ImmutableArray[MutableDynamic]() ## E: immutable arrays must have immutable elements

    @arc4.abimethod
    def imm_array_arc4_bool(self) -> None:
        arr = ImmutableArray[arc4.Bool]()

    @arc4.abimethod
    def imm_array_bool(self) -> None:
        arr = ImmutableArray[bool]()

    @arc4.abimethod
    def imm_txn_arg(self, arr: ImmutableArray[gtxn.Transaction]) -> None: ## E: arrays can only contain persistable elements
        pass

    @arc4.abimethod
    def imm_itxn_arg(self, arr: ImmutableArray[itxn.Payment]) -> None: ## E: arrays can only contain persistable elements
        pass

    @arc4.abimethod
    def imm_itxn2_arg(self, arr: ImmutableArray[itxn.PaymentInnerTransaction]) -> None: ## E: arrays can only contain persistable elements
        pass

    @arc4.abimethod ## E: invalid type for an ARC-4 method: algopy.Array[algopy.gtxn.Transaction]
    def arr_txn_arg(self, arr: Array[gtxn.Transaction]) -> None:
        pass

    @arc4.abimethod ## E: invalid type for an ARC-4 method: algopy.Array[algopy.itxn.Payment]
    def arr_itxn_arg(self, arr: Array[itxn.Payment]) -> None:
        pass

    @arc4.abimethod ## E: invalid type for an ARC-4 method: algopy.Array[algopy.itxn.PaymentInnerTransaction]
    def arr_itxn2_arg(self, arr: Array[itxn.PaymentInnerTransaction]) -> None:
        pass

    @arc4.abimethod ## E: invalid type for an ARC-4 method: algopy.Array[algopy.Asset]
    def arr_asset_arg(self, arr: Array[Asset]) -> None:
        pass

    @arc4.abimethod ## E: invalid type for an ARC-4 method: algopy.Array[algopy.Account]
    def arr_account_arg(self, arr: Array[Account]) -> None:
        pass

    @arc4.abimethod()
    def test_reference_array_extend_with_arc4_bool(self) -> None:
        arr = Array[arc4.Bool]()
        dyn_arr = arc4.DynamicArray[arc4.Bool]()
        arr.extend(dyn_arr) ## E: extending a reference array with an ARC-4 encoded bool type is not supported

## case: test_imm_array_txn
from algopy import *

class MyContract(arc4.ARC4Contract):

    @arc4.abimethod
    def imm_txn_expr(self, txn: gtxn.Transaction) -> None:
        arr = ImmutableArray[gtxn.Transaction]() ## E: arrays can only contain persistable elements
        arr = arr.append(txn)

## case: test_imm_array_itxn
from algopy import *

class MyContract(arc4.ARC4Contract):
    @arc4.abimethod
    def imm_itxn_expr(self) -> None:
        arr = ImmutableArray[itxn.Payment]() ## E: arrays can only contain persistable elements

## case: test_imm_array_itxn_result
from algopy import *

class MyContract(arc4.ARC4Contract):
    @arc4.abimethod
    def imm_itxn2_expr(self) -> None:
        arr = ImmutableArray[itxn.PaymentInnerTransaction]() ## E: arrays can only contain persistable elements


## case: test_array_txn
from algopy import *

class MyContract(arc4.ARC4Contract):

    @arc4.abimethod
    def imm_txn_expr(self, txn: gtxn.Transaction) -> None:
        arr = Array[gtxn.Transaction]()
        arr.append(txn)
        imm_arr = arr.freeze() ## E: arrays can only contain persistable elements

## case: test_array_itxn
from algopy import *

class MyContract(arc4.ARC4Contract):
    @arc4.abimethod
    def imm_itxn_expr(self) -> None:
        arr = Array[itxn.Payment]() ## E: unencodable type
        pay = itxn.Payment(receiver=Txn.sender)
        arr.append(pay)

## case: test_array_itxn_result
from algopy import *

class MyContract(arc4.ARC4Contract):
    @arc4.abimethod
    def imm_itxn2_expr(self) -> None:
        arr = Array[itxn.PaymentInnerTransaction]() ## E: unencodable type
