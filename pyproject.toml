[tool.poetry]
name = "puya"
version = "0.1.3"
description = "An optimising Python to TEAL compiler"
authors = ["Algorand Foundation <contact@algorand.foundation>"]
readme = "README.md"
packages = [
    { include = "puya", from = "src" },
    { include = "puyapy-stubs", from = "src" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Compilers",
]

[tool.poetry.dependencies]
python = "^3.12"
typing-extensions = "^4.8.0"
attrs = "^23.1.0"
structlog = "^23.2.0"
networkx = "^3.1"
docstring-parser = "^0.15"
pycryptodomex = ">=3.6.0,<4"
immutabledict = "^4.0.0"
# vendored mypy dependencies
mypy_extensions = "^1.0.0"

[tool.poetry.group.cd]
optional = true

[tool.poetry.group.cd.dependencies]
python-semantic-release = "^8.5.0"

[tool.poetry.group.dev.dependencies]
black = [
    {extras = ["d"], version = "^23.10.1", markers = "sys_platform != 'win32'"},
    {version = "^23.10.1", markers = "sys_platform == 'win32'"}
]
mypy = "1.7.0"
ruff = "^0.1.3"
pre-commit = "^3.3.3"
pytest = "^7.4.0"
pytest-xdist = {extras = ["psutil"], version = "^3.3.1"}
cattrs = "^23.1.2"
py-algorand-sdk = "^2.4.0"
ruff-lsp = "^0.0.45"
pytest-cov = "^4.1.0"
pip-audit = "^2.6.1"
algokit-utils = "^1.3.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
puyapy = "puya.__main__:main"

[tool.pytest.ini_options]
addopts = "-n auto --cov-config=.coveragerc"
testpaths = [
    "tests"
]

[tool.black]
line-length = 99
force-exclude = "src/puya/(_typeshed|_vendor)"

[tool.mypy]
python_version = "3.12"
strict = true
untyped_calls_exclude = [
    "algosdk",
]
exclude = [
    "src/puya/_typeshed",
    "src/puya/_vendor",
]

[[tool.mypy.overrides]]
module = ["puyapy", "puyapy.*"]
disallow_any_unimported = true
disallow_any_expr = true
disallow_any_decorated = true
disallow_any_explicit = true

[[tool.mypy.overrides]]
module = ["algosdk", "algosdk.*"]
disallow_untyped_calls = false

[tool.ruff]
line-length = 99
select = [
      # all possible codes as of this ruff version are listed here,
      # ones we don't want/need are commented out to make it clear
      # which have been omitted on purpose vs which ones get added
      # in new ruff releases and should be considered for enabling
      "F",      # pyflakes
      "E", "W", # pycodestyle
      "C90",    # mccabe
      "I",      # isort
      "N",      # PEP8 naming
      "UP",     # pyupgrade
      "YTT",    # flake8-2020
      "ANN",    # flake8-annotations
      # "S",    # flake8-bandit
      # "BLE",  # flake8-blind-except
      "FBT",    # flake8-boolean-trap
      "B",      # flake8-bugbear
      "A",      # flake8-builtins
      # "COM",  # flake8-commas
      "C4",     # flake8-comprehensions
      "DTZ",    # flake8-datetimez
      "T10",    # flake8-debugger
      # "DJ",   # flake8-django
      # "EM",   # flake8-errmsg
      # "EXE",  # flake8-executable
      "ISC",    # flake8-implicit-str-concat
      "ICN",    # flake8-import-conventions
      # "G",    # flake8-logging-format
      # "INP",  # flake8-no-pep420
      "PIE",    # flake8-pie
      "T20",    # flake8-print
      "PYI",    # flake8-pyi
      "PT",     # flake8-pytest-style
      "Q",      # flake8-quotes
      "RSE",    # flake8-raise
      # "RET",    # flake8-return
      "SLF",    # flake8-self
      "SIM",    # flake8-simplify
      "TID",    # flake8-tidy-imports
      "TCH",    # flake8-type-checking
      "ARG",    # flake8-unused-arguments
      "PTH",    # flake8-use-pathlib
      "ERA",    # eradicate
      # "PD",   # pandas-vet
      "PGH",    # pygrep-hooks
      "PL",     # pylint
      # "TRY",  # tryceratops
      # "NPY",  # NumPy-specific rules
      "RUF",    # Ruff-specific rules
]
ignore = [
    "ANN101",  # no type for self
    "ANN102",  # no type for cls
    "SIM108",  # allow if-else in place of ternary
    "PLR2004", # magic values... can't configure to ignore simple low value ints like 2
    "PLW2901", # allow updating loop value...
    "PYI025",  # I can tell the difference between set and Set thank you very much
    # TODO: REMOVE ALL THE BELOW vvv
    "ERA001",  # don't automatically remove commented out code
    "T201",    # allow prints (FOR NOW)
    # TODO: REMOVE ALL THE BELOW AFTER REFACTORING BUILDING CODE vvv
    "C901", # is too complex (> 10)
    "PLR0911", # Too many return statements (> 6)
    "PLR0912", # Too many branches (> 12)
    "PLR0913", # Too many arguments to function call (> 5)
    "PLR0915", # Too many statements (> 50)

]
unfixable = [
    # TODO: REMOVE THE BELOW
    # "ERA001", # don't automatically remove commented out code
    "F841", # don't delete unused local variables automatically
    "B011", # don't automatically convert assert False -> raise AssertionError - we want the former
            # in any smart contracts in this repo
]
extend-exclude = [
    "src/puya/_typeshed",
    "src/puya/_vendor",
]
[tool.ruff.per-file-ignores]
"src/**" = [
    "PT",       # no pytest rules
]
"src/puyapy-stubs/**" = [
    "PYI021",   # allow docstrings in stubs
    "PYI053",   # allow "docstrings" in overloads
]
"examples/**" = [
    "PT",       # no pytest rules
    "B011",     # allow assert False, "msg"
]
"src/puya/awst_build/eb/**" = [
    # TODO: remove the below
    "ARG002",
]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true
suppress-none-returning = true
mypy-init-return = true

[tool.ruff.isort]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
major_on_zero = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "main"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

