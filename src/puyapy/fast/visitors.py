from __future__ import annotations  # needed to break import cycle

import abc
import typing

if typing.TYPE_CHECKING:
    from puyapy.fast import nodes


class StatementVisitor[T](abc.ABC):
    @abc.abstractmethod
    def visit_function_def(self, func_def: nodes.FunctionDef) -> T: ...
    @abc.abstractmethod
    def visit_class_def(self, class_def: nodes.ClassDef) -> T: ...
    @abc.abstractmethod
    def visit_module_import(self, module_import: nodes.ModuleImport) -> T: ...
    @abc.abstractmethod
    def visit_from_import(self, from_import: nodes.FromImport) -> T: ...
    @abc.abstractmethod
    def visit_expression_statement(self, stmt: nodes.ExpressionStatement) -> T: ...
    @abc.abstractmethod
    def visit_return(self, ret: nodes.Return) -> T: ...
    @abc.abstractmethod
    def visit_delete(self, delete: nodes.Delete) -> T: ...
    @abc.abstractmethod
    def visit_assign(self, assign: nodes.Assign) -> T: ...
    @abc.abstractmethod
    def visit_multi_assign(self, multi_assign: nodes.MultiAssign) -> T: ...
    @abc.abstractmethod
    def visit_aug_assign(self, aug_assign: nodes.AugAssign) -> T: ...
    @abc.abstractmethod
    def visit_annotation(self, annotation: nodes.AnnotationStatement) -> T: ...
    @abc.abstractmethod
    def visit_for(self, for_stmt: nodes.For) -> T: ...


class ExpressionVisitor[T](abc.ABC):
    @abc.abstractmethod
    def visit_constant(self, constant: nodes.Constant) -> T: ...
    @abc.abstractmethod
    def visit_name(self, name: nodes.Name) -> T: ...
    @abc.abstractmethod
    def visit_attribute(self, attribute: nodes.Attribute) -> T: ...
    @abc.abstractmethod
    def visit_subscript(self, subscript: nodes.Subscript) -> T: ...
