from __future__ import annotations  # needed to break import cycle

import abc
import typing

if typing.TYPE_CHECKING:
    from puyapy.fast import nodes


class StatementVisitor[T](abc.ABC):
    @abc.abstractmethod
    def visit_function_def(self, func_def: nodes.FunctionDef) -> T: ...
    @abc.abstractmethod
    def visit_class_def(self, class_def: nodes.ClassDef) -> T: ...
    @abc.abstractmethod
    def visit_module_import(self, module_import: nodes.ModuleImport) -> T: ...
    @abc.abstractmethod
    def visit_from_import(self, from_import: nodes.FromImport) -> T: ...
    @abc.abstractmethod
    def visit_expression_statement(self, stmt: nodes.ExpressionStatement) -> T: ...
    @abc.abstractmethod
    def visit_return(self, ret: nodes.Return) -> T: ...
    @abc.abstractmethod
    def visit_delete(self, delete: nodes.Delete) -> T: ...
    @abc.abstractmethod
    def visit_assign(self, assign: nodes.Assign) -> T: ...
    @abc.abstractmethod
    def visit_multi_assign(self, multi_assign: nodes.MultiAssign) -> T: ...
    @abc.abstractmethod
    def visit_aug_assign(self, aug_assign: nodes.AugAssign) -> T: ...
    @abc.abstractmethod
    def visit_annotation(self, annotation: nodes.AnnotationStatement) -> T: ...
    @abc.abstractmethod
    def visit_for(self, for_stmt: nodes.For) -> T: ...
    @abc.abstractmethod
    def visit_while(self, while_stmt: nodes.While) -> T: ...
    @abc.abstractmethod
    def visit_if(self, if_stmt: nodes.If) -> T: ...
    @abc.abstractmethod
    def visit_assert(self, assert_stmt: nodes.Assert) -> T: ...
    @abc.abstractmethod
    def visit_pass(self, pass_stmt: nodes.Pass) -> T: ...
    @abc.abstractmethod
    def visit_break(self, break_stmt: nodes.Break) -> T: ...
    @abc.abstractmethod
    def visit_continue(self, continue_stmt: nodes.Continue) -> T: ...
    @abc.abstractmethod
    def visit_match(self, match_stmt: nodes.Match) -> T: ...


class ExpressionVisitor[T](abc.ABC):
    @abc.abstractmethod
    def visit_constant(self, constant: nodes.Constant) -> T: ...
    @abc.abstractmethod
    def visit_name(self, name: nodes.Name) -> T: ...
    @abc.abstractmethod
    def visit_attribute(self, attribute: nodes.Attribute) -> T: ...
    @abc.abstractmethod
    def visit_subscript(self, subscript: nodes.Subscript) -> T: ...
    @abc.abstractmethod
    def visit_bool_op(self, bool_op: nodes.BoolOp) -> T: ...
    @abc.abstractmethod
    def visit_named_expr(self, named_expr: nodes.NamedExpr) -> T: ...
    @abc.abstractmethod
    def visit_bin_op(self, bin_op: nodes.BinOp) -> T: ...
    @abc.abstractmethod
    def visit_unary_op(self, unary_op: nodes.UnaryOp) -> T: ...
    @abc.abstractmethod
    def visit_if_exp(self, if_exp: nodes.IfExp) -> T: ...
    @abc.abstractmethod
    def visit_compare(self, compare: nodes.Compare) -> T: ...
    @abc.abstractmethod
    def visit_call(self, call: nodes.Call) -> T: ...
    @abc.abstractmethod
    def visit_formatted_value(self, formatted_value: nodes.FormattedValue) -> T: ...
    @abc.abstractmethod
    def visit_joined_str(self, joined_str: nodes.JoinedStr) -> T: ...
    @abc.abstractmethod
    def visit_tuple_expr(self, tuple_expr: nodes.TupleExpr) -> T: ...
    @abc.abstractmethod
    def visit_list_expr(self, list_expr: nodes.ListExpr) -> T: ...
    @abc.abstractmethod
    def visit_dict_expr(self, dict_expr: nodes.DictExpr) -> T: ...


class MatchPatternVisitor[T](abc.ABC):
    @abc.abstractmethod
    def visit_match_value(self, match_value: nodes.MatchValue) -> T: ...
    @abc.abstractmethod
    def visit_match_sequence(self, match_sequence: nodes.MatchSequence) -> T: ...
    @abc.abstractmethod
    def visit_match_singleton(self, match_singleton: nodes.MatchSingleton) -> T: ...
    @abc.abstractmethod
    def visit_match_star(self, match_star: nodes.MatchStar) -> T: ...
    @abc.abstractmethod
    def visit_match_mapping(self, match_mapping: nodes.MatchMapping) -> T: ...
    @abc.abstractmethod
    def visit_match_class(self, match_class: nodes.MatchClass) -> T: ...
    @abc.abstractmethod
    def visit_match_as(self, match_as: nodes.MatchAs) -> T: ...
    @abc.abstractmethod
    def visit_match_or(self, match_or: nodes.MatchOr) -> T: ...
