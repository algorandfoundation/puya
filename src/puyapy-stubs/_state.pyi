import typing

from puyapy import Account, UInt64

_T = typing.TypeVar("_T")

class LocalState(typing.Generic[_T]):
    """Local state associated with the application and an account"""

    def __init__(self, type_: type[_T], /) -> None: ...
    def __getitem__(self, account: Account | UInt64 | int) -> _T: ...
    def __setitem__(self, account: Account | UInt64 | int, value: _T) -> None: ...
    def __delitem__(self, account: Account | UInt64 | int) -> None: ...
    def __contains__(self, account: Account | UInt64 | int) -> bool: ...
    def get(self, account: Account | UInt64 | int, default: _T) -> _T: ...
    def maybe(self, account: Account | UInt64 | int) -> tuple[_T, bool]: ...

class GlobalState(typing.Generic[_T]):
    """Global state associated with the application"""

    @typing.overload
    def __init__(self, type_: type[_T], /) -> None: ...
    @typing.overload
    def __init__(self, initial_value: _T, /) -> None: ...
    @property
    def value(self) -> _T: ...
    @value.setter
    def value(self, value: _T) -> None: ...
    @value.deleter
    def value(self) -> None: ...
    def __bool__(self) -> bool: ...
    """Returns True if the key has a value set, regardless of the truthiness of that value"""
    def get(self, default: _T) -> _T: ...
    def maybe(self) -> tuple[_T, bool]: ...
